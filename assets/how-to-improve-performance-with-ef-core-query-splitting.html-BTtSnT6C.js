import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,d as s,f as a,b as d,t as m,n as h,g as k,w as t,r as p,o as g,e as o}from"./app-BVguHYKu.js";const v={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"};function f(i,n){const l=p("VPCard"),e=p("router-link"),r=p("SiteInfo");return g(),u("div",null,[s("h1",y,[s("a",w,[s("span",null,m(i.$frontmatter.title)+" 관련",1)])]),a(l,h(k({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",b,[s("ul",null,[s("li",null,[a(e,{to:"#what-was-the-problem-with-this-query"},{default:t(()=>n[0]||(n[0]=[o("What Was The Problem With This Query?")])),_:1,__:[0]})]),s("li",null,[a(e,{to:"#query-splitting-to-the-rescue"},{default:t(()=>n[1]||(n[1]=[o("Query Splitting To The Rescue")])),_:1,__:[1]})]),s("li",null,[a(e,{to:"#turning-on-query-splitting-for-all-queries"},{default:t(()=>n[2]||(n[2]=[o("Turning On Query Splitting For All Queries")])),_:1,__:[2]})]),s("li",null,[a(e,{to:"#what-you-should-know-about-query-splitting"},{default:t(()=>n[3]||(n[3]=[o("What You Should Know About Query Splitting")])),_:1,__:[3]})])])]),n[4]||(n[4]=s("hr",null,null,-1)),a(r,{name:"How To Improve Performance With EF Core Query Splitting",desc:"I recently ran into an issue with Entity Framework Core. The query I was running was constantly timing out. So I used a new EF Core feature called Query Splitting to significantly improve my performance.",url:"https://milanjovanovic.tech/blog/how-to-improve-performance-with-ef-core-query-splitting/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://www.milanjovanovic.tech/blog-covers/mnw_003.png"}),n[5]||(n[5]=d(`<p>I recently ran into an issue with <strong>Entity Framework Core</strong>.</p><p>The query I was running was constantly timing out.</p><p>I tried to scale up the application server, and it didn&#39;t help.</p><p>I tried to scale up the database server, and it didn&#39;t help.</p><p>So how did I solve the problem?</p><hr><h2 id="what-was-the-problem-with-this-query" tabindex="-1"><a class="header-anchor" href="#what-was-the-problem-with-this-query"><span>What Was The Problem With This Query?</span></a></h2><p>I&#39;m working on an application in the e-commerce domain. To be specific, it&#39;s an order management system for a kitchen cabinet manufacturer.</p><p>The table that I frequently query on is the <code>Orders</code> table. The <code>Order</code> can have one or more <code>LineItems</code>. A typical <code>Order</code> will contain 50 <code>LineItems</code>. Also, <code>LineItems</code> have a table that contains the valid dimensions - <code>LineItemDimensions</code>.</p><p>This is the query I was trying to run:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">dbContext</span>
<span class="line">    <span class="token punctuation">.</span>Orders</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>order <span class="token operator">=&gt;</span> order<span class="token punctuation">.</span>LineItems<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ThenInclude</span><span class="token punctuation">(</span>lineItem <span class="token operator">=&gt;</span> lineItem<span class="token punctuation">.</span>Dimensions<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>order <span class="token operator">=&gt;</span> order<span class="token punctuation">.</span>Id <span class="token operator">==</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When EF Core converts this into SQL, this is what it will send to the database:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> o<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> li<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token operator">*</span></span>
<span class="line"><span class="token keyword">FROM</span> Orders o</span>
<span class="line"><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> LineItems li <span class="token keyword">ON</span> li<span class="token punctuation">.</span>OrderId <span class="token operator">=</span> o<span class="token punctuation">.</span>Id</span>
<span class="line"><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> LineItemDimensions d <span class="token keyword">ON</span> d<span class="token punctuation">.</span>LineItemId <span class="token operator">=</span> li<span class="token punctuation">.</span>Id</span>
<span class="line"><span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>Id <span class="token operator">=</span> <span class="token variable">@orderId</span></span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> o<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> li<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> d<span class="token punctuation">.</span>Id<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In most cases, this query will execute just fine.</p><p>However, in my situation I was running into the problem of <em>Cartesian Explosion</em>. This is mainly because of the join to the <code>LineItemDimensions</code> table. And this is what&#39;s causing my query to fail, and time out.</p><p>So how did I solve this problem?</p><hr><h2 id="query-splitting-to-the-rescue" tabindex="-1"><a class="header-anchor" href="#query-splitting-to-the-rescue"><span>Query Splitting To The Rescue</span></a></h2><p>With the release of <strong>EF Core 5.0</strong> we got a new feature called <strong>Query Splitting</strong>. This allows us to specify that a given LINQ query should be split into multiple <code>SQL</code> queries.</p><p>To use <strong>Query Splitting</strong>, all you need to do is call the <code>AsSplitQuery</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">dbContext</span>
<span class="line">    <span class="token punctuation">.</span>Orders</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>order <span class="token operator">=&gt;</span> order<span class="token punctuation">.</span>LineItems<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ThenInclude</span><span class="token punctuation">(</span>lineItem <span class="token operator">=&gt;</span> lineItem<span class="token punctuation">.</span>Dimensions<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AsSplitQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>order <span class="token operator">=&gt;</span> order<span class="token punctuation">.</span>Id <span class="token operator">==</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this case, EF Core will generate the following SQL queries:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> o<span class="token punctuation">.</span><span class="token operator">*</span></span>
<span class="line"><span class="token keyword">FROM</span> Orders o</span>
<span class="line"><span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>Id <span class="token operator">=</span> <span class="token variable">@orderId</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">SELECT</span> li<span class="token punctuation">.</span><span class="token operator">*</span></span>
<span class="line"><span class="token keyword">FROM</span> LineItems li</span>
<span class="line"><span class="token keyword">JOIN</span> Orders o <span class="token keyword">ON</span> li<span class="token punctuation">.</span>OrderId <span class="token operator">=</span> o<span class="token punctuation">.</span>Id</span>
<span class="line"><span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>Id <span class="token operator">=</span> <span class="token variable">@orderId</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">SELECT</span> d<span class="token punctuation">.</span><span class="token operator">*</span></span>
<span class="line"><span class="token keyword">FROM</span> LineItemDimensions d</span>
<span class="line"><span class="token keyword">JOIN</span> LineItems li <span class="token keyword">ON</span> d<span class="token punctuation">.</span>LineItemId <span class="token operator">=</span> li<span class="token punctuation">.</span>Id</span>
<span class="line"><span class="token keyword">JOIN</span> Orders o <span class="token keyword">ON</span> li<span class="token punctuation">.</span>OrderId <span class="token operator">=</span> o<span class="token punctuation">.</span>Id</span>
<span class="line"><span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>Id <span class="token operator">=</span> <span class="token variable">@orderId</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice that for each <code>Include</code> statement we have a separate <code>SQL</code> query. The benefit here is that we are not duplicating data when fetching from the database, as we were in the previous case.</p><hr><h2 id="turning-on-query-splitting-for-all-queries" tabindex="-1"><a class="header-anchor" href="#turning-on-query-splitting-for-all-queries"><span>Turning On Query Splitting For All Queries</span></a></h2><p>You can enable <strong>Query Splitting</strong> at the database context level. When configuring your database context you need to call the <code>UseQuerySplittingBehavior</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApplicationDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line">    options<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&quot;CONNECTION_STRING&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span><span class="token function">UseQuerySplittingBehavior</span><span class="token punctuation">(</span></span>
<span class="line">            QuerySplittingBehavior<span class="token punctuation">.</span>SplitQuery<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will cause all queries that EF Core generates to be split queries. To revert back to a single query, you need to call the <code>AsSingleQuery</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">dbContext</span>
<span class="line">    <span class="token punctuation">.</span>Orders</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>LineItems<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ThenInclude</span><span class="token punctuation">(</span>li <span class="token operator">=&gt;</span> li<span class="token punctuation">.</span>Dimensions<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AsSingleQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>Id <span class="token operator">==</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="what-you-should-know-about-query-splitting" tabindex="-1"><a class="header-anchor" href="#what-you-should-know-about-query-splitting"><span>What You Should Know About Query Splitting</span></a></h2><p>Although query splitting is an excellent addition to EF Core, there are a few things you need to be aware of.</p><p>There is no consistency guarantee for multiple SQL queries. You may run into a problem if you have a concurrent update going through at the same time when you query your data. To mitigate this, you can wrap the queries inside of a transaction, but this will only introduce performance issues elsewhere.</p><p>Each query will require one network round trip. This can degrade performance if your latency to the database is high.</p><p>Now that you are armed with this knowledge, go and make your EF queries faster!</p>`,36))])}const S=c(v,[["render",f]]),q=JSON.parse('{"path":"/milanjovanovic.tech/how-to-improve-performance-with-ef-core-query-splitting.html","title":"How To Improve Performance With EF Core Query Splitting","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How To Improve Performance With EF Core Query Splitting","description":"Article(s) > How To Improve Performance With EF Core Query Splitting","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How To Improve Performance With EF Core Query Splitting\\",\\"image\\":[\\"https://www.milanjovanovic.tech/blog-covers/mnw_003.png\\"],\\"datePublished\\":\\"2022-09-17T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-to-improve-performance-with-ef-core-query-splitting.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How To Improve Performance With EF Core Query Splitting"}],["meta",{"property":"og:description","content":"Article(s) > How To Improve Performance With EF Core Query Splitting"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.milanjovanovic.tech/blog-covers/mnw_003.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.milanjovanovic.tech/blog-covers/mnw_003.png"}],["meta",{"name":"twitter:image:alt","content":"How To Improve Performance With EF Core Query Splitting"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-09-17T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How To Improve Performance With EF Core Query Splitting"},{"property":"og:description","content":"How To Improve Performance With EF Core Query Splitting"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-to-improve-performance-with-ef-core-query-splitting.html"}]],"prev":"/programming/cs/articles/README.md","date":"2022-09-17T00:00:00.000Z","isOriginal":false,"cover":"https://www.milanjovanovic.tech/blog-covers/mnw_003.png"},"git":{},"readingTime":{"minutes":2.6,"words":781},"filePathRelative":"milanjovanovic.tech/how-to-improve-performance-with-ef-core-query-splitting.md"}');export{S as comp,q as data};
