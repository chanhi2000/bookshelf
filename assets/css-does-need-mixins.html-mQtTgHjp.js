import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as n,f as e,b as k,a as v,t as g,n as o,g as c,e as a,r as t,o as h}from"./app-BVguHYKu.js";const b={},y={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},S={href:"https://caniuse.com/css-container-queries-style",target:"_blank",rel:"noopener noreferrer"},w={href:"https://css.oddbird.net/sasslike/mixins-functions/",target:"_blank",rel:"noopener noreferrer"};function x(l,s){const i=t("VPCard"),u=t("SiteInfo"),p=t("VPIcon"),r=t("CodePen");return h(),m("div",null,[n("h1",y,[n("a",f,[n("span",null,g(l.$frontmatter.title)+" 관련",1)])]),e(i,o(c({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s[6]||(s[6]=n("nav",{class:"table-of-contents"},[n("ul")],-1)),s[7]||(s[7]=n("hr",null,null,-1)),e(u,{name:"Style Queries are Almost Like Mixins (But Mixins Would Be Better)",desc:"Having a named block of styles to apply in CSS can be useful, and newfangled Style Queries are pretty close to that. We look at one use case here, how Sass did mixins better, and hope for a native solution. ",url:"https://frontendmasters.com/blog/css-does-need-mixins/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3002"}),s[8]||(s[8]=k(`<p>I was styling a menu thing the other day, and it had some decently nested selectors. Normally I’m a pretty big fan of putting a class right on the thing you want to style and keeping CSS selectors pretty “flat” in that they are just that class alone. But for menus and the semantic HTML within, a little nesting seemed reasonable. For instance this HTML:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>site-nav<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Contact<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>History<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Can lead to this kind of CSS:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.site-nav</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">&gt; ul</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token selector">&gt; li</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token selector">&gt; a</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token selector">&amp;:hover, </span>
<span class="line">        &amp;:focus</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I can see how that turns some people off, but honestly it doesn’t bother me that much. The structure is reliable here and I’d rather this setup in CSS than a class on every one of those links in the HTML.</p><p>If we get into *sub-*menu territory though, it gets gnarlier:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.site-nav</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">&gt; ul</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token selector">&gt; li</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token selector">&gt; ul</span> <span class="token punctuation">{</span> <span class="token comment">/* sub menu */</span></span>
<span class="line">        <span class="token selector">&gt; li</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token selector">&gt; a</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token selector">&amp;:hover,</span>
<span class="line">            &amp;:focus</span> <span class="token punctuation">{</span></span>
<span class="line">              </span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I’m willing to admit this is probably a bit too far in nesting town 😬. Particularly because at each of those nested levels there will be a bunch of styling and it will become hard to reason about quite quickly.</p><p>It occurred to me that the (newfangled, not production-ready) CSS style queries might be able to jump in and help here, because they behave a bit like a mixin.</p><p>Mixin?</p><p>Yeah! That’s what Sass called the concept, anyway. A mixin allows us to <em>name</em> a block of styles, then call them as needed. So…</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token keyword">@mixin</span> <span class="token selector">linkHovered </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.site-nav </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">&gt; ul </span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token selector">&gt; li </span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token selector">&gt; a </span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token selector"><span class="token parent important">&amp;</span>:hover, </span>
<span class="line">        <span class="token parent important">&amp;</span>:focus </span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">@include</span> linkHovered<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So now we’ve <em>kind of</em> flattened out the styles a bit. We have this re-usable chunk of styles that we can just call rather than nest the styles so deeply.</p><p>What I wanted to try here was using Style Queries (and <em>not</em> Sass), but unfortunately it’s not quite as clean as I’d like. After using Sass for so long, this is what I wanted to work:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token comment">/* Invalid! Doesn&#39;t select anything */</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@container</span> <span class="token function">style</span><span class="token punctuation">(</span>--linkHovered<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.site-nav</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">&gt; ul</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token selector">&gt; li</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token selector">&gt; a</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token selector">&amp;:hover, &amp;:focus</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">--linkHovered</span><span class="token punctuation">:</span> true<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But that’s a no-go. The <code>@container</code> style query either needs to be nested within the other styles so that it has an implied selector (which defeats the “flatten the styles” purpose) or it needs an explicit selector inside it. So it needs to be like this:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@container</span> <span class="token function">style</span><span class="token punctuation">(</span>--hasLinkHovered<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">a</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.site-nav</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">&gt; ul</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token selector">&gt; li</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token selector">&amp;:has(&gt; a:hover, &gt; a:focus)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">--hasLinkHovered</span><span class="token punctuation">:</span> true<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17)),n("p",null,[s[1]||(s[1]=a("That works (")),n("a",S,[e(p,{icon:"iconfont icon-caniuse"}),s[0]||(s[0]=a("where supported"))]),s[2]||(s[2]=a("):"))]),e(r,{user:"chriscoyier","slug-hash":"gONpgVe",title:"Style Query Mixin","default-tab":["css","result"],theme:l.$isDarkmode?"dark":"light"},null,8,["theme"]),s[9]||(s[9]=n("p",null,"I just don’t love it. You have to set the Custom Property higher up in the nesting because container styles can’t style the thing they query. Plus now the true selector is a combination of the nesting and what’s in the container style query which is an awful brainbuster to keep track of.",-1)),s[10]||(s[10]=n("p",null,[a("This is "),n("em",null,"not"),a(" to say that Style Queries aren’t useful. They totally are, and I’m sure we’ll uncover lots of cool use cases in the coming years. I’m just saying that shoehorning them to behave exactly like mixins isn’t great.")],-1)),n("p",null,[s[4]||(s[4]=a("It sure would be nice if ")),n("a",w,[e(p,{icon:"fas fa-globe"}),s[3]||(s[3]=a("CSS got native mixins"))]),s[5]||(s[5]=a("!"))]),s[11]||(s[11]=n("p",null,[a("It would be yet another Sass feature making it’s way into the platform. In the case of mixins, it would be a great win, because the CSS would be more efficient than the way Sass had to express the mixin concept back in CSS. If you used a "),n("code",null,"@mixin"),a(" 10 times under different selectors, those styles blocks would be barfed out 10 duplicate times in the CSS. Perhaps not the worlds biggest deal thanks to file compression, but certainly not as efficient as the language itself just referring to a single block of styles.")],-1)),v(" TODO: add ARTICLE CARD "),e(i,o(c({title:"Style Queries are Almost Like Mixins (But Mixins Would Be Better)",desc:"Having a named block of styles to apply in CSS can be useful, and newfangled Style Queries are pretty close to that. We look at one use case here, how Sass did mixins better, and hope for a native solution. ",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/css-does-need-mixins.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const M=d(b,[["render",x]]),A=JSON.parse('{"path":"/frontendmasters.com/css-does-need-mixins.html","title":"Style Queries are Almost Like Mixins (But Mixins Would Be Better)","lang":"en-US","frontmatter":{"lang":"en-US","title":"Style Queries are Almost Like Mixins (But Mixins Would Be Better)","description":"Article(s) > Style Queries are Almost Like Mixins (But Mixins Would Be Better)","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","frontendmasters.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Style Queries are Almost Like Mixins (But Mixins Would Be Better)\\",\\"image\\":[\\"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3002\\"],\\"datePublished\\":\\"2024-07-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chris Coyier\\",\\"url\\":\\"https://frontendmasters.com/blog/author/chriscoyier/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/css-does-need-mixins.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Style Queries are Almost Like Mixins (But Mixins Would Be Better)"}],["meta",{"property":"og:description","content":"Article(s) > Style Queries are Almost Like Mixins (But Mixins Would Be Better)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3002"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3002"}],["meta",{"name":"twitter:image:alt","content":"Style Queries are Almost Like Mixins (But Mixins Would Be Better)"}],["meta",{"property":"article:author","content":"Chris Coyier"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-07-12T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Style Queries are Almost Like Mixins (But Mixins Would Be Better)"},{"property":"og:description","content":"Style Queries are Almost Like Mixins (But Mixins Would Be Better)"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/css-does-need-mixins.html"}]],"prev":"/programming/css/articles/README.md","date":"2024-07-12T00:00:00.000Z","isOriginal":false,"author":[{"name":"Chris Coyier","url":"https://frontendmasters.com/blog/author/chriscoyier/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3002"},"git":{},"readingTime":{"minutes":3.25,"words":974},"filePathRelative":"frontendmasters.com/css-does-need-mixins.md","copyright":{"author":"Chris Coyier"}}');export{M as comp,A as data};
