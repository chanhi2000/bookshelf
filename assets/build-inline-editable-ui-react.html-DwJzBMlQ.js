import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as t,b as i,a as g,t as f,n as r,g as d,w as l,e as a,r as o,o as h}from"./app-BVguHYKu.js";const y="/bookshelf/assets/image/blog.logrocket.com/build-inline-editable-ui-react/banner.png",w="/bookshelf/assets/image/blog.logrocket.com/build-inline-editable-ui-react/react-basic-inline-editable-ui-example.gif",x="/bookshelf/assets/image/blog.logrocket.com/build-inline-editable-ui-react/google-sheets-ui.webp",q={},j={id:"frontmatter-title-관련",tabindex:"-1"},I={class:"header-anchor",href:"#frontmatter-title-관련"},R={class:"table-of-contents"},E={href:"https://developers.asana.com/docs/get-a-task",target:"_blank",rel:"noopener noreferrer"},T={href:"https://logrocket-inline-edit.netlify.app",target:"_blank",rel:"noopener noreferrer"},U={href:"https://asana.com",target:"_blank",rel:"noopener noreferrer"},A={href:"https://atlassian.com/software/jira",target:"_blank",rel:"noopener noreferrer"},S={href:"https://atlassian.design/components/inline-edit/examples",target:"_blank",rel:"noopener noreferrer"},z={href:"https://trello.com/en",target:"_blank",rel:"noopener noreferrer"},H={href:"https://airtable.com/lp/campaign/brand",target:"_blank",rel:"noopener noreferrer"},C={href:"https://notion.so/product",target:"_blank",rel:"noopener noreferrer"},B={href:"https://google.com/sheets/about/",target:"_blank",rel:"noopener noreferrer"},D={id:"giorgosart-react-easy-edit",tabindex:"-1"},F={class:"header-anchor",href:"#giorgosart-react-easy-edit"},P={href:"https://github.com/giorgosart/react-easy-edit",target:"_blank",rel:"noopener noreferrer"},L={href:"https://stackblitz.com/edit/react-pun7mm?file=src/App.js",target:"_blank",rel:"noopener noreferrer"},N={href:"https://atlassian.com",target:"_blank",rel:"noopener noreferrer"},O={href:"https://npmjs.com/package/@atlaskit/inline-edit",target:"_blank",rel:"noopener noreferrer"},G={id:"alioguzhan-react-editext",tabindex:"-1"},Y={class:"header-anchor",href:"#alioguzhan-react-editext"},M={href:"https://github.com/alioguzhan/react-editext",target:"_blank",rel:"noopener noreferrer"},V={href:"https://stackblitz.com/edit/react-aawg51?file=src%2FApp.js",target:"_blank",rel:"noopener noreferrer"},W={id:"lovasoa-react-contenteditable",tabindex:"-1"},K={class:"header-anchor",href:"#lovasoa-react-contenteditable"},J={href:"https://github.com/lovasoa/react-contenteditable",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://stackblitz.com/edit/react-2aq9zw?file=src%2FApp.js",target:"_blank",rel:"noopener noreferrer"},X={href:"https://github.com/tanstack/table/tree/v7",target:"_blank",rel:"noopener noreferrer"},$={href:"https://x.com/tannerlinsley/status/1542925072502968320",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://github.com/TanStack/table",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/TanStack/table/releases",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://stackblitz.com/edit/vitejs-vite-daemts?file=src/App.tsx",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://ag-grid.com/",target:"_blank",rel:"noopener noreferrer"},an={href:"https://npmjs.com/package/ag-grid-react",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://stackblitz.com/edit/react-ts-xu5kqm?file=App.tsx",target:"_blank",rel:"noopener noreferrer"},en={href:"https://github.com/learnwithparam/logrocket-inline-edit-ui",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://logrocket-inline-edit.netlify.com/",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://github.com/learnwithparam/logrocket-inline-edit-ui",target:"_blank",rel:"noopener noreferrer"};function on(k,n){const u=o("VPCard"),p=o("router-link"),e=o("VPIcon"),m=o("SiteInfo"),c=o("RouteLink");return h(),v("div",null,[s("h1",j,[s("a",I,[s("span",null,f(k.$frontmatter.title)+" 관련",1)])]),t(u,r(d({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",R,[s("ul",null,[s("li",null,[t(p,{to:"#popular-inline-editable-ui-tools"},{default:l(()=>n[0]||(n[0]=[a("Popular inline editable UI tools")])),_:1,__:[0]})]),s("li",null,[t(p,{to:"#react-inline-editable-ui-component-libraries"},{default:l(()=>n[1]||(n[1]=[a("React inline editable UI component libraries")])),_:1,__:[1]}),s("ul",null,[s("li",null,[t(p,{to:"#giorgosart-react-easy-edit"},{default:l(()=>[t(e,{icon:"iconfont icon-json"}),n[2]||(n[2]=a("giorgosart/react-easy-edit"))]),_:1,__:[2]})]),s("li",null,[t(p,{to:"#atlassian"},{default:l(()=>n[3]||(n[3]=[a("Atlassian")])),_:1,__:[3]})]),s("li",null,[t(p,{to:"#alioguzhan-react-editext"},{default:l(()=>[t(e,{icon:"iconfont icon-github"}),n[4]||(n[4]=a("alioguzhan/react-editext"))]),_:1,__:[4]})]),s("li",null,[t(p,{to:"#lovasoa-react-contenteditable"},{default:l(()=>[t(e,{icon:"iconfont icon-github"}),n[5]||(n[5]=a("lovasoa/react-contenteditable"))]),_:1,__:[5]})]),s("li",null,[t(p,{to:"#react-table"},{default:l(()=>n[6]||(n[6]=[a("React Table")])),_:1,__:[6]})]),s("li",null,[t(p,{to:"#ag-grid"},{default:l(()=>n[7]||(n[7]=[a("Ag Grid")])),_:1,__:[7]})])])]),s("li",null,[t(p,{to:"#how-does-an-editable-ui-work"},{default:l(()=>n[8]||(n[8]=[a("How does an editable UI work?")])),_:1,__:[8]})]),s("li",null,[t(p,{to:"#build-a-simple-react-component-for-editable-ui"},{default:l(()=>n[9]||(n[9]=[a("Build a simple React component for editable UI")])),_:1,__:[9]}),s("ul",null,[s("li",null,[t(p,{to:"#solving-the-focus-issue"},{default:l(()=>n[10]||(n[10]=[a("Solving the focus issue")])),_:1,__:[10]})]),s("li",null,[t(p,{to:"#glitches-with-keydown-events"},{default:l(()=>n[11]||(n[11]=[a("Glitches with keydown events")])),_:1,__:[11]})])])]),s("li",null,[t(p,{to:"#accessibility-for-forms-with-tab-key-navigation"},{default:l(()=>n[12]||(n[12]=[a("Accessibility for forms with "),s("kbd",null,"Tab",-1),a(" key navigation")])),_:1,__:[12]})]),s("li",null,[t(p,{to:"#when-to-use-react-inline-editable-ui"},{default:l(()=>n[13]||(n[13]=[a("When to use React inline editable UI")])),_:1,__:[13]})]),s("li",null,[t(p,{to:"#limitations-of-inline-editable-ui-in-react"},{default:l(()=>n[14]||(n[14]=[a("Limitations of inline editable UI in React")])),_:1,__:[14]})]),s("li",null,[t(p,{to:"#conclusion"},{default:l(()=>n[15]||(n[15]=[a("Conclusion")])),_:1,__:[15]})])])]),n[117]||(n[117]=s("hr",null,null,-1)),t(m,{name:"How to build an inline editable UI in React",desc:"Explore several React inline editable UI libraries, then create an inline editing component from scratch in React.",url:"https://blog.logrocket.com/build-inline-editable-ui-react",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/build-inline-editable-ui-react/banner.png"}),n[118]||(n[118]=i('<div class="hint-container note"><p class="hint-container-title">Editor’s note</p><p>This article was last updated on 15 December 2022 to include information about TanStack Table v8 and Ag Grid, as well as to reflect updates to the react-easy-edit and <code>react-editext</code> libraries.</p></div><figure><img src="'+y+'" alt="React Inline Editable UI" tabindex="0" loading="lazy"><figcaption>React Inline Editable UI</figcaption></figure><p>As React client-side UI libraries become increasingly powerful, user interfaces become more complex. Nowadays, we can create even more exciting user experiences by experimenting with React inline editable UI components, like editable tables, lists, and text fields.</p><p>Below is an example of a basic React inline editable UI:</p><figure><img src="'+w+'" alt="React Basic Inline Editable UI Example" tabindex="0" loading="lazy"><figcaption>React Basic Inline Editable UI Example</figcaption></figure>',5)),s("p",null,[n[17]||(n[17]=a("In this tutorial, we’ll build basic, inline editable UI components in React using a simplified version of the ")),s("a",E,[t(e,{icon:"fas fa-globe"}),n[16]||(n[16]=a("Asana Create a task"))]),n[18]||(n[18]=a(" function. Our editable UI will have only a task name and a description field."))]),s("p",null,[n[20]||(n[20]=a("Feel free to check out the ")),s("a",T,[t(e,{icon:"fas fa-globe"}),n[19]||(n[19]=a("demo of the React editable UI"))]),n[21]||(n[21]=a(" we’ll build in this walkthrough. Let’s get started!"))]),n[119]||(n[119]=s("hr",null,null,-1)),n[120]||(n[120]=s("h2",{id:"popular-inline-editable-ui-tools",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#popular-inline-editable-ui-tools"},[s("span",null,"Popular inline editable UI tools")])],-1)),n[121]||(n[121]=s("p",null,"First, let’s review some of the most prominent products that use an inline editable UI with a clear UX.",-1)),s("ul",null,[s("li",null,[s("a",U,[t(e,{icon:"fas fa-globe"}),n[22]||(n[22]=a("Asana"))]),n[23]||(n[23]=a(": One of the best custom UIs with inline editable tables and forms"))]),s("li",null,[s("a",A,[t(e,{icon:"fa-brands fa-jira"}),n[24]||(n[24]=a("Jira"))]),n[26]||(n[26]=a(": Offers custom inline editing functionality for fields. Here’s a ")),s("a",S,[t(e,{icon:"fa-brands fa-atlassian"}),n[25]||(n[25]=a("design example"))]),n[27]||(n[27]=a(" from the Jira design system"))]),s("li",null,[s("a",z,[t(e,{icon:"fa-brands fa-trello"}),n[28]||(n[28]=a("Trello"))]),n[29]||(n[29]=a(": You can edit a Trello card by simply clicking on it"))]),s("li",null,[s("a",H,[t(e,{icon:"iconfont icon-airtable"}),n[30]||(n[30]=a("Airtable"))]),n[32]||(n[32]=a(" and ")),s("a",C,[t(e,{icon:"iconfont icon-notion"}),n[31]||(n[31]=a("Notion"))]),n[33]||(n[33]=a(" are modern apps that use inline editable UI elements"))]),s("li",null,[s("a",B,[t(e,{icon:"iconfont icon-googledocs"}),n[34]||(n[34]=a("Google Sheets"))]),n[35]||(n[35]=a(": Offers an inline editable smart table UI for the web"))])]),n[122]||(n[122]=s("figure",null,[s("img",{src:x,alt:"Google Sheets UI",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Google Sheets UI")],-1)),n[123]||(n[123]=s("hr",null,null,-1)),n[124]||(n[124]=s("h2",{id:"react-inline-editable-ui-component-libraries",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#react-inline-editable-ui-component-libraries"},[s("span",null,"React inline editable UI component libraries")])],-1)),n[125]||(n[125]=s("p",null,"Before getting started with our custom implementation of inline editable components, let’s consider some of the existing React component libraries that you can use to achieve various inline editable UI elements.",-1)),s("h3",D,[s("a",F,[s("span",null,[t(e,{icon:"iconfont icon-json"}),n[36]||(n[36]=s("code",null,"giorgosart/react-easy-edit",-1))])])]),s("p",null,[n[38]||(n[38]=a("The ")),s("a",P,[t(e,{icon:"iconfont icon-json"}),n[37]||(n[37]=s("code",null,"giorgosart/react-easy-edit",-1))]),n[39]||(n[39]=a(" library allows for inline editing on HTML 5 input components, meaning you can customize the styling and functionality on top of the react-easy-edit library. Below is a simple example using the ")),n[40]||(n[40]=s("code",null,"textbox",-1)),n[41]||(n[41]=a(" component:"))]),n[126]||(n[126]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.jsx"><span>App.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> EasyEdit <span class="token keyword">from</span> <span class="token string">&#39;react-easy-edit&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">save</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Cancelled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">EasyEdit</span></span></span>
<span class="line">      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name">onSave</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>save<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token attr-name">onCancel</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>cancel<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token attr-name">saveButtonLabel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Save Me<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name">cancelButtonLabel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Cancel Me<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name">attributes</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;awesome-input&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token attr-name">instructions</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Star this repo!<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[43]||(n[43]=a("You can check out more examples on ")),s("a",L,[t(e,{icon:"iconfont icon-stackblitz"}),n[42]||(n[42]=a("Stackblitz"))]),n[44]||(n[44]=a("."))]),n[127]||(n[127]=s("h3",{id:"atlassian",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#atlassian"},[s("span",null,"Atlassian")])],-1)),s("p",null,[s("a",N,[t(e,{icon:"fa-brands fa-atlassian"}),n[45]||(n[45]=a("Atlassian"))]),n[47]||(n[47]=a(", the team that built Jira, has a design system with ")),s("a",O,[t(e,{icon:"fa-brands fa-npm"}),n[46]||(n[46]=s("code",null,"@atlaskit/inline-edit",-1))]),n[48]||(n[48]=a(" functionality. Although it depends on the Atlassian design system, it’s a solid library that you can consider if your application requires a reliable feature."))]),s("h3",G,[s("a",Y,[s("span",null,[t(e,{icon:"iconfont icon-github"}),n[49]||(n[49]=s("code",null,"alioguzhan/react-editext",-1))])])]),s("p",null,[s("a",M,[t(e,{icon:"iconfont icon-github"}),n[50]||(n[50]=s("code",null,"alioguzhan/react-editext",-1))]),n[51]||(n[51]=a(" is an inline editing library that converts the ")),n[52]||(n[52]=s("code",null,"textarea",-1)),n[53]||(n[53]=a(" element into editable content. Below is a simple example of react-editext:"))]),n[128]||(n[128]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.jsx"><span>App.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span></span>
<span class="line"><span class="token keyword">import</span> EdiText <span class="token keyword">from</span> <span class="token string">&#39;react-editext&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">onSave</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Edited Value -&gt; &#39;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">EdiText</span></span></span>
<span class="line">        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>text<span class="token punctuation">&#39;</span></span></span>
<span class="line">        <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>What is real? How do you define real?<span class="token punctuation">&#39;</span></span></span>
<span class="line">        <span class="token attr-name">onSave</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onSave<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[56]||(n[56]=a("react-editext also allows you to ")),t(c,{to:"/blog.logrocket.com/benefits-using-styled-components-react.html"},{default:l(()=>n[54]||(n[54]=[s("strong",null,[a("style "),s("code",null,"EdiText"),a(" with styled-components")],-1)])),_:1,__:[54]}),n[57]||(n[57]=a(". To better understand it, you can refer to the ")),s("a",V,[t(e,{icon:"iconfont icon-stackblitz"}),n[55]||(n[55]=a("example from Stackblitz"))]),n[58]||(n[58]=a("."))]),s("h3",W,[s("a",K,[s("span",null,[t(e,{icon:"iconfont icon-github"}),n[59]||(n[59]=s("code",null,"lovasoa/react-contenteditable",-1))])])]),s("p",null,[s("a",J,[t(e,{icon:"iconfont icon-github"}),n[60]||(n[60]=s("code",null,"lovasoa/react-contenteditable",-1))]),n[61]||(n[61]=a(" is arguably the most famous package for inline editable UI. The main difference between react-contenteditable and other component libraries is that it allows you to inline edit HTML, not just text content."))]),s("p",null,[n[63]||(n[63]=a("You can use react-contenteditable to edit both markup and markdown in the UI. You can also manage the height of the editable element to customize the look and feel of an input or a ")),n[64]||(n[64]=s("code",null,"textarea",-1)),n[65]||(n[65]=a(" element. Feel free to check out an ")),s("a",Z,[t(e,{icon:"iconfont icon-stackblitz"}),n[62]||(n[62]=a("example on Stackblitz"))]),n[66]||(n[66]=a("."))]),n[129]||(n[129]=s("h3",{id:"react-table",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#react-table"},[s("span",null,"React Table")])],-1)),s("p",null,[s("a",X,[n[67]||(n[67]=a("React Table (")),t(e,{icon:"iconfont icon-github"}),n[68]||(n[68]=s("code",null,"tanstack/table",-1)),n[69]||(n[69]=a(")"))]),n[70]||(n[70]=a(" is one of the most popular UI libraries that allows you to build tables and data grids with the inline editable feature. You can create a UI that is similar to Google Sheets by customizing React Table library components."))]),s("p",null,[n[77]||(n[77]=a("In March 2020, React Table creator Tanner Linsley released React Table, which he described as “the culmination of over a years worth of work to refactor the entire library to a hooks-only UI/Style/Markup agnostic table building utility.” In July 2022, ")),s("a",$,[n[71]||(n[71]=a("TanStack Table v8 (")),t(e,{icon:"fa-brands fa-x-twitter"}),n[72]||(n[72]=s("code",null,"tannerlinsley",-1)),n[73]||(n[73]=a(")"))]),n[78]||(n[78]=a(" was released, which ")),s("a",Q,[n[74]||(n[74]=a("includes a full rewrite to TypeScript (")),t(e,{icon:"iconfont icon-github"}),n[75]||(n[75]=s("code",null,"TanStack/table",-1)),n[76]||(n[76]=a(")"))]),n[79]||(n[79]=a(". However, at the time of writing, the migration guide is not yet available."))]),s("p",null,[n[86]||(n[86]=a("For a closer look at what’s new in the most ")),s("a",_,[n[80]||(n[80]=a("recent stable React Table release (")),t(e,{icon:"iconfont icon-github"}),n[81]||(n[81]=s("code",null,"TanStack/table",-1)),n[82]||(n[82]=a(")"))]),n[87]||(n[87]=a(", check out our comprehensive guide to ")),t(c,{to:"/blog.logrocket.com/building-styling-tables-react-table-v7/"},{default:l(()=>n[83]||(n[83]=[s("strong",null,"building and stying tables with React Table v7",-1)])),_:1,__:[83]}),n[88]||(n[88]=a(". Or, read on to learn how to render your own ")),t(c,{to:"/blog.logrocket.com/complete-guide-building-smart-data-table-react.html#reacttableexample"},{default:l(()=>n[84]||(n[84]=[s("strong",null,"React table component with React Table",-1)])),_:1,__:[84]}),n[89]||(n[89]=a(". You can also check out the ")),s("a",nn,[t(e,{icon:"iconfont icon-stackblitz"}),n[85]||(n[85]=a("React Table kitchen sink"))]),n[90]||(n[90]=a(" to see how this editable UI works in the table layout."))]),n[130]||(n[130]=s("h3",{id:"ag-grid",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#ag-grid"},[s("span",null,"Ag Grid")])],-1)),s("p",null,[s("a",sn,[t(e,{icon:"fas fa-globe"}),n[91]||(n[91]=a("Ag Grid"))]),n[93]||(n[93]=a(" is another popular library for building data grids with inline editable functionality. Libraries like ")),s("a",an,[t(e,{icon:"fa-brands fa-npm"}),n[92]||(n[92]=s("code",null,"ag-grid-react",-1))]),n[94]||(n[94]=a(" and React Table help us to build a data grid to visualize a large amount of data in a table structure. Inline editing is one of the functionalities included in it."))]),n[131]||(n[131]=i(`<p>Below is a basic implementation of <code>ag-grid-react</code>:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AgGridReact <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ag-grid-react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AgGridReact</span></span></span>
<span class="line">   <span class="token attr-name">rowData</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">mockTransactionData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">   <span class="token attr-name">columnDefs</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">mockTransactionDataColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line"> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("p",null,[n[96]||(n[96]=a("You can check out the complete example on ")),s("a",tn,[t(e,{icon:"iconfont icon-stackblitz"}),n[95]||(n[95]=a("Stackblitz"))]),n[97]||(n[97]=a("."))]),n[132]||(n[132]=i('<hr><h2 id="how-does-an-editable-ui-work" tabindex="-1"><a class="header-anchor" href="#how-does-an-editable-ui-work"><span>How does an editable UI work?</span></a></h2><p>Now that we’re familiar with some helpful component libraries, let’s explore how an editable UI works.</p><p>First, an editable UI displays a label. On hover, it will show the borders, making the UI look inline and editable. On click, it will transform the simple label into a custom input element. Some notable input elements are input fields, <code>textarea</code>, <code>select</code> components, date pickers, etc.</p><p>By clicking <kbd>Enter</kbd> or <kbd>Escape</kbd>, we’ll go back to the initial state and show the label. If you click <kbd>Tab</kbd>, it will once again switch to an input element and make the component accessible using the keyboard.</p>',5)),s("p",null,[n[101]||(n[101]=a("In this tutorial, we’ll build a simple version without the ")),n[102]||(n[102]=s("code",null,"Tab",-1)),n[103]||(n[103]=a(" functionality. You can easily add the ")),n[104]||(n[104]=s("code",null,"Tab",-1)),n[105]||(n[105]=a(" functionality, but I’ll leave that up to you. Feel free to create a ")),s("a",en,[n[98]||(n[98]=a("pull request to my repo (")),t(e,{icon:"iconfont icon-github"}),n[99]||(n[99]=s("code",null,"learnwithparam/logrocket-inline-edit-ui",-1)),n[100]||(n[100]=a(")"))]),n[106]||(n[106]=a("."))]),n[133]||(n[133]=s("hr",null,null,-1)),n[134]||(n[134]=s("h2",{id:"build-a-simple-react-component-for-editable-ui",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#build-a-simple-react-component-for-editable-ui"},[s("span",null,"Build a simple React component for editable UI")])],-1)),s("p",null,[n[108]||(n[108]=a("First, we’ll create a simple React app using Create React App. I’m using Tailwind CSS for styling. For more information, check out our article on ")),t(c,{to:"/blog.logrocket.com/create-react-app-and-tailwindcss.html"},{default:l(()=>n[107]||(n[107]=[s("strong",null,"Using Tailwind CSS in React to configure Create React App",-1)])),_:1,__:[107]}),n[109]||(n[109]=a("."))]),n[135]||(n[135]=i(`<p>Now, let’s create the <code>Editable</code> React component with the following code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Editable.js"><span>Editable.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Component accept text, placeholder values and also pass what type of Input - input, textarea so that we can use it for styling accordingly</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Editable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span></span>
<span class="line">  text<span class="token punctuation">,</span></span>
<span class="line">  type<span class="token punctuation">,</span></span>
<span class="line">  placeholder<span class="token punctuation">,</span></span>
<span class="line">  children<span class="token punctuation">,</span></span>
<span class="line">  <span class="token operator">...</span>props</span>
<span class="line"><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Manage the state whether to show the label or the input box. By default, label will be shown.</span></span>
<span class="line">  <span class="token comment">// Exercise: It can be made dynamic by accepting initial state as props outside the component </span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>isEditing<span class="token punctuation">,</span> setEditing<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Event handler while pressing any key while editing</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleKeyDown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Handle when key is pressed</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">- It will display a label is \`isEditing\` is false</span>
<span class="line">- It will display the children (input or textarea) if \`isEditing\` is true</span>
<span class="line">- when input \`onBlur\`, we will set the default non edit mode</span>
<span class="line">Note: For simplicity purpose, I removed all the classnames, you can check the repo for CSS styles</span>
<span class="line">*/</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>isEditing <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span></span>
<span class="line">          <span class="token attr-name">onBlur</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setEditing</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">          <span class="token attr-name">onKeyDown</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">handleKeyDown</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span></span>
<span class="line">          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setEditing</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token punctuation">{</span>text <span class="token operator">||</span> placeholder <span class="token operator">||</span> <span class="token string">&quot;Editable content&quot;</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> Editable<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The component is very straightforward. If the <code>isEditing</code> state is <code>true</code>, then it displays the children. Here, we pass the <code>input</code> or <code>textarea</code> elements. The input state will be managed outside of this component.</p><p>If the <code>isEditing</code> state is <code>false</code>, we display the simple label <code>text</code> or <code>placeholder</code>, depending on whether the text value is empty.</p><p>Let’s see what a simple input editable component looks like:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.js"><span>App.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// Input editable UI</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Editable <span class="token keyword">from</span> <span class="token string">&quot;./Editable&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// State for the input</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>task<span class="token punctuation">,</span> setTask<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">    Enclose the input element as the children to the Editable component to make it as inline editable.</span>
<span class="line">  */</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Editable</span></span></span>
<span class="line">      <span class="token attr-name">text</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>task<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Write a task name<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>input<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span></span>
<span class="line">        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>task<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Write a task name<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>task<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">setTask</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Editable</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In the code above, we enclosed <code>input</code> inside of the <code>Editable</code> component. You can enclose any custom form component to make it an editable UI.</p><p>This example is pretty simple. If you want to create a more complex example for an editable UI, you can create higher order components or custom Hooks to manage all of the states outside the editable component.</p><p>Let’s see how the editable component works for a <code>textarea</code>:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Editable</span></span></span>
<span class="line">  <span class="token attr-name">text</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>description<span class="token punctuation">}</span></span></span>
<span class="line">  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Description for the task<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>textarea<span class="token punctuation">&quot;</span></span></span>
<span class="line"><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span></span>
<span class="line">    <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>description<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Description for the task<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>description<span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">setDescription</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">  <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">&lt;/Editable&amp;gt</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It’s that simple. We just swapped the input element with a <code>textarea</code>. As long as we provide the proper CSS based on the type we pass the <code>Editable</code> component, it will work.</p><p>However, we’ll run into a few problems:</p><ul><li>When we click on the label, it won’t auto-focus on the input element</li><li>A simple form can be navigated using the <code>Tab</code> key. However, an inline editable UI can’t be navigated without manually implementing that functionality</li></ul><h3 id="solving-the-focus-issue" tabindex="-1"><a class="header-anchor" href="#solving-the-focus-issue"><span>Solving the focus issue</span></a></h3><p>To solve the focus issue, we need to use a reference to the input element and focus it when the edit state is set:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.js"><span>App.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useRef<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Editable <span class="token keyword">from</span> <span class="token string">&quot;./Editable&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* </span>
<span class="line">    1. create a reference using use reference and add the ref={inputRef} to input element</span>
<span class="line">    2. pass this reference to the Editable component, use different name than ref, I used \`childRef\`. Its basically a normal prop carrying the input element reference.</span>
<span class="line">  */</span></span>
<span class="line">  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>task<span class="token punctuation">,</span> setTask<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Editable</span></span></span>
<span class="line">      <span class="token attr-name">text</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>task<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Write a task name<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name">childRef</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>input<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span></span>
<span class="line">        <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>task<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Write a task name<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>task<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">setTask</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Editable</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Next, we’ll pass the input element reference to the <code>Editable</code> component, then focus when the <code>isEditing</code> state is <code>true</code>:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Editable.js"><span>Editable.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;./Editable.css&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Editable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> childRef<span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>isEditing<span class="token punctuation">,</span> setEditing<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/* </span>
<span class="line">   * using use effect, when isEditing state is changing, check whether it is set to true, if true, then focus on the reference element</span>
<span class="line">   */</span> </span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>childRef <span class="token operator">&amp;&amp;</span> childRef<span class="token punctuation">.</span>current <span class="token operator">&amp;&amp;</span> isEditing <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      childRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>isEditing<span class="token punctuation">,</span> childRef<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleKeyDown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> Editable<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="glitches-with-keydown-events" tabindex="-1"><a class="header-anchor" href="#glitches-with-keydown-events"><span>Glitches with keydown events</span></a></h3><p>There are a few things to be aware of when dealing with keydown events. The input element’s keys, including <kbd>Enter</kbd>, <kbd>Escape</kbd>, and <kbd>Tab</kbd> will set the <code>isEditing</code> state to <code>false</code>.</p><p>For the <code>textarea</code> element, the <kbd>Enter</kbd> key has to add a new line inside of <code>textarea</code>, so we need to handle this use case separately:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">handleKeyDown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> key <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Escape&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tab&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> enterKey <span class="token operator">=</span> <span class="token string">&quot;Enter&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> allKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>keys<span class="token punctuation">,</span> enterKey<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// All keys array</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/* </span>
<span class="line">    - For textarea, check only Escape and Tab key and set the state to false</span>
<span class="line">    - For everything else, all three keys will set the state to false</span>
<span class="line">  */</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&quot;textarea&quot;</span> <span class="token operator">&amp;&amp;</span> keys<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">    <span class="token punctuation">(</span>type <span class="token operator">!==</span> <span class="token string">&quot;textarea&quot;</span> <span class="token operator">&amp;&amp;</span> allKeys<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setEditing</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token operator">:</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="accessibility-for-forms-with-tab-key-navigation" tabindex="-1"><a class="header-anchor" href="#accessibility-for-forms-with-tab-key-navigation"><span>Accessibility for forms with <kbd>Tab</kbd> key navigation</span></a></h2><p>By default, input and <code>textarea</code> are hidden. As a result, we can’t navigate the form fields by just hitting the <kbd>Tab</kbd> key.</p><p>To achieve keyboard support, we need to monitor the <kbd>Tab</kbd> key event on the component or the whole page and set the state manually to each element. Then, we can navigate to the next form element on the next keypress.</p><p>We didn’t implement this in our example code, but it’s worth a try to make sure you can handle keypress events on a page in React.</p><hr><h2 id="when-to-use-react-inline-editable-ui" tabindex="-1"><a class="header-anchor" href="#when-to-use-react-inline-editable-ui"><span>When to use React inline editable UI</span></a></h2><p>You don’t need an inline editable UI for basic form needs. However, it’s best to build both view and edit in a single place for complex React applications where you have lots of content with edit options. If you don’t, you’ll have to maintain two different UIs.</p><hr><h2 id="limitations-of-inline-editable-ui-in-react" tabindex="-1"><a class="header-anchor" href="#limitations-of-inline-editable-ui-in-react"><span>Limitations of inline editable UI in React</span></a></h2><p>The most significant challenges you may run into in inline editable UI involve showing errors. It would be best to account for this when thinking about the UX.</p><p>You may also have difficulty achieving the accessibility necessary to support mouse events. Touch events will likely also be an issue.</p><p>Finally, supporting mobile devices can be hard when form elements are hidden. This will be especially tricky if the UI has to support a mobile layout because there is no hover to show users whether the field is editable inline on touch screens.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2>`,37)),s("p",null,[n[114]||(n[114]=a("This is a simple example and overview of creating inline editable components in React. Try to use existing components, but if none fit your needs, you can create custom ones. You can check out the demo ")),s("a",ln,[t(e,{icon:"fas fa-globe"}),n[110]||(n[110]=a("here"))]),n[115]||(n[115]=a(" and the codebase ")),s("a",pn,[n[111]||(n[111]=a("here (")),t(e,{icon:"iconfont icon-github"}),n[112]||(n[112]=s("code",null,"learnwithparam/logrocket-inline-edit-ui",-1)),n[113]||(n[113]=a(")"))]),n[116]||(n[116]=a(". Happy coding!"))]),g(" TODO: add ARTICLE CARD "),t(u,r(d({title:"How to build an inline editable UI in React",desc:"Explore several React inline editable UI libraries, then create an inline editing component from scratch in React.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-inline-editable-ui-react.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const rn=b(q,[["render",on]]),dn=JSON.parse('{"path":"/blog.logrocket.com/build-inline-editable-ui-react.html","title":"How to build an inline editable UI in React","lang":"en-US","frontmatter":{"lang":"en-US","title":"How to build an inline editable UI in React","description":"Article(s) > How to build an inline editable UI in React","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to build an inline editable UI in React\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-inline-editable-ui-react/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-inline-editable-ui-react/react-basic-inline-editable-ui-example.gif\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-inline-editable-ui-react/google-sheets-ui.webp\\"],\\"datePublished\\":\\"2022-12-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Paramanantham Harrison\\",\\"url\\":\\"https://blog.logrocket.com/author/paramananthamharrison/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-inline-editable-ui-react.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to build an inline editable UI in React"}],["meta",{"property":"og:description","content":"Article(s) > How to build an inline editable UI in React"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-inline-editable-ui-react/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-inline-editable-ui-react/banner.png"}],["meta",{"name":"twitter:image:alt","content":"How to build an inline editable UI in React"}],["meta",{"property":"article:author","content":"Paramanantham Harrison"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-12-15T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How to build an inline editable UI in React"},{"property":"og:description","content":"How to build an inline editable UI in React"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-inline-editable-ui-react.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2022-12-15T00:00:00.000Z","isOriginal":false,"author":[{"name":"Paramanantham Harrison","url":"https://blog.logrocket.com/author/paramananthamharrison/"}],"cover":"/assets/image/blog.logrocket.com/build-inline-editable-ui-react/banner.png"},"git":{},"readingTime":{"minutes":9.41,"words":2823},"filePathRelative":"blog.logrocket.com/build-inline-editable-ui-react.md","copyright":{"author":"Paramanantham Harrison"}}');export{rn as comp,dn as data};
