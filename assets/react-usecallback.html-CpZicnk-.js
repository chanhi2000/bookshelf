import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as t,b as l,a as b,t as h,n as u,g as r,w as e,e as a,r as c,o as f}from"./app-BVguHYKu.js";const y="/bookshelf/assets/image/blog.logrocket.com/react-usecallback/banner.png",w="/bookshelf/assets/image/blog.logrocket.com/react-usecallback/usecallback-example-1.webp",x="/bookshelf/assets/image/blog.logrocket.com/react-usecallback/usecallback-example-2.webp",C="/bookshelf/assets/image/blog.logrocket.com/react-usecallback/usecallback-example-3.webp",j="/bookshelf/assets/image/blog.logrocket.com/react-usecallback/usecallback-example-4.webp",P={},q={id:"frontmatter-title-관련",tabindex:"-1"},R={class:"header-anchor",href:"#frontmatter-title-관련"},I={class:"table-of-contents"},W={href:"https://react.dev/reference/react/useCallback",target:"_blank",rel:"noopener noreferrer"},L={class:"hint-container details"};function z(d,n){const i=c("VPCard"),p=c("router-link"),k=c("SiteInfo"),o=c("RouteLink"),m=c("VPIcon");return f(),v("div",null,[s("h1",q,[s("a",R,[s("span",null,h(d.$frontmatter.title)+" 관련",1)])]),t(i,u(r({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",I,[s("ul",null,[s("li",null,[t(p,{to:"#function-reference-stability-in-react"},{default:e(()=>n[0]||(n[0]=[a("Function reference stability in React")])),_:1,__:[0]}),s("ul",null,[s("li",null,[t(p,{to:"#why-function-reference-stability-matters-in-react"},{default:e(()=>n[1]||(n[1]=[a("Why function reference stability matters in React")])),_:1,__:[1]})])])]),s("li",null,[t(p,{to:"#what-is-usecallback"},{default:e(()=>n[2]||(n[2]=[a("What is useCallback?")])),_:1,__:[2]}),s("ul",null,[s("li",null,[t(p,{to:"#syntax"},{default:e(()=>n[3]||(n[3]=[a("Syntax")])),_:1,__:[3]})])])]),s("li",null,[t(p,{to:"#how-usecallback-prevents-unnecessary-re-renders"},{default:e(()=>n[4]||(n[4]=[a("How useCallback prevents unnecessary re-renders")])),_:1,__:[4]})]),s("li",null,[t(p,{to:"#avoiding-unnecessary-dependencies-with-usecallback"},{default:e(()=>n[5]||(n[5]=[a("Avoiding unnecessary dependencies with useCallback")])),_:1,__:[5]})]),s("li",null,[t(p,{to:"#writing-more-efficient-custom-hooks-with-usecallback"},{default:e(()=>n[6]||(n[6]=[a("Writing more efficient custom hooks with useCallback")])),_:1,__:[6]})]),s("li",null,[t(p,{to:"#when-you-don-t-need-usecallback"},{default:e(()=>n[7]||(n[7]=[a("When you don’t need useCallback")])),_:1,__:[7]})]),s("li",null,[t(p,{to:"#comparing-usecallback-to-usememo-useeffect-and-useref"},{default:e(()=>n[8]||(n[8]=[a("Comparing useCallback to useMemo, useEffect, and useRef")])),_:1,__:[8]})]),s("li",null,[t(p,{to:"#conclusion"},{default:e(()=>n[9]||(n[9]=[a("Conclusion")])),_:1,__:[9]})])])]),n[43]||(n[43]=s("hr",null,null,-1)),t(k,{name:"React useCallback: When and how to use it for better performance",desc:"Learn how React's useCallback hook boosts performance by memoizing functions and preventing unnecessary re-renders with practical examples.",url:"https://blog.logrocket.com/react-usecallback",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/react-usecallback/banner.png"}),s("p",null,[n[11]||(n[11]=s("strong",null,"useCallback",-1)),n[12]||(n[12]=a(" is a ")),t(o,{to:"/blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems.html"},{default:e(()=>n[10]||(n[10]=[s("strong",null,"React Hook",-1)])),_:1,__:[10]}),n[13]||(n[13]=a(" that ")),n[14]||(n[14]=s("strong",null,"memorizes functions",-1)),n[15]||(n[15]=a(", ensuring they maintain a stable reference across renders unless their dependencies change. This helps optimize performance by preventing unwanted re-renders in child components."))]),n[44]||(n[44]=s("figure",null,[s("img",{src:y,alt:"React : When And How To Use It For Better Performance",tabindex:"0",loading:"lazy"}),s("figcaption",null,[a("React "),s("code",null,"useCallback"),a(": When And How To Use It For Better Performance")])],-1)),s("p",null,[n[17]||(n[17]=a("React applications often suffer from unnecessary re-renders, which can negatively impact performance. One common cause is when functions are recreated on every render, leading to inefficiencies, especially when passed as props to memoized components. This is where ")),s("a",W,[t(m,{icon:"fa-brands fa-react"}),n[16]||(n[16]=s("code",null,"useCallback",-1))]),n[18]||(n[18]=a(" comes in."))]),n[45]||(n[45]=s("p",null,[a("By the end of this guide, you’ll have a clear understanding of "),s("code",null,"useCallback"),a(" and how to use it properly in your React applications.")],-1)),s("details",L,[n[32]||(n[32]=l("<summary>TL;DR</summary><p><strong>What is <code>useCallback</code> used for?</strong></p><p><code>useCallback</code> is used to prevent function recreation on every render, improving performance in React applications.</p><p><strong>What is the difference between <code>useCallback</code> and <code>useMemo</code></strong>?</p>",4)),s("p",null,[n[21]||(n[21]=a("While ")),t(o,{to:"/blog.logrocket.com/react-usememo-vs-usecallback.html#what-usecallback"},{default:e(()=>n[19]||(n[19]=[s("strong",null,[s("code",null,"useCallback")],-1)])),_:1,__:[19]}),n[22]||(n[22]=a(" memoizes functions, ")),t(o,{to:"/blog.logrocket.com/react-usememo-vs-usecallback.html#what-usememo"},{default:e(()=>n[20]||(n[20]=[s("strong",null,"useMemo",-1)])),_:1,__:[20]}),n[23]||(n[23]=a(" memoizes values."))]),n[33]||(n[33]=s("p",null,[s("strong",null,"When should you use callbacks?")],-1)),s("p",null,[n[25]||(n[25]=a("Callbacks are useful when passing functions to memoized components (")),t(o,{to:"/blog.logrocket.com/react-memo-vs-usememo.html"},{default:e(()=>n[24]||(n[24]=[s("strong",null,[s("code",null,"React.memo")],-1)])),_:1,__:[24]}),n[26]||(n[26]=a(") or optimizing event handlers in performance-critical applications."))]),n[34]||(n[34]=s("p",null,[s("strong",null,[a("What is the difference between "),s("code",null,"useEffect"),a(" and "),s("code",null,"useCallback")]),a("?")],-1)),s("p",null,[n[28]||(n[28]=a("Both are React hooks, but ")),t(o,{to:"/blog.logrocket.com/useeffect-react-hook-complete-guide.html"},{default:e(()=>n[27]||(n[27]=[s("strong",null,[s("code",null,"useEffect")],-1)])),_:1,__:[27]}),n[29]||(n[29]=a(" runs side effects after renders, while ")),n[30]||(n[30]=s("code",null,"useCallback",-1)),n[31]||(n[31]=a(" stabilizes function references."))])]),n[46]||(n[46]=l(`<hr><h2 id="function-reference-stability-in-react" tabindex="-1"><a class="header-anchor" href="#function-reference-stability-in-react"><span>Function reference stability in React</span></a></h2><p>Before discussing the useCallback hook, let’s understand function reference and why function reference stability matters in React.</p><p>In JavaScript, functions are objects. Each time a function is declared inside a component, a new function instance is created with a different reference in memory. For example:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Clicked&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above code snippet, <code>handleClick</code> is recreated on every render. Even if the logic inside it hasn’t changed, its reference is new. This can cause unnecessary re-rendering when the function is passed as a prop to a <strong>memoized</strong> child component (<code>React.memo</code>).</p><h3 id="why-function-reference-stability-matters-in-react" tabindex="-1"><a class="header-anchor" href="#why-function-reference-stability-matters-in-react"><span>Why function reference stability matters in React</span></a></h3><p>When a function reference changes, any memoized child component receiving that function as a prop will re-render even if the function’s behavior hasn’t changed.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Parent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Clicked&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> Child <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> onClick <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Child rendered&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click Me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Without stabilizing the <code>handleClick</code> function with the <code>useCallback</code> hook, <code>Child</code> will re-render on every render of <code>Parent</code>, even if the product list remains unchanged.</p><hr><h2 id="what-is-usecallback" tabindex="-1"><a class="header-anchor" href="#what-is-usecallback"><span>What is useCallback?</span></a></h2><p><code>useCallback()</code> is one of React’s performance optimization hooks that caches a function declaration on every render and returns the same function without reference changes if the dependencies remain unchanged since the previous render.</p><h3 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax"><span>Syntax</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> memoizedFunction <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//logic here</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dependency1<span class="token punctuation">,</span> dependency2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>useCallback</code> hook takes two arguments. The first is the function you want to memoize, and the second is a dependency array. Whenever any value in this array changes, the function is recreated with a new reference.</p><hr><h2 id="how-usecallback-prevents-unnecessary-re-renders" tabindex="-1"><a class="header-anchor" href="#how-usecallback-prevents-unnecessary-re-renders"><span>How useCallback prevents unnecessary re-renders</span></a></h2><p>Let’s consider an ecommerce admin case study where a product list page displays the list of product items and the product item component receives a function prop to delete the product from the list.</p><p>Create a <code>ProductList.jsx</code> component in your React project and add the following:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ProductList.jsx"><span>ProductList.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> memo<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> ProductItem <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> product<span class="token punctuation">,</span> onDelete <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Rendering product item component&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p-4 w-full border rounded-md shadow-sm mb-4 flex flex-col items-center text-center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> </span>
<span class="line">        <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>image<span class="token punctuation">}</span></span> </span>
<span class="line">        <span class="token attr-name">alt</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span> </span>
<span class="line">        <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>w-32 h-32 object-cover rounded-md mb-2<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-lg font-semibold<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-sm text-gray-600 mb-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>description<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> </span>
<span class="line">        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">onDelete</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span></span> </span>
<span class="line">        <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Delete</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">ProductList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>isLoggedIn<span class="token punctuation">,</span> setIsLoggedIn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> </span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>products<span class="token punctuation">,</span> setProducts<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> </span>
<span class="line">      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> </span>
<span class="line">      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Product 1&#39;</span><span class="token punctuation">,</span> </span>
<span class="line">      <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;Description for Product 1&#39;</span><span class="token punctuation">,</span> </span>
<span class="line">      <span class="token literal-property property">image</span><span class="token operator">:</span> <span class="token string">&#39;https://res.cloudinary.com/muhammederdem/image/upload/q_60/v1536405217/starwars/item-2.webp&#39;</span> </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> </span>
<span class="line">      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> </span>
<span class="line">      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Product 2&#39;</span><span class="token punctuation">,</span> </span>
<span class="line">      <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;Description for Product 2&#39;</span><span class="token punctuation">,</span> </span>
<span class="line">      <span class="token literal-property property">image</span><span class="token operator">:</span> <span class="token string">&#39;https://res.cloudinary.com/muhammederdem/image/upload/q_60/v1536405217/starwars/item-4.webp&#39;</span> </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> </span>
<span class="line">      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> </span>
<span class="line">      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Product 3&#39;</span><span class="token punctuation">,</span> </span>
<span class="line">      <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;Description for Product 3&#39;</span><span class="token punctuation">,</span> </span>
<span class="line">      <span class="token literal-property property">image</span><span class="token operator">:</span> <span class="token string">&#39;https://res.cloudinary.com/muhammederdem/image/upload/q_60/v1536405217/starwars/item-3.webp&#39;</span> </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> </span>
<span class="line">        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> </span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Product 4&#39;</span><span class="token punctuation">,</span> </span>
<span class="line">        <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;Description for Product 4&#39;</span><span class="token punctuation">,</span> </span>
<span class="line">        <span class="token literal-property property">image</span><span class="token operator">:</span> <span class="token string">&#39;https://res.cloudinary.com/muhammederdem/image/upload/q_60/v1536405217/starwars/item-1.webp&#39;</span> </span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">toggleLogin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setIsLoggedIn</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>val <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">deleteProduct</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setProducts</span><span class="token punctuation">(</span>products<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">product</span> <span class="token operator">=&gt;</span> product<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>w-full p-10<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-2xl font-bold mb-6 text-center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Product List</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>isLoggedIn <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> </span>
<span class="line">        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>toggleLogin<span class="token punctuation">}</span></span> </span>
<span class="line">        <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600 mb-6<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Log out</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span> <span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> </span>
<span class="line">      <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>toggleLogin<span class="token punctuation">}</span></span> </span>
<span class="line">      <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 mb-6<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      Log in</span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>flex space-x-10 w-full<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token punctuation">{</span>products<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">            products<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">product</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ProductItem</span></span> </span>
<span class="line">                <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span> </span>
<span class="line">                <span class="token attr-name">product</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>product<span class="token punctuation">}</span></span> </span>
<span class="line">                <span class="token attr-name">onDelete</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>deleteProduct<span class="token punctuation">}</span></span> </span>
<span class="line">            <span class="token punctuation">/&gt;</span></span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-gray-500 text-center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">No products available.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> ProductList<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p><code>React.memo</code> wraps the <code>ProductItem</code> component to prevent unnecessary re-renders. This means <code>ProductItem</code> will only re-render if its <code>product</code> or <code>onDelete</code> props change.</p><p>We’ve added console log to check whether the component re-renders when the <code>isLoggedIn</code> state updates. Without <code>memo</code>, <code>ProductItem</code> would re-render every time <code>isLoggedIn</code> changes, even if the product list remains unchanged.</p><p>Running the project should result in the following:</p><figure><img src="`+w+`" alt=" Example" tabindex="0" loading="lazy"><figcaption><code>useCallback</code> Example</figcaption></figure><p>Did you notice that the <code>ProductItem</code> component re-renders every time we click the <strong>Log in</strong> or <strong>Log out</strong> button? This makes memoization ineffective.</p><p>Imagine having thousands of products in the list — these unnecessary re-renders could slow down the app significantly. If the buttons are clicked repeatedly, it might even lead to performance issues or crashes.</p><p>The problem is that each time the <code>isLoggedIn</code> state changes, the <code>ProductList</code> component re-renders and recreates the <code>deleteProduct</code> function with a new reference, causing unnecessary re-rendering when the function is passed as a prop to the memoized <code>ProductItem</code> component (<code>React.memo</code>).</p><p>To resolve this issue, we have to stabilize the <code>deleteProduct</code> function reference by wrapping it in a <code>useCallback</code> hook:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> deleteProduct <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setProducts</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prevProducts</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> prevProducts<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">product</span> <span class="token operator">=&gt;</span> product<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+x+`" alt="useCallback Example" tabindex="0" loading="lazy"><figcaption>useCallback Example</figcaption></figure><p>Now the <code>ProductItem</code> component no longer re-renders after clicking the <strong>Log in</strong> or <strong>Log out</strong> button.</p><hr><h2 id="avoiding-unnecessary-dependencies-with-usecallback" tabindex="-1"><a class="header-anchor" href="#avoiding-unnecessary-dependencies-with-usecallback"><span>Avoiding unnecessary dependencies with useCallback</span></a></h2><p>Imagine you’re building an e-commerce app where users can infinitely scroll through products. The product list is fetched from an API, and users can favorite items by clicking a heart icon. To optimize performance, we want to avoid unnecessary function re-creations every time the component re-renders.</p><p>If you think wrapping the <code>toggleFavorite</code> function in <code>useCallback</code> is the right approach, you’re correct.</p><p>Here is an implementation of this feature:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ProductList.jsx"><span>ProductList.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useCallback <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> ProductItem <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> product<span class="token punctuation">,</span> onFavorite <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Rendering </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>product<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p-4 w-full border rounded-md shadow-sm mb-4 flex flex-col items-center text-center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> </span>
<span class="line">        <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>image<span class="token punctuation">}</span></span> </span>
<span class="line">        <span class="token attr-name">alt</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span> </span>
<span class="line">        <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>w-32 h-32 object-cover rounded-md mb-2<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-lg font-semibold<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> </span>
<span class="line">        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">onFavorite</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span></span> </span>
<span class="line">        <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">px-4 py-2 rounded-md </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span></span>
<span class="line">          product<span class="token punctuation">.</span>isFavorite <span class="token operator">?</span> <span class="token string">&#39;bg-red-500&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;bg-gray-300&#39;</span></span>
<span class="line">        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>isFavorite <span class="token operator">?</span> <span class="token string">&quot;❤️ Unfavorite&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;🤍 Favorite&quot;</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">ProductList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>products<span class="token punctuation">,</span> setProducts<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Product 1&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">image</span><span class="token operator">:</span> <span class="token string">&#39;https://res.cloudinary.com/muhammederdem/image/upload/q_60/v1536405217/starwars/item-2.webp&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">isFavorite</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Product 2&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">image</span><span class="token operator">:</span> <span class="token string">&#39;https://res.cloudinary.com/muhammederdem/image/upload/q_60/v1536405217/starwars/item-1.webp&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">isFavorite</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Product 3&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">image</span><span class="token operator">:</span> <span class="token string">&#39;https://res.cloudinary.com/muhammederdem/image/upload/q_60/v1536405217/starwars/item-3.webp&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">isFavorite</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> toggleFavorite <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setProducts</span><span class="token punctuation">(</span>products<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">product</span> <span class="token operator">=&gt;</span></span>
<span class="line">      product<span class="token punctuation">.</span>id <span class="token operator">===</span> id <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token operator">...</span>product<span class="token punctuation">,</span> <span class="token literal-property property">isFavorite</span><span class="token operator">:</span> <span class="token operator">!</span>product<span class="token punctuation">.</span>isFavorite <span class="token punctuation">}</span> <span class="token operator">:</span> product</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>products<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>w-full p-10<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-2xl font-bold mb-6 text-center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Product List</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex space-x-10 w-full<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token punctuation">{</span>products<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">product</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ProductItem</span></span> </span>
<span class="line">            <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span> </span>
<span class="line">            <span class="token attr-name">product</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>product<span class="token punctuation">}</span></span> </span>
<span class="line">            <span class="token attr-name">onFavorite</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>toggleFavorite<span class="token punctuation">}</span></span> </span>
<span class="line">          <span class="token punctuation">/&gt;</span></span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> ProductList<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Running the project should produce the following result:</p><figure><img src="`+C+`" alt=" Example" tabindex="0" loading="lazy"><figcaption><code>useCallback</code> Example</figcaption></figure><p>Did you notice that when you click the <strong>Favorite</strong> or <strong>Unfavorite</strong> button for a product, the <code>ProductItem</code> component re-renders for all products — even though we used <code>useCallback</code> to stabilize the <code>toggleFavorite</code> function?</p><p>This happens because <code>products</code> is unnecessarily included in the dependency array of <code>useCallback</code>. Every time a product’s <code>isFavorite</code> state changes, the entire <code>products</code> state updates. As a result, <code>toggleFavorite</code> gets recreated with a new reference, causing all <code>ProductItem</code> components to re-render.</p><p>We can optimize this by removing <code>products</code> from the dependency array, like this:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> toggleFavorite <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setProducts</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prevProducts</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    prevProducts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">product</span> <span class="token operator">=&gt;</span></span>
<span class="line">      product<span class="token punctuation">.</span>id <span class="token operator">===</span> id <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token operator">...</span>product<span class="token punctuation">,</span> <span class="token literal-property property">isFavorite</span><span class="token operator">:</span> <span class="token operator">!</span>product<span class="token punctuation">.</span>isFavorite <span class="token punctuation">}</span> <span class="token operator">:</span> product</span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, the <code>toggleFavorite</code> function uses the functional update pattern, ensuring that it always works with the latest state by accessing <code>prevProducts</code>, which represents the state before the update. The empty dependency array (<code>[]</code>) ensures that <code>toggleFavorite</code> is created only once and does not change unless the component unmounts or re-renders, preventing unnecessary function re-creations:</p><figure><img src="`+j+`" alt="useCallback Example" tabindex="0" loading="lazy"><figcaption>useCallback Example</figcaption></figure><p>With this optimization, the <code>ProductItem</code> component now re-renders only for the specific product whose favorite status changes, significantly improving performance.</p><hr><h2 id="writing-more-efficient-custom-hooks-with-usecallback" tabindex="-1"><a class="header-anchor" href="#writing-more-efficient-custom-hooks-with-usecallback"><span>Writing more efficient custom hooks with useCallback</span></a></h2><p>When creating a custom Hook, wrapping any returned functions with <code>useCallback</code> is best practice to maintain a stable reference:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">useCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>cart<span class="token punctuation">,</span> setCart<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> addToCart <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setCart</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prevCart</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token operator">...</span>prevCart<span class="token punctuation">,</span> item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> removeFromCart <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setCart</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prevCart</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> prevCart<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> cart<span class="token punctuation">,</span> addToCart<span class="token punctuation">,</span> removeFromCart <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By doing this, you allow components that use your Hook to avoid unnecessary re-renders and optimize performance when needed.</p><hr><h2 id="when-you-don-t-need-usecallback" tabindex="-1"><a class="header-anchor" href="#when-you-don-t-need-usecallback"><span>When you don’t need <code>useCallback</code></span></a></h2><p>While <code>useCallback</code> is useful for performance optimization, there are cases where it is unnecessary. Here are two key scenarios where <code>useCallback</code> is not needed:</p><ul><li>If you are not passing a function as a prop to a component wrapped in <code>memo</code>, then you don’t need <code>useCallback</code>.</li><li>If memoizing a function does not bring a noticeable performance improvement, then you don’t need <code>useCallback</code>.</li></ul><hr><h2 id="comparing-usecallback-to-usememo-useeffect-and-useref" tabindex="-1"><a class="header-anchor" href="#comparing-usecallback-to-usememo-useeffect-and-useref"><span>Comparing <code>useCallback</code> to <code>useMemo</code>, <code>useEffect</code>, and <code>useRef</code></span></a></h2>`,58)),s("p",null,[n[37]||(n[37]=s("a",{href:"https://blog.logrocket.com/react-usememo-vs-usecallback.md",target:"_blank",rel:"noopener noreferrer"},[s("strong",null,[s("code",null,"useCallback")])],-1)),n[38]||(n[38]=a(", ")),t(o,{to:"/blog.logrocket.com/react-usememo-vs-usecallback.html"},{default:e(()=>n[35]||(n[35]=[s("strong",null,[s("code",null,"useMemo")],-1)])),_:1,__:[35]}),n[39]||(n[39]=a(", ")),t(o,{to:"/blog.logrocket.com/useeffect-react-hook-complete-guide.html"},{default:e(()=>n[36]||(n[36]=[s("strong",null,[s("code",null,"useEffect")],-1)])),_:1,__:[36]}),n[40]||(n[40]=a(", and ")),n[41]||(n[41]=s("a",{href:"/blog.logrocket.com/complete-guide-react-refs.mdcreating-refs-using-useref-hook",target:"_blank",rel:"noopener noreferrer"},[s("strong",null,[s("code",null,"useRef")])],-1)),n[42]||(n[42]=a(" are all React hooks that help optimize performance, but they serve different purposes. Here’s a comparison of how each one works and when to use them:"))]),n[47]||(n[47]=l('<table><thead><tr><th style="text-align:right;">Feature</th><th><code>useCallback</code></th><th><code>useMemo</code></th><th><code>useEffect</code></th><th><code>useRef</code></th></tr></thead><tbody><tr><td style="text-align:right;"><strong>Purpose</strong></td><td>Caches a function to prevent re-creation on re-renders.</td><td>Caches a computed value to avoid unnecessary recalculations.</td><td>Runs side effects (API calls, subscriptions, DOM updates) after renders.</td><td>Stores a persistent reference without triggering re-renders.</td></tr><tr><td style="text-align:right;"><strong>Returns</strong></td><td>A cached function.</td><td>A cached value.</td><td>Nothing (executes code after render).</td><td>A mutable object <code>{&#39;{ current: value }&#39;}</code>.</td></tr><tr><td style="text-align:right;"><strong>Triggers Re-render?</strong></td><td>No</td><td>No</td><td>Yes (when state changes)</td><td>No</td></tr></tbody></table><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, we explored the <code>useCallback</code> hook and how it optimizes app performance by preventing unnecessary re-renders. We demonstrated its use with real-world examples, discussed how to write more efficient custom hooks, and identified when <code>useCallback</code> is truly needed versus when it is unnecessary.</p><p>Additionally, we compared <code>useCallback</code> with related hooks like <code>useMemo</code>, <code>useRef</code>, and <code>useEffect</code>, clarifying their use cases in React.</p><p>Now, you have a solid understanding of <code>useCallback</code> and how to use it effectively to improve your React applications.</p>',6)),b(" TODO: add ARTICLE CARD "),t(i,u(r({title:"React useCallback: When and how to use it for better performance",desc:"Learn how React's useCallback hook boosts performance by memoizing functions and preventing unnecessary re-renders with practical examples.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-usecallback.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const E=g(P,[["render",z]]),T=JSON.parse('{"path":"/blog.logrocket.com/react-usecallback.html","title":"React useCallback: When and how to use it for better performance","lang":"en-US","frontmatter":{"lang":"en-US","title":"React useCallback: When and how to use it for better performance","description":"Article(s) > React useCallback: When and how to use it for better performance","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React useCallback: When and how to use it for better performance\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-usecallback/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-usecallback/usecallback-example-1.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-usecallback/usecallback-example-2.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-usecallback/usecallback-example-3.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-usecallback/usecallback-example-4.webp\\"],\\"datePublished\\":\\"2025-02-26T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Emmanuel John\\",\\"url\\":\\"https://blog.logrocket.com/author/emmanueljohn/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-usecallback.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"React useCallback: When and how to use it for better performance"}],["meta",{"property":"og:description","content":"Article(s) > React useCallback: When and how to use it for better performance"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-usecallback/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-usecallback/banner.png"}],["meta",{"name":"twitter:image:alt","content":"React useCallback: When and how to use it for better performance"}],["meta",{"property":"article:author","content":"Emmanuel John"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-02-26T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > React useCallback: When and how to use it for better performance"},{"property":"og:description","content":"React useCallback: When and how to use it for better performance"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-usecallback.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2025-02-26T00:00:00.000Z","isOriginal":false,"author":[{"name":"Emmanuel John","url":"https://blog.logrocket.com/author/emmanueljohn/"}],"cover":"/assets/image/blog.logrocket.com/react-usecallback/banner.png"},"git":{},"readingTime":{"minutes":7.08,"words":2125},"filePathRelative":"blog.logrocket.com/react-usecallback.md","copyright":{"author":"Emmanuel John"}}');export{E as comp,T as data};
