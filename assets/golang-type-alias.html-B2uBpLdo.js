import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as a,f as s,b as m,a as k,t as h,n as l,g as c,w as t,r as i,o as y,e as o}from"./app-BVguHYKu.js";const v={},b={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"};function x(r,n){const p=i("VPCard"),e=i("router-link"),d=i("SiteInfo");return y(),g("div",null,[a("h1",b,[a("a",f,[a("span",null,h(r.$frontmatter.title)+" 관련",1)])]),s(p,l(c({title:"Go > Article(s)",desc:"Article(s)",link:"/programming/go/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a("nav",w,[a("ul",null,[a("li",null,[s(e,{to:"#type-declaration-and-type-definition"},{default:t(()=>n[0]||(n[0]=[o("Type declaration and type definition")])),_:1,__:[0]})]),a("li",null,[s(e,{to:"#code-refactoring"},{default:t(()=>n[1]||(n[1]=[o("Code refactoring")])),_:1,__:[1]})]),a("li",null,[s(e,{to:"#type-aliases-parameter-types-and-compatibility"},{default:t(()=>n[2]||(n[2]=[o("Type aliases: parameter types and compatibility")])),_:1,__:[2]})]),a("li",null,[s(e,{to:"#code-readability"},{default:t(()=>n[3]||(n[3]=[o("Code readability")])),_:1,__:[3]})]),a("li",null,[s(e,{to:"#reducing-boilerplate-code"},{default:t(()=>n[4]||(n[4]=[o("Reducing boilerplate code")])),_:1,__:[4]})]),a("li",null,[s(e,{to:"#key-takeaways"},{default:t(()=>n[5]||(n[5]=[o("Key takeaways")])),_:1,__:[5]})])])]),n[6]||(n[6]=a("hr",null,null,-1)),s(d,{name:"Golang Type Alias",desc:"Golang type aliases were introduced in Go version 1.9 and have been available since. Type alias declaration has a different form from the standard type definition and can be particularly helpful during code refactoring but can also have other uses.",url:"https://gosolve.io/golang-type-alias",logo:"https://gosolve.io/wp-content/uploads/2022/03/cropped-ikona1-192x192.png",preview:"https://gosolve.io/wp-content/uploads/2023/05/234-1024x1024.png"}),n[7]||(n[7]=m(`<h2 id="type-declaration-and-type-definition" tabindex="-1"><a class="header-anchor" href="#type-declaration-and-type-definition"><span>Type declaration and type definition</span></a></h2><p>Before 1.9 Go language had a way to create an alternative name for all constants, functions, and almost all variables. As mentioned, alias declaration has a bit different syntax from the type definition. The type alias allows you to create a new name for an existing type. The form type declaration has is as follows:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">type</span> NewAlias <span class="token operator">=</span> OldType</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>whereas the standard type definition structure looks like that:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">type</span> NewAlias OldType</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The most significant difference between the two is that the alias declaration does create a new distinct type separate from the type it was created from. It simply creates an alias for the <code>T1</code> name. You could think about this as an alternate name for the type <code>T2</code>.</p><hr><h2 id="code-refactoring" tabindex="-1"><a class="header-anchor" href="#code-refactoring"><span>Code refactoring</span></a></h2><p>Type alias declaration wasn’t designed with everyday use in mind. The main idea behind the implementation of this feature to Go was to help with the maintenance of the existing code and code repair. When you need to move a type between packages while undertaking large-scale refactorings compatibility with existing clients is crucial.</p><hr><h2 id="type-aliases-parameter-types-and-compatibility" tabindex="-1"><a class="header-anchor" href="#type-aliases-parameter-types-and-compatibility"><span>Type aliases: parameter types and compatibility</span></a></h2><p>To make sure that the existing type and the alias will be compatible, the type alias should have interchangeable parameter types.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span>  </span>
<span class="line">  <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> foo <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  </span>
<span class="line">  </span>
<span class="line"><span class="token comment">// declare a new alias for foo type  </span></span>
<span class="line"><span class="token keyword">type</span> bar <span class="token operator">=</span> foo</span>
<span class="line">  </span>
<span class="line"><span class="token keyword">func</span> <span class="token function">printType</span><span class="token punctuation">(</span>i bar<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>“my <span class="token keyword">type</span> is <span class="token operator">%</span>T\\\\n”<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token keyword">var</span> b bar  </span>
<span class="line">  <span class="token function">printType</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="code-readability" tabindex="-1"><a class="header-anchor" href="#code-readability"><span>Code readability</span></a></h2><p>In addition to working on large codebases type aliases can be used to improve the general readability of the code. Complex function definitions can be replaced with aliases too.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">type</span> QueryFunc <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> sql <span class="token builtin">string</span><span class="token punctuation">,</span> args …any<span class="token punctuation">)</span> <span class="token punctuation">(</span>Rows<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>It’s part of <code>jackc/pgx</code> library. Instead of using this function prototype in each function, it is easier and more readable to use the new name (alias) as an argument. For example:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">getFromDatabase</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> query QueryFunc<span class="token punctuation">)</span> <span class="token punctuation">(</span>Rows<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></span>
<span class="line">rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getFromDatabase</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> conn1<span class="token punctuation">.</span>Query<span class="token punctuation">)</span></span>
<span class="line">rows<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">getFromDatabase</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> txn1<span class="token punctuation">.</span>Query<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="reducing-boilerplate-code" tabindex="-1"><a class="header-anchor" href="#reducing-boilerplate-code"><span>Reducing boilerplate code</span></a></h2><p>Using alternate names for types often used by packages can reduce the boilerplate code. Take into consideration the following example:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> listOfObjects <span class="token punctuation">{</span></span>
<span class="line">  valueOfOne <span class="token operator">:=</span> listOfObjects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Database<span class="token punctuation">.</span>Transaction<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">  valueOfTwo <span class="token operator">:=</span> listOfObjects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Database<span class="token punctuation">.</span>Transaction<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ---</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> getter <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> get getter</span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> listOfObjects <span class="token punctuation">{</span></span>
<span class="line">  get <span class="token operator">=</span> listOfObjects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Database<span class="token punctuation">.</span>Transaction<span class="token punctuation">.</span>Get</span>
<span class="line">  valueOfOne <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">  valueOfTwo <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By defining these aliases and giving the types an alternate spelling that is simpler we allow packages to simply refer to Get instead of using the whole path which on a larger scale is helpful in keeping the code clean and tight.</p><hr><h2 id="key-takeaways" tabindex="-1"><a class="header-anchor" href="#key-takeaways"><span>Key takeaways</span></a></h2><p>Type aliasing refers to the method of declaring a new name for an existing type. This alternate spelling improves code readability and is a big game-changer in code refactoring. From the business perspective, it shows that even if Golang is much younger than technologies such as Python and Java, Go core developers try to do anything to make it workable from the get-go.</p>`,27)),k(" TODO: add ARTICLE CARD "),s(p,l(c({title:"Golang Type Alias",desc:"Golang type aliases were introduced in Go version 1.9 and have been available since. Type alias declaration has a different form from the standard type definition and can be particularly helpful during code refactoring but can also have other uses.",link:"https://chanhi2000.github.io/bookshelf/gosolve.io/golang-type-alias.html",logo:"https://gosolve.io/wp-content/uploads/2022/03/cropped-ikona1-192x192.png",background:"rgba(56,119,242,0.2)"})),null,16)])}const A=u(v,[["render",x]]),G=JSON.parse('{"path":"/gosolve.io/golang-type-alias.html","title":"Golang Type Alias","lang":"en-US","frontmatter":{"lang":"en-US","title":"Golang Type Alias","description":"Article(s) > Golang Type Alias","icon":"fa-brands fa-golang","category":["Go","Article(s)"],"tag":["blog","gosolve.io","go","golang"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Golang Type Alias\\",\\"image\\":[\\"https://gosolve.io/wp-content/uploads/2023/05/234-1024x1024.png\\"],\\"datePublished\\":\\"2023-02-16T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yanick\\",\\"url\\":\\"https://gosolve.io/author/jgadek/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/gosolve.io/golang-type-alias.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Golang Type Alias"}],["meta",{"property":"og:description","content":"Article(s) > Golang Type Alias"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gosolve.io/wp-content/uploads/2023/05/234-1024x1024.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://gosolve.io/wp-content/uploads/2023/05/234-1024x1024.png"}],["meta",{"name":"twitter:image:alt","content":"Golang Type Alias"}],["meta",{"property":"article:author","content":"Yanick"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:tag","content":"gosolve.io"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-02-16T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Golang Type Alias"},{"property":"og:description","content":"Golang Type Alias"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/gosolve.io/golang-type-alias.html"}]],"prev":"/programming/go/articles/README.md","date":"2023-02-16T00:00:00.000Z","isOriginal":false,"author":[{"name":"Yanick","url":"https://gosolve.io/author/jgadek/"}],"cover":"https://gosolve.io/wp-content/uploads/2023/05/234-1024x1024.png"},"git":{},"readingTime":{"minutes":2.47,"words":740},"filePathRelative":"gosolve.io/golang-type-alias.md","copyright":{"author":"Yanick"}}');export{A as comp,G as data};
