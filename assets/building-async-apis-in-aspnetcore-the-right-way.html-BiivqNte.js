import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as e,b as c,a as g,t as h,n as u,g as r,w as t,e as a,r as o,o as b}from"./app-BVguHYKu.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"};function P(d,n){const l=o("VPCard"),p=o("router-link"),k=o("SiteInfo"),i=o("RouteLink");return b(),v("div",null,[s("h1",w,[s("a",f,[s("span",null,h(d.$frontmatter.title)+" 관련",1)])]),e(l,u(r({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",A,[s("ul",null,[s("li",null,[e(p,{to:"#understanding-async-apis"},{default:t(()=>n[0]||(n[0]=[a("Understanding Async APIs")])),_:1,__:[0]})]),s("li",null,[e(p,{to:"#the-problem-with-sync-apis"},{default:t(()=>n[1]||(n[1]=[a("The Problem with Sync APIs")])),_:1,__:[1]})]),s("li",null,[e(p,{to:"#a-better-way-async-processing"},{default:t(()=>n[2]||(n[2]=[a("A Better Way: Async Processing")])),_:1,__:[2]}),s("ul",null,[s("li",null,[e(p,{to:"#uploading-images"},{default:t(()=>n[3]||(n[3]=[a("Uploading Images")])),_:1,__:[3]})]),s("li",null,[e(p,{to:"#checking-progress"},{default:t(()=>n[4]||(n[4]=[a("Checking Progress")])),_:1,__:[4]})]),s("li",null,[e(p,{to:"#processing-images-in-background"},{default:t(()=>n[5]||(n[5]=[a("Processing Images in Background")])),_:1,__:[5]})])])]),s("li",null,[e(p,{to:"#beyond-polling-real-time-updates"},{default:t(()=>n[6]||(n[6]=[a("Beyond Polling: Real-Time Updates")])),_:1,__:[6]})]),s("li",null,[e(p,{to:"#summary"},{default:t(()=>n[7]||(n[7]=[a("Summary")])),_:1,__:[7]})])])]),n[21]||(n[21]=s("hr",null,null,-1)),e(k,{name:"Building Async APIs in ASP.NET Core - The Right Way",desc:"Not every API request needs to finish right away. Learn how to build better APIs by moving long-running tasks to the background. This guide shows practical examples using image processing in ASP.NET Core 9.",url:"https://milanjovanovic.tech/blog/building-async-apis-in-aspnetcore-the-right-way",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_117.png"}),n[22]||(n[22]=c(`<p>Most APIs follow a simple pattern. The client sends a request. The server does some work. The server sends back a response.</p><p>This works well for fast operations like fetching data or simple updates. But what about operations that take longer?</p><p>Think about processing large files, generating reports, or converting videos. These operations can take minutes or even hours.</p><p>Making clients wait for these operations causes problems.</p><hr><h2 id="understanding-async-apis" tabindex="-1"><a class="header-anchor" href="#understanding-async-apis"><span>Understanding Async APIs</span></a></h2><p>The key to handling long-running operations is to change how we think about API responses. An async API splits work into two parts:</p><ul><li>Accept the request</li><li>Process it later</li></ul><p>First, we accept the request and return a tracking ID immediately. This gives users a quick response. Then, we process the actual work in the background, which won&#39;t block other requests. Users can check the status of their request using the tracking ID whenever they want.</p><p>This is different from <code>async</code>/<code>await</code> in C#. That&#39;s about handling many requests at once (concurrently). This is about handling long-running tasks better. We&#39;re not just making the code asynchronous - we&#39;re making the entire operation asynchronous from the user&#39;s perspective.</p><hr><h2 id="the-problem-with-sync-apis" tabindex="-1"><a class="header-anchor" href="#the-problem-with-sync-apis"><span>The Problem with Sync APIs</span></a></h2><p>Let&#39;s see this in practice with image processing. A typical image upload API might look like this:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">UploadImage</span><span class="token punctuation">(</span><span class="token class-name">IFormFile</span> file<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">BadRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Save original image</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> originalPath <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">SaveOriginalAsync</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Generate thumbnails</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> thumbnails <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">GenerateThumbnailsAsync</span><span class="token punctuation">(</span>originalPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Optimize all images</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">OptimizeImagesAsync</span><span class="token punctuation">(</span>originalPath<span class="token punctuation">,</span> thumbnails<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">{</span> originalPath<span class="token punctuation">,</span> thumbnails <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The client must wait while we save the file, generate thumbnails, and optimize images. On a slow connection or with a large file, this request could time out. The server is also stuck processing one image at a time.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_117/sync_api_request.png?imwidth=3840" alt="Sequence diagram showing a synchronous API request." tabindex="0" loading="lazy"><figcaption>Sequence diagram showing a synchronous API request.</figcaption></figure><hr><h2 id="a-better-way-async-processing" tabindex="-1"><a class="header-anchor" href="#a-better-way-async-processing"><span>A Better Way: Async Processing</span></a></h2><p>Let&#39;s fix these problems. We&#39;ll split the work into two parts:</p><ol><li>Accept the upload and return quickly</li><li>Do the heavy work in the background</li></ol><figure><img src="https://milanjovanovic.tech/blogs/mnw_117/async_api_request.png?imwidth=3840" alt="Sequence diagram showing an asynchronous API request." tabindex="0" loading="lazy"><figcaption>Sequence diagram showing an asynchronous API request.</figcaption></figure><h3 id="uploading-images" tabindex="-1"><a class="header-anchor" href="#uploading-images"><span>Uploading Images</span></a></h3><p>Here&#39;s the new upload endpoint:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">UploadImage</span><span class="token punctuation">(</span><span class="token class-name">IFormFile<span class="token punctuation">?</span></span> file<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">BadRequest</span><span class="token punctuation">(</span><span class="token string">&quot;No file uploaded.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>imageService<span class="token punctuation">.</span><span class="token function">IsValidImage</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">BadRequest</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid image file.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Phase 1: Accept the work</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> id <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> folderPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>_uploadDirectory<span class="token punctuation">,</span> <span class="token string">&quot;images&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> fileName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">id</span><span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Path<span class="token punctuation">.</span><span class="token function">GetExtension</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>FileName<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> originalPath <span class="token operator">=</span> <span class="token keyword">await</span> imageService<span class="token punctuation">.</span><span class="token function">SaveOriginalImageAsync</span><span class="token punctuation">(</span></span>
<span class="line">        file<span class="token punctuation">,</span></span>
<span class="line">        folderPath<span class="token punctuation">,</span></span>
<span class="line">        fileName</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Queue Phase 2 for background processing</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> job <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ImageProcessingJob</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> originalPath<span class="token punctuation">,</span> folderPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">await</span> jobQueue<span class="token punctuation">.</span><span class="token function">EnqueueAsync</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Return status URL immediately</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> statusUrl <span class="token operator">=</span> <span class="token function">GetStatusUrl</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">Accepted</span><span class="token punctuation">(</span>statusUrl<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> status <span class="token operator">=</span> <span class="token string">&quot;queued&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This new version only saves the original file during the HTTP request. The heavy work moves to a background process. The client immediately gets a status URL in the <code>Location</code> header instead of waiting.</p><h3 id="checking-progress" tabindex="-1"><a class="header-anchor" href="#checking-progress"><span>Checking Progress</span></a></h3><p>Clients can check their image&#39;s status using a separate endpoint:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;{id}/status&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">GetStatus</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>statusTracker<span class="token punctuation">.</span><span class="token function">TryGetStatus</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> status<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">new</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        id<span class="token punctuation">,</span></span>
<span class="line">        status<span class="token punctuation">,</span></span>
<span class="line">        links <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token string">&quot;completed&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        response<span class="token punctuation">.</span>links <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token punctuation">[</span><span class="token string">&quot;original&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GetImageUrl</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">[</span><span class="token string">&quot;thumbnail&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GetThumbnailUrl</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token named-parameter punctuation">width</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">[</span><span class="token string">&quot;preview&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GetThumbnailUrl</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token named-parameter punctuation">width</span><span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="processing-images-in-background" tabindex="-1"><a class="header-anchor" href="#processing-images-in-background"><span>Processing Images in Background</span></a></h3><p>The real work happens in the background processor. While the API handles new requests, a separate process works through the queued jobs. This separation gives us flexibility in how we handle the processing.</p>`,30)),s("p",null,[n[9]||(n[9]=a("For single-server deployments, we can use .NET's ")),e(i,{to:"/milanjovanovic.tech/lightweight-in-memory-message-bus-using-dotnet-channels.html"},{default:t(()=>n[8]||(n[8]=[a("Channel")])),_:1,__:[8]}),n[10]||(n[10]=a(" type to queue jobs in memory:"))]),n[23]||(n[23]=c(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JobQueue</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Channel<span class="token punctuation">&lt;</span>ImageProcessingJob<span class="token punctuation">&gt;</span></span> _channel<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">JobQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BoundedChannelOptions</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            FullMode <span class="token operator">=</span> BoundedChannelFullMode<span class="token punctuation">.</span>Wait</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        _channel <span class="token operator">=</span> Channel<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateBounded</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ImageProcessingJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">ValueTask</span> <span class="token function">EnqueueAsync</span><span class="token punctuation">(</span><span class="token class-name">ImageProcessingJob</span> job<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> ct <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> _channel<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> ct<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">IAsyncEnumerable<span class="token punctuation">&lt;</span>ImageProcessingJob<span class="token punctuation">&gt;</span></span> <span class="token function">DequeueAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> ct <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> _channel<span class="token punctuation">.</span>Reader<span class="token punctuation">.</span><span class="token function">ReadAllAsync</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For multi-server setups, we need a distributed queue like RabbitMQ or even Redis.</p><p>The background processor handles the time-consuming work:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageProcessor</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BackgroundService</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> ct<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> job <span class="token keyword">in</span> jobQueue<span class="token punctuation">.</span><span class="token function">DequeueAsync</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">try</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">await</span> statusTracker<span class="token punctuation">.</span><span class="token function">SetStatusAsync</span><span class="token punctuation">(</span></span>
<span class="line">                    job<span class="token punctuation">.</span>Id<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token string">&quot;processing&quot;</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">// Generate thumbnails</span></span>
<span class="line">                <span class="token keyword">await</span> <span class="token function">GenerateThumbnailsAsync</span><span class="token punctuation">(</span></span>
<span class="line">                    job<span class="token punctuation">.</span>OriginalPath<span class="token punctuation">,</span></span>
<span class="line">                    job<span class="token punctuation">.</span>OutputPath</span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">// Optimize images</span></span>
<span class="line">                <span class="token keyword">await</span> <span class="token function">OptimizeImagesAsync</span><span class="token punctuation">(</span></span>
<span class="line">                    job<span class="token punctuation">.</span>OriginalPath<span class="token punctuation">,</span></span>
<span class="line">                    job<span class="token punctuation">.</span>OutputPath</span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">await</span> statusTracker<span class="token punctuation">.</span><span class="token function">SetStatusAsync</span><span class="token punctuation">(</span></span>
<span class="line">                    job<span class="token punctuation">.</span>Id<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token string">&quot;completed&quot;</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">await</span> statusTracker<span class="token punctuation">.</span><span class="token function">SetStatusAsync</span><span class="token punctuation">(</span></span>
<span class="line">                    job<span class="token punctuation">.</span>Id<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token string">&quot;failed&quot;</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> <span class="token string">&quot;Failed to process image {Id}&quot;</span><span class="token punctuation">,</span> job<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("p",null,[n[12]||(n[12]=a("The background processor needs to handle failures gracefully. We can improve ")),e(i,{to:"/milanjovanovic.tech/building-resilient-cloud-applications-with-dotnet.html"},{default:t(()=>n[11]||(n[11]=[a("resilience")])),_:1,__:[11]}),n[13]||(n[13]=a(` by adding a retry policy with Polly. Status updates keep users informed throughout the process. Instead of just "processing", we tell them exactly what's happening. This improves the user experience and helps with debugging.`))]),n[24]||(n[24]=s("hr",null,null,-1)),n[25]||(n[25]=s("h2",{id:"beyond-polling-real-time-updates",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#beyond-polling-real-time-updates"},[s("span",null,"Beyond Polling: Real-Time Updates")])],-1)),n[26]||(n[26]=s("p",null,"Our status endpoint works, but it puts the burden on clients. They must repeatedly check for updates, leading to unnecessary server load. A client polling every second creates 60 requests per minute, yet most of these requests return the same status.",-1)),n[27]||(n[27]=s("p",null,"We can flip this model around. Instead of clients asking for updates, the server can push updates when they happen. This creates a more efficient and responsive system.",-1)),n[28]||(n[28]=s("figure",null,[s("img",{src:"https://milanjovanovic.tech/blogs/mnw_117/async_api_request_with_push.png?imwidth=3840",alt:"Sequence diagram showing an asynchronous API request with server push for status updates.",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Sequence diagram showing an asynchronous API request with server push for status updates.")],-1)),s("p",null,[e(i,{to:"/milanjovanovic.tech/adding-real-time-functionality-to-dotnet-applications-with-signalr.html"},{default:t(()=>n[14]||(n[14]=[a("SignalR and WebSockets")])),_:1,__:[14]}),n[15]||(n[15]=a(" enable real-time communication between server and client. When a job's status changes, the server immediately notifies interested clients. This approach reduces network traffic and gives users instant feedback."))]),n[29]||(n[29]=s("p",null,"For longer-running jobs, email notifications make more sense. Users don't need to keep their browsers open. They can close the tab and come back when notified. This works well for reports that take hours to generate or batch processes that run overnight.",-1)),n[30]||(n[30]=s("p",null,"Webhooks offer another option, especially for system-to-system communication. When a job completes, your server can notify other systems. This enables workflow automation and system integration without constant polling.",-1)),n[31]||(n[31]=s("hr",null,null,-1)),n[32]||(n[32]=s("h2",{id:"summary",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#summary"},[s("span",null,"Summary")])],-1)),n[33]||(n[33]=s("p",null,"Processing tasks asynchronously creates better experiences for everyone. Users get immediate responses instead of watching spinning loading indicators. They can start other tasks while waiting, and they'll know if something goes wrong.",-1)),s("p",null,[n[17]||(n[17]=a("The benefits extend beyond user experience. Servers can handle more requests because they're not tied up with long-running tasks. ")),e(i,{to:"/milanjovanovic.tech/scheduling-background-jobs-with-quartz-net.html"},{default:t(()=>n[16]||(n[16]=[s("strong",null,"Background processors",-1)])),_:1,__:[16]}),n[18]||(n[18]=a(" can retry failed operations without affecting the main application. You can even scale your processing separately from your web servers."))]),s("p",null,[e(i,{to:"/milanjovanovic.tech/global-error-handling-in-aspnetcore-8.html"},{default:t(()=>n[19]||(n[19]=[s("strong",null,"Error handling",-1)])),_:1,__:[19]}),n[20]||(n[20]=a(" improves too. When a long operation fails halfway through, you can save the progress and try again. Users know exactly what's happening because they can check the status. The system stays stable because one slow operation can't bring down your entire API."))]),n[34]||(n[34]=s("p",null,"That's all for today. Hope this was helpful.",-1)),n[35]||(n[35]=s("hr",null,null,-1)),g(" TODO: add ARTICLE CARD "),e(l,u(r({title:"Building Async APIs in ASP.NET Core - The Right Way",desc:"Not every API request needs to finish right away. Learn how to build better APIs by moving long-running tasks to the background. This guide shows practical examples using image processing in ASP.NET Core 9.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/building-async-apis-in-aspnetcore-the-right-way.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const I=m(y,[["render",P]]),j=JSON.parse('{"path":"/milanjovanovic.tech/building-async-apis-in-aspnetcore-the-right-way.html","title":"Building Async APIs in ASP.NET Core - The Right Way","lang":"en-US","frontmatter":{"lang":"en-US","title":"Building Async APIs in ASP.NET Core - The Right Way","description":"Article(s) > Building Async APIs in ASP.NET Core - The Right Way","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Building Async APIs in ASP.NET Core - The Right Way\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_117/sync_api_request.png?imwidth=3840\\",\\"https://milanjovanovic.tech/blogs/mnw_117/async_api_request.png?imwidth=3840\\",\\"https://milanjovanovic.tech/blogs/mnw_117/async_api_request_with_push.png?imwidth=3840\\"],\\"datePublished\\":\\"2024-11-23T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/building-async-apis-in-aspnetcore-the-right-way.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Building Async APIs in ASP.NET Core - The Right Way"}],["meta",{"property":"og:description","content":"Article(s) > Building Async APIs in ASP.NET Core - The Right Way"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_117.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_117.png"}],["meta",{"name":"twitter:image:alt","content":"Building Async APIs in ASP.NET Core - The Right Way"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-23T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Building Async APIs in ASP.NET Core - The Right Way"},{"property":"og:description","content":"Building Async APIs in ASP.NET Core - The Right Way"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/building-async-apis-in-aspnetcore-the-right-way.html"}]],"prev":"/programming/cs/articles/README.md","date":"2024-11-23T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_117.png"},"git":{},"readingTime":{"minutes":4.66,"words":1397},"filePathRelative":"milanjovanovic.tech/building-async-apis-in-aspnetcore-the-right-way.md","copyright":{"author":"Milan Jovanović"}}');export{I as comp,j as data};
