import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as e,b as r,a as b,t as y,n as u,g as d,w as t,e as a,r as l,o as f}from"./app-BVguHYKu.js";const w={},C={id:"frontmatter-title-관련",tabindex:"-1"},q={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},Q={href:"https://alistapart.com/article/quantity-queries-for-css/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://quantityqueries.com/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://codepen.io/editor/chriscoyier/pen/qEdJqdZ",target:"_blank",rel:"noopener noreferrer"};function j(o,n){const c=l("VPCard"),p=l("router-link"),m=l("SiteInfo"),i=l("VPIcon"),k=l("RouteLink"),h=l("CodePen");return f(),g("div",null,[s("h1",C,[s("a",q,[s("span",null,y(o.$frontmatter.title)+" 관련",1)])]),e(c,u(d({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[e(p,{to:"#setup-one"},{default:t(()=>n[0]||(n[0]=[a("Setup & One")])),_:1,__:[0]})]),s("li",null,[e(p,{to:"#two"},{default:t(()=>n[1]||(n[1]=[a("Two")])),_:1,__:[1]})]),s("li",null,[e(p,{to:"#three"},{default:t(()=>n[2]||(n[2]=[a("Three")])),_:1,__:[2]})]),s("li",null,[e(p,{to:"#four"},{default:t(()=>n[3]||(n[3]=[a("Four")])),_:1,__:[3]})]),s("li",null,[e(p,{to:"#five"},{default:t(()=>n[4]||(n[4]=[a("Five+")])),_:1,__:[4]})]),s("li",null,[e(p,{to:"#actually-carouselling"},{default:t(()=>n[5]||(n[5]=[a("Actually Carouselling")])),_:1,__:[5]})])])]),n[20]||(n[20]=s("hr",null,null,-1)),e(m,{name:"Quantity Query Carousel",desc:":has() makes quantities queries both easier and more powerful. We can alter how a grid is laid out and where the children go. Or, we can just blast it into a carousel. ",url:"https://frontendmasters.com/blog/quantity-query-carousel/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6323"}),s("p",null,[n[9]||(n[9]=a("The concept of a ")),n[10]||(n[10]=s("strong",null,"quantity query",-1)),n[11]||(n[11]=a(" is really neat. ")),s("a",Q,[e(i,{icon:"fas fa-globe"}),n[6]||(n[6]=a("Coined by Heydon"))]),n[12]||(n[12]=a(" back in 2015, the idea is that you apply different styles depending on how many siblings there are. They was a ")),s("a",S,[e(i,{icon:"fas fa-globe"}),n[7]||(n[7]=a("way to do it back then"))]),n[13]||(n[13]=a(", but it’s gotten much ")),e(k,{to:"/frontendmasters.com/quantity-queries-are-very-easy-with-css-has.html"},{default:t(()=>n[8]||(n[8]=[s("strong",null,[a("easier thanks to "),s("code",null,":has()")],-1)])),_:1,__:[8]}),n[14]||(n[14]=a(", which not only makes the detection easier but gives us access to the parent element where we likely want it."))]),n[21]||(n[21]=r(`<p>For instance:</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token selector">.grid </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  &amp;<span class="token punctuation">:</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* Has at least 2 elements */</span></span>
<span class="line">    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 1fr 1fr<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">/* Use a :not() to do reverse logic */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What if we kept going with the idea where we…</p><ul><li>If there is 1 element, let it be full-width</li><li>If there are 2 elements, set them side-by-side</li><li>If there are 3 elements, the first two are side-by-side, then the last is full-width</li><li>If there are 4 elements, then it’s a 2×2 grid</li></ul><p>Then…</p><ul><li>If there are 5+ elements, <em>woah there</em>, let’s just make it a carousel.</li></ul><p>I heard Ahmad Shadeed mention this idea on stage at CSS Day and I had to try it myself. Good news is that it works, particularly if you can stomach the idea of a “carousel” just being “horizontal overflow with some scroll snapping” in Firefox/Safari for now. Of course you’d be free to make your own fallback as needed.</p><p>Here’s the whole gang:</p>`,8)),e(h,{user:"chriscoyier","slug-hash":"qEdJqdZ",title:"Quantity Query Carousel","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[22]||(n[22]=r(`<hr><h2 id="setup-one" tabindex="-1"><a class="header-anchor" href="#setup-one"><span>Setup &amp; One</span></a></h2><p>The default setup can be something like:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.grid</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">gap</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Honestly we don’t even really need to make it a grid for one item, but it doesn’t really hurt and now we’re set up for the rest of them.</p><hr><h2 id="two" tabindex="-1"><a class="header-anchor" href="#two"><span>Two</span></a></h2><p>Does it have two? Yeah? Let’s do this.</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token selector">.grid </span><span class="token punctuation">{</span></span>
<span class="line">  ...</span>
<span class="line"></span>
<span class="line">  &amp;<span class="token punctuation">:</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 1fr 1fr<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that if our grid has <em>three</em> or more elements, this will also match. So if want to do something different with columns, we’ll need to override this or otherwise change things.</p><hr><h2 id="three" tabindex="-1"><a class="header-anchor" href="#three"><span>Three</span></a></h2><p>To illustrate the point, let’s match where there are <em>only</em> three items.</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token selector">.grid </span><span class="token punctuation">{</span></span>
<span class="line">  ...</span>
<span class="line"></span>
<span class="line">  &amp;<span class="token punctuation">:</span><span class="token function">has</span><span class="token punctuation">(</span>&gt; <span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">:</span><span class="token function">has</span><span class="token punctuation">(</span>&gt; <span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">&gt;</span> <span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>3<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">grid-column</span><span class="token punctuation">:</span> span 2<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So we’re not going to change the 2-column grid, we’ll leave that alone from <strong>two</strong>. And now we’re not selecting the grid itself, but just grabbing that third item and stretching it across both columns of the grid.</p><hr><h2 id="four" tabindex="-1"><a class="header-anchor" href="#four"><span>Four</span></a></h2><p>We can… do nothing. It’s already a two-column grid from <strong>two</strong>. So let’s let it be.</p><hr><h2 id="five" tabindex="-1"><a class="header-anchor" href="#five"><span>Five+</span></a></h2><p>This is the fun part. We already know how to test for X+ children, so we do that:</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token selector">.grid </span><span class="token punctuation">{</span></span>
<span class="line">  ...</span>
<span class="line"></span>
<span class="line">  &amp;<span class="token punctuation">:</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>5<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> unset<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But now we’re <code>unset</code>ing those columns, as we don’t need them anymore. Instead we’re going with automatic column creation in the column direction. We could use flexbox here too essentially but we’re already in a grid and grid can do it with easy sturdy columns so might as well. Then we’ll slap smooth scrolling and scroll snapping on there, which will essentially be the fallback behavior (only Chrome supports the <code>::scroll-button</code> stuff that makes it carousel-like for now).</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token selector">.grid </span><span class="token punctuation">{</span></span>
<span class="line">  ...</span>
<span class="line"></span>
<span class="line">  &amp;<span class="token punctuation">:</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>5<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> unset<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token property">grid-auto-flow</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">grid-auto-columns</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token property">overflow-x</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">overscroll-behavior-x</span><span class="token punctuation">:</span> contain<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">scroll-snap-type</span><span class="token punctuation">:</span> x mandatory<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">scroll-behavior</span><span class="token punctuation">:</span> smooth<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token selector">&gt; div </span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">scroll-snap-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="actually-carouselling" tabindex="-1"><a class="header-anchor" href="#actually-carouselling"><span>Actually Carouselling</span></a></h2><p>We’re all set up for it, we just need those back/forward buttons to make it really be a carousel. That’s a CSS thing now, at least in Chrome ‘n’ friends, so we can progressively enhance into it:</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token selector">.grid </span><span class="token punctuation">{</span></span>
<span class="line">  ...</span>
<span class="line"></span>
<span class="line">  &amp;<span class="token punctuation">:</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>5<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    ...</span>
<span class="line"></span>
<span class="line">    <span class="token property">anchor-name</span><span class="token punctuation">:</span> --⚓️-carousel<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    &amp;<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">scroll-button</span><span class="token punctuation">(</span>*<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">position-anchor</span><span class="token punctuation">:</span> --⚓️-carousel<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">background</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">font-size</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    &amp;<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">scroll-button</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">position-area</span><span class="token punctuation">:</span> center inline-end<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">translate</span><span class="token punctuation">:</span> -3rem -0.5rem<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;➡️&quot;</span> <span class="token operator">/</span> <span class="token string">&quot;Next&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    &amp;<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">scroll-button</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">position-area</span><span class="token punctuation">:</span> inline-start center<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">translate</span><span class="token punctuation">:</span> 3rem -0.5rem<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;⬅️&quot;</span> <span class="token operator">/</span> <span class="token string">&quot;Previous&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28)),s("p",null,[n[18]||(n[18]=a("That’ll do it! ")),s("a",T,[n[15]||(n[15]=a("Here’s the demo (")),e(i,{icon:"fa-brands fa-codepen"}),n[16]||(n[16]=s("code",null,"chriscoyier",-1)),n[17]||(n[17]=a(")"))]),n[19]||(n[19]=a(" and I’ll video it in case you’re not in Chrome."))]),b(" TODO: add ARTICLE CARD "),e(c,u(d({title:"Quantity Query Carousel",desc:":has() makes quantities queries both easier and more powerful. We can alter how a grid is laid out and where the children go. Or, we can just blast it into a carousel. ",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/quantity-query-carousel.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const _=v(w,[["render",j]]),P=JSON.parse('{"path":"/frontendmasters.com/quantity-query-carousel.html","title":"Quantity Query Carousel","lang":"en-US","frontmatter":{"lang":"en-US","title":"Quantity Query Carousel","description":"Article(s) > Quantity Query Carousel","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","frontendmasters.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Quantity Query Carousel\\",\\"image\\":[\\"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6323\\"],\\"datePublished\\":\\"2025-06-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chris Coyier\\",\\"url\\":\\"https://frontendmasters.com/blog/author/chriscoyier/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/quantity-query-carousel.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Quantity Query Carousel"}],["meta",{"property":"og:description","content":"Article(s) > Quantity Query Carousel"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6323"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6323"}],["meta",{"name":"twitter:image:alt","content":"Quantity Query Carousel"}],["meta",{"property":"article:author","content":"Chris Coyier"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-06-25T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Quantity Query Carousel"},{"property":"og:description","content":"Quantity Query Carousel"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/quantity-query-carousel.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-06-25T00:00:00.000Z","isOriginal":false,"author":[{"name":"Chris Coyier","url":"https://frontendmasters.com/blog/author/chriscoyier/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6323"},"git":{},"readingTime":{"minutes":3.26,"words":977},"filePathRelative":"frontendmasters.com/quantity-query-carousel.md","copyright":{"author":"Chris Coyier"}}');export{_ as comp,P as data};
