import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as t,b as l,a as o,t as v,n as u,g,w as e,e as n,r as c,o as d}from"./app-BVguHYKu.js";const y="/bookshelf/assets/image/blog.logrocket.com/how-to-manipulate-css-colors-with-javascript/banner.png",f={},w={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},j={class:"table-of-contents"},S={href:"https://codepen.io/AdamGiese/full/5783951de51e0db0f569d5abbd9cb2f7",target:"_blank",rel:"noopener noreferrer"},C={href:"https://codepen.io/AdamGiese/full/989988044f3b8cf6403e3c60f56dd612",target:"_blank",rel:"noopener noreferrer"},M={class:"katex-block"},H={class:"katex-display"},z={class:"katex"},L={class:"katex-html","aria-hidden":"true"},G={class:"base"},A={class:"minner"},T={class:"mopen"},B={class:"delimsizing mult"},R={class:"vlist-t vlist-t2"},J={class:"vlist-r"},X={class:"vlist",style:{height:"4.45em"}},q={style:{top:"-1.358em"}},I={style:{height:"2.416em",width:"0.8889em"}},P={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"2.416em",style:{width:"0.8889em"},viewBox:"0 0 888.89 2416",preserveAspectRatio:"xMinYMin"},E={style:{top:"-5.558em"}},V={style:{height:"2.416em",width:"0.8889em"}},D={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"2.416em",style:{width:"0.8889em"},viewBox:"0 0 888.89 2416",preserveAspectRatio:"xMinYMin"},F={href:"https://codepen.io/AdamGiese/full/86b353c35a8bfe0868a8b48683faf668",target:"_blank",rel:"noopener noreferrer"};function O(h,a){const i=c("VPCard"),p=c("router-link"),k=c("SiteInfo"),r=c("VPIcon");return d(),m("div",null,[s("h1",w,[s("a",x,[s("span",null,v(h.$frontmatter.title)+" 관련",1)])]),t(i,u(g({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t(i,u(g({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",j,[s("ul",null,[s("li",null,[t(p,{to:"#color-models101"},{default:e(()=>a[0]||(a[0]=[n("Color models101")])),_:1,__:[0]}),s("ul",null,[s("li",null,[t(p,{to:"#rgb"},{default:e(()=>a[1]||(a[1]=[n("RGB")])),_:1,__:[1]})]),s("li",null,[t(p,{to:"#hsl"},{default:e(()=>a[2]||(a[2]=[n("HSL")])),_:1,__:[2]})])])]),s("li",null,[t(p,{to:"#conversion-between-colormodels"},{default:e(()=>a[3]||(a[3]=[n("Conversion between colormodels")])),_:1,__:[3]}),s("ul",null,[s("li",null,[t(p,{to:"#calculating-lightness-fromrgb"},{default:e(()=>a[4]||(a[4]=[n("Calculating lightness fromRGB")])),_:1,__:[4]})]),s("li",null,[t(p,{to:"#calculating-saturation-fromrgb"},{default:e(()=>a[5]||(a[5]=[n("Calculating saturation fromRGB")])),_:1,__:[5]})]),s("li",null,[t(p,{to:"#calculating-hue-fromrgb"},{default:e(()=>a[6]||(a[6]=[n("Calculating hue fromRGB")])),_:1,__:[6]})]),s("li",null,[t(p,{to:"#calculating-hsl"},{default:e(()=>a[7]||(a[7]=[n("Calculating HSL")])),_:1,__:[7]})]),s("li",null,[t(p,{to:"#calculating-rgb-fromhsl"},{default:e(()=>a[8]||(a[8]=[n("Calculating RGB fromHSL")])),_:1,__:[8]})]),s("li",null,[t(p,{to:"#creating-a-colorobject"},{default:e(()=>a[9]||(a[9]=[n("Creating a colorobject")])),_:1,__:[9]})]),s("li",null,[t(p,{to:"#example"},{default:e(()=>a[10]||(a[10]=[n("Example")])),_:1,__:[10]})])])]),s("li",null,[t(p,{to:"#color-manipulation"},{default:e(()=>a[11]||(a[11]=[n("Color manipulation")])),_:1,__:[11]}),s("ul",null,[s("li",null,[t(p,{to:"#update-attributes"},{default:e(()=>a[12]||(a[12]=[n("Update attributes")])),_:1,__:[12]})]),s("li",null,[t(p,{to:"#color-predicates"},{default:e(()=>a[13]||(a[13]=[n("Color predicates")])),_:1,__:[13]})])])]),s("li",null,[t(p,{to:"#dealing-with-colorarrays"},{default:e(()=>a[14]||(a[14]=[n("Dealing with colorarrays")])),_:1,__:[14]}),s("ul",null,[s("li",null,[t(p,{to:"#filters"},{default:e(()=>a[15]||(a[15]=[n("Filters")])),_:1,__:[15]})]),s("li",null,[t(p,{to:"#sorting"},{default:e(()=>a[16]||(a[16]=[n("Sorting")])),_:1,__:[16]})]),s("li",null,[t(p,{to:"#averaging-attributes"},{default:e(()=>a[17]||(a[17]=[n("Averaging attributes")])),_:1,__:[17]})])])]),s("li",null,[t(p,{to:"#conclusion"},{default:e(()=>a[18]||(a[18]=[n("Conclusion")])),_:1,__:[18]})])])]),a[51]||(a[51]=s("hr",null,null,-1)),t(k,{name:"How to manipulate CSS colors with JavaScript",desc:"Colors are an integral part of creating rich webpages. This tutorial covers how CSS notates colors and how you can manipulate them with JavaScript.",url:"https://blog.logrocket.com/how-to-manipulate-css-colors-with-javascript-fb547113a1b8",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/how-to-manipulate-css-colors-with-javascript/banner.png"}),a[52]||(a[52]=l('<h2 id="color-models101" tabindex="-1"><a class="header-anchor" href="#color-models101"><span>Color models101</span></a></h2><p>I know you’re here to learn about manipulating colors  —  and we’ll get there. But before we do, we need a baseline understanding of how CSS notates colors. CSS uses two different color models: RGB and HSL. Let’s take a quick look at both.</p><h3 id="rgb" tabindex="-1"><a class="header-anchor" href="#rgb"><span>RGB</span></a></h3><figure><img src="'+y+'" alt="How To Manipulate CSS Colors With JavaScript" tabindex="0" loading="lazy"><figcaption>How To Manipulate CSS Colors With JavaScript</figcaption></figure>',4)),s("p",null,[a[22]||(a[22]=n("An initialism for “red, green, blue,” ")),s("a",S,[a[19]||(a[19]=n("RGB (")),t(r,{icon:"fa-brands fa-codepen"}),a[20]||(a[20]=s("code",null,"AdamGiese",-1)),a[21]||(a[21]=n(")"))]),a[23]||(a[23]=n(" consists of three numbers that each signify how much light of its respective color is included in the resulting end color. In CSS, each of these numbers is in the range of 0-255 and would be written as comma-separated parameters of the CSS ")),a[24]||(a[24]=s("code",null,"rgb",-1)),a[25]||(a[25]=n(" function. For example, ")),a[26]||(a[26]=s("code",null,"rgb(50,100,0)",-1)),a[27]||(a[27]=n("."))]),a[53]||(a[53]=s("p",null,"RGB is an “additive” color system, which means that the higher each number is, the brighter the end color will be. If all values are equal, the color will be grayscale; if all values are zero, the result will be black; and if all values are 255, the result will be white.",-1)),a[54]||(a[54]=s("p",null,[n("Alternatively, you can notate RGB colors using the hexadecimal notation, in which each color’s integer is converted from base 10 to base 16. For example, "),s("code",null,"rgb(50,100,0)"),n(" would be "),s("code",null,"#326400"),n(".")],-1)),a[55]||(a[55]=s("p",null,"Although I usually find myself reaching for RGB (particularly hexadecimal) out of habit, I often find that it is hard to read and especially hard to manipulate. Enter HSL.",-1)),a[56]||(a[56]=s("h3",{id:"hsl",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#hsl"},[s("span",null,"HSL")])],-1)),s("p",null,[a[31]||(a[31]=n("An initialism for “hue, saturation, light,” ")),s("a",C,[a[28]||(a[28]=n("HSL (")),t(r,{icon:"fa-brands fa-codepen"}),a[29]||(a[29]=s("code",null,"AdamGiese",-1)),a[30]||(a[30]=n(")"))]),a[32]||(a[32]=n(" also consists of three values. The hue value corresponds to the position on the color wheel and is represented by a CSS angle value; most commonly, deg units are used."))]),a[57]||(a[57]=l('<p>Saturation, represented by a percentage, refers to the intensity of the color. When saturation is 100 percent, it is fully colored; the less saturation, the less color, until it reaches grayscale at 0 percent.</p><p>Lightness, also represented by a percentage, refers to how bright a color is. “Regular” brightness is 50 percent. A lightness of 100 percent will be pure white, and 0 percent lightness will be pure black, regardless of the hue and saturation values.</p><p>I find HSL to be a more intuitive model. Relations between colors are more immediately evident, and manipulation of colors tends to be as simple as tweaking just one of the numbers.</p><hr><h2 id="conversion-between-colormodels" tabindex="-1"><a class="header-anchor" href="#conversion-between-colormodels"><span>Conversion between colormodels</span></a></h2><p>Both the RGB and HSL color models break down a color into various attributes. To convert between the syntaxes, we first need to calculate these attributes.</p><p>With the exception of hue, each value we have discussed can be represented as a percentage. Even the RGB values are byte-sized representations of percentages. In the formulas and functions below, these percentages will be represented by decimals between 0 and 1. I would like to note that I will not cover the math for these in depth; rather, I will briefly go over the original mathematical formula and then convert it into a JavaScript formula.</p><h3 id="calculating-lightness-fromrgb" tabindex="-1"><a class="header-anchor" href="#calculating-lightness-fromrgb"><span>Calculating lightness fromRGB</span></a></h3><p>Lightness is the easiest of the three HSL values to calculate. Mathematically, the formula is displayed as follows, where <code>M</code> is the maximum of the RGB values and <code>m</code> is the minimum:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mrow><mo fence="true">(</mo><mi>M</mi><mo>+</mo><mi>m</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">L=\\frac{1}{2}\\left(M+m\\right) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">m</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p>',10)),o(" ![](https://storage.googleapis.com/blog-images-backup/0*mZxFLQvMNraVQWQS.png) "),a[58]||(a[58]=l(`<blockquote><p>The mathematic formula for lightness</p></blockquote><p>Here is the same formula as a JavaScript function:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">rgbToLightness</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> </span>
<span class="line">    <span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="calculating-saturation-fromrgb" tabindex="-1"><a class="header-anchor" href="#calculating-saturation-fromrgb"><span>Calculating saturation fromRGB</span></a></h3><p>Saturation is only slightly more complicated than lightness. If the lightness is either 0 or 1, then the saturation value will be 0. Otherwise, it follows the mathematical formula below, where <code>L</code> represents lightness:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mo>=</mo><mfrac><mrow><mi>M</mi><mo>−</mo><mi>m</mi></mrow><mrow><mn>1</mn><mo>−</mo><mo stretchy="false">∣</mo><mrow><mn>2</mn><mi>L</mi><mo>−</mo><mn>1</mn></mrow><mo stretchy="false">∣</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">S=\\frac{M-m}{1-\\lvert{2L-1}\\rvert} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2963em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">∣</span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span><span class="mclose">∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>`,6)),o(" ![](https://storage.googleapis.com/blog-images-backup/0*xZf55x3WTTJUIAG3.png) "),a[59]||(a[59]=l(`<blockquote><p>The mathematical formula for saturation</p></blockquote><p>As JavaScript:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">rgbToSaturation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token constant">L</span> <span class="token operator">=</span> <span class="token function">rgbToLightness</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token constant">L</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token constant">L</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">?</span> <span class="token number">0</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token constant">L</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="calculating-hue-fromrgb" tabindex="-1"><a class="header-anchor" href="#calculating-hue-fromrgb"><span>Calculating hue fromRGB</span></a></h3><p>The formula for calculating the hue angle from RGB coordinates is a bit more complex:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mo>=</mo><mtext>atan2</mtext><mrow><mo fence="true">(</mo><msqrt><mn>3</mn></msqrt><mo>⋅</mo><mrow><mo fence="true">(</mo><mi>G</mi><mo>−</mo><mi>B</mi><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mn>2</mn><mo>⋅</mo><mrow><mi>R</mi><mo>−</mo><mi>G</mi><mo>−</mo><mi>B</mi></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">h=\\text{atan2}\\left(\\sqrt{3}\\cdot\\left(G-B\\right),2\\cdot{R-G-B}\\right) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.8em;vertical-align:-0.65em;"></span><span class="mord text"><span class="mord">atan2</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9561em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">3</span></span></span><span style="top:-2.9161em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.0839em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span></span></p>`,6)),o(" ![](https://storage.googleapis.com/blog-images-backup/0*oLI0PhBJhkE8BK_e.png) "),a[60]||(a[60]=l(`<blockquote><p>The mathematical formula forhue</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">rgbToHue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span></span>
<span class="line">  Math<span class="token punctuation">.</span><span class="token function">atan2</span><span class="token punctuation">(</span></span>
<span class="line">    Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>g <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">2</span> <span class="token operator">*</span> r <span class="token operator">-</span> g <span class="token operator">-</span> b<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180</span> <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The multiplication of <code>180 / Math.PI</code> at the end is to convert the result from radians to degrees.</p><h3 id="calculating-hsl" tabindex="-1"><a class="header-anchor" href="#calculating-hsl"><span>Calculating HSL</span></a></h3><p>All of these functions can be wrapped into a single utility function:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">rgbToHsl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> lightness <span class="token operator">=</span> <span class="token function">rgbToLightness</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> saturation <span class="token operator">=</span> <span class="token function">rgbToSaturation</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> hue <span class="token operator">=</span> <span class="token function">rgbToHue</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span>hue<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> lightness<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="calculating-rgb-fromhsl" tabindex="-1"><a class="header-anchor" href="#calculating-rgb-fromhsl"><span>Calculating RGB fromHSL</span></a></h3><p>Before jumping into calculating RGB, we need a few prerequisite values.</p><p>First is the “chroma” value:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mo>=</mo><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mo stretchy="false">∣</mo><mn>2</mn><mi>L</mi><mo>−</mo><mn>1</mn><mo stretchy="false">∣</mo><mo fence="true">)</mo></mrow><mo>⋅</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">C=\\left(1-\\lvert2L-1\\rvert\\right)\\cdot{S} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">∣</span><span class="mord">2</span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">∣</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></span></span></p>`,10)),o(" ![](https://storage.googleapis.com/blog-images-backup/0*Noxj7Gk7KGYqGfvx.png) "),a[61]||(a[61]=l('<blockquote><p>The mathematical formula forchroma</p></blockquote><p>We also have a temporary hue value, whose range we will use to decide which “segment” of the hue circle we belong on:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>H</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mfrac><mi>H</mi><mn>60</mn></mfrac></mrow><annotation encoding="application/x-tex">H&#39;=\\frac{H}{60} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8019em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">60</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>',3)),o(" ![](https://storage.googleapis.com/blog-images-backup/0*DgjQEdahvhEjn60j.png) "),a[62]||(a[62]=l('<blockquote><p>The mathematical formula for hueprime</p></blockquote><p>Next, we have an <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> value, which will be used as the middle (second-largest) component value:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>X</mi><mo>=</mo><mi>C</mi><mo>⋅</mo><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mo stretchy="false">∣</mo><msup><mi>H</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mtext> </mtext><mtext>mod</mtext><mtext> </mtext><mn>2</mn><mo>−</mo><mn>1</mn><mo stretchy="false">∣</mo><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">X=C\\cdot{\\left(1-\\lvert{H}&#39;\\:\\text{mod}\\:2-1\\rvert\\right)} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0519em;vertical-align:-0.25em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">∣</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord text"><span class="mord">mod</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">∣</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></span></p>',3)),o(" ![](https://storage.googleapis.com/blog-images-backup/0*rmrqPF1miT7a-O-O.png) "),a[63]||(a[63]=l('<blockquote><p>The mathematical formula for a temporary “x”value</p></blockquote><p>We have an <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> value, which is used to adjust each of the values for lightness:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>m</mi><mo>=</mo><mi>L</mi><mo>−</mo><mfrac><mi>C</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">m=L-\\frac{C}{2} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>',3)),o(" ![](https://storage.googleapis.com/blog-images-backup/0*TwM-2sYH0uEJhu35.png) "),a[64]||(a[64]=l("<blockquote><p>The mathematical formula for lightness match</p></blockquote><p>Depending on the hue prime value, the <code>r</code>, <code>g</code>, and <code>b</code> values will map to <code>C</code>, <code>X</code>, and <code>0</code>:</p>",2)),s("p",M,[s("span",H,[s("span",z,[a[45]||(a[45]=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mrow",null,[s("mo",{fence:"true"},"("),s("msub",null,[s("mi",null,"R"),s("mn",null,"1")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"G"),s("mn",null,"1")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"B"),s("mn",null,"1")]),s("mo",{fence:"true"},")")]),s("mo",null,"="),s("mrow",null,[s("mo",{fence:"true"},"{"),s("mtable",{rowspacing:"0.36em",columnalign:"left left",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mo",{fence:"true"},"("),s("mi",null,"C"),s("mo",{separator:"true"},","),s("mi",null,"X"),s("mo",{separator:"true"},","),s("mn",null,"0"),s("mo",{fence:"true"},")")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mtext",null,"if"),s("mtext",null," "),s("mn",null,"0"),s("mo",null,"≥"),s("msup",null,[s("mi",null,"H"),s("mo",{mathvariant:"normal",lspace:"0em",rspace:"0em"},"′")]),s("mo",null,"≥"),s("mn",null,"1")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mo",{fence:"true"},"("),s("mi",null,"X"),s("mo",{separator:"true"},","),s("mi",null,"C"),s("mo",{separator:"true"},","),s("mn",null,"0"),s("mo",{fence:"true"},")")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mtext",null,"if"),s("mtext",null," "),s("mn",null,"1"),s("mo",null,"≥"),s("msup",null,[s("mi",null,"H"),s("mo",{mathvariant:"normal",lspace:"0em",rspace:"0em"},"′")]),s("mo",null,"≥"),s("mn",null,"2")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mo",{fence:"true"},"("),s("mn",null,"0"),s("mo",{separator:"true"},","),s("mi",null,"C"),s("mo",{separator:"true"},","),s("mi",null,"X"),s("mo",{fence:"true"},")")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mtext",null,"if"),s("mtext",null," "),s("mn",null,"2"),s("mo",null,"≥"),s("msup",null,[s("mi",null,"H"),s("mo",{mathvariant:"normal",lspace:"0em",rspace:"0em"},"′")]),s("mo",null,"≥"),s("mn",null,"3")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mo",{fence:"true"},"("),s("mn",null,"0"),s("mo",{separator:"true"},","),s("mi",null,"X"),s("mo",{separator:"true"},","),s("mi",null,"C"),s("mo",{fence:"true"},")")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mtext",null,"if"),s("mtext",null," "),s("mn",null,"3"),s("mo",null,"≥"),s("msup",null,[s("mi",null,"H"),s("mo",{mathvariant:"normal",lspace:"0em",rspace:"0em"},"′")]),s("mo",null,"≥"),s("mn",null,"4")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mo",{fence:"true"},"("),s("mi",null,"X"),s("mo",{separator:"true"},","),s("mn",null,"0"),s("mo",{separator:"true"},","),s("mi",null,"C"),s("mo",{fence:"true"},")")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mtext",null,"if"),s("mtext",null," "),s("mn",null,"4"),s("mo",null,"≥"),s("msup",null,[s("mi",null,"H"),s("mo",{mathvariant:"normal",lspace:"0em",rspace:"0em"},"′")]),s("mo",null,"≥"),s("mn",null,"5")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mo",{fence:"true"},"("),s("mi",null,"C"),s("mo",{separator:"true"},","),s("mn",null,"0"),s("mo",{separator:"true"},","),s("mi",null,"X"),s("mo",{fence:"true"},")")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mtext",null,"if"),s("mtext",null," "),s("mn",null,"5"),s("mo",null,"≥"),s("msup",null,[s("mi",null,"H"),s("mo",{mathvariant:"normal",lspace:"0em",rspace:"0em"},"′")]),s("mo",null,"≥"),s("mn",null,"6")])])])])])])]),s("annotation",{encoding:"application/x-tex"},"\\left(R_{1},G_{1},B_{1}\\right)=\\begin{cases}\\left(C,X,0\\right)&\\text{if}\\:0\\ge{H'}\\ge{1}\\\\\\left(X,C,0\\right)&\\text{if}\\:1\\ge{H'}\\ge{2}\\\\\\left(0,C,X\\right)&\\text{if}\\:2\\ge{H'}\\ge{3}\\\\\\left(0,X,C\\right)&\\text{if}\\:3\\ge{H'}\\ge{4}\\\\\\left(X,0,C\\right)&\\text{if}\\:4\\ge{H'}\\ge{5}\\\\\\left(C,0,X\\right)&\\text{if}\\:5\\ge{H'}\\ge{6}\\end{cases} ")])])],-1)),s("span",L,[a[44]||(a[44]=l('<span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span>',1)),s("span",G,[a[43]||(a[43]=s("span",{class:"strut",style:{height:"8.64em","vertical-align":"-4.07em"}},null,-1)),s("span",A,[s("span",T,[s("span",B,[s("span",R,[s("span",J,[s("span",X,[a[37]||(a[37]=s("span",{style:{top:"-1.366em"}},[s("span",{class:"pstrut",style:{height:"4.416em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎩")])],-1)),s("span",q,[a[34]||(a[34]=s("span",{class:"pstrut",style:{height:"4.416em"}},null,-1)),s("span",I,[(d(),m("svg",P,a[33]||(a[33]=[s("path",{d:"M384 0 H504 V2416 H384z M384 0 H504 V2416 H384z"},null,-1)])))])]),a[38]||(a[38]=s("span",{style:{top:"-4.416em"}},[s("span",{class:"pstrut",style:{height:"4.416em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎨")])],-1)),s("span",E,[a[36]||(a[36]=s("span",{class:"pstrut",style:{height:"4.416em"}},null,-1)),s("span",V,[(d(),m("svg",D,a[35]||(a[35]=[s("path",{d:"M384 0 H504 V2416 H384z M384 0 H504 V2416 H384z"},null,-1)])))])]),a[39]||(a[39]=s("span",{style:{top:"-7.966em"}},[s("span",{class:"pstrut",style:{height:"4.416em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎧")])],-1))]),a[40]||(a[40]=s("span",{class:"vlist-s"},"​",-1))]),a[41]||(a[41]=s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"3.95em"}},[s("span")])],-1))])])]),a[42]||(a[42]=l('<span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.57em;"><span style="top:-6.57em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-5.13em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-0.81em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:0.63em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.07em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.57em;"><span style="top:-6.57em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span style="top:-5.13em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord">4</span></span></span></span><span style="top:-0.81em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord">5</span></span></span></span><span style="top:0.63em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.07em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span>',2))])])])])])]),o(" ![](https://storage.googleapis.com/blog-images-backup/0*k1pxEnWMU-rDQYIG.png) "),a[65]||(a[65]=l('<blockquote><p>The mathematical formula for RGB values without accounting for lightness</p></blockquote><p>Lastly, we need to map each value to adjust for lightness:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mi>R</mi><mo separator="true">,</mo><mi>G</mi><mo separator="true">,</mo><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><msub><mi>R</mi><mn>1</mn></msub><mo>+</mo><mi>m</mi><mo separator="true">,</mo><msub><mi>G</mi><mn>1</mn></msub><mo>+</mo><mi>m</mi><mo separator="true">,</mo><msub><mi>B</mi><mn>1</mn></msub><mo>+</mo><mi>m</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\\left(R,G,B\\right)=\\left(R_{1}+m,G_{1}+m,B_{1}+m\\right) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">G</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">m</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p>',3)),o(" ![](https://storage.googleapis.com/blog-images-backup/0*Vlii9C8Cum3apLK-.png) "),a[66]||(a[66]=l(`<p>The mathematical formula to account for lightness withRGB</p><p>Putting all of this together into a JavaScript function:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">hslToRgb</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">h<span class="token punctuation">,</span>s<span class="token punctuation">,</span>l</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> s<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> hPrime <span class="token operator">=</span> h <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token constant">X</span> <span class="token operator">=</span> <span class="token constant">C</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>hPrime <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> m <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token constant">C</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">withLight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>r<span class="token operator">+</span>m<span class="token punctuation">,</span> g<span class="token operator">+</span>m<span class="token punctuation">,</span> b<span class="token operator">+</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>hPrime <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">withLight</span><span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">,</span><span class="token constant">X</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hPrime <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">withLight</span><span class="token punctuation">(</span><span class="token constant">X</span><span class="token punctuation">,</span><span class="token constant">C</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hPrime <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">withLight</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token constant">C</span><span class="token punctuation">,</span><span class="token constant">X</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hPrime <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">withLight</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token constant">X</span><span class="token punctuation">,</span><span class="token constant">C</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hPrime <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">withLight</span><span class="token punctuation">(</span><span class="token constant">X</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token constant">C</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hPrime <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">withLight</span><span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token constant">X</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="creating-a-colorobject" tabindex="-1"><a class="header-anchor" href="#creating-a-colorobject"><span>Creating a colorobject</span></a></h3><p>For ease of access when manipulating their attributes, we will be dealing with a JavaScript object. This can be created by wrapping the previously written functions:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">rgbToObject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">red<span class="token punctuation">,</span>green<span class="token punctuation">,</span>blue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>hue<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> lightness<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rgbToHsl</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">,</span> hue<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> lightness<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">hslToObject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">hue<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> lightness</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">hslToRgb</span><span class="token punctuation">(</span>hue<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> lightness<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">,</span> hue<span class="token punctuation">,</span> saturation<span class="token punctuation">,</span> lightness<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h3>`,7)),s("p",null,[a[49]||(a[49]=n("I highly encourage you to spend some time ")),s("a",F,[a[46]||(a[46]=n("playing with this example (")),t(r,{icon:"fa-brands fa-codepen"}),a[47]||(a[47]=s("code",null,"AdamGiese",-1)),a[48]||(a[48]=n(")"))]),a[50]||(a[50]=n(". Seeing how each of the attributes interacts when you adjust the others can give you a deeper understanding of how the two color models fit together."))]),a[67]||(a[67]=l(`<hr><h2 id="color-manipulation" tabindex="-1"><a class="header-anchor" href="#color-manipulation"><span>Color manipulation</span></a></h2><p>Now that we have the ability to convert between color models, let’s look at how we can manipulate these colors!</p><h3 id="update-attributes" tabindex="-1"><a class="header-anchor" href="#update-attributes"><span>Update attributes</span></a></h3><p>Each of the color attributes we have covered can be manipulated individually, returning a new color object. For example, we can write a function that rotates the hue angle:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">rotateHue</span> <span class="token operator">=</span> <span class="token parameter">rotation</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>hue<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">modulo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> n <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> newHue <span class="token operator">=</span> <span class="token function">modulo</span><span class="token punctuation">(</span>hue <span class="token operator">+</span> rotation<span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>rest<span class="token punctuation">,</span> <span class="token literal-property property">hue</span><span class="token operator">:</span> newHue <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>rotateHue</code> function accepts a <code>rotation</code> parameter and returns a new function, which accepts and returns a color object. This allows for the easy creation of new “rotation” functions:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> rotate30 <span class="token operator">=</span> <span class="token function">rotateHue</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> getComplementary <span class="token operator">=</span> <span class="token function">rotateHue</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">getTriadic</span> <span class="token operator">=</span> <span class="token parameter">color</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> first <span class="token operator">=</span> <span class="token function">rotateHue</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> second <span class="token operator">=</span> <span class="token function">rotateHue</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token function">first</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">second</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Along the same lines, you can write functions to <code>saturate</code> or <code>lighten</code> a color  —  or, inversely, <code>desaturate</code> or <code>darken</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">saturate</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>saturation<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token operator">...</span>rest<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">saturation</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> saturation <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">desaturate</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>saturation<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token operator">...</span>rest<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">saturation</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> saturation <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">lighten</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>lightness<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token operator">...</span>rest<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">lightness</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> lightness <span class="token operator">+</span> x<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">darken</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>lightness<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token operator">...</span>rest<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">lightness</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> lightness <span class="token operator">-</span> x<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="color-predicates" tabindex="-1"><a class="header-anchor" href="#color-predicates"><span>Color predicates</span></a></h3><p>In addition to color manipulation, you can write “predicates”  —  that is, functions that return a Boolean value.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">isGrayscale</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>saturation<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> saturation <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">isDark</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>lightness<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> lightness <span class="token operator">&lt;</span> <span class="token number">.5</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="dealing-with-colorarrays" tabindex="-1"><a class="header-anchor" href="#dealing-with-colorarrays"><span>Dealing with colorarrays</span></a></h2><h3 id="filters" tabindex="-1"><a class="header-anchor" href="#filters"><span>Filters</span></a></h3><p>The JavaScript <code>[].filter</code> method accepts a predicate and returns a new array with all the elements that “pass.” The predicates we wrote in the previous section can be used here:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token comment">/* ... an array of color objects ... */</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">isLight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>lightness<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> lightness <span class="token operator">&gt;</span> <span class="token number">.5</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> lightColors <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isLight<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sorting" tabindex="-1"><a class="header-anchor" href="#sorting"><span>Sorting</span></a></h3><p>To sort an array of colors, you first need to write a “comparator” function. This function takes two elements of an array and returns a number to denote the “winner.” A positive number indicates that the first element should be sorted first, and a negative indicates the second should be sorted first. A zero value indicates a tie.</p><p>For example, here is a function for comparing the lightness of two colors:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">compareLightness</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>lightness <span class="token operator">-</span> b<span class="token punctuation">.</span>lightness<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Here is a function that compares saturation:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">compareSaturation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>saturation <span class="token operator">-</span> b<span class="token punctuation">.</span>saturation<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In an effort to prevent duplication in our code, we can write a higher-order function to return a comparison function to compare any attribute:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">compareAttribute</span> <span class="token operator">=</span> <span class="token parameter">attribute</span> <span class="token operator">=&gt;</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span>attribute<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>attribute<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> compareLightness <span class="token operator">=</span> <span class="token function">compareAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;lightness&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> compareSaturation <span class="token operator">=</span> <span class="token function">compareAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;saturation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> compareHue <span class="token operator">=</span> <span class="token function">compareAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;hue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="averaging-attributes" tabindex="-1"><a class="header-anchor" href="#averaging-attributes"><span>Averaging attributes</span></a></h3><p>You can average the specific attributes of an array of colors by composing various JavaScript array methods. First, you can calculate the average of an attribute by summing with reduce and dividing by the array length:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token comment">/* ... an array of color objects ... */</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">toSum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">toAttribute</span> <span class="token operator">=</span> <span class="token parameter">attribute</span> <span class="token operator">=&gt;</span> <span class="token parameter">element</span> <span class="token operator">=&gt;</span> element<span class="token punctuation">[</span>attribute<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">averageOfAttribute</span> <span class="token operator">=</span> <span class="token parameter">attribute</span> <span class="token operator">=&gt;</span> <span class="token parameter">array</span> <span class="token operator">=&gt;</span></span>
<span class="line">  array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token function">toAttribute</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>toSum<span class="token punctuation">)</span> <span class="token operator">/</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can use this to “normalize” an array of colors:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">/* ... continuing */</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">normalizeAttribute</span> <span class="token operator">=</span> <span class="token parameter">attribute</span> <span class="token operator">=&gt;</span> <span class="token parameter">array</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> averageValue <span class="token operator">=</span> <span class="token function">averageOfAttribute</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> normalize <span class="token operator">=</span> <span class="token function">overwriteAttribute</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">(</span>averageValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">normalize</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> normalizeSaturation <span class="token operator">=</span> <span class="token function">normalizeAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;saturation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> normalizeLightness <span class="token operator">=</span> <span class="token function">normalizeAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;lightness&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> normalizeHue <span class="token operator">=</span> <span class="token function">normalizeAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;hue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Colors are an integral part of the web. Breaking down colors into their attributes allows for the smart manipulation of colors and opens the door to all sorts of possibilities.</p>`,34)),o(" TODO: add ARTICLE CARD "),t(i,u(g({title:"How to manipulate CSS colors with JavaScript",desc:"Colors are an integral part of creating rich webpages. This tutorial covers how CSS notates colors and how you can manipulate them with JavaScript.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/how-to-manipulate-css-colors-with-javascript-fb547113a1b8.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const Y=b(f,[["render",O]]),Q=JSON.parse('{"path":"/blog.logrocket.com/how-to-manipulate-css-colors-with-javascript.html","title":"How to manipulate CSS colors with JavaScript","lang":"en-US","frontmatter":{"lang":"en-US","title":"How to manipulate CSS colors with JavaScript","description":"Article(s) > How to manipulate CSS colors with JavaScript","icon":"fa-brands fa-js","category":["JavaScript","CSS","Article(s)"],"tag":["blog","blog.logrocket.com","javascript","js","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to manipulate CSS colors with JavaScript\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/how-to-manipulate-css-colors-with-javascript/banner.png\\",\\"https://storage.googleapis.com/blog-images-backup/0*mZxFLQvMNraVQWQS.png\\",\\"https://storage.googleapis.com/blog-images-backup/0*xZf55x3WTTJUIAG3.png\\",\\"https://storage.googleapis.com/blog-images-backup/0*oLI0PhBJhkE8BK_e.png\\",\\"https://storage.googleapis.com/blog-images-backup/0*Noxj7Gk7KGYqGfvx.png\\",\\"https://storage.googleapis.com/blog-images-backup/0*DgjQEdahvhEjn60j.png\\",\\"https://storage.googleapis.com/blog-images-backup/0*rmrqPF1miT7a-O-O.png\\",\\"https://storage.googleapis.com/blog-images-backup/0*TwM-2sYH0uEJhu35.png\\",\\"https://storage.googleapis.com/blog-images-backup/0*k1pxEnWMU-rDQYIG.png\\",\\"https://storage.googleapis.com/blog-images-backup/0*Vlii9C8Cum3apLK-.png\\"],\\"datePublished\\":\\"2019-03-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Adam Giese\\",\\"url\\":\\"https://blog.logrocket.com/author/adamgiese/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/how-to-manipulate-css-colors-with-javascript.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to manipulate CSS colors with JavaScript"}],["meta",{"property":"og:description","content":"Article(s) > How to manipulate CSS colors with JavaScript"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/how-to-manipulate-css-colors-with-javascript/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/how-to-manipulate-css-colors-with-javascript/banner.png"}],["meta",{"name":"twitter:image:alt","content":"How to manipulate CSS colors with JavaScript"}],["meta",{"property":"article:author","content":"Adam Giese"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2019-03-12T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How to manipulate CSS colors with JavaScript"},{"property":"og:description","content":"How to manipulate CSS colors with JavaScript"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/how-to-manipulate-css-colors-with-javascript.html"}]],"prev":"/programming/js/articles/README.md","date":"2019-03-12T00:00:00.000Z","isOriginal":false,"author":[{"name":"Adam Giese","url":"https://blog.logrocket.com/author/adamgiese/"}],"cover":"/assets/image/blog.logrocket.com/how-to-manipulate-css-colors-with-javascript/banner.png"},"git":{},"readingTime":{"minutes":7.22,"words":2165},"filePathRelative":"blog.logrocket.com/how-to-manipulate-css-colors-with-javascript.md","copyright":{"author":"Adam Giese"}}');export{Y as comp,Q as data};
