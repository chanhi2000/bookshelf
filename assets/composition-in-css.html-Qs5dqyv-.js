import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as n,f as t,b as i,a as v,t as b,n as r,g as u,w as e,e as a,r as l,o as y}from"./app-BVguHYKu.js";const f={},w={id:"frontmatter-title-관련",tabindex:"-1"},S={class:"header-anchor",href:"#frontmatter-title-관련"},C={class:"table-of-contents"},q={href:"https://sass-lang.com/documentation/at-rules/mixin/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://splendidlabz.com/docs/styles/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://splendidlabz.com/docs/layouts/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://magicaldevschool.com/courses/unorthodox-tailwind/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://splendidlabz.com/solutions/styles/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://splendidlabz.com/solutions/layouts/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://magicaldevschool.com/courses/unorthodox-tailwind/",target:"_blank",rel:"noopener noreferrer"};function j(d,s){const c=l("VPCard"),o=l("router-link"),m=l("SiteInfo"),p=l("VPIcon"),g=l("RouteLink");return y(),h("div",null,[n("h1",w,[n("a",S,[n("span",null,b(d.$frontmatter.title)+" 관련",1)])]),t(c,r(u({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",C,[n("ul",null,[n("li",null,[t(o,{to:"#it-s-not-a-new-concept"},{default:e(()=>s[0]||(s[0]=[a("It’s not a new concept")])),_:1,__:[0]})]),n("li",null,[t(o,{to:"#developers-take-a-pretty-narrow-view-of-composition"},{default:e(()=>s[1]||(s[1]=[a("Developers take a pretty narrow view of composition")])),_:1,__:[1]})]),n("li",null,[t(o,{to:"#what-is-composition"},{default:e(()=>s[2]||(s[2]=[a("What is composition?")])),_:1,__:[2]})]),n("li",null,[t(o,{to:"#composition-doesn-t-reduce-bloat"},{default:e(()=>s[3]||(s[3]=[a("Composition doesn’t reduce bloat")])),_:1,__:[3]})]),n("li",null,[t(o,{to:"#html-bloat-and-css-bloat-are-probably-the-least-of-your-concerns"},{default:e(()=>s[4]||(s[4]=[a("HTML bloat and CSS bloat are probably the least of your concerns")])),_:1,__:[4]})]),n("li",null,[t(o,{to:"#advanced-compositions"},{default:e(()=>s[5]||(s[5]=[a("Advanced compositions")])),_:1,__:[5]})]),n("li",null,[t(o,{to:"#wrapping-up"},{default:e(()=>s[6]||(s[6]=[a("Wrapping up")])),_:1,__:[6]})])])]),s[27]||(s[27]=n("hr",null,null,-1)),t(m,{name:"Composition in CSS",desc:"CSS is a composable language by nature. This composition nature is already built into the cascade. We simply don't talk about composition as a Big Thing because it's the nature of the language.",url:"https://css-tricks.com/composition-in-css",logo:"https://css-tricks/favicon.svg",preview:"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-social-css-tricks.png"}),s[28]||(s[28]=i(`<p>Tailwind and other utility libraries have been huge proponents of composition. But, to me, their version of composition has always carried a heavy sense of naïveté.</p><p>I mean, utility composition is basically adding CSS values to the element, one at a time…</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p-4 border-2 border-blue-500<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If we’re honest for a minute, how is this composition different from adding CSS rules directly into a class?</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token comment">/* This is composition too! */</span></span>
<span class="line"><span class="token selector">.card</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">padding</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span> </span>
<span class="line">  <span class="token property">border</span><span class="token punctuation">:</span> 2px solid <span class="token function">var</span><span class="token punctuation">(</span>—color-blue-500<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That said, I can’t deny the fact that I’ve been thinking a lot more about composition ever since I began using Tailwind. So, here are a couple of notes that I’ve gathered together about CSS composition.</p><hr><h2 id="it-s-not-a-new-concept" tabindex="-1"><a class="header-anchor" href="#it-s-not-a-new-concept"><span>It’s not a new concept</span></a></h2><p><strong>CSS is a composable language by nature.</strong> This composition nature is already built into the cascade. Let’s say you’ve decided to style a button with a few properties:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.button</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">padding</span><span class="token punctuation">:</span> 0.75em 1.5em<span class="token punctuation">;</span> </span>
<span class="line">  <span class="token comment">/* other styles... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can always tag on other classes to modify the button’s appearance:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button primary<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button secondary<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.primary</span> <span class="token punctuation">{</span> <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">.secondary</span> <span class="token punctuation">{</span> <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can even change the appearance of other elements to a button by adding the <code>.button</code> class:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Composition is happening in both cases:</p><ol><li>We composed <code>.button</code> onto <code>a</code></li><li>We composed <code>.red</code> onto <code>.button</code></li></ol><p>So, CSS composition has been in existence since forever. We simply don’t talk about composition as a Big Thing because it’s the nature of the language.</p><hr><h2 id="developers-take-a-pretty-narrow-view-of-composition" tabindex="-1"><a class="header-anchor" href="#developers-take-a-pretty-narrow-view-of-composition"><span>Developers take a pretty narrow view of composition</span></a></h2><p>When developers talk about composition in CSS, they always seem to always restrict the definition of composition to the addition of classes in the HTML.</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>one two<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,22)),n("p",null,[s[9]||(s[9]=a("What’s interesting is that few people, if any, speak about composition within CSS files — from the angle of using ")),n("a",q,[t(p,{icon:"iconfont icon-sass"}),s[7]||(s[7]=a("Sass mixins"))]),s[10]||(s[10]=a(" or ")),t(g,{to:"/css-tricks.com/using-css-cascade-layers-with-tailwind-utilities.html"},{default:e(()=>s[8]||(s[8]=[n("strong",null,"advanced Tailwind utilities",-1)])),_:1,__:[8]}),s[11]||(s[11]=a("."))]),s[29]||(s[29]=i(`<p>In these cases, we are also composing styles… just not directly in the HTML!</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@mixin</span> button <span class="token punctuation">(</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">padding</span><span class="token punctuation">:</span> 0.75em 1.5em<span class="token punctuation">;</span> </span>
<span class="line">  <span class="token comment">/* other styles ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.button</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@include</span> button<span class="token punctuation">;</span></span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="what-is-composition" tabindex="-1"><a class="header-anchor" href="#what-is-composition"><span>What is composition?</span></a></h2><p>Composition comes from two possible words:</p><ul><li><strong>Compose:</strong> Put together</li><li><strong>Composite:</strong> Made up of distinct parts or elements</li></ul><p>Both words come from the same Latin root componere, which means to arrange or direct.</p><p>In other words… all work is put together in some way, so all work is composed. This makes me wonder why composition is used in such a limited context. 🤔</p><p>Moving on…</p><hr><h2 id="composition-doesn-t-reduce-bloat" tabindex="-1"><a class="header-anchor" href="#composition-doesn-t-reduce-bloat"><span>Composition doesn’t reduce bloat</span></a></h2><p>Class composition reduces CSS bloat only if you’re using utility classes. However, class composition with utility classes is likely to create HTML bloat.</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utility composition<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>one utility at a time<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>may create html bloat<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On the other hand, class composition with selectors might not reduce CSS bloat. But they definitely introduce lesser HTML bloat.</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>class composition<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>card primary<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>may override properties<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>less html bloat<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Which is better?</p><hr><h2 id="html-bloat-and-css-bloat-are-probably-the-least-of-your-concerns" tabindex="-1"><a class="header-anchor" href="#html-bloat-and-css-bloat-are-probably-the-least-of-your-concerns"><span>HTML bloat and CSS bloat are probably the least of your concerns</span></a></h2><p>We know this:</p><ul><li>HTML can contain a huge amount of things and it doesn’t affect performance much.</li><li>CSS, too.</li><li>500 lines of CSS is approx 12kb to 15kb (according to Claude).</li><li>An image typically weighs 150kb or perhaps even more.</li></ul><p>For most projects, optimizing your use of images is going to net you better weight reduction than agonizing over utility vs. selector composition.</p><p>Refactoring your codebase to decrease CSS bloat is not likely to increase performance much. Maybe a 2ms decrease in load times?</p><p>But refactoring your codebase to improve developer recognition and make it easier to style? Much more worth it.</p><p>So, I’d say:</p><ul><li>HTML and CSS bloat are pretty inconsequential.</li><li>It’s worthwhile to focus on architecture, structure, and clarity instead.</li></ul><hr><h2 id="advanced-compositions" tabindex="-1"><a class="header-anchor" href="#advanced-compositions"><span>Advanced compositions</span></a></h2><p>If we zoom out, we can see that all styles we write fall into four categories:</p><ol><li><strong>Layouts:</strong> Affects how we place things on the page</li><li><strong>Typography:</strong> Everything font related</li><li><strong>Theming:</strong> Everything color related</li><li><strong>Effects:</strong> Nice good to have stuff like gradients, shadows, etc.</li></ol><p>Styles from each of these four categories don’t intersect with each other. For example:</p><ul><li><code>font-weight</code> belongs exclusively to the <em>Typography</em> category</li><li><code>colour</code> belongs exclusively to the <em>Theming</em> category</li></ul><p>It makes sense to create composable classes per category — when that’s done, you can mix-and-match these classes together to create the final output. Very much like Lego, for the lack of a better example. (Alright, maybe Duplo for the kids?)</p><p>So your HTML might end up looking like this, assuming you do class composition for these four categories:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token comment">&lt;!-- These are all pseudo classes. Use your imagination for now! --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>layout-1 layout-2 effects-1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>typography-1 theming-1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>typography-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34)),n("p",null,[s[14]||(s[14]=a("A real example of this would be the following, if we used classes from ")),n("a",x,[t(p,{icon:"fas fa-globe"}),s[12]||(s[12]=a("Splendid Styles"))]),s[15]||(s[15]=a(" and ")),n("a",T,[t(p,{icon:"fas fa-globe"}),s[13]||(s[13]=a("Splendid Layouts"))]),s[16]||(s[16]=a(":"))]),s[30]||(s[30]=i(`<div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>card vertical elevation-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inter-title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prose<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n("p",null,[s[18]||(s[18]=a("I’m writing more about this four-category system and how I’m creating composable classes in my latest work: ")),n("a",I,[t(p,{icon:"fas fa-globe"}),s[17]||(s[17]=a("Unorthodox Tailwind"))]),s[19]||(s[19]=a(". Give it a check if you’re interested!"))]),s[31]||(s[31]=n("hr",null,null,-1)),s[32]||(s[32]=n("h2",{id:"wrapping-up",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#wrapping-up"},[n("span",null,"Wrapping up")])],-1)),s[33]||(s[33]=n("p",null,"To sum up:",-1)),s[34]||(s[34]=n("ol",null,[n("li",null,"CSS is composable by nature."),n("li",null,"Developers seem to be quite narrow-minded about what composition means in CSS."),n("li",null,"You can do composition in the HTML or in the CSS."),n("li",null,"Styles we write can be divided into four categories — layouts, typography, theming, and effects.")],-1)),n("p",null,[s[23]||(s[23]=a("And finally: ")),n("a",L,[t(p,{icon:"fas fa-globe"}),s[20]||(s[20]=a("Splendid Styles"))]),s[24]||(s[24]=a(" contains classes that can aid composition in each of these four categories. ")),n("a",A,[t(p,{icon:"fas fa-globe"}),s[21]||(s[21]=a("Splendid Layouts"))]),s[25]||(s[25]=a(" handles the layout portion. And I’m writing more about how I create composable classes in my course ")),n("a",M,[t(p,{icon:"fas fa-globe"}),s[22]||(s[22]=a("Unorthodox Tailwind"))]),s[26]||(s[26]=a("."))]),v(" TODO: add ARTICLE CARD "),t(c,r(u({title:"Composition in CSS",desc:"CSS is a composable language by nature. This composition nature is already built into the cascade. We simply don't talk about composition as a Big Thing because it's the nature of the language.",link:"https://chanhi2000.github.io/bookshelf/css-tricks.com/composition-in-css.html",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16)])}const H=k(f,[["render",j]]),z=JSON.parse('{"path":"/css-tricks.com/composition-in-css.html","title":"Composition in CSS","lang":"en-US","frontmatter":{"lang":"en-US","title":"Composition in CSS","description":"Article(s) > Composition in CSS","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","css-tricks.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Composition in CSS\\",\\"image\\":[\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-social-css-tricks.png\\"],\\"datePublished\\":\\"2025-09-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zell Liew\\",\\"url\\":\\"https://css-tricks.com/author/zellwk/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/composition-in-css.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Composition in CSS"}],["meta",{"property":"og:description","content":"Article(s) > Composition in CSS"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-social-css-tricks.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-social-css-tricks.png"}],["meta",{"name":"twitter:image:alt","content":"Composition in CSS"}],["meta",{"property":"article:author","content":"Zell Liew"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"css-tricks.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-09-08T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Composition in CSS"},{"property":"og:description","content":"Composition in CSS"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/composition-in-css.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-09-08T00:00:00.000Z","isOriginal":false,"author":[{"name":"Zell Liew","url":"https://css-tricks.com/author/zellwk/"}],"cover":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/12/default-social-css-tricks.png"},"git":{},"readingTime":{"minutes":4.37,"words":1311},"filePathRelative":"css-tricks.com/composition-in-css.md","copyright":{"author":"Zell Liew"}}');export{H as comp,z as data};
