import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as e,b as c,a as b,t as g,n as r,g as u,w as t,e as a,r as i,o as y}from"./app-BVguHYKu.js";const w={},f={id:"frontmatter-title-관련",tabindex:"-1"},E={class:"header-anchor",href:"#frontmatter-title-관련"},D={class:"table-of-contents"},T={href:"https://en.wikipedia.org/wiki/Domain-driven_design",target:"_blank",rel:"noopener noreferrer"};function I(d,n){const o=i("VPCard"),p=i("router-link"),k=i("SiteInfo"),m=i("VPIcon"),l=i("RouteLink");return y(),h("div",null,[s("h1",f,[s("a",E,[s("span",null,g(d.$frontmatter.title)+" 관련",1)])]),e(o,r(u({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",D,[s("ul",null,[s("li",null,[e(p,{to:"#why-domain-events-matter"},{default:t(()=>n[0]||(n[0]=[a("Why Domain Events Matter")])),_:1,__:[0]})]),s("li",null,[e(p,{to:"#basic-abstractions"},{default:t(()=>n[1]||(n[1]=[a("Basic Abstractions")])),_:1,__:[1]})]),s("li",null,[e(p,{to:"#implementing-sample-handlers"},{default:t(()=>n[2]||(n[2]=[a("Implementing Sample Handlers")])),_:1,__:[2]})]),s("li",null,[e(p,{to:"#the-dispatcher-strongly-typed"},{default:t(()=>n[3]||(n[3]=[a("The Dispatcher (Strongly Typed)")])),_:1,__:[3]})]),s("li",null,[e(p,{to:"#limitations-and-tradeoffs"},{default:t(()=>n[4]||(n[4]=[a("Limitations and Tradeoffs")])),_:1,__:[4]})]),s("li",null,[e(p,{to:"#wrapping-up"},{default:t(()=>n[5]||(n[5]=[a("Wrapping Up")])),_:1,__:[5]})])])]),n[20]||(n[20]=s("hr",null,null,-1)),e(k,{name:"Building a Custom Domain Events Dispatcher in .NET",desc:"Learn how to build a lightweight, in-process domain events dispatcher in .NET without external dependencies. We'll explore the trade-offs between immediate consistency and coupling while implementing a strongly-typed solution from scratch.",url:"https://milanjovanovic.tech/blog/building-a-custom-domain-events-dispatcher-in-dotnet",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_143.png"}),s("p",null,[n[7]||(n[7]=a("Domain events are a powerful way to decouple parts of your system. Instead of tightly coupling your logic, you can publish events and have other parts of your code subscribe to those events. This pattern is especially valuable in ")),s("a",T,[e(m,{icon:"fa-brands fa-wikipedia-w"}),n[6]||(n[6]=a("Domain-Driven Design"))]),n[8]||(n[8]=a(" (DDD) where business logic should remain focused and cohesive."))]),n[21]||(n[21]=c(`<p>In this article, we&#39;ll walk through how to implement a lightweight, custom domain event dispatcher in .NET. The core dispatching logic should not depend on third-party libraries.</p><div class="hint-container info"><p class="hint-container-title">We&#39;ll cover:</p><ul><li>Why you might want to use publish-subscribe in your application</li><li>How to define basic domain event abstractions</li><li>How to implement and register handlers</li><li>How to build a domain events dispatcher</li><li>Trade-offs and when to consider other options</li></ul></div><p>Let&#39;s get started.</p><hr><h2 id="why-domain-events-matter" tabindex="-1"><a class="header-anchor" href="#why-domain-events-matter"><span>Why Domain Events Matter</span></a></h2><p>Before diving into implementation, let&#39;s understand the problem domain events solve. Consider this tightly coupled code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="UserService.cs"><span>UserService.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">RegisterUser</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> email<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> password<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">await</span> _userRepository<span class="token punctuation">.</span><span class="token function">SaveAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Directly coupled to email service</span></span>
<span class="line">        <span class="token keyword">await</span> _emailService<span class="token punctuation">.</span><span class="token function">SendWelcomeEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>Email<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Directly coupled to analytics</span></span>
<span class="line">        <span class="token keyword">await</span> _analyticsService<span class="token punctuation">.</span><span class="token function">TrackUserRegistration</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// What if we need to add more features?</span></span>
<span class="line">        <span class="token comment">// This method will keep growing...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>With domain events, we can decouple this:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="UserService.cs"><span>UserService.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">RegisterUser</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> email<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> password<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">await</span> _userRepository<span class="token punctuation">.</span><span class="token function">SaveAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// Publish event - let other parts of the system react</span></span>
<span class="line">        <span class="token keyword">await</span> _domainEventsDispatcher<span class="token punctuation">.</span><span class="token function">DispatchAsync</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserRegisteredDomainEvent</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> user<span class="token punctuation">.</span>Email<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now the <code>UserService</code> focuses solely on user registration, while other concerns are handled through event handlers.</p><hr><h2 id="basic-abstractions" tabindex="-1"><a class="header-anchor" href="#basic-abstractions"><span>Basic Abstractions</span></a></h2><p>Let&#39;s start by defining two simple interfaces that form the foundation of our event system:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="IDomainEvent.cs"><span>IDomainEvent.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Marker interface for all domain events.</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDomainEvent</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// We could add common properties here like:</span></span>
<span class="line">    <span class="token comment">// DateTime OccurredAt { get; }</span></span>
<span class="line">    <span class="token comment">// Guid EventId { get; }</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="IDomainEventHandler.cs"><span>IDomainEventHandler.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Generic interface for handling domain events.</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDomainEventHandler<span class="token punctuation">&lt;</span><span class="token keyword">in</span> T<span class="token punctuation">&gt;</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDomainEvent</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">T</span> domainEvent<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This design gives us type safety through generic constraints while keeping publishers and handlers completely decoupled. You can add new events or handlers without touching existing code, and everything remains easily testable in isolation.</p><hr><h2 id="implementing-sample-handlers" tabindex="-1"><a class="header-anchor" href="#implementing-sample-handlers"><span>Implementing Sample Handlers</span></a></h2><p>Let&#39;s add some sample handlers that demonstrate how different parts of your system can react to the same event:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="SendWelcomeEmailHandler.cs"><span>SendWelcomeEmailHandler.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Handles sending welcome emails when users register</span></span>
<span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">SendWelcomeEmailHandler</span><span class="token punctuation">(</span><span class="token class-name">IEmailService</span> emailService<span class="token punctuation">)</span> </span>
<span class="line">    <span class="token punctuation">:</span> IDomainEventHandler<span class="token operator">&lt;</span>UserRegisteredDomainEvent<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">UserRegisteredDomainEvent</span> domainEvent<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Send welcome email</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> welcomeEmail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WelcomeEmail</span><span class="token punctuation">(</span>domainEvent<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> domainEvent<span class="token punctuation">.</span>UserId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> emailService<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>welcomeEmail<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="TrackUserRegistrationHandler.cs"><span>TrackUserRegistrationHandler.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Handles analytics tracking for new user registrations</span></span>
<span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">TrackUserRegistrationHandler</span><span class="token punctuation">(</span><span class="token class-name">IAnalyticsService</span> analyticsService<span class="token punctuation">)</span> </span>
<span class="line">    <span class="token punctuation">:</span> IDomainEventHandler<span class="token operator">&lt;</span>UserRegisteredDomainEvent<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">UserRegisteredDomainEvent</span> domainEvent<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Track registration in analytics</span></span>
<span class="line">        <span class="token keyword">await</span> analyticsService<span class="token punctuation">.</span><span class="token function">TrackEvent</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">&quot;user_registered&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                user_id <span class="token operator">=</span> domainEvent<span class="token punctuation">.</span>UserId<span class="token punctuation">,</span></span>
<span class="line">                registration_date <span class="token operator">=</span> domainEvent<span class="token punctuation">.</span>RegisteredAt</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>To make this work, we need to register our handlers with the DI container.</p><p>Here&#39;s how to do it manually:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Program.cs or Startup.cs"><span>Program.cs or Startup.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDomainEventHandler<span class="token punctuation">&lt;</span>UserRegisteredDomainEvent<span class="token punctuation">&gt;</span><span class="token punctuation">,</span> SendWelcomeEmailHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDomainEventHandler<span class="token punctuation">&lt;</span>UserRegisteredDomainEvent<span class="token punctuation">&gt;</span><span class="token punctuation">,</span> TrackUserRegistrationHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Or you can automate this registration using <a href="/milanjovanovic.tech/improving-aspnetcore-dependency-injection-with-scrutor" target="_blank" rel="noopener noreferrer"><strong>assembly scanning with Scrutor</strong></a>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">services<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>scan <span class="token operator">=&gt;</span> scan<span class="token punctuation">.</span><span class="token function">FromAssembliesOf</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DependencyInjection</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddClasses</span><span class="token punctuation">(</span>classes <span class="token operator">=&gt;</span> classes<span class="token punctuation">.</span><span class="token function">AssignableTo</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IDomainEventHandler<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">publicOnly</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AsImplementedInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">WithScopedLifetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The important thing is that multiple handlers can react to the same event.</p><hr><h2 id="the-dispatcher-strongly-typed" tabindex="-1"><a class="header-anchor" href="#the-dispatcher-strongly-typed"><span>The Dispatcher (Strongly Typed)</span></a></h2><p>Now we need something to orchestrate calling the handlers. The dispatcher will take the domain events and call the appropriate handlers for each event.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="IDomainEventsDispatcher.cs"><span>IDomainEventsDispatcher.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDomainEventsDispatcher</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task</span> <span class="token function">DispatchAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>IDomainEvent<span class="token punctuation">&gt;</span></span> domainEvents<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="DomainEventsDispatcher.cs"><span>DomainEventsDispatcher.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">DomainEventsDispatcher</span><span class="token punctuation">(</span><span class="token class-name">IServiceProvider</span> serviceProvider<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> IDomainEventsDispatcher</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">ConcurrentDictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> Type<span class="token punctuation">&gt;</span></span> HandlerTypeDictionary <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">ConcurrentDictionary<span class="token punctuation">&lt;</span>Type<span class="token punctuation">,</span> Type<span class="token punctuation">&gt;</span></span> WrapperTypeDictionary <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">DispatchAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>IDomainEvent<span class="token punctuation">&gt;</span></span> domainEvents<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">IDomainEvent</span> domainEvent <span class="token keyword">in</span> domainEvents<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">using</span> <span class="token class-name">IServiceScope</span> scope <span class="token operator">=</span> serviceProvider<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Type</span> domainEventType <span class="token operator">=</span> domainEvent<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Type</span> handlerType <span class="token operator">=</span> HandlerTypeDictionary<span class="token punctuation">.</span><span class="token function">GetOrAdd</span><span class="token punctuation">(</span></span>
<span class="line">                domainEventType<span class="token punctuation">,</span></span>
<span class="line">                et <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IDomainEventHandler<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MakeGenericType</span><span class="token punctuation">(</span>et<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> handlers <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token function">GetServices</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">?</span></span> handler <span class="token keyword">in</span> handlers<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted">                <span class="token class-name"><span class="token keyword">var</span></span> handlerWrapper <span class="token operator">=</span> HandlerWrapper<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> domainEventType<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted">                <span class="token keyword">await</span> handlerWrapper<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>domainEvent<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Abstract base class for strongly-typed handler wrappers</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HandlerWrapper</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">IDomainEvent</span> domainEvent<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">HandlerWrapper</span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> handler<span class="token punctuation">,</span> <span class="token class-name">Type</span> domainEventType<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Type</span> wrapperType <span class="token operator">=</span> WrapperTypeDictionary<span class="token punctuation">.</span><span class="token function">GetOrAdd</span><span class="token punctuation">(</span></span>
<span class="line">                domainEventType<span class="token punctuation">,</span></span>
<span class="line">                et <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">HandlerWrapper<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MakeGenericType</span><span class="token punctuation">(</span>et<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">(</span>HandlerWrapper<span class="token punctuation">)</span>Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>wrapperType<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Generic wrapper that provides strong typing for handler invocation</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token generic-method"><span class="token function">HandlerWrapper</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> handler<span class="token punctuation">)</span> <span class="token punctuation">:</span> HandlerWrapper <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDomainEvent</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IDomainEventHandler<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> _handler <span class="token operator">=</span> <span class="token punctuation">(</span>IDomainEventHandler<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span>handler<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token class-name">IDomainEvent</span> domainEvent<span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">await</span> _handler<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>domainEvent<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The dispatcher uses a wrapper to eliminate reflection during handler execution while maintaining type safety. When we encounter a <code>UserRegisteredDomainEvent</code>, we create a <code>HandlerWrapper&lt;UserRegisteredDomainEvent&gt;</code> that holds a strongly-typed reference to <code>IDomainEventHandler&lt;UserRegisteredDomainEvent&gt;</code>. The wrapper casts the generic <code>IDomainEvent</code> to the specific event type at runtime, but the actual handler invocation uses compile-time types.</p><p>This gives us the performance benefits of avoiding reflection in the hot path (handler execution) while only using reflection once during wrapper creation. The trade-off is additional complexity, but the performance gain is significant if you&#39;re dispatching many events.</p><p>Don&#39;t forget to register the dispatcher with DI:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDomainEventsDispatcher<span class="token punctuation">,</span> DomainEventsDispatcher<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Usage Example</p><p>Here&#39;s how to use the domain events dispatcher in your application:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="UserController.cs"><span>UserController.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">IUserService</span> userService<span class="token punctuation">,</span> </span>
<span class="line">    <span class="token class-name">IDomainEventsDispatcher</span> domainEventsDispatcher<span class="token punctuation">)</span> <span class="token punctuation">:</span> ControllerBase</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;register&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">Register</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromBody</span></span><span class="token punctuation">]</span> <span class="token class-name">RegisterUserRequest</span> request<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Create the user</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> <span class="token keyword">await</span> userService<span class="token punctuation">.</span><span class="token function">CreateUserAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> request<span class="token punctuation">.</span>Password<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// Publish the domain event</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> userRegisteredEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserRegisteredDomainEvent</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> user<span class="token punctuation">.</span>Email<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">await</span> domainEventsDispatcher<span class="token punctuation">.</span><span class="token function">DispatchAsync</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">userRegisteredEvent</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">{</span> UserId <span class="token operator">=</span> user<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> Message <span class="token operator">=</span> <span class="token string">&quot;User registered successfully&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">BadRequest</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">{</span> Error <span class="token operator">=</span> ex<span class="token punctuation">.</span>Message <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div>`,37)),s("p",null,[n[10]||(n[10]=a("You could also ")),e(l,{to:"/milanjovanovic.tech/how-to-use-domain-events-to-build-loosely-coupled-systems.html"},{default:t(()=>n[9]||(n[9]=[s("strong",null,"integrate domain events directly into your domain entities",-1)])),_:1,__:[9]}),n[11]||(n[11]=a("."))]),n[22]||(n[22]=c('<hr><h2 id="limitations-and-tradeoffs" tabindex="-1"><a class="header-anchor" href="#limitations-and-tradeoffs"><span>Limitations and Tradeoffs</span></a></h2><p>This implementation runs entirely in-process, which has important implications. All handlers execute synchronously within the same request context, but each gets its own DI scope. This means:</p><ul><li><strong>Immediate feedback</strong>: If any handler fails, the exception bubbles up to the caller immediately. No silent failures or eventual consistency surprises.</li><li><strong>Caller control</strong>: The code that dispatches events decides how to handle failures — rollback transactions, retry operations, or continue despite errors. The dispatcher doesn&#39;t make these decisions for you.</li><li><strong>Reliability concerns</strong>: If the process crashes after some handlers succeed but before others complete, there&#39;s no automatic recovery. Events aren&#39;t persisted or retried.</li></ul>',4)),s("p",null,[n[13]||(n[13]=a("For critical side effects that can't be lost, consider the ")),e(l,{to:"/milanjovanovic.tech/implementing-the-outbox-pattern.html"},{default:t(()=>n[12]||(n[12]=[s("strong",null,"Outbox pattern",-1)])),_:1,__:[12]}),n[14]||(n[14]=a(". Instead of dispatching events immediately, store them alongside your business data in the same transaction. A background service can later retry failed events, ensuring nothing gets lost. This decouples reliability from performance — your main operation completes quickly while events are processed reliably in the background."))]),n[23]||(n[23]=s("hr",null,null,-1)),n[24]||(n[24]=s("h2",{id:"wrapping-up",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#wrapping-up"},[s("span",null,"Wrapping Up")])],-1)),n[25]||(n[25]=s("p",null,"Domain events are a powerful pattern for decoupling business logic, and you don't need a heavyweight framework to use them effectively. The implementation we've built here provides a solid foundation that you can extend as your needs grow.",-1)),s("p",null,[n[17]||(n[17]=a("The beauty of rolling your own solution is that you understand every piece, making debugging and customization straightforward. This pattern fits excellently in ")),e(l,{to:"/milanjovanovic.tech/ddd-refactoring/"},{default:t(()=>n[15]||(n[15]=[s("strong",null,"Domain-Driven Design",-1)])),_:1,__:[15]}),n[18]||(n[18]=a(" and ")),e(l,{to:"/milanjovanovic.tech/pragmatic-clean-architecture/"},{default:t(()=>n[16]||(n[16]=[s("strong",null,"Clean Architecture",-1)])),_:1,__:[16]}),n[19]||(n[19]=a(" systems where decoupling business logic is crucial."))]),n[26]||(n[26]=s("p",null,"For systems requiring bulletproof reliability or cross-service communication, invest in proper message infrastructure. But for many applications, this simple approach hits the sweet spot between coupling and complexity.",-1)),n[27]||(n[27]=s("p",null,"The key insight is understanding your trade-offs upfront rather than discovering them in production. Start simple, measure what matters, and evolve based on real requirements.",-1)),n[28]||(n[28]=s("hr",null,null,-1)),b(" TODO: add ARTICLE CARD "),e(o,r(u({title:"Building a Custom Domain Events Dispatcher in .NET",desc:"Learn how to build a lightweight, in-process domain events dispatcher in .NET without external dependencies. We'll explore the trade-offs between immediate consistency and coupling while implementing a strongly-typed solution from scratch.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/building-a-custom-domain-events-dispatcher-in-dotnet.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const H=v(w,[["render",I]]),C=JSON.parse('{"path":"/milanjovanovic.tech/building-a-custom-domain-events-dispatcher-in-dotnet.html","title":"Building a Custom Domain Events Dispatcher in .NET","lang":"en-US","frontmatter":{"lang":"en-US","title":"Building a Custom Domain Events Dispatcher in .NET","description":"Article(s) > Building a Custom Domain Events Dispatcher in .NET","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Building a Custom Domain Events Dispatcher in .NET\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_143.png\\"],\\"datePublished\\":\\"2025-05-24T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/building-a-custom-domain-events-dispatcher-in-dotnet.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Building a Custom Domain Events Dispatcher in .NET"}],["meta",{"property":"og:description","content":"Article(s) > Building a Custom Domain Events Dispatcher in .NET"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_143.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_143.png"}],["meta",{"name":"twitter:image:alt","content":"Building a Custom Domain Events Dispatcher in .NET"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-05-24T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Building a Custom Domain Events Dispatcher in .NET"},{"property":"og:description","content":"Building a Custom Domain Events Dispatcher in .NET"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/building-a-custom-domain-events-dispatcher-in-dotnet.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-05-24T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_143.png"},"git":{},"readingTime":{"minutes":5.17,"words":1550},"filePathRelative":"milanjovanovic.tech/building-a-custom-domain-events-dispatcher-in-dotnet.md","copyright":{"author":"Milan Jovanović"}}');export{H as comp,C as data};
