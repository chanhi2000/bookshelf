import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as e,f as t,b as k,a as b,t as v,n as c,g as r,w as u,e as s,r as a,o as g}from"./app-BVguHYKu.js";const f={},C={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},y={class:"hint-container info"},I={href:"https://youtube.com/playlist?list=PL_I3TGB7aK6jNBMZkw3FYdJXyf7quHdI8",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/amitshekhariitbhu/android-interview-questions",target:"_blank",rel:"noopener noreferrer"},A={class:"hint-container info"},E={href:"https://twitter.com/amitiitbhu",target:"_blank",rel:"noopener noreferrer"},N={href:"https://linkedin.com/in/amit-shekhar-iitbhu",target:"_blank",rel:"noopener noreferrer"},K={href:"https://youtube.com/@amitshekhar",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/amitshekhariitbhu",target:"_blank",rel:"noopener noreferrer"},j={href:"https://twitter.com/outcome_school",target:"_blank",rel:"noopener noreferrer"},D={href:"https://linkedin.com/company/outcomeschool",target:"_blank",rel:"noopener noreferrer"},T={href:"https://youtube.com/@OutcomeSchool",target:"_blank",rel:"noopener noreferrer"},H={href:"http://github.com/OutcomeSchool",target:"_blank",rel:"noopener noreferrer"};function q(d,n){const i=a("VPCard"),l=a("router-link"),p=a("SiteInfo"),o=a("VPIcon");return g(),h("div",null,[e("h1",C,[e("a",w,[e("span",null,v(d.$frontmatter.title)+" 관련",1)])]),t(i,c(r({title:"Java > Article(s)",desc:"Article(s)",link:"/programming/java/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",x,[e("ul",null,[e("li",null,[t(l,{to:"#what-is-coroutinecontext-in-kotlin"},{default:u(()=>n[0]||(n[0]=[s("What is CoroutineContext in Kotlin?")])),_:1,__:[0]})]),e("li",null,[t(l,{to:"#customization-in-coroutinecontext"},{default:u(()=>n[1]||(n[1]=[s("Customization in CoroutineContext")])),_:1,__:[1]})])])]),n[34]||(n[34]=e("hr",null,null,-1)),t(p,{name:"CoroutineContext inKotlin",desc:"In this blog, we will learn about the CoroutineContext in Kotlin by going through the source code. We will also cover how to customize it.",url:"https://outcomeschool.com/coroutinecontext-in-kotlin",logo:"https://outcomeschool.com/static/favicons/apple-touch-icon.png",preview:"https://outcomeschool.com/static/images/blog/coroutinecontext-in-kotlin.png"}),e("div",y,[n[5]||(n[5]=e("p",{class:"hint-container-title"},"Info",-1)),e("p",null,[n[3]||(n[3]=s("Before we start, I would like to mention that, I have released a video playlist to help you crack the Android Interview: Check out ")),e("a",I,[t(o,{icon:"fa-brands fa-youtube"}),n[2]||(n[2]=s("Android Interview Questions and Answers"))]),n[4]||(n[4]=s("."))])]),n[35]||(n[35]=k(`<p>In this blog, we will learn about the CoroutineContext in Kotlin by going through the source code. We will also cover how to customize it.</p><p>We will start with the basics to understand everything about CoroutineContext.</p><p>Let&#39;s begin.</p><hr><h2 id="what-is-coroutinecontext-in-kotlin" tabindex="-1"><a class="header-anchor" href="#what-is-coroutinecontext-in-kotlin"><span>What is <code>CoroutineContext</code> in Kotlin?</span></a></h2><p><code>CoroutineContext</code> is an interface in Kotlin&#39;s coroutines that helps us define the context or the environment in which a coroutine executes, using various elements.</p><p>It helps us define the following elements:</p><ul><li><code>Dispatcher</code>: It helps Coroutines in deciding the thread on which the task has to be done.</li><li><code>Job</code>: It represents the lifecycle of a coroutine, including its cancellation and completion states.</li><li><code>CoroutineName</code>: It helps in providing a name for the coroutine, hence useful for debugging.</li><li><code>CoroutineExceptionHandler</code>: It is used to handle uncaught exceptions in coroutines.</li></ul><p>If we see the <strong>source code</strong> of the <code>launch</code> in Coroutines:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">// code changed to make it simple</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token operator">&lt;</span>SomeScope<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext <span class="token operator">=</span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// code removed for brevity</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The first parameter is <code>CoroutineContext</code>.</p><p>Now, let&#39;s see the source code of the <code>CoroutineContext</code>.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> CoroutineContext <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>E <span class="token operator">:</span> Element<span class="token operator">&gt;</span> <span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token operator">:</span> Key<span class="token operator">&lt;</span>E<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> E<span class="token operator">?</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// code removed for brevity</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token function">plus</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">)</span><span class="token operator">:</span> CoroutineContext</span>
<span class="line">    <span class="token comment">// code removed for brevity</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The source code of the Element.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> CoroutineContext <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// code removed for brevity</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">interface</span> Element <span class="token operator">:</span> CoroutineContext <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// code removed for brevity</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By seeing the source code, we can see that CoroutineContext has a set of elements (<code>CoroutineContext.Element</code>) and these elements define the behavior of a coroutine.</p><p>At the beginning, we learned about those four elements:</p><ul><li><code>Dispatcher</code></li><li><code>Job</code></li><li><code>CoroutineName</code></li><li><code>CoroutineExceptionHandler</code></li></ul><p>These elements must be the type of <code>CoroutineContext.Element</code> internally. Let me show you the <strong>source code</strong> to understand.</p><p>Job Source Code:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> Job <span class="token operator">:</span> CoroutineContext<span class="token punctuation">.</span><span class="token function">Element</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// code removed for brevity</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Job</code> is of type <code>CoroutineContext.Element</code>.</p><p>Similarly, if we see the source code for Dispatcher, CoroutineName, and CoroutineExceptionHandler, we can see that they are also the type of <code>CoroutineContext.Element</code> internally.</p><p>That is why, we can create a CoroutineContext using the <code>plus</code> (+) operator to define all the elements as below:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> coroutineContext<span class="token operator">:</span> CoroutineContext <span class="token operator">=</span></span>
<span class="line">    Dispatchers<span class="token punctuation">.</span>IO <span class="token operator">+</span></span>
<span class="line">    <span class="token function">Job</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">    <span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;OutcomeSchoolCoroutine&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">    CoroutineExceptionHandler <span class="token punctuation">{</span> _<span class="token punctuation">,</span> _ <span class="token operator">-&gt;</span> <span class="token comment">/* Handle Exception */</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And then use it like below:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>coroutineContext<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do some work</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>I have used GlobalScope for quick examples, we should avoid using it at all costs. In an Android project, we should use custom scopes based on our usecase such as <code>lifecycleScope</code>, <code>viewModelScope</code> etc.</p></div><p>Now we need to learn how to define and use each of the above-mentioned elements. To do this, we&#39;ll explore the customizations that can be easily made within the CoroutineContext.</p><hr><h2 id="customization-in-coroutinecontext" tabindex="-1"><a class="header-anchor" href="#customization-in-coroutinecontext"><span>Customization in CoroutineContext</span></a></h2><p>Let&#39;s see the <code>Hello World</code> of the Coroutine:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do some work</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the example mentioned above, the default <code>CoroutineContext</code> will be used since we have not provided a custom <code>CoroutineContext</code>.</p><p>As we know, <code>CoroutineContext</code> helps manage the <code>Dispatcher</code>, <code>Job</code>, <code>CoroutineName</code>, and <code>CoroutineExceptionHandler</code>. We can modify one or more of these elements based on our use case.</p><p>Initially, we will start by changing only the <code>Dispatcher</code> to gain a basic understanding.</p><p>We can write the code as below:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do some work</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, we have specified the <code>Dispatcher</code> for the Coroutine to use during task execution. The task will be executed on the IO <code>Dispatcher</code>.</p><p>Now, let&#39;s suppose we want to change the CoroutineName in addition to the <code>Dispatcher</code>.</p><p>We can write the code as below:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO <span class="token operator">+</span> <span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;OutcomeSchoolCoroutine&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do some work</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, we have used the plus operator.</p><p>Now, suppose we want to change other parameters in addition to the <code>Dispatcher</code> and <code>CoroutineName</code>. We can use the <code>+</code> operator again to add the other parameters as shown below:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span></span>
<span class="line">    Dispatchers<span class="token punctuation">.</span>IO <span class="token operator">+</span></span>
<span class="line">            <span class="token function">Job</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">            <span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;OutcomeSchoolCoroutine&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">            CoroutineExceptionHandler <span class="token punctuation">{</span> _<span class="token punctuation">,</span> _ <span class="token operator">-&gt;</span> <span class="token comment">/* Handle Exception */</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do some work</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or, we can create a <code>CoroutineContext</code>:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> coroutineContext<span class="token operator">:</span> CoroutineContext <span class="token operator">=</span></span>
<span class="line">    Dispatchers<span class="token punctuation">.</span>IO <span class="token operator">+</span></span>
<span class="line">    <span class="token function">Job</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">    <span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;OutcomeSchoolCoroutine&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">    CoroutineExceptionHandler <span class="token punctuation">{</span> _<span class="token punctuation">,</span> _ <span class="token operator">-&gt;</span> <span class="token comment">/* Handle Exception */</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And then use it like below:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>coroutineContext<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do some work</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is how we can easily customize the <code>CoroutineContext</code>.</p><p>Now, we have understood the <code>CoroutineContext</code> in Kotlin.</p>`,51)),e("p",null,[n[9]||(n[9]=s("Prepare yourself for Android Interview: ")),e("a",S,[n[6]||(n[6]=s("Android Interview Questions (")),t(o,{icon:"iconfont icon-github"}),n[7]||(n[7]=e("code",null,"amitshekhariitbhu/android-interview-questions",-1)),n[8]||(n[8]=s(")"))])]),t(p,{name:"amitshekhariitbhu/android-interview-questions",desc:"Your Cheat Sheet For Android Interview - Android Interview Questions and Answers",url:"https://github.com/amitshekhariitbhu/android-interview-questions/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://repository-images.githubusercontent.com/96704265/3a1039a7-29ee-425d-b4ea-53fcff2c1db7"}),n[36]||(n[36]=e("p",null,"That's it for now.",-1)),n[37]||(n[37]=e("p",null,"Thanks",-1)),e("div",A,[n[31]||(n[31]=e("p",{class:"hint-container-title"},"Amit Shekhar",-1)),n[32]||(n[32]=e("p",null,"You can connect with me on:",-1)),e("ul",null,[e("li",null,[e("a",E,[n[10]||(n[10]=s("X (")),t(o,{icon:"fa-brands fa-x-twitter"}),n[11]||(n[11]=e("code",null,"amitiitbhu",-1))])]),e("li",null,[e("a",N,[n[12]||(n[12]=s("LinkedIn (")),t(o,{icon:"fa-brands fa-linkedin"}),n[13]||(n[13]=e("code",null,"amit-shekhar-iitbhu",-1))])]),e("li",null,[e("a",K,[n[14]||(n[14]=s("YouTube (")),t(o,{icon:"fa-brands fa-youtube"}),n[15]||(n[15]=e("code",null,"amitshekhar",-1)),n[16]||(n[16]=s(")"))])]),e("li",null,[e("a",O,[n[17]||(n[17]=s("GitHub (")),t(o,{icon:"iconfont icon-github"}),n[18]||(n[18]=e("code",null,"amitshekhariitbhu",-1))])])]),n[33]||(n[33]=e("p",null,"Follow Outcome School on:",-1)),e("ul",null,[e("li",null,[e("a",j,[n[19]||(n[19]=s("X (")),t(o,{icon:"fa-brands fa-x-twitter"}),n[20]||(n[20]=e("code",null,"outcome_school",-1)),n[21]||(n[21]=s(")"))])]),e("li",null,[e("a",D,[n[22]||(n[22]=s("LinkedIn (")),t(o,{icon:"fa-brands fa-linkedin"}),n[23]||(n[23]=e("code",null,"outcomeschool",-1)),n[24]||(n[24]=s(")"))])]),e("li",null,[e("a",T,[n[25]||(n[25]=s("YouTube (")),t(o,{icon:"fa-brands fa-youtube"}),n[26]||(n[26]=e("code",null,"OutcomeSchool",-1)),n[27]||(n[27]=s(")"))])]),e("li",null,[e("a",H,[n[28]||(n[28]=s("GitHub (")),t(o,{icon:"iconfont icon-github"}),n[29]||(n[29]=e("code",null,"OutcomeSchool",-1)),n[30]||(n[30]=s(")"))])])])]),b(" TODO: add ARTICLE CARD "),t(i,c(r({title:"CoroutineContext inKotlin",desc:"In this blog, we will learn about the CoroutineContext in Kotlin by going through the source code. We will also cover how to customize it.",link:"https://chanhi2000.github.io/bookshelf/outcomeschool.com/coroutinecontext-in-kotlin.html",logo:"https://outcomeschool.com/static/favicons/apple-touch-icon.png",background:"rgba(78,70,220,0.2)"})),null,16)])}const P=m(f,[["render",q]]),W=JSON.parse('{"path":"/outcomeschool.com/coroutinecontext-in-kotlin.html","title":"CoroutineContext inKotlin","lang":"en-US","frontmatter":{"lang":"en-US","title":"CoroutineContext inKotlin","description":"Article(s) > CoroutineContext inKotlin","icon":"iconfont icon-kotlin","category":["Java","Kotlin","Article(s)"],"tag":["blog","outcomeschool.com","java","kotlin"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CoroutineContext inKotlin\\",\\"image\\":[\\"https://outcomeschool.com/static/images/blog/coroutinecontext-in-kotlin.png\\"],\\"datePublished\\":\\"2024-09-09T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amit Shekhar\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/outcomeschool.com/coroutinecontext-in-kotlin.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"CoroutineContext inKotlin"}],["meta",{"property":"og:description","content":"Article(s) > CoroutineContext inKotlin"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://outcomeschool.com/static/images/blog/coroutinecontext-in-kotlin.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://outcomeschool.com/static/images/blog/coroutinecontext-in-kotlin.png"}],["meta",{"name":"twitter:image:alt","content":"CoroutineContext inKotlin"}],["meta",{"property":"article:author","content":"Amit Shekhar"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"outcomeschool.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-09-09T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > CoroutineContext inKotlin"},{"property":"og:description","content":"CoroutineContext inKotlin"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/outcomeschool.com/coroutinecontext-in-kotlin.html"}]],"prev":"/programming/java/articles/README.md","date":"2024-09-09T00:00:00.000Z","isOriginal":false,"author":"Amit Shekhar","cover":"https://outcomeschool.com/static/images/blog/coroutinecontext-in-kotlin.png"},"git":{},"readingTime":{"minutes":3.64,"words":1093},"filePathRelative":"outcomeschool.com/coroutinecontext-in-kotlin.md","copyright":{"author":"Amit Shekhar"}}');export{P as comp,W as data};
