import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as e,b as l,a as i,t as h,n as m,g as r,w as p,e as a,r as d,o as f}from"./app-BVguHYKu.js";const w={},y={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"},R={href:"https://apple.stackexchange.com/questions/422565/does-virtualbox-run-on-apple-silicon",target:"_blank",rel:"noopener noreferrer"},V={href:"https://osxdaily.com/2022/10/22/you-can-now-run-virtualbox-on-apple-silicon-m1-m2/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://download.virtualbox.org/virtualbox/7.0.0/VirtualBox-7.0.0_BETA4-153978-macOSArm64.dmg",target:"_blank",rel:"noopener noreferrer"},S={href:"https://virtualbox.org/ticket/21771",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/kubernetes-sigs/headlamp",target:"_blank",rel:"noopener noreferrer"},T={href:"https://linkedin.com/in/joaquimrocha/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://linkedin.com/in/hoonjo/",target:"_blank",rel:"noopener noreferrer"};function B(u,n){const c=d("VPCard"),o=d("router-link"),g=d("SiteInfo"),v=d("RouteLink"),t=d("VPIcon");return f(),k("div",null,[s("h1",y,[s("a",x,[s("span",null,h(u.$frontmatter.title)+" 관련",1)])]),e(c,m(r({title:"Kubernetes > Article(s)",desc:"Article(s)",link:"/devops/k8s/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(c,m(r({title:"macOS > Article(s)",desc:"Article(s)",link:"/devops/macos/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(c,m(r({title:"Virtualbox > Article(s)",desc:"Article(s)",link:"/devops/virtualbox/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(c,m(r({title:"Vagrant > Article(s)",desc:"Article(s)",link:"/devops/vagrant/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",A,[s("ul",null,[s("li",null,[e(o,{to:"#버추얼박스의-arm64-지원-시도들"},{default:p(()=>n[0]||(n[0]=[a("버추얼박스의 arm64 지원 시도들")])),_:1,__:[0]})]),s("li",null,[e(o,{to:"#버추얼박스로-arm64-기반의-쿠버네티스-클러스터-구성하기"},{default:p(()=>n[1]||(n[1]=[a("버추얼박스로 arm64 기반의 쿠버네티스 클러스터 구성하기")])),_:1,__:[1]}),s("ul",null,[s("li",null,[e(o,{to:"#_1-arm64-기반의-쿠버네티스-클러스터-배포를-위한-소프트웨어-설치"},{default:p(()=>n[2]||(n[2]=[a("1. arm64 기반의 쿠버네티스 클러스터 배포를 위한 소프트웨어 설치")])),_:1,__:[2]})]),s("li",null,[e(o,{to:"#_3-구성한-터미널-프로그램으로-클러스터를-확인하고-간단한-애플리케이션을-배포"},{default:p(()=>n[3]||(n[3]=[a("3. 구성한 터미널 프로그램으로 클러스터를 확인하고, 간단한 애플리케이션을 배포")])),_:1,__:[3]})])])]),s("li",null,[e(o,{to:"#추가로-시도해-볼만한-작업-헤드램프-설치"},{default:p(()=>n[4]||(n[4]=[a("추가로 시도해 볼만한 작업: 헤드램프 설치")])),_:1,__:[4]})]),s("li",null,[e(o,{to:"#마치며"},{default:p(()=>n[5]||(n[5]=[a("마치며")])),_:1,__:[5]})])])]),n[56]||(n[56]=s("hr",null,null,-1)),e(g,{name:"새로 산 맥북으로 “더 쉽게” 쿠버네티스 클러스터 구성하기",desc:"x86-64 환경만 지원하던 버추얼박스(VirtualBox)가 최근 arm64 기반 맥북을 제대로 지원하기 시작했습니다. 덕분에 현재는 VM웨어 퓨전 대신 버추얼박스로 쿠버네티스 클러스터를 구성할 수 있게 되었습니다. 이를 통해 기존의 불편함이 대부분 해소되었으며, 윈도와 맥OS 기반 환경 모두 동일한 코드로 배포와 실행을 할 수 있어졌습니다. 따라서 이번 글에서는 버추얼박스가 arm64를 지원하기까지의 과정을 살펴본 다음, 이를 활용한 쿠버네티스 클러스터 구성 방법을 소개하겠습니다.",url:"https://yozm.wishket.com/magazine/detail/3284/",logo:"https://yozm.wishket.com/fav1con.ico",preview:"https://yozm.wishket.com/media/news/3284/image20.png"}),s("p",null,[n[7]||(n[7]=a("지난 글 ")),e(v,{to:"/yozm.wishket.com/2658.html"},{default:p(()=>n[6]||(n[6]=[s("strong",null,"새로 산 맥북으로 쿠버네티스 클러스터 구성하기",-1)])),_:1,__:[6]}),n[8]||(n[8]=a("에서는, 베이그런트(Vagrant)와 VM웨어 퓨전(VMware Fusion)을 활용해 클러스터를 구성한 바 있습니다. 다만 이 방식은 설치 전에 사전 준비가 필요하고, 실제 사용하기에도 여러 불편함이 있었습니다. 특히 VM웨어 퓨전은 라이선스 문제도 있고, 공식 파일을 내려받으려면 회원 가입을 해야 한다는 문제도 있었습니다."))]),n[57]||(n[57]=l('<figure><img src="https://wishket.com/media/news/3284/image27.png" alt="베이그런트와 VM웨어 퓨전을 활용한 쿠버네티스 클러스터 구성" tabindex="0" loading="lazy"><figcaption>베이그런트와 VM웨어 퓨전을 활용한 쿠버네티스 클러스터 구성</figcaption></figure><p>이런 상황에서 x86-64 환경만 지원하던 버추얼박스(VirtualBox)가 최근 arm64 기반 맥북을 제대로 지원하기 시작했습니다. (정확히 말하자면, 오랜 기간 arm64 지원을 준비해 온 버추얼박스가 이제서야 실현한 것입니다.) 덕분에 현재는 VM웨어 퓨전 대신 버추얼박스로 쿠버네티스 클러스터를 구성할 수 있게 되었습니다.</p><figure><img src="https://wishket.com/media/news/3284/image20.png" alt="베이그런트와 버추얼박스를 활용한 쿠버네티스 클러스터 구성" tabindex="0" loading="lazy"><figcaption>베이그런트와 버추얼박스를 활용한 쿠버네티스 클러스터 구성</figcaption></figure><p>이를 통해 기존의 불편함이 대부분 해소되었으며, 윈도와 맥OS 기반 환경 모두 동일한 코드로 배포와 실행을 할 수 있어졌습니다.</p><p>따라서 이번 글에서는 버추얼박스가 arm64를 지원하기까지의 과정을 살펴본 다음, 이를 활용한 쿠버네티스 클러스터 구성 방법을 소개하겠습니다. 구성 방법부터 확인하고 싶은 경우, 아래로 글을 내려 바로 볼 수도 있습니다.</p><hr><h2 id="버추얼박스의-arm64-지원-시도들" tabindex="-1"><a class="header-anchor" href="#버추얼박스의-arm64-지원-시도들"><span>버추얼박스의 arm64 지원 시도들</span></a></h2><p>버추얼박스는 원래 x86-64 기반 가상화 기술로, <strong>VT-x/AMD-V</strong>와 같은 하드웨어 가상화 기술을 기반으로 두고 있습니다. 이 때문에 arm 또는 arm64로의 이전이 쉽지 않았습니다. 실제로 개발팀은 x86-64만을 지원할 것이라고 꾸준히 얘기해 왔습니다.</p>',8)),s("figure",null,[n[14]||(n[14]=s("img",{src:"https://wishket.com/media/news/3284/image25.png",alt:'2021년 x86, AMD64/Intel64 전용 하이퍼바이저라고 말한 답변<br/><출처: <VPIcon icon="fas fa-globe"/>Stack Exchange>',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[10]||(n[10]=a("2021년 x86, AMD64/Intel64 전용 하이퍼바이저라고 말한 답변")),n[11]||(n[11]=s("br",null,null,-1)),n[12]||(n[12]=a("<출처: ")),s("a",R,[e(t,{icon:"fas fa-globe"}),n[9]||(n[9]=a("Stack Exchange"))]),n[13]||(n[13]=a(">"))])]),n[58]||(n[58]=s("p",null,"그러나 이러한 다짐은, 새로운 애플 기기의 등장으로 달라집니다. 2020년 11월 출시된 애플 실리콘 맥 M1의 폭발적인 인기가 식지 않았고, 2022년 6월 공개된 후속작 M2도 시장 장악력을 늘렸기 때문입니다.",-1)),n[59]||(n[59]=s("p",null,"M1과 M2가 인기를 얻으며 커뮤니티를 중심으로 나온 꾸준한 요구에 따라, 버추얼박스 개발팀은 버추얼박스를 지원할 여러 시도를 이어갔습니다. 그런 와중, 2022년 개발자 프리뷰(Developer Prev1ew) 버전을 공개하며 이제 지원을 할 수 있다고 발표했습니다.",-1)),s("figure",null,[n[20]||(n[20]=s("img",{src:"https://wishket.com/media/news/3284/image14.png",alt:'2022년, <VPIcon icon="fas fa-globe"/>된다는 말과 다르게, 동작하지 않은 버전<br/><출처: 버추얼박스>',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[16]||(n[16]=a("2022년, ")),s("a",V,[e(t,{icon:"fas fa-globe"}),n[15]||(n[15]=a("된다는 말"))]),n[17]||(n[17]=a("과 다르게, 동작하지 않은 버전")),n[18]||(n[18]=s("br",null,null,-1)),n[19]||(n[19]=a("<출처: 버추얼박스>"))])]),n[60]||(n[60]=s("p",null,"초기 프리뷰 버전은 버그와 해결되지 않은 문제가 넘쳐났지만, 시간이 지나도 해결될 기미는 보이지 않았습니다. 개발 속도 자체도 진척이 없었습니다. 결국 프리뷰 버전 다운로드 링크마저 사라지며, arm 기반 맥에서 버추얼박스를 사용하는 일은 사람들의 기억에서 잊히는 듯 했습니다.",-1)),s("figure",null,[n[27]||(n[27]=s("img",{src:"https://wishket.com/media/news/3284/image21.png",alt:'2023년, 개발자 프리뷰 버전을 다운로드 받는 곳이 사라진 모습. <VPIcon icon="iconfont icon-virtualbox"/>다운로드 링크<br/><출처: <VPIcon icon="iconfont icon-virtualbox"/>버추얼박스>',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[23]||(n[23]=a("2023년, 개발자 프리뷰 버전을 다운로드 받는 곳이 사라진 모습. ")),s("a",E,[e(t,{icon:"iconfont icon-virtualbox"}),n[21]||(n[21]=a("다운로드 링크"))]),n[24]||(n[24]=s("br",null,null,-1)),n[25]||(n[25]=a("<출처: ")),s("a",S,[e(t,{icon:"iconfont icon-virtualbox"}),n[22]||(n[22]=a("버추얼박스"))]),n[26]||(n[26]=a(">"))])]),n[61]||(n[61]=l(`<p>그렇게 사실 저도 거의 포기하고 VM웨어 퓨전을 사용하기로 했습니다. 때마침 라이선스 정책이 개인 사용자에게 유리하게 바뀌었기 때문입니다.</p><p>그러다 갑자기 버추얼박스는 2024년 9월, 버전 <strong>v7.1</strong>부터 arm을 공식 지원한다고 발표했습니다.</p><figure><img src="https://wishket.com/media/news/3284/image3.png" alt="&lt;출처: 버추얼박스&gt;" tabindex="0" loading="lazy"><figcaption>&lt;출처: 버추얼박스&gt;</figcaption></figure><p>이를 확인하기 위해 최신 버전인 v7.1.10을 실제로 검증해 본 결과, 버그도 거의 없었고, 성능과 사용 편의성 모두 좋은 수준이었습니다. 따라서 이제는 다소 제약이 많았던 VM웨어 퓨전 대신, 버추얼박스를 사용하는 것을 적극 추천합니다.</p><hr><h2 id="버추얼박스로-arm64-기반의-쿠버네티스-클러스터-구성하기" tabindex="-1"><a class="header-anchor" href="#버추얼박스로-arm64-기반의-쿠버네티스-클러스터-구성하기"><span>버추얼박스로 arm64 기반의 쿠버네티스 클러스터 구성하기</span></a></h2><p>그럼 본격적으로 버추얼박스로 arm64 기반 쿠버네티스 클러스터를 구축하는 과정을 알아보겠습니다. 크게 세 단계로 진행됩니다.</p><ol><li>arm64 기반의 쿠버네티스 클러스터 배포를 위한 소프트웨어 설치</li><li>설치한 소프트웨어를 활용한 클러스터 구성</li><li>구성한 터미널 프로그램으로 클러스터를 확인하고, 간단한 애플리케이션을 배포</li></ol><p>이제 이 3단계에 따라 arm64 환경에서 쿠버네티스 클러스터를 실제로 구성하고, 동작 여부를 확인하겠습니다.</p><figure><img src="https://wishket.com/media/news/3284/image23.png" alt="배포할 쿠버네티스 클러스터 v1.33의 로고&lt;br/&gt;&lt;출처: 쿠버네티스&gt;" tabindex="0" loading="lazy"><figcaption>배포할 쿠버네티스 클러스터 v1.33의 로고<br>&lt;출처: 쿠버네티스&gt;</figcaption></figure><h3 id="_1-arm64-기반의-쿠버네티스-클러스터-배포를-위한-소프트웨어-설치" tabindex="-1"><a class="header-anchor" href="#_1-arm64-기반의-쿠버네티스-클러스터-배포를-위한-소프트웨어-설치"><span>1. <code>arm64</code> 기반의 쿠버네티스 클러스터 배포를 위한 소프트웨어 설치</span></a></h3><p>먼저, 손쉬운 설치를 위해 이미 구성이 완료된 깃헙 소스를 로컬 환경에 클론(<code>clone</code>)합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> clone https://github.com/sysnet4admin/_Lecture_k8s_learning.kit.git</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># C10ning into &#39;_Lecture k8s_Iearning.kit&#39;</span></span>
<span class="line"><span class="token comment"># remote: Enumerating objects: 5897, done.</span></span>
<span class="line"><span class="token comment"># [생략]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)),i(" ![클론한 소스 디렉터리 중 ch2/2.4로 이동하겠습니다. 이곳에는 `arm64` 배포용 소프트웨어, 터미널 프로그램, 그리고 관련 설정 파일들이 준비되어 있습니다.](https://wishket.com/media/news/3284/1.png) "),n[62]||(n[62]=l(`<p>우선 설치해야 할 소프트웨어는 다음 세 가지입니다.</p><ul><li>버추얼박스(VirtualBox)</li><li>베이그런트(Vagrant)</li><li>타비(Tabby)</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token builtin class-name">cd</span> _Lecture_k8s_learning.kit/ch2/2.4</span>
<span class="line"><span class="token function">ls</span> <span class="token parameter variable">-1</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># controlplane_node.sh</span></span>
<span class="line"><span class="token comment"># extra_k8s_pkgs.sh</span></span>
<span class="line"><span class="token comment"># k8s_env_build.sh</span></span>
<span class="line"><span class="token comment"># k8s_pkg_cfg • sh</span></span>
<span class="line"><span class="token comment"># tabby-v1.0.2Ø7</span></span>
<span class="line"><span class="token comment"># VagrantfiIe</span></span>
<span class="line"><span class="token comment"># vagrant-v2.4.7</span></span>
<span class="line"><span class="token comment"># v1rtua1box-v7.1.10</span></span>
<span class="line"><span class="token comment"># worker_nodes.sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),i(" ![버추얼박스(VirtualBox) 설치](https://wishket.com/media/news/3284/2.png) "),n[63]||(n[63]=l(`<p>버추얼박스는 <code>brew install</code> 명령어로도 설치할 수 있지만, 호환성 유지를 위해 미리 준비된 <code>.rb</code> 파일을 사용해 고정 버전(v7.1.10)의 버추얼박스를 설치합니다. VM웨어 퓨전과 달리, 추가 구성은 필요하지 않습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">brew <span class="token function">install</span> <span class="token parameter variable">--cask</span> ./virtualbox-v7.1.10/virtualbox.rb </span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># ==&gt; Downloading</span></span>
<span class="line"><span class="token comment"># https://download.virtualbox.org/virtualbox/7.1.10/VirtualBox-7.1.10-169112-macOSArm64.dmg</span></span>
<span class="line"><span class="token comment"># Already downloaded:</span></span>
<span class="line"><span class="token comment"># /Users/hj/Library/Caches/Homebrew/down10ads/cIØ847be12cf61160d18b66cf2be3cce1143d8a2b0b1千千c046a0a235892dc4c4-VirtualBox-7.1.10-169112-macOSArm64.dmg</span></span>
<span class="line"><span class="token comment"># =&gt; lnstalling Cask virtualbox</span></span>
<span class="line"><span class="token comment"># =&gt; Running installer for virtualbox with sudo; the password may be necessary.</span></span>
<span class="line">Password: <span class="token operator">&lt;</span>암호 입력<span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># installer: Package name is Orac1e V1rtua1Box</span></span>
<span class="line"><span class="token comment"># installer: choices changes file</span></span>
<span class="line"><span class="token comment"># &#39;/private/tmp/choices20250624-38604-4w8fu5.xm1&#39; applied</span></span>
<span class="line"><span class="token comment"># installer: lnstalling at base path /</span></span>
<span class="line"><span class="token comment"># installer: The install was successful.</span></span>
<span class="line"><span class="token comment"># 鬱 vmware-fusion was successfully installed!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),i(" ![베이그런트(Vagrant) 설치](https://wishket.com/media/news/3284/3.png) "),n[64]||(n[64]=s("p",null,[a("베이그런트 역시 고정 버전 설치를 위해 "),s("code",null,".rb"),a(" 파일을 사용해 "),s("strong",null,"v2.4.7"),a("을 설치합니다.")],-1)),n[65]||(n[65]=s("p",null,"마찬가지로 VM웨어 퓨전을 사용할 때는 베이그런트 플러그인을 추가로 설치해야 했지만, 버추얼박스 환경에서는 플러그인이 필요하지 않으므로 바로 다음 단계로 넘어가겠습니다.",-1)),i(" ![타비(Tabby) 설치와 접속 정보 추가](https://wishket.com/media/news/3284/4.png) "),n[66]||(n[66]=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">brew <span class="token function">install</span> <span class="token parameter variable">--cask</span> ./vagrant-v2.4.7/vagrant-v2.4.7/vagrant.rb</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># ==&gt; Downloading</span></span>
<span class="line"><span class="token comment"># https://re1eases.hashicorp.com/vagrant/2.4.7/vagrant_2.4.7_darwin_arm64.dmg</span></span>
<span class="line"><span class="token comment"># Already downloaded:</span></span>
<span class="line"><span class="token comment"># /Users/hj/Library/Caches/Homebrew/down10ads/3d87ee0b909cfd886c1232aa833f37c3beebaIdabd0千a72292a千0d74c896123d-ⅴagrant-2.4.7_darwin_arm64.dmg</span></span>
<span class="line"><span class="token comment"># =&gt; lnstalling Cask vagrant</span></span>
<span class="line"><span class="token comment"># =&gt; Running installer for vagrant with sudo; the password may be necessary</span></span>
<span class="line">Password: <span class="token operator">&lt;</span>암호 입력<span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># installer: Package name is Vagrant</span></span>
<span class="line"><span class="token comment"># installer: Upgrading at base path /</span></span>
<span class="line"><span class="token comment"># installer: The upgrade was successful.</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Bash Comp1etion &#39;completion.sh&#39; to</span></span>
<span class="line"><span class="token comment"># &#39;/opt/homebrew/etc/bash_completion.d/vagrant&#39;</span></span>
<span class="line"><span class="token comment"># ==&gt; Linking Zsh Comp1etion &#39;_vagrant&#39; to</span></span>
<span class="line"><span class="token comment"># &#39;/opt/homebrew/share/zsh/site-functions/_vagrant&#39;</span></span>
<span class="line"><span class="token comment"># 鬱 vagrant was successfully installed!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>마지막으로, 쿠버네티스 클러스터를 배포한 다음 접속을 돕는 터미널 프로그램 타비(Tabby)를 설치합니다. 역시 <code>.rb</code> 파일을 이용해 <strong>v1.0.207</strong>을 설치합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">brew <span class="token function">install</span> <span class="token parameter variable">--cask</span> ./tabby-v1.0.207/tabby.rb</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># ==&gt; Downloading</span></span>
<span class="line"><span class="token comment"># https://github.com/Eugeny/tabby/re1eases/down10ad/v1.e.207/tabby-1.0.207-macos-arm64.zip</span></span>
<span class="line"><span class="token comment"># Already downloaded:</span></span>
<span class="line"><span class="token comment"># /Users/hj/Library/Caches/Homebrew/down10ads/6ac0899dd17d84fb668f23226094b674b千7千5615155b29ba53a109c4d519e782--tabby-1.0.207-macos-arm64.zip</span></span>
<span class="line"><span class="token comment"># =&gt; lnstalling Cask tabby</span></span>
<span class="line"><span class="token comment"># =&gt; Moving App &#39;Tabby.app&#39; to &#39;/App1ications/Tabby.app</span></span>
<span class="line"><span class="token comment"># 鬱 tabby was successfully installed!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),i(" ![](https://wishket.com/media/news/3284/5.png) "),s("p",null,[n[28]||(n[28]=a("설치 후에는 접속 정보를 미리 입력해 둔 파일(")),e(t,{icon:"iconfont icon-yaml"}),n[29]||(n[29]=s("code",null,"config.yaml",-1)),n[30]||(n[30]=a(")을 복사해 따로 입력하는 번거로움을 줄입니다."))]),i(" ![](https://wishket.com/media/news/3284/6.png) "),n[67]||(n[67]=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">cp</span> ./tabby-v1.0.2Ø7/config.yaml ~/Library/App1ication<span class="token punctuation">\\</span> Support/tabby</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-설치한-소프트웨어를-활용한-클러스터-구성" tabindex="-1"><a class="header-anchor" href="#_2-설치한-소프트웨어를-활용한-클러스터-구성"><span>2. 설치한 소프트웨어를 활용한 클러스터 구성</span></a></h4><p>이제 앞서 설치한 소프트웨어를 활용해 <strong>쿠버네티스(Kubernetes) 클러스터</strong>를 구성할 차례입니다. 과정을 간단히 그리면 다음과 같습니다.</p><figure><img src="https://wishket.com/media/news/3284/image20.png" alt="베이그런트, 버추얼박스 그리고 타비의 관계" tabindex="0" loading="lazy"><figcaption>베이그런트, 버추얼박스 그리고 타비의 관계</figcaption></figure>`,4)),s("p",null,[n[31]||(n[31]=a("먼저 베이그런트에서 버추얼박스로 요청할 내용을 담은 ")),e(t,{icon:"fas fa-folder-open"}),n[32]||(n[32]=s("code",null,"B/B.001/U",-1)),n[33]||(n[33]=a(" 디렉터리로 이동합니다. 기존에는 2.4 디렉터리에서도 설치할 수 있었지만, 해당 버전은 쿠버네티스 ")),n[34]||(n[34]=s("strong",null,"v1.30",-1)),n[35]||(n[35]=a("을 설치하므로, 최신 ")),n[36]||(n[36]=s("strong",null,"v1.33",-1)),n[37]||(n[37]=a(" 버전을 사용하기 위해서는 ")),e(t,{icon:"fas fa-folder-open"}),n[38]||(n[38]=s("code",null,"B/B.001/U",-1)),n[39]||(n[39]=a("로 이동해야 합니다."))]),n[68]||(n[68]=l(`<p>해당 디렉터리의 구성은 다음과 같습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/B/B.001/U/</span>
<span class="line"><span class="token function">ls</span> <span class="token parameter variable">-1</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># README.md</span></span>
<span class="line"><span class="token comment"># Vagrantfile</span></span>
<span class="line"><span class="token comment"># controlplane_node.sh</span></span>
<span class="line"><span class="token comment"># extra_k8s_pkgs.sh</span></span>
<span class="line"><span class="token comment"># k8s_env_build.sh</span></span>
<span class="line"><span class="token comment"># k8s_pkg_cfg.sh</span></span>
<span class="line"><span class="token comment"># worker_nodes.sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),i(" ![](https://wishket.com/media/news/3284/7.png) "),n[69]||(n[69]=s("p",null,[a("디렉터리로 이동하고, "),s("code",null,"vagrant up"),a(" 명령어를 실행해 클러스터 구성을 시작합니다. 참고로, 이때는 VM웨어 퓨전과 다르게 구성 화면이 계속 팝업되지 않습니다.")],-1)),i(" ![](https://wishket.com/media/news/3284/8.png) "),n[70]||(n[70]=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">vagrant up</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># Bringing machine &#39;cp-k8s-1.33.2&#39; up with &#39;virtualbox&#39; provider</span></span>
<span class="line"><span class="token comment"># Bringing machine &#39;w1-k8s-1.33.2&#39; up with &#39;virtualbox&#39; provider</span></span>
<span class="line"><span class="token comment"># Bringing machine &#39;w2-k8s-1.33.2&#39; up with &#39;virtualbox&#39; provider</span></span>
<span class="line"><span class="token comment"># Bringing machine &#39;w3-k8s-1.33.2&#39; up with &#39;virtualbox&#39; provider</span></span>
<span class="line"><span class="token comment"># ==&gt; cp-k8s-1.33.2: Importing base box &#39;sysnet4admin/Ubuntu-k8s&#39;...</span></span>
<span class="line"><span class="token comment"># ==&gt; cp-k8s-1.33.2: Matching MAC address for NAT networking...</span></span>
<span class="line"><span class="token comment"># ==&gt; cp-k8s-1.33.2: Checking if box &#39;sysnet4admin/Ubuntu-k8s&#39; version &#39;0.8.6&#39; is up to date...</span></span>
<span class="line"><span class="token comment"># ==&gt; cp-k8s-1.33.2: Setting the name of the VM: cp-k8s-1.33.2(github_SysNet4Admin)</span></span>
<span class="line"><span class="token comment"># ==&gt; cp-k8s-1.33.2: Clearing any previously set network interfaces...</span></span>
<span class="line"><span class="token comment"># ==&gt; cp-k8s-1.33.2: Preparing network interfaces based on configuration...</span></span>
<span class="line"><span class="token comment">#     cp-k8s-1.33.2: Adapter 1: nat</span></span>
<span class="line"><span class="token comment">#     cp-k8s-1.33.2: Adapter 2: hostonly</span></span>
<span class="line"><span class="token comment"># ==&gt; cp-k8s-1.33.2: Forwarding ports...</span></span>
<span class="line"><span class="token comment">#     cp-k8s-1.33.2: 22 (guest) =&gt; 60010 (host) (adapter 1)</span></span>
<span class="line"><span class="token comment"># ==&gt; cp-k8s-1.33.2: Running &#39;pre-boot&#39; VM customizations...</span></span>
<span class="line"><span class="token comment"># ==&gt; cp-k8s-1.33.2: Booting VM...</span></span>
<span class="line"><span class="token comment"># ==&gt; cp-k8s-1.33.2: Waiting for machine to boot. This may take a few minutes...</span></span>
<span class="line"><span class="token comment">#     cp-k8s-1.33.2: SSH address: 127.0.0.1:60010</span></span>
<span class="line"><span class="token comment"># ==&gt; cp-k8s-1.33.2: SSH username: vagrant</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># [중략]</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># ==&gt; w3-k8s-1.33.2: Running provisionerL: shell..</span></span>
<span class="line"><span class="token comment">#     w3-k8s-1.33.2: Running /var/folders/wf/p21p461x4kj0zyyv2fwtcpl40000gn/T/vagrant-shell20250624-40848-89mgq2.sh</span></span>
<span class="line"><span class="token comment">#     w3-k85-1.33.2: [preflight] Running pre-flight checks</span></span>
<span class="line"><span class="token comment">#     w3-k85-1.33.2: [preflight] Reading configuration from the &quot;kubeadm-config&quot; ConfigMap in namespace &quot;kube-system&quot;...</span></span>
<span class="line"><span class="token comment">#     w3-k85-1.33.2: [preflight] Use &#39;kubeadm init phase upload-config -config your-config-file&#39; tO re-upload it.</span></span>
<span class="line"><span class="token comment">#     w3-k85-1.33.2: [kubelet-start] Writing kubelet configuration tO file &quot;/var/lib/kubelet/config.yaml&quot;</span></span>
<span class="line"><span class="token comment">#     w3-k85-1.33.2: [kubelet-start] Writing kubelet environment file with flags tO file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span>
<span class="line"><span class="token comment">#     w3-k85-1.33.2: [kubelet-start] Starting the kubelet</span></span>
<span class="line"><span class="token comment">#     w3-k85-1.33.2: [kubelet-check] Waiting a healthy kubelet at http://127.0.0.1:10248/healthz. This can take up tO 4m05</span></span>
<span class="line"><span class="token comment">#     w3-k85-1.33.2: [kubelet-check] The kubelet is healthy after 1.000734493s</span></span>
<span class="line"><span class="token comment">#     w3-k85-1.33.2: [kubelet-start] Waiting the kubelet tO perform the TLS Bootstrap</span></span>
<span class="line"><span class="token comment">#     w3-k85-1.33.2: This node has joined the cluster:</span></span>
<span class="line"><span class="token comment">#     w3-k85-1.33.2: * Certificate signing request was sent tO apiserver and a response was received </span></span>
<span class="line"><span class="token comment">#     w3-k85-1.33.2: * The Kube1et was informed Of the new secure connection details.</span></span>
<span class="line"><span class="token comment">#     w3-k85-1.33.2: Run &#39;kubectl get nodes&#39; on the control-plane to see this node join the cluster.</span></span>
<span class="line"><span class="token comment">#     w3-k85-1.33.2: </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위의 코드처럼, <code>vagrant up</code> 모든 과정이 완료된 것을 확인하면, 간단히 구성이 끝납니다.</p><h3 id="_3-구성한-터미널-프로그램으로-클러스터를-확인하고-간단한-애플리케이션을-배포" tabindex="-1"><a class="header-anchor" href="#_3-구성한-터미널-프로그램으로-클러스터를-확인하고-간단한-애플리케이션을-배포"><span>3. 구성한 터미널 프로그램으로 클러스터를 확인하고, 간단한 애플리케이션을 배포</span></a></h3><p>배포를 마친 쿠버네티스 클러스터의 노드에 접속하기 위해, 터미널 프로그램 타비(Tabby)를 실행합니다.</p><p>타비를 실행하면, 다음과 같이 <strong>프로필 선택 화면</strong>이 나타납니다. 이 중 <code>cp-k8s</code>를 선택합니다.</p><figure><img src="https://wishket.com/media/news/3284/image6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>cp-k8s</code>를 선택하면 <strong>호스트 키 확인</strong> 메시지가 나타납니다. 여기서는 ‘허용 후 키 저장’을 선택하고 진행합니다.</p><p>(만약 암호를 물어본다면, <code>vagrant</code>를 입력합니다.)</p><figure><img src="https://wishket.com/media/news/3284/image24.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>cp-k8s</code>에 접속한 다음, <code>k get nodes</code>, 그리고 <code>k get po -A</code> 명령어를 입력해 배포가 정상적으로 이뤄졌는지 확인합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">k get nodes</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAME    STATUS   ROLES          AGE      VERSION</span></span>
<span class="line"><span class="token comment"># cp-k8s  Ready    control-plane  6m1s     v1.33.2</span></span>
<span class="line"><span class="token comment"># w1-k8s  Ready                   4m42s    v1.33.2</span></span>
<span class="line"><span class="token comment"># w2-k8s  Ready                   3m49s    v1.33.2</span></span>
<span class="line"><span class="token comment"># w3-k8s  Ready                   2m55s    v1.33.2</span></span>
<span class="line"></span>
<span class="line">k get PO <span class="token parameter variable">-A</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAMESPACE        NAME                                       READY     STATUS        RESTARTS         AGE</span></span>
<span class="line"><span class="token comment"># default          nfs—c1ient—provisioner—6ff67fc8f4—tkbf2    1/1       Running       0                6m55s</span></span>
<span class="line"><span class="token comment"># ingress—ngxnx    ingress—nginx—admission—create—vjwqq       0/1       Comp1eted     0                6m55s</span></span>
<span class="line"><span class="token comment"># ingress—ngxnx    ingress—nginx—admission—patch—cdksq        0/1       Comp1eted     0                6m55s</span></span>
<span class="line"><span class="token comment"># ingress—ngxnx    ingress—nginx—controller—6bd79f4d5—9b2bg   1/1       Running       0                6m55s</span></span>
<span class="line"><span class="token comment"># kube—system      calico—kube—controllers—7c5bbf5ff4—rd6mf   1/1       Running       0                6m55s</span></span>
<span class="line"><span class="token comment"># kube—system      calico—node—cz4wv                          1/1       Running       0                5m15s</span></span>
<span class="line"><span class="token comment"># kube—system      calico—node—ppkbf                          1/1       Running       0                6m56s</span></span>
<span class="line"><span class="token comment"># kube—system      calico—node—rfq6n                          1/1       Running       0                6m9s</span></span>
<span class="line"><span class="token comment"># kube—system      calico—node—ttwck                          1/1       Running       0                4m22s</span></span>
<span class="line"><span class="token comment"># kube—system      coredns—674b8bbfcf—5h852                   1/1       Running       0                6m55s</span></span>
<span class="line"><span class="token comment"># kube—system      coredns—674b8bbfcf—nwpnt                   1/1       Running       0                6m55s</span></span>
<span class="line"><span class="token comment"># kube—system      etcd—cp—k8s                                1/1       Running       1 (7m21s ago)    7m26s</span></span>
<span class="line"><span class="token comment"># kube—system      kube—apiserver—cp—k8s                      1/1       Running       1 (7m20s ago)    7m26s</span></span>
<span class="line"><span class="token comment"># kube—system      kube—contr011er—manager—cp—k8s             1/1       Running       1 (7m20s ago)    7m26s</span></span>
<span class="line"><span class="token comment"># kube—system      kube—proxy—91kd8                           1/1       Running       0                5m15s</span></span>
<span class="line"><span class="token comment"># kube—system      kube—proxy—cq857                           1/1       Running       0                4m22s</span></span>
<span class="line"><span class="token comment"># kube—system      kube—proxy—kptpk                           1/1       Running       0                6m56s</span></span>
<span class="line"><span class="token comment"># kube—system      kube—proxy—wwhbk                           1/1       Running       0                6m9s</span></span>
<span class="line"><span class="token comment"># kube—system      kube—schedu1er—cp—k8s                      1/1       Running       1 (7m20s ago)    7m26s</span></span>
<span class="line"><span class="token comment"># kube—system      metrics—server—566c54b84f—6kg84            1/1       Running       0                6m55s</span></span>
<span class="line"><span class="token comment"># metallb—system   contr011er—bb5f47665—tbgvq                 1/1       Running       0                6m55s</span></span>
<span class="line"><span class="token comment"># metallb—system   speaker—gbcsw                              1/1       Running       0                6m44s</span></span>
<span class="line"><span class="token comment"># metallb—system   speaker—sjks8                              1/1       Running       0                5m48s</span></span>
<span class="line"><span class="token comment"># metallb—system   speaker—sxwj5                              1/1       Running       0                4m28s</span></span>
<span class="line"><span class="token comment"># metallb—system   speaker—xkj9n                              1/1       Running       0                4m4s</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11)),i(" ![](https://wishket.com/media/news/3284/9.png) "),n[71]||(n[71]=l(`<p>또한, 로드밸런서 생성을 지원하는 <strong>MetalLB</strong>의 IP Pool 동작 여부도 확인합니다. <code>k get ipaddresspools.metallb.io -A</code> 명령어를 입력하고, 아래와 같은 응답이 나오는지 확인합니다.</p><p>다만, 이 내용은 접속과 함께 바로 나타나지는 않습니다. <code>cp-k8s</code> 배포가 끝나고 약 10분이 지난 다음 동작하도록 설계되어 있으니, 조금 더 기다려 볼 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">k get ipaddresspools.metallb.io <span class="token parameter variable">-A</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAMESPACE        NAME           AUTO ASSIGN    AVOID BUGGY IPS    ADDRESSES</span></span>
<span class="line"><span class="token comment"># metallb-system   k8s-svc-pool   true           false              [&quot;192.168.1.11-192.168.1.99&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),i(" ![](https://wishket.com/media/news/3284/10.png) "),n[72]||(n[72]=l(`<p>이제 <code>arm64</code> 환경에서 클러스터가 정상 동작하는지 검증하기 위해, <code>sysnet4admin/chk-info</code> 컨테이너를 디플로이먼트(Deployment)로 배포합니다. 배포된 디플로이먼트는 로드밸런서 서비스로 노출시킵니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">k create deploy chk-info <span class="token parameter variable">--image</span><span class="token operator">=</span>sysnet4admin/chk-info</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># deployment.apps/chk-info created</span></span>
<span class="line">k expose deploy chk-info <span class="token parameter variable">--type</span><span class="token operator">=</span>LoadBa1ancer <span class="token parameter variable">--port</span> <span class="token number">80</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># service/chk-info exposed</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),i(" ![](https://wishket.com/media/news/3284/11.png) "),n[73]||(n[73]=l(`<p>배포가 완료되면, 파드(Pod)와 서비스 상태를 확인합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">k get po,svc</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># NAME                                         READY   STATUS    RESTARTS   AGE</span></span>
<span class="line"><span class="token comment"># pod/chk-info-5df5b8ff74-96jzn                1/1     Running   0          26s</span></span>
<span class="line"><span class="token comment"># pod/nfs-c1ient-provisioner-6ff67fc8f4-tkbf2  1/1     Running   0          10m</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAME                 TYPE           CLUSTER-IP     EXTERNAL-IP    PORT(S)        AGE</span></span>
<span class="line"><span class="token comment"># service/chk-info     LoadBalancer   10.104.129.5   192.168.1.11   80:31189/TCP   9s</span></span>
<span class="line"><span class="token comment"># service/kubernetes   ClusterIP      10.96.0.1                     443/TCP        13m</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),i(" ![](https://wishket.com/media/news/3284/12.png) "),n[74]||(n[74]=s("p",null,"마지막으로, 웹 브라우저를 열고, 부여된 로드밸런서 IP(예: 192.168.1.11)를 입력합니다. 아래와 같은 화면이 나오면 성공입니다.",-1)),n[75]||(n[75]=s("figure",null,[s("img",{src:"https://wishket.com/media/news/3284/image18.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),n[76]||(n[76]=s("p",null,"이제 여러분도 arm64 환경에서 동작하는 쿠버네티스 클러스터를 가지게 되었습니다. 축하드립니다.",-1)),n[77]||(n[77]=s("hr",null,null,-1)),n[78]||(n[78]=s("h2",{id:"추가로-시도해-볼만한-작업-헤드램프-설치",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#추가로-시도해-볼만한-작업-헤드램프-설치"},[s("span",null,"추가로 시도해 볼만한 작업: 헤드램프 설치")])],-1)),s("p",null,[n[43]||(n[43]=a("이렇게 구축한 나만의 쿠버네티스 클러스터 환경에서, 쿠버네티스를 더 손쉽게 사용할 목적으로 만들어지는 ")),s("a",M,[n[40]||(n[40]=a("헤드램프(Headlamp) (")),e(t,{icon:"iconfont icon-github"}),n[41]||(n[41]=s("code",null,"kubernetes-sigs/headlamp",-1)),n[42]||(n[42]=a(")"))]),n[44]||(n[44]=a("라는 프로젝트를 설치해 보겠습니다."))]),s("figure",null,[n[52]||(n[52]=s("img",{src:"https://wishket.com/media/news/3284/image18_bAsg1Zw.png",alt:'헤드램프 메인테이너 Joaquim Rocha (<VPIcon icon="fa-brands fa-linkedin"/>)와 필자 (<VPIcon icon="fa-brands fa-linkedin"/>``hoonjo`)',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[50]||(n[50]=a("헤드램프 메인테이너 ")),s("a",T,[n[45]||(n[45]=a("Joaquim Rocha (")),e(t,{icon:"fa-brands fa-linkedin"}),n[46]||(n[46]=s("code",null,"joaquimrocha",-1)),n[47]||(n[47]=a(")"))]),n[51]||(n[51]=a("와 ")),s("a",z,[n[48]||(n[48]=a("필자 (")),e(t,{icon:"fa-brands fa-linkedin"}),n[49]||(n[49]=a("``hoonjo`)"))])])]),n[79]||(n[79]=l(`<p>실습할 수 있는 클러스터를 이미 구성했으므로, 헤드램프를 설치해 현재 클러스터 상태를 확인해 보겠습니다. 헤드램프를 설치하려면, <strong>B/B.011</strong>로 이동해야 합니다. 이어 <code>brew install</code> 명령어로 헤드램프 버전 <strong>0.31.1</strong>을 설치합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/B.011/</span>
<span class="line">brew <span class="token function">install</span> <span class="token parameter variable">--cask</span> ./headlamp-v0.31.1/headlamp.rb</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># ==&gt; Auto-updating Homebrew.</span></span>
<span class="line"><span class="token comment"># Adjust how often this is run with HOMEBREW_AUTO UPDATE_SECS or disable with HOMEBREW NO_AUTO UPDATE. Hide these hints with HOMEBREW NO ENV HINTS (see \`man brew\`).</span></span>
<span class="line"><span class="token comment"># ==&gt; Auto-updated Homebrew!</span></span>
<span class="line"><span class="token comment"># Updated 1 tap (homebrew/cask).</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># You have 54 outdated formulae and 2 outdated casks installed.</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># ==&gt; Downloading https://github.com/headlamp-k8s/headlamp/releases/download/v0.31.1/Headlamp-0.31.1-mac-arm64.dmg</span></span>
<span class="line"><span class="token comment"># ==&gt; Downloading from https://objects.githubusercontent.com/github-production-release-asset-2e65be/220546758/8f3e9374-96de-46d6-a7</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># ==&gt; lnstalling Cask headlamp</span></span>
<span class="line"><span class="token comment"># ==&gt; Moving App &#39;Headlamp.app&#39; to &#39;/App1ications/Headlamp.app&#39;</span></span>
<span class="line"><span class="token comment"># 鬱 headlamp was successfully installed! </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),i(" ![](https://wishket.com/media/news/3284/13.png) "),s("p",null,[n[53]||(n[53]=a("헤드램프를 실행하기 전에는, 로컬 환경의 쿠버네티스 클러스터 정보를 가져와야 합니다. ")),e(t,{icon:"iconfont icon-shell"}),n[54]||(n[54]=s("code",null,"flatted_kubeconfig.sh",-1)),n[55]||(n[55]=a(" 스크립트에 권한을 부여하고 실행하겠습니다."))]),n[80]||(n[80]=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">chmod</span> +ⅹ flatted kubeconfig.sh</span>
<span class="line"><span class="token function">sudo</span> ./flatted kubeconfig.sh</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># SuccessfuIIy flatten kubeconfig</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i(" ![](https://wishket.com/media/news/3284/14.png) "),n[81]||(n[81]=l('<p>헤드램프를 실행하고, 표시되는 화면에서 <code>kubernetes-admin@kubernetes</code>를 클릭합니다.</p><figure><img src="https://wishket.com/media/news/3284/image28.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>만약 “앱이 손상되어 열 수 없다”는 메시지가 뜨는 경우, <code>sudo xattr -rd com.apple.quarantine /Applications/Headlamp.app</code> 명령어로 실행 권한 문제를 해결합니다.</p><p>현재 상태를 확인하려면, 아래 화면에서 왼쪽 Map 메뉴를 누릅니다.</p><figure><img src="https://wishket.com/media/news/3284/image4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이동으로 나타나는 화면에서 DaemonSet을 누릅니다.</p><figure><img src="https://wishket.com/media/news/3284/image1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>마지막으로 GUI에서 현재 배포된 DaemonSet의 구성을 확인합니다.</p><figure><img src="https://wishket.com/media/news/3284/image19.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>이번 글에서는 베이그런트(Vagrant)와 버추얼박스(VirtualBox)를 활용해 <strong>arm64 기반의 쿠버네티스 클러스터</strong>를 손쉽게 구축해 보았습니다. 이렇게 구성한 전용 클러스터 환경에서 필요한 애플리케이션을 배포하고, 발생하는 다양한 문제를 직접 해결하는 과정은 실무 역량을 키우는 데 큰 도움을 줍니다.</p><p>구성한 쿠버네티스 클러스터를 기반으로 목적에 맞는 다양한 실습을 진행해 볼 수 있습니다. 목적에 맞게 자유롭게 사용하며 쿠버네티스 실력 향상에 도움이 되기를 바랍니다.</p>',13)),i(" toDO: add ARTICLE CARD "),e(c,m(r({title:"새로 산 맥북으로 “더 쉽게” 쿠버네티스 클러스터 구성하기",desc:"x86-64 환경만 지원하던 버추얼박스(VirtualBox)가 최근 arm64 기반 맥북을 제대로 지원하기 시작했습니다. 덕분에 현재는 VM웨어 퓨전 대신 버추얼박스로 쿠버네티스 클러스터를 구성할 수 있게 되었습니다. 이를 통해 기존의 불편함이 대부분 해소되었으며, 윈도와 맥OS 기반 환경 모두 동일한 코드로 배포와 실행을 할 수 있어졌습니다. 따라서 이번 글에서는 버추얼박스가 arm64를 지원하기까지의 과정을 살펴본 다음, 이를 활용한 쿠버네티스 클러스터 구성 방법을 소개하겠습니다.",link:"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3284.html",logo:"https://yozm.wishket.com/fav1con.ico",background:"rgba(84,7,224,0.2)"})),null,16)])}const O=b(w,[["render",B]]),C=JSON.parse('{"path":"/yozm.wishket.com/3284.html","title":"새로 산 맥북으로 “더 쉽게” 쿠버네티스 클러스터 구성하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"새로 산 맥북으로 “더 쉽게” 쿠버네티스 클러스터 구성하기","description":"Article(s) > 새로 산 맥북으로 “더 쉽게” 쿠버네티스 클러스터 구성하기","icon":"iconfont icon-k8s","category":["DevOps","Kubernetes","macOS","Virtualbox","Vagrant","Article(s)"],"tag":["blog","yozm.wishket.com","devops","k8s","kubernetes","macos","virtualbox","vagrant"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"새로 산 맥북으로 “더 쉽게” 쿠버네티스 클러스터 구성하기\\",\\"image\\":[\\"https://wishket.com/media/news/3284/image27.png\\",\\"https://wishket.com/media/news/3284/image20.png\\",\\"https://apple.stackexchange.com/questions/422565/does-virtualbox-run-on-apple-silicon\\",\\"https://osxdaily.com/2022/10/22/you-can-now-run-virtualbox-on-apple-silicon-m1-m2/\\",\\"https://download.virtualbox.org/virtualbox/7.0.0/VirtualBox-7.0.0_BETA4-153978-macOSArm64.dmg\\",\\"https://wishket.com/media/news/3284/image3.png\\",\\"https://wishket.com/media/news/3284/image23.png\\",\\"https://wishket.com/media/news/3284/1.png\\",\\"https://wishket.com/media/news/3284/2.png\\",\\"https://wishket.com/media/news/3284/3.png\\",\\"https://wishket.com/media/news/3284/4.png\\",\\"https://wishket.com/media/news/3284/5.png\\",\\"https://wishket.com/media/news/3284/6.png\\",\\"https://wishket.com/media/news/3284/image20.png\\",\\"https://wishket.com/media/news/3284/7.png\\",\\"https://wishket.com/media/news/3284/8.png\\",\\"https://wishket.com/media/news/3284/image6.png\\",\\"https://wishket.com/media/news/3284/image24.png\\",\\"https://wishket.com/media/news/3284/9.png\\",\\"https://wishket.com/media/news/3284/10.png\\",\\"https://wishket.com/media/news/3284/11.png\\",\\"https://wishket.com/media/news/3284/12.png\\",\\"https://wishket.com/media/news/3284/image18.png\\",\\"https://linkedin.com/in/joaquimrocha/\\",\\"https://wishket.com/media/news/3284/13.png\\",\\"https://wishket.com/media/news/3284/14.png\\",\\"https://wishket.com/media/news/3284/image28.jpg\\",\\"https://wishket.com/media/news/3284/image4.png\\",\\"https://wishket.com/media/news/3284/image1.png\\",\\"https://wishket.com/media/news/3284/image19.png\\"],\\"datePublished\\":\\"2025-08-11T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"조훈(Hoon Jo)\\",\\"url\\":\\"https://yozm.wishket.com/magazine/@pagaia/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3284.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"새로 산 맥북으로 “더 쉽게” 쿠버네티스 클러스터 구성하기"}],["meta",{"property":"og:description","content":"Article(s) > 새로 산 맥북으로 “더 쉽게” 쿠버네티스 클러스터 구성하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/3284/image20.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/3284/image20.png"}],["meta",{"name":"twitter:image:alt","content":"새로 산 맥북으로 “더 쉽게” 쿠버네티스 클러스터 구성하기"}],["meta",{"property":"article:author","content":"조훈(Hoon Jo)"}],["meta",{"property":"article:tag","content":"vagrant"}],["meta",{"property":"article:tag","content":"virtualbox"}],["meta",{"property":"article:tag","content":"macos"}],["meta",{"property":"article:tag","content":"kubernetes"}],["meta",{"property":"article:tag","content":"k8s"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-08-11T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 새로 산 맥북으로 “더 쉽게” 쿠버네티스 클러스터 구성하기"},{"property":"og:description","content":"새로 산 맥북으로 “더 쉽게” 쿠버네티스 클러스터 구성하기"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3284.html"}]],"prev":"/devops/k8s/articles/README.md","date":"2025-08-11T00:00:00.000Z","isOriginal":false,"author":[{"name":"조훈(Hoon Jo)","url":"https://yozm.wishket.com/magazine/@pagaia/"}],"cover":"https://yozm.wishket.com/media/news/3284/image20.png"},"git":{},"readingTime":{"minutes":5.54,"words":1661},"filePathRelative":"yozm.wishket.com/3284.md","copyright":{"author":"조훈(Hoon Jo)"}}');export{O as comp,C as data};
