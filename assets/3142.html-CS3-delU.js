import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as e,b as i,a as h,t as v,n as r,g as d,w as o,e as a,r as p,o as b}from"./app-BVguHYKu.js";const f={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},j={class:"table-of-contents"};function x(u,n){const l=p("VPCard"),t=p("router-link"),m=p("SiteInfo"),c=p("VPIcon");return b(),k("div",null,[s("h1",y,[s("a",w,[s("span",null,v(u.$frontmatter.title)+" 관련",1)])]),e(l,r(d({title:"Node.js > Article(s)",desc:"Article(s)",link:"/programming/js-node/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",j,[s("ul",null,[s("li",null,[e(t,{to:"#컴포넌트와-모듈"},{default:o(()=>n[0]||(n[0]=[a("컴포넌트와 모듈")])),_:1,__:[0]}),s("ul",null,[s("li",null,[e(t,{to:"#_1-컴포넌트란"},{default:o(()=>n[1]||(n[1]=[a("1. 컴포넌트란?")])),_:1,__:[1]})]),s("li",null,[e(t,{to:"#_2-모듈이란"},{default:o(()=>n[2]||(n[2]=[a("2. 모듈이란?")])),_:1,__:[2]})]),s("li",null,[e(t,{to:"#_3-컴포넌트와-모듈의-차이점"},{default:o(()=>n[3]||(n[3]=[a("3. 컴포넌트와 모듈의 차이점")])),_:1,__:[3]})])])]),s("li",null,[e(t,{to:"#모듈-시스템-알아보기"},{default:o(()=>n[4]||(n[4]=[a("모듈 시스템 알아보기")])),_:1,__:[4]}),s("ul",null,[s("li",null,[e(t,{to:"#_1-esm"},{default:o(()=>n[5]||(n[5]=[a("1. ESM")])),_:1,__:[5]})]),s("li",null,[e(t,{to:"#_2-esm-사용-방법"},{default:o(()=>n[6]||(n[6]=[a("2. ESM 사용 방법")])),_:1,__:[6]})]),s("li",null,[e(t,{to:"#_3-모듈-스코프"},{default:o(()=>n[7]||(n[7]=[a("3. 모듈 스코프")])),_:1,__:[7]})])])]),s("li",null,[e(t,{to:"#마치며"},{default:o(()=>n[8]||(n[8]=[a("마치며")])),_:1,__:[8]})])])]),n[21]||(n[21]=s("hr",null,null,-1)),e(m,{name:"비슷해 보이지만 다른 컴포넌트와 모듈, 개념 정리",desc:"프로그래밍을 공부하다 보면 종종 비슷해 보이는 용어들 때문에 헷갈리는 경우가 많습니다. 특히 웹 개발을 하면서 자주 만나는 용어가 바로 컴포넌트(Component)와 모듈(Module)이죠. 이 두 용어는 자주 혼동되곤 하는데요, 사실 명확히 구분하면 개발 과정에서 정말 많은 도움이 되는 개념입니다. 오늘은 이 두 용어를 명확히 구분하고, 더 나아가 모듈 시스템까지 자연스럽게 연결해 자세히 알아보겠습니다.",url:"https://yozm.wishket.com/magazine/detail/3142/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/3142/20250410_img1.png"}),n[22]||(n[22]=i(`<p>프로그래밍을 공부하다 보면 종종 비슷해 보이는 용어들 때문에 헷갈리는 경우가 많습니다. 특히 웹 개발을 하면서 자주 만나는 용어가 바로 컴포넌트(Component)와 모듈(Module)이죠. 이 두 용어는 자주 혼동되곤 하는데요, 사실 명확히 구분하면 개발 과정에서 정말 많은 도움이 되는 개념입니다.</p><p>오늘은 이 두 용어를 명확히 구분하고, 더 나아가 모듈 시스템까지 자연스럽게 연결해 자세히 알아보겠습니다. 이번 글을 끝까지 읽고 나면, 컴포넌트와 모듈에 대해 더욱 명확하게 이해할 수 있을 겁니다.</p><hr><h2 id="컴포넌트와-모듈" tabindex="-1"><a class="header-anchor" href="#컴포넌트와-모듈"><span>컴포넌트와 모듈</span></a></h2><p>먼저 컴포넌트와 모듈, 이 두 가지의 개념에 대해 명확하게 알아보겠습니다.</p><h3 id="_1-컴포넌트란" tabindex="-1"><a class="header-anchor" href="#_1-컴포넌트란"><span>1. 컴포넌트란?</span></a></h3><p>컴포넌트(Component)는 쉽게 말하면 소프트웨어를 이루는 독립적인 구성 요소입니다. 마치 레고 블록처럼, 각각의 컴포넌트는 다른 컴포넌트와 연결되어 하나의 큰 시스템을 만들어냅니다.</p><p>컴포넌트는 주로 실제 프로그램이 실행되는 런타임(runtime)에 독립적으로 실행되고 배포될 수 있는 특징을 가지고 있습니다. 다시 말해, 컴포넌트는 실제로 프로그램이 동작할 때 독립적으로 존재하고 서로 상호작용하는 덩어리라고 생각하면 좋습니다.</p><p>예를 들어볼까요? 우리가 흔히 보는 웹사이트 화면에 있는 버튼, 로그인 폼, 내비게이션 바와 같은 UI 요소들을 바로 UI 컴포넌트라고 할 수 있습니다. 그렇다고 컴포넌트가 꼭 UI에만 국한되는 것은 아닌데요, 로그인 인증 서비스나 결제 서비스처럼 눈에 보이지는 않지만, 독립된 기능을 제공하는 것도 &#39;서비스 컴포넌트&#39;로 구분할 수 있습니다.</p><figure><img src="https://wishket.com/media/news/3142/20250410_img1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>컴포넌트는 꼭 버튼이나 폼과 같은 단순한 UI 요소뿐만 아니라, 상태 관리나 데이터 처리와 같은 논리적인 기능도 독립적인 컴포넌트로 다룰 수 있습니다. 예를 들어, 데이터를 받아오는 기능을 담당하는 데이터 요청 컴포넌트나, 로그인 상태를 관리하는 인증 컴포넌트, 테마다 언어와 같은 사용자 환경설정을 관리하는 컴포넌트 등 UI 뒤에서 보이지 않지만, 실제 동작과 로직을 책임지는 요소들도 모두 프론트엔드의 중요한 컴포넌트라고 할 수 있습니다.</p><p>이처럼 컴포넌트는 반드시 눈에 보이는 UI만을 의미하지 않고, 독립적인 역할을 가진 기능 단위로 확장될 수 있으며, 이러한 특성 덕분에 코드의 재사용성과 유지보수성을 크게 향상시킵니다.</p><h3 id="_2-모듈이란" tabindex="-1"><a class="header-anchor" href="#_2-모듈이란"><span>2. 모듈이란?</span></a></h3><p>모듈(Module)은 소프트웨어의 코드를 기능이나 로직 단위로 나누어 정리한 코드 묶음을 의미합니다. 쉽게 말해, 코드를 작성하다 보면 여러 기능이나 로직을 갖춘 함수나 클래스들이 많아지는데, 이것들을 비슷한 성격이나 역할을 기준으로 묶어서 관리할 때 사용하는 개념이 바로 모듈입니다.</p><p>예를 들어, 웹사이트에서 자주 사용하는 유효성 검사 기능, 날짜나 시간을 처리하는 기능, 혹은 서버와의 API 통신 기능 등은 프로젝트 전반에서 반복해서 사용될 수 있습니다. 이렇게 재사용이 자주 되는 코드를 모듈로 분리하면, 언제든지 편하게 불러와서 사용할 수 있고 코드의 중복을 크게 줄일 수 있죠.</p><p>다음과 같이 이메일 유효성을 검사하는 기능을 모듈로 작성해 볼 수 있습니다.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="validation.js"><span>validation.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 모듈 예시</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isEmailValid</span><span class="token punctuation">(</span><span class="token parameter">email</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\S+@\\S+.\\S+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>모듈의 개념은 프로그래밍 언어마다 조금씩 다릅니다. 자바스크립트의 ESM(ECMAScript Modules), Node.js의 CommonJS, 파이썬의 패키지 등 각 언어의 특성에 맞게 다르게 표현되지만, 기본적인 목적(재사용성과 코드 관리)은 동일합니다.</p><h3 id="_3-컴포넌트와-모듈의-차이점" tabindex="-1"><a class="header-anchor" href="#_3-컴포넌트와-모듈의-차이점"><span>3. 컴포넌트와 모듈의 차이점</span></a></h3><p>컴포넌트와 모듈은 각각의 특징과 역할 때문에 쉽게 헷갈릴 수 있지만, 명확히 다른 개념입니다. 쉽게 비유하자면, 모듈은 마치 자동차의 엔진, 타이어, 나사와 같은 부품과 같다고 할 수 있습니다. 각 부품은 기능별로 나누어져 있으며, 필요할 때 조립해서 사용할 수 있죠.</p><figure><img src="https://wishket.com/media/news/3142/20250410_img2.png" alt="출처: ChatGPT 제작" tabindex="0" loading="lazy"><figcaption>출처: ChatGPT 제작</figcaption></figure><p>컴포넌트는 이렇게 나누어진 부품들(모듈)을 사용해서 만든 하나의 독립적인 완성품과 같습니다. 즉, 자동차 전체나 자동차 내비게이션처럼 독립적으로 동작하고, 완결된 기능을 가진 요소입니다.</p><p>또한 크기나 포함 관계도 상대적인데요, 일반적으로 컴포넌트가 모듈보다 큰 단위로 구성되는 경우가 많지만, 때로는 하나의 모듈이 여러 컴포넌트를 포함하기도 하고, 하나의 컴포넌트가 여러 개의 모듈로 나누어 구성될 수도 있습니다. 즉, 상황에 따라 둘의 포함 관계나 크기는 달라질 수 있다는 점을 꼭 주의해야 합니다.</p><hr><h2 id="모듈-시스템-알아보기" tabindex="-1"><a class="header-anchor" href="#모듈-시스템-알아보기"><span>모듈 시스템 알아보기</span></a></h2><p>자바스크립트로 프로젝트를 만들다 보면, 처음에는 간단하게 시작했던 코드가 점점 길어지고, 여러 기능이 뒤섞이면서 복잡해지는 경험을 하게 됩니다. 기능이 많아질수록 유지보수는 어려워지고, 중복된 코드가 늘어나며, 협업 시 충돌이나 혼란도 발생하기 쉬워지죠.</p><p>이럴 때 우리가 앞서 배운 컴포넌트와 모듈 개념이 큰 도움이 됩니다. 컴포넌트를 활용하면 UI나 기능 단위를 독립적으로 나누고 재사용할 수 있습니다. 그리고 모듈을 사용하면 자주 사용하는 함수나 로직을 기능별로 분리하고, 필요한 곳에서만 불러와 사용할 수 있어 코드의 중복을 줄이고 관리가 쉬워집니다.</p><p>이렇게 코드의 구조를 기능 단위로 명확히 나누고, 필요한 부분만 가져와 사용할 수 있도록 도와주는 체계가 바로 모듈 시스템입니다. 모듈 시스템은 단순한 코드 분할을 넘어서, 코드의 재사용, 의존성 관리, 스코프 보호, 그리고 성능 최적화까지 가능하게 만드는 중요한 구조입니다. 이제부터 자바스크립트에서 사용되는 대표적인 모듈 시스템인 ESM(ECMA Script Modules)에 대해 본격적으로 살펴보겠습니다.</p><h3 id="_1-esm" tabindex="-1"><a class="header-anchor" href="#_1-esm"><span>1. ESM</span></a></h3><p>ESM은 자바스크립트에서 공식으로 채택된 모듈 시스템 표준입니다. import와 export 문법을 사용해 모듈을 정의하고 불러올 수 있게 해줍니다. ESM 이전에는 CommonJS나 AMD와 같은 모듈 시스템이 사용되었지만, 현재는 ESM이 브라우저와 Node.js 모두에서 지원되며, 대부분의 최신 프로젝트에서 기본으로 채택하고 있습니다.</p><p>ESM의 가장 큰 장점 중 하나는 정적인 구조를 가진다는 점입니다. 이는 자바스크립트 엔진이나 번들러가 코드를 실행하기 전에 모듈 간의 의존 관계를 미리 파악할 수 있다는 의미인데요. 이 구조 덕분에 모듈을 분석하고 최적화하는 작업이 효율적으로 이루어지며, 개발 중 오류를 미리 찾거나 불필요한 코드 로딩을 줄이는 데 유리합니다.</p><p>또한 이 정적인 구조 덕분에 가능한 기능이 바로 트리 쉐이킹(Tree Shaking)입니다. 트리 쉐이킹은 실제로 사용되지 않는 함수나 모듈을 번들에서 자동으로 제거해 주는 기능으로, 프로젝트의 최종 번들 크기를 줄이고 앱 성능을 개선할 수 있습니다. 예를 들어, 어떤 유틸리티 파일에서 여러 함수를 export 했더라도, 그중 일부만 사용하면 나머지는 번들에 포함되지 않습니다.</p><p>이뿐만 아니라 ESM은 기본적으로 모듈 스코프(module scope)를 갖고, 전역 스코프를 오염시키지 않으며, 필요에 따라 동적 import를 통해 지연 로딩(lazy loading)도 지원합니다. 이러한 유연성 덕분에, ESM은 정적 분석이 용이한 구조임에도 불구하고, 런타임 중 필요한 모듈을 불러오는 유연한 방식도 함께 제공하는 매우 강력한 시스템입니다.</p><p>이제 실제로 ESM을 어떻게 사용하는지 구체적인 예제와 함께 알아보겠습니다.</p><h3 id="_2-esm-사용-방법" tabindex="-1"><a class="header-anchor" href="#_2-esm-사용-방법"><span>2. ESM 사용 방법</span></a></h3><p>ESM을 사용하는 방식은 매우 간단하면서도 직관적입니다. 기본적으로 <code>export</code> 키워드를 사용해 모듈에서 특정 변수, 함수, 클래스 등을 외부로 내보내고, import 키워드를 사용해 다른 파일에서 이를 불러와 사용할 수 있습니다.</p><p>예를 들어, 다음과 같이 간단한 수학 유틸리티 모듈을 만든다고 가정해 봅시다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38)),s("p",null,[n[9]||(n[9]=a("이 파일에서는 ")),n[10]||(n[10]=s("code",null,"add",-1)),n[11]||(n[11]=a(" 함수와 PI 상수를 ")),n[12]||(n[12]=s("code",null,"export",-1)),n[13]||(n[13]=a("하여, 외부에서 이 두 값을 사용할 수 있도록 허용하고 있습니다. 이렇게 모듈을 작성했다면, 이제 다른 파일에서 이 모듈을 사용할 수 있게 됩니다. 예를 들어, ")),e(c,{icon:"fa-brands fa-js"}),n[14]||(n[14]=s("code",null,"app.js",-1)),n[15]||(n[15]=a(" 파일에서는 다음과 같이 import를 사용해 add 함수와 PI값을 불러올 수 있습니다."))]),n[23]||(n[23]=i(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> <span class="token constant">PI</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./mathUtils.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.14159</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이처럼 중괄호 <code>{}</code> 안에 export된 이름을 정확하게 지정해 주면, 해당 기능을 사용할 수 있습니다. 이 방식을 명명된(named) <code>import</code>/<code>export</code>라고 합니다.</p><p>또 다른 방식으로는 기본(<code>default</code>) <code>export</code>를 사용할 수 있습니다. 이는 한 모듈에서 하나의 주된 기능만을 외부에 노출할 때 사용되며, 파일을 불러오는 쪽에서는 이름을 자유롭게 정할 수 있는 특징이 있습니다.</p>`,3)),s("p",null,[n[16]||(n[16]=a("예를 들어, ")),e(c,{icon:"fa-brands fa-js"}),n[17]||(n[17]=s("code",null,"logger.js",-1)),n[18]||(n[18]=a("라는 파일에서 기본 ")),n[19]||(n[19]=s("code",null,"export",-1)),n[20]||(n[20]=a("를 사용해 함수를 내보낸다고 해봅시다."))]),n[24]||(n[24]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="logger.js"><span>logger.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Log:&#39;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>이 함수를 다른 파일에서 불러올 때는 다음과 같이 사용할 수 있습니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> log <span class="token keyword">from</span> <span class="token string">&#39;./logger.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Log: Hello!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이 경우 <code>log</code>는 파일 내부의 함수 이름과 일치할 필요는 없고, <code>import</code> 할 때 자유롭게 이름을 지정할 수 있다는 점이 차이점입니다.</p><p>ESM은 이처럼 간단한 문법으로도 강력한 코드 재사용성과 유지보수성을 제공하며, 현재 대부분의 프론트엔드 프로젝트나 Node.js 환경에서도 표준으로 사용되고 있습니다.</p><h3 id="_3-모듈-스코프" tabindex="-1"><a class="header-anchor" href="#_3-모듈-스코프"><span>3. 모듈 스코프</span></a></h3><p>ESM의 여러 특징 중 하나인 &#39;모듈 스코프&#39;는 매우 중요한 특징이라고 할 수 있습니다. 이는 각 모듈이 고유한 스코프를 가지고, 내부에서 선언된 변수나 함수는 해당 모듈 외부에서는 접근할 수 없도록 제한된다는 의미입니다.</p><p>예를 들어, 어떤 모듈 안에서 <code>const token = &#39;secret&#39;;</code> 이라고 선언했다면, 이 <code>token</code>이라는 변수는 해당 모듈 안에서만 사용할 수 있고, 외부 파일에서는 보이지 않게 됩니다. 외부에서 이 값을 사용하려면, 반드시 export를 명시해야 합니다. 이는 모듈의 캡슐화를 보장하며 전역 변수 충돌을 방지하고, 코드의 안정성과 예측 가능성을 높여줍니다.</p><figure><img src="https://wishket.com/media/news/3142/20250410_img3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>또한 이런 스코프 구조 덕분에 여러 개발자가 협업하는 상황에서도 변수 이름이 겹쳐도 문제가 발생하지 않고, 각자의 파일 안에서만 영향을 주는 코드를 작성할 수 있습니다.</p><p>그뿐만 아니라 모듈은 파일 하나당 하나의 독립적인 스코프를 가지므로, 해당 파일에서 <code>import</code>한 항목들만 사용할 수 있고, 다른 파일에서 선언된 코드들은 자동으로 공유되지 않습니다. 즉, 모듈은 항상 명시적으로 가져오고(<code>export</code>/<code>import</code>), 명시적으로 내보내는 구조를 따릅니다.</p><p>이러한 방식은 코드의 흐름을 더욱 명확하게 만들어주고, 유지보수 시 어떤 값이 어디서 왔는지를 빠르게 파악할 수 있게 해줍니다. 또한 프로젝트의 규모가 커질수록 더욱 강력한 장점으로 작용합니다.</p><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>자바스크립트의 모듈 시스템은 단순히 코드를 여러 파일로 나누는 개념을 넘어, 코드의 구조를 더 체계적으로 관리하고, 재사용성과 유지보수성을 극대화해 줍니다. 또 불필요한 코드 제거를 통한 최적화까지 가능하게 만드는 핵심적인 설계입니다.</p><p>특히 &#39;ESM&#39;은 정적 구조, 트리 쉐이킹, 모듈 스코프 등 강력한 기능을 갖춘 현대 자바스크립트 개발의 표준 도구로 자리 잡고 있고요. 앞으로 규모가 큰 애플리케이션을 개발하거나 협업을 진행할수록, 모듈 시스템을 잘 이해하고 사용하는 것은 더욱 중요해질 것입니다. 이번 기회에 모듈 시스템의 핵심 개념과 사용법을 정확하게 이해하고, 코드 구조를 더 견고하고 깔끔하게 만들어보세요.</p>`,16)),h(" TODO: add ARTICLE CARD "),e(l,r(d({title:"비슷해 보이지만 다른 컴포넌트와 모듈, 개념 정리",desc:"프로그래밍을 공부하다 보면 종종 비슷해 보이는 용어들 때문에 헷갈리는 경우가 많습니다. 특히 웹 개발을 하면서 자주 만나는 용어가 바로 컴포넌트(Component)와 모듈(Module)이죠. 이 두 용어는 자주 혼동되곤 하는데요, 사실 명확히 구분하면 개발 과정에서 정말 많은 도움이 되는 개념입니다. 오늘은 이 두 용어를 명확히 구분하고, 더 나아가 모듈 시스템까지 자연스럽게 연결해 자세히 알아보겠습니다.",link:"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3142.html",logo:"https://yozm.wishket.com/favicon.ico",background:"rgba(84,7,224,0.2)"})),null,16)])}const M=g(f,[["render",x]]),E=JSON.parse('{"path":"/yozm.wishket.com/3142.html","title":"비슷해 보이지만 다른 컴포넌트와 모듈, 개념 정리","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"비슷해 보이지만 다른 컴포넌트와 모듈, 개념 정리","description":"Article(s) > 비슷해 보이지만 다른 컴포넌트와 모듈, 개념 정리","icon":"fa-brands fa-node","category":["Node.js","Article(s)"],"tag":["blog","yozm.wishket.com","node","nodejs","node-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"비슷해 보이지만 다른 컴포넌트와 모듈, 개념 정리\\",\\"image\\":[\\"https://wishket.com/media/news/3142/20250410_img1.png\\",\\"https://wishket.com/media/news/3142/20250410_img2.png\\",\\"https://wishket.com/media/news/3142/20250410_img3.png\\"],\\"datePublished\\":\\"2025-05-23T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"효빈\\",\\"url\\":\\"https://yozm.wishket.com/magazine/@hbin12212/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3142.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"비슷해 보이지만 다른 컴포넌트와 모듈, 개념 정리"}],["meta",{"property":"og:description","content":"Article(s) > 비슷해 보이지만 다른 컴포넌트와 모듈, 개념 정리"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/3142/20250410_img1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/3142/20250410_img1.png"}],["meta",{"name":"twitter:image:alt","content":"비슷해 보이지만 다른 컴포넌트와 모듈, 개념 정리"}],["meta",{"property":"article:author","content":"효빈"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-05-23T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 비슷해 보이지만 다른 컴포넌트와 모듈, 개념 정리"},{"property":"og:description","content":"비슷해 보이지만 다른 컴포넌트와 모듈, 개념 정리"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3142.html"}]],"prev":"/programming/js-node/articles/README.md","date":"2025-05-23T00:00:00.000Z","isOriginal":false,"author":[{"name":"효빈","url":"https://yozm.wishket.com/magazine/@hbin12212/"}],"cover":"https://yozm.wishket.com/media/news/3142/20250410_img1.png"},"git":{},"readingTime":{"minutes":1.25,"words":376},"filePathRelative":"yozm.wishket.com/3142.md","copyright":{"author":"효빈"}}');export{M as comp,E as data};
