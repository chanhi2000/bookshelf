import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as t,b as c,t as h,n as v,g,w as e,e as a,r as i,o as f}from"./app-BVguHYKu.js";const b={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"},T={href:"https://deviq.com/antipatterns/big-ball-of-mud",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/BenMorris/NetArchTest",target:"_blank",rel:"noopener noreferrer"},N={class:"hint-container info"},S={href:"https://github.com/BenMorris/ArchUnitNET",target:"_blank",rel:"noopener noreferrer"};function E(r,n){const d=i("VPCard"),o=i("router-link"),u=i("SiteInfo"),p=i("RouteLink"),l=i("VPIcon");return f(),m("div",null,[s("h1",y,[s("a",w,[s("span",null,h(r.$frontmatter.title)+" 관련",1)])]),t(d,v(g({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",A,[s("ul",null,[s("li",null,[t(o,{to:"#technical-debt"},{default:e(()=>n[0]||(n[0]=[a("Technical Debt")])),_:1,__:[0]})]),s("li",null,[t(o,{to:"#architecture-testing"},{default:e(()=>n[1]||(n[1]=[a("Architecture Testing")])),_:1,__:[1]})]),s("li",null,[t(o,{to:"#architecture-testing-modular-monolith"},{default:e(()=>n[2]||(n[2]=[a("Architecture Testing: Modular Monolith")])),_:1,__:[2]})]),s("li",null,[t(o,{to:"#architecture-testing-clean-architecture"},{default:e(()=>n[3]||(n[3]=[a("Architecture Testing: Clean Architecture")])),_:1,__:[3]})]),s("li",null,[t(o,{to:"#architecture-testing-design-rules"},{default:e(()=>n[4]||(n[4]=[a("Architecture Testing: Design Rules")])),_:1,__:[4]})]),s("li",null,[t(o,{to:"#summary"},{default:e(()=>n[5]||(n[5]=[a("Summary")])),_:1,__:[5]})])])]),n[44]||(n[44]=s("hr",null,null,-1)),t(u,{name:"Shift Left With Architecture Testing in .NET",desc:"In this newsletter, we'll explore how architecture testing can safeguard our project's architecture. Architecture tests can help us shift left and detect architectural issues faster.",url:"https://milanjovanovic.tech/blog/shift-left-with-architecture-testing-in-dotnet/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_091.png"}),s("p",null,[n[7]||(n[7]=a("Picture this: You're part of a team building a shiny new .NET application. You've carefully chosen your software architecture. It could be microservices, a ")),t(p,{to:"/milanjovanovic.tech/modular-monolith-architecture/"},{default:e(()=>n[6]||(n[6]=[s("strong",null,"modular monolith",-1)])),_:1,__:[6]}),n[8]||(n[8]=a(", or something else entirely. You've decided which database you will use and all the other tools you need. Everyone's excited, the code is flowing, and features are getting shipped."))]),n[45]||(n[45]=s("p",null,"Fast forward a few months (or years), and things might look different.",-1)),n[46]||(n[46]=s("p",null,"The codebase has grown, and new features have been added. Maybe your team has even changed, with new developers coming on board. Adding new features becomes a pain, and bugs are popping up left and right.",-1)),s("p",null,[n[10]||(n[10]=a("And slowly but surely, the neat architecture you started with has turned into a ")),s("a",T,[t(l,{icon:"fas fa-globe"}),n[9]||(n[9]=a("big ball of mud"))]),n[11]||(n[11]=a(". What went wrong? And more importantly, what can we do about it?"))]),n[47]||(n[47]=c('<p>Today, I want to show you how architecture testing can prevent this problem.</p><hr><h2 id="technical-debt" tabindex="-1"><a class="header-anchor" href="#technical-debt"><span>Technical Debt</span></a></h2><p>Technical debt is the consequence of prioritizing development speed over well-designed code. It happens when teams cut corners to meet deadlines, make quick fixes, or don&#39;t understand the architecture clearly.</p><p>Each shortcut or hack adds to the pile, making the code harder to understand, change, and maintain. But why do developers take these shortcuts in the first place?</p><p>Don&#39;t developers care about keeping the code clean?</p><p>Well, the truth is, most developers do care. If you&#39;re reading this newsletter, odds are you also care. But, developers are often under pressure to deliver features quickly. Sometimes, the quickest way to do that is to take a shortcut.</p><p>Plus, not everyone has a deep understanding of software architecture, or they might disagree on what the &quot;right&quot; architecture is. And let&#39;s be honest: some developers want to get their code working and move on to the next thing.</p><hr><h2 id="architecture-testing" tabindex="-1"><a class="header-anchor" href="#architecture-testing"><span>Architecture Testing</span></a></h2>',10)),s("p",null,[n[13]||(n[13]=a("Luckily, there's a way to enforce software architecture on your project before things get out of hand. It's called ")),t(p,{to:"/milanjovanovic.tech/enforcing-software-architecture-with-architecture-tests.html"},{default:e(()=>n[12]||(n[12]=[s("strong",null,"architecture testing",-1)])),_:1,__:[12]}),n[14]||(n[14]=a(". These are automated tests that check whether your code follows the architectural rules you've set up."))]),s("p",null,[n[15]||(n[15]=a("With architecture testing, you can [")),t(l,{icon:"fa-brands fa-wikipedia-w"}),n[16]||(n[16]=a(`"shift left"](https://en.wikipedia.org/wiki/Shift-left_testing. This enables you to find and fix problems early in the development process when they're much easier and cheaper to deal with.`))]),s("p",null,[n[18]||(n[18]=a("Think of it like a safety net for your software architecture and design rules. If someone accidentally breaks a rule, the test will catch it and alert you. Bonus points if you integrate architecture testing into your ")),t(p,{to:"/milanjovanovic.tech/how-to-build-ci-cd-pipeline-with-github-actions-and-dotnet.html"},{default:e(()=>n[17]||(n[17]=[s("strong",null,"CI pipeline",-1)])),_:1,__:[17]}),n[19]||(n[19]=a("."))]),s("p",null,[n[21]||(n[21]=a("There are a few libraries you can use for architecture testing. I prefer working with the ")),s("a",I,[t(l,{icon:"iconfont icon-github"}),n[20]||(n[20]=s("code",null,"BenMorris/NetArchTest",-1))]),n[22]||(n[22]=a(" library, which I'll use for the examples."))]),t(u,{name:"BenMorris/NetArchTest",desc:"A fluent API for .Net that can enforce architectural rules in unit tests.",url:"https://github.com/BenMorris/NetArchTest",logo:"https://avatars.githubusercontent.com/u/1744805?s=96&v=4",preview:"https://opengraph.githubassets.com/4c8300674a4b7439d39f13b79063a42dfa61d3592cb63f349a3c93ee9d9066c2/BenMorris/NetArchTest"}),s("p",null,[n[24]||(n[24]=a("You can check out this article to learn the ")),t(p,{to:"/milanjovanovic.tech/enforcing-software-architecture-with-architecture-tests.html"},{default:e(()=>n[23]||(n[23]=[s("strong",null,"fundamentals of architecture testing",-1)])),_:1,__:[23]}),n[25]||(n[25]=a("."))]),n[48]||(n[48]=s("p",null,"Let's see how to write some architecture tests.",-1)),n[49]||(n[49]=s("hr",null,null,-1)),n[50]||(n[50]=s("h2",{id:"architecture-testing-modular-monolith",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#architecture-testing-modular-monolith"},[s("span",null,"Architecture Testing: Modular Monolith")])],-1)),s("p",null,[n[27]||(n[27]=a("You built an application using the ")),t(p,{to:"/milanjovanovic.tech/what-is-a-modular-monolith.html"},{default:e(()=>n[26]||(n[26]=[s("strong",null,"modular monolith architecture",-1)])),_:1,__:[26]}),n[28]||(n[28]=a(". But how can you maintain the constraints between the modules?"))]),n[51]||(n[51]=c(`<ul><li>Modules aren&#39;t allowed to reference each other</li><li>Modules can only call the public API of other modules</li></ul><p>Here&#39;s an architecture test that enforces these module constraints. The <code>Ticketing</code> module is not allowed to reference the other modules directly. However, it can reference the public API of other modules (integration events in this example). The entry point is the <code>Types</code> class, which exposes a fluent API to build the rules you want to enforce. NetArchTest allows us to enforce the direction of dependencies between modules.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TicketingModule_ShouldNotHaveDependencyOn_AnyOtherModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> otherModules <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token attribute"><span class="token class-name">UsersNamespace</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">EventsNamespace</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">AttendanceNamespace</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> integrationEventsModules <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token attribute"><span class="token class-name">UsersIntegrationEventsNamespace</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">EventsIntegrationEventsNamespace</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">AttendanceIntegrationEventsNamespace</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">List<span class="token punctuation">&lt;</span>Assembly<span class="token punctuation">&gt;</span></span> ticketingAssemblies <span class="token operator">=</span></span>
<span class="line">    <span class="token punctuation">[</span></span>
<span class="line">        <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Order</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">,</span></span>
<span class="line">        Modules<span class="token punctuation">.</span>Ticketing<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>AssemblyReference<span class="token punctuation">.</span>Assembly<span class="token punctuation">,</span></span>
<span class="line">        Modules<span class="token punctuation">.</span>Ticketing<span class="token punctuation">.</span>Presentation<span class="token punctuation">.</span>AssemblyReference<span class="token punctuation">.</span>Assembly<span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TicketingModule</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly</span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    Types<span class="token punctuation">.</span><span class="token function">InAssemblies</span><span class="token punctuation">(</span>ticketingAssemblies<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">DoNotHaveDependencyOnAny</span><span class="token punctuation">(</span>integrationEventsModules<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">NotHaveDependencyOnAny</span><span class="token punctuation">(</span>otherModules<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ShouldBeSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[30]||(n[30]=a("If you want to learn how to build robust and scalable systems using this architectural approach, check out ")),t(p,{to:"/milanjovanovic.tech/modular-monolith-architecture/"},{default:e(()=>n[29]||(n[29]=[s("strong",null,"Modular Monolith Architecture",-1)])),_:1,__:[29]}),n[31]||(n[31]=a("."))]),n[52]||(n[52]=s("hr",null,null,-1)),n[53]||(n[53]=s("h2",{id:"architecture-testing-clean-architecture",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#architecture-testing-clean-architecture"},[s("span",null,"Architecture Testing: Clean Architecture")])],-1)),s("p",null,[n[33]||(n[33]=a("We can also write architecture tests for ")),t(p,{to:"/milanjovanovic.tech/why-clean-architecture-is-great-for-complex-projects.html"},{default:e(()=>n[32]||(n[32]=[s("strong",null,"Clean Architecture",-1)])),_:1,__:[32]}),n[34]||(n[34]=a(". The inner layers aren't allowed to reference the outer layers. Instead, the inner layers define abstractions and the outer layers implement these abstractions."))]),n[54]||(n[54]=c(`<p>For example, the <code>Domain</code> layer isn&#39;t allowed to reference the <code>Application</code> layer. Here&#39;s an architecture test enforcing this rule:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DomainLayer_ShouldNotHaveDependencyOn_ApplicationLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Types<span class="token punctuation">.</span><span class="token function">InAssembly</span><span class="token punctuation">(</span>DomainAssembly<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">NotHaveDependencyOn</span><span class="token punctuation">(</span>ApplicationAssembly<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ShouldBeSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s also simple introduce a rule that the <code>Application</code> layer isn&#39;t allowed to reference the <code>Infrastructure</code> layer. The architecture test will fail whenever someone in the team breaks the dependency rule.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ApplicationLayer_ShouldNotHaveDependencyOn_InfrastructureLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Types<span class="token punctuation">.</span><span class="token function">InAssembly</span><span class="token punctuation">(</span>ApplicationAssembly<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">NotHaveDependencyOn</span><span class="token punctuation">(</span>InfrastructureAssembly<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ShouldBeSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can introduce more architecture tests for the <code>Infrastructure</code> and <code>Presentation</code> layers, if needed.</p>`,5)),s("p",null,[n[36]||(n[36]=a("Ready to learn more about building production-ready applications using this architectural approach? You should check out ")),t(p,{to:"/milanjovanovic.tech/pragmatic-clean-architecture/"},{default:e(()=>n[35]||(n[35]=[s("strong",null,"Pragmatic Clean Architecture",-1)])),_:1,__:[35]}),n[37]||(n[37]=a("."))]),n[55]||(n[55]=c(`<hr><h2 id="architecture-testing-design-rules" tabindex="-1"><a class="header-anchor" href="#architecture-testing-design-rules"><span>Architecture Testing: Design Rules</span></a></h2><p>Architecture testing is also useful for enforcing design rules in your code. If your team has coding standards everyone should follow, architecture testing can help you enforce them.</p><p>For example, we want to ensure that all domain events are sealed types. You can use the <code>BeSealed</code> method to enforce a design rule that types implementing <code>IDomainEvent</code> or <code>DomainEvent</code> should be sealed.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DomainEvents_Should_BeSealed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Types<span class="token punctuation">.</span><span class="token function">InAssembly</span><span class="token punctuation">(</span>DomainAssembly<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ImplementInterface</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IDomainEvent</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Inherit</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DomainEvent</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">BeSealed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ShouldBeSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An interesting design rule could be requiring all domain entities not to have a public constructor. Instead, you would create an <code>Entity</code> instance through a static factory method. This approach improves the encapsulation of your <code>Entity</code>.</p><p>Here&#39;s an architecture test enforcing this design rule:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Entities_ShouldOnlyHave_PrivateConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span> entityTypes <span class="token operator">=</span> Types<span class="token punctuation">.</span><span class="token function">InAssembly</span><span class="token punctuation">(</span>DomainAssembly<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Inherit</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Entity</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">GetTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> failingTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> entityType <span class="token keyword">in</span> entityTypes<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ConstructorInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> constructors <span class="token operator">=</span> entityType</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">GetConstructors</span><span class="token punctuation">(</span>BindingFlags<span class="token punctuation">.</span>Public <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>Instance<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>constructors<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            failingTypes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>entityType<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    failingTypes<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Another thing you can do with architecture tests is enforce naming conventions in your code. Here&#39;s an example of requiring all command handlers to have a name ending with <code>CommandHandler</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CommandHandler_ShouldHave_NameEndingWith_CommandHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Types<span class="token punctuation">.</span><span class="token function">InAssembly</span><span class="token punctuation">(</span>ApplicationAssembly<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ImplementInterface</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ICommandHandler<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ImplementInterface</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ICommandHandler<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">HaveNameEndingWith</span><span class="token punctuation">(</span><span class="token string">&quot;CommandHandler&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ShouldBeSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Even the most well-planned software projects decay because of technical debt. Most developers have good intentions. However, time pressure, misunderstandings, and resistance to rules all contribute to this problem.</p>`,13)),s("p",null,[t(p,{to:"/milanjovanovic.tech/enforcing-software-architecture-with-architecture-tests.html"},{default:e(()=>n[38]||(n[38]=[s("strong",null,"Architecture testing",-1)])),_:1,__:[38]}),n[39]||(n[39]=a(" acts as a safeguard. It prevents your codebase from turning into a big ball of mud. By catching architectural violations early on, you can shift left. Short feedback loops avoid costly rework and improve developer productivity. It also ensures the long-term health of your project."))]),n[56]||(n[56]=s("p",null,"A few key takeaways:",-1)),n[57]||(n[57]=s("ul",null,[s("li",null,[s("strong",null,"Technical debt is inevitable"),a(": It slows down development, introduces bugs, and frustrates developers.")]),s("li",null,[s("strong",null,"Architecture testing is your safety net"),a(": It helps you catch architectural violations before they become problematic.")]),s("li",null,[s("strong",null,"Start small and iterate"),a(": You don't have to test everything at once. Focus on the most critical rules first.")]),s("li",null,[s("strong",null,"Make it part of your workflow"),a(": Integrate architecture tests into your CI/CD pipeline so they run automatically.")])],-1)),s("div",N,[n[43]||(n[43]=s("p",{class:"hint-container-title"},"Action point",-1)),s("p",null,[n[41]||(n[41]=a("Start by exploring popular .NET architecture testing libraries like ")),s("a",S,[t(l,{icon:"iconfont icon-github"}),n[40]||(n[40]=s("code",null,"BenMorris/ArchUnitNET",-1))]),n[42]||(n[42]=a(". Experiment with writing tests for common architectural rules and gradually integrate them into your development workflow."))]),t(u,{name:"TNG/ArchUnitNET",desc:"A C# architecture test library to specify and assert architecture rules in C# for automated testing.",url:"https://github.com/TNG/ArchUnitNET",logo:"https://avatars.githubusercontent.com/u/432256?s=88&v=4",preview:"https://opengraph.githubassets.com/686a0d4957388dbf014b2807249af0019cd0ae23730f21d3709bf0562887b8cf/TNG/ArchUnitNET"})]),n[58]||(n[58]=s("p",null,"That's all for today.",-1)),n[59]||(n[59]=s("p",null,"See you next week.",-1))])}const M=k(b,[["render",E]]),D=JSON.parse('{"path":"/milanjovanovic.tech/shift-left-with-architecture-testing-in-dotnet.html","title":"Shift Left With Architecture Testing in .NET","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Shift Left With Architecture Testing in .NET","description":"Article(s) > Shift Left With Architecture Testing in .NET","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Shift Left With Architecture Testing in .NET\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_091.png\\"],\\"datePublished\\":\\"2024-05-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/shift-left-with-architecture-testing-in-dotnet.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Shift Left With Architecture Testing in .NET"}],["meta",{"property":"og:description","content":"Article(s) > Shift Left With Architecture Testing in .NET"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_091.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_091.png"}],["meta",{"name":"twitter:image:alt","content":"Shift Left With Architecture Testing in .NET"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-05-25T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Shift Left With Architecture Testing in .NET"},{"property":"og:description","content":"Shift Left With Architecture Testing in .NET"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/shift-left-with-architecture-testing-in-dotnet.html"}]],"prev":"/programming/cs/articles/README.md","date":"2024-05-25T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_091.png"},"git":{},"readingTime":{"minutes":5.04,"words":1513},"filePathRelative":"milanjovanovic.tech/shift-left-with-architecture-testing-in-dotnet.md","copyright":{"author":"Milan Jovanović"}}');export{M as comp,D as data};
