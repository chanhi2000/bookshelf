import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,d as s,f as a,b as e,t as f,n as u,g as d,w as i,e as t,r as p,o as b}from"./app-BVguHYKu.js";const v={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"};function S(m,n){const r=p("VPCard"),o=p("router-link"),g=p("SiteInfo"),l=p("VPIcon");return b(),c("div",null,[s("h1",y,[s("a",w,[s("span",null,f(m.$frontmatter.title)+" 관련",1)])]),a(r,u(d({title:"Python > Article(s)",desc:"Article(s)",link:"/programming/py/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a(r,u(d({title:"Google Cloud > Article(s)",desc:"Article(s)",link:"/devops/gcp/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",A,[s("ul",null,[s("li",null,[a(o,{to:"#클라우드-플랫폼의-object-storage-사용하기"},{default:i(()=>n[0]||(n[0]=[t("클라우드 플랫폼의 Object Storage 사용하기")])),_:1,__:[0]})]),s("li",null,[a(o,{to:"#클라우드-플랫폼의-동적-웹-사이트-서비스-사용하기"},{default:i(()=>n[1]||(n[1]=[t("클라우드 플랫폼의 동적 웹 사이트 서비스 사용하기")])),_:1,__:[1]})]),s("li",null,[a(o,{to:"#github-bitbucket의-pages-기능-사용하기"},{default:i(()=>n[2]||(n[2]=[t("Github, BitBucket의 Pages 기능 사용하기")])),_:1,__:[2]})]),s("li",null,[a(o,{to:"#그래서-어떤-방법을-사용하면-좋을까"},{default:i(()=>n[3]||(n[3]=[t("그래서, 어떤 방법을 사용하면 좋을까?")])),_:1,__:[3]}),s("ul",null,[s("li",null,[a(o,{to:"#static3과-app-engine을-함께-사용하기"},{default:i(()=>n[4]||(n[4]=[t("static3과 App Engine을 함께 사용하기")])),_:1,__:[4]})]),s("li",null,[a(o,{to:"#다른-플랫폼에서도-static3를-사용할-수-있을까"},{default:i(()=>n[5]||(n[5]=[t("다른 플랫폼에서도 static3를 사용할 수 있을까?")])),_:1,__:[5]})])])]),s("li",null,[a(o,{to:"#마치며"},{default:i(()=>n[6]||(n[6]=[t("마치며")])),_:1,__:[6]})])])]),n[80]||(n[80]=s("hr",null,null,-1)),a(g,{name:"정적 파일만 있는 사이트를 어떻게 구동시킬까? | 요즘IT",desc:"개발을 하다 보면 정적(static)인 파일로만 구성된 웹 사이트를 서비스해야 할 때가 있습니다. 정적인 웹 사이트를 생성하고 서비스하는 방법은 여럿 있지만, 저는 주로 파이썬을 활용합니다. 정적 웹 사이트를 Serving하려면 어떻게 해야 할까요? 아쉽지만 개인이라면 정적 웹 사이트를 인터넷에 서빙하는 일은 생각보다 어렵습니다. 다양한 방법 가운데 어떤 방법이 가장 효과적일지는 비용이나 배포 환경 등 제반 여건에 따라 다릅니다. 이 글이 여러분의 선택에 도움이 되기를 바랍니다.",url:"https://yozm.wishket.com/magazine/detail/2584/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/2584/google-app-engine.png"}),n[81]||(n[81]=e(`<p>개발을 하다 보면 정적(static)인 파일로만 구성된 웹 사이트를 서비스해야 할 때가 있습니다. 정적인 웹 사이트를 생성하고 서비스하는 방법은 여럿 있지만, 저는 주로 파이썬을 활용합니다. 파이썬에는 정적 웹 사이트를 서비스하는 간단한 모듈이 있습니다. 다음 명령을 내릴 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">python <span class="token parameter variable">-m</span> http.server</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>이를 셸에서 실행하면 명령이 실행된 디렉터리를 Document Root로 삼아 HTTP Server가 시작됩니다. 이 웹 서버는 기본적으로 8000 포트로 기동하기 때문에 로컬 컴퓨터에서 정적 웹 사이트를 구성하는 데 도움을 받을 수 있습니다. 물론 웹 서버가 실행되는 포트와 Document Root로 삼을 디렉터리를 명령의 실행 옵션으로 따로 지정할 수도 있습니다.</p><p>그럼 이렇게 만들어진 정적 웹 사이트를 Serving하려면 어떻게 해야 할까요? 아쉽지만 개인이라면 정적 웹 사이트를 인터넷에 Serving하는 일은 생각보다 어렵습니다. 그래서 아래 몇 가지 방법을 소개하려고 합니다.</p><hr><h2 id="클라우드-플랫폼의-object-storage-사용하기" tabindex="-1"><a class="header-anchor" href="#클라우드-플랫폼의-object-storage-사용하기"><span>클라우드 플랫폼의 Object Storage 사용하기</span></a></h2><p>클라우드 플랫폼이 제공하는 서비스 중에 파일을 보관하는 Object Storage인 GCP의 Cloud Storage, AWS의 S3, Azure의 Blob Storage 서비스가 있습니다. 해당 서비스들은 저장소 사용량에 따라 비용을 받습니다.</p><p>저장소를 이용해 사이트를 Serving하려면 버킷에 파일을 올려놓고 이를 인터넷에 공개하겠다고 설정해야 합니다. 다만 설정이 간단한 것은 아닙니다. 무엇보다 Object Storage의 버킷을 인터넷에 공개하려고 하면 이를 ‘권장하지 않는다’라는 경고 메시지가 발생합니다.</p><hr><h2 id="클라우드-플랫폼의-동적-웹-사이트-서비스-사용하기" tabindex="-1"><a class="header-anchor" href="#클라우드-플랫폼의-동적-웹-사이트-서비스-사용하기"><span>클라우드 플랫폼의 동적 웹 사이트 서비스 사용하기</span></a></h2><p>정적 웹 사이트를 Serving하기 위한 다른 선택지로 동적 웹 사이트를 Serving하는 클라우드 서비스를 활용하는 방법이 있습니다. 인터넷에 검색해 보면, 파이썬 기반 Flask 프레임워크를 사용해 정적 파일만 구성하는 웹 애플리케이션을 만드는 방법을 찾아볼 수 있습니다.</p><p>그중 Flask를 사용해 웹 서버를 만들 때는 아래 명령을 활용합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> send_file<span class="token punctuation">,</span> abort</span>
<span class="line"></span>
<span class="line">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> defaults<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;links&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;index.html&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&quot;/&lt;path:links&gt;;&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>links<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> links<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&quot;favicon.ico&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> abort<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> send_file<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token string-interpolation"><span class="token string">f&#39;static/</span><span class="token interpolation"><span class="token punctuation">{</span>links<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)),s("p",null,[n[7]||(n[7]=t("이 코드는 ")),a(l,{icon:"fas fa-folder-open"}),n[8]||(n[8]=s("code",null,"static",-1)),n[9]||(n[9]=t(" 디렉터리에서 Serving하려는 폴더가 있을 때, Flask 서버로 들어오는 모든 경로를 ")),a(l,{icon:"fas fa-folder-open"}),n[10]||(n[10]=s("code",null,"static",-1)),n[11]||(n[11]=t(" 아래에서 찾아 전송하라는 의미입니다."))]),n[82]||(n[82]=e('<p>이는 Google App Engine, AWS Beanstalk, Heroku 등 웹사이트 배포 관련 서비스 모두에서 사용할 수 있습니다. 다만 개별 서비스에서 사용하는 전용 구성 설정을 따라야 합니다.</p><hr><h2 id="github-bitbucket의-pages-기능-사용하기" tabindex="-1"><a class="header-anchor" href="#github-bitbucket의-pages-기능-사용하기"><span>Github, BitBucket의 Pages 기능 사용하기</span></a></h2><p>GitHub, BitBucket은 버전 관리를 사용하는 VCS 시스템으로 개발자들 사이에서는 널리 사용되고 있습니다. 이러한 VCS 시스템에도 정적 웹 사이트를 서비스하는 기능이 포함되어 있습니다.</p><p>GitHub이 제공하는 GitHub Pages, BitBucket이 제공하는 BitBucket Pages 기능이 대표적입니다. 이들이 제공하는 Pages 기능은 무상으로 쓸 수 있으며 최근 정적 웹 사이트 Serving에서 주목받고 있는 Jekyll 등을 쉽게 사용할 수 있습니다.</p><p>다만 GitHub의 경우, 저장소의 가시성이 “공개”로 되어 있어야만 Pages 기능을 사용할 수 있다는 단점이 있습니다. 다시 말해 GitHub 저장소가 아무에게나 열려 있어야 한다는 뜻입니다. 게다가 이를 다루려면 git 명령어를 잘 사용할 줄 알아야 합니다.</p><hr><h2 id="그래서-어떤-방법을-사용하면-좋을까" tabindex="-1"><a class="header-anchor" href="#그래서-어떤-방법을-사용하면-좋을까"><span>그래서, 어떤 방법을 사용하면 좋을까?</span></a></h2><p>앞서 여러 방법을 소개했지만, 저는 정적 웹 사이트를 Serving할 때 Google App Engine 사용을 권장합니다. 기본적으로 디스크 용량 1GB를 제공하고 트래픽 등 부분에서도 일정 용량은 매일 무료로 쓸 수 있기 때문입니다.</p><p>여러분이 App Engine에서 벗어나지 않을 것이라면, 우선 다음과 같은 디렉터리 구성이 필요합니다.</p>',10)),s("ul",null,[s("li",null,[n[16]||(n[16]=t(".")),a(l,{icon:"fas fa-folder-open"}),n[17]||(n[17]=s("code",null,"static_root",-1)),s("ul",null,[s("li",null,[n[12]||(n[12]=t(".")),a(l,{icon:"fas fa-folder-open"}),n[13]||(n[13]=s("code",null,"www",-1))]),s("li",null,[n[14]||(n[14]=t(".")),a(l,{icon:"iconfont icon-yaml"}),n[15]||(n[15]=s("code",null,"app.yaml",-1))])])])]),s("p",null,[n[18]||(n[18]=t(".")),a(l,{icon:"iconfont icon-yaml"}),n[19]||(n[19]=s("code",null,"app.yaml",-1)),n[20]||(n[20]=t("은 App Engine이 참조하는 파일입니다. ")),a(l,{icon:"iconfont icon-yaml"}),n[21]||(n[21]=s("code",null,"app.yaml",-1)),n[22]||(n[22]=t(" 파일은 다음과 같이 구성합니다."))]),n[83]||(n[83]=e(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">runtime</span><span class="token punctuation">:</span> python312</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">handlers</span><span class="token punctuation">:</span></span>
<span class="line"><span class="token punctuation">-</span> <span class="token key atrule">url</span><span class="token punctuation">:</span> /</span>
<span class="line">  <span class="token key atrule">static_files</span><span class="token punctuation">:</span> www/index.html</span>
<span class="line">  <span class="token key atrule">upload</span><span class="token punctuation">:</span> www/index.html</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">-</span> <span class="token key atrule">url</span><span class="token punctuation">:</span> /(.<span class="token important">*)</span></span>
<span class="line">  <span class="token key atrule">static_files</span><span class="token punctuation">:</span> www/\\1</span>
<span class="line">  <span class="token key atrule">upload</span><span class="token punctuation">:</span> www/(.<span class="token important">*)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[23]||(n[23]=t(".")),a(l,{icon:"iconfont icon-yaml"}),n[24]||(n[24]=s("code",null,"app.yaml",-1)),n[25]||(n[25]=t("에는 브라우저가 경로를 요청하면 어떻게 대응할 것인지 지정하는 handlers 설정이 포함되어 있습니다. 앞의 코드는 ")),n[26]||(n[26]=s("code",null,"/",-1)),n[27]||(n[27]=t(" URL에 대해서는 ")),a(l,{icon:"fas fa-open"}),n[28]||(n[28]=s("code",null,"www/",-1)),a(l,{icon:"fa-brands fa-html5"}),n[29]||(n[29]=s("code",null,"index.html",-1)),n[30]||(n[30]=t(" 파일을 서빙하고, 그 외 모든 요청은 ")),a(l,{icon:"fas fa-folder-open"}),n[31]||(n[31]=s("code",null,"www",-1)),n[32]||(n[32]=t(" 디렉터리에서 찾아 보내라고 구성되어 있습니다."))]),s("p",null,[n[33]||(n[33]=t(".")),a(l,{icon:"iconfont icon-yaml"}),n[34]||(n[34]=s("code",null,"app.yaml",-1)),n[35]||(n[35]=t(" 구성을 마쳤으면 ")),a(l,{icon:"fas fa-folder-open"}),n[36]||(n[36]=s("code",null,"static_root",-1)),n[37]||(n[37]=t(" 디렉터리에서 gcloud 명령을 사용하여 이를 App Engine에 업로드하면 됩니다."))]),n[84]||(n[84]=e(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">gcloud app deploy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>만약 여러분이 GCP를 꾸준히 사용한다면, App Engine에서 제공하는 방법만으로도 이를 유용하게 쓸 수 있을 것입니다. 그러나 App Engine을 벗어나 AWS, Heroku로 이동하거나 gzip으로 압축된 정적 콘텐츠가 있다면 이 구성 방법을 사용하기 어렵습니다. 서비스 제공자마다 구성 파일을 달리해야 하는 데다가 gzip 압축은 서비스하지 않기 때문입니다.</p><h3 id="static3과-app-engine을-함께-사용하기" tabindex="-1"><a class="header-anchor" href="#static3과-app-engine을-함께-사용하기"><span>static3과 App Engine을 함께 사용하기</span></a></h3><p>이런 한계를 극복하기 위해 static3를 활용할 수 있습니다. static3은 파이썬 코드로 작성된 정적 웹 콘텐츠를 쉽게 서비스하기 위한 라이브러리입니다. 기존에는 파이썬 2로 작성된 static이란 라이브러리가 있었는데, 지금은 유지보수되지 않고 있습니다.</p><p>이를 사용하려면 다음과 같은 디렉터리 구성이 필요합니다.</p>`,5)),s("ul",null,[s("li",null,[n[45]||(n[45]=t(".")),a(l,{icon:"fas fa-folder-open"}),n[46]||(n[46]=s("code",null,"static_root",-1)),s("ul",null,[s("li",null,[n[38]||(n[38]=t(".")),a(l,{icon:"iconfont icon-yaml"}),n[39]||(n[39]=s("code",null,"app.yaml",-1))]),s("li",null,[n[40]||(n[40]=t(".")),a(l,{icon:"fas fa-folder-open"})]),s("li",null,[n[41]||(n[41]=t(".")),a(l,{icon:"fas fa-file-lines"}),n[42]||(n[42]=s("code",null,"requirements.txt",-1))]),s("li",null,[n[43]||(n[43]=t(".")),a(l,{icon:"fa-brands fa-python"}),n[44]||(n[44]=s("code",null,"main.py",-1))])])])]),s("p",null,[n[47]||(n[47]=t("우리는 여기에서 static3를 사용할 것이므로 ")),a(l,{icon:"fas fa-file-lines"}),n[48]||(n[48]=s("code",null,"requirements.txt",-1)),n[49]||(n[49]=t("에 다음 내용을 입력합니다."))]),n[85]||(n[85]=e(`<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">static3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),s("p",null,[n[50]||(n[50]=t("그다음 ")),a(l,{icon:"iconfont icon-yaml"}),n[51]||(n[51]=s("code",null,"app.yaml",-1)),n[52]||(n[52]=t("은 다음과 같이 구성합니다."))]),n[86]||(n[86]=e(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">runtime</span><span class="token punctuation">:</span> python312</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),s("p",null,[n[53]||(n[53]=t("마지막으로 ")),a(l,{icon:"fa-brands fa-python"}),n[54]||(n[54]=s("code",null,"main.py",-1)),n[55]||(n[55]=t("는 다음과 같이 구성합니다."))]),n[87]||(n[87]=e(`<div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token keyword">from</span> static <span class="token keyword">import</span> Cling</span>
<span class="line">app <span class="token operator">=</span> Cling<span class="token punctuation">(</span><span class="token string">&quot;web&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[56]||(n[56]=t("정적 웹 사이트를 구성하기 위한 준비가 완료되었습니다. 이제 App Engine에 이를 업로드합니다. ")),a(l,{icon:"fas fa-folder-open"}),n[57]||(n[57]=s("code",null,"static_root",-1)),n[58]||(n[58]=t("에서 다음 명령을 입력하면 됩니다."))]),n[88]||(n[88]=e(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">gcloud app deploy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),s("p",null,[n[59]||(n[59]=t("static3은 기본적으로 브라우저가 ")),n[60]||(n[60]=s("code",null,"/",-1)),n[61]||(n[61]=t(" 를 요청하면 ")),a(l,{icon:"fas fa-folder-open"}),n[62]||(n[62]=s("code",null,"web",-1)),n[63]||(n[63]=t(" 디렉터리의 ")),a(l,{icon:"fa-brands fa-html5"}),n[64]||(n[64]=s("code",null,"index.html",-1)),n[65]||(n[65]=t("을 서비스합니다. 그 외 모든 경우에는 ")),a(l,{icon:"fas fa-folder-open"}),n[66]||(n[66]=s("code",null,"web",-1)),n[67]||(n[67]=t(" 디렉터리에서 브라우저로부터 요청받은 경로를 찾아 서비스합니다."))]),n[89]||(n[89]=s("p",null,[t("static3은 gzip 압축된 파일도 서비스할 수 있습니다. 따라서 용량이 큰 html 파일은 gzip으로 압축해두면 static3이 알아서 브라우저에 해당 파일을 찾아 보내 줍니다. 앞의 예시대로라면 "),s("code",null,"index.html.gz"),t("와 같은 형태가 됩니다.")],-1)),n[90]||(n[90]=s("h3",{id:"다른-플랫폼에서도-static3를-사용할-수-있을까",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#다른-플랫폼에서도-static3를-사용할-수-있을까"},[s("span",null,"다른 플랫폼에서도 static3를 사용할 수 있을까?")])],-1)),n[91]||(n[91]=s("p",null,"static3가 제공하는 cling은 기본적으로 WSGI 호환 Wrapper로서 동작합니다. 따라서 동적 웹 사이트를 서비스하는 다양한 플랫폼에서 사용할 수 있습니다.",-1)),s("p",null,[n[68]||(n[68]=t("만약 여러분이 [AWS Beanstalk나 Azure App Service]")),n[69]||(n[69]=s("sup",{class:"footnote-ref"},[s("a",{href:"#footnote1"},"[1]"),s("a",{class:"footnote-anchor",id:"footnote-ref1"})],-1)),n[70]||(n[70]=t("를 사용한다면 ")),a(l,{icon:"fa-brands fa-python"}),n[71]||(n[71]=s("code",null,"main.py",-1)),n[72]||(n[72]=t(" 이름을 다음과 같이 바꾸기만 하면 됩니다."))]),s("ul",null,[s("li",null,[n[73]||(n[73]=t("AWS Beanstalk: ")),a(l,{icon:"fa-brands fa-python"}),n[74]||(n[74]=s("code",null,"application.py",-1))]),s("li",null,[n[75]||(n[75]=t("Azure App Service: ")),a(l,{icon:"fa-brands fa-python"}),n[76]||(n[76]=s("code",null,"app.py",-1))])]),s("p",null,[n[77]||(n[77]=t("다만 ")),a(l,{icon:"iconfont icon-yaml"}),n[78]||(n[78]=s("code",null,"app.yaml",-1)),n[79]||(n[79]=t(" 등 파일은 클라우드 서비스마다 존재하는 파일이 다를 수 있습니다."))]),n[92]||(n[92]=e('<hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>지금까지 정적 웹 사이트를 서비스하는 다양한 방법을 살펴봤습니다. 여러분은 정적 웹 사이트를 Serving하는 방법이 생각보다 다양하다는 점을 알게 되었을 것입니다.</p><p>물론 이들 다양한 방법 가운데 어떤 방법이 가장 효과적일지는 비용이나 배포 환경 등 제반 여건에 따라 다릅니다. 이 글이 여러분의 선택에 도움이 되기를 바랍니다.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>Azure의 경우, 정적 웹 사이트 호스팅을 위해 Azure Static Web Apps라는 서비스가 따로 존재합니다. <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>',6))])}const B=k(v,[["render",S]]),P=JSON.parse('{"path":"/yozm.wishket.com/2584.html","title":"정적 파일만 있는 사이트를 어떻게 구동시킬까?","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"정적 파일만 있는 사이트를 어떻게 구동시킬까?","description":"Article(s) > 정적 파일만 있는 사이트를 어떻게 구동시킬까?","icon":"fa-brands fa-python","category":["Python","Flask","Article(s)"],"tag":["blog","yozm.wishket.com","python","py"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"정적 파일만 있는 사이트를 어떻게 구동시킬까?\\",\\"image\\":[\\"https://yozm.wishket.com/media/news/2584/google-app-engine.png\\"],\\"datePublished\\":\\"2024-05-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2584.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"정적 파일만 있는 사이트를 어떻게 구동시킬까?"}],["meta",{"property":"og:description","content":"Article(s) > 정적 파일만 있는 사이트를 어떻게 구동시킬까?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/2584/google-app-engine.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/2584/google-app-engine.png"}],["meta",{"name":"twitter:image:alt","content":"정적 파일만 있는 사이트를 어떻게 구동시킬까?"}],["meta",{"property":"article:tag","content":"py"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-05-14T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 정적 파일만 있는 사이트를 어떻게 구동시킬까?"},{"property":"og:description","content":"정적 파일만 있는 사이트를 어떻게 구동시킬까?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2584.html"}]],"prev":"/programming/py/articles/README.md","date":"2024-05-14T00:00:00.000Z","isOriginal":false,"cover":"https://yozm.wishket.com/media/news/2584/google-app-engine.png"},"git":{},"readingTime":{"minutes":2.05,"words":614},"filePathRelative":"yozm.wishket.com/2584.md"}');export{B as comp,P as data};
