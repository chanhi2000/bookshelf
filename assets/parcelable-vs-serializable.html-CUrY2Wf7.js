import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as n,f as s,b as k,a as h,t as g,n as c,g as d,w as l,e as a,r as i,o as v}from"./app-BVguHYKu.js";const f={},w={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},z={class:"hint-container info"},P={href:"https://youtube.com/playlist?list=PL_I3TGB7aK6jNBMZkw3FYdJXyf7quHdI8",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/amitshekhariitbhu/android-interview-questions",target:"_blank",rel:"noopener noreferrer"},A={class:"hint-container info"},x={href:"https://twitter.com/amitiitbhu",target:"_blank",rel:"noopener noreferrer"},T={href:"https://linkedin.com/in/amit-shekhar-iitbhu",target:"_blank",rel:"noopener noreferrer"},j={href:"https://youtube.com/@amitshekhar",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/amitshekhariitbhu",target:"_blank",rel:"noopener noreferrer"},O={href:"https://twitter.com/outcome_school",target:"_blank",rel:"noopener noreferrer"},N={href:"https://linkedin.com/company/outcomeschool",target:"_blank",rel:"noopener noreferrer"},B={href:"https://youtube.com/@OutcomeSchool",target:"_blank",rel:"noopener noreferrer"},C={href:"http://github.com/OutcomeSchool",target:"_blank",rel:"noopener noreferrer"};function E(u,e){const r=i("VPCard"),o=i("router-link"),p=i("SiteInfo"),t=i("VPIcon");return v(),b("div",null,[n("h1",w,[n("a",y,[n("span",null,g(u.$frontmatter.title)+" 관련",1)])]),s(r,c(d({title:"Java > Article(s)",desc:"Article(s)",link:"/programming/java/articles/README.md/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",S,[n("ul",null,[n("li",null,[s(o,{to:"#implement-parcelable"},{default:l(()=>e[0]||(e[0]=[a("Implement Parcelable")])),_:1,__:[0]})]),n("li",null,[s(o,{to:"#implement-serializable"},{default:l(()=>e[1]||(e[1]=[a("Implement Serializable")])),_:1,__:[1]})]),n("li",null,[s(o,{to:"#parcelable"},{default:l(()=>e[2]||(e[2]=[a("Parcelable")])),_:1,__:[2]})]),n("li",null,[s(o,{to:"#serializable"},{default:l(()=>e[3]||(e[3]=[a("Serializable")])),_:1,__:[3]})])])]),e[36]||(e[36]=n("hr",null,null,-1)),s(p,{name:"Parcelable vs Serializable",desc:"In this blog, we will learn about the difference between Parcelable and Serializable. We will also learn how they work internally.",url:"https://outcomeschool.com/parcelable-vs-serializable",logo:"https://outcomeschool.com/static/favicons/apple-touch-icon.png",preview:"https://outcomeschool.com/static/images/blog/parcelable-vs-serializable.png"}),n("div",z,[e[7]||(e[7]=n("p",{class:"hint-container-title"},"Info",-1)),n("p",null,[e[5]||(e[5]=a("Before we start, I would like to mention that, I have released a video playlist to help you crack the Android Interview: Check out ")),n("a",P,[s(t,{icon:"fa-brands fa-youtube"}),e[4]||(e[4]=a("Android Interview Questions and Answers"))]),e[6]||(e[6]=a("."))])]),e[37]||(e[37]=k(`<p>In this blog, we will learn about the difference between <code>Parcelable</code> and <code>Serializable</code>. We will also learn how they work internally.</p><p>Let&#39;s start with a scenario: Suppose in Android, we need to pass the following <code>Developer</code> object between activities or fragments using intents or bundles.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Developer</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We can&#39;t simply pass this <code>Developer</code> object between activities or fragments using intents or bundles.</p><p>We have two solutions as follows:</p><hr><h2 id="implement-parcelable" tabindex="-1"><a class="header-anchor" href="#implement-parcelable"><span>Implement <code>Parcelable</code></span></a></h2><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Developer</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> Parcelable <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">constructor</span><span class="token punctuation">(</span>parcel<span class="token operator">:</span> Parcel<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span></span>
<span class="line">        parcel<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        parcel<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span>parcel<span class="token operator">:</span> Parcel<span class="token punctuation">,</span> flags<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        parcel<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line">        parcel<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// code removed for brevity</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">companion</span> <span class="token keyword">object</span> CREATOR <span class="token operator">:</span> Parcelable<span class="token punctuation">.</span>Creator<span class="token operator">&lt;</span>Developer<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">createFromParcel</span><span class="token punctuation">(</span>parcel<span class="token operator">:</span> Parcel<span class="token punctuation">)</span><span class="token operator">:</span> Developer <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">Developer</span><span class="token punctuation">(</span>parcel<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">newArray</span><span class="token punctuation">(</span>size<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>Developer<span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">arrayOfNulls</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A lot of boilerplate code, right?</p><p>To avoid this, we can use the <code>kotlin-parcelize</code> plugin and annotate the class with <code>@Parcelize</code>.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Parcelize</span></span>
<span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Developer</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> Parcelable</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>When we annotate a class with <code>@Parcelize</code>, the implementation is automatically generated, similar to what we wrote above.</p><p>No boilerplate code is needed now. They are automatically generated now.</p><p>This was the first solution: By implementing <code>Parcelable</code>.</p><p>Now, let&#39;s discuss the second solution: By implementing <code>Serializable</code>.</p><hr><h2 id="implement-serializable" tabindex="-1"><a class="header-anchor" href="#implement-serializable"><span>Implement Serializable</span></a></h2><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Developer</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> Serializable</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Both of the above-mentioned solutions work, but they differ in terms of performance. We will discuss this below.</p><p>So, in Android development, both <code>Parcelable</code> and <code>Serializable</code> are the interfaces used to serialize objects so they can be passed between activities or fragments using intents or bundles.</p><p>Let&#39;s understand the difference between <code>Parcelable</code> and <code>Serializable</code>.</p><hr><h2 id="parcelable" tabindex="-1"><a class="header-anchor" href="#parcelable"><span><code>Parcelable</code></span></a></h2><p>Parcelable is an <strong>Android-specific</strong> interface designed to serialize objects to pass them through Intent and Bundle .</p><p>When we implement Parcelable, we either write the implementation manually or use a plugin that generates it for us.</p><p>It does NOT use reflection, and it creates fewer temporary objects during the serialization process, which reduces garbage collection overhead.</p><p>Two things to note:</p><ul><li>Parcelable does <strong>NOT</strong> use reflection.</li><li>Parcelable is an <strong>Android-specific</strong> interface.</li></ul><p>So, Parcelable is faster than Serializable.</p><hr><h2 id="serializable" tabindex="-1"><a class="header-anchor" href="#serializable"><span><code>Serializable</code></span></a></h2><p>A serializable interface in Java is a marker interface that allows an object to be converted into a stream of bytes (serialized) and then reconstructed back into an object (deserialized).</p><p>It is easy to implement since it requires the class to simply implement the <code>Serializable</code> interface, which is a marker interface with no methods to override.</p><p>It uses reflection, and it creates many temporary objects, leading to higher memory usage and potential performance issues.</p><p>So, <code>Serializable</code> is slower than Parcelable.</p><p>We now understand the differences between Parcelable and <code>Serializable</code>.</p><p><strong>Let me tabulate the difference between Parcelable and <code>Serializable</code>.</strong></p><table><thead><tr><th style="text-align:left;"><code>Parcelable</code></th><th style="text-align:left;"><code>Serializable</code></th></tr></thead><tbody><tr><td style="text-align:left;">Android-Specific.</td><td style="text-align:left;">Java.</td></tr><tr><td style="text-align:left;">Faster.</td><td style="text-align:left;">Slower.</td></tr><tr><td style="text-align:left;">Less Memory Usage.</td><td style="text-align:left;">More Memory Usage.</td></tr></tbody></table><p>This was all about <code>Parcelable</code> and <code>Serializable</code>.</p>`,39)),n("p",null,[e[11]||(e[11]=a("Prepare yourself for Android Interview: ")),n("a",I,[e[8]||(e[8]=a("Android Interview Questions (")),s(t,{icon:"iconfont icon-github"}),e[9]||(e[9]=n("code",null,"amitshekhariitbhu/android-interview-questions",-1)),e[10]||(e[10]=a(")"))])]),s(p,{name:"amitshekhariitbhu/android-interview-questions",desc:"Your Cheat Sheet For Android Interview - Android Interview Questions and Answers",url:"https://github.com/amitshekhariitbhu/android-interview-questions/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://repository-images.githubusercontent.com/96704265/3a1039a7-29ee-425d-b4ea-53fcff2c1db7"}),e[38]||(e[38]=n("p",null,"That's it for now.",-1)),e[39]||(e[39]=n("p",null,"Thanks",-1)),n("div",A,[e[33]||(e[33]=n("p",{class:"hint-container-title"},"Amit Shekhar",-1)),e[34]||(e[34]=n("p",null,"You can connect with me on:",-1)),n("ul",null,[n("li",null,[n("a",x,[e[12]||(e[12]=a("X (")),s(t,{icon:"fa-brands fa-x-twitter"}),e[13]||(e[13]=n("code",null,"amitiitbhu",-1))])]),n("li",null,[n("a",T,[e[14]||(e[14]=a("LinkedIn (")),s(t,{icon:"fa-brands fa-linkedin"}),e[15]||(e[15]=n("code",null,"amit-shekhar-iitbhu",-1))])]),n("li",null,[n("a",j,[e[16]||(e[16]=a("YouTube (")),s(t,{icon:"fa-brands fa-youtube"}),e[17]||(e[17]=n("code",null,"amitshekhar",-1)),e[18]||(e[18]=a(")"))])]),n("li",null,[n("a",D,[e[19]||(e[19]=a("GitHub (")),s(t,{icon:"iconfont icon-github"}),e[20]||(e[20]=n("code",null,"amitshekhariitbhu",-1))])])]),e[35]||(e[35]=n("p",null,"Follow Outcome School on:",-1)),n("ul",null,[n("li",null,[n("a",O,[e[21]||(e[21]=a("X (")),s(t,{icon:"fa-brands fa-x-twitter"}),e[22]||(e[22]=n("code",null,"outcome_school",-1)),e[23]||(e[23]=a(")"))])]),n("li",null,[n("a",N,[e[24]||(e[24]=a("LinkedIn (")),s(t,{icon:"fa-brands fa-linkedin"}),e[25]||(e[25]=n("code",null,"outcomeschool",-1)),e[26]||(e[26]=a(")"))])]),n("li",null,[n("a",B,[e[27]||(e[27]=a("YouTube (")),s(t,{icon:"fa-brands fa-youtube"}),e[28]||(e[28]=n("code",null,"OutcomeSchool",-1)),e[29]||(e[29]=a(")"))])]),n("li",null,[n("a",C,[e[30]||(e[30]=a("GitHub (")),s(t,{icon:"iconfont icon-github"}),e[31]||(e[31]=n("code",null,"OutcomeSchool",-1)),e[32]||(e[32]=a(")"))])])])]),h(" TODO: add ARTICLE CARD "),s(r,c(d({title:"Parcelable vs Serializable",desc:"In this blog, we will learn about the difference between Parcelable and Serializable. We will also learn how they work internally.",link:"https://chanhi2000.github.io/bookshelf/outcomeschool.com/parcelable-vs-serializable.html",logo:"https://outcomeschool.com/static/favicons/apple-touch-icon.png",background:"rgba(78,70,220,0.2)"})),null,16)])}const M=m(f,[["render",E]]),W=JSON.parse('{"path":"/outcomeschool.com/parcelable-vs-serializable.html","title":"Parcelable vs Serializable","lang":"en-US","frontmatter":{"lang":"en-US","title":"Parcelable vs Serializable","description":"Article(s) > Parcelable vs Serializable","icon":"iconfont icon-kotlin","category":["Java","Kotlin","Article(s)"],"tag":["blog","outcomeschool.com","java","kotlin"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Parcelable vs Serializable\\",\\"image\\":[\\"https://outcomeschool.com/static/images/blog/parcelable-vs-serializable.png\\"],\\"datePublished\\":\\"2024-09-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amit Shekhar\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/outcomeschool.com/parcelable-vs-serializable.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Parcelable vs Serializable"}],["meta",{"property":"og:description","content":"Article(s) > Parcelable vs Serializable"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://outcomeschool.com/static/images/blog/parcelable-vs-serializable.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://outcomeschool.com/static/images/blog/parcelable-vs-serializable.png"}],["meta",{"name":"twitter:image:alt","content":"Parcelable vs Serializable"}],["meta",{"property":"article:author","content":"Amit Shekhar"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"outcomeschool.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-09-02T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Parcelable vs Serializable"},{"property":"og:description","content":"Parcelable vs Serializable"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/outcomeschool.com/parcelable-vs-serializable.html"}]],"prev":"/programming/java/articles/README.md/articles/README.md","date":"2024-09-02T00:00:00.000Z","isOriginal":false,"author":"Amit Shekhar","cover":"https://outcomeschool.com/static/images/blog/parcelable-vs-serializable.png"},"git":{},"readingTime":{"minutes":2.95,"words":886},"filePathRelative":"outcomeschool.com/parcelable-vs-serializable.md","copyright":{"author":"Amit Shekhar"}}');export{M as comp,W as data};
