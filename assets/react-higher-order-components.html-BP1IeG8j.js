import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as t,b as l,a as h,t as b,n as r,g as d,w as e,e as a,r as i,o as f}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/banner.png",y="/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/clicking-increment-1.webp",C="/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/file-structure-1.png",x="/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/increase-with-click-1.webp",j="/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/site-font-increasing.webp",H="/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/value-name.png",I="/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/increment-counter-1.webp",O="/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/clicking-increment-counters-1.webp",A="/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/value-secretword.png",z="/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/value-secretword-problem-fixed.png",S={},R={id:"frontmatter-title-관련",tabindex:"-1"},D={class:"header-anchor",href:"#frontmatter-title-관련"},E={class:"table-of-contents"},F={class:"hint-container info"},T={href:"https://blog.logrocket.com/author/nelsonmichael/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://reactjs.org/docs/higher-order-components.html",target:"_blank",rel:"noopener noreferrer"};function W(k,n){const u=i("VPCard"),p=i("router-link"),m=i("SiteInfo"),c=i("RouteLink"),o=i("VPIcon");return f(),g("div",null,[s("h1",R,[s("a",D,[s("span",null,b(k.$frontmatter.title)+" 관련",1)])]),t(u,r(d({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",E,[s("ul",null,[s("li",null,[t(p,{to:"#what-are-hocs-and-when-should-you-use-them"},{default:e(()=>n[0]||(n[0]=[a("What are HOCs and when should you use them?")])),_:1,__:[0]}),s("ul",null,[s("li",null,[t(p,{to:"#hoc-approach"},{default:e(()=>n[1]||(n[1]=[a("HOC approach")])),_:1,__:[1]})]),s("li",null,[t(p,{to:"#hook-approach"},{default:e(()=>n[2]||(n[2]=[a("Hook approach")])),_:1,__:[2]})])])]),s("li",null,[t(p,{to:"#the-structure-of-a-higher-order-component"},{default:e(()=>n[3]||(n[3]=[a("The structure of a higher-order component")])),_:1,__:[3]})]),s("li",null,[t(p,{to:"#creating-a-higher-order-component"},{default:e(()=>n[4]||(n[4]=[a("Creating a higher-order component")])),_:1,__:[4]}),s("ul",null,[s("li",null,[t(p,{to:"#enhancing-the-component"},{default:e(()=>n[5]||(n[5]=[a("Enhancing the component")])),_:1,__:[5]})]),s("li",null,[t(p,{to:"#using-the-hoc"},{default:e(()=>n[6]||(n[6]=[a("Using the HOC")])),_:1,__:[6]})]),s("li",null,[t(p,{to:"#using-the-enhanced-component"},{default:e(()=>n[7]||(n[7]=[a("Using the enhanced component")])),_:1,__:[7]})])])]),s("li",null,[t(p,{to:"#using-higher-order-components"},{default:e(()=>n[8]||(n[8]=[a("Using higher-order components")])),_:1,__:[8]}),s("ul",null,[s("li",null,[t(p,{to:"#initializing-our-repository"},{default:e(()=>n[9]||(n[9]=[a("Initializing our repository")])),_:1,__:[9]})]),s("li",null,[t(p,{to:"#coding-our-components"},{default:e(()=>n[10]||(n[10]=[a("Coding our components")])),_:1,__:[10]})]),s("li",null,[t(p,{to:"#creating-and-using-our-hoc-function"},{default:e(()=>n[11]||(n[11]=[a("Creating and using our HOC function")])),_:1,__:[11]})])])]),s("li",null,[t(p,{to:"#sharing-props"},{default:e(()=>n[12]||(n[12]=[a("Sharing props")])),_:1,__:[12]})]),s("li",null,[t(p,{to:"#sharing-state-variables-with-hooks"},{default:e(()=>n[13]||(n[13]=[a("Sharing state variables with Hooks")])),_:1,__:[13]}),s("ul",null,[s("li",null,[t(p,{to:"#implementing-the-hoc"},{default:e(()=>n[14]||(n[14]=[a("Implementing the HOC")])),_:1,__:[14]})]),s("li",null,[t(p,{to:"#explanation"},{default:e(()=>n[15]||(n[15]=[a("Explanation")])),_:1,__:[15]})]),s("li",null,[t(p,{to:"#using-the-hoc-in-child-components"},{default:e(()=>n[16]||(n[16]=[a("Using the HOC in child components")])),_:1,__:[16]})])])]),s("li",null,[t(p,{to:"#passing-parameters"},{default:e(()=>n[17]||(n[17]=[a("Passing parameters")])),_:1,__:[17]}),s("ul",null,[s("li",null,[t(p,{to:"#enabling-support-for-parameters"},{default:e(()=>n[18]||(n[18]=[a("Enabling support for parameters")])),_:1,__:[18]})]),s("li",null,[t(p,{to:"#using-parameters-in-wrapped-components"},{default:e(()=>n[19]||(n[19]=[a("Using parameters in wrapped components")])),_:1,__:[19]})])])]),s("li",null,[t(p,{to:"#hocs-vs-hooks-how-to-choose"},{default:e(()=>n[20]||(n[20]=[a("HOCs vs. Hooks: How to choose")])),_:1,__:[20]}),s("ul",null,[s("li",null,[t(p,{to:"#component-transformation"},{default:e(()=>n[21]||(n[21]=[a("Component transformation")])),_:1,__:[21]})]),s("li",null,[t(p,{to:"#code-organization"},{default:e(()=>n[22]||(n[22]=[a("Code organization")])),_:1,__:[22]})])])]),s("li",null,[t(p,{to:"#modern-implementation-patterns"},{default:e(()=>n[23]||(n[23]=[a("Modern implementation patterns")])),_:1,__:[23]})]),s("li",null,[t(p,{to:"#performance-considerations"},{default:e(()=>n[24]||(n[24]=[a("Performance considerations")])),_:1,__:[24]})]),s("li",null,[t(p,{to:"#common-hoc-patterns-and-best-practices"},{default:e(()=>n[25]||(n[25]=[a("Common HOC patterns and best practices")])),_:1,__:[25]}),s("ul",null,[s("li",null,[t(p,{to:"#composition-of-multiple-hocs"},{default:e(()=>n[26]||(n[26]=[a("Composition of multiple HOCs")])),_:1,__:[26]})]),s("li",null,[t(p,{to:"#key-considerations-when-composing-hocs"},{default:e(()=>n[27]||(n[27]=[a("Key considerations when composing HOCs")])),_:1,__:[27]})]),s("li",null,[t(p,{to:"#adding-type-safety"},{default:e(()=>n[28]||(n[28]=[a("Adding type-safety")])),_:1,__:[28]})]),s("li",null,[t(p,{to:"#common-hoc-problem-passing-props-correctly"},{default:e(()=>n[29]||(n[29]=[a("Common HOC problem: Passing props correctly")])),_:1,__:[29]})])])]),s("li",null,[t(p,{to:"#conclusion"},{default:e(()=>n[30]||(n[30]=[a("Conclusion")])),_:1,__:[30]})])])]),n[115]||(n[115]=s("hr",null,null,-1)),t(m,{name:"How to use React higher-order components",desc:"Learn the fundamentals of React’s high-order components and play with some code samples to help you understand how it works.",url:"https://blog.logrocket.com/react-higher-order-components",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/react-higher-order-components/banner.png"}),n[116]||(n[116]=s("p",null,"Higher-order components (HOCs) powerful patterns in React that allow developers to enhance components by wrapping them with additional functionality. They provide a reusable way to manage cross-cutting concerns, such as authentication, logging, or global state management, without modifying the original component directly.",-1)),n[117]||(n[117]=s("figure",null,[s("img",{src:w,alt:"how to use react higher order components",tabindex:"0",loading:"lazy"}),s("figcaption",null,"how to use react higher order components")],-1)),s("p",null,[n[32]||(n[32]=a("While ")),t(c,{to:"/blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems.html"},{default:e(()=>n[31]||(n[31]=[s("strong",null,"Hooks",-1)])),_:1,__:[31]}),n[33]||(n[33]=a(" have largely replaced HOCs for logic reuse, HOCs still offer unique advantages in certain scenarios, particularly when working with legacy codebases or performing complex component transformations."))]),s("div",F,[n[39]||(n[39]=s("p",{class:"hint-container-title"},"Update history:",-1)),s("ul",null,[s("li",null,[n[35]||(n[35]=s("strong",null,[s("em",null,"20 February 2025")],-1)),n[36]||(n[36]=a(": Updated by ")),s("a",T,[t(o,{icon:"fas fa-globe"}),n[34]||(n[34]=a("Nelson Michael"))]),n[37]||(n[37]=a(" to address the evolving role of HOCs alongside hooks and modernize examples to better serve the current needs of developers"))]),n[38]||(n[38]=s("li",null,[s("strong",null,[s("em",null,"19 September 2023")])],-1))])]),n[118]||(n[118]=s("hr",null,null,-1)),s("p",null,[n[41]||(n[41]=a("When structuring a React application, developers often need to reuse logic across multiple components. Hooks have become the ")),t(c,{to:"/blog.logrocket.com/react-hooks-the-good-the-bad-and-the-ugly.html"},{default:e(()=>n[40]||(n[40]=[s("strong",null,"go-to solution",-1)])),_:1,__:[40]}),n[42]||(n[42]=a(" for state management and logic encapsulation since their introduction in React 16.8. However, HOCs remain useful in specific scenarios, particularly for complex component transformations and cross-cutting concerns."))]),n[119]||(n[119]=l(`<hr><h2 id="what-are-hocs-and-when-should-you-use-them" tabindex="-1"><a class="header-anchor" href="#what-are-hocs-and-when-should-you-use-them"><span>What are HOCs and when should you use them?</span></a></h2><p>A higher-order component is a function that takes a component as an argument and returns a new, enhanced component.</p><p>Both HOCs and Hooks encapsulate stateful logic, but they do so differently and are suited for different use cases.</p><p>To illustrate the difference, let’s compare two implementations of a simple counter feature—one using a HOC and another using a custom Hook.</p><h3 id="hoc-approach" tabindex="-1"><a class="header-anchor" href="#hoc-approach"><span>HOC approach</span></a></h3><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// HOC that adds counter functionality to a component</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">withCounter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">CounterWrapper</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> </span>
<span class="line">        <span class="token attr-name">count</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">increment</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">prev</span> <span class="token operator">=&gt;</span> prev <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hook-approach" tabindex="-1"><a class="header-anchor" href="#hook-approach"><span>Hook approach</span></a></h3><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// Custom Hook that provides counter functionality</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">useCounter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    count<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">prev</span> <span class="token operator">=&gt;</span> prev <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Usage</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Counter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span>count<span class="token punctuation">,</span> increment<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Clicked:</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+y+'" alt="A clicking increment" tabindex="0" loading="lazy"><figcaption>A clicking increment</figcaption></figure><p>Notice that while both approaches achieve similar functionality, the HOC pattern wraps an existing component to enhance it, whereas a custom Hook extracts reusable logic without altering the component hierarchy.</p><p>Overall, while both approaches manage state similarly, the HOC is ideal for wrapping and enhancing an existing component without directly modifying it, whereas a custom Hook offers a cleaner solution for sharing stateful logic across multiple components without adding an extra layer.</p><hr><h2 id="the-structure-of-a-higher-order-component" tabindex="-1"><a class="header-anchor" href="#the-structure-of-a-higher-order-component"><span>The structure of a higher-order component</span></a></h2>',14)),s("p",null,[n[44]||(n[44]=a("According to ")),s("a",P,[t(o,{icon:"fa-brands fa-react"}),n[43]||(n[43]=a("React’s documentation"))]),n[45]||(n[45]=a(", a typical React HOC has the following definition:"))]),n[120]||(n[120]=l(`<div class="hint-container info"><p class="hint-container-title">Info</p><blockquote><p>“A higher-order component is a function that takes in a component and returns a new component.”</p></blockquote></div><p>Using code, we can rewrite the above statement like so:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> newComponent <span class="token operator">=</span> <span class="token function">higherFunction</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In this line:</p><ul><li><code>newComponent</code> — The enhanced component</li><li><code>higherFunction</code> — A function that enhances <code>WrappedComponent</code></li><li><code>WrappedComponent</code> — The base component whose functionality we want to extend</li></ul><hr><h2 id="creating-a-higher-order-component" tabindex="-1"><a class="header-anchor" href="#creating-a-higher-order-component"><span>Creating a higher-order component</span></a></h2><p>First, create a function that takes the base component as an argument and returns a new component with added functionality. In a functional HOC, you can use Hooks for state and side effects:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">withEnhancement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">BaseComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">EnhancedComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// HOC-specific logic using hooks</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BaseComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="enhancing-the-component" tabindex="-1"><a class="header-anchor" href="#enhancing-the-component"><span>Enhancing the component</span></a></h3><p>Inside the <code>EnhancedComponent</code> function, you can use Hooks to manage state and perform side effects. Hooks like <code>useState</code>, <code>useEffect</code>, and <code>useRef</code> can be used to implement additional behavior:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">withEnhancement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">BaseComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">EnhancedComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Perform side effects here</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BaseComponent</span></span> <span class="token attr-name">count</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span> <span class="token attr-name">setCount</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>setCount<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using-the-hoc" tabindex="-1"><a class="header-anchor" href="#using-the-hoc"><span>Using the HOC</span></a></h3><p>To use your functional HOC, wrap a component by passing it as an argument to your HOC function. The result will be a new component with the enhanced functionality:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> EnhancedComponent <span class="token operator">=</span> <span class="token function">withEnhancement</span><span class="token punctuation">(</span>BaseComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="using-the-enhanced-component" tabindex="-1"><a class="header-anchor" href="#using-the-enhanced-component"><span>Using the enhanced component</span></a></h3><p>You can use <code>EnhancedComponent</code> in your application just like any other React component, with the added functionality from the HOC:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">EnhancedComponent</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the next segment of the article, we will see React’s HOC concept in action.</p><hr><h2 id="using-higher-order-components" tabindex="-1"><a class="header-anchor" href="#using-higher-order-components"><span>Using higher-order components</span></a></h2><p>Let’s dive into a practical use case for HOCs.</p><h3 id="initializing-our-repository" tabindex="-1"><a class="header-anchor" href="#initializing-our-repository"><span>Initializing our repository</span></a></h3><p>We first need to create a blank React project. To do so, execute the following commands:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">npx create-react-app hoc-tutorial </span>
<span class="line"><span class="token builtin class-name">cd</span> hoc-tutorial <span class="token comment">#navigate to the project folder.</span></span>
<span class="line"><span class="token builtin class-name">cd</span> src <span class="token comment">#go to codebase</span></span>
<span class="line"><span class="token function">mkdir</span> components <span class="token comment">#will hold all our custom components</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For this article, we will build two custom components to demonstrate HOC usage:</p>`,26)),s("ul",null,[s("li",null,[t(o,{icon:"fa-brands fa-js"}),n[46]||(n[46]=s("code",null,"ClickIncrease.js",-1)),n[47]||(n[47]=a(" — This component will render a button and a piece of text. When the user clicks the button (an ")),n[48]||(n[48]=s("code",null,"onClick",-1)),n[49]||(n[49]=a(" event), the ")),n[50]||(n[50]=s("code",null,"fontSize",-1)),n[51]||(n[51]=a(" property of the text will increase"))]),s("li",null,[t(o,{icon:"fa-brands fa-js"}),n[52]||(n[52]=s("code",null,"HoverIncrease.js",-1)),n[53]||(n[53]=a(" — Similar to ")),n[54]||(n[54]=s("code",null,"ClickIncrease",-1)),n[55]||(n[55]=a(", but it will listen for ")),n[56]||(n[56]=s("code",null,"onMouseOver",-1)),n[57]||(n[57]=a(" events instead"))])]),n[121]||(n[121]=s("p",null,[a("In your project, navigate to the "),s("code",null,"components"),a(" folder and create these two files. Once done, your file structure should look like this:")],-1)),n[122]||(n[122]=s("figure",null,[s("img",{src:C,alt:"File Structure",tabindex:"0",loading:"lazy"}),s("figcaption",null,"File Structure")],-1)),n[123]||(n[123]=s("p",null,"Now that we have laid out the groundwork for the project, let’s build our custom components.",-1)),n[124]||(n[124]=s("h3",{id:"coding-our-components",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#coding-our-components"},[s("span",null,"Coding our components")])],-1)),s("p",null,[n[58]||(n[58]=a("In ")),t(o,{icon:"fa-brands fa-js"}),n[59]||(n[59]=s("code",null,"ClickIncrease.js",-1)),n[60]||(n[60]=a(", write the following code:"))]),n[125]||(n[125]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/ClickIncrease.js"><span>components/ClickIncrease.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">ClickIncrease</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>fontSize<span class="token punctuation">,</span> setFontSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Set initial value to 10.   return (</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token parameter">size</span> <span class="token operator">=&gt;</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      Increase with click</span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>fontSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      Size of font: </span><span class="token punctuation">{</span>fontSize<span class="token punctuation">}</span><span class="token plain-text">px</span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> ClickIncrease<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[61]||(n[61]=a("Next, in ")),t(o,{icon:"fa-brands fa-js"}),n[62]||(n[62]=s("code",null,"HoverIncrease.js",-1)),n[63]||(n[63]=a(", use the following code:"))]),n[126]||(n[126]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/HoverIncrease.js"><span>components/HoverIncrease.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">HoverIncrease</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>fontSize<span class="token punctuation">,</span> setFontSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onMouseOver</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token parameter">size</span> <span class="token operator">=&gt;</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>fontSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Size of font: </span><span class="token punctuation">{</span>fontSize<span class="token punctuation">}</span><span class="token plain-text">px</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> HoverIncrease<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[64]||(n[64]=a("Finally, render these components in the main ")),t(o,{icon:"fa-brands fa-react"}),n[65]||(n[65]=s("code",null,"App.js",-1)),n[66]||(n[66]=a(" file:"))]),n[127]||(n[127]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.js"><span>App.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> ClickIncrease <span class="token keyword">from</span> <span class="token string">&#39;./components/ClickIncrease&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> HoverIncrease <span class="token keyword">from</span> <span class="token string">&#39;./components/HoverIncrease&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ClickIncrease</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HoverIncrease</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Let’s test it out! This is the expected result:</p><figure><img src="`+x+'" alt="Increase with click" tabindex="0" loading="lazy"><figcaption>Increase with click</figcaption></figure><h3 id="creating-and-using-our-hoc-function" tabindex="-1"><a class="header-anchor" href="#creating-and-using-our-hoc-function"><span>Creating and using our HOC function</span></a></h3>',4)),s("p",null,[n[67]||(n[67]=a("Within the ")),t(o,{icon:"fas fa-folder-open"}),n[68]||(n[68]=s("code",null,"components",-1)),n[69]||(n[69]=a(" folder, create a file called ")),t(o,{icon:"fa-brands fa-js"}),n[70]||(n[70]=s("code",null,"withCounter.js",-1)),n[71]||(n[71]=a(". Here, start by writing the following code:"))]),n[128]||(n[128]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/withCounter.js"><span>components/withCounter.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">UpdatedComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">OriginalComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">NewComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//render OriginalComponent and pass on its props.</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> NewComponent<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> UpdatedComponent<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Let’s deconstruct this code piece by piece. In the start, we created a function called <code>UpdatedComponent</code> that takes in an argument called <code>OriginalComponent</code>. In this case, the <code>OriginalComponent</code> will be the React element, which will be wrapped.</p><p>Then, we told React to render <code>OriginalComponent</code> to the UI. We will implement enhancement functionality later in this article.</p><p>When that’s done, it’s time to use the <code>UpdatedComponent</code> function in our app. To do so, first go to the <code>HoverIncrease.js</code> file and write the following lines:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="HoverIncrease.js"><span>HoverIncrease.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> withCounter <span class="token keyword">from</span> <span class="token string">&quot;./withCounter.js&quot;</span> <span class="token comment">//import the withCounter function</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ..further code ..</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">HoverIncrease</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ..further code</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// replace your &#39;export&#39; statement with:</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCounter</span><span class="token punctuation">(</span>HoverIncrease<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// We have now converted HoverIncrease to an HOC function.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Next, do the same process with the <code>ClickIncrease</code> module:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/ClickIncrease.js"><span>components/ClickIncrease.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> withCounter <span class="token keyword">from</span> <span class="token string">&quot;./withCounter&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">ClickIncrease</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//...further code</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCounter</span><span class="token punctuation">(</span>ClickIncrease<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// ClickIncrease is now a wrapped component of the withCounter method.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This will be the result:</p><figure><img src="`+j+'" alt="Size Of Font Increasing" tabindex="0" loading="lazy"><figcaption>Size Of Font Increasing</figcaption></figure><p>Notice that our result is unchanged. This is because we haven’t made changes to our HOC yet. In the next section, you will learn how to share props between our components.</p><hr><h2 id="sharing-props" tabindex="-1"><a class="header-anchor" href="#sharing-props"><span>Sharing props</span></a></h2><p>Using higher-order components, React allows developers to share props among wrapped components.</p>',13)),s("p",null,[n[72]||(n[72]=a("First, add a ")),n[73]||(n[73]=s("code",null,"name",-1)),n[74]||(n[74]=a(" prop in ")),t(o,{icon:"fa-brands fa-js"}),n[75]||(n[75]=s("code",null,"withCounter.js",-1)),n[76]||(n[76]=a(" as follows:"))]),n[129]||(n[129]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/withCounter.js"><span>components/withCounter.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">UpdatedComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">OriginalComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">NewComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">OriginalComponent</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LogRocket<span class="token punctuation">&quot;</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> NewComponent<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> UpdatedComponent<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Next, modify the child components to read this prop:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/HoverIncrease.js"><span>components/HoverIncrease.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">HoverIncrease</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      Value of &#39;name&#39; in HoverIncrease: </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCounter</span><span class="token punctuation">(</span>HoverIncrease<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/ClickIncrease.js"><span>components/ClickIncrease.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">ClickIncrease</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      Value of &#39;name&#39; in ClickIncrease: </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCounter</span><span class="token punctuation">(</span>ClickIncrease<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><figure><img src="`+H+'" alt="Value Of Name" tabindex="0" loading="lazy"><figcaption>Value Of Name</figcaption></figure><p>As shown above, HOCs allow developers to efficiently share props across multiple components.</p><hr><h2 id="sharing-state-variables-with-hooks" tabindex="-1"><a class="header-anchor" href="#sharing-state-variables-with-hooks"><span>Sharing state variables with Hooks</span></a></h2><p>Just like with props, we can share state variables using Hooks within HOCs. This enables us to encapsulate and reuse logic across multiple components.</p><h3 id="implementing-the-hoc" tabindex="-1"><a class="header-anchor" href="#implementing-the-hoc"><span>Implementing the HOC</span></a></h3>',10)),s("p",null,[n[77]||(n[77]=a("In ")),t(o,{icon:"fas fa-folder-open"}),n[78]||(n[78]=s("code",null,"components/",-1)),t(o,{icon:"fa-brands fa-js"}),n[79]||(n[79]=s("code",null,"withCounter.js",-1)),n[80]||(n[80]=a(", define an HOC that manages a ")),n[81]||(n[81]=s("code",null,"counter",-1)),n[82]||(n[82]=a(" state and an ")),n[83]||(n[83]=s("code",null,"incrementCounter",-1)),n[84]||(n[84]=a(" function:"))]),n[130]||(n[130]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/withCounter.js"><span>components/withCounter.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">withCounter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">OriginalComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">NewComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>counter<span class="token punctuation">,</span> setCounter<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// Initialize counter state</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">OriginalComponent</span></span></span>
<span class="line">        <span class="token attr-name">counter</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>counter<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">incrementCounter</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCounter</span><span class="token punctuation">(</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> NewComponent</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> withCounter<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="explanation" tabindex="-1"><a class="header-anchor" href="#explanation"><span>Explanation</span></a></h3><ul><li><strong>State initialization</strong>: — The <code>counter</code> state is initialized with a value of <code>10</code></li><li><strong>Increment function</strong>: — The <code>incrementCounter</code> function updates the counter value</li><li><strong>Prop forwarding</strong>: — The HOC passes <code>counter</code> and <code>incrementCounter</code> as props to the wrapped component</li></ul><h3 id="using-the-hoc-in-child-components" tabindex="-1"><a class="header-anchor" href="#using-the-hoc-in-child-components"><span>Using the HOC in child components</span></a></h3><p>Modify the <code>HoverIncrease</code> and <code>ClickIncrease</code> components to use the shared state and function:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/HoverIncrease.js"><span>components/HoverIncrease.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> withCounter <span class="token keyword">from</span> <span class="token string">&#39;./withCounter&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">HoverIncrease</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onMouseOver</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>incrementCounter<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Value of &#39;counter&#39; in HoverIncrease: </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>counter<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCounter</span><span class="token punctuation">(</span>HoverIncrease<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/ClickIncrease.js"><span>components/ClickIncrease.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> withCounter <span class="token keyword">from</span> <span class="token string">&#39;./withCounter&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">ClickIncrease</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>incrementCounter<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      Increment counter</span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Value of &#39;counter&#39; in ClickIncrease: </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>counter<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCounter</span><span class="token punctuation">(</span>ClickIncrease<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here is the expected result:</p><figure><img src="`+I+'" alt="Increment Counter" tabindex="0" loading="lazy"><figcaption>Increment Counter</figcaption></figure>',9)),s("p",null,[n[86]||(n[86]=a("While HOCs are useful for sharing logic across multiple components, they do not share state between different instances of wrapped components. If a shared state is required across multiple components, consider using ")),t(c,{to:"/blog.logrocket.com/react-context-tutorial.html"},{default:e(()=>n[85]||(n[85]=[s("strong",null,"React’s Context API",-1)])),_:1,__:[85]}),n[87]||(n[87]=a(", which provides an efficient way to manage global state."))]),n[131]||(n[131]=s("hr",null,null,-1)),n[132]||(n[132]=s("h2",{id:"passing-parameters",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#passing-parameters"},[s("span",null,"Passing parameters")])],-1)),n[133]||(n[133]=s("p",null,[a("Even though our code works, consider the following situation: what if we want to increment the value of "),s("code",null,"counter"),a(" with a custom value? Via HOCs, we can even tell React to pass specific data to certain child components. This is made possible with parameters.")],-1)),n[134]||(n[134]=s("h3",{id:"enabling-support-for-parameters",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#enabling-support-for-parameters"},[s("span",null,"Enabling support for parameters")])],-1)),s("p",null,[n[88]||(n[88]=a("Modify ")),t(o,{icon:"fas fa-folder-open"}),n[89]||(n[89]=s("code",null,"components/",-1)),t(o,{icon:"fa-brands fa-js"}),n[90]||(n[90]=s("code",null,"withCounter.js",-1)),n[91]||(n[91]=a(" to accept an ")),n[92]||(n[92]=s("code",null,"increaseCount",-1)),n[93]||(n[93]=a(" parameter:"))]),n[135]||(n[135]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/withCounter.js"><span>components/withCounter.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">//This function will now accept an &#39;increaseCount&#39; parameter.</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">UpdatedComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">OriginalComponent<span class="token punctuation">,</span> increaseCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">NewComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token comment">// this time, increment the &#39;size&#39; variable by &#39;increaseCount&#39;</span></span>
<span class="line">      incrementCounter<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCounter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> size <span class="token operator">+</span> increaseCount<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">//further code..</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In this piece of code, we informed React that our function will now take in an additional parameter called <code>increaseCount</code>.</p><h3 id="using-parameters-in-wrapped-components" tabindex="-1"><a class="header-anchor" href="#using-parameters-in-wrapped-components"><span>Using parameters in wrapped components</span></a></h3><p>Modify the <code>HoverIncrease</code> and <code>ClickIncrease</code> components to use this parameter:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">//In HoverIncrease, change the &#39;export&#39; statement:</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCounter</span><span class="token punctuation">(</span>HoverIncrease<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//value of increaseCount is 10.</span></span>
<span class="line"><span class="token comment">//this will increment the &#39;counter&#39; Hook by 10.</span></span>
<span class="line"><span class="token comment">//In ClickIncrease:</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCounter</span><span class="token punctuation">(</span>ClickIncrease<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//value of increaseCount is 3.</span></span>
<span class="line"><span class="token comment">//will increment the &#39;counter&#39; state by 3 steps.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By passing a custom value (<code>increaseCount</code>) to the HOC, we can dynamically control the increment behavior in each wrapped component.</p><p>Here is the expected result:</p><figure><img src="`+O+'" alt="Clicking Increment Counters" tabindex="0" loading="lazy"><figcaption>Clicking Increment Counters</figcaption></figure>',8)),s("p",null,[n[94]||(n[94]=a("In the end, the ")),t(o,{icon:"fa-brands fa-js"}),n[95]||(n[95]=s("code",null,"withCounter.js",-1)),n[96]||(n[96]=a(" file should look like this:"))]),n[136]||(n[136]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/withCounter.js"><span>components/withCounter.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">UpdatedComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">OriginalComponent<span class="token punctuation">,</span> increaseCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">NewComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>counter<span class="token punctuation">,</span> setCounter<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      name<span class="token operator">=</span><span class="token string">&quot;LogRocket&quot;</span></span>
<span class="line">      counter<span class="token operator">=</span><span class="token punctuation">{</span>counter<span class="token punctuation">}</span></span>
<span class="line">      incrementCounter<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCounter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> size <span class="token operator">+</span> increaseCount<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> NewComponent<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> UpdatedComponent<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),t(o,{icon:"fa-brands fa-js"}),n[137]||(n[137]=l(`<code>HoverIncrease.js</code> should look like this:<div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/HoverIncrease.js"><span>components/HoverIncrease.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> withCounter <span class="token keyword">from</span> <span class="token string">&quot;./withCounter&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">HoverIncrease</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>fontSize<span class="token punctuation">,</span> setFontSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> counter<span class="token punctuation">,</span> incrementCounter <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">    Increase on hover</span>
<span class="line">    Size <span class="token keyword">of</span> font <span class="token keyword">in</span> onMouseOver <span class="token keyword">function</span><span class="token operator">:</span> <span class="token punctuation">{</span>fontSize<span class="token punctuation">}</span></span>
<span class="line">    Value <span class="token keyword">of</span> <span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> <span class="token literal-property property">HoverIncrease</span><span class="token operator">:</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">incrementCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">    Increment counter Value <span class="token keyword">of</span> <span class="token string">&#39;counter&#39;</span> <span class="token keyword">in</span> <span class="token literal-property property">HoverIncrease</span><span class="token operator">:</span> <span class="token punctuation">{</span>counter<span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCounter</span><span class="token punctuation">(</span>HoverIncrease<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>And finally, your <code>ClickIncrease</code> component should have the following code:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> withCounter <span class="token keyword">from</span> <span class="token string">&quot;./withCounter&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">ClickIncrease</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> counter<span class="token punctuation">,</span> incrementCounter <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>fontSize<span class="token punctuation">,</span> setFontSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line"><span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">Increase <span class="token keyword">with</span> click</span>
<span class="line">Size <span class="token keyword">of</span> font <span class="token keyword">in</span> onClick <span class="token keyword">function</span><span class="token operator">:</span> <span class="token punctuation">{</span>fontSize<span class="token punctuation">}</span></span>
<span class="line">Value <span class="token keyword">of</span> <span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> <span class="token literal-property property">ClickIncrease</span><span class="token operator">:</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span>
<span class="line"><span class="token function">incrementCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>Increment counter</span>
<span class="line">Value <span class="token keyword">of</span> <span class="token string">&#39;counter&#39;</span> <span class="token keyword">in</span> <span class="token literal-property property">ClickIncrease</span><span class="token operator">:</span> <span class="token punctuation">{</span>counter<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCounter</span><span class="token punctuation">(</span>ClickIncrease<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="hocs-vs-hooks-how-to-choose" tabindex="-1"><a class="header-anchor" href="#hocs-vs-hooks-how-to-choose"><span>HOCs vs. Hooks: How to choose</span></a></h2><p>Choosing between higher-order components (HOCs) and Hooks depends on two key factors: component transformation and code organization.</p><h3 id="component-transformation" tabindex="-1"><a class="header-anchor" href="#component-transformation"><span>Component transformation</span></a></h3>`,9)),s("ul",null,[s("li",null,[n[100]||(n[100]=s("strong",null,"Use HOCs when you need to:",-1)),s("ul",null,[n[99]||(n[99]=s("li",null,"Modify the rendering behavior of components, such as conditionally rendering based on permissions",-1)),s("li",null,[n[98]||(n[98]=a("Handle cross-cutting concerns like authentication, logging, error handling, or ")),t(c,{to:"/blog.logrocket.com/react-conditional-rendering-9-methods.html"},{default:e(()=>n[97]||(n[97]=[s("strong",null,"conditional rendering",-1)])),_:1,__:[97]})])])]),n[101]||(n[101]=s("li",null,[s("strong",null,"Use Hooks when you need to:"),s("ul",null,[s("li",null,"Share stateful logic, such as form handling or data fetching, without altering the component hierarchy"),s("li",null,"Handle side effects, such as subscriptions, timers, or API calls that need to run on component mount or update")])],-1))]),n[138]||(n[138]=l(`<h3 id="code-organization" tabindex="-1"><a class="header-anchor" href="#code-organization"><span>Code organization</span></a></h3><ul><li><strong>HOCs</strong> — Excel at providing consistent component wrappers and managing complex component transformations</li><li><strong>Hooks</strong> — Allow you to compose stateful logic efficiently without introducing unnecessary layers in the component tree:</li></ul><figure><img src="https://paper-attachments.dropboxusercontent.com/s_D5E68C0C40BBE2A2BD0A43D7BFA01F32C04A2EE6B1898A4A374FDC5336287645_1739356282315_Screenshot+2025-02-12+at+11.30.39AM.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="modern-implementation-patterns" tabindex="-1"><a class="header-anchor" href="#modern-implementation-patterns"><span>Modern implementation patterns</span></a></h2><p>HOCs and Hooks can complement each other to create robust solutions. Below is a real-world authentication example:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// Authentication HOC</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">withAuth</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent<span class="token punctuation">,</span> requiredRole</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">AuthWrapper</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> isAuthenticated<span class="token punctuation">,</span> userRole <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Custom hook for auth state</span></span>
<span class="line">    <span class="token keyword">const</span> navigate <span class="token operator">=</span> <span class="token function">useNavigate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isAuthenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredRole <span class="token operator">&amp;&amp;</span> userRole <span class="token operator">!==</span> requiredRole<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">&#39;/unauthorized&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>isAuthenticated<span class="token punctuation">,</span> userRole<span class="token punctuation">,</span> navigate<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isAuthenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// Optionally return a loader while determining authentication</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Usage with a protected component</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">AdminDashboard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Admin Dashboard Content</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withAuth</span><span class="token punctuation">(</span>AdminDashboard<span class="token punctuation">,</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here’s another example demonstrating performance optimization using Hooks within an HOC:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// Performance optimization HOC using hooks</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">withDataFetching</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent<span class="token punctuation">,</span> fetchConfig</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">DataFetchingWrapper</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">,</span> setError<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>loading<span class="token punctuation">,</span> setLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> cache <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useCacheContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> notify <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">const</span> cachedData <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fetchConfig<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedData<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">setData</span><span class="token punctuation">(</span>cachedData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">          <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>fetchConfig<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">          cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>fetchConfig<span class="token punctuation">.</span>key<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token function">setData</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">setError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Failed to fetch data&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fetchConfig<span class="token punctuation">.</span>url<span class="token punctuation">,</span> fetchConfig<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span> <span class="token attr-name">loading</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>loading<span class="token punctuation">}</span></span> <span class="token attr-name">error</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>error<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)),s("p",null,[n[103]||(n[103]=a("For a broader perspective on advanced React logic reuse, see “")),t(c,{to:"/blog.logrocket.com/modern-guide-react-state-patterns.html"},{default:e(()=>n[102]||(n[102]=[s("strong",null,"The modern guide to React state patterns",-1)])),_:1,__:[102]}),n[104]||(n[104]=a(".”"))]),n[139]||(n[139]=s("hr",null,null,-1)),n[140]||(n[140]=s("h2",{id:"performance-considerations",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#performance-considerations"},[s("span",null,"Performance considerations")])],-1)),s("p",null,[n[106]||(n[106]=a("If your HOC involves expensive computations, consider ")),t(c,{to:"/blog.logrocket.com/death-by-a-thousand-cuts-a-checklist-for-eliminating-common-react-performance-issues.html"},{default:e(()=>n[105]||(n[105]=[s("strong",null,"performance optimization techniques",-1)])),_:1,__:[105]}),n[107]||(n[107]=a(" like memoization to prevent unnecessary re-renders. Below is an example using ")),n[108]||(n[108]=s("code",null,"useMemo",-1)),n[109]||(n[109]=a(" and ")),n[110]||(n[110]=s("code",null,"React.memo",-1)),n[111]||(n[111]=a(":"))]),n[141]||(n[141]=l(`<div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// Assume expensiveDataProcessing is an expensive function that processes props.data</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">expensiveDataProcessing</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token comment">// ...expensive computations... </span></span>
<span class="line">  <span class="token keyword">return</span> data<span class="token punctuation">;</span> <span class="token comment">// Replace with the actual processed result </span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">withOptimizedData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">OptimizedDataWrapper</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token keyword">const</span> memoizedProps <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">        <span class="token operator">...</span>props<span class="token punctuation">,</span> </span>
<span class="line">        <span class="token literal-property property">processedData</span><span class="token operator">:</span> <span class="token function">expensiveDataProcessing</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">.</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>memoizedProps<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span> </span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>OptimizedDataWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> withOptimizedData<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="common-hoc-patterns-and-best-practices" tabindex="-1"><a class="header-anchor" href="#common-hoc-patterns-and-best-practices"><span>Common HOC patterns and best practices</span></a></h2><h3 id="composition-of-multiple-hocs" tabindex="-1"><a class="header-anchor" href="#composition-of-multiple-hocs"><span>Composition of multiple HOCs</span></a></h3>`,4)),s("p",null,[n[113]||(n[113]=a("When enhancing a base component with several cross-cutting concerns (such as authentication, ")),t(c,{to:"/blog.logrocket.com/fetch-api-node-js.html"},{default:e(()=>n[112]||(n[112]=[s("strong",null,"data fetching",-1)])),_:1,__:[112]}),n[114]||(n[114]=a(", error handling, and analytics), you can compose multiple HOCs into one."))]),n[142]||(n[142]=l(`<p>To compose multiple HOCs directly:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> composedComponent <span class="token operator">=</span> <span class="token function">withAuth</span><span class="token punctuation">(</span><span class="token function">withData</span><span class="token punctuation">(</span><span class="token function">withLogging</span><span class="token punctuation">(</span>BaseComponent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Alternatively, use a <code>compose</code> utility to combine multiple functions from right to left:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// Utility</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">compose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>functions</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span></span>
<span class="line">  functions<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Usage</span></span>
<span class="line"><span class="token keyword">const</span> composedComponent <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>withAuth<span class="token punctuation">,</span> withData<span class="token punctuation">,</span> withLogging<span class="token punctuation">)</span><span class="token punctuation">(</span>BaseComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://paper-attachments.dropboxusercontent.com/s_D5E68C0C40BBE2A2BD0A43D7BFA01F32C04A2EE6B1898A4A374FDC5336287645_1739358942323_Screenshot+2025-02-12+at+12.15.22PM.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="key-considerations-when-composing-hocs" tabindex="-1"><a class="header-anchor" href="#key-considerations-when-composing-hocs"><span>Key considerations when composing HOCs</span></a></h3><h4 id="order-matters" tabindex="-1"><a class="header-anchor" href="#order-matters"><span>Order matters:</span></a></h4><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// These will behave differently:</span></span>
<span class="line"><span class="token keyword">const</span> enhance1 <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>withAuth<span class="token punctuation">,</span> withDataFetching<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> enhance2 <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>withDataFetching<span class="token punctuation">,</span> withAuth<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="props-flow" tabindex="-1"><a class="header-anchor" href="#props-flow"><span>Props flow</span></a></h4><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// Props flow through each HOC in the chain</span></span>
<span class="line"><span class="token keyword">const</span> withProps <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span></span>
<span class="line">  withAuth<span class="token punctuation">,</span>        <span class="token comment">// Adds isAuthenticated</span></span>
<span class="line">  withDataFetching <span class="token comment">// Adds data, loading</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Final component receives: { isAuthenticated, data, loading, ...originalProps }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="performance-considerations-1" tabindex="-1"><a class="header-anchor" href="#performance-considerations-1"><span>Performance considerations:</span></a></h4><p>Avoid excessive composition:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> tooManyHOCs <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span></span>
<span class="line">  withAuth<span class="token punctuation">,</span></span>
<span class="line">  withData<span class="token punctuation">,</span></span>
<span class="line">  withLogging<span class="token punctuation">,</span></span>
<span class="line">  withTheme<span class="token punctuation">,</span></span>
<span class="line">  withTranslation<span class="token punctuation">,</span></span>
<span class="line">  withRouter<span class="token punctuation">,</span></span>
<span class="line">  withRedux</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Each layer adds complexity and potential performance impact</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A better approach is to combine related concerns:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> withDataFeatures <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span></span>
<span class="line">  withData<span class="token punctuation">,</span></span>
<span class="line">  withLoading<span class="token punctuation">,</span></span>
<span class="line">  withError</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> withAppFeatures <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span></span>
<span class="line">  withAuth<span class="token punctuation">,</span></span>
<span class="line">  withAnalytics</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="debugging" tabindex="-1"><a class="header-anchor" href="#debugging"><span>Debugging:</span></a></h4><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">withDebug</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">DebugWrapper</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Component:&#39;</span><span class="token punctuation">,</span> WrappedComponent<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Props:&#39;</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> enhance <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span></span>
<span class="line">  withDebug<span class="token punctuation">,</span> <span class="token comment">// Add at different positions to debug specific layers</span></span>
<span class="line">  withAuth<span class="token punctuation">,</span></span>
<span class="line">  withDebug<span class="token punctuation">,</span></span>
<span class="line">  withDataFetching</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="reusable-compositions" tabindex="-1"><a class="header-anchor" href="#reusable-compositions"><span>Reusable compositions:</span></a></h4><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> withDataProtection <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span></span>
<span class="line">  withAuth<span class="token punctuation">,</span></span>
<span class="line">  withErrorBoundary<span class="token punctuation">,</span></span>
<span class="line">  withLoading</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> withAnalytics <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span></span>
<span class="line">  withTracking<span class="token punctuation">,</span></span>
<span class="line">  withMetrics<span class="token punctuation">,</span></span>
<span class="line">  withLogging</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Use them together or separately</span></span>
<span class="line"><span class="token keyword">const</span> EnhancedComponent <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span></span>
<span class="line">  withDataProtection<span class="token punctuation">,</span></span>
<span class="line">  withAnalytics</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">(</span>BaseComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="adding-type-safety" tabindex="-1"><a class="header-anchor" href="#adding-type-safety"><span>Adding type-safety</span></a></h3><p>Ensuring type safety for HOCs improves maintainability. Below is an example of a type-safe HOC in TypeScript:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">WithDataProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  data<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">  loading<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">  error<span class="token operator">:</span> Error <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">FetchConfig</span> <span class="token punctuation">{</span></span>
<span class="line">  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">withData</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">P</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">  WrappedComponent<span class="token operator">:</span> React<span class="token punctuation">.</span>ComponentType<span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">&amp;</span> WithDataProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  fetchConfig<span class="token operator">:</span> FetchConfig</span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">WithDataComponent</span><span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>loading<span class="token punctuation">,</span> setLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">,</span> setError<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>Error <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">fetch</span><span class="token punctuation">(</span>fetchConfig<span class="token punctuation">.</span>url<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">setData</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">setError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fetchConfig<span class="token punctuation">.</span>url<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span> <span class="token attr-name">loading</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>loading<span class="token punctuation">}</span></span> <span class="token attr-name">error</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>error<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> withData<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="common-hoc-problem-passing-props-correctly" tabindex="-1"><a class="header-anchor" href="#common-hoc-problem-passing-props-correctly"><span>Common HOC problem: Passing props correctly</span></a></h3><p>One important thing to note is that the process of passing down props to an HOC’s child component is different than that of a non-HOC component.</p><p>For example, look at the following code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.jsx"><span>App.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token comment">/*Pass in a &#39;secretWord&#39; prop*/</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">HoverIncrease</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// read prop value:</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Value of secretWord: &quot;</span> <span class="token operator">+</span> props<span class="token punctuation">.</span>secretWord<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// further code..</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In theory, we should get the message <code>Value of secretWord: pineapple</code> in the console. However, that’s not the case here:</p><figure><img src="`+A+`" alt="Value of secretword" tabindex="0" loading="lazy"><figcaption>Value of secretword</figcaption></figure><p>In this case, the <code>secretWord</code> prop is actually being passed to the <code>withCounter</code> function and not to the <code>HoverIncrease</code> component.</p><p>To solve this issue, we have to make a simple change to <code>withCounter.js</code>:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">UpdatedComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">OriginalComponent<span class="token punctuation">,</span> increaseCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">NewComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token comment">// Pass down all incoming props to the HOC&#39;s children:</span></span>
<span class="line">      <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> NewComponent<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This minor fix solves our problem:</p><figure><img src="`+z+'" alt="Value of secretword with problem fixed" tabindex="0" loading="lazy"><figcaption>Value of secretword with problem fixed</figcaption></figure><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>This article covered the fundamentals of React’s higher-order components, including best practices, performance optimizations, debugging strategies, and type safety. Experimenting with the provided code samples will help solidify your understanding. Happy coding!</p>',36)),h(" TODO: add ARTICLE CARD "),t(u,r(d({title:"How to use React higher-order components",desc:"Learn the fundamentals of React’s high-order components and play with some code samples to help you understand how it works.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-higher-order-components.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const q=v(S,[["render",W]]),N=JSON.parse('{"path":"/blog.logrocket.com/react-higher-order-components.html","title":"How to use React higher-order components","lang":"en-US","frontmatter":{"lang":"en-US","title":"How to use React higher-order components","description":"Article(s) > How to use React higher-order components","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to use React higher-order components\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/clicking-increment-1.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/file-structure-1.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/increase-with-click-1.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/site-font-increasing.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/value-name.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/increment-counter-1.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/clicking-increment-counters-1.webp\\",\\"https://paper-attachments.dropboxusercontent.com/s_D5E68C0C40BBE2A2BD0A43D7BFA01F32C04A2EE6B1898A4A374FDC5336287645_1739356282315_Screenshot+2025-02-12+at+11.30.39AM.png\\",\\"https://paper-attachments.dropboxusercontent.com/s_D5E68C0C40BBE2A2BD0A43D7BFA01F32C04A2EE6B1898A4A374FDC5336287645_1739358942323_Screenshot+2025-02-12+at+12.15.22PM.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/value-secretword.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/value-secretword-problem-fixed.png\\"],\\"datePublished\\":\\"2025-02-20T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hussain Arif\\",\\"url\\":\\"https://blog.logrocket.com/author/hussain-arif/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-higher-order-components.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to use React higher-order components"}],["meta",{"property":"og:description","content":"Article(s) > How to use React higher-order components"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-higher-order-components/banner.png"}],["meta",{"name":"twitter:image:alt","content":"How to use React higher-order components"}],["meta",{"property":"article:author","content":"Hussain Arif"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-02-20T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How to use React higher-order components"},{"property":"og:description","content":"How to use React higher-order components"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-higher-order-components.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2025-02-20T00:00:00.000Z","isOriginal":false,"author":[{"name":"Hussain Arif","url":"https://blog.logrocket.com/author/hussain-arif/"}],"cover":"/assets/image/blog.logrocket.com/react-higher-order-components/banner.png"},"git":{},"readingTime":{"minutes":11.36,"words":3408},"filePathRelative":"blog.logrocket.com/react-higher-order-components.md","copyright":{"author":"Hussain Arif"}}');export{q as comp,N as data};
