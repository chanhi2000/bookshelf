import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as a,b as v,a as h,t as b,n as i,g as u,w as p,e as t,r as o,o as f}from"./app-BVguHYKu.js";const g={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},C={class:"table-of-contents"},x={href:"https://github.com/MarcinMoskala/coroutines-benchmarks/blob/master/src/jmh/java/me/champeau/jmh/ReflectionBenchmark.kt",target:"_blank",rel:"noopener noreferrer"};function I(r,n){const l=o("VPCard"),e=o("router-link"),c=o("SiteInfo"),k=o("VPIcon");return f(),m("div",null,[s("h1",y,[s("a",w,[s("span",null,b(r.$frontmatter.title)+" 관련",1)])]),a(l,i(u({title:"Java > Article(s)",desc:"Article(s)",link:"/programming/java/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",C,[s("ul",null,[s("li",null,[a(e,{to:"#tl-dr"},{default:p(()=>n[0]||(n[0]=[t("TL;DR")])),_:1,__:[0]})]),s("li",null,[a(e,{to:"#introduction"},{default:p(()=>n[1]||(n[1]=[t("Introduction")])),_:1,__:[1]})]),s("li",null,[a(e,{to:"#simple-calls-performance"},{default:p(()=>n[2]||(n[2]=[t("Simple calls performance")])),_:1,__:[2]})]),s("li",null,[a(e,{to:"#reflection-performance"},{default:p(()=>n[3]||(n[3]=[t("Reflection performance")])),_:1,__:[3]})]),s("li",null,[a(e,{to:"#nullability"},{default:p(()=>n[4]||(n[4]=[t("Nullability")])),_:1,__:[4]})]),s("li",null,[a(e,{to:"#synchronization"},{default:p(()=>n[5]||(n[5]=[t("Synchronization")])),_:1,__:[5]})]),s("li",null,[a(e,{to:"#logging"},{default:p(()=>n[6]||(n[6]=[t("Logging")])),_:1,__:[6]})]),s("li",null,[a(e,{to:"#conclusion"},{default:p(()=>n[7]||(n[7]=[t("Conclusion")])),_:1,__:[7]})])])]),n[13]||(n[13]=s("hr",null,null,-1)),a(c,{name:"Is reflection slowing down your code?",desc:"Let's benchmark reflection and see how it affects the performance of your code.",url:"https://kt.academy/article/benchmark-reflection",logo:"https://kt.academy/logo.png",preview:"https://marcinmoskala.com/kt-academy-articles/promotion/benchmark-reflection.jpg"}),s("p",null,[n[11]||(n[11]=t("Being a youngster programmer, I was always told that reflection is slow and should be avoided, but I just couldn't observe this slowness in any real measures. That is why I decided to make some benchmarks to see how reflection really performs, and as it turns out, it is only slow when we compare it to regular calls, that are extremely fast. If we compare it to other popular operations, like logging or synchronization, it is not that slow. Let me show you some benchmarks (complete code is available ")),s("a",x,[n[8]||(n[8]=t("here (")),a(k,{icon:"iconfont icon-github"}),n[9]||(n[9]=s("code",null,"MarcinMoskala/coroutines-benchmarks",-1)),n[10]||(n[10]=t(")"))]),n[12]||(n[12]=t(")"))]),a(c,{name:"MarcinMoskala/coroutines-benchmarks",desc:"coroutines-benchmarks/src/jmh/java/me/champeau/jmh/ReflectionBenchmark.kt at master",url:"https://github.com/MarcinMoskala/coroutines-benchmarks/blob/master/src/jmh/java/me/champeau/jmh/ReflectionBenchmark.kt/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/b19f9935ff76db25bb5f44abc915354c3bea6bbc45f5f5a2871f844c457e989b/MarcinMoskala/coroutines-benchmarks"}),n[14]||(n[14]=v(`<hr><h2 id="tl-dr" tabindex="-1"><a class="header-anchor" href="#tl-dr"><span>TL;DR</span></a></h2><p>Function call using reflection is much slower than a regular function call, but it is not that slow when compared to other popular operations. It has a comparable cost to synchronization, and it is much faster than logging. The below table presents a rough estimation of the cost of different operations:</p><table><thead><tr><th style="text-align:left;">Operation</th><th style="text-align:left;">Rounded cost <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">ns</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span></span></span></span></th></tr></thead><tbody><tr><td style="text-align:left;">Function call</td><td style="text-align:left;">0.1</td></tr><tr><td style="text-align:left;">Operating on a nullable value</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">Suspending function call</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">Synchronization</td><td style="text-align:left;">10</td></tr><tr><td style="text-align:left;">Function call with reflection</td><td style="text-align:left;">10</td></tr><tr><td style="text-align:left;">Printing / Logging</td><td style="text-align:left;">10,000</td></tr><tr><td style="text-align:left;">Making network request</td><td style="text-align:left;">100,000,000</td></tr></tbody></table><hr><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>Before we start, let me introduce you a simple counter, whose methods we will call in the benchmarks:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@State</span><span class="token punctuation">(</span>Scope<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">open</span> <span class="token keyword">class</span> Counter <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"> </span>
<span class="line">  <span class="token annotation builtin">@CompilerControl</span><span class="token punctuation">(</span>CompilerControl<span class="token punctuation">.</span>Mode<span class="token punctuation">.</span>DONT_INLINE<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">fun</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> value<span class="token operator">++</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation builtin">@CompilerControl</span><span class="token punctuation">(</span>CompilerControl<span class="token punctuation">.</span>Mode<span class="token punctuation">.</span>DONT_INLINE<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">fun</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> value<span class="token operator">--</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation builtin">@CompilerControl</span><span class="token punctuation">(</span>CompilerControl<span class="token punctuation">.</span>Mode<span class="token punctuation">.</span>DONT_INLINE<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> value</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I will call its methods in the bundle: increment, decrement, increment, get. I will do it in a loop of 1,000,000 iterations. I will compare the performance of regular calls, Java reflection calls, and Kotlin reflection calls. Then I will compare it to other popular operations.</p><hr><h2 id="simple-calls-performance" tabindex="-1"><a class="header-anchor" href="#simple-calls-performance"><span>Simple calls performance</span></a></h2><p>First, can call counter using a regular calls 1,000,000 times. Benchmark told me it takes 0.5 ms, so 0.1 ns per function call. This result seems legit. I was though at my university that calling a function takes around 5-10 ns, but since then computers got faster, modern research shows that a function call can take between 0.1 and 1 ns, so 0.1 ns seems possible.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">// Takes 0.5 ms</span></span>
<span class="line"><span class="token annotation builtin">@Benchmark</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">regularCall</span><span class="token punctuation">(</span>bh<span class="token operator">:</span> Blackhole<span class="token punctuation">,</span> counter<span class="token operator">:</span> Counter<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1_000_000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    counter<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  bh<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="reflection-performance" tabindex="-1"><a class="header-anchor" href="#reflection-performance"><span>Reflection performance</span></a></h2><p>Now compare it to reflection. I will start with the simple function reference call, although it is not fair because Kotlin compiler optimizes out this particular kind of calls. It takes 0.6 ms, so it is as fast as regular calls. Such calls are popular alternatives to lambda expressions, and in such cases, they do not introduce any overhead.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">// Takes 0.6 ms</span></span>
<span class="line"><span class="token annotation builtin">@Benchmark</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">simpleKotlinReflectionCall</span><span class="token punctuation">(</span>bh<span class="token operator">:</span> Blackhole<span class="token punctuation">,</span> counter<span class="token operator">:</span> Counter<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1_000_000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span>Counter<span class="token operator">::</span>increment<span class="token punctuation">)</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">(</span>Counter<span class="token operator">::</span>decrement<span class="token punctuation">)</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">(</span>Counter<span class="token operator">::</span>increment<span class="token punctuation">)</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">(</span>Counter<span class="token operator">::</span><span class="token keyword">get</span><span class="token punctuation">)</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  bh<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ok, let&#39;s move to some real reflection, and here we need to make a decision if we use Kotlin of Java reflection. Java reflection is slightly faster, as it requires no additional wrappers, so getting methods and calling it 100,000 times takes 111 ms (28 ns per call). The same operation with Kotlin reflection takes 166 ms (41 ns per call).</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">// Takes 111 ms/op</span></span>
<span class="line"><span class="token annotation builtin">@Benchmark</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">javaReflectionCall</span><span class="token punctuation">(</span>bh<span class="token operator">:</span> Blackhole<span class="token punctuation">,</span> counter<span class="token operator">:</span> Counter<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">val</span> increment <span class="token operator">=</span> Counter<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;increment&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">val</span> decrement <span class="token operator">=</span> Counter<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;decrement&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">val</span> <span class="token keyword">get</span> <span class="token operator">=</span> Counter<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;get&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1_000_000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    increment<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">    decrement<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">    increment<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">get</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  bh<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Takes 166 ms/op</span></span>
<span class="line"><span class="token annotation builtin">@Benchmark</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">kotlinReflectionCall</span><span class="token punctuation">(</span>bh<span class="token operator">:</span> Blackhole<span class="token punctuation">,</span> counter<span class="token operator">:</span> Counter<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">val</span> increment <span class="token operator">=</span> Counter<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>members<span class="token punctuation">.</span><span class="token function">first</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;increment&quot;</span></span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">val</span> decrement <span class="token operator">=</span> Counter<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>members<span class="token punctuation">.</span><span class="token function">first</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;decrement&quot;</span></span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">val</span> <span class="token keyword">get</span> <span class="token operator">=</span> Counter<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>members<span class="token punctuation">.</span><span class="token function">first</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;get&quot;</span></span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1_000_000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    increment<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">    decrement<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">    increment<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">get</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  bh<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Those are cases where finding methods happens only once, and we call them many times. If we need to find methods every time we call them, it will be much slower. To be fair, most libraries optimize reflection use by caching methods, so that is the above case, but we should also see what the consequences of not doing it are. Using reflection, where finding methods happens every time we call them, takes 168.9 ms.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">// Takes 168.951 ± 0.618  ms/op</span></span>
<span class="line"><span class="token annotation builtin">@Benchmark</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">kotlinReflectionCallWithFinding</span><span class="token punctuation">(</span>bh<span class="token operator">:</span> Blackhole<span class="token punctuation">,</span> counter<span class="token operator">:</span> Counter<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1_000_000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    Counter<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>members<span class="token punctuation">.</span><span class="token function">first</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;increment&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">    Counter<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>members<span class="token punctuation">.</span><span class="token function">first</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;decrement&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">    Counter<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>members<span class="token punctuation">.</span><span class="token function">first</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;increment&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">    Counter<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>members<span class="token punctuation">.</span><span class="token function">first</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;get&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  bh<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can see that reflection is much slower than making a regular call, say a hundred times smaller, but how does it compare to other operations? Let&#39;s check some other popular operations.</p><hr><h2 id="nullability" tabindex="-1"><a class="header-anchor" href="#nullability"><span>Nullability</span></a></h2><p>Let&#39;s start with something simple, like making our value nullable. Such a simple change requires a couple of additional operations: a wrapped integer must be created, add some nullability checks, and so on. Just this simple change makes our operations take 14 ms, which is an order of magnitude faster than reflection, but still much slower than regular calls.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">// Takes 14 ms/op</span></span>
<span class="line"><span class="token annotation builtin">@Benchmark</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">nullableValueIncrement</span><span class="token punctuation">(</span>bh<span class="token operator">:</span> Blackhole<span class="token punctuation">,</span> counter<span class="token operator">:</span> Counter<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> counter<span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">  <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1_000_000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    counter <span class="token operator">=</span> counter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    counter <span class="token operator">=</span> counter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">dec</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    counter <span class="token operator">=</span> counter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    counter <span class="token comment">// This is optimized out, but it does influence conclusions</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  bh<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="synchronization" tabindex="-1"><a class="header-anchor" href="#synchronization"><span>Synchronization</span></a></h2><p>ReflectionBenchmark.suspendingCounterCall avgt 5 13.037 ± 2.720 ms/op</p><p>How about synchronization? There are a few ways how we can synchronize our counter. The simplest one is using an atomic integer. That small change makes our operations take 50 ms. It is the same order of magnitude as reflection.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">// Takes 50 ms/op</span></span>
<span class="line"><span class="token annotation builtin">@Benchmark</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">atomicCounterCall</span><span class="token punctuation">(</span>bh<span class="token operator">:</span> Blackhole<span class="token punctuation">,</span> counter<span class="token operator">:</span> AtomicCounter<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1_000_000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    counter<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  bh<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@State</span><span class="token punctuation">(</span>Scope<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">open</span> <span class="token keyword">class</span> AtomicCounter <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation builtin">@CompilerControl</span><span class="token punctuation">(</span>CompilerControl<span class="token punctuation">.</span>Mode<span class="token punctuation">.</span>DONT_INLINE<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">fun</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation builtin">@CompilerControl</span><span class="token punctuation">(</span>CompilerControl<span class="token punctuation">.</span>Mode<span class="token punctuation">.</span>DONT_INLINE<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">fun</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation builtin">@CompilerControl</span><span class="token punctuation">(</span>CompilerControl<span class="token punctuation">.</span>Mode<span class="token punctuation">.</span>DONT_INLINE<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> value</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Another way is to use a synchronized block. To my surprise, it turned out to be faster than atomic integer, taking only 22 ms. I guess it is because there was no actual contention in this case, as we are running only one thread. My other experiments show that in a multi-threaded environment, atomic integer is faster, and synchronized block takes longer than that, and synchronization has a cost comparable to reflection.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">// Takes 22 ms/op</span></span>
<span class="line"><span class="token annotation builtin">@Benchmark</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">synchronizedCounterCall</span><span class="token punctuation">(</span>bh<span class="token operator">:</span> Blackhole<span class="token punctuation">,</span> counter<span class="token operator">:</span> SynchronizedCounter<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1_000_000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    counter<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  bh<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@State</span><span class="token punctuation">(</span>Scope<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">open</span> <span class="token keyword">class</span> SynchronizedCounter <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation builtin">@CompilerControl</span><span class="token punctuation">(</span>CompilerControl<span class="token punctuation">.</span>Mode<span class="token punctuation">.</span>DONT_INLINE<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">fun</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    value<span class="token operator">++</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation builtin">@CompilerControl</span><span class="token punctuation">(</span>CompilerControl<span class="token punctuation">.</span>Mode<span class="token punctuation">.</span>DONT_INLINE<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">fun</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    value<span class="token operator">--</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation builtin">@CompilerControl</span><span class="token punctuation">(</span>CompilerControl<span class="token punctuation">.</span>Mode<span class="token punctuation">.</span>DONT_INLINE<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="logging" tabindex="-1"><a class="header-anchor" href="#logging"><span>Logging</span></a></h2><p>How about logging? Logging is a popular operation, and I never herd anyone saying that we should not use it because it is slow. I tried to check it by adding simple <code>println</code> to method calls, and my computer quickly got drained out of memory. To avoid it, I made texts to print as short as possible, used <code>print</code>, and limited the number of iterations to 10,000 (from 1,000,000). It takes 192 ms, so for regular number of operations it should take around 19,204 ms. That is longer than reflection by several orders of magnitude, even unoptimized reflection.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">// Takes 192 ms/op</span></span>
<span class="line"><span class="token comment">// so for 1,000,000 operations it should take around 19,204 ms for the same number of operations</span></span>
<span class="line"><span class="token annotation builtin">@Benchmark</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">printingCounterCall</span><span class="token punctuation">(</span>bh<span class="token operator">:</span> Blackhole<span class="token punctuation">,</span> counter<span class="token operator">:</span> PrintingCounter<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">10_000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    counter<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  bh<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@State</span><span class="token punctuation">(</span>Scope<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">open</span> <span class="token keyword">class</span> PrintingCounter <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">fun</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    value<span class="token operator">++</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">fun</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;D&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    value<span class="token operator">--</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;G&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    value</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Reflection is much slower than a regular function call, but it is not that slow when compared to other popular operations. It has a comparable cost to synchronization, and it is much faster than logging. We do not consider the costs of many things in so many places, and I do not understand why reflection is so often pointed out as something that should be avoided. Instead, I believe that every developer should understand the order of magnitude of costs of different operations, and then decide if the cost of reflection is acceptable in a given case.</p><p>Here is a summary of the results for my computer:</p><table><thead><tr><th style="text-align:left;">Operation</th><th style="text-align:left;">Rounded cost <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">ns</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span></span></span></span></th></tr></thead><tbody><tr><td style="text-align:left;">Function call</td><td style="text-align:left;">0.1</td></tr><tr><td style="text-align:left;">Operating on a nullable value</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">Suspending function call</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">Synchronization</td><td style="text-align:left;">10</td></tr><tr><td style="text-align:left;">Function call with reflection</td><td style="text-align:left;">10</td></tr><tr><td style="text-align:left;">Printing / Logging</td><td style="text-align:left;">10,000</td></tr><tr><td style="text-align:left;">Making network request</td><td style="text-align:left;">100,000,000</td></tr></tbody></table>`,42)),h(" TODO: add ARTICLE CARD "),a(l,i(u({title:"Is reflection slowing down your code?",desc:"Let's benchmark reflection and see how it affects the performance of your code.",link:"https://chanhi2000.github.io/bookshelf/kt.academy/benchmark-reflection.html",logo:"https://kt.academy/logo.png",background:"rgba(243,139,49,0.2)"})),null,16)])}const M=d(g,[["render",I]]),N=JSON.parse('{"path":"/kt.academy/benchmark-reflection.html","title":"Is reflection slowing down your code?","lang":"en-US","frontmatter":{"lang":"en-US","title":"Is reflection slowing down your code?","description":"Article(s) > Is reflection slowing down your code?","icon":"iconfont icon-kotlin","category":["Java","Kotlin","Article(s)"],"tag":["blog","kt.academy","java","kotlin"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Is reflection slowing down your code?\\",\\"image\\":[\\"https://marcinmoskala.com/kt-academy-articles/promotion/benchmark-reflection.jpg\\"],\\"datePublished\\":\\"2024-12-16T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marcin Moskała\\",\\"url\\":\\"https://kt.academy/user/marcinmoskala\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/kt.academy/benchmark-reflection.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Is reflection slowing down your code?"}],["meta",{"property":"og:description","content":"Article(s) > Is reflection slowing down your code?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://marcinmoskala.com/kt-academy-articles/promotion/benchmark-reflection.jpg"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://marcinmoskala.com/kt-academy-articles/promotion/benchmark-reflection.jpg"}],["meta",{"name":"twitter:image:alt","content":"Is reflection slowing down your code?"}],["meta",{"property":"article:author","content":"Marcin Moskała"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"kt.academy"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-12-16T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Is reflection slowing down your code?"},{"property":"og:description","content":"Is reflection slowing down your code?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/kt.academy/benchmark-reflection.html"}]],"prev":"/programming/java/articles/README.md","date":"2024-12-16T00:00:00.000Z","isOriginal":false,"author":[{"name":"Marcin Moskała","url":"https://kt.academy/user/marcinmoskala"}],"cover":"https://marcinmoskala.com/kt-academy-articles/promotion/benchmark-reflection.jpg"},"git":{},"readingTime":{"minutes":5.3,"words":1589},"filePathRelative":"kt.academy/benchmark-reflection.md","copyright":{"author":"Marcin Moskała"}}');export{M as comp,N as data};
