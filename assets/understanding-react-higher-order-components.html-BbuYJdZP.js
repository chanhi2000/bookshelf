import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as t,b as c,a as h,t as b,n as u,g as r,w as p,e as a,r as l,o as f}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/banner.png",y="/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/clicking-increment-1.webp",x="/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/hovering-increment-1.webp",C="/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/file-structure-1.png",j="/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/increase-with-click-1.webp",I="/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/site-font-increasing.webp",H="/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/value-name.png",O="/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/increment-counter-1.webp",S="/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/clicking-increment-counters-1.webp",z="/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/value-secretword.png",R="/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/value-secretword-problem-fixed.png",q={},A={id:"frontmatter-title-관련",tabindex:"-1"},T={class:"header-anchor",href:"#frontmatter-title-관련"},U={class:"table-of-contents"},W={href:"https://thevaluable.dev/dry-principle-cost-benefit-example/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://reactjs.org/docs/higher-order-components.html",target:"_blank",rel:"noopener noreferrer"};function E(d,n){const i=l("VPCard"),o=l("router-link"),k=l("SiteInfo"),e=l("VPIcon"),m=l("RouteLink");return f(),v("div",null,[s("h1",A,[s("a",T,[s("span",null,b(d.$frontmatter.title)+" 관련",1)])]),t(i,u(r({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",U,[s("ul",null,[s("li",null,[t(o,{to:"#what-are-hocs-and-when-should-you-use-them"},{default:p(()=>n[0]||(n[0]=[a("What are HOCs and when should you use them?")])),_:1,__:[0]})]),s("li",null,[t(o,{to:"#the-structure-of-a-higher-order-component"},{default:p(()=>n[1]||(n[1]=[a("The structure of a higher-order component")])),_:1,__:[1]})]),s("li",null,[t(o,{to:"#using-higher-order-components"},{default:p(()=>n[2]||(n[2]=[a("Using higher-order components")])),_:1,__:[2]}),s("ul",null,[s("li",null,[t(o,{to:"#initializing-our-repository"},{default:p(()=>n[3]||(n[3]=[a("Initializing our repository")])),_:1,__:[3]})]),s("li",null,[t(o,{to:"#coding-our-components"},{default:p(()=>n[4]||(n[4]=[a("Coding our components")])),_:1,__:[4]})]),s("li",null,[t(o,{to:"#creating-and-using-our-hoc-function"},{default:p(()=>n[5]||(n[5]=[a("Creating and using our HOC function")])),_:1,__:[5]})]),s("li",null,[t(o,{to:"#sharing-props"},{default:p(()=>n[6]||(n[6]=[a("Sharing props")])),_:1,__:[6]})]),s("li",null,[t(o,{to:"#sharing-state-variables-with-hooks"},{default:p(()=>n[7]||(n[7]=[a("Sharing state variables with Hooks")])),_:1,__:[7]})]),s("li",null,[t(o,{to:"#passing-parameters"},{default:p(()=>n[8]||(n[8]=[a("Passing parameters")])),_:1,__:[8]})])])]),s("li",null,[t(o,{to:"#common-hoc-problem-passing-down-props-to-specific-components"},{default:p(()=>n[9]||(n[9]=[a("Common HOC problem: Passing down props to specific components")])),_:1,__:[9]})]),s("li",null,[t(o,{to:"#conclusion"},{default:p(()=>n[10]||(n[10]=[a("Conclusion")])),_:1,__:[10]})])])]),n[59]||(n[59]=s("hr",null,null,-1)),t(k,{name:"Understanding React higher-order components",desc:"Learn the fundamentals of React’s high-order components and play with some code samples to help you understand how it works.",url:"https://blog.logrocket.com/understanding-react-higher-order-components",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/understanding-react-higher-order-components/banner.png"}),n[60]||(n[60]=c('<div class="hint-container note"><p class="hint-container-title">Editor’s note</p><p>This article was last updated on 19 September 2023.</p></div><figure><img src="'+w+`" alt="Understanding React higher-order components" tabindex="0" loading="lazy"><figcaption>Understanding React higher-order components</figcaption></figure><p>In this article, we’ll cover the basics of React’s HOC concept, including introducing you to higher-order components, teaching you the syntax, and showing you how you can apply HOCs. We’ll also go over a common problem you might encounter with higher-order components.</p><hr><h2 id="what-are-hocs-and-when-should-you-use-them" tabindex="-1"><a class="header-anchor" href="#what-are-hocs-and-when-should-you-use-them"><span>What are HOCs and when should you use them?</span></a></h2><p>Let’s say that a user wants a component that increments a counter variable on every <code>onClick</code> event:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ClickCounter.jsx"><span>ClickCounter.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">ClickCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//default value of this state will be 0.  return (</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/*When clicked, increment the value of &#39;count&#39;*/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Clicked: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> </span><span class="token punctuation">{</span><span class="token comment">/*Render the value of count*/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> ClickCounter<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><figure><img src="`+y+`" alt="A Clicking Increment" tabindex="0" loading="lazy"><figcaption>A Clicking Increment</figcaption></figure><p>Our code works! But what if the client wants another component that contains the same functionality, but it triggers on an <code>onMouseOver</code> event?</p><p>To make this possible, we would have to write the following code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="HoverCounter.jsx"><span>HoverCounter.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">HoverCounter</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/*If the user hovers over this button, then increment &#39;count&#39;*/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onMouseOver</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Increment</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Clicked: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> HoverCounter<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><figure><img src="`+x+'" alt="A Hovering Increment" tabindex="0" loading="lazy"><figcaption>A Hovering Increment</figcaption></figure>',12)),s("p",null,[n[12]||(n[12]=a("Even though our code samples are valid, there is a major problem: both of the files possess similar code logic. Consequently, this breaks the ")),s("a",W,[t(e,{icon:"fas fa-globe"}),n[11]||(n[11]=a("DRY concept"))]),n[13]||(n[13]=a(". So how do we fix this issue?"))]),n[61]||(n[61]=c('<p>This is where HOCs come in. Higher-order components allow developers to reuse code logic in their projects. As a result, this means less repetition and more optimized, readable code.</p><p>HOCs in React offer a versatile way to enhance the functionality and behavior of components. They can be applied to various use cases in your application. Here’s a list of common use cases for HOCs:</p><ul><li><strong>Conditional rendering</strong>: Conditionally render components based on certain logic, such as user authentication or permission checks. A HOC can determine whether a component should be displayed and then wrap components with this HOC to make rendering decisions based on certain conditions</li><li><strong>Authentication</strong>: Implement user authentication and authorization. A HOC can protect routes or components, ensuring that only authenticated users have access. You can create an <code>AuthHOC</code> that checks the user’s authentication status and role. Wrap components or routes with this HOC to conditionally render contents based on user authentication and authorization</li><li><strong>Data fetching</strong>: Handle data fetching and loading states. A HOC can fetch data and pass it as props to the wrapped component, handling loading and error states</li><li><strong>Styling</strong>: Apply CSS styles or themes to components. A HOC can pass styling information as props to customize the appearance of components</li><li><strong>State management</strong>: Manage and share state, such as global app state or Redux store data, with multiple components using a HOC</li><li><strong>Logging and analytics</strong>: Implement logging, error tracking, or analytics by wrapping components with a HOC that reports events or errors</li><li><strong>Caching and memoization</strong>: Cache expensive computations or memoize functions to improve performance by using a HOC</li><li><strong>Internationalization (i18n)</strong>: Provide translation and internationalization features to components. A HOC can pass translated contents or language preferences</li></ul><p>Remember that the flexibility of HOCs allows you to adapt them to various use cases in your React application, making your code more modular, reusable, and maintainable.</p><hr><h2 id="the-structure-of-a-higher-order-component" tabindex="-1"><a class="header-anchor" href="#the-structure-of-a-higher-order-component"><span>The structure of a higher-order component</span></a></h2>',6)),s("p",null,[n[15]||(n[15]=a("According to ")),s("a",V,[t(e,{icon:"fa-brands fa-react"}),n[14]||(n[14]=a("React’s documentation"))]),n[16]||(n[16]=a(", a typical React HOC has the following definition:"))]),n[62]||(n[62]=c(`<blockquote><p>A higher-order component is a function that takes in a component and returns a new component.</p></blockquote><p>Using code, we can rewrite the above statement like so:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> newComponent <span class="token operator">=</span> <span class="token function">higherFunction</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In this line:</p><ul><li><code>newComponent</code>: Will be the enhanced component</li><li><code>higherFunction</code>: As the name suggests, this function will enhance <code>WrappedComponent</code></li><li><code>WrappedComponent</code>: The component whose functionality we want to extend. In other words, this will be the component that we want to enhance.</li></ul><p>Here’s a detailed structure of a higher-order component in React:</p><p>First, create a function. Start by defining a JavaScript function that takes the base component as an argument and returns a new component with added functionality. In a functional HOC, you can use hooks for state and side effects:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="withEnhancement.jsx"><span>withEnhancement.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">withEnhancement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">BaseComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token comment">// HOC logic using hooks</span></span>
<span class="line"> <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">EnhancedComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">// HOC-specific logic using hooks</span></span>
<span class="line">   <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BaseComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">enhancedProp</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>someValue<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">   <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Then, enhance the component. Inside the <code>EnhancedComponent</code> function, you can use hooks to manage state and perform side effects. Hooks like <code>useState</code>, <code>useEffect</code>, and <code>useRef</code> can be used to implement additional behavior:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="withEnhancement.jsx"><span>withEnhancement.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">withEnhancement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">BaseComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">EnhancedComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token comment">// Perform side effects here</span></span>
<span class="line">   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BaseComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">enhancedProp</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>someValue<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">   <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The next step is using the HOC. To use your functional HOC, wrap a component by passing it as an argument to your HOC function. The result will be a new component with the enhanced functionality:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> EnhancedComponent <span class="token operator">=</span> <span class="token function">withEnhancement</span><span class="token punctuation">(</span>BaseComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Using the enhanced component. You can use <code>EnhancedComponent</code> in your application just like any other React component, with the added functionality from the HOC:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.jsx"><span>App.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">EnhancedComponent</span></span> <span class="token attr-name">prop1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">prop2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value2<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In the next segment of the article, we will see React’s HOC concept in action.</p><hr><h2 id="using-higher-order-components" tabindex="-1"><a class="header-anchor" href="#using-higher-order-components"><span>Using higher-order components</span></a></h2><h3 id="initializing-our-repository" tabindex="-1"><a class="header-anchor" href="#initializing-our-repository"><span>Initializing our repository</span></a></h3><p>We have to first create a blank React project. To do so, start by writing the following code:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line">npx create<span class="token operator">-</span>react<span class="token operator">-</span>app hoc<span class="token operator">-</span>tutorial </span>
<span class="line">cd hoc<span class="token operator">-</span>tutorial #navigate to the project folder<span class="token punctuation">.</span></span>
<span class="line">cd src #go to codebase</span>
<span class="line">mkdir components #will hold all our custom components</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For this article, we will build two custom components to demonstrate HOC usage:</p>`,21)),s("ul",null,[s("li",null,[t(e,{icon:"fa-brands fa-js"}),n[17]||(n[17]=s("code",null,"ClickIncrease.js",-1)),n[18]||(n[18]=a(": This component will render a button and a piece of text. When the user clicks on this button (an ")),n[19]||(n[19]=s("code",null,"onClick",-1)),n[20]||(n[20]=a(" event), the ")),n[21]||(n[21]=s("code",null,"fontSize",-1)),n[22]||(n[22]=a(" property of the text will increase"))]),s("li",null,[t(e,{icon:"fa-brands fa-js"}),n[23]||(n[23]=s("code",null,"HoverIncrease.js",-1)),n[24]||(n[24]=a(" : This will be similar to that of ")),n[25]||(n[25]=s("code",null,"ClickIncrease",-1)),n[26]||(n[26]=a(". However, unlike the former, this component will listen to ")),n[27]||(n[27]=s("code",null,"onMouseOver",-1)),n[28]||(n[28]=a(" events"))])]),n[63]||(n[63]=s("p",null,[a("In your project, navigate to the "),s("code",null,"components"),a(" folder. Here, create these two new files. When that’s done, your file structure should look like this:")],-1)),n[64]||(n[64]=s("figure",null,[s("img",{src:C,alt:"File Structure",tabindex:"0",loading:"lazy"}),s("figcaption",null,"File Structure")],-1)),n[65]||(n[65]=s("p",null,"Now that we have laid out the groundwork for the project, it’s time to build our custom components.",-1)),n[66]||(n[66]=s("h3",{id:"coding-our-components",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#coding-our-components"},[s("span",null,"Coding our components")])],-1)),s("p",null,[n[29]||(n[29]=a("In ")),t(e,{icon:"fa-brands fa-js"}),n[30]||(n[30]=s("code",null,"ClickIncrease.js",-1)),n[31]||(n[31]=a(", start by writing the following code:"))]),n[67]||(n[67]=c(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/ClickIncrease.js"><span>components/ClickIncrease.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">ClickIncrease</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>fontSize<span class="token punctuation">,</span> setFontSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//set initial value of Hook to 10.  return (</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/*When clicked, increment the value of fontSize*/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Increase with click</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/*Set the font size of this text to the fontSize variable.*/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/*Furthermore, display its value as well.*/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> </span>
<span class="line">        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fontSize <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Size of font in onClick function: </span><span class="token punctuation">{</span>fontSize<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> ClickIncrease<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Next, in your <code>HoverIncrease</code> component, paste these lines of code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/HoverIncrease.js"><span>components/HoverIncrease.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">HoverIncrease</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>fontSize<span class="token punctuation">,</span> setFontSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/*This time, instead of listening to clicks,*/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/*Listen to hover events instead*/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onMouseOver</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Increase on hover</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> </span>
<span class="line">        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fontSize <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Size of font in onMouseOver function: </span><span class="token punctuation">{</span>fontSize<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> HoverIncrease<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Finally, render these functions to the GUI like so:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.jsx"><span>App.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">//import both components</span></span>
<span class="line"><span class="token keyword">import</span> ClickIncrease <span class="token keyword">from</span> <span class="token string">&quot;./components/ClickIncrease&quot;</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token keyword">import</span> HoverIncrease <span class="token keyword">from</span> <span class="token string">&quot;./components/HoverIncrease&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>App<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/*Render both of these components to the UI */</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ClickIncrease</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HoverIncrease</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Let’s test it out! This will be the result of the code:</p><figure><img src="`+j+`" alt="Increase With Click" tabindex="0" loading="lazy"><figcaption>Increase With Click</figcaption></figure><h3 id="creating-and-using-our-hoc-function" tabindex="-1"><a class="header-anchor" href="#creating-and-using-our-hoc-function"><span>Creating and using our HOC function</span></a></h3><p>Within the <code>components</code> folder, create a file called <code>withCounter.js</code>. Here, start by writing the following code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="UpdatedComponent.jsx"><span>UpdatedComponent.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">UpdatedComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">OriginalComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">NewComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//render OriginalComponent and pass on its props.</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">OriginalComponent</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> NewComponent<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> UpdatedComponent<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Let’s deconstruct this code piece by piece. In the start, we created a function called <code>UpdatedComponent</code> that takes in an argument called <code>OriginalComponent</code>. In this case, the <code>OriginalComponent</code> will be the React element, which will be wrapped.</p><p>Then, we told React to render <code>OriginalComponent</code> to the UI. We will implement enhancement functionality later in this article.</p>`,12)),s("p",null,[n[32]||(n[32]=a("When that’s done, it’s time to use the ")),n[33]||(n[33]=s("code",null,"UpdatedComponent",-1)),n[34]||(n[34]=a(" function in our app. To do so, first go to the ")),t(e,{icon:"fa-brands fa-js"}),n[35]||(n[35]=s("code",null,"HoverIncrease.js",-1)),n[36]||(n[36]=a(" file and write the following lines:"))]),n[68]||(n[68]=c(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="HoverIncrease.js"><span>HoverIncrease.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> withCounter <span class="token keyword">from</span> <span class="token string">&quot;./withCounter.js&quot;</span> <span class="token comment">//import the withCounter function</span></span>
<span class="line"><span class="token comment">//..further code ..</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">HoverIncrease</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">//..further code</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//replace your &#39;export&#39; statement with:</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCounter</span><span class="token punctuation">(</span>HoverIncrease<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//We have now converted HoverIncrease to an HOC function.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Next, do the same process with the <code>ClickIncrease</code> module:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/ClickIncrease.js"><span>components/ClickIncrease.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> withCounter <span class="token keyword">from</span> <span class="token string">&quot;./withCounter&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">ClickIncrease</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">//...further code</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCounter</span><span class="token punctuation">(</span>ClickIncrease<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//ClickIncrease is now a wrapped component of the withCounter method.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Let’s test it out! This will be the result in the code:</p><figure><img src="`+I+'" alt="Size Of Font Increasing" tabindex="0" loading="lazy"><figcaption>Size Of Font Increasing</figcaption></figure><p>Notice that our result is unchanged. This is because we haven’t made changes to our HOC yet. In the next section, you will learn how to share props between our components.</p><h3 id="sharing-props" tabindex="-1"><a class="header-anchor" href="#sharing-props"><span>Sharing props</span></a></h3><p>Using HOCs, React allows users to share props within the project’s wrapped components.</p>',8)),s("p",null,[n[37]||(n[37]=a("As a first step, create a ")),n[38]||(n[38]=s("code",null,"name",-1)),n[39]||(n[39]=a(" prop in ")),t(e,{icon:"fa-brands fa-js"}),n[40]||(n[40]=s("code",null,"withCounter.js",-1)),n[41]||(n[41]=a(" like so:"))]),n[69]||(n[69]=c(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/withCounter.js"><span>components/withCounter.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">UpdatedComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">OriginalComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">NewComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//Here, add a &#39;name&#39; prop and set its value of &#39;LogRocket&#39;.  </span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">OriginalComponent</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LogRocket<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// ..further code..</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>To read this data prop, all we have to do is make the following changes to its child components:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// extra code removed for brevity.</span></span>
<span class="line"><span class="token comment">// In components/HoverIncrease</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">HoverIncrease</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//get the shared props</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/* Further code..*/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/*Now render the value of the &#39;name&#39; prop */</span> <span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> Value of &#39;name&#39; in HoverIncrease: </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/ClickIncrease.js"><span>components/ClickIncrease.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">ClickIncrease</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//accept incoming props</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/*Further code..*/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Value of &#39;name&#39; in ClickIncrease: </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><figure><img src="`+H+`" alt="Value Of Name" tabindex="0" loading="lazy"><figcaption>Value Of Name</figcaption></figure><p>That was easy! As you can see, React’s HOC design allows developers to share data between components with relative ease.</p><p>In upcoming sections, you will learn how to share states via HOC functions.</p><h3 id="sharing-state-variables-with-hooks" tabindex="-1"><a class="header-anchor" href="#sharing-state-variables-with-hooks"><span>Sharing state variables with Hooks</span></a></h3><p>Just like with props, we can share Hooks using HOCs:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/withCounter.js"><span>components/withCounter.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">UpdatedComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">OriginalComponent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">NewComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>counter<span class="token punctuation">,</span> setCounter<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//create a Hook</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">OriginalComponent</span></span></span>
<span class="line">        <span class="token attr-name">counter</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>counter<span class="token punctuation">}</span></span> <span class="token comment">//export our counter Hook</span></span>
<span class="line">        <span class="token comment">//now create an &#39;incrementSize&#39; function</span></span>
<span class="line">        <span class="token attr-name">incrementCounter</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCounter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">counter</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// further code..</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here’s an explanation of the code:</p><ul><li>First, we created a Hook variable called <code>counter</code> and set its initial value to <code>10</code></li><li>We also coded an <code>incrementCounter</code> function. When invoked, this method will increment the value of <code>counter</code></li><li>Finally, export the <code>incrementSize</code> method and the <code>size</code> Hook as props. As a result, this allows the wrapped components of <code>UpdatedComponent</code> to get access to these Hooks</li></ul><p>As the last step, we now have to use the <code>counter</code> Hook. To do so, write these lines of code in the <code>HoverIncrease</code> and <code>ClickIncrease</code> module:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// make the following file changes to components/HoverIncrease.js and ClickIncrease.js</span></span>
<span class="line"><span class="token comment">// extract the counter Hook and incrementCounter function from our HOC:</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> counter<span class="token punctuation">,</span> incrementCounter <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span> </span>
<span class="line"><span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token punctuation">{</span><span class="token comment">/*Use the incrementCounter method to increment the &#39;counter&#39; state..*/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">incrementCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increment counter</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> </span>
<span class="line">    </span><span class="token punctuation">{</span><span class="token comment">/*Render the value of our &#39;counter&#39; variable:*/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> Value of &#39;counter&#39; in HoverIncrease/ClickIncrease: </span><span class="token punctuation">{</span>counter<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+O+'" alt="Increment Counter" tabindex="0" loading="lazy"><figcaption>Increment Counter</figcaption></figure>',15)),s("p",null,[n[43]||(n[43]=a("Here, one important thing to notice is that the value of the ")),n[44]||(n[44]=s("code",null,"counter",-1)),n[45]||(n[45]=a(" state is not shared between our child components. If you want to share states between various React components, use ")),t(m,{to:"/blog.logrocket.com/react-context-tutorial.html"},{default:p(()=>n[42]||(n[42]=[s("strong",null,"React’s Context API",-1)])),_:1,__:[42]}),n[46]||(n[46]=a(", which allows you to effortlessly share states and Hooks throughout your app."))]),n[70]||(n[70]=s("h3",{id:"passing-parameters",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#passing-parameters"},[s("span",null,"Passing parameters")])],-1)),n[71]||(n[71]=s("p",null,[a("Even though our code works, consider the following situation: what if we want to increment the value of "),s("code",null,"counter"),a(" with a custom value? Via HOCs, we can even tell React to pass specific data to certain child components. This is made possible with parameters.")],-1)),s("p",null,[n[47]||(n[47]=a("To enable support for parameters, write the following code in ")),t(e,{icon:"fas fa-folder-open"}),n[48]||(n[48]=s("code",null,"components/",-1)),t(e,{icon:"fa-brands fa-js"}),n[49]||(n[49]=s("code",null,"withCounter.js",-1)),n[50]||(n[50]=a(":"))]),n[72]||(n[72]=c(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/withCounter.js"><span>components/withCounter.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">//This function will now accept an &#39;increaseCount&#39; parameter.</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">UpdatedComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">OriginalComponent<span class="token punctuation">,</span> increaseCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>   </span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">NewComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">OriginalComponent</span></span></span>
<span class="line">        <span class="token comment">//this time, increment the &#39;size&#39; variable by &#39;increaseCount&#39;</span></span>
<span class="line">        <span class="token attr-name">incrementCounter</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCounter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> size <span class="token operator">+</span> increaseCount<span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//further code..</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In this piece of code, we informed React that our function will now take in an additional parameter called <code>increaseCount</code>.</p>`,2)),s("p",null,[n[51]||(n[51]=a("All that’s left for us is to use this parameter in our wrapped components. To do so, add this line of code in ")),t(e,{icon:"fa-brands fa-js"}),n[52]||(n[52]=s("code",null,"HoverIncrease.js",-1)),n[53]||(n[53]=a(" and ")),t(e,{icon:"fa-brands fa-js"}),n[54]||(n[54]=s("code",null,"ClickIncrease.js",-1)),n[55]||(n[55]=a(":"))]),n[73]||(n[73]=c(`<div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">//In HoverIncrease, change the &#39;export&#39; statement:</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCounter</span><span class="token punctuation">(</span>HoverIncrease<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//value of increaseCount is 10.</span></span>
<span class="line"><span class="token comment">//this will increment the &#39;counter&#39; Hook by 10.</span></span>
<span class="line"><span class="token comment">//In ClickIncrease:</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCounter</span><span class="token punctuation">(</span>ClickIncrease<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//value of increaseCount is 3.</span></span>
<span class="line"><span class="token comment">//will increment the &#39;counter&#39; state by 3 steps.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+S+'" alt="Clicking Increment Counters" tabindex="0" loading="lazy"><figcaption>Clicking Increment Counters</figcaption></figure>',2)),s("p",null,[n[56]||(n[56]=a("In the end, the ")),t(e,{icon:"fa-brands fa-js"}),n[57]||(n[57]=s("code",null,"withCounter.js",-1)),n[58]||(n[58]=a(" file should look like this:"))]),n[74]||(n[74]=c(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="withCounter.js"><span>withCounter.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">UpdatedComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">OriginalComponent<span class="token punctuation">,</span> increaseCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">NewComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>counter<span class="token punctuation">,</span> setCounter<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">OriginalComponent</span></span></span>
<span class="line">        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LogRocket<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">counter</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>counter<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">incrementCounter</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCounter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> size <span class="token operator">+</span> increaseCount<span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> NewComponent<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> UpdatedComponent<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),t(e,{icon:"fa-brands fa-js"}),n[75]||(n[75]=c(`<code>HoverIncrease.js</code> should look like this:<div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/HoverIncrease.js"><span>components/HoverIncrease.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> withCounter <span class="token keyword">from</span> <span class="token string">&quot;./withCounter&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">HoverIncrease</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>fontSize<span class="token punctuation">,</span> setFontSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> counter<span class="token punctuation">,</span> incrementCounter <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onMouseOver</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Increase on hover</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fontSize <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Size of font in onMouseOver function: </span><span class="token punctuation">{</span>fontSize<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> Value of &#39;name&#39; in HoverIncrease: </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">incrementCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increment counter</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> Value of &#39;counter&#39; in HoverIncrease: </span><span class="token punctuation">{</span>counter<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCounter</span><span class="token punctuation">(</span>HoverIncrease<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>And finally, your <code>ClickIncrease</code> component should have the following code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/ClickIncrease.js"><span>components/ClickIncrease.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> withCounter <span class="token keyword">from</span> <span class="token string">&quot;./withCounter&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">ClickIncrease</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> counter<span class="token punctuation">,</span> incrementCounter <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>fontSize<span class="token punctuation">,</span> setFontSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Increase with click</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fontSize <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Size of font in onClick function: </span><span class="token punctuation">{</span>fontSize<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Value of &#39;name&#39; in ClickIncrease: </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">incrementCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increment counter</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> Value of &#39;counter&#39; in ClickIncrease: </span><span class="token punctuation">{</span>counter<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withCounter</span><span class="token punctuation">(</span>ClickIncrease<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="common-hoc-problem-passing-down-props-to-specific-components" tabindex="-1"><a class="header-anchor" href="#common-hoc-problem-passing-down-props-to-specific-components"><span>Common HOC problem: Passing down props to specific components</span></a></h2><p>One important thing to note is that the process of passing down props to an HOC’s child component is different than that of a non-HOC component.</p><p>For example, look at the following code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.jssx"><span>App.jssx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/*Pass in a &#39;secretWord&#39; prop*/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HoverIncrease</span></span> <span class="token attr-name">secretWord</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">&quot;pineapple&quot;</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">HoverIncrease</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//read prop value:</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Value of secretWord: &quot;</span> <span class="token operator">+</span> props<span class="token punctuation">.</span>secretWord<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">//further code..</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In theory, we should get the message <code>Value of secretWord: pineapple</code> in the console. However, that’s not the case here:</p><figure><img src="`+z+`" alt="Value Of Secretword" tabindex="0" loading="lazy"><figcaption>Value Of Secretword</figcaption></figure><p>In this case, the <code>secretWord</code> prop is actually being passed to the <code>withCounter</code> function and not to the <code>HoverIncrease</code> component.</p><p>To solve this issue, we have to make a simple change to <code>withCounter.js</code>:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/withCounter.js"><span>components/withCounter.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">UpdatedComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">OriginalComponent<span class="token punctuation">,</span> increaseCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">NewComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">OriginalComponent</span></span></span>
<span class="line">        <span class="token comment">//Pass down all incoming props to the HOC&#39;s children:</span></span>
<span class="line">        <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> NewComponent<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This minor fix solves our problem:</p><figure><img src="`+R+'" alt="Value Of Secretword With Problem Fixed" tabindex="0" loading="lazy"><figcaption>Value Of Secretword With Problem Fixed</figcaption></figure><p>And we’re done!</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, you learned the fundamentals of React’s HOC concept. If you encountered any difficulties in this article, I suggest that you deconstruct and play with the code samples above. This will help you better understand higher-order components.</p><p>Thank you so much for reading! Happy coding!</p>',22)),h(" TODO: add ARTICLE CARD "),t(i,u(r({title:"Understanding React higher-order components",desc:"Learn the fundamentals of React’s high-order components and play with some code samples to help you understand how it works.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/understanding-react-higher-order-components.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const P=g(q,[["render",E]]),L=JSON.parse('{"path":"/blog.logrocket.com/understanding-react-higher-order-components.html","title":"Understanding React higher-order components","lang":"en-US","frontmatter":{"lang":"en-US","title":"Understanding React higher-order components","description":"Article(s) > Understanding React higher-order components","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Understanding React higher-order components\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/clicking-increment-1.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/hovering-increment-1.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/file-structure-1.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/increase-with-click-1.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/site-font-increasing.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/value-name.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/increment-counter-1.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/clicking-increment-counters-1.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/value-secretword.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/value-secretword-problem-fixed.png\\"],\\"datePublished\\":\\"2023-09-19T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hussain Arif\\",\\"url\\":\\"https://blog.logrocket.com/author/hussain-arif/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/understanding-react-higher-order-components.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Understanding React higher-order components"}],["meta",{"property":"og:description","content":"Article(s) > Understanding React higher-order components"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-react-higher-order-components/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Understanding React higher-order components"}],["meta",{"property":"article:author","content":"Hussain Arif"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-09-19T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Understanding React higher-order components"},{"property":"og:description","content":"Understanding React higher-order components"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/understanding-react-higher-order-components.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2023-09-19T00:00:00.000Z","isOriginal":false,"author":[{"name":"Hussain Arif","url":"https://blog.logrocket.com/author/hussain-arif/"}],"cover":"/assets/image/blog.logrocket.com/understanding-react-higher-order-components/banner.png"},"git":{},"readingTime":{"minutes":9.97,"words":2991},"filePathRelative":"blog.logrocket.com/understanding-react-higher-order-components.md","copyright":{"author":"Hussain Arif"}}');export{P as comp,L as data};
