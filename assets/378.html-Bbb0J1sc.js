import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as p,b as i,t as b,n as u,g as r,w as e,e as a,r as c,o as g}from"./app-BVguHYKu.js";const h="/bookshelf/assets/image/meetup.nhncloud.com/378/banner.png",_={},f={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},x={href:"https://www.capstone-engine.org/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.capstone-engine.org/documentation.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://www.capstone-engine.org/lang_c.html",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/frida/frida-gum",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/frida/frida/releases/download/16.1.11/frida-gum-devkit-16.1.11-android-arm64.tar.xz",target:"_blank",rel:"noopener noreferrer"};function q(d,n){const l=c("VPCard"),t=c("router-link"),k=c("SiteInfo"),o=c("VPIcon");return g(),v("div",null,[s("h1",f,[s("a",y,[s("span",null,b(d.$frontmatter.title)+" 관련",1)])]),p(l,u(r({title:"Python > Article(s)",desc:"Article(s)",link:"/programming/py/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),p(l,u(r({title:"C++ > Article(s)",desc:"Article(s)",link:"/programming/cpp/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",w,[s("ul",null,[s("li",null,[p(t,{to:"#들어가며"},{default:e(()=>n[0]||(n[0]=[a("들어가며")])),_:1,__:[0]})]),s("li",null,[p(t,{to:"#python-api-사용법"},{default:e(()=>n[1]||(n[1]=[a("Python API 사용법")])),_:1,__:[1]}),s("ul",null,[s("li",null,[p(t,{to:"#capstone-설치-macos"},{default:e(()=>n[2]||(n[2]=[a("Capstone 설치(macOS)")])),_:1,__:[2]})]),s("li",null,[p(t,{to:"#기본-사용법"},{default:e(()=>n[3]||(n[3]=[a("기본 사용법")])),_:1,__:[3]})])])]),s("li",null,[p(t,{to:"#런타임-사용법"},{default:e(()=>n[4]||(n[4]=[a("런타임 사용법")])),_:1,__:[4]}),s("ul",null,[s("li",null,[p(t,{to:"#기본-사용법-1"},{default:e(()=>n[5]||(n[5]=[a("기본 사용법")])),_:1,__:[5]})]),s("li",null,[p(t,{to:"#응용-사용법"},{default:e(()=>n[6]||(n[6]=[a("응용 사용법")])),_:1,__:[6]})])])]),s("li",null,[p(t,{to:"#나가며"},{default:e(()=>n[7]||(n[7]=[a("나가며")])),_:1,__:[7]}),s("ul",null,[s("li",null,[p(t,{to:"#참고-문헌"},{default:e(()=>n[8]||(n[8]=[a("참고 문헌")])),_:1,__:[8]})])])])])]),n[25]||(n[25]=s("hr",null,null,-1)),p(k,{name:"디스어셈블 프레임워크 Capstone-engine 활용하기 | NHN Cloud Meetup",desc:"디스어셈블 프레임워크 Capstone-engine 활용하기",url:"https://meetup.nhncloud.com/posts/378",logo:"https://meetup.nhncloud.com/resources/img/favicon.ico",preview:"/assets/image/meetup.nhncloud.com/378/banner.png"}),n[26]||(n[26]=s("figure",null,[s("img",{src:h,alt:"NHN Cloud_meetup 2024.03",tabindex:"0",loading:"lazy"}),s("figcaption",null,"NHN Cloud_meetup 2024.03")],-1)),n[27]||(n[27]=s("h2",{id:"들어가며",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#들어가며"},[s("span",null,"들어가며")])],-1)),n[28]||(n[28]=s("p",null,"이 글에서는 디스어셈블 프레임워크인 Capstone-engine을 활용하는 방법에 대해 알아보고자 합니다.",-1)),s("p",null,[n[10]||(n[10]=a("홈페이지 소개글(")),s("a",x,[p(o,{icon:"fas fa-globe"}),n[9]||(n[9]=a("https://www.capstone-engine.org/"))]),n[11]||(n[11]=a(")에 의하면 Capstone은 Capstone-engine을 바이너리 분석과 리버싱에 있어 ")),n[12]||(n[12]=s("strong",null,"the ultimate disassembly engine",-1)),n[13]||(n[13]=a("으로 만드는 게 목표라고 합니다. 여기에서는 Python API를 이용해 디스어셈블 도구를 만들어 보고, 애플리케이션 런타임 시 이를 디스어셈블하는 데 C API를 이용해 보겠습니다."))]),n[29]||(n[29]=i(`<hr><h2 id="python-api-사용법" tabindex="-1"><a class="header-anchor" href="#python-api-사용법"><span>Python API 사용법</span></a></h2><p>Capstone 의 Python API를 이용하면 나만의 파이썬 디스어셈블 도구를 만들 수 있습니다.</p><h3 id="capstone-설치-macos" tabindex="-1"><a class="header-anchor" href="#capstone-설치-macos"><span>Capstone 설치(macOS)</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">pip <span class="token function">install</span> capstone <span class="token comment"># (for intel macOS)</span></span>
<span class="line">pip <span class="token function">install</span> <span class="token parameter variable">--pre</span> --no-binary capstone capstone <span class="token comment"># (for m1, m2 macOS)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),s("p",null,[n[15]||(n[15]=a("Windows 등 다른 플랫폼의 경우 ")),s("a",C,[p(o,{icon:"fas fa-globe"}),n[14]||(n[14]=a("https://www.capstone-engine.org/documentation.html"))]),n[16]||(n[16]=a("을 참고하여 설치하면 되겠습니다."))]),n[30]||(n[30]=i('<h3 id="기본-사용법" tabindex="-1"><a class="header-anchor" href="#기본-사용법"><span>기본 사용법</span></a></h3><p>기본적인 사용법은 다음과 같습니다.</p><p>디스어셈블하고자 하는 헥스 코드를 적어 주고, 아키텍처 및 모드를 정한 뒤 <code>disasm_lite()</code> 메서드로 디스어셈블해 주면 됩니다.</p><figure><img src="https://image.toast.com/aaaadh/real/2024/techblog/capstoneengine01.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="런타임-사용법" tabindex="-1"><a class="header-anchor" href="#런타임-사용법"><span>런타임 사용법</span></a></h2><p>애플리케이션 런타임 시에 디스어셈블이 필요한 경우가 있습니다. 이때 Capstone C API를 이용하여 프로그래밍할 수 있습니다. 여기에서는 Android 앱 런타임 시에 Capstone을 이용해 디스어셈블해 보고자 합니다.</p>',7)),s("p",null,[n[19]||(n[19]=a("C 프로그래밍 예시 코드는 ")),s("a",A,[p(o,{icon:"fas fa-globe"}),n[17]||(n[17]=a("https://www.capstone-engine.org/lang_c.html"))]),n[20]||(n[20]=a("에 나와 있는데요. 모바일에서 어떻게 사용하는지는 상세히 나와 있지 않습니다. 다행히 ")),s("a",D,[p(o,{icon:"iconfont icon-github"}),n[18]||(n[18]=s("code",null,"frida/frida-gum",-1))]),n[21]||(n[21]=a("에서 Capstone API를 제공해 주고 있습니다."))]),s("p",null,[n[23]||(n[23]=a("arm64용 frida-gum static library는 ")),s("a",O,[p(o,{icon:"fas fa-globe"}),n[22]||(n[22]=a("https://github.com/frida/frida/releases/download/16.1.11/frida-gum-devkit-16.1.11-android-arm64.tar.xz"))]),n[24]||(n[24]=a("에서 다운로드할 수 있습니다."))]),n[31]||(n[31]=i(`<h3 id="기본-사용법-1" tabindex="-1"><a class="header-anchor" href="#기본-사용법-1"><span>기본 사용법</span></a></h3><p>Android 네이티브 프로젝트에서 기본적인 사용법은 다음과 같습니다. 디스어셈블하고자 하는 헥스 코드를 적어 주고, 아키텍처 및 모드를 정한 뒤 <code>cs_disasm()</code> 함수로 디스어셈블해 주면 됩니다.</p><figure><img src="https://image.toast.com/aaaadh/real/2024/techblog/capstoneengine02.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>다음은 전체 소스 코드입니다.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;jni.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;inttypes.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;android/log.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;include/frida-gum.h&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">LOG_TAG</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LOG_TAG</span>    <span class="token string">&quot;[nhncloud]&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOGD</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token function">__android_log_print</span><span class="token punctuation">(</span>ANDROID_LOG_DEBUG<span class="token punctuation">,</span> LOG_TAG<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">uint8_t</span> CODE<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0xc8</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xb5</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x1c</span><span class="token punctuation">,</span> <span class="token number">0xa0</span><span class="token punctuation">,</span> <span class="token number">0x4e</span><span class="token punctuation">,</span> <span class="token number">0xe0</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0xaa</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">disassemble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    csh capstone<span class="token punctuation">;</span></span>
<span class="line">    cs_insn <span class="token operator">*</span> insn<span class="token punctuation">;</span></span>
<span class="line">    size_t count<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">cs_open</span> <span class="token punctuation">(</span>CS_ARCH_ARM64<span class="token punctuation">,</span> CS_MODE_ARM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>capstone<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">cs_option</span> <span class="token punctuation">(</span>capstone<span class="token punctuation">,</span> CS_OPT_DETAIL<span class="token punctuation">,</span> CS_OPT_ON<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    insn <span class="token operator">=</span> <span class="token function">cs_malloc</span> <span class="token punctuation">(</span>capstone<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    count <span class="token operator">=</span> <span class="token function">cs_disasm</span><span class="token punctuation">(</span>capstone<span class="token punctuation">,</span> CODE<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>CODE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>insn<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        size_t j<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">LOGD</span><span class="token punctuation">(</span><span class="token string">&quot;0x%&quot;</span> PRIx64<span class="token string">&quot;:\\t%s\\t\\t%s\\n&quot;</span><span class="token punctuation">,</span> insn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>address<span class="token punctuation">,</span> insn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>mnemonic<span class="token punctuation">,</span></span>
<span class="line">                 insn<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>op_str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">cs_free</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">LOGD</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR: Failed to disassemble given code!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">cs_close</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>capstone<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> JNIEXPORT jstring</span>
<span class="line"></span>
<span class="line">JNICALL</span>
<span class="line"><span class="token function">Java_com_nhncloud_capstonetest_MainActivity_stringFromJNI</span><span class="token punctuation">(</span></span>
<span class="line">        JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span></span>
<span class="line">        jobject <span class="token comment">/* this */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    std<span class="token double-colon punctuation">::</span>string hello <span class="token operator">=</span> <span class="token string">&quot;Hello from C++&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">disassemble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> env<span class="token operator">-&gt;</span><span class="token function">NewStringUTF</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="응용-사용법" tabindex="-1"><a class="header-anchor" href="#응용-사용법"><span>응용 사용법</span></a></h3><p>특정 메모리 패턴을 스캔하고, 해당 패턴이 발견된 메모리 주소에서 Capstone API를 이용해 디스어셈블 후 그 결과값에 대해 추가 동작(예: 후킹, 메모리 패치 등)을 고려해 볼 수 있습니다. 이렇게 하면 타깃 함수의 offset이 매 빌드마다 달라져도 문제가 없습니다. 디스어셈블한 결과값에 대해 추가 동작을 수행하는 것이고, 보통 디스어셈블한 결과값은 소스 코드가 변하지 않는 한 동일한 형태를 보이기 때문이죠.</p><p>예를 들어 &#39;libxxx.so&#39;라는 라이브러리의 메모리에서 <code>AA AA AA AA BB BB BB BB CC CC CC CC DD DD DD DD</code> 패턴을 스캔합니다. 해당 패턴이 발견된 주소에서 0xc만큼 떨어진 위치를 디스어셈블하면 항상 어떤 함수로 branch하는 <code>b #0xabcdef</code>입니다. <code>0xabcdef</code> 함수는 불필요한 기능이므로 메모리 패치를 통해 작동하지 않도록 하고 싶습니다. 다음은 이에 대한 예시 코드입니다.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;jni.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;inttypes.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;android/log.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;include/frida-gum.h&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">LOG_TAG</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LOG_TAG</span>    <span class="token string">&quot;[nhncloud]&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LOGD</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token function">__android_log_print</span><span class="token punctuation">(</span>ANDROID_LOG_DEBUG<span class="token punctuation">,</span> LOG_TAG<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// disassemble using capstone api</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token function">disassemble</span> <span class="token punctuation">(</span><span class="token keyword">const</span> guint8<span class="token operator">*</span> code<span class="token punctuation">,</span> gsize size<span class="token punctuation">,</span> guint64 address<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> mnemonic<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> op_str<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    csh capstone<span class="token punctuation">;</span></span>
<span class="line">    cs_insn <span class="token operator">*</span> insn<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__aarch64__</span></span></span>
<span class="line">    <span class="token function">cs_open</span> <span class="token punctuation">(</span>CS_ARCH_ARM64<span class="token punctuation">,</span> CS_MODE_ARM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>capstone<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">__arm__</span></span></span>
<span class="line">    <span class="token function">cs_open</span> <span class="token punctuation">(</span>CS_ARCH_ARM<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>cs_mode<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>CS_MODE_ARM <span class="token operator">|</span> CS_MODE_THUMB<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>capstone<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line">    <span class="token function">cs_option</span> <span class="token punctuation">(</span>capstone<span class="token punctuation">,</span> CS_OPT_DETAIL<span class="token punctuation">,</span> CS_OPT_ON<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    insn <span class="token operator">=</span> <span class="token function">cs_malloc</span> <span class="token punctuation">(</span>capstone<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">cs_disasm_iter</span> <span class="token punctuation">(</span>capstone<span class="token punctuation">,</span> <span class="token operator">&amp;</span>code<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">,</span> <span class="token operator">&amp;</span>address<span class="token punctuation">,</span> insn<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        op_str <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span>insn<span class="token operator">-&gt;</span>op_str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        mnemonic <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span>insn<span class="token operator">-&gt;</span>mnemonic<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">cs_free</span> <span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">cs_close</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>capstone<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> mem_scan_match_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> gboolean</span>
<span class="line"><span class="token function">mem_scan_match_func</span> <span class="token punctuation">(</span>GumAddress address<span class="token punctuation">,</span> gsize size<span class="token punctuation">,</span> gpointer user_data<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    mem_scan_match_count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>mem_scan_match_count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> data<span class="token punctuation">;</span></span>
<span class="line">        gsize n_bytes_read<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">LOGD</span><span class="token punctuation">(</span><span class="token string">&quot;match at %p&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        data <span class="token operator">=</span> <span class="token function">gum_memory_read</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>gconstpointer<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>address <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n_bytes_read<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        std<span class="token double-colon punctuation">::</span>string op_str<span class="token punctuation">,</span> mnemonic<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">disassemble</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> n_bytes_read<span class="token punctuation">,</span> <span class="token punctuation">(</span>address <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mnemonic<span class="token punctuation">,</span> op_str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// op_str is &quot;#0xabcdef&quot;</span></span>
<span class="line">        size_t pos <span class="token operator">=</span> op_str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;0x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        std<span class="token double-colon punctuation">::</span>string hex_str <span class="token operator">=</span> op_str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">uint64_t</span> value <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">stoull</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">,</span> <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;hljs-literal&quot;</span><span class="token operator">&gt;</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// memory patch</span></span>
<span class="line">        <span class="token keyword">const</span> guint8 patch<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0xc0</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x5f</span><span class="token punctuation">,</span> <span class="token number">0xd6</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">gum_memory_write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>value<span class="token punctuation">,</span> patch<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">mem_scan_with_pattern</span><span class="token punctuation">(</span><span class="token keyword">const</span> GumModuleDetails<span class="token operator">*</span> m<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> mem_scan_pattern<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    GumMatchPattern<span class="token operator">*</span> mem_pattern <span class="token operator">=</span> <span class="token function">gum_match_pattern_new_from_string</span><span class="token punctuation">(</span>mem_scan_pattern<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">gum_try_mprotect</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>gpointer<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>range<span class="token operator">-&gt;</span>base_address<span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">-&gt;</span>range<span class="token operator">-&gt;</span>size<span class="token punctuation">,</span> GUM_PAGE_RWX<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">gum_memory_scan</span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>range<span class="token punctuation">,</span> mem_pattern<span class="token punctuation">,</span> mem_scan_match_func<span class="token punctuation">,</span> <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;hljs-literal&quot;</span><span class="token operator">&gt;</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">native_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">gum_init_embedded</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">LOGD</span><span class="token punctuation">(</span><span class="token string">&quot;frida-gum initialized!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">uint64_t</span> libxxx_base <span class="token operator">=</span> <span class="token function">gum_module_find_base_address</span><span class="token punctuation">(</span><span class="token string">&quot;libxxx.so&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> GumModuleDetails<span class="token operator">*</span> m <span class="token operator">=</span> <span class="token function">gum_module_map_find</span><span class="token punctuation">(</span><span class="token function">gum_module_map_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> libxxx_base<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// scan memory pattern</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> mem_scan_pattern <span class="token operator">=</span> <span class="token string">&quot;AA AA AA AA BB BB BB BB CC CC CC CC DD DD DD DD&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">mem_scan_with_pattern</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> mem_scan_pattern<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="나가며" tabindex="-1"><a class="header-anchor" href="#나가며"><span>나가며</span></a></h2><p>이 글에서는 디스어셈블 도구를 만들거나 애플리케이션 런타임 시 디스어셈블하는 데 Capstone-engine을 활용해 보는 예를 다뤘습니다. 직접 사용해 보니 API도 간단하고 직관적이어서 매우 유용해 보였습니다. 앞서 소개해 드린 공식 홈페이지에서도 다양한 자료를 제공하고 있기 때문에 어려움 없이 사용해 보실 수 있을 거라 생각됩니다. 긴 글을 읽어 주셔서 감사합니다. 🙂</p><h3 id="참고-문헌" tabindex="-1"><a class="header-anchor" href="#참고-문헌"><span>참고 문헌</span></a></h3>`,13)),p(l,u(r({title:"The Ultimate Disassembly Framework - Capstone - The Ultimate Disassembler",desc:"The Ultimate Disassembler",link:"https://www.capstone-engine.org",logo:"https://www.capstone-engine.org/favicon.ico",background:"rgba(177,46,61,0.2)"})),null,16)])}const R=m(_,[["render",q]]),E=JSON.parse('{"path":"/meetup.nhncloud.com/378.html","title":"디스어셈블 프레임워크 Capstone-engine 활용하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"디스어셈블 프레임워크 Capstone-engine 활용하기","description":"Article(s) > 디스어셈블 프레임워크 Capstone-engine 활용하기","icon":"fa-brands fa-python","category":["Python","C++","Article(s)"],"tag":["blog","meetup.nhncloud.com","python","py","cpp","c++"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"디스어셈블 프레임워크 Capstone-engine 활용하기\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/meetup.nhncloud.com/378/banner.png\\",\\"https://image.toast.com/aaaadh/real/2024/techblog/capstoneengine01.png\\",\\"https://image.toast.com/aaaadh/real/2024/techblog/capstoneengine02.png\\"],\\"datePublished\\":\\"2024-03-18T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/meetup.nhncloud.com/378.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"디스어셈블 프레임워크 Capstone-engine 활용하기"}],["meta",{"property":"og:description","content":"Article(s) > 디스어셈블 프레임워크 Capstone-engine 활용하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/meetup.nhncloud.com/378/banner.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/meetup.nhncloud.com/378/banner.png"}],["meta",{"name":"twitter:image:alt","content":"디스어셈블 프레임워크 Capstone-engine 활용하기"}],["meta",{"property":"article:tag","content":"c++"}],["meta",{"property":"article:tag","content":"cpp"}],["meta",{"property":"article:tag","content":"py"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"meetup.nhncloud.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-03-18T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 디스어셈블 프레임워크 Capstone-engine 활용하기"},{"property":"og:description","content":"디스어셈블 프레임워크 Capstone-engine 활용하기"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/meetup.nhncloud.com/378.html"}]],"prev":"/programming/py/articles/README.md","date":"2024-03-18T00:00:00.000Z","isOriginal":false,"cover":"/assets/image/meetup.nhncloud.com/378/banner.png"},"git":{},"readingTime":{"minutes":2.48,"words":745},"filePathRelative":"meetup.nhncloud.com/378.md"}');export{R as comp,E as data};
