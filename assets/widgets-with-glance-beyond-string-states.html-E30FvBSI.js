import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as t,b as o,a as e,t as b,n as d,g as u,w as k,e as a,r as p,o as f}from"./app-BVguHYKu.js";const w={},h={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},W={class:"table-of-contents"},S={class:"hint-container note"},x={href:"https://medium.com/proandroiddev/widgets-with-glance-blending-in-ae1e52a6cb6f",target:"_blank",rel:"noopener noreferrer"},B={href:"https://medium.com/proandroiddev/widgets-with-glance-standing-out-33834eee2dee",target:"_blank",rel:"noopener noreferrer"},T={href:"https://play.google.com/store/apps/details?id=dev.veryniche.buckaroo",target:"_blank",rel:"noopener noreferrer"},E={href:"https://developer.android.com/develop/ui/compose/glance/glance-app-widget",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/KatieBarnett/MotivateMe/tree/blog/CustomGlanceStateDefinition",target:"_blank",rel:"noopener noreferrer"};function Q(m,n){const l=p("VPCard"),c=p("router-link"),r=p("SiteInfo"),i=p("VPIcon");return f(),v("div",null,[s("h1",h,[s("a",y,[s("span",null,b(m.$frontmatter.title)+" 관련",1)])]),t(l,d(u({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",W,[s("ul",null,[s("li",null,[t(c,{to:"#basic-widget-state"},{default:k(()=>n[0]||(n[0]=[a("Basic widget state")])),_:1,__:[0]})]),s("li",null,[t(c,{to:"#a-custom-state-model-with-json-serialization"},{default:k(()=>n[1]||(n[1]=[a("A custom state model with Json Serialization")])),_:1,__:[1]})])])]),n[37]||(n[37]=s("hr",null,null,-1)),t(r,{name:"Widgets With Glance: Beyond String States",desc:"Use a custom GlanceStateDefinition to manage your widget state",url:"https://droidcon.com/widgets-with-glance-beyond-string-states",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",preview:"https://droidcon.com/wp-content/uploads/2024/11/1_CRseHrplJF6Df_UEDsD73g-1024x585.webp"}),s("div",S,[n[11]||(n[11]=s("p",{class:"hint-container-title"},"Note",-1)),s("p",null,[n[8]||(n[8]=a("This the next in my series of blog posts all about widgets. Check out ")),s("a",x,[n[2]||(n[2]=a("Widgets with Glance: Blending in (")),t(i,{icon:"fa-brands fa-medium"}),n[3]||(n[3]=s("code",null,"proandroiddev",-1)),n[4]||(n[4]=a(")"))]),n[9]||(n[9]=a(" and ")),s("a",B,[n[5]||(n[5]=a("Widgets with Glance: Standing out (")),t(i,{icon:"fa-brands fa-medium"}),n[6]||(n[6]=s("code",null,"proandroiddev",-1)),n[7]||(n[7]=a(")"))]),n[10]||(n[10]=a(" for some Widget UI tricks and tips."))])]),s("p",null,[n[15]||(n[15]=a("I have recently been working on an app (")),s("a",T,[n[12]||(n[12]=a("Pay Day: Earnings Time Tracker (")),t(i,{icon:"fa-brands fa-play-store"}),n[13]||(n[13]=s("code",null,"dev.veryniche.buckaroo",-1)),n[14]||(n[14]=a(")"))]),n[16]||(n[16]=a(") that includes a lot of widgets that show different types of data, but very quickly I came across a problem. The standard way of passing data to a widget uses")),n[17]||(n[17]=s("code",null,"PreferencesGlanceStateDefinition",-1)),n[18]||(n[18]=a("to manage the state. The way of setting state is using key & value pairs where the values are always")),n[19]||(n[19]=s("code",null,"strings",-1)),n[20]||(n[20]=a(". In my app I also needed")),n[21]||(n[21]=s("code",null,"enums",-1)),n[22]||(n[22]=a("&")),n[23]||(n[23]=s("code",null,"float",-1)),n[24]||(n[24]=a("values and was constantly converting to and from strings for many different data arguments and many different widget implementations. This became hard to manage and hard to read and a reusable and type safe solution was required."))]),s("p",null,[n[26]||(n[26]=a("I had read about using a")),n[27]||(n[27]=s("code",null,"CustomGlanceStateDefinition",-1)),n[28]||(n[28]=a("but I couldn’t find much about it in the official")),s("a",E,[t(i,{icon:"fa-brands fa-android"}),n[25]||(n[25]=a("documentation"))]),n[29]||(n[29]=a("so here is my deep dive to hopefully help anyone else struggling with managing complex")),n[30]||(n[30]=s("code",null,"GlanceWidget",-1)),n[31]||(n[31]=a("state!"))]),n[38]||(n[38]=s("hr",null,null,-1)),n[39]||(n[39]=s("h2",{id:"basic-widget-state",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#basic-widget-state"},[s("span",null,"Basic widget state")])],-1)),s("p",null,[n[35]||(n[35]=a("For the purposes of this article I have used a simpler")),s("a",G,[n[32]||(n[32]=a("example (")),t(i,{icon:"iconfont icon-github"}),n[33]||(n[33]=s("code",null,"KatieBarnett/MotivateMe",-1)),n[34]||(n[34]=a(")"))]),n[36]||(n[36]=a("that just displays a text quote. While this example probably could get away with just using the string based values, adding some structure to the model can enable better loading and error states."))]),t(r,{name:"KatieBarnett/MotivateMe",desc:"Sample app for Widget Fever: A Hands-On Workshop with Jetpack Compose Glance & Gemini",url:"https://github.com/KatieBarnett/MotivateMe/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/e48744e1af1e9e66eb80f2b5d2e02dc223574c5da2a50758e30a7af1b5bb0d3f/KatieBarnett/MotivateMe"}),n[40]||(n[40]=o(`<p>The starting point just sets a topic and quote as strings:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="QuoteWidget.kt"><span>QuoteWidget.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> QuoteWidget <span class="token operator">:</span> <span class="token function">GlanceAppWidget</span><span class="token punctuation">(</span>errorUiLayout <span class="token operator">=</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>widget_error_layout<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> KEY_TOPIC <span class="token operator">=</span> <span class="token function">stringPreferencesKey</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;topic&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> KEY_QUOTE <span class="token operator">=</span> <span class="token function">stringPreferencesKey</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;quote&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">override</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">provideGlance</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> id<span class="token operator">:</span> GlanceId<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    provideContent <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Fetch the state</span></span>
<span class="line">      <span class="token keyword">val</span> displayText <span class="token operator">=</span> <span class="token function">currentState</span><span class="token punctuation">(</span>KEY_QUOTE<span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token string-literal singleline"><span class="token string">&quot;Quote not found&quot;</span></span></span>
<span class="line">      <span class="token keyword">val</span> topic <span class="token operator">=</span> <span class="token function">currentState</span><span class="token punctuation">(</span>KEY_TOPIC<span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span></span>
<span class="line">      <span class="token comment">// Use the state</span></span>
<span class="line">      <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),e(" @include: https://gist.github.com/KatieBarnett/db34d160b0a42ff033e455babff31f7f/raw/4d284816baca5b6b3dd30619cf0a60028cb98a4c/QuoteWidget.kt "),n[41]||(n[41]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="QuoteWidgetWorker.kt"><span>QuoteWidgetWorker.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> <span class="token function">QuoteWidgetWorker</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">CoroutineWorker</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">override</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Result <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    appWidgetManager<span class="token punctuation">.</span><span class="token function">getGlanceIds</span><span class="token punctuation">(</span>QuoteWidget<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> glanceId <span class="token operator">-&gt;</span></span>
<span class="line">      <span class="token comment">// ...</span></span>
<span class="line">      <span class="token comment">// Update the widget with the new state</span></span>
<span class="line">      <span class="token function">updateAppWidgetState</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> glanceId<span class="token punctuation">)</span> <span class="token punctuation">{</span> prefs <span class="token operator">-&gt;</span></span>
<span class="line">        prefs<span class="token punctuation">[</span>KEY_QUOTE<span class="token punctuation">]</span> <span class="token operator">=</span> newQuote<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">?:</span> <span class="token string-literal singleline"><span class="token string">&quot;Quote not found&quot;</span></span></span>
<span class="line">        prefs<span class="token punctuation">[</span>KEY_TOPIC<span class="token punctuation">]</span> <span class="token operator">=</span> topicName</span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// Let the widget know there is a new state so it updates the UI</span></span>
<span class="line">      <span class="token function">QuoteWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> glanceId<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),e(" @include: https://gist.github.com/KatieBarnett/db34d160b0a42ff033e455babff31f7f/raw/4d284816baca5b6b3dd30619cf0a60028cb98a4c/QuoteWidgetWorker.kt "),n[42]||(n[42]=o(`<p>A<code>CoroutineWorker</code> is used to update the state periodically. You could use any method of setting the widget state, the same principles apply.</p><hr><h2 id="a-custom-state-model-with-json-serialization" tabindex="-1"><a class="header-anchor" href="#a-custom-state-model-with-json-serialization"><span>A custom state model with Json Serialization</span></a></h2><p>So this works well if the state is fairly straightforward and is just represented as simple strings, but what if we want a more complex model?</p><p>My first attempt to use a more complex model, I started by serializing the model to<code>Json</code>.</p><p>Using my<code>QuoteWidget</code>example, a better model might be:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="WidgetState.kt"><span>WidgetState.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">WidgetState</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">val</span> topicName<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> quote<span class="token operator">:</span> Quote<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Quote</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">val</span> text<span class="token operator">:</span> String</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,7)),e(" @include: https://gist.github.com/KatieBarnett/e7f849c0e3604d1900ec6ef393dbadc6/raw/88891335815d279ace3f8f50589c126be6675c2b/WidgetState.kt "),n[43]||(n[43]=o(`<p>Then, we can serialize the model as<code>Json</code>and then use that as the string value in the widget.</p><p>The first step is to use<code>kotlinx.serialization</code>to serialize the data model:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="WidgetState.kt"><span>WidgetState.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Serializable</span></span>
<span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">WidgetState</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">val</span> topicName<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> quote<span class="token operator">:</span> Quote<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@Serializable</span></span>
<span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Quote</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">val</span> text<span class="token operator">:</span> String</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),e(" @include: https://gist.github.com/KatieBarnett/ac2dc1096815882e67a94bbab39e1d85/raw/50509292a93c477d819fc70cb61253ba97448e64/WidgetState.kt "),n[44]||(n[44]=o(`<p>Then, we can use<code>kotlinx.serialization.json</code> to encode and decode the model to a string when writing and reading from the state object:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="QuoteWidget.kt"><span>QuoteWidget.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> QuoteWidget <span class="token operator">:</span> <span class="token function">GlanceAppWidget</span><span class="token punctuation">(</span>errorUiLayout <span class="token operator">=</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>widget_error_layout<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> KEY_STATE <span class="token operator">=</span> <span class="token function">stringPreferencesKey</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;state&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">override</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">provideGlance</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> id<span class="token operator">:</span> GlanceId<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    provideContent <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Fetch the state</span></span>
<span class="line">      <span class="token keyword">val</span> state <span class="token operator">=</span> <span class="token function">currentState</span><span class="token punctuation">(</span>KEY_STATE<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">val</span> item <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        state<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span></span>
<span class="line">            Json<span class="token punctuation">.</span>decodeFromString<span class="token operator">&lt;</span>WidgetState<span class="token operator">&gt;</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">null</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// Use the state</span></span>
<span class="line">      <span class="token operator">..</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),e(" @include: https://gist.github.com/KatieBarnett/d0ba71c279c7aa741e75155d3b25715a/raw/3fe7801976c7093412a5239a15e158a8c56c23d9/QuoteWidget.kt "),n[45]||(n[45]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="QuoteWidgetWorker.kt"><span>QuoteWidgetWorker.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token function">QuoteWidgetWorker</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">CoroutineWorker</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    <span class="token comment">// Update the widget with the new state</span></span>
<span class="line">    <span class="token function">updateAppWidgetState</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> glanceId<span class="token punctuation">)</span> <span class="token punctuation">{</span> prefs <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token keyword">val</span> newState <span class="token operator">=</span> <span class="token function">WidgetState</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span>
<span class="line">        prefs<span class="token punctuation">[</span>KEY_STATE<span class="token punctuation">]</span> <span class="token operator">=</span> Json<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">//...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),e(" @include: https://gist.github.com/KatieBarnett/d0ba71c279c7aa741e75155d3b25715a/raw/3fe7801976c7093412a5239a15e158a8c56c23d9/QuoteWidgetWorker.kt "),n[46]||(n[46]=s("p",null,"This is pretty good, we can easily fetch and save the model as long as it serializes well. We do have to handle any encoding or decoding errors and respond as needed.",-1)),e(" TODO: add ARTICLE CARD "),t(l,d(u({title:"Widgets With Glance: Beyond String States",desc:"Use a custom GlanceStateDefinition to manage your widget state",link:"https://chanhi2000.github.io/bookshelf/droidcon.com/widgets-with-glance-beyond-string-states.html",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",background:"rgba(4,20,221,0.2)"})),null,16)])}const j=g(w,[["render",Q]]),D=JSON.parse('{"path":"/droidcon.com/widgets-with-glance-beyond-string-states.html","title":"Widgets With Glance: Beyond String States","lang":"en-US","frontmatter":{"lang":"en-US","title":"Widgets With Glance: Beyond String States","description":"Article(s) > Widgets With Glance: Beyond String States","icon":"iconfont icon-jetpack-compose","category":["Java","Kotlin","Android","Jetpack Compose","Article(s)"],"tag":["blog","droidcon.com","java","kotlin","android","jetpack-compse"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Widgets With Glance: Beyond String States\\",\\"image\\":[\\"https://droidcon.com/wp-content/uploads/2024/11/1_CRseHrplJF6Df_UEDsD73g-1024x585.webp\\"],\\"datePublished\\":\\"2024-11-27T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Katie Barnett\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/widgets-with-glance-beyond-string-states.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Widgets With Glance: Beyond String States"}],["meta",{"property":"og:description","content":"Article(s) > Widgets With Glance: Beyond String States"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://droidcon.com/wp-content/uploads/2024/11/1_CRseHrplJF6Df_UEDsD73g-1024x585.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://droidcon.com/wp-content/uploads/2024/11/1_CRseHrplJF6Df_UEDsD73g-1024x585.webp"}],["meta",{"name":"twitter:image:alt","content":"Widgets With Glance: Beyond String States"}],["meta",{"property":"article:author","content":"Katie Barnett"}],["meta",{"property":"article:tag","content":"jetpack-compse"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"droidcon.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-27T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Widgets With Glance: Beyond String States"},{"property":"og:description","content":"Widgets With Glance: Beyond String States"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/widgets-with-glance-beyond-string-states.html"}]],"prev":"/programming/java-android/articles/README.md","date":"2024-11-27T00:00:00.000Z","isOriginal":false,"author":"Katie Barnett","cover":"https://droidcon.com/wp-content/uploads/2024/11/1_CRseHrplJF6Df_UEDsD73g-1024x585.webp"},"git":{},"readingTime":{"minutes":3.15,"words":945},"filePathRelative":"droidcon.com/widgets-with-glance-beyond-string-states.md","copyright":{"author":"Katie Barnett"}}');export{j as comp,D as data};
