import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,d as s,f as a,b as d,t as m,n as k,g,w as t,r as p,o as h,e as o}from"./app-BVguHYKu.js";const v={},y={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"};function f(r,n){const i=p("VPCard"),e=p("router-link"),c=p("SiteInfo");return h(),u("div",null,[s("h1",y,[s("a",b,[s("span",null,m(r.$frontmatter.title)+" 관련",1)])]),a(i,k(g({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",w,[s("ul",null,[s("li",null,[a(e,{to:"#ef-core-and-sql-queries"},{default:t(()=>n[0]||(n[0]=[o("EF Core And SQL Queries")])),_:1,__:[0]})]),s("li",null,[a(e,{to:"#composing-sql-queries-with-linq"},{default:t(()=>n[1]||(n[1]=[o("Composing SQL Queries With LINQ")])),_:1,__:[1]})]),s("li",null,[a(e,{to:"#sql-queries-for-data-modifications"},{default:t(()=>n[2]||(n[2]=[o("SQL Queries For Data Modifications")])),_:1,__:[2]})]),s("li",null,[a(e,{to:"#in-summary"},{default:t(()=>n[3]||(n[3]=[o("In Summary")])),_:1,__:[3]})])])]),n[4]||(n[4]=s("hr",null,null,-1)),a(c,{name:"EF Core Raw SQL Queries",desc:"EF Core is getting many new and exciting features in the upcoming version. EF7 introduced support for returning scalar types using SQL queries. And now we're getting support for querying unmapped types with raw SQL queries in EF8. This is exactly what Dapper offers out of the box, and it's good to see EF Core catching up.",url:"https://milanjovanovic.tech/blog/ef-core-raw-sql-queries/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_033.png"}),n[5]||(n[5]=d(`<p><strong>EF Core</strong> is getting many new and exciting features in the upcoming version.</p><p><strong>EF7</strong> introduced support for returning <strong>scalar types</strong> using <strong>SQL</strong> queries.</p><p>And now we&#39;re getting support for <strong>querying unmapped types</strong> with <strong>raw SQL queries</strong> in <strong>EF8.</strong></p><p>This is exactly what <strong>Dapper</strong> offers out of the box, and it&#39;s good to see <strong>EF Core</strong> catching up.</p><hr><h2 id="ef-core-and-sql-queries" tabindex="-1"><a class="header-anchor" href="#ef-core-and-sql-queries"><span>EF Core And SQL Queries</span></a></h2><p><strong>EF7</strong> added support for <strong>raw SQL queries</strong> returning scalar types. <strong>EF8</strong> is taking this a step further with raw SQL queries that can return any mappable type, without having to include it in the <strong>EF model</strong>.</p><p>You can query unmapped types with the <code>SqlQuery</code> and <code>SqlQueryRaw</code> methods.</p><p>The <code>SqlQuery</code> method uses string interpolation to parameterize the query, protecting against SQL injection attacks.</p><p>Here&#39;s an example query returning an <code>OrderSummary</code> list:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> startDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateOnly</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> ordersIn2023 <span class="token operator">=</span> <span class="token keyword">await</span> dbContext</span>
<span class="line">    <span class="token punctuation">.</span>Database</span>
<span class="line">    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlQuery</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrderSummary<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token interpolation-string"><span class="token string">$&quot;SELECT * FROM OrderSummaries AS o WHERE o.CreatedOn &gt;= </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">startDate</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will be the <strong>SQL</strong> sent to the database:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> OrderSummaries <span class="token keyword">AS</span> o <span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>CreatedOn <span class="token operator">&gt;=</span> <span class="token variable">@p0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The type used for the query result can have a parameterized constructor. The property names don&#39;t need to match the column names in the database, but they do have to match the names of the values in the result set.</p><p>You can also execute raw SQL queries and return results with:</p><ul><li>Views</li><li>Functions</li><li>Stored procedures</li></ul><hr><h2 id="composing-sql-queries-with-linq" tabindex="-1"><a class="header-anchor" href="#composing-sql-queries-with-linq"><span>Composing SQL Queries With LINQ</span></a></h2><p>An interesting thing about <code>SqlQuery</code> is that it returns <code>IQueryable</code>, which can be further composed with <strong>LINQ.</strong></p><p>You can add a <code>Where</code> statement after calling <code>SqlQuery</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> startDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateOnly</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> ordersIn2023 <span class="token operator">=</span> <span class="token keyword">await</span> dbContext</span>
<span class="line">    <span class="token punctuation">.</span>Database</span>
<span class="line">    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlQuery</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrderSummary<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM OrderSummaries AS o&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>CreatedOn <span class="token operator">&gt;=</span> startDate<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, the generated <strong>SQL</strong> isn&#39;t optimal:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> s<span class="token punctuation">.</span>CustomerId<span class="token punctuation">,</span> s<span class="token punctuation">.</span>TotalPrice<span class="token punctuation">,</span> s<span class="token punctuation">.</span>CreatedOn</span>
<span class="line"><span class="token keyword">FROM</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> OrderSummaries <span class="token keyword">AS</span> o</span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">AS</span> s</span>
<span class="line"><span class="token keyword">WHERE</span> s<span class="token punctuation">.</span>CreatedOn <span class="token operator">&gt;=</span> <span class="token variable">@p0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Another possibility is to combine an <code>OrderBy</code> statement with <code>Skip</code> and <code>Take</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> startDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateOnly</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> ordersIn2023 <span class="token operator">=</span> <span class="token keyword">await</span> dbContext</span>
<span class="line">    <span class="token punctuation">.</span>Database</span>
<span class="line">    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlQuery</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrderSummary<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token interpolation-string"><span class="token string">$&quot;SELECT * FROM OrderSummaries AS o WHERE o.CreatedOn &gt;= </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">startDate</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>Id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This would be the generated <strong>SQL</strong> for the previous query:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> s<span class="token punctuation">.</span>CustomerId<span class="token punctuation">,</span> s<span class="token punctuation">.</span>TotalPrice<span class="token punctuation">,</span> s<span class="token punctuation">.</span>CreatedOn</span>
<span class="line"><span class="token keyword">FROM</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> OrderSummaries <span class="token keyword">AS</span> o <span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>CreatedOn <span class="token operator">&gt;=</span> <span class="token variable">@p0</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">AS</span> s</span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> s<span class="token punctuation">.</span>Id</span>
<span class="line"><span class="token keyword">OFFSET</span> <span class="token variable">@p1</span> <span class="token keyword">ROWS</span> <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token variable">@p2</span> <span class="token keyword">ROWS</span> ONLY</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In case you&#39;re wondering, the performance is similar to <strong>LINQ</strong> queries using <code>Select</code> projections.</p><p>I ran some benchmarks, and didn&#39;t notice any significant performance improvement.</p><p>This feature will be very useful if you&#39;re more comfortable with writing <strong>SQL</strong> or you want to fetch data from views, functions, and stored procedures.</p><hr><h2 id="sql-queries-for-data-modifications" tabindex="-1"><a class="header-anchor" href="#sql-queries-for-data-modifications"><span>SQL Queries For Data Modifications</span></a></h2><p>If you want to modify data in the database with <strong>SQL</strong>, you will typically write a query that doesn&#39;t return a result.</p><p>The SQL query can be an <code>UPDATE</code> or <code>DELETE</code> statement, or even a stored procedure call.</p><p>You can use the <code>ExecuteSql</code> method to execute this type of query with <strong>EF Core</strong>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> startDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateOnly</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">dbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">ExecuteSql</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token interpolation-string"><span class="token string">$&quot;UPDATE Orders SET Status = 5 WHERE CreatedOn &gt;= </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">startDate</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ExecuteSql</code> also protects from SQL injection by parameterizing arguments, just like <code>SqlQuery</code>.</p><p>With <strong>EF7</strong> you can write the above query with <strong>LINQ</strong> and the <code>ExecuteUpdate</code> method. There&#39;s also the <code>ExecuteDelete</code> method for deleting records.</p><hr><h2 id="in-summary" tabindex="-1"><a class="header-anchor" href="#in-summary"><span>In Summary</span></a></h2><p><strong>EF7</strong> introduced support for raw SQL queries returning <strong>scalar</strong> values.</p><p><strong>EF8</strong> will add support for <strong>raw SQL queries</strong> returning <strong>unmapped types</strong> with <code>SqlQuery</code> and <code>SqlQueryRaw</code>.</p><p>I like the direction that <strong>EF</strong> is going, introducing more flexibility for querying the database.</p><p>The performance isn&#39;t as good as <strong>Dapper</strong>, unfortunately. But it&#39;s close enough that network costs will play the bigger factor.</p><p>I will probably be using only <strong>EF</strong> moving forward since it covers more use cases.</p><p>Thank you for reading, and have an awesome Saturday.</p>`,46))])}const E=l(v,[["render",f]]),Q=JSON.parse('{"path":"/milanjovanovic.tech/ef-core-raw-sql-queries.html","title":"EF Core Raw SQL Queries","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"EF Core Raw SQL Queries","description":"Article(s) > EF Core Raw SQL Queries","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"EF Core Raw SQL Queries\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_033.png\\"],\\"datePublished\\":\\"2023-04-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/ef-core-raw-sql-queries.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"EF Core Raw SQL Queries"}],["meta",{"property":"og:description","content":"Article(s) > EF Core Raw SQL Queries"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_033.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_033.png"}],["meta",{"name":"twitter:image:alt","content":"EF Core Raw SQL Queries"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-04-15T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > EF Core Raw SQL Queries"},{"property":"og:description","content":"EF Core Raw SQL Queries"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/ef-core-raw-sql-queries.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-04-15T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_033.png"},"git":{},"readingTime":{"minutes":2.78,"words":834},"filePathRelative":"milanjovanovic.tech/ef-core-raw-sql-queries.md","copyright":{"author":"Milan Jovanović"}}');export{E as comp,Q as data};
