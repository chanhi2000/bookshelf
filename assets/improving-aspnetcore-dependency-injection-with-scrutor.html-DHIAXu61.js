import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as a,b as c,t as v,n as g,g as h,w as t,e,r as p,o as y}from"./app-BVguHYKu.js";const b={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},A={href:"https://nuget.org/packages/Scrutor",target:"_blank",rel:"noopener noreferrer"},I={href:"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-7.0",target:"_blank",rel:"noopener noreferrer"},j={href:"https://learn.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/architectural-principles#dependency-inversion",target:"_blank",rel:"noopener noreferrer"},C={href:"https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#service-lifetimes",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/khellang/Scrutor",target:"_blank",rel:"noopener noreferrer"};function T(l,n){const r=p("VPCard"),i=p("router-link"),u=p("SiteInfo"),o=p("VPIcon"),d=p("RouteLink");return y(),k("div",null,[s("h1",f,[s("a",w,[s("span",null,v(l.$frontmatter.title)+" 관련",1)])]),a(r,g(h({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[a(i,{to:"#what-is-dependency-injection"},{default:t(()=>n[0]||(n[0]=[e("What is Dependency Injection?")])),_:1,__:[0]})]),s("li",null,[a(i,{to:"#service-lifetimes-in-asp-net-core"},{default:t(()=>n[1]||(n[1]=[e("Service Lifetimes in ASP.NET Core")])),_:1,__:[1]})]),s("li",null,[a(i,{to:"#what-is-scrutor"},{default:t(()=>n[2]||(n[2]=[e("What is Scrutor?")])),_:1,__:[2]})]),s("li",null,[a(i,{to:"#assembly-scanning-with-scrutor"},{default:t(()=>n[3]||(n[3]=[e("Assembly Scanning With Scrutor")])),_:1,__:[3]})]),s("li",null,[a(i,{to:"#service-decoration-with-scrutor"},{default:t(()=>n[4]||(n[4]=[e("Service Decoration With Scrutor")])),_:1,__:[4]})]),s("li",null,[a(i,{to:"#takeaway"},{default:t(()=>n[5]||(n[5]=[e("Takeaway")])),_:1,__:[5]})])])]),n[26]||(n[26]=s("hr",null,null,-1)),a(u,{name:"Improving ASP.NET Core Dependency Injection With Scrutor",desc:"Dependency injection (DI) is one of the most exciting features of ASP.NET Core. It helps us build more testable and maintainable applications. However, ASP.NET Core's built-in DI system sometimes needs a little help to achieve more advanced scenarios. So I want to introduce you to a powerful library for enhancing your ASP.NET Core DI - Scrutor.",url:"https://milanjovanovic.tech/blog/improving-aspnetcore-dependency-injection-with-scrutor/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_059.png"}),n[27]||(n[27]=s("p",null,"Dependency injection (DI) is one of the most exciting features of ASP.NET Core. It helps us build more testable and maintainable applications. However, ASP.NET Core's built-in DI system sometimes needs a little help to achieve more advanced scenarios.",-1)),s("p",null,[n[7]||(n[7]=e("So I want to introduce you to a powerful library for enhancing your ASP.NET Core DI - ")),s("a",A,[a(o,{icon:"fas fa-globe"}),n[6]||(n[6]=e("Scrutor"))]),n[8]||(n[8]=e("."))]),n[28]||(n[28]=s("p",null,"If you're an ASP.NET Core developer, you're already familiar with Dependency Injection. It's a fundamental part of building modular and maintainable applications.",-1)),n[29]||(n[29]=s("p",null,"Let's explore how Scrutor can simplify and enhance your DI setup.",-1)),n[30]||(n[30]=s("hr",null,null,-1)),n[31]||(n[31]=s("h2",{id:"what-is-dependency-injection",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#what-is-dependency-injection"},[s("span",null,"What is Dependency Injection?")])],-1)),s("p",null,[s("a",I,[a(o,{icon:"fa-brands fa-microsoft"}),n[9]||(n[9]=e("Dependency Injection"))]),n[11]||(n[11]=e(" is a software design pattern used in ASP.NET Core to achieve the ")),s("a",j,[a(o,{icon:"fa-brands fa-microsoft"}),n[10]||(n[10]=e("Inversion of Control (IOC)"))]),n[12]||(n[12]=e(" principle. This promotes loose coupling and makes your code more testable, maintainable, and extensible."))]),n[32]||(n[32]=c(`<p>DI allows you to inject dependencies into your classes rather than create them within the class. The framework takes care of providing the required instances at runtime. It also manages the disposal of these dependencies based on the service lifetime.</p><p>Here&#39;s an example of combining constructor and method injection in a controller:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;api/activities&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActivitiesController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>ActivitiesController<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Constructor injection</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">ActivitiesController</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>ActivitiesController<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name">ISender</span> sender<span class="token punctuation">)</span> <span class="token comment">// Method injection</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> activities <span class="token operator">=</span> <span class="token keyword">await</span> sender<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetActivitiesQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>activities<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="service-lifetimes-in-asp-net-core" tabindex="-1"><a class="header-anchor" href="#service-lifetimes-in-asp-net-core"><span>Service Lifetimes in ASP.NET Core</span></a></h2>`,5)),s("p",null,[n[14]||(n[14]=e("Before we dive into Scrutor, let's briefly discuss ")),s("a",C,[a(o,{icon:"fa-brands fa-microsoft"}),n[13]||(n[13]=e("service lifetimes in ASP.NET Core"))]),n[15]||(n[15]=e(". When you register a service in the DI container, you specify its lifetime. The service lifetime defines how long the DI container should maintain the service."))]),n[33]||(n[33]=c('<p>ASP.NET Core provides three main lifetimes:</p><ul><li><strong>Singleton</strong>: A single instance of the service is created and reused throughout the application&#39;s lifetime.</li><li><strong>Scoped</strong>: A new instance is created for each scope (usually a web request). Services created in the same scope share the same instance.</li><li><strong>Transient</strong>: A new instance is created every time the service is requested.</li></ul><p>Understanding service lifetimes is crucial when designing your application&#39;s architecture.</p><hr><h2 id="what-is-scrutor" tabindex="-1"><a class="header-anchor" href="#what-is-scrutor"><span>What is Scrutor?</span></a></h2>',5)),s("p",null,[n[19]||(n[19]=e("The ")),s("a",P,[n[16]||(n[16]=e("Scrutor library (")),a(o,{icon:"iconfont icon-github"}),n[17]||(n[17]=s("code",null,"khellang/Scrutor",-1)),n[18]||(n[18]=e(")"))]),n[20]||(n[20]=e(" improves your dependency injection code by extending the existing features from ")),n[21]||(n[21]=s("code",null,"Microsoft.Extensions.DependencyInjection",-1)),n[22]||(n[22]=e("."))]),n[34]||(n[34]=c(`<p>These extensions add support for advanced assembly scanning and service decoration.</p><p>To get started using Scrutor, you need to install the NuGet package:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> Scrutor</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="assembly-scanning-with-scrutor" tabindex="-1"><a class="header-anchor" href="#assembly-scanning-with-scrutor"><span>Assembly Scanning With Scrutor</span></a></h2><p>One of the most powerful features of Scrutor is its ability to perform assembly scanning. Rather than manually registering each service, Scrutor allows you to scan your assemblies for types that should be registered with the DI container. This can significantly reduce the boilerplate code required for service registration, making your code cleaner and more maintainable.</p><p>The entry point for assembly scanning is the <code>Scan</code> method, which accepts a delegate to define the DI setup.</p><p>Here&#39;s an example of scanning two assemblies and registering the classes inside as scoped services:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>selector <span class="token operator">=&gt;</span> selector</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">FromAssemblies</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">PersistenceAssembly</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">InfrastructureAssembly</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddClasses</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">publicOnly</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">UsingRegistrationStrategy</span><span class="token punctuation">(</span>RegistrationStrategy<span class="token punctuation">.</span>Skip<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AsMatchingInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">WithScopedLifetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s unpack what&#39;s happening here:</p><ul><li><code>FromAssemblies</code> - allows you to specify which assemblies to scan</li><li><code>AddClasses</code> - adds the classes from the selected assemblies</li><li><code>UsingRegistrationStrategy</code> - defines which <code>RegistrationStrategy</code> to use</li><li><code>AsMatchingInterface</code> - registers the types as matching interfaces (<code>ClassName</code> → <code>IClassName</code>)</li><li><code>WithScopedLifetime</code> - registers the types with a scoped service lifetime</li></ul><p>There are three values for <code>RegistrationStrategy</code> you can use:</p><ul><li><code>RegistrationStrategy.Skip</code> - skips registrations if service already exists</li><li><code>RegistrationStrategy.Append</code>- appends a new registration for existing services</li><li><code>RegistrationStrategy.Throw</code>- throws when trying to register an existing service</li></ul><p>You can also specify a filter to <code>AddClasses</code> to select specific types you want to configure. Here&#39;s an example of registering repository implementations:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">services<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>scan <span class="token operator">=&gt;</span> scan</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">FromAssemblies</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">PersistenceAssembly</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddClasses</span><span class="token punctuation">(</span></span>
<span class="line">        filter <span class="token operator">=&gt;</span> filter<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">&quot;Repository&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token named-parameter punctuation">publicOnly</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">UsingRegistrationStrategy</span><span class="token punctuation">(</span>RegistrationStrategy<span class="token punctuation">.</span>Throw<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AsMatchingInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">WithScopedLifetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="service-decoration-with-scrutor" tabindex="-1"><a class="header-anchor" href="#service-decoration-with-scrutor"><span>Service Decoration With Scrutor</span></a></h2><p>Service decoration is another valuable feature offered by Scrutor. It enables you to modify or extend services during registration without changing the original implementation.</p>`,18)),s("p",null,[n[24]||(n[24]=e("This is incredibly useful when adding cross-cutting concerns or other modifications to services without altering their core functionality. For example, you can implement a ")),a(d,{to:"/milanjovanovic.tech/decorator-pattern-in-asp-net-core.html"},{default:t(()=>n[23]||(n[23]=[e("caching decorator for repositories")])),_:1,__:[23]}),n[25]||(n[25]=e("."))]),n[35]||(n[35]=c(`<p>Here&#39;s how you can configure a decorator with Scrutor&#39;s <code>Decorate</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IActivitiesRepository<span class="token punctuation">,</span> ActivitiesRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Decorate</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IActivitiesRepository<span class="token punctuation">,</span> PermissionActivitiesRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It will decorate the <code>ActivitiesRepository</code> service using the <code>PermissionActivitiesRepository</code>. This also means that <code>PermissionActivitiesRepository</code> can inject an <code>IActivitiesRepository</code> instance, and at runtime, this is resolved as <code>ActivitiesRepository</code>.</p><p>Here&#39;s how you can implement the <code>PermissionActivitiesRepository</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissionActivitiesRepository</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IActivitiesRepository</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IActivitiesRepository</span> _decorated<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IPermissionChecker</span> _permissionChecker<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">PermissionActivitiesRepository</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">IActivitiesRepository</span> decorated<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">IPermissionChecker</span> permissionChecker<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _decorated <span class="token operator">=</span> decorated<span class="token punctuation">;</span></span>
<span class="line">        _permissionChecker <span class="token operator">=</span> permissionChecker<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Activity<span class="token punctuation">&gt;</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_permissionChecker<span class="token punctuation">.</span><span class="token function">HasPermission</span><span class="token punctuation">(</span>Permissions<span class="token punctuation">.</span>FetchActivities<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> _decorated<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="takeaway" tabindex="-1"><a class="header-anchor" href="#takeaway"><span>Takeaway</span></a></h2><p>Scrutor can improve your ASP.NET Core DI by simplifying service registration through assembly scanning and enabling service decoration. You can use Scrutor&#39;s capabilities to write cleaner, more maintainable, and flexible DI code while reducing the complexity of your startup configuration.</p><p>Assembly scanning can reduce the boilerplate code required for service registration. It also allows you to create custom conventions for registering services.</p><p>Service decoration has been a real game-changer for me. It&#39;s the simplest way to introduce cross-cutting concerns in your application. For example, I used to add an idempotency check before handling events.</p><p>Hope this was valuable.</p><p>Stay awesome!</p>`,12))])}const R=m(b,[["render",T]]),N=JSON.parse('{"path":"/milanjovanovic.tech/improving-aspnetcore-dependency-injection-with-scrutor.html","title":"Improving ASP.NET Core Dependency Injection With Scrutor","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Improving ASP.NET Core Dependency Injection With Scrutor","description":"Article(s) > Improving ASP.NET Core Dependency Injection With Scrutor","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Improving ASP.NET Core Dependency Injection With Scrutor\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_059.png\\"],\\"datePublished\\":\\"2023-10-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/improving-aspnetcore-dependency-injection-with-scrutor.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Improving ASP.NET Core Dependency Injection With Scrutor"}],["meta",{"property":"og:description","content":"Article(s) > Improving ASP.NET Core Dependency Injection With Scrutor"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_059.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_059.png"}],["meta",{"name":"twitter:image:alt","content":"Improving ASP.NET Core Dependency Injection With Scrutor"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-10-14T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Improving ASP.NET Core Dependency Injection With Scrutor"},{"property":"og:description","content":"Improving ASP.NET Core Dependency Injection With Scrutor"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/improving-aspnetcore-dependency-injection-with-scrutor.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-10-14T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_059.png"},"git":{},"readingTime":{"minutes":3.81,"words":1144},"filePathRelative":"milanjovanovic.tech/improving-aspnetcore-dependency-injection-with-scrutor.md","copyright":{"author":"Milan Jovanović"}}');export{R as comp,N as data};
