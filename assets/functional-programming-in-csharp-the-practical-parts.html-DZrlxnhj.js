import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as e,b as o,a as g,t as y,n as u,g as d,w as t,e as a,r as l,o as w}from"./app-BVguHYKu.js";const f={},P={id:"frontmatter-title-관련",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},O={href:"https://youtu.be/E3dU9Y1CsnI",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/mcintyre321/OneOf",target:"_blank",rel:"noopener noreferrer"};function V(k,n){const i=l("VPCard"),p=l("router-link"),m=l("SiteInfo"),c=l("VPIcon"),v=l("VidStack"),r=l("RouteLink");return w(),h("div",null,[s("h1",P,[s("a",C,[s("span",null,y(k.$frontmatter.title)+" 관련",1)])]),e(i,u(d({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[e(p,{to:"#higher-order-functions"},{default:t(()=>n[0]||(n[0]=[a("Higher-Order Functions")])),_:1,__:[0]})]),s("li",null,[e(p,{to:"#errors-as-values"},{default:t(()=>n[1]||(n[1]=[a("Errors as Values")])),_:1,__:[1]})]),s("li",null,[e(p,{to:"#monadic-binding"},{default:t(()=>n[2]||(n[2]=[a("Monadic Binding")])),_:1,__:[2]})]),s("li",null,[e(p,{to:"#pure-functions"},{default:t(()=>n[3]||(n[3]=[a("Pure Functions")])),_:1,__:[3]})]),s("li",null,[e(p,{to:"#immutability"},{default:t(()=>n[4]||(n[4]=[a("Immutability")])),_:1,__:[4]})]),s("li",null,[e(p,{to:"#takeaway"},{default:t(()=>n[5]||(n[5]=[a("Takeaway")])),_:1,__:[5]})])])]),n[19]||(n[19]=s("hr",null,null,-1)),e(m,{name:"Functional Programming in C#: The Practical Parts",desc:"Functional programming patterns can make your C# code safer and more maintainable, without getting lost in academic theory. Learn practical patterns you can use today to write better code.",url:"https://milanjovanovic.tech/blog/functional-programming-in-csharp-the-practical-parts",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_115.png"}),n[20]||(n[20]=o(`<p>Functional programming patterns can feel academic and abstract. Terms like &quot;monads&quot; and &quot;functors&quot; scare many developers away. But beneath the intimidating terminology are practical patterns that can make your code safer and more maintainable.</p><p>C# has embraced many functional programming features over the years.</p><ul><li>Records for immutability</li><li>LINQ for functional transformations</li><li>Lambda expressions for first-class functions</li></ul><p>These features aren&#39;t just syntax sugar - they help prevent bugs and make code easier to reason about.</p><p>Let&#39;s look at five practical patterns you can use in your C# projects today.</p><hr><h2 id="higher-order-functions" tabindex="-1"><a class="header-anchor" href="#higher-order-functions"><span>Higher-Order Functions</span></a></h2><p>Higher-order functions can take other functions as parameters or return them as results. They let you write code that&#39;s more flexible and composable because you can pass behavior around like data.</p><p>Common examples of higher-order functions are LINQ&#39;s <code>Where</code> and <code>Select</code>, which take functions to transform data.</p><p>Let&#39;s refactor this validation example with higher-order functions:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="OrderValidator.cs"><span>OrderValidator.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderValidator</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ValidateOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>TotalAmount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span>ShippingAddress <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// What if we need:</span></span>
<span class="line"><span class="token comment">// - different validation rules for different countries?</span></span>
<span class="line"><span class="token comment">// - to reuse some validations but not others?</span></span>
<span class="line"><span class="token comment">// - to combine validations differently?</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here&#39;s how higher-order functions make this more flexible:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="OrderValidation.cs"><span>OrderValidation.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OrderValidation</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Func<span class="token punctuation">&lt;</span>Order<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> <span class="token function">CreateValidator</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> countryCode<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">decimal</span></span> minimumOrderValue<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> baseValidations <span class="token operator">=</span> <span class="token function">CombineValidations</span><span class="token punctuation">(</span></span>
<span class="line">            o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">            o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>TotalAmount <span class="token operator">&gt;=</span> minimumOrderValue<span class="token punctuation">,</span></span>
<span class="line">            o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>ShippingAddress <span class="token operator">!=</span> <span class="token keyword">null</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> countryCode <span class="token keyword">switch</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string">&quot;US&quot;</span> <span class="token operator">=&gt;</span> <span class="token function">CombineValidations</span><span class="token punctuation">(</span></span>
<span class="line">                baseValidations<span class="token punctuation">,</span></span>
<span class="line">                order <span class="token operator">=&gt;</span> <span class="token function">IsValidUSAddress</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>ShippingAddress<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&quot;EU&quot;</span> <span class="token operator">=&gt;</span> <span class="token function">CombineValidations</span><span class="token punctuation">(</span></span>
<span class="line">                baseValidations<span class="token punctuation">,</span></span>
<span class="line">                order <span class="token operator">=&gt;</span> <span class="token function">IsValidVATNumber</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>VatNumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            _ <span class="token operator">=&gt;</span> baseValidations</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">Func<span class="token punctuation">&lt;</span>Order<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> <span class="token function">CombineValidations</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>Order<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> validations<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        order <span class="token operator">=&gt;</span> validations<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>v <span class="token operator">=&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Usage</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> usValidator <span class="token operator">=</span> OrderValidation<span class="token punctuation">.</span><span class="token function">CreateValidator</span><span class="token punctuation">(</span><span class="token string">&quot;US&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">minimumOrderValue</span><span class="token punctuation">:</span> <span class="token number">25.0m</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> euValidator <span class="token operator">=</span> OrderValidation<span class="token punctuation">.</span><span class="token function">CreateValidator</span><span class="token punctuation">(</span><span class="token string">&quot;EU&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">minimumOrderValue</span><span class="token punctuation">:</span> <span class="token number">30.0m</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The higher-order function approach makes validators composable, testable, and easy to extend. Each validation rule is a simple function that we can compose.</p><hr><h2 id="errors-as-values" tabindex="-1"><a class="header-anchor" href="#errors-as-values"><span>Errors as Values</span></a></h2><p>Error handling in C# often looks like this:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="UserService.cs"><span>UserService.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">User</span> <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> email<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> password<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Email is required&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>password<span class="token punctuation">.</span>Length <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Password too short&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>_userRepository<span class="token punctuation">.</span><span class="token function">EmailExists</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DuplicateEmailException</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Create user...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The problem?</p>`,19)),s("ul",null,[s("li",null,[s("a",O,[e(c,{icon:"fa-brands fa-youtube"}),n[6]||(n[6]=a("Exceptions are expensive"))])]),n[7]||(n[7]=s("li",null,"Callers often forget to handle exceptions",-1)),n[8]||(n[8]=s("li",null,"The method signature lies - it claims to return a User but might throw",-1))]),e(v,{src:"youtube/E3dU9Y1CsnI"}),s("p",null,[n[10]||(n[10]=a("We can make errors explicit using the ")),s("a",T,[e(c,{icon:"iconfont icon-github"}),n[9]||(n[9]=s("code",null,"mcintyre321/OneOf",-1))]),n[11]||(n[11]=a(" library. It provides discriminated unions for C#, using a custom type ")),n[12]||(n[12]=s("code",null,"OneOf<T0, ... Tn>",-1)),n[13]||(n[13]=a("."))]),n[21]||(n[21]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="UserService.cs"><span>UserService.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">OneOf<span class="token punctuation">&lt;</span>User<span class="token punctuation">,</span> ValidationError<span class="token punctuation">,</span> DuplicateEmailError<span class="token punctuation">&gt;</span></span> <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> email<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> password<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationError</span><span class="token punctuation">(</span><span class="token string">&quot;Email is required&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>password<span class="token punctuation">.</span>Length <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationError</span><span class="token punctuation">(</span><span class="token string">&quot;Password too short&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>_userRepository<span class="token punctuation">.</span><span class="token function">EmailExists</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DuplicateEmailError</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>By making the errors explicit:</p><ul><li>The method signature tells the whole truth</li><li>Callers must handle all possible outcomes</li><li>No performance overhead from exceptions</li><li>The flow is easier to follow</li></ul><p>Here&#39;s how you use it:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">CreateUser</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">result<span class="token punctuation">.</span><span class="token function">Switch</span><span class="token punctuation">(</span></span>
<span class="line">    user <span class="token operator">=&gt;</span> <span class="token function">SendWelcomeEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    validationError <span class="token operator">=&gt;</span> <span class="token function">HandleError</span><span class="token punctuation">(</span>validationError<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    duplicateError <span class="token operator">=&gt;</span> <span class="token function">HandleError</span><span class="token punctuation">(</span>duplicateError<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="monadic-binding" tabindex="-1"><a class="header-anchor" href="#monadic-binding"><span>Monadic Binding</span></a></h2><p>A <strong>monad</strong> is a container for values - like <code>List&lt;T&gt;</code>, <code>IEnumerable&lt;T&gt;</code>, or <code>Task&lt;T&gt;</code>. What makes it special is that you can chain operations on the contained values without dealing with the container directly. This chaining is called monadic binding.</p><p>You use monadic binding daily with LINQ, but you might not know it. It&#39;s what allows us to chain operations that transform data.</p><p>Map (<code>Select</code>) transforms values:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Simple transformations with Select (Map)</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> doubled <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Bind (<code>SelectMany</code>) transforms and flattens:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Operations that return multiple values use SelectMany (Bind)</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> folders <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;docs&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;photos&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> files <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>folder <span class="token operator">=&gt;</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)),s("p",null,[n[15]||(n[15]=a("A popular example of applying monads in practice is the ")),e(r,{to:"/milanjovanovic.tech/functional-error-handling-in-dotnet-with-the-result-pattern.html"},{default:t(()=>n[14]||(n[14]=[s("strong",null,"Result pattern",-1)])),_:1,__:[14]}),n[16]||(n[16]=a(", which provides a clean way to chain operations that might fail."))]),n[22]||(n[22]=o(`<hr><h2 id="pure-functions" tabindex="-1"><a class="header-anchor" href="#pure-functions"><span>Pure Functions</span></a></h2><p>Pure functions are predictable: they depend only on their inputs and don&#39;t change anything in the system. No database calls, no API requests, no global state. This constraint makes them easier to understand, test, and debug.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="PriceCalculator.cs"><span>PriceCalculator.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Impure - relies on hidden state</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriceCalculator</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">decimal</span></span> _taxRate<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>Discount<span class="token punctuation">&gt;</span></span> _activeDiscounts<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> <span class="token function">CalculatePrice</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> price <span class="token operator">=</span> order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>i <span class="token operator">=&gt;</span> i<span class="token punctuation">.</span>Price<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> discount <span class="token keyword">in</span> _activeDiscounts<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            price <span class="token operator">-=</span> discount<span class="token punctuation">.</span><span class="token function">Calculate</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> price <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> _taxRate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here&#39;s the same example as a pure function:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="PriceCalculator.cs"><span>PriceCalculator.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Pure - everything is explicit</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PriceCalculator</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> <span class="token function">CalculatePrice</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">Order</span> order<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">decimal</span></span> taxRate<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">IReadOnlyList<span class="token punctuation">&lt;</span>Discount<span class="token punctuation">&gt;</span></span> discounts<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> basePrice <span class="token operator">=</span> order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>i <span class="token operator">=&gt;</span> i<span class="token punctuation">.</span>Price<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> afterDiscounts <span class="token operator">=</span> discounts<span class="token punctuation">.</span><span class="token function">Aggregate</span><span class="token punctuation">(</span></span>
<span class="line">            basePrice<span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">(</span>price<span class="token punctuation">,</span> discount<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> price <span class="token operator">-</span> discount<span class="token punctuation">.</span><span class="token function">Calculate</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> afterDiscounts <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> taxRate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Pure functions are thread-safe, easy to test, and simple to reason about because all dependencies are explicit.</p><hr><h2 id="immutability" tabindex="-1"><a class="header-anchor" href="#immutability"><span>Immutability</span></a></h2><p>Immutable objects can&#39;t be changed after creation. Instead, they create new instances for every change. This simple constraint eliminates entire categories of bugs: race conditions, accidental modifications, and inconsistent state.</p><p>Here&#39;s an example of a mutable type:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Order.cs"><span>Order.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>OrderItem<span class="token punctuation">&gt;</span></span> Items <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Total <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">OrderStatus</span> Status <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddItem</span><span class="token punctuation">(</span><span class="token class-name">OrderItem</span> item<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Total <span class="token operator">+=</span> item<span class="token punctuation">.</span>Price<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// Bug: Thread safety issues</span></span>
<span class="line">        <span class="token comment">// Bug: Can modify shipped orders</span></span>
<span class="line">        <span class="token comment">// Bug: Total might not match Items</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Let&#39;s make this an immutable type:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Order.cs"><span>Order.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Order</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">ImmutableList<span class="token punctuation">&lt;</span>OrderItem<span class="token punctuation">&gt;</span></span> Items <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">OrderStatus</span> Status <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Total <span class="token operator">=&gt;</span> Items<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Price<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Order</span> <span class="token function">AddItem</span><span class="token punctuation">(</span><span class="token class-name">OrderItem</span> item<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>Status <span class="token operator">!=</span> OrderStatus<span class="token punctuation">.</span>Created<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t modify shipped orders&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token keyword">with</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Items <span class="token operator">=</span> Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The immutable version:</p><ul><li>Is thread-safe by default</li><li>Makes invalid states impossible</li><li>Keeps data and calculations consistent</li><li>Makes changes explicit and traceable</li></ul><hr><h2 id="takeaway" tabindex="-1"><a class="header-anchor" href="#takeaway"><span>Takeaway</span></a></h2>`,18)),s("p",null,[e(r,{to:"/milanjovanovic.tech/how-to-apply-functional-programming-in-csharp.html"},{default:t(()=>n[17]||(n[17]=[s("strong",null,"Functional programming",-1)])),_:1,__:[17]}),n[18]||(n[18]=a(` isn't just about writing "cleaner" code. These patterns fundamentally change how you handle complexity:`))]),n[23]||(n[23]=s("ul",null,[s("li",null,[s("strong",null,"Push errors to compile time"),a(" - Catch problems before running the code")]),s("li",null,[s("strong",null,"Make invalid states impossible"),a(" - Don't rely on documentation or conventions")]),s("li",null,[s("strong",null,"Make the happy path obvious"),a(" - When everything is explicit, the flow is clear")])],-1)),n[24]||(n[24]=s("p",null,"You can adopt these patterns gradually. Start with one class, one module, one feature. The goal isn't to write purely functional code. The goal is to write code that's safer, more predictable, and easier to maintain.",-1)),n[25]||(n[25]=s("p",null,"Hope this was helpful. See you next week.",-1)),n[26]||(n[26]=s("hr",null,null,-1)),g(" TODO: add ARTICLE CARD "),e(i,u(d({title:"Functional Programming in C#: The Practical Parts",desc:"Functional programming patterns can make your C# code safer and more maintainable, without getting lost in academic theory. Learn practical patterns you can use today to write better code.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/functional-programming-in-csharp-the-practical-parts.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const E=b(f,[["render",V]]),j=JSON.parse('{"path":"/milanjovanovic.tech/functional-programming-in-csharp-the-practical-parts.html","title":"Functional Programming in C#: The Practical Parts","lang":"en-US","frontmatter":{"lang":"en-US","title":"Functional Programming in C#: The Practical Parts","description":"Article(s) > Functional Programming in C#: The Practical Parts","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Functional Programming in C#: The Practical Parts\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_115.png\\"],\\"datePublished\\":\\"2024-11-09T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/functional-programming-in-csharp-the-practical-parts.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Functional Programming in C#: The Practical Parts"}],["meta",{"property":"og:description","content":"Article(s) > Functional Programming in C#: The Practical Parts"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_115.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_115.png"}],["meta",{"name":"twitter:image:alt","content":"Functional Programming in C#: The Practical Parts"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-09T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Functional Programming in C#: The Practical Parts"},{"property":"og:description","content":"Functional Programming in C#: The Practical Parts"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/functional-programming-in-csharp-the-practical-parts.html"}]],"prev":"/programming/cs/articles/README.md","date":"2024-11-09T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_115.png"},"git":{},"readingTime":{"minutes":4.44,"words":1333},"filePathRelative":"milanjovanovic.tech/functional-programming-in-csharp-the-practical-parts.md","copyright":{"author":"Milan Jovanović"}}');export{E as comp,j as data};
