import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as n,f as e,b as u,t as d,n as k,g as m,e as a,w as v,r as t,o as g}from"./app-BVguHYKu.js";const h="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/property-ref-doesnt-exist-error.jpeg",y="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/componentpropswithref-type.png",b="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/no-error-thrown.png",f={},w={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"};function R(p,s){const o=t("VPCard"),l=t("SiteInfo"),c=t("RouteLink");return g(),r("div",null,[n("h1",w,[n("a",x,[n("span",null,d(p.$frontmatter.title)+" ê´€ë ¨",1)])]),e(o,k(m({title:"Build strongly typed polymorphic components with React and TypeScript",desc:"Learn how to build strongly typed polymorphic React components with TypeScript, using familiar Chakra UI and MUI component props as guides.",link:"/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/README.md",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16),s[9]||(s[9]=n("nav",{class:"table-of-contents"},[n("ul")],-1)),s[10]||(s[10]=n("hr",null,null,-1)),e(l,{name:"Build strongly typed polymorphic components with React and TypeScript",desc:"Learn how to build strongly typed polymorphic React components with TypeScript, using familiar Chakra UI and MUI component props as guides.",url:"https://blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript#supporting-refs-polymorphic-components",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}),s[11]||(s[11]=n("p",null,[a("Do you remember every reference to "),n("code",null,"React.ComponentPropsWithoutRef"),a(" so far? ðŸ˜… Component props â€¦ "),n("em",null,"without"),a(" refs. Well, nowâ€™s the time to put the refs in!")],-1)),s[12]||(s[12]=n("p",null,"This is the final and most complex part of our solution. Iâ€™ll need you to be patient here, but Iâ€™ll also do my best to explain every step in detail.",-1)),n("p",null,[s[1]||(s[1]=a("First things first, do you remember ")),e(c,{to:"/blog.logrocket.com/complete-guide-react-refs.html"},{default:v(()=>s[0]||(s[0]=[n("strong",null,[a("how "),n("code",null,"refs"),a(" in React work")],-1)])),_:1,__:[0]}),s[2]||(s[2]=a("? The most important concept here is that you just donâ€™t pass ")),s[3]||(s[3]=n("code",null,"ref",-1)),s[4]||(s[4]=a(" as a prop and expect it to be passed down into your component like every other prop. The recommended way to handle ")),s[5]||(s[5]=n("code",null,"refs",-1)),s[6]||(s[6]=a(" in your functional components is to use the ")),s[7]||(s[7]=n("a",{href:"/blog.logrocket.com/use-forwardref-react/",target:"_blank",rel:"noopener noreferrer"},[n("strong",null,[n("code",null,"forwardRef"),a(" function")])],-1)),s[8]||(s[8]=a("."))]),s[13]||(s[13]=u(`<p>Letâ€™s start off on a practical note.</p><p>If you go ahead and pass a <code>ref</code> to our <code>Text</code> component now, youâ€™ll get an error that reads <code>Property &#39;ref&#39; does not exist on type ...</code>.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token comment">// Create the ref object </span></span>
<span class="line"><span class="token keyword">const</span> divRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLDivElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">...</span> </span>
<span class="line"><span class="token comment">// Pass the ref to the rendered Text component</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>divRef<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  Hello Text world</span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+`" alt="Property Ref Does Not Exist Error" tabindex="0" loading="lazy"><figcaption>Property Ref Does Not Exist Error</figcaption></figure><p>This is expected.</p><p>Our first shot at supporting refs will be to use <code>forwardRef</code> in the <code>Text</code> component as shown below:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token comment">// before </span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Text <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">&quot;span&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token punctuation">,</span></span>
<span class="line">  color<span class="token punctuation">,</span></span>
<span class="line">  children<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token operator">:</span> PolymorphicComponentProp<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token punctuation">,</span> TextProps<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// after</span></span>
<span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Text <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">&quot;span&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">as</span><span class="token punctuation">,</span></span>
<span class="line">    color<span class="token punctuation">,</span></span>
<span class="line">    children<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token operator">:</span> PolymorphicComponentProp<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token punctuation">,</span> TextProps<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is essentially just wrapping the previous code in <code>React.forwardRef</code>, thatâ€™s all.</p><p>Now, <code>React.forwardRef</code> has the following signature:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line">React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token operator">...</span> <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Essentially, the second argument received is the <code>ref</code> object. Letâ€™s go ahead and handle that:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">PolymorphicRef<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Text <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">&quot;span&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token punctuation">,</span> color<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token operator">:</span> PolymorphicComponentProp<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token punctuation">,</span> TextProps<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// ðŸ‘‡ look here</span></span>
<span class="line">    ref<span class="token operator">?</span><span class="token operator">:</span> PolymorphicRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What weâ€™ve done here is added the second argument, <code>ref</code>, and declared its type as <code>PolymorphicRef</code>, which just points to <code>unknown</code> for now.</p><p>Note that <code>PolymorphicRef</code> takes in the generic <code>C</code>. This is similar to previous solutions â€” the <code>ref</code> object for a <code>div</code> differs from that of a <code>span</code>, so we need to take into consideration the element type passed to the <code>as</code> prop.</p><p>Point your attention to the <code>PolymorphicRef</code> type. How can we get the <code>ref</code> object type based on the <code>as</code> prop?</p><p>Let me give you a clue: <code>React.ComponentPropsWithRef</code>!</p><p>Note that this says <em>with</em> ref. Not <em>without</em> ref.</p><p>Essentially, if this were a bundle of keys (which, in fact, it is), itâ€™ll include all the relevant component props based on the element type, plus the ref object.</p><figure><img src="`+y+`" alt="The ComponentPropsWithRef Type" tabindex="0" loading="lazy"><figcaption>The ComponentPropsWithRef Type</figcaption></figure><p>So now, if we know this object type contains the <code>ref</code> key, we may as well get that ref type by doing the following:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token comment">// before </span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PolymorphicRef<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// after </span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PolymorphicRef<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">  React<span class="token punctuation">.</span>ComponentPropsWithRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token string">&quot;ref&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Essentially, <code>React.ComponentPropsWithRef&lt;C&gt;</code> returns an object type, e.g.,</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  ref<span class="token operator">:</span> SomeRefDefinition<span class="token punctuation">,</span> </span>
<span class="line">  <span class="token comment">// ... other keys, </span></span>
<span class="line">  color<span class="token operator">:</span> <span class="token builtin">string</span> </span>
<span class="line">  href<span class="token operator">:</span> <span class="token builtin">string</span> </span>
<span class="line">  <span class="token comment">// ... etc</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To pick out just the <code>ref</code> type, we can then do this:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line">React<span class="token punctuation">.</span>ComponentPropsWithRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token string">&quot;ref&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Note that the syntax is similar to the property accessor syntax in JavaScript, i.e., <code>[&quot;ref&quot;]</code>. Now that weâ€™ve got the <code>ref</code> prop typed, we can go ahead and pass that down to the rendered element:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Text <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">&quot;span&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token punctuation">,</span> color<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token operator">:</span> PolymorphicComponentProp<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token punctuation">,</span> TextProps<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">    ref<span class="token operator">?</span><span class="token operator">:</span> PolymorphicRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//...</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>style<span class="token punctuation">}</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> // ðŸ‘ˆ look here</span>
<span class="line">        </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Weâ€™ve made decent progress! In fact, if you go ahead and check the usage of <code>Text</code> like we did before, thereâ€™ll be no more errors:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token comment">// create the ref object </span></span>
<span class="line"><span class="token keyword">const</span> divRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLDivElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">...</span> </span>
<span class="line"><span class="token comment">// pass ref to the rendered Text component</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>divRef<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  Hello Text world</span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, our solution still isnâ€™t as strongly typed as Iâ€™d like. Letâ€™s go ahead and change the ref passed to the <code>Text</code> as shown below:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token comment">// create a &quot;button&quot; ref object </span></span>
<span class="line"><span class="token keyword">const</span> buttonRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLButtonElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">...</span> </span>
<span class="line"><span class="token comment">// pass a button ref to a &quot;div&quot;. NB: as = &quot;div&quot;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>buttonRef<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  Hello Text world</span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript should throw an error here, but it doesnâ€™t. Weâ€™re creating a <code>button</code> ref, but passing it to a <code>div</code> element. Thatâ€™s not right.</p><figure><img src="`+b+`" alt="No Error Thrown When A Wrong Element Ref Is Passed" tabindex="0" loading="lazy"><figcaption>No Error Thrown When A Wrong Element Ref Is Passed</figcaption></figure><p>If you take a look at the exact type of <code>ref</code>, it looks like this:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line">React<span class="token punctuation">.</span>RefAttributes<span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">.</span>ref<span class="token operator">?</span><span class="token operator">:</span> React<span class="token punctuation">.</span>Ref<span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Do you see the <code>unknown</code> in there? Thatâ€™s a sign of weak typing. We should ideally have <code>HTMLDivElement</code> in there to explicitly define the ref object as a <code>div</code> element ref.</p><p>Weâ€™ve got work to do. Letâ€™s first look at the types for the other props of the <code>Text</code> component, which still reference the <code>PolymorphicComponentProp</code> type. Change this to a new type called <code>PolymorphicComponentPropWithRef</code>. This will just be a union of <code>PolymorphicComponentProp</code> and the ref prop. (You guessed right.)</p><p>Here it is:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">PolymorphicComponentPropWithRef<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token punctuation">,</span></span>
<span class="line">  Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> PolymorphicComponentProp<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token punctuation">,</span> Props<span class="token operator">&gt;</span> <span class="token operator">&amp;</span> </span>
<span class="line"><span class="token punctuation">{</span> ref<span class="token operator">?</span><span class="token operator">:</span> PolymorphicRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is just a union of the previous <code>PolymorphicComponentProp</code> and <code>{ ref?: PolymorphicRef&lt;C&gt; }</code>.</p><p>Now we need to change the props of the component to reference the new <code>PolymorphicComponentPropWithRef</code> type:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token comment">// before</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">TextProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span> color<span class="token operator">?</span><span class="token operator">:</span> Rainbow <span class="token operator">|</span> <span class="token string">&quot;black&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Text <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">&quot;span&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token punctuation">,</span> color<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token operator">:</span> PolymorphicComponentProp<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token punctuation">,</span> TextProps<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">    ref<span class="token operator">?</span><span class="token operator">:</span> PolymorphicRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// now </span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">TextProps<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">PolymorphicComponentPropWithRef<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">C</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> color<span class="token operator">?</span><span class="token operator">:</span> Rainbow <span class="token operator">|</span> <span class="token string">&quot;black&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Text <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">&quot;span&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token punctuation">,</span> color<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token operator">:</span> TextProps<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">// ðŸ‘ˆ look here</span></span>
<span class="line">    ref<span class="token operator">?</span><span class="token operator">:</span> PolymorphicRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Weâ€™ve updated <code>TextProps</code> to reference <code>PolymorphicComponentPropWithRef</code> and thatâ€™s now passed as the props for the <code>Text</code> component. Lovely!</p><p>Thereâ€™s one final thing to do: provide a type annotation for the <code>Text</code> component. It looks similar to:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Text <span class="token operator">:</span> TextComponent <span class="token operator">=</span> <span class="token operator">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>TextComponent</code> is the type annotation weâ€™ll write. Here it is fully written out:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">TextComponent</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">&quot;span&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">  props<span class="token operator">:</span> TextProps<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> React<span class="token punctuation">.</span>ReactElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is essentially a functional component that takes in <code>TextProps</code> and returns <code>React.ReactElement | null</code>, where <code>TextProps</code> is as defined earlier:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">TextProps<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">PolymorphicComponentPropWithRef<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">C</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> color<span class="token operator">?</span><span class="token operator">:</span> Rainbow <span class="token operator">|</span> <span class="token string">&quot;black&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With this, we now have a complete solution!</p><p>Iâ€™m going to share the complete solution now. It may seem daunting at first, but remember weâ€™ve worked line by line through everything you see here. Read it with that confidence.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Rainbow</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token string">&quot;red&quot;</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token string">&quot;orange&quot;</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token string">&quot;yellow&quot;</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token string">&quot;green&quot;</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token string">&quot;blue&quot;</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token string">&quot;indigo&quot;</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token string">&quot;violet&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">AsProp<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PropsToOmit<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token punctuation">,</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token punctuation">(</span>AsProp<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token constant">P</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// This is the first reusable type utility we built</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PolymorphicComponentProp<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token punctuation">,</span></span>
<span class="line">  Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> React<span class="token punctuation">.</span>PropsWithChildren<span class="token operator">&lt;</span>Props <span class="token operator">&amp;</span> AsProp<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;&gt;</span> <span class="token operator">&amp;</span></span>
<span class="line">  Omit<span class="token operator">&lt;</span>React<span class="token punctuation">.</span>ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> PropsToOmit<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token punctuation">,</span> Props<span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// This is a new type utitlity with ref!</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PolymorphicComponentPropWithRef<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token punctuation">,</span></span>
<span class="line">  Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> PolymorphicComponentProp<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token punctuation">,</span> Props<span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> ref<span class="token operator">?</span><span class="token operator">:</span> PolymorphicRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// This is the type for the &quot;ref&quot; only</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PolymorphicRef<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">  React<span class="token punctuation">.</span>ComponentPropsWithRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token string">&quot;ref&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/**</span>
<span class="line">* This is the updated component props using PolymorphicComponentPropWithRef</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">TextProps<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">PolymorphicComponentPropWithRef<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">C</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> color<span class="token operator">?</span><span class="token operator">:</span> Rainbow <span class="token operator">|</span> <span class="token string">&quot;black&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/**</span>
<span class="line">* This is the type used in the type annotation for the component</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">TextComponent</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">&quot;span&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">  props<span class="token operator">:</span> TextProps<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> React<span class="token punctuation">.</span>ReactElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Text<span class="token operator">:</span> TextComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">&quot;span&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token punctuation">,</span> color<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token operator">:</span> TextProps<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">    ref<span class="token operator">?</span><span class="token operator">:</span> PolymorphicRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> style <span class="token operator">=</span> color <span class="token operator">?</span> <span class="token punctuation">{</span> style<span class="token operator">:</span> <span class="token punctuation">{</span> color <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>style<span class="token punctuation">}</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And there you go!</p>`,53))])}const C=i(f,[["render",R]]),q=JSON.parse('{"path":"/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/supporting-refs-polymorphic-components.html","title":"Supporting refs in polymorphic components","lang":"en-US","frontmatter":{"lang":"en-US","title":"Supporting refs in polymorphic components","description":"Article(s) > (10/10) Build strongly typed polymorphic components with React and TypeScript","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Supporting refs in polymorphic components\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/property-ref-doesnt-exist-error.jpeg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/componentpropswithref-type.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/no-error-thrown.png\\"],\\"datePublished\\":\\"2022-05-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ohans Emmanuel\\",\\"url\\":\\"https://blog.logrocket.com/author/ohansemmanuel/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/supporting-refs-polymorphic-components.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"Supporting refs in polymorphic components"}],["meta",{"property":"og:description","content":"Article(s) > (10/10) Build strongly typed polymorphic components with React and TypeScript"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Supporting refs in polymorphic components"}],["meta",{"property":"article:author","content":"Ohans Emmanuel"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-05-25T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > (10/10) Build strongly typed polymorphic components with React and TypeScript"},{"property":"og:description","content":"Supporting refs in polymorphic components"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/supporting-refs-polymorphic-components.html"}]],"next":"/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/README.md#conclusion-and-ideas-for-next-steps","date":"2022-05-25T00:00:00.000Z","isOriginal":false,"author":[{"name":"Ohans Emmanuel","url":"https://blog.logrocket.com/author/ohansemmanuel/"}],"cover":"/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"},"git":{},"readingTime":{"minutes":5.14,"words":1542},"filePathRelative":"blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/supporting-refs-polymorphic-components.md","copyright":{"author":"Ohans Emmanuel"}}');export{C as comp,q as data};
