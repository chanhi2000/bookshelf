import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as f,d as t,f as o,b as p,a as k,t as g,n as c,g as u,w as d,e,r as i,o as b}from"./app-BVguHYKu.js";const w={},v={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},I={class:"hint-container info"},A={href:"https://youtube.com/playlist?list=PL_I3TGB7aK6jNBMZkw3FYdJXyf7quHdI8",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/amitshekhariitbhu/android-interview-questions",target:"_blank",rel:"noopener noreferrer"},S={class:"hint-container info"},T={href:"https://twitter.com/amitiitbhu",target:"_blank",rel:"noopener noreferrer"},E={href:"https://linkedin.com/in/amit-shekhar-iitbhu",target:"_blank",rel:"noopener noreferrer"},V={href:"https://youtube.com/@amitshekhar",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/amitshekhariitbhu",target:"_blank",rel:"noopener noreferrer"},N={href:"https://twitter.com/outcome_school",target:"_blank",rel:"noopener noreferrer"},P={href:"https://linkedin.com/company/outcomeschool",target:"_blank",rel:"noopener noreferrer"},C={href:"https://youtube.com/@OutcomeSchool",target:"_blank",rel:"noopener noreferrer"},O={href:"http://github.com/OutcomeSchool",target:"_blank",rel:"noopener noreferrer"};function B(m,n){const a=i("VPCard"),l=i("router-link"),r=i("SiteInfo"),s=i("VPIcon");return b(),f("div",null,[t("h1",v,[t("a",y,[t("span",null,g(m.$frontmatter.title)+" 관련",1)])]),o(a,c(u({title:"Java > Article(s)",desc:"Article(s)",link:"/programming/java/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t("nav",x,[t("ul",null,[t("li",null,[o(l,{to:"#what-is-an-extension-function-in-kotlin"},{default:d(()=>n[0]||(n[0]=[e("What is an extension function in Kotlin?")])),_:1,__:[0]})]),t("li",null,[o(l,{to:"#how-does-it-work-internally"},{default:d(()=>n[1]||(n[1]=[e("How does it work internally?")])),_:1,__:[1]})])])]),n[37]||(n[37]=t("hr",null,null,-1)),o(r,{name:"Extension function in Kotlin",desc:"In this blog, we will learn about the extension function in Kotlin. We will also learn how it works internally.",url:"https://outcomeschool.com/extension-function-in-kotlin",logo:"https://outcomeschool.com/static/favicons/apple-touch-icon.png",preview:"https://outcomeschool.com/static/images/blog/extension-function-in-kotlin.png"}),t("div",I,[n[5]||(n[5]=t("p",{class:"hint-container-title"},"Info",-1)),t("p",null,[n[3]||(n[3]=e("Before we start, I would like to mention that, I have released a video playlist to help you crack the Android Interview: Check out ")),t("a",A,[o(s,{icon:"fa-brands fa-youtube"}),n[2]||(n[2]=e("Android Interview Questions and Answers"))]),n[4]||(n[4]=e("."))])]),n[38]||(n[38]=p(`<p>In this blog, we will learn about the <strong>extension function</strong> in Kotlin. We will also learn how it works internally.</p><hr><h2 id="what-is-an-extension-function-in-kotlin" tabindex="-1"><a class="header-anchor" href="#what-is-an-extension-function-in-kotlin"><span>What is an extension function in Kotlin?</span></a></h2><p>An extension function in Kotlin allows us to add new functions to existing classes without modifying their source code or extending them. This is particularly useful when we want to extend a class with new capabilities but don&#39;t have access to edit its code or don&#39;t want to extend it.</p><p>Let&#39;s understand it with an example.</p><p>Syntax to create an extension function:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> ClassName<span class="token punctuation">.</span><span class="token function">functionName</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token operator">:</span> ReturnType <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// function body</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, we will try to understand the above syntax.</p><ul><li><code>ClassName</code>: The class we are extending.</li><li><code>functionName</code>: The name of the extension function.</li><li><code>parameters</code>: Parameters that the extension function takes.</li><li><code>ReturnType</code>: The return type of the extension function.</li></ul>`,9)),t("p",null,[n[6]||(n[6]=e("Let's write an extension function using the above syntax in a file named: ")),o(s,{icon:"iconfont icon-kotlin"}),n[7]||(n[7]=t("code",null,"extension.kt",-1)),n[8]||(n[8]=e("."))]),n[39]||(n[39]=p(`<div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> ImageView<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span>url<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Inside the above extension function, imagine we have extended the <code>ImageView</code> class, so, <code>this</code> represents <code>ImageView</code> Object.</p><p>Using the above extension function:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">imageView<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;someUrl&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you notice, we added a function to the ImageView without modifying its source code or extending it.</p><p>The best part is that, even though it’s defined outside the class it extends, the function behaves as if it were a member of that class. It’s called just like any other class method, making the syntax seamless and natural.</p><hr><h2 id="how-does-it-work-internally" tabindex="-1"><a class="header-anchor" href="#how-does-it-work-internally"><span>How does it work internally?</span></a></h2><p>When we call an extension function on an object, the compiler passes the object as the first argument to the function.</p><p>Now, we need to decompile this code. For that, we will have to convert this Kotlin source file to a Java source file.</p><p>Steps to convert from Kotlin source file to Java source file and decompile in Android Studio:</p><ul><li><code>Tools</code> &gt; <code>Kotlin</code> &gt; <code>Show Kotlin Bytecode</code>. You will get the bytecode of your Kotlin file.</li><li>Now click on the <code>Decompile</code> button to get your Java code from the bytecode.</li></ul><p>Here, I have kept only the important lines of the code and removed other lines for brevity.</p><p>We will get the following output:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ExtensionKt</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token class-name">ImageView</span> imageView<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token class-name">Glide</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, a <strong>final</strong> class has been generated with the static function <code>loadImage</code>, and most importantly, <code>imageView</code> is passed as the first argument to the function.</p><p>This is how an extension function works internally.</p><div class="hint-container note"><p class="hint-container-title">A final note</p><ul><li>Extension functions are defined outside the class they extend.</li><li>They can access the public members of the extended class.</li><li>They cannot access the class&#39;s private or protected members.</li><li>They do not modify the actual class but appear to add new methods.</li></ul></div><p>Hence, Extension functions are useful for adding functionality to classes from libraries or the standard library that we can&#39;t modify directly.</p><p>Now, we have understood the extension function in Kotlin.</p>`,20)),t("p",null,[n[12]||(n[12]=e("Prepare yourself for Android Interview: ")),t("a",K,[n[9]||(n[9]=e("Android Interview Questions (")),o(s,{icon:"iconfont icon-github"}),n[10]||(n[10]=t("code",null,"amitshekhariitbhu/android-interview-questions",-1)),n[11]||(n[11]=e(")"))])]),o(r,{name:"amitshekhariitbhu/android-interview-questions",desc:"Your Cheat Sheet For Android Interview - Android Interview Questions and Answers",url:"https://github.com/amitshekhariitbhu/android-interview-questions/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://repository-images.githubusercontent.com/96704265/3a1039a7-29ee-425d-b4ea-53fcff2c1db7"}),n[40]||(n[40]=t("p",null,"That's it for now.",-1)),n[41]||(n[41]=t("p",null,"Thanks",-1)),t("div",S,[n[34]||(n[34]=t("p",{class:"hint-container-title"},"Amit Shekhar",-1)),n[35]||(n[35]=t("p",null,"You can connect with me on:",-1)),t("ul",null,[t("li",null,[t("a",T,[n[13]||(n[13]=e("X (")),o(s,{icon:"fa-brands fa-x-twitter"}),n[14]||(n[14]=t("code",null,"amitiitbhu",-1))])]),t("li",null,[t("a",E,[n[15]||(n[15]=e("LinkedIn (")),o(s,{icon:"fa-brands fa-linkedin"}),n[16]||(n[16]=t("code",null,"amit-shekhar-iitbhu",-1))])]),t("li",null,[t("a",V,[n[17]||(n[17]=e("YouTube (")),o(s,{icon:"fa-brands fa-youtube"}),n[18]||(n[18]=t("code",null,"amitshekhar",-1)),n[19]||(n[19]=e(")"))])]),t("li",null,[t("a",j,[n[20]||(n[20]=e("GitHub (")),o(s,{icon:"iconfont icon-github"}),n[21]||(n[21]=t("code",null,"amitshekhariitbhu",-1))])])]),n[36]||(n[36]=t("p",null,"Follow Outcome School on:",-1)),t("ul",null,[t("li",null,[t("a",N,[n[22]||(n[22]=e("X (")),o(s,{icon:"fa-brands fa-x-twitter"}),n[23]||(n[23]=t("code",null,"outcome_school",-1)),n[24]||(n[24]=e(")"))])]),t("li",null,[t("a",P,[n[25]||(n[25]=e("LinkedIn (")),o(s,{icon:"fa-brands fa-linkedin"}),n[26]||(n[26]=t("code",null,"outcomeschool",-1)),n[27]||(n[27]=e(")"))])]),t("li",null,[t("a",C,[n[28]||(n[28]=e("YouTube (")),o(s,{icon:"fa-brands fa-youtube"}),n[29]||(n[29]=t("code",null,"OutcomeSchool",-1)),n[30]||(n[30]=e(")"))])]),t("li",null,[t("a",O,[n[31]||(n[31]=e("GitHub (")),o(s,{icon:"iconfont icon-github"}),n[32]||(n[32]=t("code",null,"OutcomeSchool",-1)),n[33]||(n[33]=e(")"))])])])]),k(" TODO: add ARTICLE CARD "),o(a,c(u({title:"Extension function in Kotlin",desc:"In this blog, we will learn about the extension function in Kotlin. We will also learn how it works internally.",link:"https://chanhi2000.github.io/bookshelf/outcomeschool.com/extension-function-in-kotlin.html",logo:"https://outcomeschool.com/static/favicons/apple-touch-icon.png",background:"rgba(78,70,220,0.2)"})),null,16)])}const q=h(w,[["render",B]]),J=JSON.parse('{"path":"/outcomeschool.com/extension-function-in-kotlin.html","title":"Extension function in Kotlin","lang":"en-US","frontmatter":{"lang":"en-US","title":"Extension function in Kotlin","description":"Article(s) > Extension function in Kotlin","icon":"iconfont icon-kotlin","category":["Java","Kotlin","Article(s)"],"tag":["blog","outcomeschool.com","java","kotlin"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Extension function in Kotlin\\",\\"image\\":[\\"https://outcomeschool.com/static/images/blog/extension-function-in-kotlin.png\\"],\\"datePublished\\":\\"2024-08-16T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amit Shekhar\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/outcomeschool.com/extension-function-in-kotlin.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Extension function in Kotlin"}],["meta",{"property":"og:description","content":"Article(s) > Extension function in Kotlin"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://outcomeschool.com/static/images/blog/extension-function-in-kotlin.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://outcomeschool.com/static/images/blog/extension-function-in-kotlin.png"}],["meta",{"name":"twitter:image:alt","content":"Extension function in Kotlin"}],["meta",{"property":"article:author","content":"Amit Shekhar"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"outcomeschool.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-08-16T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Extension function in Kotlin"},{"property":"og:description","content":"Extension function in Kotlin"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/outcomeschool.com/extension-function-in-kotlin.html"}]],"prev":"/programming/java/articles/README.md","date":"2024-08-16T00:00:00.000Z","isOriginal":false,"author":"Amit Shekhar","cover":"https://outcomeschool.com/static/images/blog/extension-function-in-kotlin.png"},"git":{},"readingTime":{"minutes":3.01,"words":903},"filePathRelative":"outcomeschool.com/extension-function-in-kotlin.md","copyright":{"author":"Amit Shekhar"}}');export{q as comp,J as data};
