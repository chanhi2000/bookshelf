import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,d as s,f as a,b as t,t as u,n as m,g as k,e as o,w as g,r as e,o as h}from"./app-BVguHYKu.js";const y="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/as-prop-and-href.png",b="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/pseudocode.png",v="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/react-componentpropswithoutref.png",f="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/different-componentprops-type-variants.png",w="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/prefer-componentpropswithref-or-without.png",x="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/property-href-doesnt-exist-error.png",R={},C={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},T={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"};function P(p,n){const c=e("VPCard"),l=e("SiteInfo"),i=e("RouteLink");return h(),d("div",null,[s("h1",C,[s("a",T,[s("span",null,u(p.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),a(c,m(k({title:"Build strongly typed polymorphic components with React and TypeScript",desc:"Learn how to build strongly typed polymorphic React components with TypeScript, using familiar Chakra UI and MUI component props as guides.",link:"/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/README.md",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16),n[3]||(n[3]=s("nav",{class:"table-of-contents"},[s("ul")],-1)),n[4]||(n[4]=s("hr",null,null,-1)),a(l,{name:"Build strongly typed polymorphic components with React and TypeScript",desc:"Learn how to build strongly typed polymorphic React components with TypeScript, using familiar Chakra UI and MUI component props as guides.",url:"https://blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript#handling-valid-component-attributes-typescript-generics",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}),n[5]||(n[5]=t('<p>In solving this second use case, you‚Äôll come to appreciate how powerful generics truly are. First, let‚Äôs understand what we‚Äôre trying to accomplish here.</p><p>Once we receive a generic <code>as</code> type, we want to make sure that the remaining props passed to our component are relevant, based on the <code>as</code> prop.</p><p>So, for example, if a user passed in an <code>as</code> prop of <code>img</code>, we‚Äôd want <code>href</code> to equally be a valid prop!</p><figure><img src="'+y+`" alt="As Prop And Href" tabindex="0" loading="lazy"><figcaption>As Prop And Href</figcaption></figure><p>To give you a sense of how we‚Äôd accomplish this, take a look at the current state of our solution:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Text <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">React.ElementType</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token punctuation">,</span></span>
<span class="line">  children<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token plain-text">: </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">;</span></span>
<span class="line">  children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token plain-text">) =&gt; </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token plain-text">;</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The prop of this component is now represented by the object type:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">;</span></span>
<span class="line">  children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In pseudocode, what we‚Äôd like would be the following:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">;</span></span>
<span class="line">  children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token operator">...</span>otherValidPropsBasedOnTheValueOfAs</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+b+`" alt="Pseudocode" tabindex="0" loading="lazy"><figcaption>Pseudocode</figcaption></figure><p>This requirement is enough to leave one grasping at straws. We can‚Äôt possibly write a function that determines appropriate types based on the value of <code>as</code>, and it‚Äôs not smart to list out a union type manually.</p><p>Well, what if there was a provided type from <code>React</code> that acted as a ‚Äúfunction‚Äù that‚Äôll return valid element types based on what you pass it?</p><p>Before introducing the solution, let‚Äôs have a bit of a refactor. Let‚Äôs pull out the props of the component into a separate type:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token comment">// üëá See TextProps pulled out below </span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">TextProps<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">;</span></span>
<span class="line">  children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Text <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">React.ElementType</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token punctuation">,</span></span>
<span class="line">  children<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token plain-text">: TextProps&lt;C&gt;) =&gt; </span><span class="token punctuation">{</span> <span class="token comment">// üëà see TextProps used </span></span>
<span class="line">  <span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token plain-text">;</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What‚Äôs important here is to note how the generic is passed on to <code>TextProps&lt;C&gt;</code>. Similar to a function call in JavaScript ‚Äî but with angle braces.</p><p>The magic wand here is to leverage the <code>React.ComponentPropsWithoutRef</code> type as shown below:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">TextProps<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">;</span></span>
<span class="line">  children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token operator">&amp;</span> React<span class="token punctuation">.</span>ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// üëà look here </span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Text <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">React.ElementType</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token punctuation">,</span></span>
<span class="line">  children<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token plain-text">: TextProps&lt;C&gt;) =&gt; </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token plain-text">;</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that we‚Äôre introducing an intersection here. Essentially, we‚Äôre saying, the type of <code>TextProps</code> is an object type containing <code>as</code>, <code>children</code>, and some other types represented by <code>React.ComponentPropsWithoutRef</code>.</p><figure><img src="`+v+'" alt="" tabindex="0" loading="lazy"><figcaption><code>React.ComponentPropsWithoutRef</code></figcaption></figure><p>If you read the code, it perhaps becomes apparent what‚Äôs going on here.</p><p>Based on the type of <code>as</code>, represented by the generic <code>C</code>, <code>React.componentPropsWithoutRef</code> will return valid component props that correlate with the string attribute passed to the <code>as</code> prop.</p><p>There‚Äôs one more significant point to note.</p><figure><img src="'+f+'" alt="Different  Type Variants" tabindex="0" loading="lazy"><figcaption>Different <code>ComponentProps</code> Type Variants</figcaption></figure><p>If you just started typing and rely on IntelliSense from your editor, you‚Äôd realize there are three variants of the <code>React.ComponentProps...</code> type:</p><ol><li><code>React.ComponentProps</code></li><li><code>React.ComponentPropsWithRef</code></li><li><code>React.ComponentPropsWithoutRef</code></li></ol><p>If you attempted to use the first, <code>ComponentProps</code>, you‚Äôd see a relevant note that reads:</p><blockquote><p><em>Prefer <code>ComponentPropsWithRef</code>, if the <code>ref</code> is forwarded, or <code>ComponentPropsWithoutRef</code> when refs are not supported.</em></p></blockquote><figure><img src="'+w+`" alt="Note To Prefer ComponentPropsWithRef Or ComponentPropsWithoutRef" tabindex="0" loading="lazy"><figcaption>Note To Prefer ComponentPropsWithRef Or ComponentPropsWithoutRef</figcaption></figure><p>This is precisely what we‚Äôve done. For now, we will ignore the use case for supporting a <code>ref</code> prop and stick to <code>ComponentPropsWithoutRef</code>.</p><p>Now, let‚Äôs give the solution a try!</p><p>If you go ahead and use this component wrongly, e.g., passing a valid <code>as</code> prop with other incompatible props, you‚Äôll get an error.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>www.google.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello Text world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>A value of <code>div</code> is perfectly valid for the <code>as</code> prop, but a <code>div</code> should not have an <code>href</code> attribute.</p><p>That‚Äôs wrong, and rightly caught by TypeScript with the error: <code>Property &#39;href&#39; does not exist on type ...</code>.</p><figure><img src="`+x+'" alt="Property Href Does Not Exist Error" tabindex="0" loading="lazy"><figcaption>Property Href Does Not Exist Error</figcaption></figure><p>This is great! We‚Äôve got an even better, more robust solution.</p>',37)),s("p",null,[n[1]||(n[1]=o("Finally, make sure to ")),a(i,{to:"/blog.logrocket.com/solving-prop-drilling-react-apps.html"},{default:g(()=>n[0]||(n[0]=[s("strong",null,"pass other props down",-1)])),_:1,__:[0]}),n[2]||(n[2]=o(" to the rendered element:"))]),n[6]||(n[6]=t(`<div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">TextProps<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">;</span></span>
<span class="line">  children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token operator">&amp;</span> React<span class="token punctuation">.</span>ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Text <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">React.ElementType</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token punctuation">,</span></span>
<span class="line">  children<span class="token punctuation">,</span></span>
<span class="line">  <span class="token operator">...</span>restProps<span class="token punctuation">,</span> <span class="token comment">// üëà look here</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token plain-text">: TextProps&lt;C&gt;) =&gt; </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// see restProps passed üëá</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>restProps<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token plain-text">;</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let‚Äôs keep going.</p>`,2))])}const j=r(R,[["render",P]]),E=JSON.parse('{"path":"/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/handling-valid-component-attributes-typescript-generics.html","title":"Handling valid component attributes with TypeScript generics","lang":"en-US","frontmatter":{"lang":"en-US","title":"Handling valid component attributes with TypeScript generics","description":"Article(s) > (5/10) Build strongly typed polymorphic components with React and TypeScript","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Handling valid component attributes with TypeScript generics\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/as-prop-and-href.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/pseudocode.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/react-componentpropswithoutref.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/different-componentprops-type-variants.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/prefer-componentpropswithref-or-without.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/property-href-doesnt-exist-error.png\\"],\\"datePublished\\":\\"2022-05-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ohans Emmanuel\\",\\"url\\":\\"https://blog.logrocket.com/author/ohansemmanuel/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/handling-valid-component-attributes-typescript-generics.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"Handling valid component attributes with TypeScript generics"}],["meta",{"property":"og:description","content":"Article(s) > (5/10) Build strongly typed polymorphic components with React and TypeScript"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Handling valid component attributes with TypeScript generics"}],["meta",{"property":"article:author","content":"Ohans Emmanuel"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-05-25T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > (5/10) Build strongly typed polymorphic components with React and TypeScript"},{"property":"og:description","content":"Handling valid component attributes with TypeScript generics"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript//handling-valid-component-attributes-typescript-generics.html"}]],"date":"2022-05-25T00:00:00.000Z","isOriginal":false,"author":[{"name":"Ohans Emmanuel","url":"https://blog.logrocket.com/author/ohansemmanuel/"}],"cover":"/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"},"git":{},"readingTime":{"minutes":3.23,"words":970},"filePathRelative":"blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/handling-valid-component-attributes-typescript-generics.md","copyright":{"author":"Ohans Emmanuel"}}');export{j as comp,E as data};
