import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as a,b as o,t as g,n as k,g as v,w as l,e,r as p,o as h}from"./app-BVguHYKu.js";const f={},b={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},D={href:"https://koenig-media.raywenderlich.com/uploads/2022/01/documenting-kotlin-code_materials.zip",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.youtube.com/c/AndreasKling",target:"_blank",rel:"noopener noreferrer"},M={class:"hint-container tip"},S={class:"hint-container tip"},j={href:"https://koenig-media.raywenderlich.com/uploads/2022/01/documenting-kotlin-code_materials.zip",target:"_blank",rel:"noopener noreferrer"};function q(r,n){const d=p("VPCard"),i=p("router-link"),u=p("SiteInfo"),t=p("VPIcon");return h(),m("div",null,[s("h1",b,[s("a",y,[s("span",null,g(r.$frontmatter.title)+" 관련",1)])]),a(d,k(v({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",w,[s("ul",null,[s("li",null,[a(i,{to:"#getting-started"},{default:l(()=>n[0]||(n[0]=[e("Getting Started")])),_:1,__:[0]}),s("ul",null,[s("li",null,[a(i,{to:"#understanding-the-project-structure"},{default:l(()=>n[1]||(n[1]=[e("Understanding the Project Structure")])),_:1,__:[1]})])])]),s("li",null,[a(i,{to:"#making-a-case-for-documentation"},{default:l(()=>n[2]||(n[2]=[e("Making a Case for Documentation")])),_:1,__:[2]}),s("ul",null,[s("li",null,[a(i,{to:"#going-beyond-code-comments"},{default:l(()=>n[3]||(n[3]=[e("Going Beyond Code Comments")])),_:1,__:[3]})]),s("li",null,[a(i,{to:"#learning-from-examples"},{default:l(()=>n[4]||(n[4]=[e("Learning From Examples")])),_:1,__:[4]})])])]),s("li",null,[a(i,{to:"#introducing-kdoc"},{default:l(()=>n[5]||(n[5]=[e("Introducing KDoc")])),_:1,__:[5]}),s("ul",null,[s("li",null,[a(i,{to:"#defining-block-tags"},{default:l(()=>n[6]||(n[6]=[e("Defining Block Tags")])),_:1,__:[6]})]),s("li",null,[a(i,{to:"#documenting-modules-and-packages"},{default:l(()=>n[7]||(n[7]=[e("Documenting Modules and Packages")])),_:1,__:[7]})])])]),s("li",null,[a(i,{to:"#introducing-dokka"},{default:l(()=>n[8]||(n[8]=[e("Introducing Dokka")])),_:1,__:[8]}),s("ul",null,[s("li",null,[a(i,{to:"#integrating-dokka"},{default:l(()=>n[9]||(n[9]=[e("Integrating Dokka")])),_:1,__:[9]})]),s("li",null,[a(i,{to:"#generating-documentation"},{default:l(()=>n[10]||(n[10]=[e("Generating Documentation")])),_:1,__:[10]})])])]),s("li",null,[a(i,{to:"#customizing-dokka"},{default:l(()=>n[11]||(n[11]=[e("Customizing Dokka")])),_:1,__:[11]}),s("ul",null,[s("li",null,[a(i,{to:"#adding-external-documentation"},{default:l(()=>n[12]||(n[12]=[e("Adding External Documentation")])),_:1,__:[12]})]),s("li",null,[a(i,{to:"#customizing-member-visibility"},{default:l(()=>n[13]||(n[13]=[e("Customizing Member Visibility")])),_:1,__:[13]})]),s("li",null,[a(i,{to:"#customizing-module-and-package-pages"},{default:l(()=>n[14]||(n[14]=[e("Customizing Module and Package Pages")])),_:1,__:[14]})]),s("li",null,[a(i,{to:"#using-custom-assets"},{default:l(()=>n[15]||(n[15]=[e("Using Custom Assets")])),_:1,__:[15]})])])]),s("li",null,[a(i,{to:"#where-to-go-from-here"},{default:l(()=>n[16]||(n[16]=[e("Where to Go From Here?")])),_:1,__:[16]})])])]),n[201]||(n[201]=s("hr",null,null,-1)),a(u,{name:"Documenting Kotlin Code for Android Using KDoc and Dokkas",desc:"Learn how to use KDoc to document your Kotlin code and generate beautiful-looking documentation pages using Dokka.s",url:"https://kodeco.com/30067669-documenting-kotlin-code-for-android-using-kdoc-and-dokkas",logo:"https://assets.carolus.kodeco.com/assets/murakami/category-icons/category-core-concepts-android-77962866f13954987c7faf212535d8d6e3147669e3b2ba559cf1672f12bbeffe.svgs",preview:"https://koenig-media.raywenderlich.com/uploads/2022/03/DocumentingKotlinCode-twitter.pngs"}),n[202]||(n[202]=o('<p>Good documentation can make a developer prefer one library over others.</p><p>Documentation comes in many forms. From simple comments that live alongside the code to complex websites like the <a href="https://developer.android.com/docs" target="_blank" rel="noopener noreferrer">Android Developer documentation</a> that cover things like platform APIs, build tools, samples, etc., it’s all documentation.</p><p>In this article, you’ll learn:</p><ul><li>How documentation can help you to improve the quality of your projects.</li><li>To use <strong>KDoc</strong> to document your Kotlin code.</li><li>To use <strong>Dokka</strong> to generate great-looking documentation quickly and easily.</li><li>How to customize Dokka to your liking.</li></ul><p>You’ll work on an Android library project called <strong>notktx</strong> and generate customized documentation for it.</p><p>The major target audience for libraries is usually other developers, so documenting a library project can be a great way to understand how to go about documenting codebases. Making it easy for other developers to use your project is a challenging but rewarding task — and good documentation plays a major role in it.</p><p>By the end of this article, you’ll have documentation generated in HTML for the notktx project. Here’s what it will look like:</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-28-at-1.59.47-AM.png" alt="Documentation for notktx project in HTML format" tabindex="0" loading="lazy"><figcaption>Documentation for notktx project in HTML format</figcaption></figure><p>This article assumes you have previous experience developing for Android in Kotlin. If you’re unfamiliar with Kotlin, take a look at this <a href="https://www.raywenderlich.com/1144981-kotlin-for-android-an-introduction" target="_blank" rel="noopener noreferrer">Introduction to Kotlin for Android</a> article. If you’re also new to Android development, check out these <a href="https://www.raywenderlich.com/android" target="_blank" rel="noopener noreferrer">Getting Started With Android</a> tutorials.</p><div class="hint-container tip"><p class="hint-container-title">Note</p><p>This article uses an Android project to showcase KDoc and Dokka, but you can apply the concepts shown to any Kotlin project.</p></div><hr><h2 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started"><span>Getting Started</span></a></h2>',12)),s("p",null,[n[18]||(n[18]=e("Download the starter project by clicking the ")),s("a",D,[a(t,{icon:"fas fa-download"}),n[17]||(n[17]=s("code",null,"[Download Materials]",-1))]),n[19]||(n[19]=e(" button at the top or bottom of the tutorial."))]),s("p",null,[n[20]||(n[20]=e("Open Android Studio and click ")),a(t,{icon:"iconfont icon-select"}),n[21]||(n[21]=s("code",null,"[Open an existing Android Studio project]",-1)),n[22]||(n[22]=e("."))]),s("p",null,[n[23]||(n[23]=e("Navigate to the ")),a(t,{icon:"iconfont icon-select"}),n[24]||(n[24]=s("code",null,"[starter]",-1)),n[25]||(n[25]=e(" project directory you downloaded and click ")),a(t,{icon:"iconfont icon-select"}),n[26]||(n[26]=s("code",null,"[Open]",-1)),n[27]||(n[27]=e("."))]),n[203]||(n[203]=o(`<p>Take some time to familiarize yourself with the project.</p><h3 id="understanding-the-project-structure" tabindex="-1"><a class="header-anchor" href="#understanding-the-project-structure"><span>Understanding the Project Structure</span></a></h3><p>The project implements extensions for Android widgets to help users by handling boilerplate code for various use cases.</p><p>You’ll find these three modules in the <strong>starter</strong> project:</p><ol><li><strong>app</strong>: An app module that shows sample usage of the library.</li><li><strong>core</strong>: A library module that provides extensions for Android framework-related APIs and widgets.</li><li><strong>utilities</strong>: Another library module that provides extensions that use third-party libraries to work.</li></ol><p>Now that you have an overview of the files in this project, build and run. You’ll see a screen like this:</p><p>![Starter project screenshot](https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-29-at-12.53.58-AM-255x500.png =240x)</p><hr><h2 id="making-a-case-for-documentation" tabindex="-1"><a class="header-anchor" href="#making-a-case-for-documentation"><span>Making a Case for Documentation</span></a></h2><p>Without realizing it, you might already be documenting your code. The code snippets below show different ways to write an <strong>Extension Function</strong> for <code>SharedPreferences</code> to add key-value pairs and commit the changes.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">inline</span> <span class="token keyword">fun</span> SharedPreferences<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span>ca<span class="token operator">:</span> SharedPreferences<span class="token punctuation">.</span>Editor<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">val</span> e <span class="token operator">=</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  ca<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></span>
<span class="line">  e<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//vs</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">fun</span> SharedPreferences<span class="token punctuation">.</span><span class="token function">editAndCommit</span><span class="token punctuation">(</span>action<span class="token operator">:</span> SharedPreferences<span class="token punctuation">.</span>Editor<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">val</span> prefsEditor <span class="token operator">=</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  action<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>prefsEditor<span class="token punctuation">)</span></span>
<span class="line">  prefsEditor<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Choosing descriptive names for variables and functions is the first step toward a well-documented codebase. In the example above, it’s much easier to understand what’s going on in the second function than in the first one.</p><p>You can go even further and add comments describing the function. For example:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">/*</span>
<span class="line"> * An extension function on SharedPreferences receiver type.</span>
<span class="line"> *</span>
<span class="line"> * It uses commit to persist the changes and invokes</span>
<span class="line"> * action lambda function on the editor instance before committing.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">inline</span> <span class="token keyword">fun</span> SharedPreferences<span class="token punctuation">.</span><span class="token function">editAndCommit</span><span class="token punctuation">(</span>action<span class="token operator">:</span> SharedPreferences<span class="token punctuation">.</span>Editor<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">val</span> prefsEditor <span class="token operator">=</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  action<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>prefsEditor<span class="token punctuation">)</span></span>
<span class="line">  prefsEditor<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When you document your code, you help new users and contributors to trust and understand your project better. In a professional setting, good documentation helps new developers on your team — as well as on other teams — to get started with your project quickly.</p><p>Documentation also helps you. Going through your old codebase line by line after some time away can be time-consuming. So by documenting it, you’re helping your future self, too.</p><h3 id="going-beyond-code-comments" tabindex="-1"><a class="header-anchor" href="#going-beyond-code-comments"><span>Going Beyond Code Comments</span></a></h3><p>Documentation doesn’t have a fixed definition — but it goes way beyond comments. You can get as creative as you want while documenting your code, as long as it helps others to understand your code.</p><p>There are many ways to document a project:</p><ul><li>Hosting API references online.</li><li>Writing a small book to give users an overview.</li><li>Recording screencast videos walking users through major parts of the code.</li><li>…and the list goes on.</li></ul><h3 id="learning-from-examples" tabindex="-1"><a class="header-anchor" href="#learning-from-examples"><span>Learning From Examples</span></a></h3><p>In the Android world, <a href="https://bumptech.github.io/glide/" target="_blank" rel="noopener noreferrer">Glide</a> and <a href="https://square.github.io/retrofit/" target="_blank" rel="noopener noreferrer">Retrofit</a> are quite famous for loading images and making network calls — and their documentation pages are really good.</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-29-at-1.32.35-AM.png" alt="Glide library documentation page" tabindex="0" loading="lazy"><figcaption>Glide library documentation page</figcaption></figure><figure><img src="https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-29-at-1.32.47-AM-650x423.png" alt="Retrofit library documentation page" tabindex="0" loading="lazy"><figcaption>Retrofit library documentation page</figcaption></figure><p>Both of them try to get readers started as quickly as possible with minimal setup, but they provide in-depth API references for the advanced readers, too.</p><p><strong>Golang</strong> and <strong>Kotlin</strong> provide code playgrounds to let users directly interact with sample programs. Check those out <a href="https://go.dev/play" target="_blank" rel="noopener noreferrer">here</a> and <a href="https://play.kotlinlang.org/byExample/01_introduction/01_Hello%20world" target="_blank" rel="noopener noreferrer">here</a>.</p>`,26)),s("p",null,[n[29]||(n[29]=e("Another super-creative example of documentation is this YouTube channel by ")),s("a",x,[a(t,{icon:"fa-brands fa-youtube"}),n[28]||(n[28]=e("Andreas Kling"))]),n[30]||(n[30]=e(". He regularly uploads screencasts about his project ")),n[31]||(n[31]=s("a",{href:"https://www.serenityos.org/",target:"_blank",rel:"noopener noreferrer"},"SerenityOS",-1)),n[32]||(n[32]=e("."))]),n[204]||(n[204]=o('<p>All that to say, there isn’t just one way to define documentation. In the next few sections, you’ll see how to use KDoc and Dokka to ease the process of generating documentation for your Kotlin/Java/Android projects.</p><hr><h2 id="introducing-kdoc" tabindex="-1"><a class="header-anchor" href="#introducing-kdoc"><span>Introducing KDoc</span></a></h2><p>If you’re coming from a Java background and have used <strong>JavaDoc</strong> before, you’ll feel right at home with <strong>KDoc</strong>. It uses JavaDoc’s syntax and adds support for Kotlin-specific constructs.</p><p>For those who haven’t used JavaDoc before, it’s a tool by Oracle that generates HTML pages from the Java source code files. The language format it uses for documenting is also named JavaDoc.</p><p>JavaDoc parses the source files for class/method declarations along with the comments written in JavaDoc format to add descriptions for those elements.</p><p>KDoc uses JavaDoc’s syntax, but unlike JavaDoc, it isn’t a tool to generate the HTML pages. <strong>Dokka</strong> generates the documentation from KDoc comments.</p>',7)),s("p",null,[n[33]||(n[33]=e("Open ")),a(t,{icon:"iconfont icon-java"}),n[34]||(n[34]=s("code",null,"MainActivity.kt",-1)),n[35]||(n[35]=e(" in the starter code and replace ")),n[36]||(n[36]=s("code",null,"TODO:1",-1)),n[37]||(n[37]=e(" with the code snippet below:"))]),n[205]||(n[205]=o(`<div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">/*</span>
<span class="line">  Initializes the image loading sample views</span>
<span class="line">  This demonstrates a plain multiline comment</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Also, replace <code>TODO:2</code> with this snippet:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">/**</span>
<span class="line"> * Initializes the toast related views</span>
<span class="line"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The first snippet is a plain multiline comment, and the second one is a KDoc documentation comment. It uses a forward slash followed by two asterisks instead of one.</p><p>Each line of a KDoc comment other than the first and the last one starts with an optional asterisk. Dokka ignores those asterisks.</p><p>Dokka recognizes KDoc comments only when they come immediately before a class/method/field definition — so they’re ignored when placed inside the body of a method or anywhere else.</p><p>The format of a KDoc comment consists of an initial description followed by a series of block tags. You’ll learn about the block tags in the next section.</p><p>The first paragraph of any KDoc comment before a blank line is the <strong>summary description</strong> of the element, and the text that follows is the <strong>detailed description</strong>.</p><h3 id="defining-block-tags" tabindex="-1"><a class="header-anchor" href="#defining-block-tags"><span>Defining Block Tags</span></a></h3><p>Block tags provide extra information about the element to which the comment applies.</p><p>It must appear at the beginning of a line and start with the <code>@</code> character. This means you can use @\` anywhere else in the comment and it won’t be interpreted as a block tag.</p>`,11)),s("p",null,[n[38]||(n[38]=e("Enough with the theory. Open ")),a(t,{icon:"iconfont icon-java"}),n[39]||(n[39]=s("code",null,"Prefs.kt",-1)),n[40]||(n[40]=e(" in the ")),n[41]||(n[41]=s("code",null,"core",-1)),n[42]||(n[42]=e(" module and replace ")),n[43]||(n[43]=s("code",null,"TODO:3",-1)),n[44]||(n[44]=e(" with the following snippet:"))]),n[206]||(n[206]=o(`<div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">/**</span>
<span class="line"> * An extension function on [SharedPreferences] receiver that uses</span>
<span class="line"> * &lt;b&gt;[commit][SharedPreferences.Editor.commit]&lt;/b&gt; to persist the changes.</span>
<span class="line"> *</span>
<span class="line"> * It creates and uses an [Editor][SharedPreferences.Editor] object to allow editing the</span>
<span class="line"> * SharedPreferences instance by calling the provided [customAction] on the editor instance.</span>
<span class="line"> *</span>
<span class="line"> * &lt;b&gt;Sample usage&lt;/b&gt;</span>
<span class="line"> *</span>
<span class="line"> * \`\`\`</span>
<span class="line"> * yourPrefsInstance.editAndCommit {</span>
<span class="line"> *     putString(&quot;key&quot;, value)</span>
<span class="line"> * }</span>
<span class="line"> * \`\`\`</span>
<span class="line"> *</span>
<span class="line"> * @receiver [SharedPreferences]</span>
<span class="line"> * @param[customAction] Custom action to be executed on the created [editor][SharedPreferences.Editor]</span>
<span class="line"> * receiver</span>
<span class="line"> * @see SharedPreferences.editAndApply</span>
<span class="line"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above snippet, the first paragraph is the <strong>summary description</strong>, followed by the <strong>detailed description</strong>. They get rendered differently when used with Dokka, which you’ll see later.</p><p>The block tags used in the above snippet are:</p><ol><li><code>@receiver</code>: Documents the receiver of an extension function.</li><li><code>@param</code>: Documents the properties of a class/method with its name and description.</li><li><code>@see</code>: Adds a link to the specified class or method.</li></ol><p>KDoc also supports HTML tags and inline markup using markdown syntax. The <code>‹b›</code> tag and <code>[Editor][SharedPreferences.Editor]</code> in the snippet are some of the examples.</p><p>This is what Dokka generates:</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-12.17.23-AM.png" alt="Documentation screenshot generated by Dokka" tabindex="0" loading="lazy"><figcaption>Documentation screenshot generated by Dokka</figcaption></figure><p>You can look at all the block tags that KDoc supports <a href="https://kotlinlang.org/docs/kotlin-doc.html#block-tags" target="_blank" rel="noopener noreferrer">here</a>.</p><h3 id="documenting-modules-and-packages" tabindex="-1"><a class="header-anchor" href="#documenting-modules-and-packages"><span>Documenting Modules and Packages</span></a></h3>`,9)),s("p",null,[n[45]||(n[45]=e("KDoc also supports documenting a ")),a(t,{icon:"iconfont icon-select"}),n[46]||(n[46]=s("code",null,"[package]",-1)),n[47]||(n[47]=e(" or a ")),a(t,{icon:"iconfont icon-select"}),n[48]||(n[48]=s("code",null,"[module]",-1)),n[49]||(n[49]=e(" using a custom markdown file."))]),s("p",null,[n[50]||(n[50]=e("Select the ")),a(t,{icon:"iconfont icon-select"}),n[51]||(n[51]=s("code",null,"[Project]",-1)),n[52]||(n[52]=e(" view in Android Studio, if it’s not already selected:"))]),n[207]||(n[207]=s("figure",null,[s("img",{src:"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-12.29.59-AM-465x500.png",alt:"Android studio project view selection",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Android studio project view selection")],-1)),s("p",null,[n[53]||(n[53]=e("Open ")),a(t,{icon:"fa-brands fa-markdown"}),n[54]||(n[54]=s("code",null,"module.md",-1)),n[55]||(n[55]=e(" in the ")),a(t,{icon:"fas fa-folder-open"}),n[56]||(n[56]=s("code",null,"app",-1)),n[57]||(n[57]=e(" module. Replace the contents of the file (the ")),n[58]||(n[58]=s("code",null,"TODO:4",-1)),n[59]||(n[59]=e(" line) with the following:"))]),n[208]||(n[208]=o(`<div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token title important"><span class="token punctuation">#</span> Module notktx-app</span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> Description</span></span>
<span class="line"></span>
<span class="line">This adds a custom module-level description for the app module.</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">#</span> Package com.raywenderlich.android.notktx.sample</span></span>
<span class="line"></span>
<span class="line">This is the only package in the sample app.</span>
<span class="line">It demonstrate usages of <span class="token code-snippet code keyword">\`notktx:core\`</span> and <span class="token code-snippet code keyword">\`notktx:utilities\`</span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> Level 2 heading</span></span>
<span class="line"></span>
<span class="line">Everything is rendered as plain markdown and gets associated with the first level heading</span>
<span class="line">(Module or Package).</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>KDoc uses first-level headings for module and package names. You can reference the <a href="https://kotlinlang.org/docs/kotlin-doc.html#module-and-package-documentation" target="_blank" rel="noopener noreferrer">official documentation</a> for more information on this.</p><p>This accounts for changes you’ll make later in this article.</p>`,3)),s("div",M,[n[63]||(n[63]=s("p",{class:"hint-container-title"},"Note",-1)),s("p",null,[n[60]||(n[60]=e("The name of the file doesn’t have to be ")),a(t,{icon:"fa-brands fa-markdown"}),n[61]||(n[61]=s("code",null,"module.md",-1)),n[62]||(n[62]=e(". Also, in this example, the name of the module used in the first-level heading differs from the actual name."))])]),n[209]||(n[209]=o('<p>This is how the module description will look when rendered by Dokka, which you’ll do next.</p><p>Dokka module description screenshot</p><hr><h2 id="introducing-dokka" tabindex="-1"><a class="header-anchor" href="#introducing-dokka"><span>Introducing Dokka</span></a></h2><p>Dokka is the documentation engine for Kotlin, performing the same function as the JavaDoc tool. The next few sections will be more hands-on than the previous ones.</p><p>Here are some of the key features of Dokka:</p><ul><li>Supports mixed-language Java/Kotlin projects.</li><li>Understands standard JavaDoc comments in Java files and KDoc comments in Kotlin files. You can also use custom options to render Kotlin files as seen from the Java perspective.</li><li>Generates documentation in multiple formats — including standard JavaDoc, HTML and Markdown.</li></ul><h3 id="integrating-dokka" tabindex="-1"><a class="header-anchor" href="#integrating-dokka"><span>Integrating Dokka</span></a></h3><p>To integrate Dokka in this project, you’ll use <code>gradle</code>. You’ll do a quick Dokka setup in this section and generate a basic version of the documentation in the next.</p>',9)),s("p",null,[n[64]||(n[64]=e("Open the root-level ")),a(t,{icon:"iconfont icon-engine"}),n[65]||(n[65]=s("code",null,"build.gradle",-1)),n[66]||(n[66]=e(" file and replace ")),n[67]||(n[67]=s("code",null,"TODO:5",-1)),n[68]||(n[68]=e(" in the ")),n[69]||(n[69]=s("code",null,"dependencies",-1)),n[70]||(n[70]=e(" block with the following:"))]),n[210]||(n[210]=o(`<div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line">classpath <span class="token interpolation-string"><span class="token string">&quot;org.jetbrains.dokka:dokka-gradle-plugin:1.6.0&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This adds the Dokka gradle plugin to the project’s classpath. Next, apply it to the project and modules. Replace <code>TODO:6</code> in the same file with following:</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line">apply plugin<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;org.jetbrains.dokka&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can manually add the Dokka plugin to each module or use the <code>subprojects</code> block to dynamically add it. Replace the <code>TODO:7</code> with the following:</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line">apply plugin<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;org.jetbrains.dokka&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now you’re ready to use Dokka!</p><p>One more thing to note is that if you open multiple projects with the same rootProject name, <code>notktx</code> in this case, IntelliJ’s built-in server won’t be able to resolve the page and will give a 404 error.</p><p>Make sure you either open the starter project or the final project at this time.</p>`,8)),s("div",S,[n[78]||(n[78]=s("p",{class:"hint-container-title"},"Note",-1)),s("p",null,[n[71]||(n[71]=e("Dokka’s ")),n[72]||(n[72]=s("a",{href:"https://kotlin.github.io/dokka/1.6.10/user_guide/base-specific/frontend/#prerequisites",target:"_blank",rel:"noopener noreferrer"},"official documentation",-1)),n[73]||(n[73]=e(" page suggests using a web server to see the HTML format correctly. If you directly open ")),a(t,{icon:"fa-brands fa-html5"}),n[74]||(n[74]=s("code",null,"index.html",-1)),n[75]||(n[75]=e(" file, Dokka with fail to load things like the navigation pane and search bars. You’ll use the built-in server provided by ")),n[76]||(n[76]=s("code",null,"IntelliJ",-1)),n[77]||(n[77]=e(" in this article."))])]),n[211]||(n[211]=o(`<h3 id="generating-documentation" tabindex="-1"><a class="header-anchor" href="#generating-documentation"><span>Generating Documentation</span></a></h3><p>Do a gradle sync for the changes you made in the last section. Then, open the <code>terminal</code> provided in Android Studio and run the following gradle tasks.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">./gradlew dokkaHtml dokkaHtmlMultiModule</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>It can take a few minutes for these two tasks to complete. While they run, have a quick look at what they do:</p><ol><li><code>dokkaHtml</code>: Generates HTML documentation for each module that has the Dokka plugin applied.</li><li><code>dokkaHtmlMultiModule</code>: Generates documentation for the project as a whole by linking all the modules together.</li></ol><figure><img src="https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-8.40.31-PM.png" alt="Dokka html terminal command" tabindex="0" loading="lazy"><figcaption>Dokka html terminal command</figcaption></figure>`,6)),s("p",null,[n[79]||(n[79]=e("Once the tasks complete, you’ll see ")),a(t,{icon:"fas fa-folder-open"}),n[80]||(n[80]=s("code",null,"build/dokka",-1)),n[81]||(n[81]=e(" directories generated in each module and one at the root level."))]),n[212]||(n[212]=s("figure",null,[s("img",{src:"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-8.51.09-PM-262x500.png",alt:"Dokka generated build directories screenshot",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Dokka generated build directories screenshot")],-1)),s("p",null,[n[82]||(n[82]=e("The ")),a(t,{icon:"fas fa-folder-open"}),n[83]||(n[83]=s("code",null,"html",-1)),n[84]||(n[84]=e(" directory in each module is generated by ")),n[85]||(n[85]=s("code",null,"dokkaHtml",-1)),n[86]||(n[86]=e(" and contains documentation for each standalone module."))]),s("p",null,[n[87]||(n[87]=e("The ")),a(t,{icon:"fas fa-folder-open"}),n[88]||(n[88]=s("code",null,"htmlPartial",-1)),n[89]||(n[89]=e(" directory in each module is generated by ")),n[90]||(n[90]=s("code",null,"dokkaHtmlMultiModule",-1)),n[91]||(n[91]=e(". It calls the ")),n[92]||(n[92]=s("code",null,"dokkaHtmlPartial",-1)),n[93]||(n[93]=e(" gradle task in each module to generate this directory and combines them all in the root-level ")),a(t,{icon:"fas fa-folder-open"}),n[94]||(n[94]=s("code",null,"build/dokka/htmlMultiModule",-1)),n[95]||(n[95]=e(" directory."))]),n[213]||(n[213]=s("p",null,"See all the gradle tasks added by Dokka by clicking on the gradle tab at the top right corner:",-1)),n[214]||(n[214]=s("figure",null,[s("img",{src:"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-9.15.31-PM-212x500.png",alt:"Android Studio documentation gradle tasks",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Android Studio documentation gradle tasks")],-1)),s("p",null,[n[96]||(n[96]=e("Right-click ")),a(t,{icon:"fa-brands fa-html5"}),n[97]||(n[97]=s("code",null,"index.html",-1)),n[98]||(n[98]=e(" in ")),a(t,{icon:"fas fa-folder-open"}),n[99]||(n[99]=s("code",null,"build/dokka/html",-1)),n[100]||(n[100]=e(" inside the ")),n[101]||(n[101]=s("code",null,"app",-1)),n[102]||(n[102]=e(" module and select ")),a(t,{icon:"iconfont icon-select"}),n[103]||(n[103]=s("code",null,"[Open in ▸ Browser ▸ {Whatever browser you want}]",-1)),n[104]||(n[104]=e(". This will use IntelliJ’s built-in server to load the file. The generated documentation will look like this:"))]),n[215]||(n[215]=s("figure",null,[s("img",{src:"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-9.19.49-PM-650x431.png",alt:"Dokka generated HTML for module",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Dokka generated HTML for module")],-1)),s("p",null,[n[105]||(n[105]=e("Do the same for the index.html file in the root-level ")),a(t,{icon:"fas fa-folder-open"}),n[106]||(n[106]=s("code",null,"build/dokka/htmlMultiModule",-1)),n[107]||(n[107]=e(" directory, and you’ll see this:"))]),n[216]||(n[216]=o('<figure><img src="https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-9.20.56-PM-650x430.png" alt="Dokka generated HTML for multiple modules" tabindex="0" loading="lazy"><figcaption>Dokka generated HTML for multiple modules</figcaption></figure><p>Congratulations! You’ve successfully generated documentation for your project.</p><p>If you’re facing this issue, don’t worry. You’ll fix this next by setting a custom output directory for the documentation.</p><div class="hint-container tip"><p class="hint-container-title">Note</p><p>With the multi-module setup, the current version of Dokka sometimes places the generated documentation in the incorrect module. For instance, you may open the app module’s index.html and see some other module’s documentation.</p></div><p>Go ahead and explore the generated documentation pages. The rest of this article will build upon this and show how to customize Dokka to cater to some common use cases.</p><hr><h2 id="customizing-dokka" tabindex="-1"><a class="header-anchor" href="#customizing-dokka"><span>Customizing Dokka</span></a></h2><p>The first thing you’ll customize is the output directory for module-level HTML documentation.</p><p>If you remember the gradle tasks from before, <code>dokkaHtml</code> is the task responsible for generating HTML documentation for each individual module.</p>',9)),s("p",null,[n[108]||(n[108]=e("Open the root-level ")),a(t,{icon:"iconfont icon-engine"}),n[109]||(n[109]=s("code",null,"build.gradle",-1)),n[110]||(n[110]=e(" file and replace ")),n[111]||(n[111]=s("code",null,"TODO:8",-1)),n[112]||(n[112]=e(" with following:"))]),n[217]||(n[217]=o(`<div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line">tasks<span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;dokkaHtml&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  outputDirectory<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">rootProject</span></span><span class="token string">.name-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">project</span></span><span class="token string">.name-dokka&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This updates the task to use a different output directory for each module. So, Dokka will use <code>notktx-app-dokka</code>, <code>notktx-core-dokka</code> and <code>notktx-utilities-dokka</code> for the respective modules. <code>But now, calling the</code>clean\` task in gradle won’t delete the documentation directories because they aren’t under the build directory anymore.</p><p>To fix that, replace the <code>TODO:9</code> line with the snippet shown below:</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line">task <span class="token function">cleanDokkaModuleDocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  subprojects <span class="token punctuation">{</span></span>
<span class="line">    delete <span class="token function">file</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">rootProject</span></span><span class="token string">.name-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">project</span></span><span class="token string">.name-dokka&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To invoke this task automatically when calling <code>./gradlew clean</code>, update the <code>clean</code> task to depend on <code>dokkaHtmlMultiModule</code>. The task should look like this:</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line">task <span class="token function">clean</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Delete<span class="token punctuation">,</span> dependsOn<span class="token punctuation">:</span> cleanDokkaModuleDocs<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  delete rootProject<span class="token punctuation">.</span>buildDir</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This adds a gradle task that goes through all the subprojects and deletes the custom documentation directories. Run <code>./gradlew dokkaHtml dokkaHtmlMultiModule</code> to generate documentation in the newly defined custom directory structure.</p><p>Whenever you want to delete those generated documentation directories, you need to run <code>./gradlew clean</code> in the terminal. It will call <code>cleanDokkaModuleDocs</code> itself for you.</p><h3 id="adding-external-documentation" tabindex="-1"><a class="header-anchor" href="#adding-external-documentation"><span>Adding External Documentation</span></a></h3>`,9)),s("p",null,[n[113]||(n[113]=e("There’s a minor problem in the documentation you generated in the last section. If you open the ")),a(t,{icon:"iconfont icon-java"}),n[114]||(n[114]=s("code",null,"ImageLoaders.kt",-1)),n[115]||(n[115]=e(" and look at the KDoc comment for ")),n[116]||(n[116]=s("code",null,"loadImageFromUrl",-1)),n[117]||(n[117]=e(", you’ll see this snippet:"))]),n[218]||(n[218]=o(`<div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token operator">*</span> <span class="token label symbol">@see</span> Picasso</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This should add a link to <code>Picasso</code> class in the <strong>See also</strong> section of <code>loadImageFromUrl‘s</code> documentation.</p>`,2)),s("p",null,[n[118]||(n[118]=e("But if you open the multimodule documentation in a browser and click ")),n[119]||(n[119]=s("code",null,"loadImageFromUrl",-1)),n[120]||(n[120]=e(" in the ")),a(t,{icon:"fas fa-folder-open"}),n[121]||(n[121]=s("code",null,"utilities",-1)),n[122]||(n[122]=e(" package, you’ll see it doesn’t provide a clickable link. Instead, it shows a text with the package name of Picasso."))]),n[219]||(n[219]=s("figure",null,[s("img",{src:"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-11.32.20-PM-650x429.png",alt:"Dokka see also section screenshot",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Dokka see also section screenshot")],-1)),s("p",null,[n[123]||(n[123]=e("Dokka needs to know the location of JavaDoc of any third-party library for this external linking to work. To do that, open the root-level ")),a(t,{icon:"iconfont icon-engine"}),n[124]||(n[124]=s("code",null,"build.gradle",-1)),n[125]||(n[125]=e(" and replace ")),n[126]||(n[126]=s("code",null,"TODO:10",-1)),n[127]||(n[127]=e(" with following snippet:"))]),n[220]||(n[220]=o(`<div class="language-gralde line-numbers-mode" data-highlighter="prismjs" data-ext="gralde"><pre><code class="language-gralde"><span class="line">tasks.named(&quot;dokkaHtmlPartial&quot;) {</span>
<span class="line">  dokkaSourceSets {</span>
<span class="line">    named(&quot;main&quot;) {</span>
<span class="line">      externalDocumentationLink {</span>
<span class="line">        url.set(new URL(&quot;https://square.github.io/picasso/2.x/picasso/&quot;))</span>
<span class="line">      }</span>
<span class="line">      externalDocumentationLink {</span>
<span class="line">        url.set(new URL(&quot;https://bumptech.github.io/glide/javadocs/4120/&quot;))</span>
<span class="line">      }</span>
<span class="line">    }</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>One thing to keep in mind is that the external link has to end with a <code>/</code>.</p><p>Add the external documentation links for dokkaHtml task too by adding the below snippet in <code>tasks.named(&quot;dokkaHtml&quot;)</code>:</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line">dokkaSourceSets <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">named</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;main&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    externalDocumentationLink <span class="token punctuation">{</span></span>
<span class="line">      url<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;https://square.github.io/picasso/2.x/picasso/&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    externalDocumentationLink <span class="token punctuation">{</span></span>
<span class="line">      url<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;https://bumptech.github.io/glide/javadocs/4120/&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This adds the links to Picasso’s and Glide’s documentation pages. <code>loadRoundImageFromUrl</code> uses Glide to load images.</p><p>Run <code>./gradlew clean dokkaHtmlMultiModule</code> in the terminal to generate the documentation again. You’ll see that Dokka adds the link to the <code>Picasso</code> class in the documentation now. How it works under the hood goes beyond the scope of this article.</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-11.55.30-PM-650x429.png" alt="Dokka page with linked third party documentation" tabindex="0" loading="lazy"><figcaption>Dokka page with linked third party documentation</figcaption></figure><p>Dokka generates the <strong>See also</strong> section for <code>@see</code> block tag. It’s useful for cases when you want to point readers to other functions or classes to get a better understanding of the current one.</p><p>Say that you decide to deprecate <code>loadImageFromUrl</code> and add a new function, <code>loadImageFromUrlV2</code>, that uses <code>Glide</code> under the hood to load images instead of <code>Picasso</code> to get consistent with <code>loadRoundImageFromUrl</code>.</p><p>You’ll need to do three things:</p><ol><li>Add the new function and its documentation describing the library version in which it was added.</li><li>Add a deprecation tag for <code>loadImageFromUrl</code> and a way to point users to its replacement function.</li><li>Update the library version.</li></ol>`,11)),s("p",null,[n[128]||(n[128]=e("Open ")),a(t,{icon:"iconfont icon-java"}),n[129]||(n[129]=s("code",null,"ImageLoaders.kt",-1)),n[130]||(n[130]=e(" and replace ")),n[131]||(n[131]=s("code",null,"TODO:11",-1)),n[132]||(n[132]=e(" with the following snippet:"))]),n[221]||(n[221]=o(`<div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">/**</span>
<span class="line"> * An extension function on [ImageView] receiver to load an image from some remote url.</span>
<span class="line"> *</span>
<span class="line"> * This function uses &lt;b&gt;Glide&lt;/b&gt; which is a 3rd party library to handle all the networking and</span>
<span class="line"> * caching side of things. Glide handles the loading w.r.t. the lifecycle of the view for you.</span>
<span class="line"> *</span>
<span class="line"> * &lt;b&gt;Sample Usage&lt;/b&gt;</span>
<span class="line"> *</span>
<span class="line"> * \`\`\`</span>
<span class="line"> * yourImageView.loadImageFromUrlV2(url = &quot;https://someurl.com/someImage&quot;)</span>
<span class="line"> * \`\`\`</span>
<span class="line"> *</span>
<span class="line"> * @receiver [ImageView]</span>
<span class="line"> * @param url Url to load image from</span>
<span class="line"> * @since v1.0.2</span>
<span class="line"> * @see Glide</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">fun</span> ImageView<span class="token punctuation">.</span><span class="token function">loadImageFromUrlV2</span><span class="token punctuation">(</span>url<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">centerCrop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To deprecate the existing function, you need to add <code>Deprecated</code> annotation above its definition. And, to point users to the replacement function, you need to add <code>@see loadImageFromUrlV2</code> in the KDoc comment.</p><p>After doing the above changes, <code>loadImageFromUrl</code> will look something like this:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">/**</span>
<span class="line"> *</span>
<span class="line"> * // Truncated code above</span>
<span class="line"> *</span>
<span class="line"> * @param url Url to load image from</span>
<span class="line"> * @see Picasso</span>
<span class="line"> * @see loadImageFromUrlV2</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation builtin">@Deprecated</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Moving to Glide&quot;</span></span><span class="token punctuation">,</span> </span>
<span class="line">  replaceWith <span class="token operator">=</span> <span class="token function">ReplaceWith</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;loadImageFromUrlV2&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  level <span class="token operator">=</span> DeprecationLevel<span class="token punctuation">.</span>WARNING<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">fun</span> ImageView<span class="token punctuation">.</span><span class="token function">loadImageFromUrl</span><span class="token punctuation">(</span>url<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">// Truncated code below</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("p",null,[n[133]||(n[133]=e("Finally, you need to update the library version. Open ")),a(t,{icon:"iconfont icon-engine"}),n[134]||(n[134]=s("code",null,"publish.gradle",-1)),n[135]||(n[135]=e(" file and change ")),n[136]||(n[136]=s("code",null,"LIB_VERSION",-1)),n[137]||(n[137]=e(" variable to ")),n[138]||(n[138]=s("code",null,'"1.0.2"',-1)),n[139]||(n[139]=e("."))]),n[222]||(n[222]=o('<p>Run <code>./gradlew clean dokkaHtmlMultiModule</code> and you’ll see documentation pages updated to these:</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-31-at-1.01.59-AM-650x431.png" alt="Dokka  deprecated function page" tabindex="0" loading="lazy"><figcaption>Dokka <code>loadImageFromUrl</code> deprecated function page</figcaption></figure><figure><img src="https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-31-at-1.02.14-AM-650x430.png" alt="Dokka  function page" tabindex="0" loading="lazy"><figcaption>Dokka <code>loadImageFromUrlV2</code> function page</figcaption></figure><h3 id="customizing-member-visibility" tabindex="-1"><a class="header-anchor" href="#customizing-member-visibility"><span>Customizing Member Visibility</span></a></h3><p>The next thing you’ll do is stop Dokka from showing all the methods and properties of parent classes in <code>MainActivity</code>.</p><p>Select the <code>MainActivity</code> tab in the generated docs, and you’ll see a lot of functions and properties listed there that you didn’t define. Those are from the parent classes and hide the functions and properties you actually care about.</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-31-at-1.09.48-AM-650x433.png" alt="Dokka docs screenshot" tabindex="0" loading="lazy"><figcaption>Dokka docs screenshot</figcaption></figure><p>Dokka provides a flag to hide the members of the parent class you didn’t explicitly override.</p>',8)),s("p",null,[n[140]||(n[140]=e("Open the root-level ")),a(t,{icon:"iconfont icon-engine"}),n[141]||(n[141]=s("code",null,"build.gradle",-1)),n[142]||(n[142]=e(" file and add ")),n[143]||(n[143]=s("code",null,"suppressInheritedMembers.set(true",-1)),n[144]||(n[144]=e(") in both ")),n[145]||(n[145]=s("code",null,"dokkaHtml",-1)),n[146]||(n[146]=e(" and ")),n[147]||(n[147]=s("code",null,"dokkaHtmlPartial",-1)),n[148]||(n[148]=e(" tasks. Tasks should look like this:"))]),n[223]||(n[223]=o(`<div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line"><span class="token comment">// Truncated code above</span></span>
<span class="line"></span>
<span class="line">tasks<span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;dokkaHtml&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  outputDirectory<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">rootProject</span></span><span class="token string">.name-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">project</span></span><span class="token string">.name-dokka&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  suppressInheritedMembers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Truncated code</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">tasks<span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;dokkaHtmlPartial&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  suppressInheritedMembers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Truncated code below</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Run <code>./gradlew clean dokkaHtmlMultiModule</code> to see the changes:</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-31-at-1.28.58-AM-650x427.png" alt="Generated documentation screenshot" tabindex="0" loading="lazy"><figcaption>Generated documentation screenshot</figcaption></figure><p>The functions and properties from the parent classes are gone, but the overridden <code>onCreate</code> method and other private methods and properties aren’t showing up either.</p><p>Dokka hides non public members by default. To show non-public properties and methods, you need to add <code>includeNonPublic.set(true)</code> in the <strong>main</strong> source set in the <code>dokkaSourceSets</code> block. It should look like this:</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line">dokkaSourceSets <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">named</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;main&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    includeNonPublic<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">    externalDocumentationLink <span class="token punctuation">{</span></span>
<span class="line">      url<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;https://square.github.io/picasso/2.x/picasso/&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    externalDocumentationLink <span class="token punctuation">{</span></span>
<span class="line">      url<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;https://bumptech.github.io/glide/javadocs/4120/&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),s("p",null,[n[149]||(n[149]=e("If you want any property, method or class to not show up in the documentation, you can use ")),n[150]||(n[150]=s("code",null,"@suppress",-1)),n[151]||(n[151]=e(" tag. Open ")),a(t,{icon:"iconfont icon-java"}),n[152]||(n[152]=s("code",null,"MainActivity.kt",-1)),n[153]||(n[153]=e(" and replace ")),n[154]||(n[154]=s("code",null,"TODO:15",-1)),n[155]||(n[155]=e(" with the snippet below:"))]),n[224]||(n[224]=o(`<div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">/**</span>
<span class="line"> * @suppress</span>
<span class="line"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Run <code>./gradlew clean dokkaHtmlMultiModule</code> to see the changes:</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-31-at-1.49.28-AM-650x492.png" alt="Documentation screenshot with non public members" tabindex="0" loading="lazy"><figcaption>Documentation screenshot with non public members</figcaption></figure><h3 id="customizing-module-and-package-pages" tabindex="-1"><a class="header-anchor" href="#customizing-module-and-package-pages"><span>Customizing Module and Package Pages</span></a></h3>`,4)),s("p",null,[n[156]||(n[156]=e("Remember the changes you did in the ")),n[157]||(n[157]=s("strong",null,"Documenting Modules and Packages",-1)),n[158]||(n[158]=e(" section? It’s time to start using those custom ")),a(t,{icon:"fa-brands fa-markdown"}),n[159]||(n[159]=s("code",null,"module.md",-1)),n[160]||(n[160]=e(" files from each of the modules."))]),s("p",null,[n[161]||(n[161]=e("Open the root-level ")),a(t,{icon:"iconfont icon-engine"}),n[162]||(n[162]=s("code",null,"build.gradle",-1)),n[163]||(n[163]=e(" file and add ")),n[164]||(n[164]=s("code",null,'includes.from("module.md")',-1)),n[165]||(n[165]=e(" below ")),n[166]||(n[166]=s("code",null,"includeNonPublic.set(true)",-1)),n[167]||(n[167]=e(" for both the custom tasks. It will look something like this:"))]),n[225]||(n[225]=o(`<div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line"><span class="token comment">// Truncated code above</span></span>
<span class="line"></span>
<span class="line"><span class="token function">named</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;main&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  includeNonPublic<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">  includes<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;module.md&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Truncated code below</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[168]||(n[168]=e("If you try generating the documentation now, the custom markdown for packages will work, but the one for modules won’t. This is because the actual module names and the ones used in ")),a(t,{icon:"fa-brands fa-markdown"}),n[169]||(n[169]=s("code",null,"module.md",-1)),n[170]||(n[170]=e(" don’t match."))]),s("p",null,[n[171]||(n[171]=e("To fix this, you need to customize the module names in the documentation. Open the root-level ")),a(t,{icon:"iconfont icon-engine"}),n[172]||(n[172]=s("code",null,"build.gradle",-1)),n[173]||(n[173]=e(" and add the following snippet in ")),n[174]||(n[174]=s("code",null,'tasks.named("dokkaHtml")',-1)),n[175]||(n[175]=e(" and ")),n[176]||(n[176]=s("code",null,'tasks.named("dokkaHtmlPartial")',-1)),n[177]||(n[177]=e(":"))]),n[226]||(n[226]=o(`<div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line">moduleName<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">rootProject</span></span><span class="token string">.name-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">project</span></span><span class="token string">.name&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Run <code>./gradlew clean dokkaHtmlMultiModule</code> to see the changes:</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2022/01/Screenshot-2022-01-01-at-3.59.35-PM-650x430.png" alt="Dokka custom module documentation" tabindex="0" loading="lazy"><figcaption>Dokka custom module documentation</figcaption></figure><figure><img src="https://koenig-media.raywenderlich.com/uploads/2022/01/Screenshot-2022-01-01-at-3.59.54-PM-650x433.png" alt="Dokka custom package documentation" tabindex="0" loading="lazy"><figcaption>Dokka custom package documentation</figcaption></figure><p>Take some time to explore all three module.md files and see how their first-level heading maps to module- and package-level documentation pages.</p><h3 id="using-custom-assets" tabindex="-1"><a class="header-anchor" href="#using-custom-assets"><span>Using Custom Assets</span></a></h3><p>In this section, you’ll add a custom footer message and learn to add and replace custom CSS files.</p>`,7)),s("p",null,[n[178]||(n[178]=e("Open the root-level ")),a(t,{icon:"iconfont icon-engine"}),n[179]||(n[179]=s("code",null,"build.gradle",-1)),n[180]||(n[180]=e(" file and replace ")),n[181]||(n[181]=s("code",null,"TODO:18",-1)),n[182]||(n[182]=e(" with the following snippet:"))]),n[227]||(n[227]=o(`<div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line">customFooterMessage <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;Made with ❤️ at raywenderlich.com&quot;</span></span></span>
<span class="line">customLogoFile <span class="token operator">=</span> projectDir<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token interpolation-string"><span class="token string">&quot;/logo-style.css&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This defines extra properties for custom footer messages and CSS file paths in the project object.</p>`,2)),s("p",null,[n[183]||(n[183]=e("In the root-level ")),a(t,{icon:"iconfont icon-engine"}),n[184]||(n[184]=s("code",null,"build.gradle",-1)),n[185]||(n[185]=e(" file, add the following snippet under ")),n[186]||(n[186]=s("code",null,"dokkaHtml",-1)),n[187]||(n[187]=e(" and ")),n[188]||(n[188]=s("code",null,"dokkaHtmlPartial",-1)),n[189]||(n[189]=e(" tasks:"))]),n[228]||(n[228]=o(`<div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line">pluginsMapConfiguration<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token punctuation">[</span></span>
<span class="line">    <span class="token interpolation-string"><span class="token string">&quot;org.jetbrains.dokka.base.DokkaBase&quot;</span></span><span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;&quot;&quot;{</span>
<span class="line">      &quot;footerMessage&quot;: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">customFooterMessage</span></span><span class="token string">&quot;,</span>
<span class="line">      &quot;customStyleSheets&quot;: [&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">customLogoFile</span></span><span class="token string">&quot;]</span>
<span class="line">     }&quot;&quot;&quot;</span></span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[190]||(n[190]=e("This snippet adds a custom footer message and the path to ")),a(t,{icon:"fa-brands fa-css3-alt"}),n[191]||(n[191]=s("code",null,"logo-style.css",-1)),n[192]||(n[192]=e(" in ")),n[193]||(n[193]=s("code",null,"pluginsMapConfiguration",-1)),n[194]||(n[194]=e(". Dokka uses it to customize documentation properties."))]),n[229]||(n[229]=s("p",null,[e("The CSS file is already added to the project for you. The "),s("code",null,"customStyleSheets"),e(" property in Dokka adds new files or replaces old files if a file with the same name exists.")],-1)),s("p",null,[n[195]||(n[195]=e("Dokka also uses ")),a(t,{icon:"fa-brands fa-css3-alt"}),n[196]||(n[196]=s("code",null,"logo-style.css",-1)),n[197]||(n[197]=e(" to add a logo in the top left corner. The custom file that you used replaces that logo with another one."))]),n[230]||(n[230]=o(`<p>Adding the snippet in those two tasks will customize the pages for standalone module documentation as well as module-level pages in the multimodule documentation.</p><p>In case of multimodule projects, the <code>dokkaHtmlMultiModule</code> task generates the page that lists all the modules and not the <code>dokkaHtmlPartial</code> task.</p><p>To customize that page, you need to add the same snippet in the <code>dokkaHtmlMultiModule</code> task, too. You’ll add this in the <code>afterEvaluate</code> block so that it gets executed after all the definitions in the build script are applied. Replace <code>TODO:20</code> with the snippet below:</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line">afterEvaluate <span class="token punctuation">{</span></span>
<span class="line">  tasks<span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;dokkaHtmlMultiModule&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    pluginsMapConfiguration<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token punctuation">[</span></span>
<span class="line">        <span class="token interpolation-string"><span class="token string">&quot;org.jetbrains.dokka.base.DokkaBase&quot;</span></span><span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;&quot;&quot;{</span>
<span class="line">          &quot;footerMessage&quot;: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">customFooterMessage</span></span><span class="token string">&quot;,</span>
<span class="line">          &quot;customStyleSheets&quot;: [&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">customLogoFile</span></span><span class="token string">&quot;]</span>
<span class="line">         }&quot;&quot;&quot;</span></span></span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Run <code>./gradlew clean dokkaHtmlMultiModule</code> to see the changes:</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2022/01/Screenshot-2022-01-01-at-4.40.13-PM-650x431.png" alt="Documentation with custom footer and css" tabindex="0" loading="lazy"><figcaption>Documentation with custom footer and css</figcaption></figure><p>Congratulations — you’ve completed this tutorial!</p><hr><h2 id="where-to-go-from-here" tabindex="-1"><a class="header-anchor" href="#where-to-go-from-here"><span>Where to Go From Here?</span></a></h2>`,9)),s("p",null,[n[199]||(n[199]=e("Download the completed project files by clicking the ")),s("a",j,[a(t,{icon:"fas fa-download"}),n[198]||(n[198]=s("code",null,"[Download Materials]",-1))]),n[200]||(n[200]=e(" button at the top or bottom of the tutorial."))]),n[231]||(n[231]=s("p",null,"Dokka uses a plugin system and provides extension points to write your custom plugins. Check that out here.",-1)),n[232]||(n[232]=s("p",null,"As a challenge from this article, you can generate documentation in other formats, such as JavaDoc and GFM.",-1)),n[233]||(n[233]=s("p",null,"We hope you enjoyed this tutorial. If you have any questions or comments, please join the forum discussion below!",-1))])}const P=c(f,[["render",q]]),I=JSON.parse('{"path":"/kodeco.com/30067669-documenting-kotlin-code-for-android-using-kdoc-and-dokka.html","title":"Documenting Kotlin Code for Android Using KDoc and Dokka","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Documenting Kotlin Code for Android Using KDoc and Dokka","description":"Article(s) > Documenting Kotlin Code for Android Using KDoc and Dokka","icon":"fa-brands fa-android","category":["Java","Kotlin","Android","Gradle","Article(s)"],"tag":["blog","kodeco.com","java","kotiln","android","gradle","kdoc","dokka"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Documenting Kotlin Code for Android Using KDoc and Dokka\\",\\"image\\":[\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-28-at-1.59.47-AM.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-29-at-12.53.58-AM-255x500.png =240x\\",\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-29-at-1.32.35-AM.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-29-at-1.32.47-AM-650x423.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-12.17.23-AM.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-12.29.59-AM-465x500.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-8.40.31-PM.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-8.51.09-PM-262x500.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-9.15.31-PM-212x500.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-9.19.49-PM-650x431.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-9.20.56-PM-650x430.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-11.32.20-PM-650x429.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-30-at-11.55.30-PM-650x429.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-31-at-1.01.59-AM-650x431.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-31-at-1.02.14-AM-650x430.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-31-at-1.09.48-AM-650x433.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-31-at-1.28.58-AM-650x427.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2021/12/Screenshot-2021-12-31-at-1.49.28-AM-650x492.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2022/01/Screenshot-2022-01-01-at-3.59.35-PM-650x430.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2022/01/Screenshot-2022-01-01-at-3.59.54-PM-650x433.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2022/01/Screenshot-2022-01-01-at-4.40.13-PM-650x431.png\\"],\\"datePublished\\":\\"2022-03-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/kodeco.com/30067669-documenting-kotlin-code-for-android-using-kdoc-and-dokka.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Documenting Kotlin Code for Android Using KDoc and Dokka"}],["meta",{"property":"og:description","content":"Article(s) > Documenting Kotlin Code for Android Using KDoc and Dokka"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://koenig-media.raywenderlich.com/uploads/2022/03/DocumentingKotlinCode-twitter.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://koenig-media.raywenderlich.com/uploads/2022/03/DocumentingKotlinCode-twitter.png"}],["meta",{"name":"twitter:image:alt","content":"Documenting Kotlin Code for Android Using KDoc and Dokka"}],["meta",{"property":"article:tag","content":"dokka"}],["meta",{"property":"article:tag","content":"kdoc"}],["meta",{"property":"article:tag","content":"gradle"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"kotiln"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"kodeco.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-03-28T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Documenting Kotlin Code for Android Using KDoc and Dokka"},{"property":"og:description","content":"Documenting Kotlin Code for Android Using KDoc and Dokka"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/kodeco.com/30067669-documenting-kotlin-code-for-android-using-kdoc-and-dokka.html"}]],"prev":"/programming/java-android/articles/README.md","date":"2022-03-28T00:00:00.000Z","isOriginal":false,"cover":"https://koenig-media.raywenderlich.com/uploads/2022/03/DocumentingKotlinCode-twitter.png"},"git":{},"readingTime":{"minutes":15.39,"words":4617},"filePathRelative":"kodeco.com/30067669-documenting-kotlin-code-for-android-using-kdoc-and-dokka.md"}');export{P as comp,I as data};
