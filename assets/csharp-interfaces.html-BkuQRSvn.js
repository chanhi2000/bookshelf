import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as a,b,a as o,t as f,n as r,g as u,w as e,e as t,r as p,o as g}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/code-maze.com/csharp-interfaces/13-Loosely_Coupled_Objects.png",y={},W={id:"frontmatter-title-관련",tabindex:"-1"},I={class:"header-anchor",href:"#frontmatter-title-관련"},C={class:"table-of-contents"},x={class:"hint-container details"},F={class:"hint-container info"},j={href:"https://github.com/CodeMazeBlog/csharp-intermediate-module/tree/interfaces",target:"_blank",rel:"noopener noreferrer"};function _(d,n){const c=p("VPCard"),i=p("router-link"),m=p("SiteInfo"),l=p("RouteLink"),k=p("VPIcon");return g(),h("div",null,[s("h1",W,[s("a",I,[s("span",null,f(d.$frontmatter.title)+" 관련",1)])]),a(c,r(u({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",C,[s("ul",null,[s("li",null,[a(i,{to:"#defining-an-interface"},{default:e(()=>n[0]||(n[0]=[t("Defining an Interface")])),_:1,__:[0]})]),s("li",null,[a(i,{to:"#implementing-an-interface"},{default:e(()=>n[1]||(n[1]=[t("Implementing an Interface")])),_:1,__:[1]})]),s("li",null,[a(i,{to:"#referencing-classes-through-interfaces"},{default:e(()=>n[2]||(n[2]=[t("Referencing Classes Through Interfaces")])),_:1,__:[2]})]),s("li",null,[a(i,{to:"#using-an-interface-to-decouple-classes"},{default:e(()=>n[3]||(n[3]=[t("Using an Interface to Decouple Classes")])),_:1,__:[3]})]),s("li",null,[a(i,{to:"#working-with-multiple-interfaces"},{default:e(()=>n[4]||(n[4]=[t("Working with Multiple Interfaces")])),_:1,__:[4]})]),s("li",null,[a(i,{to:"#explicit-interface-implementation"},{default:e(()=>n[5]||(n[5]=[t("Explicit Interface Implementation")])),_:1,__:[5]})]),s("li",null,[a(i,{to:"#conclusion"},{default:e(()=>n[6]||(n[6]=[t("Conclusion")])),_:1,__:[6]})])])]),n[33]||(n[33]=s("hr",null,null,-1)),a(m,{name:"C# Intermediate - Interfaces",desc:"In this article you are going to learn about Interfaces in C#, how to define them, implement them, work with multiple interfaces and more...",url:"https://code-maze.com/csharp-interfaces/",logo:"/assets/image/code-maze.com/favicon.png",preview:"/assets/image/code-maze.com/csharp-interfaces/banner.png"}),n[34]||(n[34]=s("p",null,"Inheriting from a class is a powerful mechanism, but the real inheritance power comes from an interface. An interface provides the members that a class that inherits from an interface must implement.",-1)),n[35]||(n[35]=s("p",null,"We can look at the interface as a contract which states that a class that implements an interface must implement all the members from it.",-1)),s("details",x,[n[20]||(n[20]=s("summary",null,"This article is part of the series",-1)),s("ul",null,[s("li",null,[a(l,{to:"/code-maze.com/csharp-classes-constructors.html"},{default:e(()=>n[7]||(n[7]=[s("strong",null,"Classes and Constructors",-1)])),_:1,__:[7]})]),s("li",null,[a(l,{to:"/code-maze.com/csharp-properties.html"},{default:e(()=>n[8]||(n[8]=[s("strong",null,"Properties",-1)])),_:1,__:[8]})]),s("li",null,[a(l,{to:"/code-maze.com/csharp-static-members-constants-extension-methods.html"},{default:e(()=>n[9]||(n[9]=[s("strong",null,"Static Members, Constants, and Extension Methods",-1)])),_:1,__:[9]})]),s("li",null,[a(l,{to:"/code-maze.com/csharp-anonymous-nullable-types.html"},{default:e(()=>n[10]||(n[10]=[s("strong",null,"Anonymous and Nullable Types",-1)])),_:1,__:[10]})]),s("li",null,[a(l,{to:"/code-maze.com/csharp-structures.html"},{default:e(()=>n[11]||(n[11]=[s("strong",null,"Structures",-1)])),_:1,__:[11]})]),s("li",null,[a(l,{to:"/code-maze.com/csharp-enumerations.html"},{default:e(()=>n[12]||(n[12]=[s("strong",null,"Enumerations",-1)])),_:1,__:[12]})]),s("li",null,[a(l,{to:"/code-maze.com/csharp-inheritance.html"},{default:e(()=>n[13]||(n[13]=[s("strong",null,"Inheritance",-1)])),_:1,__:[13]})]),n[14]||(n[14]=s("li",null,"Interfaces (Current article)",-1))]),o(" - [**Interfaces**](/code-maze.com/csharp-interfaces.md) "),s("ul",null,[s("li",null,[a(l,{to:"/code-maze.com/csharp-abstract-classes.html"},{default:e(()=>n[15]||(n[15]=[s("strong",null,"Abstract Classes",-1)])),_:1,__:[15]})]),s("li",null,[a(l,{to:"/code-maze.com/csharp-generics.html"},{default:e(()=>n[16]||(n[16]=[s("strong",null,"Generics",-1)])),_:1,__:[16]})]),s("li",null,[a(l,{to:"/code-maze.com/csharp-queue-stack-hashtable.html"},{default:e(()=>n[17]||(n[17]=[s("strong",null,"Queue, Stack, Hashtable",-1)])),_:1,__:[17]})]),s("li",null,[a(l,{to:"/code-maze.com/cshart-generic-list-dictionary.html"},{default:e(()=>n[18]||(n[18]=[s("strong",null,"Generic List and Dictionary",-1)])),_:1,__:[18]})]),s("li",null,[a(l,{to:"/code-maze.com/csharp-delegates.html"},{default:e(()=>n[19]||(n[19]=[s("strong",null,"Delegates",-1)])),_:1,__:[19]})])])]),s("p",null,[n[22]||(n[22]=t("If you want to see the complete navigation of this tutorial, you can do that here ")),a(l,{to:"/code-maze.com/csharp-intermediate-tutorial-oop.html"},{default:e(()=>n[21]||(n[21]=[s("strong",null,"C# Intermediate Tutorial",-1)])),_:1,__:[21]}),n[23]||(n[23]=t("."))]),s("div",F,[n[29]||(n[29]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[27]||(n[27]=t("To download the source code, you can visit ")),s("a",j,[n[24]||(n[24]=t("Interfaces in C# Source Code (")),a(k,{icon:"iconfont icon-github"}),n[25]||(n[25]=s("code",null,"CodeMazeBlog/csharp-intermediate-module",-1)),n[26]||(n[26]=t(")"))]),n[28]||(n[28]=t("."))])]),n[36]||(n[36]=b(`<hr><h2 id="defining-an-interface" tabindex="-1"><a class="header-anchor" href="#defining-an-interface"><span>Defining an Interface</span></a></h2><p>To define an interface we need to use the <code>interface</code> keyword. It is quite similar to defining a class just we use another keyword. Inside that interface, we specify our members without access modifier and implementation. So, we just provide a declaration for members, an implementation is a job for a class that implements that interface:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">interface</span> <span class="token class-name">InterfaceName</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">returnType</span> <span class="token function">methodName</span><span class="token punctuation">(</span>paramType paramName<span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="implementing-an-interface" tabindex="-1"><a class="header-anchor" href="#implementing-an-interface"><span>Implementing an Interface</span></a></h2><p>To implement an interface, we declare a class or structure that inherits from the interface and implements <strong>all the members</strong> from it:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">InterfaceName</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//members implementation</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let’s see all of this through the example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IWriter</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlWriter</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IWriter</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Writing file in the XmlWriter class.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonWriter</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IWriter</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Writing file in the JsonWritter class.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As we can see, after our classes inherit from an interface, they must implement the member <code>WriteFile()</code>. Otherwise, we would get a compiler error.</p><p>When we implement an interface, we must ensure to provide method implementation by following these rules:</p><ul><li>The method names and return types must match exactly</li><li>Any parameters must match exactly</li><li>All the methods must be public during implementation. This is only not the case with the explicit interface implementation(we will talk about that a little later)</li></ul><p>A class can inherit from a class and implement an interface at the same time. But if this is the case, we must specify a base class first and then an interface comma-separated:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IWriter</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileBase</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Setting name in the base Writer class.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlWriter</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">FileBase</span><span class="token punctuation">,</span> <span class="token class-name">IWriter</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Writing file in the XmlWriter class.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Setting name in the XmlWriter class.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonWriter</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">FileBase</span><span class="token punctuation">,</span> <span class="token class-name">IWriter</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Writing file in the JsonWritter class.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Setting name in the JsonWriter class.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="referencing-classes-through-interfaces" tabindex="-1"><a class="header-anchor" href="#referencing-classes-through-interfaces"><span>Referencing Classes Through Interfaces</span></a></h2><p>In the same way that we can reference an object by using a class variable, we can define an object by using an interface variable:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">XmlWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">writer<span class="token punctuation">.</span><span class="token function">SetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//overridden method from a base class</span></span>
<span class="line">writer<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//method from an interface</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As we can see, all the methods are available through the <code>writer</code> object. But let’s now use an interface object for referencing action:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">IWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">writer<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//method from an interface</span></span>
<span class="line">writer<span class="token punctuation">.</span><span class="token function">SetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//error the SetName method is not part of the IWriter interface</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we use an interface to create an object, we can access only those members declared in that interface.</p><p>As we mentioned above, the interface provides a contract for the class that inherits from it. This is a great advantage of using interfaces, we can always be sure when a class inherits from our interface it will implement all of its members.</p><p>However, the interface implementation has even more advantages. One of them is object decoupling.</p><hr><h2 id="using-an-interface-to-decouple-classes" tabindex="-1"><a class="header-anchor" href="#using-an-interface-to-decouple-classes"><span>Using an Interface to Decouple Classes</span></a></h2><p>When one class depends on another class those classes are coupled. This is something we want to avoid because if something changes in Class A and Class B depending heavily on Class A, there is a great possibility that we would have to change Class B as well. Or at least, we won’t be sure if Class B still works properly. Consequently, we want our classes to be loosely coupled or “decoupled”.</p><p>Let’s see what would happen if we create our classes as strongly coupled:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlFileWriter</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">XmlWriter</span> _xmlWriter<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">XmlFileWriter</span><span class="token punctuation">(</span><span class="token class-name">XmlWriter</span> xmlWriter<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _xmlWriter <span class="token operator">=</span> xmlWriter<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _xmlWriter<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This <code>XmlFileWriter</code> is a class that has the purpose of writing to an xml file. Now we can instantiate our <code>XmlWriter</code> class, send the object through the <code>XmlFileWriter</code> constructor and call the <code>Write</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Program</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">XmlWriter</span> xmlWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">XmlFileWriter</span> fileWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlFileWriter</span><span class="token punctuation">(</span>xmlWriter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        fileWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ok, everything works great for now.</p><p>But we have a couple of problems here. Our <code>XmlFileWriter</code> class is strongly coupled to the <code>XmlWriter</code> class. If we change the <code>WriteFile</code> method inside the <code>XmlWriter</code> class, we must change it in the <code>XmlFileWriter</code> class as well. So, the change in one class leads to change in another. That’s not how we want our code to work.</p><p>Another thing. We surely want to have the same behavior for our <code>JsonWriter</code> class. We can’t use this <code>XmlFileWriter</code> (because it accepts only the <code>XmlWriter</code> object), we must create another class and repeat all of our actions. This is pretty bad as well.</p><p>Finally, we can ask ourselves, if we need two classes for the same job. Why can’t we use just one? Well, that’s where interfaces come in.</p><p>Let’s modify the <code>XmlFileWriter</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileWriter</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IWriter</span> _writer<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">FileWriter</span><span class="token punctuation">(</span><span class="token class-name">IWriter</span> writer<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _writer <span class="token operator">=</span> writer<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _writer<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Excellent. This is so much better.</p><p>Now our class name tells us that this class doesn’t write only xml files. Furthermore, we are not restricting our constructor to accept just <code>XmlWriter</code> class, but all the classes that inherit from the <code>IWriter</code> interface. Our method <code>WriteFile</code> can’t be renamed now because of our interface <code>IWritter</code>, which states that all classes must implement a method with an identical name. We can see now that <code>FileWriter</code> class are decoupled from the <code>XmlWriter</code> or from the <code>JsonWriter</code>, and that we can send objects of both classes to the <code>FileWriter</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Program</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">XmlWriter</span> xmlWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">JsonWriter</span> jsonWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">FileWriter</span> fileWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileWriter</span><span class="token punctuation">(</span>xmlWriter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        fileWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        fileWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileWriter</span><span class="token punctuation">(</span>jsonWriter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        fileWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+w+`" alt="Decoupled objects - Interfaces in C#" tabindex="0" loading="lazy"><figcaption>Decoupled objects - Interfaces in C#</figcaption></figure><p>Isn’t this so much better?</p><p>Now, we have one class that does its job for any class that inherits from the <code>IWriter</code> interface.</p><p>This feature is well known as a Dependency Injection.</p><hr><h2 id="working-with-multiple-interfaces" tabindex="-1"><a class="header-anchor" href="#working-with-multiple-interfaces"><span>Working with Multiple Interfaces</span></a></h2><p>A class can inherit just from one base class, but it can implement multiple interfaces. The class must implement all the methods defined in those interfaces:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IFormatter</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FormatFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlWriter</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">FileBase</span><span class="token punctuation">,</span> <span class="token class-name">IWriter</span><span class="token punctuation">,</span> <span class="token class-name">IFormatter</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Writing file in the XmlWriter class.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Setting name in the XmlWriter class.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FormatFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Formatting file in XmlWriter class.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="explicit-interface-implementation" tabindex="-1"><a class="header-anchor" href="#explicit-interface-implementation"><span>Explicit Interface Implementation</span></a></h2><p>As we already said, a class can implement more than one interface. It’s not unusual that two of those interfaces have a method with the same name, but we still need to implement them in our class. To do that we do not implement a method as we did before, but we need to state the name of the interface first and then the name of a method with parameters:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Interface1</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Interface2</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MethodExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleClass</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Interface1</span><span class="token punctuation">,</span> <span class="token class-name">Interface2</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> Interface1<span class="token punctuation">.</span><span class="token function">MethodExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> Interface2<span class="token punctuation">.</span><span class="token function">MethodExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As we can see, we are not using an access modifier in the method implementation.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, we have learned:</p><ul><li>How to define and implement an interface</li><li>How to reference a class through the interface</li><li>The way to decouple our objects with interfaces and dependency injection</li><li>To explicitly implement our interfaces</li></ul>`,57)),s("p",null,[n[31]||(n[31]=t("In the next article, we are going to talk about ")),a(l,{to:"/code-maze.com/csharp-abstract-classes.html"},{default:e(()=>n[30]||(n[30]=[s("strong",null,"Abstract Classes in C#",-1)])),_:1,__:[30]}),n[32]||(n[32]=t("."))]),o(" TODO: add ARTICLE CARD "),a(c,r(u({title:"C# Intermediate - Interfaces",desc:"In this article you are going to learn about Interfaces in C#, how to define them, implement them, work with multiple interfaces and more...",link:"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-interfaces.html",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16)])}const T=v(y,[["render",_]]),S=JSON.parse('{"path":"/code-maze.com/csharp-interfaces.html","title":"C# Intermediate - Interfaces","lang":"en-US","frontmatter":{"lang":"en-US","title":"C# Intermediate - Interfaces","description":"Article(s) > C# Intermediate - Interfaces","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","code-maze.com","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C# Intermediate - Interfaces\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-interfaces/13-Loosely_Coupled_Objects.png\\"],\\"datePublished\\":\\"2018-10-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marinko Spasojević\\",\\"url\\":\\"https://code-maze.com/author/marinko/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-interfaces.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"C# Intermediate - Interfaces"}],["meta",{"property":"og:description","content":"Article(s) > C# Intermediate - Interfaces"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-interfaces/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-interfaces/banner.png"}],["meta",{"name":"twitter:image:alt","content":"C# Intermediate - Interfaces"}],["meta",{"property":"article:author","content":"Marinko Spasojević"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2018-10-12T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > C# Intermediate - Interfaces"},{"property":"og:description","content":"C# Intermediate - Interfaces"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-interfaces.html"}]],"prev":"/programming/cs/articles/README.md","date":"2018-10-12T00:00:00.000Z","isOriginal":false,"author":[{"name":"Marinko Spasojević","url":"https://code-maze.com/author/marinko/"}],"cover":"/assets/image/code-maze.com/csharp-interfaces/banner.png"},"git":{},"readingTime":{"minutes":5.4,"words":1621},"filePathRelative":"code-maze.com/csharp-interfaces.md","copyright":{"author":"Marinko Spasojević"}}');export{T as comp,S as data};
