import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as n,f as t,b as l,a as b,t as f,n as p,g as c,w as s,e as a,r,o as v}from"./app-BVguHYKu.js";const k={},w={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},G={class:"hint-container tip"},D={href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://hub.docker.com/r/library/golang/tags/",target:"_blank",rel:"noopener noreferrer"},I={href:"http://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5",target:"_blank",rel:"noopener noreferrer"},O={class:"hint-container note"},A={href:"https://github.com/aaronlehmann",target:"_blank",rel:"noopener noreferrer"},S={href:"https://twitter.com/stevvooe",target:"_blank",rel:"noopener noreferrer"},P={href:"https://twitter.com/s0ulshake",target:"_blank",rel:"noopener noreferrer"};function C(u,e){const d=r("VPCard"),o=r("router-link"),h=r("SiteInfo"),i=r("VPIcon");return v(),m("div",null,[n("h1",w,[n("a",y,[n("span",null,f(u.$frontmatter.title)+" 관련",1)])]),t(d,p(c({title:"Docker > Article(s)",desc:"Article(s)",link:"/devops/docker/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",x,[n("ul",null,[n("li",null,[t(o,{to:"#go-without-go"},{default:s(()=>e[0]||(e[0]=[a("Go without go")])),_:1,__:[0]}),n("ul",null,[n("li",null,[t(o,{to:"#compiling-a-program-in-a-container"},{default:s(()=>e[1]||(e[1]=[a("Compiling a program in a container")])),_:1,__:[1]})]),n("li",null,[t(o,{to:"#running-our-program-in-a-container"},{default:s(()=>e[2]||(e[2]=[a("Running our program in a container")])),_:1,__:[2]})]),n("li",null,[t(o,{to:"#running-in-a-throwaway-container"},{default:s(()=>e[3]||(e[3]=[a("Running in a throwaway container")])),_:1,__:[3]})]),n("li",null,[t(o,{to:"#using-a-different-version-of-go"},{default:s(()=>e[4]||(e[4]=[a("Using a different version of Go")])),_:1,__:[4]})]),n("li",null,[t(o,{to:"#installing-on-our-system"},{default:s(()=>e[5]||(e[5]=[a("Installing on our system")])),_:1,__:[5]})]),n("li",null,[t(o,{to:"#cross-compilation"},{default:s(()=>e[6]||(e[6]=[a("Cross-compilation")])),_:1,__:[6]})]),n("li",null,[t(o,{to:"#installing-straight-to-the-path"},{default:s(()=>e[7]||(e[7]=[a("Installing straight to the $PATH")])),_:1,__:[7]})])])]),n("li",null,[t(o,{to:"#building-lean-images"},{default:s(()=>e[8]||(e[8]=[a("Building lean images")])),_:1,__:[8]}),n("ul",null,[n("li",null,[t(o,{to:"#the-scratch-image"},{default:s(()=>e[9]||(e[9]=[a("The scratch image")])),_:1,__:[9]})]),n("li",null,[t(o,{to:"#building-something-without-pushing-to-github"},{default:s(()=>e[10]||(e[10]=[a("Building something without pushing to GitHub")])),_:1,__:[10]})])])]),n("li",null,[t(o,{to:"#the-special-case-of-the-net-package-and-cgo"},{default:s(()=>e[11]||(e[11]=[a("The special case of the net package and CGo")])),_:1,__:[11]}),n("ul",null,[n("li",null,[t(o,{to:"#re-using-another-distro-s-libc"},{default:s(()=>e[12]||(e[12]=[a("Re-using another distro’s libc")])),_:1,__:[12]})]),n("li",null,[t(o,{to:"#bring-your-own-libc"},{default:s(()=>e[13]||(e[13]=[a("Bring your own libc")])),_:1,__:[13]})]),n("li",null,[t(o,{to:"#producing-static-binaries-with-netgo"},{default:s(()=>e[14]||(e[14]=[a("Producing static binaries with netgo")])),_:1,__:[14]})])])]),n("li",null,[t(o,{to:"#the-special-case-of-ssl-certificates"},{default:s(()=>e[15]||(e[15]=[a("The special case of SSL certificates")])),_:1,__:[15]}),n("ul",null,[n("li",null,[t(o,{to:"#installing-the-ssl-certificates"},{default:s(()=>e[16]||(e[16]=[a("Installing the SSL certificates")])),_:1,__:[16]})])])]),n("li",null,[t(o,{to:"#wrapping-it-up"},{default:s(()=>e[17]||(e[17]=[a("Wrapping it up")])),_:1,__:[17]})])])]),e[71]||(e[71]=n("hr",null,null,-1)),t(h,{name:"Docker + Golang =",desc:"Learn from Docker experts to simplify and advance your app development and management with Docker. Stay up to date on Docker events and new version",url:"https://docker.com/blog/docker-golang",logo:"https://docker.com/app/uploads/2024/02/cropped-docker-logo-favicon-192x192.png",preview:"https://docker.com/app/uploads/2024/02/docker-default-meta-image-1110x583.png"}),e[72]||(e[72]=l(`<p>This is a short collection of tips and tricks showing how Docker can be useful when working with Go code. For instance, I’ll show you how to compile Go code with different versions of the Go toolchain, how to cross-compile to a different platform (and test the result!), or how to produce really small container images.</p><p>The following article assumes that you have Docker installed on your system. It doesn’t have to be a recent version (we’re not going to use any fancy feature here).</p><hr><h2 id="go-without-go" tabindex="-1"><a class="header-anchor" href="#go-without-go"><span>Go without go</span></a></h2><blockquote><p>… And by that, we mean “Go without installing <code>go</code>”.</p></blockquote><p>If you write Go code, or if you have even the slightest interest into the Go language, you certainly have the Go compiler and toolchain installed, so you might be wondering “what’s the point?”; but there are a few scenarios where you want to compile Go without installing Go.</p><ul><li>You still have this old Go 1.2 on your machine (that you can’t or won’t upgrade), and you have to work on this codebase that requires a newer version of the toolchain.</li><li>You want to play with cross compilation features of Go 1.5 (for instance, to make sure that you can create OS X binaries from a Linux system).</li><li>You want to have multiple versions of Go side-by-side, but don’t want to completely litter your system.</li><li>You want to be 100% sure that your project and all its dependencies download, build, and run fine on a clean system.</li></ul><p>If any of this is relevant to you, then let’s call Docker to the rescue!</p><h3 id="compiling-a-program-in-a-container" tabindex="-1"><a class="header-anchor" href="#compiling-a-program-in-a-container"><span>Compiling a program in a container</span></a></h3><p>When you have installed Go, you can do <code>go get -v github.com/user/repo</code>to download, build, and install a library. (The <code>-v</code>flag is just here for verbosity, you can remove it if you prefer your toolchain to be swift and silent!)</p><p>You can also do <code>go get github.com/user/repo/...</code>(yes, that’s three dots) to download, build, and install all the things in that repo (including libraries and binaries).</p><p>We can do that in a container!</p><p>Try this:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run golang go get <span class="token parameter variable">-v</span> github.com/golang/example/hello/<span class="token punctuation">..</span>.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This will pull the golangimage (unless you have it already; then it will start right away), and create a container based on that image. In that container, gowill download a little “hello world” example, build it, and install it. But it will install it in the container … So how do we run that program now?</p><h3 id="running-our-program-in-a-container" tabindex="-1"><a class="header-anchor" href="#running-our-program-in-a-container"><span>Running our program in a container</span></a></h3><p>One solution is to committhe container that we just built, i.e. “freeze” it into a new image:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> commit <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-lq</span><span class="token variable">)</span></span>awesomeness</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Note: <code>docker ps -lq</code>outputs the ID (and only the ID!) of the last container that was executed. If you are the only uesr on your machine, and if you haven’t created another container since the previous command, that container should be the one in which we just built the “hello world” example.</p><p>Now, we can run our program in a container based on the image that we just built:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run awesomeness hello</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The output should be <code>Hello, Go examples!</code>.</p>`,22)),n("div",G,[e[31]||(e[31]=n("p",{class:"hint-container-title"},"Bonus points",-1)),n("p",null,[e[19]||(e[19]=a("When creating the image with ")),e[20]||(e[20]=n("code",null,"docker commit",-1)),e[21]||(e[21]=a(", you can use the ")),e[22]||(e[22]=n("code",null,"--change",-1)),e[23]||(e[23]=a("flag to specify arbitrary ")),n("a",D,[t(i,{icon:"fa-brands fa-docker"}),e[18]||(e[18]=n("code",null,"Dockerfile",-1))]),e[24]||(e[24]=a("commands. For instance, you could use a ")),e[25]||(e[25]=n("code",null,"CMD",-1)),e[26]||(e[26]=a("or ")),e[27]||(e[27]=n("code",null,"ENTRYPOINT",-1)),e[28]||(e[28]=a("command so that ")),e[29]||(e[29]=n("code",null,"docker run awesomeness",-1)),e[30]||(e[30]=a("automatically executes hello."))])]),e[73]||(e[73]=l(`<h3 id="running-in-a-throwaway-container" tabindex="-1"><a class="header-anchor" href="#running-in-a-throwaway-container"><span>Running in a throwaway container</span></a></h3><p>What if we don’t want to create an extra image just to run this Go program?</p><p>We got you covered:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> golang <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token punctuation">\\</span>  </span>
<span class="line"><span class="token string">&quot;go get github.com/golang/example/hello/... &amp;&amp; exec hello&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Wait a minute, what are all those bells and whistles?</p><ul><li><code>--rm</code>tells to the Docker CLI to automatically issue a <code>docker rm</code>command once the container exits. That way, we don’t leave anything behind ourselves.</li><li>We chain together the build step (<code>go get</code>) and the execution step (<code>exec hello</code>) using the shell logical operator <code>&amp;&amp;</code>. If you’re not a shell aficionado, <code>&amp;&amp;</code>means “and”. It will run the first part <code>go get...</code>, and if (and only if!) that part is successful, it will run the second part (<code>exec hello</code>). If you wonder why this is like that: it works like a lazy <code>and</code>evaluator, which needs to evaluate the right hand side only if the left hand side evaluates to <code>true</code>.</li><li>We pass our commands to <code>sh -c</code>, because if we were to simply do <code>docker run golang &quot;go get ... &amp;&amp; hello&quot;</code>, Docker would try to execute the program named <code>go SPACE get SPACE etc</code>.and that wouldn’t work. So instead, we start a shell and instruct the shell to execute the command sequence.</li><li>We use <code>exec hello</code>instead of <code>hello</code>: this will replace the current process (the shell that we started) with the <code>hello</code>program. This ensures that <code>hello</code>will be PID 1 in the container, instead of having the shell as PID 1 and <code>hello</code>as a child process. This is totally useless for this tiny example, but when we will run more useful programs, this will allow them to receive external signals properly, since external signals are delivered to PID 1 of the container. What kind of signal, you might be wondering? A good example is <code>docker stop</code>, which sends <code>SIGTERM</code>to PID 1 in the container.</li></ul><h3 id="using-a-different-version-of-go" tabindex="-1"><a class="header-anchor" href="#using-a-different-version-of-go"><span>Using a different version of Go</span></a></h3><p>When you use the <code>golang</code> image, Docker expands that to <code>golang:latest,</code> which (as you might guess) will map to the latest version available on the Docker Hub.</p><p>If you want to use a specific version of Go, that’s very easy: specify that version as a tagafter the image name.</p><p>For instance, to use Go 1.5, change the example above to replace <code>golang</code>with <code>golang:1.5</code>:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> golang:1.5 <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token punctuation">\\</span></span>
<span class="line"><span class="token string">&quot;go get github.com/golang/example/hello/... &amp;&amp; exec hello&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,11)),n("p",null,[e[33]||(e[33]=a("You can see all the versions (and variants) available on the ")),n("a",T,[t(i,{icon:"fa-brands fa-docker"}),e[32]||(e[32]=a("Golang image page"))]),e[34]||(e[34]=a("on the Docker Hub."))]),e[74]||(e[74]=l(`<h3 id="installing-on-our-system" tabindex="-1"><a class="header-anchor" href="#installing-on-our-system"><span>Installing on our system</span></a></h3><p>OK, so what if we want to run the compiled program on our system, instead of in a container?</p><p>We could copy the compiled binary out of the container. Note, however, that this will work only if our container architecture matches our host architecture; in other words, if we run Docker on Linux. (I’m leaving out people who might be running Windows Containers!)</p><p>The easiest way to get the binary out of the container is to map the <code>$GOPATH/bin</code>directory to a local directory. In the <code>golang</code>container, <code>$GOPATH</code>is <code>/go.</code> So we can do the following:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-v</span> /tmp/bin:/go/bin <span class="token punctuation">\\</span></span>
<span class="line">golang go get github.com/golang/example/hello/<span class="token punctuation">..</span>.</span>
<span class="line">/tmp/bin/hello</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you are on Linux, you should see the <code>Hello, Go examples!</code>message. But if you are, for instance, on a Mac, you will probably see:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">-bash:  </span>
<span class="line">/tmp/test/hello: cannot execute binary file</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><p>What can we do about it?</p><h3 id="cross-compilation" tabindex="-1"><a class="header-anchor" href="#cross-compilation"><span>Cross-compilation</span></a></h3>`,9)),n("p",null,[e[36]||(e[36]=a("Go 1.5 comes with ")),n("a",I,[t(i,{icon:"fas fa-globe"}),e[35]||(e[35]=a("outstanding out-of-the-box cross-compilation abilities"))]),e[37]||(e[37]=a(", so if your container operating system and/or architecture doesn’t match your system’s, it’s no problem at all!"))]),e[75]||(e[75]=l(`<p>To enable cross-compilation, you need to set <code>GOOS</code>and/or <code>GOARCH</code>.</p><p>For instance, assuming that you are on a 64 bits Mac:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-e</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>darwin <span class="token parameter variable">-e</span> <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 <span class="token parameter variable">-v</span> /tmp/crosstest:/go/bin <span class="token punctuation">\\</span></span>
<span class="line">golang go get github.com/golang/example/hello/<span class="token punctuation">..</span>.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The output of cross-compilation is not directly in <code>$GOPATH/bin</code>, but in <code>$GOPATH/bin/$GOOS_$GOARCH.</code> In other words, to run the program, you have to execute <code>/tmp/crosstest/darwin_amd64/hello.</code></p><h3 id="installing-straight-to-the-path" tabindex="-1"><a class="header-anchor" href="#installing-straight-to-the-path"><span>Installing straight to the $PATH</span></a></h3>`,5)),n("p",null,[e[38]||(e[38]=a("If you are on Linux, you can even install directly to your system ")),t(i,{icon:"fas fa-folder-open"}),e[39]||(e[39]=n("code",null,"bin",-1)),e[40]||(e[40]=a("directories:"))]),e[76]||(e[76]=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-v</span> /usr/local/bin:/go/bin <span class="token punctuation">\\</span></span>
<span class="line">golang get github.com/golang/example/hello/<span class="token punctuation">..</span>.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n("p",null,[e[41]||(e[41]=a("However, on a Mac, trying to use ")),t(i,{icon:"fas fa-folder-open"}),e[42]||(e[42]=n("code",null,"/usr",-1)),e[43]||(e[43]=a("as a volume will not mount your Mac’s filesystem to the container. It will mount the ")),t(i,{icon:"fas fa-folder-open"}),e[44]||(e[44]=n("code",null,"/usr",-1)),e[45]||(e[45]=a("directory of the Moby VM (the small Linux VM hidden behind the Docker whale icon in your toolbar)."))]),n("p",null,[e[46]||(e[46]=a("You can, however, use ")),t(i,{icon:"fas fa-folder-open"}),e[47]||(e[47]=n("code",null,"/tmp",-1)),e[48]||(e[48]=a(" or something in your home directory, and then copy it from there."))]),e[77]||(e[77]=l(`<hr><h2 id="building-lean-images" tabindex="-1"><a class="header-anchor" href="#building-lean-images"><span>Building lean images</span></a></h2><p>The Go binaries that we produced with this technique are statically linked. This means that they embed all the code that they need to run, including all dependencies. This contrasts withdynamically linkedprograms, which don’t contain some basic libraries (like the “libc”) and use a system-wide copy which is resolved at run time.</p><p>This means that we can drop our Go compiled program in a container, without anything else, and it should work.</p><p>Let’s try this!</p><h3 id="the-scratch-image" tabindex="-1"><a class="header-anchor" href="#the-scratch-image"><span>The scratch image</span></a></h3><p>There is a special image in the Docker ecosystem: <code>scratch</code>. This is an empty image. It doesn’t need to be created or downloaded, since by definition, it is empty.</p><p>Let’s create a new, empty directory for our new Go lean image.</p><p>In this new directory, create the following Dockerfile:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> scratch</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./hello /hello</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;/hello&quot;</span>]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This means:</p><ul><li>start from scratch(an empty image),</li><li>add the <code>hello</code>file to the root of the image,</li><li>define this <code>hello</code>program to be the default thing to execute when starting this container.</li></ul><p>Then, produce our <code>hello</code>binary as follows:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>:/go/bin <span class="token parameter variable">--rm</span> <span class="token punctuation">\\</span></span>
<span class="line">golang go get github.com/golang/example/hello/<span class="token punctuation">..</span>.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Note: we don’t need to set <code>GOOS</code>and <code>GOARCH</code>here, because precisely, we want a binary that will run in a Docker container, not on our host system. So leave those variables alone!</p><p>Then, we can build the image:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> hello <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And test it:</p><div class="hint-container note"><p class="hint-container-title">Note</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run hello</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This should display Hello, Go examples!.</p></div><p>Last but not least, check the image’s size:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> images hello</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If we did everything right, this image should be about 2 MB. Not bad!</p><h3 id="building-something-without-pushing-to-github" tabindex="-1"><a class="header-anchor" href="#building-something-without-pushing-to-github"><span>Building something without pushing to GitHub</span></a></h3><p>Of course, if we had to push to GitHub each time we wanted to compile, we would waste a lot of time.</p>`,24)),n("p",null,[e[49]||(e[49]=a("When you want to work on a piece of code and build it within a container, you can mount a local directory to ")),t(i,{icon:"fas fa-folder-open"}),e[50]||(e[50]=n("code",null,"/go",-1)),e[51]||(e[51]=a("in the ")),e[52]||(e[52]=n("code",null,"golang",-1)),e[53]||(e[53]=a("container, so that the ")),e[54]||(e[54]=n("code",null,"$GOPATH",-1)),e[55]||(e[55]=a("is persisted across invocations: ")),e[56]||(e[56]=n("code",null,"docker run -v $HOME/go:/go golang ....",-1))]),e[78]||(e[78]=l(`<p>But you can also mount local directories to specific paths, to “override” some packages (the ones that you have edited locally). Here is a complete example:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment"># Adapt the two following environment variables if you are not running on a Mac</span></span>
<span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>darwin <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64</span>
<span class="line"><span class="token function">mkdir</span> go-and-docker-is-love</span>
<span class="line"><span class="token builtin class-name">cd</span> go-and-docker-is-love</span>
<span class="line"><span class="token function">git</span> clone git://github.com/golang/example</span>
<span class="line"><span class="token function">cat</span> example/hello/hello.go</span>
<span class="line"><span class="token function">sed</span> <span class="token parameter variable">-i</span> .bak s/olleH/eyB/ example/hello/hello.go</span>
<span class="line"></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>/example:/go/src/github.com/golang/example <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>:/go/bin/<span class="token variable">\${GOOS}</span>_<span class="token variable">\${GOARCH}</span><span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-e</span> GOOS <span class="token parameter variable">-e</span> GOARCH <span class="token punctuation">\\</span></span>
<span class="line">golang go get github.com/golang/example/hello/<span class="token punctuation">..</span>.</span>
<span class="line">./hello</span>
<span class="line"><span class="token comment"># Should display &quot;Bye, Go examples!&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="the-special-case-of-the-net-package-and-cgo" tabindex="-1"><a class="header-anchor" href="#the-special-case-of-the-net-package-and-cgo"><span>The special case of the net package and CGo</span></a></h2><p>Before diving into real-world Go code, we have to confess something: we lied a little bit about the static binaries. If you are using CGo, or if you are using the <code>net</code>package, the Go linker will generate a dynamic binary. In the case of the <code>net</code> package (which a lotof useful Go programs out there are using indeed!), the main culprit is the DNS resolver. Most systems out there have a fancy, modular name resolution system (like the Name Service Switch) which relies on plugins which are, technically, dynamic libraries. By default, Go will try to use that; and to do so, it will produce dynamic libraries.</p><p>How do we work around that?</p><h3 id="re-using-another-distro-s-libc" tabindex="-1"><a class="header-anchor" href="#re-using-another-distro-s-libc"><span>Re-using another distro’s <code>libc</code></span></a></h3><p>One solution is to use a base image that hasthe essential libraries needed by those Go programs to function. Almost any “regular” Linux distro based on the GNU <code>libc</code> will do the trick. So instead of <code>FROM scratch</code>, you would use <code>FROM debian</code>or <code>FROM fedora</code>, for instance. The resulting image will be much bigger now; but at least, the bigger bits will be shared with other images on your system.</p><p>Note: you cannotuse Alpine in that case, since Alpine is using the musl library instead of the GNU <code>libc</code>.</p><h3 id="bring-your-own-libc" tabindex="-1"><a class="header-anchor" href="#bring-your-own-libc"><span>Bring your own <code>libc</code></span></a></h3><p>Another solution is to surgically extract the files needed, and place them in your container with <code>COPY.</code> The resulting container will be small. However, this extraction process leaves the author with the uneasy impression of a really dirty job, and they would rather not go into more details.</p><p>If you want to see for yourself, look around <code>ldd</code>and the Name Service Switch plugins mentioned earlier.</p><h3 id="producing-static-binaries-with-netgo" tabindex="-1"><a class="header-anchor" href="#producing-static-binaries-with-netgo"><span>Producing static binaries with netgo</span></a></h3><p>We can also instruct Go to notuse the system’s <code>libc</code>, and substitute Go’s <code>netgo</code> library, which comes with a native DNS resolver.</p><p>To use it, just add <code>-tags netgo -installsuffix netgo</code>to the <code>go get</code>options.</p><ul><li><code>-tags netgo</code>instructs the toolchain to use netgo.</li><li><code>-installsuffix netgo</code>will make sure that the resulting libraries (if any) are placed in a different, non-default directory. This will avoid conflicts between code built with and without netgo, if you do multiple <code>go get</code>(or <code>go build</code>) invocations. If you build in containers like we have shown so far, this is not strictly necessary, since there will be no other Go code compiled in this container, ever; but it’s a good idea to get used to it, or at least know that this flag exists.</li></ul><hr><h2 id="the-special-case-of-ssl-certificates" tabindex="-1"><a class="header-anchor" href="#the-special-case-of-ssl-certificates"><span>The special case of SSL certificates</span></a></h2><p>There is one more thing that you have to worry about if your code has to validate SSL certificates; for instance if it will connect to external APIs over HTTPS. In that case, you need to put the root certificates in your container too, because Go won’t bundle those into your binary.</p><h3 id="installing-the-ssl-certificates" tabindex="-1"><a class="header-anchor" href="#installing-the-ssl-certificates"><span>Installing the SSL certificates</span></a></h3><p>Three again, there are multiple options available, but the easiest one is to use a package from an existing distribution.</p>`,21)),n("p",null,[e[57]||(e[57]=a("Alpine is a good candidate here because it’s so tiny. The following ")),t(i,{icon:"fa-brands fa-docker"}),e[58]||(e[58]=n("code",null,"Dockerfile",-1)),e[59]||(e[59]=a("will give you a base image that is small, but has an up-to-date bundle of root certificates:"))]),e[79]||(e[79]=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">FROM alpine:3.4</span>
<span class="line">RUN apk <span class="token function">add</span> --no-cache ca-certificates apache2-utils</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Check it out; the resulting image is only 6 MB!</p><p>Note: the <code>--no-cache</code>option tells <code>apk</code>(the Alpine package manager) to get the list of available packages from Alpine’s distribution mirrors, without saving it to disk. You might have seen Dockerfiles doing something like <code>apt-get update &amp;&amp; apt-get install ... &amp;&amp; rm -rf /var/cache/apt/*</code>; this achieves something equivalent (i.e. not leave package caches in the final image) with a single flag.</p><p>As an added bonus,putting your application in a container based on the Alpine image gives you access to a ton of really useful tools: now you can drop a shell into your container and poke around while it’s running, if you need to!</p><hr><h2 id="wrapping-it-up" tabindex="-1"><a class="header-anchor" href="#wrapping-it-up"><span>Wrapping it up</span></a></h2><p>We saw how Docker can help us to compile Go code in a clean, isolated environment; how to use different versions of the Go toolchain; and how to cross-compile between different operating systems and platforms.</p><p>We also saw how Go can help us to build small, lean container images for Docker, and described a number of associated subtleties linked (no pun intended) to static libraries and network dependencies.</p><p>Beyond the fact that Go is really good fit for a project that Docker, we hope that we showed you how Go and Docker can benefit from each other and work really well together!</p>`,9)),n("div",O,[e[69]||(e[69]=n("p",{class:"hint-container-title"},"Acknowledgements",-1)),e[70]||(e[70]=n("p",null,"This was initially presented during the hack day at GopherCon 2016. I would like to thank all the people who proofread this material and gave ideas and suggestions to make it better; including but not limited to:",-1)),n("ul",null,[n("li",null,[n("a",A,[e[60]||(e[60]=a("Aaron Lehmann (")),t(i,{icon:"fa-brands fa-x-twitter"}),e[61]||(e[61]=n("code",null,"aaronlehmann",-1)),e[62]||(e[62]=a(")"))])]),n("li",null,[n("a",S,[e[63]||(e[63]=a("Stephen Day (")),t(i,{icon:"fa-brands fa-x-twitter"}),e[64]||(e[64]=n("code",null,"stevvooe",-1)),e[65]||(e[65]=a(")"))])]),n("li",null,[n("a",P,[e[66]||(e[66]=a("AJ Bowen (")),t(i,{icon:"fa-brands fa-x-twitter"}),e[67]||(e[67]=n("code",null,"s0ulshake",-1)),e[68]||(e[68]=a(")"))])])])]),e[80]||(e[80]=n("p",null,"All mistakes and typos are my own; all the good stuff is theirs! ☺",-1)),b(" TODO: add ARTICLE CARD "),t(d,p(c({title:"Docker + Golang =",desc:"Learn from Docker experts to simplify and advance your app development and management with Docker. Stay up to date on Docker events and new version",link:"https://chanhi2000.github.io/bookshelf/docker.com/docker-golang.html",logo:"https://docker.com/app/uploads/2024/02/cropped-docker-logo-favicon-192x192.png",background:"rgba(29,99,237,0.2)"})),null,16)])}const R=g(k,[["render",C]]),N=JSON.parse('{"path":"/docker.com/docker-golang.html","title":"Docker + Golang =","lang":"en-US","frontmatter":{"lang":"en-US","title":"Docker + Golang =","description":"Article(s) > Docker + Golang =","icon":"fa-brands fa-docker","category":["DevOps","Docker","Go","Article(s)"],"tag":["blog","docker.com","devops","docker","go","golang"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker + Golang =\\",\\"image\\":[\\"https://docker.com/app/uploads/2024/02/docker-default-meta-image-1110x583.png\\"],\\"datePublished\\":\\"2016-09-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jérôme Petazzoni\\",\\"url\\":\\"https://docker.com/author/jerome/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/docker.com/docker-golang.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Docker + Golang ="}],["meta",{"property":"og:description","content":"Article(s) > Docker + Golang ="}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://docker.com/app/uploads/2024/02/docker-default-meta-image-1110x583.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://docker.com/app/uploads/2024/02/docker-default-meta-image-1110x583.png"}],["meta",{"name":"twitter:image:alt","content":"Docker + Golang ="}],["meta",{"property":"article:author","content":"Jérôme Petazzoni"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"docker.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2016-09-15T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Docker + Golang ="},{"property":"og:description","content":"Docker + Golang ="},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/docker.com/docker-golang.html"}]],"prev":"/devops/docker/articles/README.md","date":"2016-09-15T00:00:00.000Z","isOriginal":false,"author":[{"name":"Jérôme Petazzoni","url":"https://docker.com/author/jerome/"}],"cover":"https://docker.com/app/uploads/2024/02/docker-default-meta-image-1110x583.png"},"git":{},"readingTime":{"minutes":9.81,"words":2942},"filePathRelative":"docker.com/docker-golang.md","copyright":{"author":"Jérôme Petazzoni"}}');export{R as comp,N as data};
