import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as f,d as s,f as e,b as o,a as b,t as h,n as d,g as m,w as t,e as a,r as u,o as y}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/blog.logrocket.com/react-useref/banner.png",R="/bookshelf/assets/image/blog.logrocket.com/react-useref/JBWjbwFw.png",x={},j={id:"frontmatter-title-관련",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-관련"},q={class:"table-of-contents"},S={href:"https://react.dev/reference/react/forwardRef",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/greensock/GSAP",target:"_blank",rel:"noopener noreferrer"},I={href:"https://codepen.io/c99rahul/pen/yyLbBrR",target:"_blank",rel:"noopener noreferrer"},T={href:"https://codepen.io/collection/BayjWJ",target:"_blank",rel:"noopener noreferrer"};function D(l,n){const k=u("VPCard"),p=u("router-link"),v=u("SiteInfo"),i=u("RouteLink"),c=u("CodePen"),r=u("VPIcon");return y(),f("div",null,[s("h1",j,[s("a",C,[s("span",null,h(l.$frontmatter.title)+" 관련",1)])]),e(k,d(m({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",q,[s("ul",null,[s("li",null,[e(p,{to:"#what-is-useref-in-react"},{default:t(()=>n[0]||(n[0]=[a("What is useRef in React?")])),_:1,__:[0]})]),s("li",null,[e(p,{to:"#react-useref-syntax"},{default:t(()=>n[1]||(n[1]=[a("React useRef syntax")])),_:1,__:[1]}),s("ul",null,[s("li",null,[e(p,{to:"#typescript-useref-syntax"},{default:t(()=>n[2]||(n[2]=[a("TypeScript useRef syntax")])),_:1,__:[2]})])])]),s("li",null,[e(p,{to:"#key-differences-between-useref-and-usestate"},{default:t(()=>n[3]||(n[3]=[a("Key differences between useRef and useState")])),_:1,__:[3]})]),s("li",null,[e(p,{to:"#when-to-use-useref-in-react"},{default:t(()=>n[4]||(n[4]=[a("When to use useRef in React")])),_:1,__:[4]}),s("ul",null,[s("li",null,[e(p,{to:"#accessing-dom-elements-withuseref"},{default:t(()=>n[5]||(n[5]=[a("Accessing DOM elements withuseRef")])),_:1,__:[5]})]),s("li",null,[e(p,{to:"#managing-timeouts-event-handlers-and-observers"},{default:t(()=>n[6]||(n[6]=[a("Managing timeouts, event handlers, and observers")])),_:1,__:[6]})]),s("li",null,[e(p,{to:"#storing-previous-state-or-props"},{default:t(()=>n[7]||(n[7]=[a("Storing previous state or props")])),_:1,__:[7]})])])]),s("li",null,[e(p,{to:"#when-to-avoid-using-useref"},{default:t(()=>n[8]||(n[8]=[a("When to avoid using useRef")])),_:1,__:[8]}),s("ul",null,[s("li",null,[e(p,{to:"#triggering-re-renders"},{default:t(()=>n[9]||(n[9]=[a("Triggering re-renders")])),_:1,__:[9]})]),s("li",null,[e(p,{to:"#storing-immutable-values"},{default:t(()=>n[10]||(n[10]=[a("Storing immutable values")])),_:1,__:[10]})]),s("li",null,[e(p,{to:"#managing-state-prop-dependents-event-handlers"},{default:t(()=>n[11]||(n[11]=[a("Managing state/prop-dependents event handlers")])),_:1,__:[11]})]),s("li",null,[e(p,{to:"#using-a-declarative-approach-to-manage-general-events"},{default:t(()=>n[12]||(n[12]=[a("Using a declarative approach to manage general events")])),_:1,__:[12]})])])]),s("li",null,[e(p,{to:"#react-useref-best-practices"},{default:t(()=>n[13]||(n[13]=[a("React useRef best practices")])),_:1,__:[13]}),s("ul",null,[s("li",null,[e(p,{to:"#use-the-current-property-for-access-and-modifications"},{default:t(()=>n[14]||(n[14]=[a("Use the current property for access and modifications")])),_:1,__:[14]})]),s("li",null,[e(p,{to:"#initialize-with-null-or-default-values"},{default:t(()=>n[15]||(n[15]=[a("Initialize with null or default values")])),_:1,__:[15]})]),s("li",null,[e(p,{to:"#conditional-checks"},{default:t(()=>n[16]||(n[16]=[a("Conditional checks")])),_:1,__:[16]})]),s("li",null,[e(p,{to:"#clean-up-timeouts-event-listeners-and-observers"},{default:t(()=>n[17]||(n[17]=[a("Clean up timeouts, event listeners, and observers")])),_:1,__:[17]})]),s("li",null,[e(p,{to:"#keep-dom-manipulations-simple"},{default:t(()=>n[18]||(n[18]=[a("Keep DOM manipulations simple")])),_:1,__:[18]})]),s("li",null,[e(p,{to:"#club-useref-with-forwardref-to-pass-refs-from-parent-to-child"},{default:t(()=>n[19]||(n[19]=[a("Club useRef with forwardRef to pass refs from parent to child")])),_:1,__:[19]})])])]),s("li",null,[e(p,{to:"#practical-use-cases-of-useref"},{default:t(()=>n[20]||(n[20]=[a("Practical use cases of useRef")])),_:1,__:[20]}),s("ul",null,[s("li",null,[e(p,{to:"#form-handling"},{default:t(()=>n[21]||(n[21]=[a("Form handling")])),_:1,__:[21]})]),s("li",null,[e(p,{to:"#managing-animations"},{default:t(()=>n[22]||(n[22]=[a("Managing animations")])),_:1,__:[22]})]),s("li",null,[e(p,{to:"#preserving-a-previous-state"},{default:t(()=>n[23]||(n[23]=[a("Preserving a previous state")])),_:1,__:[23]})]),s("li",null,[e(p,{to:"#detecting-clicks-outside-an-element"},{default:t(()=>n[24]||(n[24]=[a("Detecting clicks outside an element")])),_:1,__:[24]})]),s("li",null,[e(p,{to:"#input-autofocus"},{default:t(()=>n[25]||(n[25]=[a("Input autofocus")])),_:1,__:[25]})])])]),s("li",null,[e(p,{to:"#conclusion"},{default:t(()=>n[26]||(n[26]=[a("Conclusion")])),_:1,__:[26]})])])]),n[78]||(n[78]=s("hr",null,null,-1)),e(v,{name:"How to use the React useRef Hook effectively",desc:"Learn how to use React useRef for managing references, avoiding re-renders, and applying best practices in functional components.",url:"https://blog.logrocket.com/react-useref",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/react-useref/banner.png"}),n[79]||(n[79]=o('<p>Functional components in React utilize built-in Hooks to implement stateful behavior and lifecycle methods. One of these Hooks is <code>useRef</code>, which is pretty convenient for referencing values in React.</p><figure><img src="'+w+'" alt="React Useref Hooks" tabindex="0" loading="lazy"><figcaption>React Useref Hooks</figcaption></figure><p>In this guide, we will examine the <code>useRef</code> Hook in React, learn how to use it, see some of its applications, and discuss best practices to ensure its consistent implementation in future React apps.</p><hr><h2 id="what-is-useref-in-react" tabindex="-1"><a class="header-anchor" href="#what-is-useref-in-react"><span>What is <code>useRef</code> in React?</span></a></h2><p>When working with React, we should always utilize built-in library tools, which are created and optimized for specific scenarios. The <code>useRef</code> Hook is one such tool that helps us handle references to mutable values in React. It acts as a container storing a reference to a mutable value while persisting it between component re-renders.</p><p>The following flowchart illustrates the persistence of a referenced value with <code>useRef</code> without triggering any re-render to the corresponding component:</p><figure><img src="'+R+'" alt="Flowchart On Persistence Of Referenced Value " tabindex="0" loading="lazy"><figcaption>Flowchart On Persistence Of Referenced Value </figcaption></figure><p>In technical terms, the container here is called a mutable reference object, and the value it holds is called a reference.</p>',9)),s("p",null,[n[28]||(n[28]=a("If you are new to React, ")),e(i,{to:"/blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems.html"},{default:t(()=>n[27]||(n[27]=[s("strong",null,"this React Hooks cheat sheet",-1)])),_:1,__:[27]}),n[29]||(n[29]=a(" can teach you how to use all the major Hooks in React with practical examples."))]),n[80]||(n[80]=o(`<hr><h2 id="react-useref-syntax" tabindex="-1"><a class="header-anchor" href="#react-useref-syntax"><span>React <code>useRef</code> syntax</span></a></h2><p>When used, the <code>useRef</code> Hook returns a mutable object with a <code>current</code> property, which is a reference to the object’s current value.</p><p>Let’s understand <code>useRef</code> with an example, while also exploring its syntax and observing how it functions without triggering re-renders when its value changes:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> countRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">incrementCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    countRef<span class="token punctuation">.</span>current <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Current count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>countRef<span class="token punctuation">.</span>current<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Check the console <span class="token keyword">for</span> updates<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>incrementCount<span class="token punctuation">}</span><span class="token operator">&gt;</span>Increment<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above example, the <code>countRef</code> variable returns a mutable reference object with zero as its initial reference value. Using the object’s current property, this value is updated whenever the “increment” button is pressed:</p>`,6)),e(c,{user:"c99rahul","slug-hash":"MYWWdRx",title:"React useRef Counter example","default-tab":["css","result"],theme:l.$isDarkmode?"dark":"light"},null,8,["theme"]),n[81]||(n[81]=o(`<p>A change in the <code>countRef.current</code> property here will not re-render the corresponding <code>&lt;Counter/&gt;</code> component, and that’s why we are observing changes in the developer console in this example rather than in the UI.</p><h3 id="typescript-useref-syntax" tabindex="-1"><a class="header-anchor" href="#typescript-useref-syntax"><span>TypeScript <code>useRef</code> syntax</span></a></h3><p>When using TypeScript, it is important to specify the type of data a <code>useRef</code> object will hold. Here’s a quick snippet showing both simple and advanced TypeScript type specifications <code>useRef</code>:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">interface</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">SomeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> messageRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLInputElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> userRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>UserInfo<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;John Doe&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="key-differences-between-useref-and-usestate" tabindex="-1"><a class="header-anchor" href="#key-differences-between-useref-and-usestate"><span>Key differences between <code>useRef</code> and <code>useState</code></span></a></h2><p>Like <code>useRef</code>, the <code>useState</code> Hook also persists values, but there’s a subtle difference between them.<br> The major difference between these two Hooks is the basic philosophy of their functioning, which broadly defines their three main distinctions:</p><ul><li>The <code>useState</code> Hook always provides the current state value on every render, while the <code>useRef</code> Hook is designed to persist values across renders</li><li>A change triggered through <code>useState</code> always re-renders the related component, while a change in a <code>useRef</code> reference never changes the UI</li><li>With <code>useState</code>, we can’t change the state directly. Instead, we use a getter-setter pattern to mutate and manage values. With a <code>useRef</code> object, we can directly mutate the value by modifying the current property of the reference object whenever required</li></ul>`,8)),s("p",null,[n[31]||(n[31]=a("We now have a general understanding of how ")),n[32]||(n[32]=s("code",null,"useRef",-1)),n[33]||(n[33]=a(" differs fundamentally from ")),n[34]||(n[34]=s("code",null,"useState",-1)),n[35]||(n[35]=a(" and what it can achieve on its own. For a broader overview of this differentiation, you should see ")),e(i,{to:"/blog.logrocket.com/usestate-vs-useref.html"},{default:t(()=>n[30]||(n[30]=[s("strong",null,[a("this "),s("code",null,"useState"),a(" vs. "),s("code",null,"useRef"),a(" guide")],-1)])),_:1,__:[30]})]),n[82]||(n[82]=o(`<hr><h2 id="when-to-use-useref-in-react" tabindex="-1"><a class="header-anchor" href="#when-to-use-useref-in-react"><span>When to use <code>useRef</code> in React</span></a></h2><p>To identify the need for <code>useRef</code> in your components, determine whether or not a value or reference should persist without dealing with renders.</p><p>Let’s look at some general applications of <code>useRef</code> in React that can help you decide immediately if your component really needs it.</p><h3 id="accessing-dom-elements-withuseref" tabindex="-1"><a class="header-anchor" href="#accessing-dom-elements-withuseref"><span>Accessing DOM elements with<code>useRef</code></span></a></h3><p>The <code>useRef</code> Hook works great for handling imperative actions like DOM manipulations.</p><p>Instead of using JavaScript Web API methods, such as <code>querySelector</code> or <code>getElementById</code>, to select a DOM element in React, we utilize the <code>useRef</code> Hook to hold its reference.</p><p>This approach keeps the reference to that element intact across re-renders and makes things work smoothly without bypassing the virtual DOM, maintaining your app’s integrity.</p><p>Let’s access a DOM element with <code>useRef</code> and use this reference to get the name of the HTML tag it is built with:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">ElementTellingItsTagName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> elementRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>tagName<span class="token punctuation">,</span> setTagName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setTagName</span><span class="token punctuation">(</span>elementRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>elementRef<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      This element is created using a</span><span class="token punctuation">{</span><span class="token string">&quot; &quot;</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      &lt;</span><span class="token punctuation">{</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">&gt; tag. </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the empty array passed as a <code>useEffect</code> dependency ensures the side-effect runs only once after the component mounts and not on subsequent renders or unmounts:</p>`,11)),e(c,{user:"c99rahul","slug-hash":"bNGwYVX",title:"DOM element selection with useRef","default-tab":["css","result"],theme:l.$isDarkmode?"dark":"light"},null,8,["theme"]),n[83]||(n[83]=o(`<h3 id="managing-timeouts-event-handlers-and-observers" tabindex="-1"><a class="header-anchor" href="#managing-timeouts-event-handlers-and-observers"><span>Managing timeouts, event handlers, and observers</span></a></h3><p>Following the same path as storing references to DOM elements, we can also manage timeouts, event handlers, and observers with <code>useRef</code>, which serves different purposes.</p><p>Here’s a small example keeping reference of a timeout with <code>useRef</code>, so that we could clear it at the time of component cleanup. This is important from a memory management perspective:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">TimeoutExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> timeoutRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>message<span class="token punctuation">,</span> setMessage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;Waiting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    timeoutRef<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Timeout completed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Cleanup when component unmounts</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Managing an observer would be slightly different, where you keep references of both the target node and the observer attached to that node:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">IntersectionObserverExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> targetRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> observerRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    observerRef<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* Do something */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span> <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">0.1</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      observerRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>targetRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Clean up</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>observerRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        observerRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">...</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>targetRef<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        ...</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can also utilize <code>useRef</code> in managing event handlers that should not be recreated on component re-renders. Here’s a quick example:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">ClickTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> clickHandlerRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    clickHandlerRef<span class="token punctuation">.</span><span class="token function-variable function">current</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prevCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> prevCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> clickHandlerRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> clickHandlerRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Clicks: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="storing-previous-state-or-props" tabindex="-1"><a class="header-anchor" href="#storing-previous-state-or-props"><span>Storing previous state or props</span></a></h3><p>As discussed, <code>useRef</code> allows your React components to persist mutable values between re-renders. Let’s explore this with a simple example, where we persist the previous count value in a counter component with <code>useRef</code>:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> prevCountRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">updateCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">amount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">currentCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentCount <span class="token operator">+</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Set the state value as current reference value</span></span>
<span class="line">    prevCountRef<span class="token punctuation">.</span>current <span class="token operator">=</span> count<span class="token punctuation">;</span> </span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Current count: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>prevCountRef<span class="token punctuation">.</span>current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Previous count: </span><span class="token punctuation">{</span>prevCountRef<span class="token punctuation">.</span>current<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">updateCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">updateCount</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">+5</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11)),e(c,{user:"c99rahul","slug-hash":"ByawZJQ",title:"Event listeners with useRef","default-tab":["css","result"],theme:l.$isDarkmode?"dark":"light"},null,8,["theme"]),n[84]||(n[84]=o(`<p>Note that re-renders in the above example are triggered by changes in state and not in the <code>useRef</code> reference value. Without state variations, <code>prevCountRef</code>‘s value would update, but these updates would no longer reflect in the UI.</p><hr><h2 id="when-to-avoid-using-useref" tabindex="-1"><a class="header-anchor" href="#when-to-avoid-using-useref"><span>When to avoid using <code>useRef</code></span></a></h2><p>We now know the basics of <code>useRef</code> and the areas where it should be applied. Let’s also discuss some general scenarios where we should avoid it and consider better-suited alternatives.</p><h3 id="triggering-re-renders" tabindex="-1"><a class="header-anchor" href="#triggering-re-renders"><span>Triggering re-renders</span></a></h3><p>Consider using <code>useState</code> over <code>useRef</code> in cases where a change in the value must trigger the component to re-render:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// ❌ Avoid useRef for values that should trigger UI updates</span></span>
<span class="line"><span class="token keyword">const</span> countRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ Utilize useState instead for such cases</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="storing-immutable-values" tabindex="-1"><a class="header-anchor" href="#storing-immutable-values"><span>Storing immutable values</span></a></h3><p>Avoid implementing <code>useRef</code> to store values that are not expected to change at all. In such cases, consider using a JavaScript <code>const</code> variable outside the render instead. This is shown below:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">// ❌ Avoid storing an immutable value with useRef</span></span>
<span class="line"><span class="token keyword">const</span> piRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ Use the JavaScript const instead</span></span>
<span class="line"><span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="managing-state-prop-dependents-event-handlers" tabindex="-1"><a class="header-anchor" href="#managing-state-prop-dependents-event-handlers"><span>Managing state/prop-dependents event handlers</span></a></h3><p>When managing event handlers with <code>useRef</code>, make sure to examine whether or not your event handler depends on the state or any of the component props.</p><p>Let’s say the event handler depends on a prop or state variable. Instead of <code>useRef</code>, consider using the <code>useCallback</code> Hook for the event handler function to memoize the logic (which updates only when a dependency changes):</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> prev <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Handler depends on \`count\`</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>handleClick<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \`handleClick\` only changes when \`count\` changes</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This approach keeps the event-handling task in sync with the dependencies. It also improves the performance by preventing the recreation of event handler logic on every render.</p><h3 id="using-a-declarative-approach-to-manage-general-events" tabindex="-1"><a class="header-anchor" href="#using-a-declarative-approach-to-manage-general-events"><span>Using a declarative approach to manage general events</span></a></h3><p>React’s synthetic event system is capable of handling commonly used events intrinsically, which means you don’t necessarily have to handle those events with <code>useRef</code>.</p><p>Therefore, consider sticking to declarative event handling to manage events whenever possible. This avoids the unnecessary hassle of managing a reference for the event handler, attaching it to an event listener, and removing the listener at cleanup:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">Click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ❌ Avoid useRef to handle general events</span></span>
<span class="line">  <span class="token keyword">const</span> buttonRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Clicked!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    buttonRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> buttonRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>buttonRef<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// ✅ Use the declarative syntax to manage events</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Clicked!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>clickHandler<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Count</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="react-useref-best-practices" tabindex="-1"><a class="header-anchor" href="#react-useref-best-practices"><span>React <code>useRef</code> best practices</span></a></h2>`,21)),s("p",null,[n[37]||(n[37]=a("When working with the ")),n[38]||(n[38]=s("code",null,"useRef",-1)),n[39]||(n[39]=a(" Hook, there are some common mistakes developers commit that may cause bugs and cost them time ")),e(i,{to:"/blog.logrocket.com/master-javascript-debugging-web-apps.html"},{default:t(()=>n[36]||(n[36]=[s("strong",null,"debugging apps",-1)])),_:1,__:[36]}),n[40]||(n[40]=a(". Let’s look at those mistakes and also learn about corrective measures to fix such problems."))]),n[85]||(n[85]=o(`<h3 id="use-the-current-property-for-access-and-modifications" tabindex="-1"><a class="header-anchor" href="#use-the-current-property-for-access-and-modifications"><span>Use the current property for access and modifications</span></a></h3><p>Always remember to specify the current property when accessing or modifying a value referenced with the <code>useRef</code> hook. While it may seem like a small tip at first, it can save you from major headaches caused by hard-to-catch bugs in a huge codebase:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">ToastNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> toastRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    toastRef<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ❌ Missing the current property</span></span>
<span class="line">    toastRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ✅ Always use the current property</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>toastRef<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="initialize-with-null-or-default-values" tabindex="-1"><a class="header-anchor" href="#initialize-with-null-or-default-values"><span>Initialize with null or default values</span></a></h3><p>A value or a DOM reference might not exist initially before the first render. In that case, initialize your refs with a null or meaningful default value to avoid potential errors:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">ClickLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Set a meaningful default value when initializing</span></span>
<span class="line">  <span class="token keyword">const</span> countRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Increment count on click</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    countRef<span class="token punctuation">.</span>current <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>countRef<span class="token punctuation">.</span>current<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="conditional-checks" tabindex="-1"><a class="header-anchor" href="#conditional-checks"><span>Conditional checks</span></a></h3><p>In cases where a <code>useRef</code> reference can be null, always add a conditional check before accessing or modifying it to avoid reference errors.</p><p>Note that the returned <code>useRef</code> object will never be null. Therefore you should strictly check the reference value for a null value and not the object:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">ImageLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> imgRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">loadImage</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> imgSrc <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getImgSrc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// Check if a reference value exists</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>imgRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        imgRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>src <span class="token operator">=</span> imgSrc<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>imgRef<span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Loading...<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span>    </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="clean-up-timeouts-event-listeners-and-observers" tabindex="-1"><a class="header-anchor" href="#clean-up-timeouts-event-listeners-and-observers"><span>Clean up timeouts, event listeners, and observers</span></a></h3><p>Always remember to clear timeouts and disconnect observers during component clean-up to avoid any memory leaks in your apps.</p><p>The same applies to event listeners too, even though most event listeners are taken care of during garbage collection by browsers. Whether you are managing an event listener with <code>useRef</code> or not, you should detach all the attached event listeners as well when cleaning up a component.</p><h3 id="keep-dom-manipulations-simple" tabindex="-1"><a class="header-anchor" href="#keep-dom-manipulations-simple"><span>Keep DOM manipulations simple</span></a></h3>`,14)),s("p",null,[n[42]||(n[42]=a("Instead of complicating DOM selections and manipulations, use React’s declarative approach to keep things simple to understand and easy to maintain. While doing so, you also save your app from inconsistencies created by direct DOM manipulations in the ")),e(i,{to:"/blog.logrocket.com/the-virtual-dom-react.html"},{default:t(()=>n[41]||(n[41]=[s("strong",null,"virtual DOM",-1)])),_:1,__:[41]}),n[43]||(n[43]=a(" updates:"))]),n[86]||(n[86]=o(`<div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// ❌ Bad Practice: Direct DOM Manipulation</span></span>
<span class="line">  <span class="token keyword">const</span> divRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    divRef<span class="token operator">?.</span>current<span class="token punctuation">.</span>textContent <span class="token operator">=</span></span>
<span class="line">        <span class="token string">&quot;Text injected by direct DOM manipulation.&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// ✅ Good Practice: Using React State to support VDOM</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>message<span class="token punctuation">,</span> setMessage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Text from a state variable.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/* Bad practice */</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>divRef<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;red&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/* Good practice */</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>message <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;green&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="club-useref-with-forwardref-to-pass-refs-from-parent-to-child" tabindex="-1"><a class="header-anchor" href="#club-useref-with-forwardref-to-pass-refs-from-parent-to-child"><span>Club <code>useRef</code> with <code>forwardRef</code> to pass refs from parent to child</span></a></h3><p>Normally, we use the <code>useRef</code> Hook to reference elements within components. If you want to use reference of an element (or a value) from a child component in a parent component, you should pair <code>useRef</code> with <code>forwardRef</code>, another Hook that forwards the reference to an element in the child to any parent accessing the child:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// Forward ref to the input element for parent access</span></span>
<span class="line"><span class="token keyword">const</span> ChildInput <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">ParentComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Create a ref for ChildInput</span></span>
<span class="line">  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">focusInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ✅ Parent can now access child&#39;s input</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/* Pass the ref to ChildInput for parent access */</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChildInput</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Type here...<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>focusInput<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Focus Input</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("p",null,[n[45]||(n[45]=a("If you are interested in learning more about different types of refs, ")),e(i,{to:"/blog.logrocket.com/complete-guide-react-refs.html"},{default:t(()=>n[44]||(n[44]=[s("strong",null,"this complete guide to React refs",-1)])),_:1,__:[44]}),n[46]||(n[46]=a(" is a must-see."))]),s("p",null,[n[48]||(n[48]=a("With React 19 onwards, instead of using ")),n[49]||(n[49]=s("code",null,"forwardRef",-1)),n[50]||(n[50]=a(", pass ")),n[51]||(n[51]=s("code",null,"ref",-1)),n[52]||(n[52]=a(" as a component prop and use it with the specified element. Read more about this change in the ")),s("a",S,[e(r,{icon:"fa-brands fa-react"}),n[47]||(n[47]=a("React documentation"))]),n[53]||(n[53]=a("."))]),n[87]||(n[87]=o(`<hr><h2 id="practical-use-cases-of-useref" tabindex="-1"><a class="header-anchor" href="#practical-use-cases-of-useref"><span>Practical use cases of <code>useRef</code></span></a></h2><p>Let’s touch on some patterns in React that utilize <code>useRef</code> to incorporate different features, while also using other React hooks like <code>useState</code>, <code>useEffect</code>, and more.</p><p>I’m decorating some of these examples with Tailwind CSS, which is completely optional. The rest of the process remains focused on utilizing <code>useRef</code> along with other React features to foster common use cases.</p><h3 id="form-handling" tabindex="-1"><a class="header-anchor" href="#form-handling"><span>Form handling</span></a></h3><p>Let’s manage a form to generate a purchase receipt with <code>useRef</code>.</p><p>The form contains multiple inputs whose reference is managed with individual <code>useRef</code> objects that collectively help us grab the form data in a state variable. We can put all these reference objects in one parent object for better organization, as shown below:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">ReceiptGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Create refs for receipt form fields</span></span>
<span class="line">  <span class="token keyword">const</span> formRefs <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">customerName</span><span class="token operator">:</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">itemName</span><span class="token operator">:</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// State to store receipt data</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>receipt<span class="token punctuation">,</span> setReceipt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Calculate total</span></span>
<span class="line">    <span class="token keyword">const</span> quantity <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>formRefs<span class="token punctuation">.</span>quantity<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> price <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>formRefs<span class="token punctuation">.</span>price<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> total <span class="token operator">=</span> quantity <span class="token operator">*</span> price<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      quantity<span class="token punctuation">,</span></span>
<span class="line">      price<span class="token punctuation">,</span></span>
<span class="line">      total<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Update state with receipt data</span></span>
<span class="line">    <span class="token function">setReceipt</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Reset the form</span></span>
<span class="line">    e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Focus back on the first field</span></span>
<span class="line">    formRefs<span class="token punctuation">.</span>customerName<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span> </span>
<span class="line">        <span class="token comment">/* Structure the form and render </span>
<span class="line">         * receipt based on the data received</span>
<span class="line">         * on form submission.</span>
<span class="line">         */</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above code, we are defining an event handler for the form submission, getting the form data using the input field references held with <code>useRef</code>, storing it in the <code>receipt</code> state variable, and then using this data to generate a purchase receipt. Here’s a working example of the same:</p>`,9)),e(c,{user:"c99rahul","slug-hash":"pvodJGb",title:"Receipt Generator","default-tab":["css","result"],theme:l.$isDarkmode?"dark":"light"},null,8,["theme"]),n[88]||(n[88]=s("h3",{id:"managing-animations",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#managing-animations"},[s("span",null,"Managing animations")])],-1)),s("p",null,[n[55]||(n[55]=a("It’s not complicated to apply dynamic animations to an element using ")),n[56]||(n[56]=s("code",null,"useRef",-1)),n[57]||(n[57]=a(". You may use ")),n[58]||(n[58]=s("code",null,"requestAnimationFrames",-1)),n[59]||(n[59]=a(" to do so, or use a JavaScript animation library such as GSAP, ")),e(i,{to:"/blog.logrocket.com/creating-react-animations-with-motion.html"},{default:t(()=>n[54]||(n[54]=[s("strong",null,"Motion",-1)])),_:1,__:[54]}),n[60]||(n[60]=a(", or AnimeJS."))]),s("p",null,[n[62]||(n[62]=a("The ")),s("a",H,[e(r,{icon:"iconfont icon-github"}),n[61]||(n[61]=s("code",null,"greensock/GSAP",-1))]),n[63]||(n[63]=a(" library is pretty common these days, so let’s quickly create an animated card component with it and ")),n[64]||(n[64]=s("code",null,"useRef",-1)),n[65]||(n[65]=a(":"))]),n[89]||(n[89]=o(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> gsap <span class="token keyword">from</span> <span class="token string">&quot;gsap&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">AnimatedCard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> cardRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> animationRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">animateCard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Kill previous animation if exists</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>animationRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> animationRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line">    animationRef<span class="token punctuation">.</span>current <span class="token operator">=</span> gsap<span class="token punctuation">.</span><span class="token function">fromTo</span><span class="token punctuation">(</span></span>
<span class="line">      cardRef<span class="token punctuation">.</span>current<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span> <span class="token literal-property property">scale</span><span class="token operator">:</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">rotate</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span> <span class="token literal-property property">scale</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">rotate</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token literal-property property">ease</span><span class="token operator">:</span> <span class="token string">&quot;power2.out&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">animateCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Run animation on mount</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token comment">/* CSS Styles */</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span>cardRef<span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token comment">/* CSS Styles */</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span>Animated Card<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After styling the card with Tailwind CSS and adding some more content to it, here’s what the final outcome looks like:</p>`,2)),e(c,{user:"c99rahul","slug-hash":"WbNZdXa",title:"Animated GSAP card x TWCSS","default-tab":["css","result"],theme:l.$isDarkmode?"dark":"light"},null,8,["theme"]),n[90]||(n[90]=s("p",null,"The card animation plays automatically upon entering the page. Try this demo in a separate tab or use the “Animate again” button to replay the animation.",-1)),n[91]||(n[91]=s("h3",{id:"preserving-a-previous-state",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#preserving-a-previous-state"},[s("span",null,"Preserving a previous state")])],-1)),n[92]||(n[92]=s("p",null,"Let’s say you have a component that allows the user to set a nickname for their account. This component also shows their previous nickname without making a trip to the network to access a value from the database.",-1)),n[93]||(n[93]=s("p",null,[a("We can accomplish this using two state variables. However, we can do the same with just one state variable and maintain the previous state value using the "),s("code",null,"useRef"),a(" Hook.")],-1)),n[94]||(n[94]=s("p",null,[a("I’m following nearly the same pattern as we followed when learning to store a previous state value with "),s("code",null,"useRef"),a(". Here’s how it turned out:")],-1)),e(c,{user:"c99rahul","slug-hash":"OPJmLNN",title:"Saving last value with useRef and useState (Simplified)","default-tab":["css","result"],theme:l.$isDarkmode?"dark":"light"},null,8,["theme"]),n[95]||(n[95]=o(`<h3 id="detecting-clicks-outside-an-element" tabindex="-1"><a class="header-anchor" href="#detecting-clicks-outside-an-element"><span>Detecting clicks outside an element</span></a></h3><p>Using the DOM reference provided by <code>useRef</code>, we can easily check if it contains the clicked target. Here’s what the implementation would look like:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">TrackClicks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>message<span class="token punctuation">,</span> setMessage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;Click somewhere!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> drawerRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>drawerRef<span class="token punctuation">.</span>current <span class="token operator">&amp;&amp;</span> drawerRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Clicked inside!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Clicked outside!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>drawerRef<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[69]||(n[69]=a("You can see a ")),s("a",I,[n[66]||(n[66]=a("working example of the above code here (")),e(r,{icon:"fa-brands fa-codepen"}),n[67]||(n[67]=s("code",null,"c99rahul",-1)),n[68]||(n[68]=a(")"))]),n[70]||(n[70]=a("."))]),e(c,{user:"c99rahul","slug-hash":"yyLbBrR",title:"Detecting clicks w/ useRef","default-tab":["css","result"],theme:l.$isDarkmode?"dark":"light"},null,8,["theme"]),n[96]||(n[96]=s("p",null,"Expanding on this baseline, we can put together a drawer component that shows up on a button click and disappears when clicked outside of itself:",-1)),e(c,{user:"c99rahul","slug-hash":"YPzpWGv",title:"Drawer with useRef","default-tab":["css","result"],theme:l.$isDarkmode?"dark":"light"},null,8,["theme"]),n[97]||(n[97]=o(`<h3 id="input-autofocus" tabindex="-1"><a class="header-anchor" href="#input-autofocus"><span>Input autofocus</span></a></h3><p>Suppose your app demands automatic focusing on an input field after a certain event, such as immediately after the app finishes loading in the browser window, a button click, etc. In such a case, we can easily hook that input field with a <code>useRef</code> Hook and set focus to it using a side-effect:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">AutoFocusInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Type here...<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let’s use this approach in the above-implemented <code>Drawer</code> component and focus the search box in the drawer as soon as the drawer is clicked open:</p>`,4)),e(c,{user:"c99rahul","slug-hash":"PwYrwzm",title:"useRef Input Focus","default-tab":["css","result"],theme:l.$isDarkmode?"dark":"light"},null,8,["theme"]),n[98]||(n[98]=s("p",null,[a("If you notice this example closely, I’m forwarding a "),s("code",null,"ref"),a(" from a child component ("),s("code",null,"InputBox"),a(") to a parent component ("),s("code",null,"Drawer"),a("), following one of the best practices we discussed previously.")],-1)),n[99]||(n[99]=s("hr",null,null,-1)),n[100]||(n[100]=s("h2",{id:"conclusion",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#conclusion"},[s("span",null,"Conclusion")])],-1)),s("p",null,[n[74]||(n[74]=a("To wrap up, we learned about the ")),n[75]||(n[75]=s("code",null,"useRef",-1)),n[76]||(n[76]=a(" Hook in React, discussed its implementation, applications, and some do’s and don’ts. You may find all the examples discussed in this post with some bonus demos in ")),s("a",T,[n[71]||(n[71]=a("this CodePen collection (")),e(r,{icon:"fa-brands fa-codepen"}),n[72]||(n[72]=s("code",null,"BayjWJ",-1)),n[73]||(n[73]=a(")"))]),n[77]||(n[77]=a("."))]),n[101]||(n[101]=s("p",null,[a("Try implementing the "),s("code",null,"useRef"),a(" Hook in your apps if you haven’t already. Share your questions or suggestions in the comments. I’ll be happy to learn your thoughts and help you.")],-1)),b(" TODO: add ARTICLE CARD "),e(k,d(m({title:"How to use the React useRef Hook effectively",desc:"Learn how to use React useRef for managing references, avoiding re-renders, and applying best practices in functional components.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-useref.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const E=g(x,[["render",D]]),W=JSON.parse('{"path":"/blog.logrocket.com/react-useref.html","title":"How to use the React useRef Hook effectively","lang":"en-US","frontmatter":{"lang":"en-US","title":"How to use the React useRef Hook effectively","description":"Article(s) > How to use the React useRef Hook effectively","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to use the React useRef Hook effectively\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-useref/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-useref/JBWjbwFw.png\\"],\\"datePublished\\":\\"2025-04-07T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Rahul Chhodde\\",\\"url\\":\\"https://blog.logrocket.com/author/rahulchhodde/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-useref.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to use the React useRef Hook effectively"}],["meta",{"property":"og:description","content":"Article(s) > How to use the React useRef Hook effectively"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-useref/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-useref/banner.png"}],["meta",{"name":"twitter:image:alt","content":"How to use the React useRef Hook effectively"}],["meta",{"property":"article:author","content":"Rahul Chhodde"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-04-07T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How to use the React useRef Hook effectively"},{"property":"og:description","content":"How to use the React useRef Hook effectively"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-useref.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2025-04-07T00:00:00.000Z","isOriginal":false,"author":[{"name":"Rahul Chhodde","url":"https://blog.logrocket.com/author/rahulchhodde/"}],"cover":"/assets/image/blog.logrocket.com/react-useref/banner.png"},"git":{},"readingTime":{"minutes":11.81,"words":3544},"filePathRelative":"blog.logrocket.com/react-useref.md","copyright":{"author":"Rahul Chhodde"}}');export{E as comp,W as data};
