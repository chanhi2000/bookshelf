import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,d as n,f as e,b as p,t as d,n as k,g as m,e as a,r as t,o as y}from"./app-BVguHYKu.js";const g={},h={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},b={href:"https://typescriptlang.org/docs/handbook/utility-types.html#omittype-keys",target:"_blank",rel:"noopener noreferrer"};function w(o,s){const l=t("VPCard"),c=t("SiteInfo"),i=t("VPIcon");return y(),u("div",null,[n("h1",h,[n("a",v,[n("span",null,d(o.$frontmatter.title)+" 관련",1)])]),e(l,k(m({title:"Build strongly typed polymorphic components with React and TypeScript",desc:"Learn how to build strongly typed polymorphic React components with TypeScript, using familiar Chakra UI and MUI component props as guides.",link:"/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/README.md",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16),s[7]||(s[7]=n("nav",{class:"table-of-contents"},[n("ul")],-1)),s[8]||(s[8]=n("hr",null,null,-1)),e(c,{name:"Build strongly typed polymorphic components with React and TypeScript",desc:"Learn how to build strongly typed polymorphic React components with TypeScript, using familiar Chakra UI and MUI component props as guides.",url:"https://blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript#create-reusable-utility-polymorphic-types",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}),s[9]||(s[9]=p(`<p>We’ve finally got a solution that works well. Now, however, let’s take it one step further.</p><p>The solution we have works great for our <code>Text</code> component. However, what if you’d rather have a solution you can reuse on any component of your choosing, so that you can have a reusable solution for every use case?</p><p>Let’s get started. First, here’s the current complete solution with no annotations:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line">type Rainbow <span class="token operator">=</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token string">&quot;red&quot;</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token string">&quot;orange&quot;</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token string">&quot;yellow&quot;</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token string">&quot;green&quot;</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token string">&quot;blue&quot;</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token string">&quot;indigo&quot;</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token string">&quot;violet&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">type TextProps<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">React.ElementType</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">;</span></span>
<span class="line">  color<span class="token operator">?</span><span class="token operator">:</span> Rainbow <span class="token operator">|</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token plain-text">;</span>
<span class="line"></span>
<span class="line">type Props</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">React.ElementType</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = React.PropsWithChildren&lt;</span>
<span class="line">  TextProps</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">&gt; &amp;</span>
<span class="line">  Omit&lt;React.ComponentPropsWithoutRef</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">, keyof TextProps</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">&gt;;</span>
<span class="line"></span>
<span class="line">export const Text = &lt;C extends React.ElementType = &quot;span&quot;&gt;(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token punctuation">,</span></span>
<span class="line">  color<span class="token punctuation">,</span></span>
<span class="line">  children<span class="token punctuation">,</span></span>
<span class="line">  <span class="token operator">...</span>restProps</span>
<span class="line"><span class="token punctuation">}</span><span class="token plain-text">: Props</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">) =&gt; </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> style <span class="token operator">=</span> color <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> color <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>restProps<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>style<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token plain-text">;</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Succinct and practical.</p><p>If we made this reusable, then it has to work for any component. This means removing the hardcoded <code>TextProps</code> and representing that with a generic — so anyone can pass in whatever component props they need.</p><p>Currently, we represent our component props with the definition <code>Props&lt;C&gt;</code>. Where <code>C</code> represents the element type passed for the <code>as</code> prop.</p><p>We will now change that to:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token comment">// before</span></span>
<span class="line">Props<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// after </span></span>
<span class="line">PolymorphicProps<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token punctuation">,</span> TextProps<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>PolymorphicProps</code> represents the utility type we will write shortly. However, note that this accepts two generic types, the second being the component props in question: <code>TextProps</code>.</p><p>Go ahead and define the <code>PolymorphicProps</code> type:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">PolymorphicComponentProp<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token punctuation">,</span></span>
<span class="line">  Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 👈 empty object for now </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The definition above should be understandable. <code>C</code> represents the element type passed in <code>as</code>, and <code>Props</code> is the actual component props, <code>TextProps</code>.</p><p>First, let’s split the <code>TextProps</code> we had before into the following:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">AsProp<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">TextProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span> color<span class="token operator">?</span><span class="token operator">:</span> Rainbow <span class="token operator">|</span> <span class="token string">&quot;black&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, we’ve separated the <code>AsProp</code> from the <code>TextProps</code>. To be fair, they represent two different things. This is a nicer representation.</p><p>Now, let’s change the <code>PolymorphicComponentProp</code> utility definition to include the <code>as</code> prop, component props, and <code>children</code> prop, as we’ve done in the past:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">AsProp<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PolymorphicComponentProp<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token punctuation">,</span></span>
<span class="line">  Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> React<span class="token punctuation">.</span>PropsWithChildren<span class="token operator">&lt;</span>Props <span class="token operator">&amp;</span> AsProp<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I’m sure by now you understand what’s going on here: we have an intersection type of <code>Props</code> (representing the component props) and <code>AsProp</code> representing the <code>as</code> prop. These are all passed into <code>PropsWithChildren</code> to add the <code>children</code> prop definition. Excellent!</p><p>Now, we need to include the bit where we add the <code>React.ComponentPropsWithoutRef&lt;C&gt;</code> definition. However, we must remember to omit props that exist in our component definition.<br> Let’s come up with a robust solution.</p><p>Write out a new type that just comprises the props we’d like to omit. Namely, the keys of the <code>AsProp</code> and the component props as well.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">PropsToOmit<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token punctuation">,</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token punctuation">(</span>AsProp<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token constant">P</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Remember the <code>keyof</code> utility type?</p><p><code>PropsToOmit</code> will now comprise a union type of the props we want to omit, which is every prop of our component represented by <code>P</code> and the actual polymorphic prop <code>as</code>, represented by <code>AsProps</code>.</p><p>Put this all together nicely in the <code>PolymorphicComponentProp</code> definition:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">AsProp<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// before </span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PolymorphicComponentProp<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token punctuation">,</span></span>
<span class="line">  Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> React<span class="token punctuation">.</span>PropsWithChildren<span class="token operator">&lt;</span>Props <span class="token operator">&amp;</span> AsProp<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// after</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PolymorphicComponentProp<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token punctuation">,</span></span>
<span class="line">  Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> React<span class="token punctuation">.</span>PropsWithChildren<span class="token operator">&lt;</span>Props <span class="token operator">&amp;</span> AsProp<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;&gt;</span> <span class="token operator">&amp;</span></span>
<span class="line">  Omit<span class="token operator">&lt;</span>React<span class="token punctuation">.</span>ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> </span>
<span class="line">   PropsToOmit<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token punctuation">,</span> Props<span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What’s important here is we’ve added the following definition:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line">Omit<span class="token operator">&lt;</span>React<span class="token punctuation">.</span>ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> </span>
<span class="line">   PropsToOmit<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token punctuation">,</span> Props<span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,28)),n("p",null,[s[3]||(s[3]=a("This basically omits the right types from ")),s[4]||(s[4]=n("code",null,"React.componentPropsWithoutRef",-1)),s[5]||(s[5]=a(". Do you still ")),n("a",b,[e(i,{icon:"iconfont icon-typescript"}),s[0]||(s[0]=a("remember how ")),s[1]||(s[1]=n("code",null,"omit",-1)),s[2]||(s[2]=a("works"))]),s[6]||(s[6]=a("?"))]),s[10]||(s[10]=p(`<p>Simple as it may seem, you now have a solution you can reuse on multiple components across different projects!</p><p>Here’s the complete implementation:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">PropsToOmit<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token punctuation">,</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token punctuation">(</span>AsProp<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token constant">P</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PolymorphicComponentProp<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token punctuation">,</span></span>
<span class="line">  Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> React<span class="token punctuation">.</span>PropsWithChildren<span class="token operator">&lt;</span>Props <span class="token operator">&amp;</span> AsProp<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;&gt;</span> <span class="token operator">&amp;</span></span>
<span class="line">  Omit<span class="token operator">&lt;</span>React<span class="token punctuation">.</span>ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> PropsToOmit<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token punctuation">,</span> Props<span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can go ahead and use <code>PolymorphicComponentProp</code> on our <code>Text</code> component as follows:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Text <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">&quot;span&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token punctuation">,</span></span>
<span class="line">  color<span class="token punctuation">,</span></span>
<span class="line">  children<span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// look here 👇</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token operator">:</span> PolymorphicComponentProp<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token punctuation">,</span> TextProps<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> style <span class="token operator">=</span> color <span class="token operator">?</span> <span class="token punctuation">{</span> style<span class="token operator">:</span> <span class="token punctuation">{</span> color <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>style<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>How nice! If you build another component, you can go ahead and type it like this:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line">PolymorphicComponentProp<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token punctuation">,</span> MyNewComponentProps<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Do you hear that sound? That’s the sound of victory — you’ve come so far!</p>`,8))])}const f=r(g,[["render",w]]),C=JSON.parse('{"path":"/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/create-reusable-utility-polymorphic-types.html","title":"Create a reusable utility for polymorphic types","lang":"en-US","frontmatter":{"lang":"en-US","title":"Create a reusable utility for polymorphic types","description":"Article(s) > (9/10) Build strongly typed polymorphic components with React and TypeScript","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Create a reusable utility for polymorphic types\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png\\"],\\"datePublished\\":\\"2022-05-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ohans Emmanuel\\",\\"url\\":\\"https://blog.logrocket.com/author/ohansemmanuel/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/create-reusable-utility-polymorphic-types.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Create a reusable utility for polymorphic types"}],["meta",{"property":"og:description","content":"Article(s) > (9/10) Build strongly typed polymorphic components with React and TypeScript"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Create a reusable utility for polymorphic types"}],["meta",{"property":"article:author","content":"Ohans Emmanuel"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-05-25T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > (9/10) Build strongly typed polymorphic components with React and TypeScript"},{"property":"og:description","content":"Create a reusable utility for polymorphic types"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript//create-reusable-utility-polymorphic-types.html"}]],"date":"2022-05-25T00:00:00.000Z","isOriginal":false,"author":[{"name":"Ohans Emmanuel","url":"https://blog.logrocket.com/author/ohansemmanuel/"}],"cover":"/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"},"git":{},"readingTime":{"minutes":3.22,"words":967},"filePathRelative":"blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/create-reusable-utility-polymorphic-types.md","copyright":{"author":"Ohans Emmanuel"}}');export{f as comp,C as data};
