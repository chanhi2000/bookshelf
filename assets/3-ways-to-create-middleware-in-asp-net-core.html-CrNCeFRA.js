import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,d as e,f as a,b as u,t as m,n as g,g as h,w as t,r as i,o as v,e as o}from"./app-BVguHYKu.js";const k={},w={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"};function f(l,n){const p=i("VPCard"),s=i("router-link"),c=i("SiteInfo");return v(),d("div",null,[e("h1",w,[e("a",y,[e("span",null,m(l.$frontmatter.title)+" 관련",1)])]),a(p,g(h({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",b,[e("ul",null,[e("li",null,[a(s,{to:"#adding-middleware-with-request-delegates"},{default:t(()=>n[0]||(n[0]=[o("Adding Middleware With Request Delegates")])),_:1,__:[0]})]),e("li",null,[a(s,{to:"#adding-middleware-by-convention"},{default:t(()=>n[1]||(n[1]=[o("Adding Middleware By Convention")])),_:1,__:[1]})]),e("li",null,[a(s,{to:"#adding-factory-based-middleware"},{default:t(()=>n[2]||(n[2]=[o("Adding Factory-Based Middleware")])),_:1,__:[2]})]),e("li",null,[a(s,{to:"#a-word-on-strong-typing"},{default:t(()=>n[3]||(n[3]=[o("A Word On Strong Typing")])),_:1,__:[3]})])])]),n[4]||(n[4]=e("hr",null,null,-1)),a(c,{name:"3 Ways To Create Middleware In ASP.NET Core",desc:"In this newsletter, we'll be covering three ways to create middleware in ASP.NET Core applications. Middleware allows us to introduce additional logic before or after executing an HTTP request. You are already using many of the built-in middleware available in the framework. I'm going to show you three approaches to how you can define custom middleware: With Request Delegates, By Convention, and Factory-Based.",url:"https://milanjovanovic.tech/blog/3-ways-to-create-middleware-in-asp-net-core/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://www.milanjovanovic.tech/blog-covers/mnw_005.png"}),n[5]||(n[5]=u(`<p>In this newsletter, we&#39;ll be covering three ways to create middleware in <strong>ASP.NET Core</strong> applications.</p><p><strong>Middleware</strong> allows us to introduce additional logic before or after executing an HTTP request.</p><p>You are already using many of the built-in middleware available in the framework.</p><p>I&#39;m going to show you three approaches to how you can define custom middleware:</p><ul><li>With Request Delegates</li><li>By Convention</li><li>Factory-Based</li></ul><p>Let&#39;s go over each of them and see how we can implement them in code.</p><hr><h2 id="adding-middleware-with-request-delegates" tabindex="-1"><a class="header-anchor" href="#adding-middleware-with-request-delegates"><span>Adding Middleware With Request Delegates</span></a></h2><p>The first approach to defining a middleware is by writing a <strong>Request Delegate</strong>.</p><p>You can do that by calling the <code>Use</code> method on the <code>WebApplication</code> instance and providing a lambda method with two arguments. The first argument is the <code>HttpContext</code> and the second argument is the actual next request delegate in the pipeline <code>RequestDelegate</code>.</p><p>Here&#39;s what this would look like:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Add code before request.</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Add code after request.</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By awaiting the <code>next</code> delegate, you are continuing the request pipeline execution. You can <em>short-circuit</em> the pipeline by not invoking the <code>next</code> delegate.</p><p>This overload of the <code>Use</code> method is the one suggested by <strong>Microsoft</strong>.</p><hr><h2 id="adding-middleware-by-convention" tabindex="-1"><a class="header-anchor" href="#adding-middleware-by-convention"><span>Adding Middleware By Convention</span></a></h2><p>The second approach requires us to create a class that will represent our middleware. We have to follow the convention when creating this class so that we can use it as middleware in our application.</p><p>I&#39;m first going to show you what this class looks like, and then explain what is the convention we are following here.</p><p>Here&#39;s how this class would look like:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConventionMiddleware</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">RequestDelegate</span> next<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>ConventionMiddleware<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;Before request&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;After request&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The convention we are following has a few rules:</p><ul><li>We need to inject a <code>RequestDelegate</code> in the constructor</li><li>We need to define an <code>InvokeAsync</code> method with an <code>HttpContext</code> argument</li><li>We need to invoke the <code>RequestDelegate</code> and pass it the <code>HttpContext</code> instance</li></ul><p>There&#39;s one more thing that&#39;s required, and that is to tell our application to use this middleware.</p><p>We can do that by calling the <code>UseMiddleware</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseMiddleware</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ConventionMiddleware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>And with this, we have a functioning middleware.</p><hr><h2 id="adding-factory-based-middleware" tabindex="-1"><a class="header-anchor" href="#adding-factory-based-middleware"><span>Adding Factory-Based Middleware</span></a></h2><p>The third and last approach requires us to also create a class that will represent our middleware.</p><p>However, this time we&#39;re going to implement the <code>IMiddleware</code> interface. This interface has only one method - <code>InvokeAsync</code>.</p><p>Here&#39;s what this class would like:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryMiddleware</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>FactoryMiddleware<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span> <span class="token punctuation">:</span> IMiddleware</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">,</span> <span class="token class-name">RequestDelegate</span> next<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;Before request&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;After request&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>FactoryMiddleware</code> class will be resolved at runtime from dependency injection.</p><p>Because of this, we need to register it as a service:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>FactoryMiddleware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And like the previous example, we need to tell our application to use our factory-based middleware:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseMiddleware</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>FactoryMiddleware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>With this, we have a functioning middleware.</p><hr><h2 id="a-word-on-strong-typing" tabindex="-1"><a class="header-anchor" href="#a-word-on-strong-typing"><span>A Word On Strong Typing</span></a></h2><p>I&#39;m a big fan of <strong>strong typing</strong> whenever possible. Out of the three approaches I just showed you, the one using the <code>IMiddleware</code> interface satisfies this constraint the most. This is also my <strong>preferred</strong> way to implement <strong>middleware</strong>.</p><p>Since we&#39;re implementing an interface, it&#39;s very easy to create a generic solution to never forget to register your middleware.</p><p>You can use reflection to scan for classes implementing the <code>IMiddleware</code> interface and add them to dependency injection, and also add them to the application by calling <code>UseMiddleware</code>.</p>`,43))])}const C=r(k,[["render",f]]),M=JSON.parse('{"path":"/milanjovanovic.tech/3-ways-to-create-middleware-in-asp-net-core.html","title":"3 Ways To Create Middleware In ASP.NET Core","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"3 Ways To Create Middleware In ASP.NET Core","description":"Article(s) > 3 Ways To Create Middleware In ASP.NET Core","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3 Ways To Create Middleware In ASP.NET Core\\",\\"image\\":[\\"https://www.milanjovanovic.tech/blog-covers/mnw_005.png\\"],\\"datePublished\\":\\"2022-10-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/3-ways-to-create-middleware-in-asp-net-core.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"3 Ways To Create Middleware In ASP.NET Core"}],["meta",{"property":"og:description","content":"Article(s) > 3 Ways To Create Middleware In ASP.NET Core"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.milanjovanovic.tech/blog-covers/mnw_005.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.milanjovanovic.tech/blog-covers/mnw_005.png"}],["meta",{"name":"twitter:image:alt","content":"3 Ways To Create Middleware In ASP.NET Core"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-10-01T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 3 Ways To Create Middleware In ASP.NET Core"},{"property":"og:description","content":"3 Ways To Create Middleware In ASP.NET Core"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/3-ways-to-create-middleware-in-asp-net-core.html"}]],"prev":"/programming/cs/articles/README.md","date":"2022-10-01T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://www.milanjovanovic.tech/blog-covers/mnw_005.png"},"git":{},"readingTime":{"minutes":2.74,"words":822},"filePathRelative":"milanjovanovic.tech/3-ways-to-create-middleware-in-asp-net-core.md","copyright":{"author":"Milan Jovanović"}}');export{C as comp,M as data};
