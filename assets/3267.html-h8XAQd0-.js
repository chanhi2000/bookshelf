import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,d as s,f as a,b as v,a as m,t as g,n as l,g as i,w as t,r as o,o as b,e}from"./app-BVguHYKu.js";const f={},y={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"};function x(u,n){const c=o("VPCard"),p=o("router-link"),k=o("SiteInfo");return b(),d("div",null,[s("h1",y,[s("a",h,[s("span",null,g(u.$frontmatter.title)+" 관련",1)])]),a(c,l(i({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",w,[s("ul",null,[s("li",null,[a(p,{to:"#모달-ux-패턴과-개발-고민들"},{default:t(()=>n[0]||(n[0]=[e("모달 UX 패턴과 개발 고민들")])),_:1,__:[0]}),s("ul",null,[s("li",null,[a(p,{to:"#상태-관리의-반복-패턴"},{default:t(()=>n[1]||(n[1]=[e("상태 관리의 반복 패턴")])),_:1,__:[1]})]),s("li",null,[a(p,{to:"#외부-클릭으로-닫기"},{default:t(()=>n[2]||(n[2]=[e("외부 클릭으로 닫기")])),_:1,__:[2]})]),s("li",null,[a(p,{to:"#키보드로-제어하기"},{default:t(()=>n[3]||(n[3]=[e("키보드로 제어하기")])),_:1,__:[3]})]),s("li",null,[a(p,{to:"#확인-취소-결과-처리"},{default:t(()=>n[4]||(n[4]=[e("확인/취소 결과 처리")])),_:1,__:[4]})])])]),s("li",null,[a(p,{to:"#usetoggle"},{default:t(()=>n[5]||(n[5]=[e("useToggle")])),_:1,__:[5]})]),s("li",null,[a(p,{to:"#useoutsideclick"},{default:t(()=>n[6]||(n[6]=[e("useOutsideClick")])),_:1,__:[6]}),s("ul",null,[s("li",null,[a(p,{to:"#기존-방식"},{default:t(()=>n[7]||(n[7]=[e("기존 방식")])),_:1,__:[7]})])])]),s("li",null,[a(p,{to:"#keypress"},{default:t(()=>n[8]||(n[8]=[e("keyPress")])),_:1,__:[8]})]),s("li",null,[a(p,{to:"#usemodal"},{default:t(()=>n[9]||(n[9]=[e("useModal")])),_:1,__:[9]}),s("ul",null,[s("li",null,[a(p,{to:"#원리"},{default:t(()=>n[10]||(n[10]=[e("원리")])),_:1,__:[10]})])])]),s("li",null,[a(p,{to:"#리액트-훅을-만들며"},{default:t(()=>n[11]||(n[11]=[e("리액트 훅을 만들며")])),_:1,__:[11]})])])]),n[12]||(n[12]=s("hr",null,null,-1)),a(k,{name:"현업에서 ‘모달’에 자주 쓰는 리액트 훅 모음",desc:"리액트를 배우고 나서 실제 프로젝트를 시작하면, 예상보다 많은 고민이 생깁니다. ”이 로직을 매번 반복해서 써야 하나?”, ”다른 개발자들은 이런 상황을 어떻게 처리하지?”, ”내 코드가 너무 길어지는 것 같은데...” 같은 생각들이요. 제가 실무에서 느낀 점은 자주 사용하는 패턴들을 잘 추상화해 놓으면, 코드 중복을 줄이고 훨씬 직관적인 코드를 작성할 수 있다는 점이었습니다. 이번 글에서는 ”모달”을 만든다고 가정하고, 여기에 어떤 훅들이 쓰일 수 있는지 알아볼게요. 모달 하나에도 여러 UX가 있고, 이걸 개발하려면 번거로운 부분이 있기 때문입니다.",url:"https://yozm.wishket.com/magazine/detail/3267/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/3267/dd.gif"}),n[13]||(n[13]=v(`<p>협업에서는 어떤 코드를 짜야 하는지 궁금하신가요? 리액트를 배우고 나서 실제 프로젝트를 시작하면, 예상보다 많은 고민이 생깁니다. &quot;이 로직을 매번 반복해서 써야 하나?&quot;, &quot;다른 개발자들은 이런 상황을 어떻게 처리하지?&quot;, &quot;내 코드가 너무 길어지는 것 같은데...&quot; 같은 생각들이요. 제가 실무에서 느낀 점은 자주 사용하는 패턴들을 잘 추상화해 놓으면, 코드 중복을 줄이고 훨씬 직관적인 코드를 작성할 수 있다는 점이었습니다. 그래서 실무진들은 이미 자주 쓰는 훅을 사내에서 정의해놓고 공유합니다. 빅테크들은 이런 노하우들을 모아서 따로 오픈소스로 공개하기도 하고요.</p><p>물론 정답은 없습니다. 저는 저만의 해결 방식이 있고, 여러분은 또 다른 방법을 찾을 수도 있어요. 대신 &quot;이런 식으로도 접근할 수도 있구나&quot;의 관점에서 봐주시면 좋겠습니다. 이번 글에서는 &quot;모달&quot;을 만든다고 가정하고, 여기에 어떤 훅들이 쓰일 수 있는지 알아볼게요. 모달 하나에도 여러 UX가 있고, 이걸 개발하려면 번거로운 부분이 있기 때문입니다.</p><figure><img src="https://wishket.com/media/news/3267/dd.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="모달-ux-패턴과-개발-고민들" tabindex="-1"><a class="header-anchor" href="#모달-ux-패턴과-개발-고민들"><span>모달 UX 패턴과 개발 고민들</span></a></h2><p>모달을 만들다 보면 생각보다 많은 UX 고민이 생깁니다. 사용자들이 자연스럽게 기대하는 동작들이 있거든요.</p><h3 id="상태-관리의-반복-패턴" tabindex="-1"><a class="header-anchor" href="#상태-관리의-반복-패턴"><span>상태 관리의 반복 패턴</span></a></h3><p>가장 기본적인 것부터 시작해 볼게요. 우선 모달을 열고 닫는 상태 관리입니다. 매번 <code>useState</code>로 불린(Boolean) 상태를 만들고, 열기/닫기/토글 함수를 정의하게 됩니다. 모달뿐만 아니라 드롭다운, 사이드바, 아코디언 등 불린 상태를 다루는 모든 곳에서 똑같은 패턴이 반복되죠.</p><h3 id="외부-클릭으로-닫기" tabindex="-1"><a class="header-anchor" href="#외부-클릭으로-닫기"><span>외부 클릭으로 닫기</span></a></h3><p>사용자들은 당연히 모달 바깥을 클릭하면 닫힐 거라고 생각합니다. 하지만 이를 매번 구현하려면 번거롭습니다. DOM 이벤트 리스너를 등록하고 해제하는 로직이 필요하고, 여러 모달이 있으면 각각 관리해야 하며, 메모리 누수도 신경 써야 하죠.</p><h3 id="키보드로-제어하기" tabindex="-1"><a class="header-anchor" href="#키보드로-제어하기"><span>키보드로 제어하기</span></a></h3><p>접근성을 고려하면 키보드로도 모달을 제어할 수 있어야 합니다. ESC 키로 닫기, Enter 키로 확인하기 같은 것들이요. 하지만 매번 키 이벤트 핸들러를 작성하다 보면, 하드코딩된 키 이름들과 길어지는 조건문 때문에 가독성이 떨어집니다.</p><h3 id="확인-취소-결과-처리" tabindex="-1"><a class="header-anchor" href="#확인-취소-결과-처리"><span>확인/취소 결과 처리</span></a></h3><p>모달은 주로 사용자에게 무언가를 확인받기 위해 사용됩니다. &quot;정말 삭제하시겠습니까?&quot; 같은 확인 모달에서는 사용자가 확인 버튼을 누르면 어떤 작업을 진행하고, 취소하면 아무것도 하지 않아야 하죠. 네이티브 <code>confirm()</code>은 사용법이 간편하지만 스타일링이 불가능하고, 커스텀 모달을 만들면 콜백으로 결과를 처리해야 해서 복잡해집니다. &quot;네이티브 API처럼 간편하게 사용하면서도 완전히 커스터마이징 가능한 모달은 없을까?&quot; 하는 고민이 생깁니다.</p><p>이런 반복적인 패턴들과 고민을 해결하기 위해, 제가 실무에서 사용하는 몇 가지 훅들을 소개하려고 합니다. 모든 상황에서 완벽한 해답은 아니지만, 이런 방식도 있다는 걸 참고해 주시면 좋습니다.</p><hr><h2 id="usetoggle" tabindex="-1"><a class="header-anchor" href="#usetoggle"><span><code>useToggle</code></span></a></h2><p>불린 상태를 다루는 건 정말 자주 하는 일입니다. 모달 열기/닫기, 드롭다운 표시/숨김, 사이드바 접기/펼치기 등 매번 똑같은 패턴을 반복하게 되죠. 저는 불린 상태와 그 상태를 조작하는 함수들을 하나로 묶어서 반환하는 방식을 자주 사용합니다. 이렇게 하면 매번 토글 로직을 작성할 필요가 없어지거든요. 단순히 상태만 반환하는 게 아니라, 그 상태를 조작하는 의미 있는 함수들까지 함께 제공하면 사용성이 좋습니다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">useToggle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">initialValue <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">const</span> toggle <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token parameter">prev</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>prev<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> setTrue <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> setFalse <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> toggle<span class="token punctuation">,</span> setTrue<span class="token punctuation">,</span> setFalse<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>useToggle</code>은 다른 회사의 오픈소스에도 종종 볼 수 있는 훅입니다.</p><div class="hint-container tip"><p class="hint-container-title">사용법</p><p>모달에서 사용할 때는 이렇게 쓸 수 있죠.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// Before: 매번 반복하던 패턴</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>isModalOpen<span class="token punctuation">,</span> setIsModalOpen<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">openModal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setIsModalOpen</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">closeModal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setIsModalOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// After: useToggle 사용</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>isModalOpen<span class="token punctuation">,</span> toggleModal<span class="token punctuation">,</span> openModal<span class="token punctuation">,</span> closeModal<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>함수명이 의미를 명확하게 드러내니까 코드를 읽기도 쉬워집니다. <code>openModal()</code>, <code>closeModal()</code> 이렇게 쓰면 뭘 하는 건지 바로 알 수 있죠.</p><p>다른 UI 요소들에서도 마찬가지입니다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// 로딩 상태</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>isLoading<span class="token punctuation">,</span> toggleLoading<span class="token punctuation">,</span> startLoading<span class="token punctuation">,</span> stopLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 다크 모드</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>isDarkMode<span class="token punctuation">,</span> toggleDarkMode<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 사이드바</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>isSidebarOpen<span class="token punctuation">,</span> toggleSidebar<span class="token punctuation">,</span> openSidebar<span class="token punctuation">,</span> closeSidebar<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>매번 <code>!state</code> 같은 토글 로직을 작성하는 게 귀찮았는데, 이 반복적인 패턴을 훅 내부로 숨겨서 재사용할 수 있어서 편합니다. <code>setValue(true)</code> 보다는 <code>openModal()</code>이 훨씬 직관적이고, 코드만 봐도 뭘 하려는 건지 바로 이해할 수 있죠. 프로젝트 전체에서 불린 상태를 다루는 방식도 통일되고, 팀원들도 예측 가능한 패턴으로 코드를 작성할 수 있어서 좋았습니다.</p></div><hr><h2 id="useoutsideclick" tabindex="-1"><a class="header-anchor" href="#useoutsideclick"><span><code>useOutsideClick</code></span></a></h2><p>모달이나 드롭다운 메뉴에서 바깥쪽을 클릭하면 닫히게 하는 로직은 자주 구현하게 됩니다. 그런데 그럴 때마다 <code>useEffect와</code> DOM 참조를 직접 구현하는 건 귀찮은 일입니다.</p><h3 id="기존-방식" tabindex="-1"><a class="header-anchor" href="#기존-방식"><span>기존 방식</span></a></h3><p>보통은 이런 식으로 구현하게 되죠.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> modalRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>modalRef<span class="token punctuation">.</span>current <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>modalRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setIsModalOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousedown&#39;</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousedown&#39;</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>매번 동일한 패턴을 반복해서 작성해야 하는 게 번거로워, 저는 <code>ref</code> 기반 콜백 인터페이스를 사용합니다. 이건 Svelte에서 사용하는 인터페이스를 차용한 건데, DOM에 접근할 필요가 있으니까 이런 방식을 택했습니다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useOutsideClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> handlersRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> handlers <span class="token operator">=</span> handlersRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      handlers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>element<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousedown&#39;</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousedown&#39;</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>element<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      handlersRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        handlersRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">사용법</p><p>이렇게 사용할 수 있어요.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">MyModal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>isOpen<span class="token punctuation">,</span> toggleModal<span class="token punctuation">,</span> openModal<span class="token punctuation">,</span> closeModal<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> onOutsideClick <span class="token operator">=</span> <span class="token function">useOutsideClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>modal-overlay<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">onOutsideClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">closeModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">모달 제목</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">모달 내용</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>closeModal<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">닫기</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>드롭다운에서는</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">DropdownMenu</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>isOpen<span class="token punctuation">,</span> toggleMenu<span class="token punctuation">,</span> openMenu<span class="token punctuation">,</span> closeMenu<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> onOutsideClick <span class="token operator">=</span> <span class="token function">useOutsideClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dropdown<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>toggleMenu<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">메뉴 열기</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span>
<span class="line">      </span><span class="token punctuation">{</span>isOpen <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">onOutsideClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">closeMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">메뉴 1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">메뉴 2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">메뉴 3</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>콜백을 DOM과 가까이 정의하는 게 가독성이 좋습니다. 어떤 라이브러리에서는 <code>&lt;OutsideClick as=&quot;div&quot; /&gt;</code> 이렇게 컴포넌트로 만들기도 하지만, 저는 DOM 태그의 가독성을 위해 이런 방식을 선호합니다. 실제 DOM 구조가 명확하게 보이고, 외부 클릭 처리 로직이 해당 요소 바로 옆에 있어서 이해하기 쉽거든요.</p><hr><h2 id="keypress" tabindex="-1"><a class="header-anchor" href="#keypress"><span><code>keyPress</code></span></a></h2><p><code>keyPress</code>는 훅은 아니지만, 모달에서 키보드 이벤트를 처리할 때 자주 사용하는 유틸리티 함수입니다. 모달에서 <kbd>ESC</kbd> 키로 닫기, <kbd>Enter</kbd> 키로 확인하기 같은 기능을 구현하다 보면 이런 코드를 자주 작성하게 됩니다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">handleKeyPress</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">&#39;Escape&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">closeModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">&#39;Enter&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">handleConfirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">&#39;ArrowUp&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">selectPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">&#39;ArrowDown&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">selectNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>키가 많아질수록 조건문이 길어지고, 키 이름을 하드코딩하다 보면 오타도 생기고 가독성도 떨어집니다. 그래서 좀 더 선언적으로 하면 좋을 것 같은데요. <code>onClick</code>, <code>onInput</code>처럼 키보드의 특정 동작도 핸들러로 따로 등록할 수 있게 하면 어떨까요? &quot;어떻게 처리하는지&quot;보다는 &quot;무엇을 처리하는지&quot;에 집중할 수 있습니다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">keyPress</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">handlers<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> preventDefault <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> caseSensitive <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> key <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 기본 키 매핑</span></span>
<span class="line">    <span class="token keyword">const</span> keyMap <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string-property property">&#39;Enter&#39;</span><span class="token operator">:</span> <span class="token string">&#39;onEnter&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-property property">&#39;Escape&#39;</span><span class="token operator">:</span> <span class="token string">&#39;onEscape&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-property property">&#39; &#39;</span><span class="token operator">:</span> <span class="token string">&#39;onSpace&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-property property">&#39;Tab&#39;</span><span class="token operator">:</span> <span class="token string">&#39;onTab&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-property property">&#39;ArrowUp&#39;</span><span class="token operator">:</span> <span class="token string">&#39;onArrowUp&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-property property">&#39;ArrowDown&#39;</span><span class="token operator">:</span> <span class="token string">&#39;onArrowDown&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-property property">&#39;ArrowLeft&#39;</span><span class="token operator">:</span> <span class="token string">&#39;onArrowLeft&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string-property property">&#39;ArrowRight&#39;</span><span class="token operator">:</span> <span class="token string">&#39;onArrowRight&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> handler<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>keyMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      handler <span class="token operator">=</span> handlers<span class="token punctuation">[</span>keyMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 커스텀 키 처리</span></span>
<span class="line">      <span class="token keyword">const</span> normalizedKey <span class="token operator">=</span> caseSensitive <span class="token operator">?</span> key <span class="token operator">:</span> key<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      handler <span class="token operator">=</span> handlers<span class="token punctuation">[</span>normalizedKey<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> shouldPreventDefault <span class="token operator">=</span> </span>
<span class="line">        preventDefault <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token operator">||</span> </span>
<span class="line">        <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>preventDefault<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> preventDefault<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldPreventDefault<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token function">handler</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">사용법</p><p>모달에서는 이렇게 사용할 수 있어요.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">ConfirmModal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> message<span class="token punctuation">,</span> onConfirm<span class="token punctuation">,</span> onCancel <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> </span>
<span class="line">      <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>modal-overlay<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name">tabIndex</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token attr-name">onKeyPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">keyPress</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">onEnter</span><span class="token operator">:</span> onConfirm<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">onEscape</span><span class="token operator">:</span> onCancel</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>modal-content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onConfirm<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">확인 (Enter)</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onCancel<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">취소 (ESC)</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>드롭다운 메뉴에서 화살표 키로 선택하기</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">DropdownMenu</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> items<span class="token punctuation">,</span> onSelect<span class="token punctuation">,</span> onClose <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>selectedIndex<span class="token punctuation">,</span> setSelectedIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span></span>
<span class="line">      <span class="token attr-name">tabIndex</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token attr-name">onKeyPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">keyPress</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function-variable function">onArrowUp</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setSelectedIndex</span><span class="token punctuation">(</span><span class="token parameter">prev</span> <span class="token operator">=&gt;</span> </span>
<span class="line">          prev <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> prev <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">onArrowDown</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setSelectedIndex</span><span class="token punctuation">(</span><span class="token parameter">prev</span> <span class="token operator">=&gt;</span> </span>
<span class="line">          prev <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> prev <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">onEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">onSelect</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>selectedIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">onEscape</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> </span>
<span class="line">        <span class="token literal-property property">preventDefault</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;ArrowUp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ArrowDown&#39;</span><span class="token punctuation">]</span> </span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>index <span class="token operator">===</span> selectedIndex <span class="token operator">?</span> <span class="token string">&#39;selected&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>키 이벤트가 어느 요소에서 발생하는지 명확하고, 처리 로직이 바로 옆에 있어서 이해하기 쉬워요. 멀리 떨어진 곳에서 복잡한 조건문으로 키 이벤트를 처리하는 것보다 훨씬 직관적입니다. 오타 방지도 중요한 장점이에요. <code>onEnter</code>, <code>onEscape</code> 같은 프로퍼티는 IDE에서 자동완성도 지원하고, TypeScript를 쓰면 오타 시 에러도 잡아줍니다. 작은 유틸리티지만 키보드 이벤트 처리가 훨씬 깔끔해져서 자주 사용하고 있어요.</p></div><hr><h2 id="usemodal" tabindex="-1"><a class="header-anchor" href="#usemodal"><span><code>useModal</code></span></a></h2><p>네이티브 <code>confirm()</code>은 사용법이 간편하지만 스타일링이 불가능하고, 커스텀 모달을 만들면 콜백으로 결과를 처리해야 해서 복잡해집니다.</p><p>이런 코드 많이 써보셨죠?</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">handleDelete</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&quot;정말 삭제하시겠습니까?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">deleteItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;삭제되었습니다!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>네이티브 API는 스타일링 불가능, 브라우저별로 다른 UI, 모바일에서 어색한 UX, 브랜딩 불가 같은 문제점들이 있습니다. 저는 네이티브 API와 동일한 사용법을 제공하면서도 완전히 커스터마이징 가능한 모달 시스템을 만드는 걸 목표로 했습니다. <code>await modal.confirm()</code>처럼 사용할 수 있게 하는 거죠.</p><h3 id="원리" tabindex="-1"><a class="header-anchor" href="#원리"><span>원리</span></a></h3><p>핵심은 Promise를 미리 만들어두고, 모달의 확인/취소 버튼에서 resolve를 호출하는 방식입니다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">showConfirm</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 1. Promise를 만들고 resolve, reject 함수를 저장</span></span>
<span class="line">  <span class="token keyword">let</span> resolvePromise<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    resolvePromise <span class="token operator">=</span> resolve<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 2. 모달을 띄우고 resolve 함수를 전달</span></span>
<span class="line">  <span class="token function">setModalState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">isOpen</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    message<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">onConfirm</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolvePromise</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">// 확인 버튼</span></span>
<span class="line">    <span class="token function-variable function">onCancel</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolvePromise</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token comment">// 취소 버튼</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 3. Promise를 반환 (사용자가 버튼을 누를 때까지 기다림)</span></span>
<span class="line">  <span class="token keyword">return</span> promise<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>모달 컴포넌트에서는 전달받은 핸들러를 그대로 사용합니다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Modal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> isOpen<span class="token punctuation">,</span> message<span class="token punctuation">,</span> onConfirm<span class="token punctuation">,</span> onCancel <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isOpen<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>modal-overlay<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>modal<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onConfirm<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">확인</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onCancel<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">취소</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>실제 구현입니다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">ModalProvider</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>modalState<span class="token punctuation">,</span> setModalState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">isOpen</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">onConfirm</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">onCancel</span><span class="token operator">:</span> <span class="token keyword">null</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> showConfirm <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setModalState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">isOpen</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        message<span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">onConfirm</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">setModalState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">isOpen</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">onConfirm</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">onCancel</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">onCancel</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">setModalState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">isOpen</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">onConfirm</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">onCancel</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ModalContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">confirm</span><span class="token operator">:</span> showConfirm <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Modal</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>modalState<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ModalContext.Provider</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">사용법</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token function">useModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleDelete</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 이 함수가 호출되면 Promise가 생성되고, 사용자가 버튼을 누를 때까지 기다림</span></span>
<span class="line">    <span class="token keyword">const</span> confirmed <span class="token operator">=</span> <span class="token keyword">await</span> modal<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&quot;정말 삭제하시겠습니까?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>confirmed<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">await</span> <span class="token function">deleteItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleDelete<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">삭제</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>네이티브와 거의 동일한 사용법을 유지하면서도 완전히 커스터마이징 가능하다는 게 핵심이에요. Promise가 생성되자마자 모달이 뜨고, 사용자가 확인/취소 버튼을 누르면 그 결과로 Promise가 resolve되는 방식입니다. 콜백 지옥 대신 깔끔한 <code>async</code>/<code>await</code>를 쓸 수 있고, 브랜드에 맞는 디자인도 적용할 수 있어서 실무에서 정말 유용했습니다. 커스텀에서는 <code>confirm</code>에 리액트 노드를 넣을 수도 있고, 제목과 내용은 물론 예/아니오 버튼까지 커스텀이 가능합니다.</p></div><hr><h2 id="리액트-훅을-만들며" tabindex="-1"><a class="header-anchor" href="#리액트-훅을-만들며"><span>리액트 훅을 만들며</span></a></h2><p>이처럼 모달 하나를 만드는 데도 생각보다 많은 패턴들이 숨어있었습니다. 상태 관리, 외부 클릭 감지, 키보드 이벤트 처리, Promise 기반 결과 처리... 각각은 작은 문제들이지만, 매번 반복해서 구현하다 보면 코드가 길어지고 실수도 생기죠.</p><p>이런 반복적인 패턴들을 훅이나 유틸리티 함수로 추상화해 두면, 코드가 훨씬 간결하고 의도가 명확해집니다. 무엇보다 같은 문제를 두 번 해결할 필요가 없어지는 게 가장 큰 장점입니다.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// Before: 매번 반복</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>isOpen<span class="token punctuation">,</span> setIsOpen<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">toggle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setIsOpen</span><span class="token punctuation">(</span><span class="token operator">!</span>isOpen<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// ... 복잡한 외부 클릭 로직</span></span>
<span class="line"><span class="token comment">// ... 복잡한 키보드 이벤트 로직</span></span>
<span class="line"><span class="token comment">// After: 추상화 활용</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>isOpen<span class="token punctuation">,</span> toggle<span class="token punctuation">,</span> open<span class="token punctuation">,</span> close<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> onOutsideClick <span class="token operator">=</span> <span class="token function">useOutsideClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> </span>
<span class="line">  <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">onOutsideClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">  <span class="token attr-name">onKeyPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">keyPress</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">onEscape</span><span class="token operator">:</span> close <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line"><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>훨씬 읽기 쉽고, 의도도 명확하죠? 실무에서 자주 마주치는 패턴들이 정말 많습니다. 폼 처리, 데이터 페칭, 인피니트 스크롤, 디바운싱... 이런 것들도 잘 추상화해 두면 개발 경험을 크게 개선할 수 있죠. 오늘 이 글을 읽고, 댓글로 또 어떤 고민들이 있는지 알려주시면 열심히 모아볼게요!</p>`,58)),m(" TODO: add ARTICLE CARD "),a(c,l(i({title:"현업에서 ‘모달’에 자주 쓰는 리액트 훅 모음",desc:"리액트를 배우고 나서 실제 프로젝트를 시작하면, 예상보다 많은 고민이 생깁니다. ”이 로직을 매번 반복해서 써야 하나?”, ”다른 개발자들은 이런 상황을 어떻게 처리하지?”, ”내 코드가 너무 길어지는 것 같은데...” 같은 생각들이요. 제가 실무에서 느낀 점은 자주 사용하는 패턴들을 잘 추상화해 놓으면, 코드 중복을 줄이고 훨씬 직관적인 코드를 작성할 수 있다는 점이었습니다. 이번 글에서는 ”모달”을 만든다고 가정하고, 여기에 어떤 훅들이 쓰일 수 있는지 알아볼게요. 모달 하나에도 여러 UX가 있고, 이걸 개발하려면 번거로운 부분이 있기 때문입니다.",link:"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3267.html",logo:"https://yozm.wishket.com/favicon.ico",background:"rgba(84,7,224,0.2)"})),null,16)])}const M=r(f,[["render",x]]),O=JSON.parse('{"path":"/yozm.wishket.com/3267.html","title":"현업에서 ‘모달’에 자주 쓰는 리액트 훅 모음","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"현업에서 ‘모달’에 자주 쓰는 리액트 훅 모음","description":"Article(s) > 현업에서 ‘모달’에 자주 쓰는 리액트 훅 모음","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","yozm.wishket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"현업에서 ‘모달’에 자주 쓰는 리액트 훅 모음\\",\\"image\\":[\\"https://wishket.com/media/news/3267/dd.gif\\"],\\"datePublished\\":\\"2025-08-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"스벨트전도사\\",\\"url\\":\\"https://yozm.wishket.com/magazine/@svelte_jeondosa/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3267.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"현업에서 ‘모달’에 자주 쓰는 리액트 훅 모음"}],["meta",{"property":"og:description","content":"Article(s) > 현업에서 ‘모달’에 자주 쓰는 리액트 훅 모음"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/3267/dd.gif"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/3267/dd.gif"}],["meta",{"name":"twitter:image:alt","content":"현업에서 ‘모달’에 자주 쓰는 리액트 훅 모음"}],["meta",{"property":"article:author","content":"스벨트전도사"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-08-01T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 현업에서 ‘모달’에 자주 쓰는 리액트 훅 모음"},{"property":"og:description","content":"현업에서 ‘모달’에 자주 쓰는 리액트 훅 모음"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3267.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2025-08-01T00:00:00.000Z","isOriginal":false,"author":[{"name":"스벨트전도사","url":"https://yozm.wishket.com/magazine/@svelte_jeondosa/"}],"cover":"https://yozm.wishket.com/media/news/3267/dd.gif"},"git":{},"readingTime":{"minutes":2.98,"words":893},"filePathRelative":"yozm.wishket.com/3267.md","copyright":{"author":"스벨트전도사"}}');export{M as comp,O as data};
