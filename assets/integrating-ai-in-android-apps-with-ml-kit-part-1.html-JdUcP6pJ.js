import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as e,b as c,a as h,t as v,n as d,g as u,w as i,e as a,r as p,o as f}from"./app-BVguHYKu.js";const b={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"},_={class:"hint-container info"},x={href:"https://proandroiddev.com/integrating-ai-in-android-apps-with-ml-kit-part-1-98de56567bf5?sk=2172638e821b740953ff0c515399eb77",target:"_blank",rel:"noopener noreferrer"},I={id:"declaring-permissions-in-androidmanifest-xml",tabindex:"-1"},M={class:"header-anchor",href:"#declaring-permissions-in-androidmanifest-xml"},P={class:"hint-container info"},T={href:"https://proandroiddev.com/integrating-ai-in-android-apps-with-ml-kit-part-1-98de56567bf5?sk=2172638e821b740953ff0c515399eb77",target:"_blank",rel:"noopener noreferrer"};function L(m,n){const r=p("VPCard"),t=p("router-link"),o=p("VPIcon"),l=p("SiteInfo");return f(),g("div",null,[s("h1",y,[s("a",w,[s("span",null,v(m.$frontmatter.title)+" 관련",1)])]),e(r,d(u({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",A,[s("ul",null,[s("li",null,[e(t,{to:"#_1-what-is-ml-kit"},{default:i(()=>n[0]||(n[0]=[a("1. What is ML Kit?")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#_2-setting-up-ml-kit-in-an-android-project"},{default:i(()=>n[1]||(n[1]=[a("2. Setting Up ML Kit in an Android Project")])),_:1,__:[1]})]),s("li",null,[e(t,{to:"#step-1-add-dependencies"},{default:i(()=>n[2]||(n[2]=[a("Step 1: Add Dependencies")])),_:1,__:[2]})]),s("li",null,[e(t,{to:"#step-2-configure-permissions"},{default:i(()=>n[3]||(n[3]=[a("Step 2: Configure Permissions")])),_:1,__:[3]})]),s("li",null,[e(t,{to:"#declaring-permissions-in-androidmanifest-xml"},{default:i(()=>[n[4]||(n[4]=a("Declaring Permissions in ")),e(o,{icon:"fa-brands fa-android"}),n[5]||(n[5]=a("``AndroidManifest.xml`"))]),_:1,__:[4,5]})]),s("li",null,[e(t,{to:"#requesting-dangerous-permissions-at-runtime"},{default:i(()=>n[6]||(n[6]=[a("Requesting Dangerous Permissions at Runtime")])),_:1,__:[6]})]),s("li",null,[e(t,{to:"#_3-key-ml-kit-apis-and-their-use-cases"},{default:i(()=>n[7]||(n[7]=[a("3. Key ML Kit APIs and Their Use Cases")])),_:1,__:[7]}),s("ul",null,[s("li",null,[e(t,{to:"#_1-text-recognition"},{default:i(()=>n[8]||(n[8]=[a("1. Text Recognition")])),_:1,__:[8]})]),s("li",null,[e(t,{to:"#_2-face-detection"},{default:i(()=>n[9]||(n[9]=[a("2. Face Detection")])),_:1,__:[9]})]),s("li",null,[e(t,{to:"#_3-image-labeling"},{default:i(()=>n[10]||(n[10]=[a("3. Image Labeling")])),_:1,__:[10]})]),s("li",null,[e(t,{to:"#_4-barcode-scanning"},{default:i(()=>n[11]||(n[11]=[a("4. Barcode Scanning")])),_:1,__:[11]})]),s("li",null,[e(t,{to:"#_5-pose-detection"},{default:i(()=>n[12]||(n[12]=[a("5. Pose Detection")])),_:1,__:[12]})])])]),s("li",null,[e(t,{to:"#_4-implementation-guide-for-popular-ml-kit-apis"},{default:i(()=>n[13]||(n[13]=[a("4. Implementation Guide for Popular ML Kit APIs")])),_:1,__:[13]}),s("ul",null,[s("li",null,[e(t,{to:"#text-recognition"},{default:i(()=>n[14]||(n[14]=[a("Text Recognition")])),_:1,__:[14]})]),s("li",null,[e(t,{to:"#face-detection"},{default:i(()=>n[15]||(n[15]=[a("Face Detection")])),_:1,__:[15]})]),s("li",null,[e(t,{to:"#image-labeling"},{default:i(()=>n[16]||(n[16]=[a("Image Labeling")])),_:1,__:[16]})])])]),s("li",null,[e(t,{to:"#_5-custom-models-and-firebase-integration"},{default:i(()=>n[17]||(n[17]=[a("5. Custom Models and Firebase Integration")])),_:1,__:[17]}),s("ul",null,[s("li",null,[e(t,{to:"#integrate-a-custom-model"},{default:i(()=>n[18]||(n[18]=[a("Integrate a Custom Model:")])),_:1,__:[18]})]),s("li",null,[e(t,{to:"#_2-download-and-use-the-model-in-code"},{default:i(()=>n[19]||(n[19]=[a("2.Download and Use the Model in Code")])),_:1,__:[19]})])])]),s("li",null,[e(t,{to:"#_6-best-practices-and-performance-tips"},{default:i(()=>n[20]||(n[20]=[a("6. Best Practices and Performance Tips")])),_:1,__:[20]}),s("ul",null,[s("li",null,[e(t,{to:"#_1-run-ml-kit-on-a-separate-thread"},{default:i(()=>n[21]||(n[21]=[a("1.Run ML Kit on a Separate Thread")])),_:1,__:[21]})]),s("li",null,[e(t,{to:"#_2-optimize-model-size"},{default:i(()=>n[22]||(n[22]=[a("2.Optimize Model Size")])),_:1,__:[22]})]),s("li",null,[e(t,{to:"#_3-minimize-camera-access"},{default:i(()=>n[23]||(n[23]=[a("3.Minimize Camera Access")])),_:1,__:[23]})]),s("li",null,[e(t,{to:"#_4-use-cloud-apis-wisely"},{default:i(()=>n[24]||(n[24]=[a("4.Use Cloud APIs Wisely")])),_:1,__:[24]})])])]),s("li",null,[e(t,{to:"#_7-conclusion"},{default:i(()=>n[25]||(n[25]=[a("7. Conclusion")])),_:1,__:[25]})])])]),n[40]||(n[40]=s("hr",null,null,-1)),e(l,{name:"Integrating AI in Android Apps with ML Kit | Part 1",desc:"With the rise of AI, integrating intelligent features into mobile apps has become essential for providing an engaging user experience. Google's ML Kit makes this easy for Android developers by providing a powerful suite of machine learning tools directly in the app. This guide will take you",url:"https://droidcon.com/integrating-ai-in-android-apps-with-ml-kit-part-1",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",preview:"https://droidcon.com/wp-content/uploads/2024/11/0_2TTBI_E3ctKXN2eF-1024x1024.webp"}),s("div",_,[n[29]||(n[29]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[s("a",x,[n[26]||(n[26]=a("Click here to read for FREE if you are not a premium user. (")),e(o,{icon:"fa-brands fa-medium"}),n[27]||(n[27]=s("code",null,"proandroiddev",-1)),n[28]||(n[28]=a(")"))])]),e(l,{name:"Integrating AI in Android Apps with ML Kit | Part 1",desc:"Photo by Ben Kolde on Unsplash",url:"https://proandroiddev.com/integrating-ai-in-android-apps-with-ml-kit-part-1-98de56567bf5?sk=2172638e821b740953ff0c515399eb77/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/da:true/resize:fit:1200/0*2TTBI_E3ctKXN2eF"})]),n[41]||(n[41]=c(`<p>With the rise of AI, integrating intelligent features into mobile apps has become essential for providing an engaging user experience. Google&#39;s <strong>ML Kit</strong> makes this easy for Android developers by providing a powerful suite of machine learning tools directly in the app. This guide will take you from ML Kit basics to implementing real-world applications in your app. By the end, you&#39;ll be equipped to add AI features to your app, from text recognition to pose estimation and beyond!</p><hr><h2 id="_1-what-is-ml-kit" tabindex="-1"><a class="header-anchor" href="#_1-what-is-ml-kit"><span>1. What is ML Kit?</span></a></h2><p><strong>ML Kit</strong> is Google&#39;s machine learning SDK that makes it easy to integrate powerful machine learning models into mobile applications. ML Kit offers both <strong>on-device</strong> and <strong>cloud-based APIs</strong>, covering a wide range of use cases like text recognition, face detection, image labeling, and pose estimation.</p><div class="hint-container important"><p class="hint-container-title">Key Benefits of ML Kit</p><ul><li><strong>Ease of Use</strong>: Pre-trained models save time and resources.</li><li><strong>Performance</strong>: On-device processing is fast and secure.</li><li><strong>Cross-platform Support</strong>: Available for both Android and iOS.</li><li><strong>Custom Models</strong>: Allows integration of your own custom TensorFlow Lite models.</li></ul></div><hr><h2 id="_2-setting-up-ml-kit-in-an-android-project" tabindex="-1"><a class="header-anchor" href="#_2-setting-up-ml-kit-in-an-android-project"><span>2. Setting Up ML Kit in an Android Project</span></a></h2><p>Before using ML Kit, you&#39;ll need to configure your Android project properly. This includes adding dependencies, setting up permissions, and, if needed, linking to Firebase.</p><hr><h2 id="step-1-add-dependencies" tabindex="-1"><a class="header-anchor" href="#step-1-add-dependencies"><span>Step 1: Add Dependencies</span></a></h2><p>Add the required ML Kit dependencies to your build.gradle file. Here&#39;s an example setup with Text Recognition, Face Detection, and Image Labeling APIs:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="app/build.gradle"><span>app/build.gradle</span></div><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line">dependencies <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// For ML Kit Text Recognition</span></span>
<span class="line">    implementation <span class="token string">&#39;com.google.mlkit:text-recognition:16.0.0&#39;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// For ML Kit Face Detection</span></span>
<span class="line">    implementation <span class="token string">&#39;com.google.mlkit:face-detection:16.1.3&#39;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// For ML Kit Image Labeling</span></span>
<span class="line">    implementation <span class="token string">&#39;com.google.mlkit:image-labeling:17.0.7&#39;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// For Firebase (if cloud-based ML Kit is needed)</span></span>
<span class="line">    implementation <span class="token string">&#39;com.google.firebase:firebase-ml-model-interpreter:22.0.4&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="step-2-configure-permissions" tabindex="-1"><a class="header-anchor" href="#step-2-configure-permissions"><span>Step 2: Configure Permissions</span></a></h2><p>ML Kit relies on certain permissions depending on the feature you&#39;re implementing. For instance, camera access is essential for real-time tasks like face detection, barcode scanning, and pose estimation, while network access (Internet permission) is required if you&#39;re using cloud-based APIs or Firebase integration.</p><hr>`,16)),s("h2",I,[s("a",M,[s("span",null,[n[30]||(n[30]=a("Declaring Permissions in ")),e(o,{icon:"fa-brands fa-android"}),n[31]||(n[31]=a("``AndroidManifest.xml`"))])])]),s("p",null,[n[32]||(n[32]=a("To start, add the necessary permissions in your ")),e(o,{icon:"fa-brands fa-android"}),n[33]||(n[33]=a("``AndroidManifest.xml` file. This step informs the Android system about the permissions your app intends to use, but it's only the first step for permissions like the camera."))]),n[42]||(n[42]=c(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="AndroidManifest.xml"><span>AndroidManifest.xml</span></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.permission.CAMERA<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.permission.INTERNET<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><ul><li><code>android.permission.CAMERA</code>: Needed to access the camera for on-device image processing tasks.</li><li><code>android.permission.INTERNET</code>: Required for cloud-based ML Kit APIs and Firebase functionality.</li></ul></div><hr><h2 id="requesting-dangerous-permissions-at-runtime" tabindex="-1"><a class="header-anchor" href="#requesting-dangerous-permissions-at-runtime"><span>Requesting Dangerous Permissions at Runtime</span></a></h2><p>The CAMERA permission is categorized as a “dangerous permission” in Android, which means that simply declaring it in the manifest file isn&#39;t enough. You also need to <strong>request this permission at runtime</strong> and handle the user&#39;s response. Here&#39;s a full approach:</p><p><strong>First, check if the Permission is Granted</strong>: Before accessing the camera, check if the CAMERA permission has already been granted by the user:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">private</span> <span class="token keyword">val</span> CAMERA_REQUEST_CODE <span class="token operator">=</span> <span class="token number">1001</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Call this function to check or request camera permission</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">checkCameraPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ContextCompat<span class="token punctuation">.</span><span class="token function">checkSelfPermission</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CAMERA<span class="token punctuation">)</span> <span class="token operator">!=</span> PackageManager<span class="token punctuation">.</span>PERMISSION_GRANTED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// If permission is not granted, check if we should show an explanation</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ActivityCompat<span class="token punctuation">.</span><span class="token function">shouldShowRequestPermissionRationale</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CAMERA<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Show an explanation to the user asynchronously</span></span>
<span class="line">            AlertDialog<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Camera Permission Required&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;This app requires access to the camera to perform ML Kit features like face detection.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;OK&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> _<span class="token punctuation">,</span> _ <span class="token operator">-&gt;</span></span>
<span class="line">                    <span class="token comment">// Request the permission after explanation</span></span>
<span class="line">                    ActivityCompat<span class="token punctuation">.</span><span class="token function">requestPermissions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span>Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CAMERA<span class="token punctuation">)</span><span class="token punctuation">,</span> CAMERA_REQUEST_CODE<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">setNegativeButton</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Cancel&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// No explanation needed; directly request the permission</span></span>
<span class="line">            ActivityCompat<span class="token punctuation">.</span><span class="token function">requestPermissions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span>Manifest<span class="token punctuation">.</span>permission<span class="token punctuation">.</span>CAMERA<span class="token punctuation">)</span><span class="token punctuation">,</span> CAMERA_REQUEST_CODE<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Permission is already granted; proceed with camera operations</span></span>
<span class="line">        <span class="token function">startCameraOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Handle the permission request response</span></span>
<span class="line"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span>requestCode<span class="token operator">:</span> Int<span class="token punctuation">,</span> permissions<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token keyword">out</span> String<span class="token operator">&gt;</span><span class="token punctuation">,</span> grantResults<span class="token operator">:</span> IntArray<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRequestPermissionsResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> permissions<span class="token punctuation">,</span> grantResults<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCode <span class="token operator">==</span> CAMERA_REQUEST_CODE<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>grantResults<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> grantResults<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>PERMISSION_GRANTED<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Permission was granted; proceed with camera operations</span></span>
<span class="line">            <span class="token function">startCameraOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Permission denied; show a message explaining why the camera is needed</span></span>
<span class="line">            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Camera permission is required to use this feature.&quot;</span></span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Dummy function to represent starting camera operations</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">startCameraOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Your code to start camera or ML Kit feature here if needed?</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_3-key-ml-kit-apis-and-their-use-cases" tabindex="-1"><a class="header-anchor" href="#_3-key-ml-kit-apis-and-their-use-cases"><span>3. Key ML Kit APIs and Their Use Cases</span></a></h2><h3 id="_1-text-recognition" tabindex="-1"><a class="header-anchor" href="#_1-text-recognition"><span>1. Text Recognition</span></a></h3><ul><li><strong>Use case</strong>: Scanning and extracting text from images, such as receipts, IDs, or documents.</li></ul><h3 id="_2-face-detection" tabindex="-1"><a class="header-anchor" href="#_2-face-detection"><span>2. Face Detection</span></a></h3><ul><li><strong>Use case</strong>: Identifying facial features in real-time for AR effects, emotion detection, or filters.</li></ul><h3 id="_3-image-labeling" tabindex="-1"><a class="header-anchor" href="#_3-image-labeling"><span>3. Image Labeling</span></a></h3><ul><li><strong>Use case</strong>: Categorizing objects in images automatically for photo galleries, content recommendations, etc.</li></ul><h3 id="_4-barcode-scanning" tabindex="-1"><a class="header-anchor" href="#_4-barcode-scanning"><span>4. Barcode Scanning</span></a></h3><ul><li><strong>Use case</strong>: Useful in e-commerce and inventory management for quickly scanning product barcodes.</li></ul><h3 id="_5-pose-detection" tabindex="-1"><a class="header-anchor" href="#_5-pose-detection"><span>5. Pose Detection</span></a></h3><ul><li><strong>Use case</strong>: Tracking user movements for fitness apps, dance applications, and gesture control.</li></ul><p>Each API is designed with flexibility to work either fully offline (on-device) or, in some cases, with cloud processing.</p><hr><h2 id="_4-implementation-guide-for-popular-ml-kit-apis" tabindex="-1"><a class="header-anchor" href="#_4-implementation-guide-for-popular-ml-kit-apis"><span>4. Implementation Guide for Popular ML Kit APIs</span></a></h2><p>Let&#39;s dive deeper into implementing some of the most popular ML Kit features.</p><h3 id="text-recognition" tabindex="-1"><a class="header-anchor" href="#text-recognition"><span>Text Recognition</span></a></h3><h4 id="_1-initialize-the-textrecognizer" tabindex="-1"><a class="header-anchor" href="#_1-initialize-the-textrecognizer"><span>1. Initialize the TextRecognizer</span></a></h4><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> textRecognizer <span class="token operator">=</span> TextRecognition<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span>TextRecognizerOptions<span class="token punctuation">.</span>DEFAULT_OPTIONS<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-prepare-the-input-image" tabindex="-1"><a class="header-anchor" href="#_2-prepare-the-input-image"><span>2. Prepare the Input Image</span></a></h4><p>Convert the image into an ML Kit-compatible format:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> image <span class="token operator">=</span> InputImage<span class="token punctuation">.</span><span class="token function">fromBitmap</span><span class="token punctuation">(</span>yourBitmap<span class="token punctuation">,</span> rotationDegree<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_3-process-the-image" tabindex="-1"><a class="header-anchor" href="#_3-process-the-image"><span>3. Process the Image</span></a></h4><p>Call the process method and handle the result or error:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">textRecognizer<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">addOnSuccessListener</span> <span class="token punctuation">{</span> visionText <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token comment">// Process recognized text</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>block <span class="token keyword">in</span> visionText<span class="token punctuation">.</span>textBlocks<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">val</span> text <span class="token operator">=</span> block<span class="token punctuation">.</span>text</span>
<span class="line">            <span class="token comment">// Use text as needed</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">addOnFailureListener</span> <span class="token punctuation">{</span> e <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token comment">// Handle error</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-display-results" tabindex="-1"><a class="header-anchor" href="#_4-display-results"><span>4. Display Results</span></a></h4><p>Use a TextView or overlay to display the recognized text on the UI.</p><h3 id="face-detection" tabindex="-1"><a class="header-anchor" href="#face-detection"><span>Face Detection</span></a></h3><h4 id="_1-initialize-the-facedetector" tabindex="-1"><a class="header-anchor" href="#_1-initialize-the-facedetector"><span>1. Initialize the FaceDetector</span></a></h4><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> faceDetector <span class="token operator">=</span> FaceDetection<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span>FaceDetectorOptions<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">setPerformanceMode</span><span class="token punctuation">(</span>FaceDetectorOptions<span class="token punctuation">.</span>PERFORMANCE_MODE_FAST<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-process-an-image-for-faces" tabindex="-1"><a class="header-anchor" href="#_2-process-an-image-for-faces"><span>2. Process an Image for Faces</span></a></h4><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">faceDetector<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">addOnSuccessListener</span> <span class="token punctuation">{</span> faces <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>face <span class="token keyword">in</span> faces<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">val</span> bounds <span class="token operator">=</span> face<span class="token punctuation">.</span>boundingBox</span>
<span class="line">            <span class="token keyword">val</span> leftEyeOpenProb <span class="token operator">=</span> face<span class="token punctuation">.</span>leftEyeOpenProbability</span>
<span class="line">            <span class="token comment">// Draw bounding boxes or overlay effects</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">addOnFailureListener</span> <span class="token punctuation">{</span> e <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token comment">// Handle error</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="image-labeling" tabindex="-1"><a class="header-anchor" href="#image-labeling"><span>Image Labeling</span></a></h3><h4 id="_1-initialize-the-imagelabeler" tabindex="-1"><a class="header-anchor" href="#_1-initialize-the-imagelabeler"><span>1. Initialize the ImageLabeler</span></a></h4><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> labeler <span class="token operator">=</span> ImageLabeling<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span>ImageLabelerOptions<span class="token punctuation">.</span>DEFAULT_OPTIONS<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-process-an-image" tabindex="-1"><a class="header-anchor" href="#_2-process-an-image"><span>2. Process an Image</span></a></h4><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">labeler<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">addOnSuccessListener</span> <span class="token punctuation">{</span> labels <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>label <span class="token keyword">in</span> labels<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">val</span> text <span class="token operator">=</span> label<span class="token punctuation">.</span>text</span>
<span class="line">            <span class="token keyword">val</span> confidence <span class="token operator">=</span> label<span class="token punctuation">.</span>confidence</span>
<span class="line">            <span class="token comment">// Display or categorize labels</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">addOnFailureListener</span> <span class="token punctuation">{</span> e <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token comment">// Handle error</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_5-custom-models-and-firebase-integration" tabindex="-1"><a class="header-anchor" href="#_5-custom-models-and-firebase-integration"><span>5. Custom Models and Firebase Integration</span></a></h2><p>If you have a specific model that ML Kit doesn’t offer, you can use custom TensorFlow Lite models with Firebase. This enables you to upload and manage your own models in Firebase.</p><h3 id="integrate-a-custom-model" tabindex="-1"><a class="header-anchor" href="#integrate-a-custom-model"><span>Integrate a Custom Model:</span></a></h3><h4 id="_1-upload-your-model-to-firebase-console" tabindex="-1"><a class="header-anchor" href="#_1-upload-your-model-to-firebase-console"><span>1.Upload your model to Firebase Console</span></a></h4><p>under “ML Kit” -&gt; “Custom” Models.</p><h3 id="_2-download-and-use-the-model-in-code" tabindex="-1"><a class="header-anchor" href="#_2-download-and-use-the-model-in-code"><span>2.Download and Use the Model in Code</span></a></h3><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> modelInterpreter <span class="token operator">=</span> FirebaseModelInterpreter<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>firebaseModelOptions<span class="token punctuation">)</span></span>
<span class="line">modelInterpreter<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">addOnSuccessListener</span> <span class="token punctuation">{</span> result <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token comment">// Process the results from custom model</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">addOnFailureListener</span> <span class="token punctuation">{</span> e <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token comment">// Handle error</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_6-best-practices-and-performance-tips" tabindex="-1"><a class="header-anchor" href="#_6-best-practices-and-performance-tips"><span>6. Best Practices and Performance Tips</span></a></h2><h3 id="_1-run-ml-kit-on-a-separate-thread" tabindex="-1"><a class="header-anchor" href="#_1-run-ml-kit-on-a-separate-thread"><span>1.Run ML Kit on a Separate Thread</span></a></h3><p>Avoid UI blocking by processing ML Kit functions in a background thread.</p><h3 id="_2-optimize-model-size" tabindex="-1"><a class="header-anchor" href="#_2-optimize-model-size"><span>2.Optimize Model Size</span></a></h3><p>Smaller models ensure faster and smoother performance, especially for on-device processing.</p><h3 id="_3-minimize-camera-access" tabindex="-1"><a class="header-anchor" href="#_3-minimize-camera-access"><span>3.Minimize Camera Access</span></a></h3><p>Release camera resources when not actively using ML Kit to save battery.</p><h3 id="_4-use-cloud-apis-wisely" tabindex="-1"><a class="header-anchor" href="#_4-use-cloud-apis-wisely"><span>4.Use Cloud APIs Wisely</span></a></h3><p>For highly accurate results or complex models, cloud-based APIs are great, but be mindful of data costs :p.</p><hr><h2 id="_7-conclusion" tabindex="-1"><a class="header-anchor" href="#_7-conclusion"><span>7. Conclusion</span></a></h2><p>ML Kit is a powerful and accessible tool for Android developers to integrate AI features directly into their apps. With this guide, you should now be equipped to add text recognition, face detection, image labeling, and even custom machine learning models to your applications. AI-powered apps are not only more interactive but can provide unique value that sets them apart from the competition.</p><hr>`,66)),s("div",P,[n[37]||(n[37]=s("p",{class:"hint-container-title"},"Stay Connected for More!",-1)),n[38]||(n[38]=s("p",null,[a("Thank you for reading! If you found this guide helpful, I’d love for you to"),s("strong",null,"follow me here on Medium"),a(". I regularly share tips, deep dives, and tutorials on Android development, AI integration, and the latest tools in the mobile development space. Following me ensures you won’t miss out on the latest in Android tech, coding best practices, and everything you need to build apps.")],-1)),n[39]||(n[39]=s("p",null,"Let’s keep learning and building amazing things together — see you in the next post!",-1)),s("p",null,[n[36]||(n[36]=a("This article is previously published on ")),s("a",T,[e(o,{icon:"fa-brands fa-medium"}),n[34]||(n[34]=s("code",null,"proandroiddev",-1)),n[35]||(n[35]=a(")"))])]),e(l,{name:"Integrating AI in Android Apps with ML Kit | Part 1",desc:"Photo by Ben Kolde on Unsplash",url:"https://proandroiddev.com/integrating-ai-in-android-apps-with-ml-kit-part-1-98de56567bf5?sk=2172638e821b740953ff0c515399eb77",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/da:true/resize:fit:1200/0*2TTBI_E3ctKXN2eF"})]),h(" TODO: add ARTICLE CARD "),e(r,d(u({title:"Integrating AI in Android Apps with ML Kit | Part 1",desc:"With the rise of AI, integrating intelligent features into mobile apps has become essential for providing an engaging user experience. Google's ML Kit makes this easy for Android developers by providing a powerful suite of machine learning tools directly in the app. This guide will take you",link:"https://chanhi2000.github.io/bookshelf/droidcon.com/integrating-ai-in-android-apps-with-ml-kit-part-1.html",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",background:"rgba(4,20,221,0.2)"})),null,16)])}const K=k(b,[["render",L]]),E=JSON.parse('{"path":"/droidcon.com/integrating-ai-in-android-apps-with-ml-kit-part-1.html","title":"Integrating AI in Android Apps with ML Kit | Part 1","lang":"en-US","frontmatter":{"lang":"en-US","title":"Integrating AI in Android Apps with ML Kit | Part 1","description":"Article(s) > Integrating AI in Android Apps with ML Kit | Part 1","icon":"fa-brands fa-android","category":["Java","Kotlin","Android","Article(s)"],"tag":["blog","droidcon.com","java","kotlin","android"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Integrating AI in Android Apps with ML Kit | Part 1\\",\\"image\\":[\\"https://droidcon.com/wp-content/uploads/2024/11/0_2TTBI_E3ctKXN2eF-1024x1024.webp\\"],\\"datePublished\\":\\"2024-11-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Eaz Software\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/integrating-ai-in-android-apps-with-ml-kit-part-1.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Integrating AI in Android Apps with ML Kit | Part 1"}],["meta",{"property":"og:description","content":"Article(s) > Integrating AI in Android Apps with ML Kit | Part 1"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://droidcon.com/wp-content/uploads/2024/11/0_2TTBI_E3ctKXN2eF-1024x1024.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://droidcon.com/wp-content/uploads/2024/11/0_2TTBI_E3ctKXN2eF-1024x1024.webp"}],["meta",{"name":"twitter:image:alt","content":"Integrating AI in Android Apps with ML Kit | Part 1"}],["meta",{"property":"article:author","content":"Eaz Software"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"droidcon.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-25T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Integrating AI in Android Apps with ML Kit | Part 1"},{"property":"og:description","content":"Integrating AI in Android Apps with ML Kit | Part 1"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/integrating-ai-in-android-apps-with-ml-kit-part-1.html"}]],"prev":"/programming/java-android/articles/README.md","date":"2024-11-25T00:00:00.000Z","isOriginal":false,"author":"Eaz Software","cover":"https://droidcon.com/wp-content/uploads/2024/11/0_2TTBI_E3ctKXN2eF-1024x1024.webp"},"git":{},"readingTime":{"minutes":6.01,"words":1802},"filePathRelative":"droidcon.com/integrating-ai-in-android-apps-with-ml-kit-part-1.md","copyright":{"author":"Eaz Software"}}');export{K as comp,E as data};
