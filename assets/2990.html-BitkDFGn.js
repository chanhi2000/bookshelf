import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as a,f as e,b as p,a as y,t as w,n as f,g as m,w as t,e as s,r as c,o as S}from"./app-BVguHYKu.js";const j={},D={id:"frontmatter-title-관련",tabindex:"-1"},A={class:"header-anchor",href:"#frontmatter-title-관련"},P={class:"table-of-contents"},I={href:"https://dzone.com/articles/open-source-dapr-for-spring-boot-developers",target:"_blank",rel:"noopener noreferrer"},T={href:"https://2024.springio.net/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://dapr.io/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://testcontainers.com/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://diagrid.io/blog/cloud-native-local-development",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/salaboy/example-voting-app",target:"_blank",rel:"noopener noreferrer"},C={href:"https://baeldung.com/spring-data-key-value",target:"_blank",rel:"noopener noreferrer"},M={href:"https://baeldung.com/spring-kafka",target:"_blank",rel:"noopener noreferrer"},R={href:"https://spring.io/projects/spring-pulsar#overview",target:"_blank",rel:"noopener noreferrer"},q={href:"https://spring.io/projects/spring-amqp",target:"_blank",rel:"noopener noreferrer"},B={href:"https://spring.io/guides/gs/messaging-rabbitmq",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://cloudevents.io/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://docs.dapr.io/reference/components-reference/supported-pubsub/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://youtu.be/pMGz54Gstas",target:"_blank",rel:"noopener noreferrer"},N={class:"hint-container info"};function O(k,n){const u=c("VPCard"),l=c("router-link"),d=c("SiteInfo"),o=c("VPIcon"),g=c("Tabs"),v=c("VidStack");return S(),h("div",null,[a("h1",D,[a("a",A,[a("span",null,w(k.$frontmatter.title)+" 관련",1)])]),e(u,f(m({title:"Spring > Article(s)",desc:"Article(s)",link:"/programming/java-spring/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a("nav",P,[a("ul",null,[a("li",null,[e(l,{to:"#개발자들이-있는-곳에서-출발하기"},{default:t(()=>n[0]||(n[0]=[s("개발자들이 있는 곳에서 출발하기")])),_:1,__:[0]})]),a("li",null,[e(l,{to:"#오늘날-쿠버네티스와-클라우드-네이티브-런타임"},{default:t(()=>n[1]||(n[1]=[s("오늘날 쿠버네티스와 클라우드 네이티브 런타임")])),_:1,__:[1]})]),a("li",null,[e(l,{to:"#내일-통합된-크로스-런타임-경험"},{default:t(()=>n[2]||(n[2]=[s("내일: 통합된 크로스 런타임 경험")])),_:1,__:[2]})]),a("li",null,[e(l,{to:"#스프링-부트-개발자의-경험-향상을-위한-대퍼-활용"},{default:t(()=>n[3]||(n[3]=[s("스프링 부트 개발자의 경험 향상을 위한 대퍼 활용")])),_:1,__:[3]})]),a("li",null,[e(l,{to:"#장점과-트레이드오프"},{default:t(()=>n[4]||(n[4]=[s("장점과 트레이드오프")])),_:1,__:[4]}),a("ul",null,[a("li",null,[e(l,{to:"#장점"},{default:t(()=>n[5]||(n[5]=[s("장점")])),_:1,__:[5]})]),a("li",null,[e(l,{to:"#트레이드오프"},{default:t(()=>n[6]||(n[6]=[s("트레이드오프")])),_:1,__:[6]})])])]),a("li",null,[e(l,{to:"#요약-및-다음-단계"},{default:t(()=>n[7]||(n[7]=[s("요약 및 다음 단계")])),_:1,__:[7]})])])]),n[58]||(n[58]=a("hr",null,null,-1)),e(d,{name:"스프링 부트 개발자를 위한 오픈소스 ‘Dapr’",desc:"스프링 부트와 대퍼(Dapr)를 함께 사용하면, 복잡한 쿠버네티스(Kubernetes, K8s) 클러스터 없이도 로컬에서 대퍼 기반의 애플리케이션을 실행, 테스트, 디버그할 수 있어 개발 과정이 더 간단해집니다. 오늘날 개발자들은 다양한 도구와 클라우드 서비스들을 평가하고 사용해야 하며, 복잡한 내부 개발 프로세스를 따라야 하는 상황에 직면합니다. 이번 글에서는 오픈소스 프로젝트인 대퍼가 스프링 부트 개발자들이 더 견고하고 환경에 종속되지 않는 애플리케이션을 구축하는 데 어떻게 도움을 줄 수 있는지 살펴봅니다.",url:"https://yozm.wishket.com/magazine/detail/2990/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/2990/001.png"}),a("p",null,[n[9]||(n[9]=s("본문은 요즘IT와 번역가 Jane Heo가 함께 토마스 비타레(Thomas Vitale), 마우리시오 살라티노(Mauricio Salatino)의 글 <")),a("a",I,[e(o,{icon:"fas fa-globe"}),n[8]||(n[8]=s("Open-Source Dapr for Spring Boot Developers"))]),n[10]||(n[10]=s(">을 번역한 글입니다. 필자인 토마스 비타레는 1985년에 설립된 국제적인 IT 회사인 시스터매틱(Systematic)에서 소프트웨어 아키텍트로 활동 중이며, 마우리시오 살라티노는 대퍼(Dapr)를 기반으로 한 관리형 서비스와 엔터프라이즈 솔루션을 제공하는 다이아그리드(Diagrid)에서 OSS 소프트웨어 엔지니어로 근무하고 있습니다."))]),n[59]||(n[59]=p('<p>스프링 부트<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>와 대퍼(Dapr)<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup>를 함께 사용하면, 복잡한 <sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>쿠버네티스(Kubernetes, K8s) 클러스터 없이도 로컬에서 대퍼 기반의 애플리케이션을 실행, 테스트, 디버그할 수 있어 개발 과정이 더 간단해집니다.</p><p>오늘날 개발자들은 다양한 도구와 클라우드 서비스들을 평가하고 사용해야 하며, 복잡한 내부 개발 프로세스를 따라야 하는 상황에 직면합니다. 이번 글에서는 오픈소스 프로젝트인 대퍼가 스프링 부트 개발자들이 더 견고하고 환경에 종속되지 않는 애플리케이션을 구축하는 데 어떻게 도움을 줄 수 있는지 살펴봅니다. 또한 개발자들이 기존의 내부 개발 프로세스를 유지할 수 있도록 지원합니다.</p><hr><h2 id="개발자들이-있는-곳에서-출발하기" tabindex="-1"><a class="header-anchor" href="#개발자들이-있는-곳에서-출발하기"><span>개발자들이 있는 곳에서 출발하기</span></a></h2>',4)),a("p",null,[n[12]||(n[12]=s("스페인 바르셀로나에서 열린 ")),a("a",T,[e(o,{icon:"iconfont icon-spring"}),n[11]||(n[11]=s("스프링 I/O 컨퍼런스"))]),n[13]||(n[13]=s("에서 스프링 커뮤니티를 직접 만날 기회가 있었습니다. 이 컨퍼런스는 스프링 프레임워크 유지 관리자, 핵심 기여자, 최종 사용자들이 매년 모여 프레임워크의 최신 추가 기능, 뉴스, 업그레이드 및 향후 계획을 논의하는 자리입니다."))]),n[60]||(n[60]=a("p",null,"쿠버네티스, 컨테이너, 그리고 스프링 부트 애플리케이션을 다양한 클라우드 제공업체에 배포하는 방법 등 많은 발표를 볼 수 있었는데, 이러한 주제는 항상 스프링 개발자들에게 적합한 방식으로 다뤄졌습니다. 클라우드 네이티브 환경에서 소개되는 대부분의 도구는 새로운 도구를 사용하고 개발자 작업을 변경하도록 요구하며, 때로는 복잡한 구성이나 원격 환경이 포함되기도 합니다.",-1)),a("p",null,[n[16]||(n[16]=s("예를 들어, ")),a("a",V,[e(o,{icon:"fas fa-globe"}),n[14]||(n[14]=s("대퍼 프로젝트"))]),n[17]||(n[17]=s("는 쿠버네티스 클러스터에 설치할 수 있지만, 이를 로컬 개발 프로세스에 포함하려면 쿠버네티스 작업을 추가로 수행해야 합니다. 일부 개발자는 로컬 개발 과정에서 쿠버네티스를 포함하는 데 익숙할 수 있지만, 다른 팀들은 ")),a("a",z,[e(o,{icon:"fas fa-globe"}),n[15]||(n[15]=s("테스트컨테이너"))]),n[18]||(n[18]=s("와 같은 도구를 사용해 코드 변경을 테스트할 수 있는 임시 환경을 로컬에서 간단하게 생성하는 것을 선호합니다."))]),n[61]||(n[61]=p('<p>대퍼는 프로그래밍 언어와 관계없이 일관된 <sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup>API를 제공합니다. 대퍼는 애플리케이션 기능을 개발할 때 사용할 수 있는 다양한 빌딩 블록(상태 관리, 발행/구독, 서비스 호출, 액터(Actors), 워크플로우 등)을 제공합니다.</p><figure><img src="https://wishket.com/media/news/2990/1.jpg" alt="90% 이상의 프로덕션 대퍼 워크로드가 쿠버네티스에서 실행" tabindex="0" loading="lazy"><figcaption>90% 이상의 프로덕션 대퍼 워크로드가 쿠버네티스에서 실행</figcaption></figure><p>대퍼에 대한 복잡한 설명에 시간을 할애하기보다, 이번 글에서는 대퍼 프로젝트와 스프링 부트 프레임워크 간 통합이 대퍼 지원 애플리케이션 개발 경험을 어떻게 단순화할 수 있는지 중점적으로 다룹니다. 특히, 쿠버네티스 클러스터 내에서 실행하지 않고도 로컬에서 실행, 테스트, 디버깅이 가능한 방식을 살펴봅니다.</p><hr><h2 id="오늘날-쿠버네티스와-클라우드-네이티브-런타임" tabindex="-1"><a class="header-anchor" href="#오늘날-쿠버네티스와-클라우드-네이티브-런타임"><span>오늘날 쿠버네티스와 <sup class="footnote-ref"><a href="#footnote5">[5]</a><a class="footnote-anchor" id="footnote-ref5"></a></sup>클라우드 네이티브 런타임</span></a></h2><p>오늘날 대퍼 프로젝트를 사용하려면, 사용하는 프로그래밍 언어와 상관없이 쿠버네티스 클러스터에 대퍼를 설치하는 것이 가장 쉬운 방법입니다. 쿠버네티스와 컨테이너 런타임은 현재 자바 애플리케이션에서 가장 흔히 사용되는 실행 환경입니다.</p><p>그러나 자바 개발자들에게 매일 쿠버네티스 클러스터에서 애플리케이션을 실행하고 작업하도록 요청하는 것은 그들의 익숙한 범위를 벗어난 일일 수 있습니다. 많은 개발자들에게 쿠버네티스 사용법을 교육하는 데는 시간이 걸리며, 대퍼와 같은 도구를 클러스터에 설치하는 방법도 배워야 합니다.</p><figure><img src="https://wishket.com/media/news/2990/2.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',8)),a("p",null,[n[20]||(n[20]=s("스프링 부트 개발자라면, 대부분 로컬에서 애플리케이션을 코딩하고 실행하며 디버깅하고 테스트하고 싶을 것입니다. 이러한 이유로 ")),a("a",x,[e(o,{icon:"fas fa-globe"}),n[19]||(n[19]=s("대퍼"))]),n[21]||(n[21]=s("는 테스트컨테이너팀과 협력하여 쿠버네티스 클러스터 없이 로컬에서 대퍼를 활용할 수 있는 개발 환경을 제공하게 되었습니다."))]),n[62]||(n[62]=a("p",null,"스프링 부트 개발자는 쿠버네티스 클러스터를 사용하거나 대퍼가 쿠버네티스에서 어떻게 작동하는지 배우지 않아도 대퍼 API를 사용할 수 있습니다.",-1)),n[63]||(n[63]=a("figure",null,[a("img",{src:"https://wishket.com/media/news/2990/3.jpg",alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1)),n[64]||(n[64]=a("p",null,"이 테스트는 테스트컨테이너가 @ClassRule 애노테이션을 사용하여 대퍼 런타임을 설정(provision)하는 방식을 보여줍니다. 이 애노테이션은 대퍼 런타임을 부트스트랩(초기화)하는 역할을 하며, 이를 통해 애플리케이션 코드는 대퍼 API를 사용하여 상태를 저장하거나 조회하고, 비동기 메시지를 교환하며, 구성을 가져오고, 워크플로우를 생성하고, 대퍼의 액터 모델을 사용할 수 있습니다.",-1)),a("p",null,[n[25]||(n[25]=p('이와 일반적인 스프링 부트 애플리케이션은 어떻게 비교될까요? 예를 들어, 레디스(Redis)<sup class="footnote-ref"><a href="#footnote6">[6]</a><a class="footnote-anchor" id="footnote-ref6"></a></sup>, 포스트그레SQL(PostgreSQL)<sup class="footnote-ref"><a href="#footnote7">[7]</a><a class="footnote-anchor" id="footnote-ref7"></a></sup>, 래빗엠큐(RabbitMQ)<sup class="footnote-ref"><a href="#footnote8">[8]</a><a class="footnote-anchor" id="footnote-ref8"></a></sup>를 사용해 데이터를 저장하고 조회하며, 카프카(Kafka)<sup class="footnote-ref"><a href="#footnote9">[9]</a><a class="footnote-anchor" id="footnote-ref9"></a></sup>를 통해 비동기 메시지를 교환하는 분산 애플리케이션이 있다고 가정해 봅시다. 해당 애플리케이션의 코드는 [',9)),a("a",K,[n[22]||(n[22]=s("여기 (")),e(o,{icon:"iconfont icon-github"}),n[23]||(n[23]=a("code",null,"salaboy/example-voting-app",-1)),n[24]||(n[24]=s(")"))]),n[26]||(n[26]=s("](")),e(o,{icon:"fas fa-folder-open"}),n[27]||(n[27]=a("code",null,"java/",-1)),n[28]||(n[28]=s(" 디렉토리 아래에 자바 구현 코드가 있습니다) 에서 확인할 수 있습니다."))]),n[65]||(n[65]=p('<figure><img src="https://wishket.com/media/news/2990/4.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>스프링 부트 애플리케이션에서는 레디스 클라이언트뿐만 아니라, 포스트그레SQL JDBC 드라이버<sup class="footnote-ref"><a href="#footnote10">[10]</a><a class="footnote-anchor" id="footnote-ref10"></a></sup>와 래빗엠큐 클라이언트도 종속성으로 추가해야 합니다. 또한 레디스를 위한 Spring Data KeyValue<sup class="footnote-ref"><a href="#footnote11">[11]</a><a class="footnote-anchor" id="footnote-ref11"></a></sup>, 포스트그레SQL을 위한 Spring Data JDBC<sup class="footnote-ref"><a href="#footnote12">[12]</a><a class="footnote-anchor" id="footnote-ref12"></a></sup>, 래빗엠큐를 위한 스프링 부트 Messaging 래빗엠큐와 같은 스프링 부트 추상화를 사용하는 것이 일반적입니다.</p><p>이러한 추상화와 라이브러리는 기본 레디스, 관계형 데이터베이스, 래빗엠큐 클라이언트의 기능을 확장하여 스프링 부트 프로그래밍 모델에 적합하게 만들어 줍니다. 스프링 부트는 단순히 클라이언트를 호출하는 것에 그치지 않고, 클라이언트의 생명주기를 관리하며, 개발자들이 일반적인 사용 사례를 구현할 수 있도록 지원하고, 그 과정에서 모범 사례를 자연스럽게 따를 수 있도록 돕습니다.</p><figure><img src="https://wishket.com/media/news/2990/5.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>스프링 부트 개발자들이 대퍼 API를 어떻게 사용할 수 있는지 보여준 테스트를 되돌아보면, 상호작용은 다음과 같이 보일 것입니다.</p><figure><img src="https://wishket.com/media/news/2990/6.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>두 번째 다이어그램에서는 스프링 부트 애플리케이션이 대퍼 API에만 의존합니다. 위에서 설명한 대퍼 API를 사용하는 단위 테스트와 이전 다이어그램 모두에서 HTTP나 gRPC(gRPC Remote Procedure Call)<sup class="footnote-ref"><a href="#footnote13">[13]</a><a class="footnote-anchor" id="footnote-ref13"></a></sup> 요청을 통해 대퍼 API에 직접 연결하는 대신, 대퍼 Java SDK를 사용하기로 결정했습니다. 애플리케이션 클래스패스에는 래빗엠큐, 레디스 클라이언트나 JDBC 드라이버가 포함되지 않았습니다.</p><p>대퍼를 사용하는 이 접근 방식에는 여러 가지 장점이 있습니다.</p>',8)),e(g,{data:[{id:"1."},{id:"2."},{id:"3."},{id:"4."}],active:0},{title0:t(({value:i,isActive:r})=>n[29]||(n[29]=[s("1.")])),title1:t(({value:i,isActive:r})=>n[30]||(n[30]=[s("2.")])),title2:t(({value:i,isActive:r})=>n[31]||(n[31]=[s("3.")])),title3:t(({value:i,isActive:r})=>n[32]||(n[32]=[s("4.")])),tab0:t(({value:i,isActive:r})=>n[33]||(n[33]=[a("p",null,"애플리케이션은 레디스나 래빗엠큐 클라이언트를 포함할 필요가 없으므로 의존성이 줄어듭니다. 따라서 애플리케이션 크기가 작아질 뿐만 아니라, 애플리케이션이 배포되는 환경의 특정 인프라 구성 요소에 덜 의존하게 됩니다. 이러한 클라이언트의 버전은 특정 환경에서 실행 중인 구성 요소의 인스턴스와 일치해야 한다는 점을 기억해야 합니다.",-1),a("p",null,"최근에는 스프링 부트 애플리케이션이 클라우드 제공업체에 배포되는 경우가 많아지면서 데이터베이스나 메시지 브로커 같은 구성 요소의 버전을 개발자가 제어하기 어려운 환경이 흔합니다. 개발자들은 일반적으로 이러한 구성 요소를 로컬 환경에서 컨테이너를 사용해 실행하므로, 고객을 대상으로 하는 환경에서 애플리케이션이 실행될 때 버전 불일치 문제가 발생할 가능성이 큽니다.",-1)])),tab1:t(({value:i,isActive:r})=>n[34]||(n[34]=[a("p",null,"애플리케이션은 레디스, 래빗엠큐, 포스트그레SQL에 직접 연결하지 않습니다. 연결 풀 구성 및 기타 세부 사항은 인프라와 밀접하게 관련되어 있습니다. 이러한 구성 요소가 애플리케이션 코드에서 분리되고 대퍼 API 뒤로 통합되면서 애플리케이션이 더 간단해졌습니다.",-1)])),tab2:t(({value:i,isActive:r})=>n[35]||(n[35]=[a("p",null,[s("새로운 애플리케이션 개발자는 래빗엠큐, 포스트그레SQL, 레디스의 작동 방식을 배울 필요가 없습니다. 대퍼 API는 자체적으로 명확합니다. 예를 들어, 애플리케이션 상태를 저장하려면 "),a("code",null,"saveState()"),s(" 메서드를 사용하면 되고, 이벤트를 발행하려면 "),a("code",null,"publishEvent()"),s(" 메서드를 사용하면 됩니다. IDE를 사용하는 개발자는 사용 가능한 API를 쉽게 확인할 수 있습니다.")],-1)])),tab3:t(({value:i,isActive:r})=>n[36]||(n[36]=[a("p",null,"클라우드 네이티브 런타임을 구성하는 팀은 선호하는 도구를 사용해 사용할 수 있는 인프라를 구성할 수 있습니다. 예를 들어, 자체 관리하는 레디스 인스턴스를 Google Cloud In-Memory Store로 전환하려면 애플리케이션 코드를 수정하지 않고도 레디스 인스턴스를 교체할 수 있습니다. 자체 관리하는 카프카 인스턴스를 Google Pub/Sub 또는 Amazon SQS/SNS로 교체하려면 대퍼 설정만 조정하면 됩니다.",-1)])),_:1}),n[66]||(n[66]=p('<p>그런데 이렇게 하면, <code>saveState</code>/<code>getState</code>, <code>publishEvent</code> 같은 API는 어떻게 되는 걸까요? 구독(<code>subscription</code>)은 어떻게 처리할까요? 이벤트를 소비하는 방법은? 이러한 API 호출을 스프링 부트와 더 잘 통합해, 개발자가 새로운 API를 배우지 않아도 되도록 개선할 수 있을까요?</p><hr><h2 id="내일-통합된-크로스-런타임-경험" tabindex="-1"><a class="header-anchor" href="#내일-통합된-크로스-런타임-경험"><span>내일: 통합된 크로스 런타임 경험</span></a></h2><p>대부분의 기술 문서와 달리, 여기에서의 답은 “상황에 따라 다릅니다”가 아닙니다. 물론 답은 YES입니다. 우리는 스프링 데이터와 메시징(Messaging) 접근 방식을 따라, 스프링 부트와 완벽히 통합된 더 풍부한 대퍼 경험을 제공할 수 있습니다. 이 접근 방식을 로컬 개발 환경(테스트컨테이너 사용)과 결합하면, 팀이 로컬, 쿠버네티스, 클라우드 제공업체 등 다양한 환경에서 빠르게 실행되며, 변경 없이 작동하는 애플리케이션을 설계하고 코딩할 수 있도록 도와줍니다.</p><p>이미 레디스, 포스트그레SQL 및/또는 래빗엠큐를 사용하고 있다면, 스프링 데이터와 스프링 래빗엠큐/카프카/펄사(Pulsar)<sup class="footnote-ref"><a href="#footnote14">[14]</a><a class="footnote-anchor" id="footnote-ref14"></a></sup>와 같은 스프링 부트 추상화를 비동기 메시징을 위해 사용하고 있을 가능성이 높습니다.</p>',5)),a("p",null,[n[38]||(n[38]=s("Spring Data KeyValue에 대한 자세한 내용은 ")),a("a",C,[e(o,{icon:"fas fa-globe"}),n[37]||(n[37]=s("‘A Guide to Spring Data Key Value’"))]),n[39]||(n[39]=s(" 게시물을 참고하세요."))]),n[67]||(n[67]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">KeyValueOperations</span> <span class="token function">keyValueTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KeyValueTemplate</span><span class="token punctuation">(</span>keyValueAdapter <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">KeyValueAdapter</span> <span class="token function">keyValueAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MapKeyValueAdapter</span> <span class="token punctuation">(</span><span class="token class-name">WeakHashMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Mile&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;IT&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">keyValueTemplate<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ID로 직원을 조회하려면,</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> savedEmployee <span class="token operator">=</span> keyValueTemplate<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,3)),a("p",null,[n[44]||(n[44]=s("비동기 메시징을 위해 ")),a("a",M,[e(o,{icon:"fas fa-globe"}),n[40]||(n[40]=s("스프링 카프카"))]),n[45]||(n[45]=s(", ")),a("a",R,[e(o,{icon:"iconfont icon-spring"}),n[41]||(n[41]=s("스프링 펄사"))]),n[46]||(n[46]=s(", ")),a("a",q,[e(o,{icon:"iconfont icon-spring"}),n[42]||(n[42]=s("스프링 래빗엠큐"))]),n[47]||(n[47]=s("를 살펴볼 수 있습니다. 이들 모두 메시지를 생성하고, 소비할 수 있는 방법을 제공합니다. (관련 자료: ")),a("a",B,[e(o,{icon:"iconfont icon-spring"}),n[43]||(n[43]=s("Messaging with RabbitMQ"))]),n[48]||(n[48]=s(")"))]),n[68]||(n[68]=p(`<p>카프카로 메시지를 생성하는 것은 다음과 같이 간단합니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Autowired</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">(</span></span>
<span class="line">    kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>topicName<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>카프카 메시지를 소비하는 것도 매우 간단합니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@KafkaListener</span> <span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;topicName&quot;</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenGroupFoo</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Received Message in group foo:&quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token operator">:</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>래빗엠큐의 경우에도 거의 동일한 방식으로 처리할 수 있습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Autowired</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 메시지를 보내려면 이렇게 하면 됩니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>topicExchangeName<span class="token punctuation">,</span> <span class="token string">&quot;foo.bar.baz&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello from RabbitMQ!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>래빗엠큐에서 메시지를 소비하려면 다음과 같이 할 수 있습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">String</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> rabbitTemplate<span class="token punctuation">.</span><span class="token function">receiveAndConvert</span><span class="token punctuation">(</span><span class="token string">&quot;nyqueue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="스프링-부트-개발자의-경험-향상을-위한-대퍼-활용" tabindex="-1"><a class="header-anchor" href="#스프링-부트-개발자의-경험-향상을-위한-대퍼-활용"><span>스프링 부트 개발자의 경험 향상을 위한 대퍼 활용</span></a></h2><p>이제 새로운 대퍼 스프링 부트 스타터를 사용했을 때 어떻게 보일지 살펴보겠습니다.</p><p><code>DaprKeyValueTemplate</code>을 살펴보겠습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Autowired</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DapzleyValueTerplate</span> keyValueTemplate<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 <code>KeyValueTemplate</code>을 사용하여 우리의 Vote 객체를 저장해 보겠습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Vote</span> vote<span class="token operator">-</span> nev <span class="token class-name">Votevote</span>、 voterid<span class="token punctuation">,</span> a0inctcocution<span class="token punctuation">,</span> <span class="token class-name">Voterid</span></span>
<span class="line"><span class="token comment">// Store the vote</span></span>
<span class="line">keyValuetemplate<span class="token punctuation">.</span>insert <span class="token punctuation">(</span>vote<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>KeyValue</code> 저장소에 쿼리를 생성하여 저장된 모든 투표를 찾아보겠습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">KeyValueQuezy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keyValueQuezy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReyValueQuezy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;&#39;type&#39; == &#39;vote&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Iterable</span><span class="token operator">&lt;</span><span class="token class-name">Vote</span>› votes <span class="token operator">=</span> kejValuelenplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>keyValueQuery<span class="token punctuation">,</span> <span class="token class-name">Vote</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>왜 이게 중요할까요? 대퍼 <code>KeyValueTemplate</code>은 스프링 Data KeyValue에서 제공하는 <code>KeyValueOperations</code> 인터페이스를 구현하는데, 이는 레디스, 몽고DB(MongoDB)<sup class="footnote-ref"><a href="#footnote15">[15]</a><a class="footnote-anchor" id="footnote-ref15"></a></sup>, 멤캐시드(Memcached)<sup class="footnote-ref"><a href="#footnote16">[16]</a><a class="footnote-anchor" id="footnote-ref16"></a></sup>, 포스트그레SQL, MySQL 등과 같은 도구들에 의해 구현됩니다. 큰 차이점은 이 구현이 대퍼 API와 연결되며, 특정 클라이언트를 필요로 하지 않는다는 점입니다.</p><p>동일한 코드는 레디스, 포스트그레SQL, 몽고DB 및 AWS 다이나모DB(DynamoDB)<sup class="footnote-ref"><a href="#footnote17">[17]</a><a class="footnote-anchor" id="footnote-ref17"></a></sup>, 구글 클라우드 파이어스토어(Google Cloud Firestore)<sup class="footnote-ref"><a href="#footnote18">[18]</a><a class="footnote-anchor" id="footnote-ref18"></a></sup>와 같은 클라우드 제공업체 관리 서비스에 데이터를 저장할 수 있습니다. 대퍼에서는 30개 이상의 데이터 저장소를 지원하며, 애플리케이션이나 의존성에 대한 변경 없이 사용할 수 있습니다.</p><p>비슷하게 <code>DaprMessagingTemplate</code>을 살펴보겠습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Autowired</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DaprMessagingTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Vote</span><span class="token punctuation">&gt;</span></span> messagingTemplate</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 메시지/이벤트를 발행해 보겠습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">messagingTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>voteProperties<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vote<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>메시지/이벤트를 소비하려면 카프카 예제와 유사한 주석 방식으로 사용할 수 있습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Topic</span><span class="token punctuation">(</span>name <span class="token operator">=</span> topiclame<span class="token punctuation">,</span> pubsubllane <span class="token operator">=</span> pubSubllame<span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/ subsesibe&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlellessages</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">CloudEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Vote</span><span class="token punctuation">&gt;</span></span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>&quot;<span class="token operator">*</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">+</span><span class="token constant">CONSUME</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-=</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">-</span><span class="token operator">*</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27)),a("p",null,[n[50]||(n[50]=s("중요한 점은 기본적으로 대퍼가 ")),a("a",Q,[e(o,{icon:"fas fa-globe"}),n[49]||(n[49]=s("CloudEvents"))]),n[51]||(n[51]=s("를 사용하여 이벤트를 교환한다는 것입니다(다른 형식도 지원됨). 이는 내부 구현에 관계없이 동일하게 적용됩니다. @Topic 주석을 사용하면 애플리케이션이 특정 Dapr PubSub 구성 요소에서 지정된 Topic의 모든 이벤트를 수신하도록 구독합니다."))]),a("p",null,[n[53]||(n[53]=s("다시 말해, 이 코드는 카프카, 래빗엠큐, 아파치 펄사와 같은 모든 지원되는 Dapr PubSub 구성 요소 구현뿐만 아니라 Azure Event Hub, Google Cloud PubSub, AWS SNS/SQS와 같은 클라우드 제공업체 관리 서비스에도 적용됩니다(자세한 내용은 ")),a("a",L,[e(o,{icon:"fas fa-globe"}),n[52]||(n[52]=s("Dapr Pub/sub 브로커 문서"))]),n[54]||(n[54]=s(" 참조)."))]),n[69]||(n[69]=p('<p><code>DaprKeyValueTemplate</code>과 <code>DaprMessagingTemplate</code>을 결합하면 개발자는 통합된 API를 통해 데이터 조작과 비동기 메시징에 접근할 수 있습니다. 이 방식은 애플리케이션 의존성을 추가하지 않으며, 환경과 관계없이 포터블합니다. 즉, 동일한 코드를 다른 클라우드 제공업체 서비스에서 실행할 수 있습니다.</p><p>이것이 스프링 부트와 더 비슷해 보이지만, 더 많은 작업이 필요합니다. Spring Data KeyValue 위에 Spring Repository 인터페이스를 구현하여 <code>CRUDRepository</code> 경험을 제공할 수 있습니다. 또한 테스트에 대한 일부 미비한 부분이 있고, 개발자가 이 API를 빠르게 시작할 수 있도록 하는 문서가 필요합니다.</p><hr><h2 id="장점과-트레이드오프" tabindex="-1"><a class="header-anchor" href="#장점과-트레이드오프"><span>장점과 트레이드오프</span></a></h2><p>새로운 프레임워크나 프로젝트, 도구를 기존의 기술 스택에 추가할 때, 그 도구가 나에게 어떻게 작동할지 이해하는 데 있어 트레이드오프를 아는 것이 중요합니다.</p><p>대퍼의 가치를 이해하는 데 도움이 되었던 한 가지 방법은 80% 대 20% 규칙을 사용하는 것이었습니다. 이 규칙은 다음과 같습니다.</p><ul><li>80%의 경우, 애플리케이션은 메시지 브로커, 키/값 저장소, 구성 서버 등과 같은 인프라 구성 요소에 대해 간단한 작업을 수행합니다. 애플리케이션은 상태를 저장하고 검색하며 비동기 메시지를 발행하고 소비하여 애플리케이션 로직을 구현해야 합니다. 이러한 시나리오에서는 대퍼로부터 가장 큰 가치를 얻을 수 있습니다.</li><li>20%의 경우, 특정 메시지 브로커에 대한 깊은 전문 지식이 필요하거나 복잡한 데이터 구조를 구성하기 위한 성능 좋은 쿼리를 작성해야 하는 고급 기능을 구축해야 합니다. 이러한 경우에는 대퍼 API를 사용하지 않아도 괜찮습니다. 왜냐하면 애플리케이션 코드에서 특정 인프라 기능에 접근해야 할 수도 있기 때문입니다.</li></ul><p>새로운 도구를 살펴볼 때 이를 가능한 많은 사용 사례에 맞추려고 일반화하는 것이 일반적입니다. 대퍼에서는 대퍼 API가 사용자의 사용 사례에 맞을 때 개발자에게 도움을 주는 데 집중해야 합니다. 대퍼 API가 맞지 않거나 특정 API가 필요한 경우, 제공자별 SDK/클라이언트를 사용하는 것도 괜찮습니다.</p><p>대퍼 API가 기능을 구축하기에 충분할 때와 그렇지 않은 때를 명확히 이해함으로써, 팀은 기능을 구현하기 위해 어떤 기술이 필요한지 미리 설계하고 계획할 수 있습니다. 예를 들어, 래빗엠큐/카프카나 SQL 및 도메인 전문가가 고급 쿼리를 구축하는 데 필요한가요?</p><p>또한 우리가 피해야 할 또 다른 실수는 도구가 우리의 배포 관행에 미치는 영향을 고려하지 않는 것입니다. 환경 간 마찰을 줄이는 데 적합한 도구를 사용할 수 있고, 개발자가 클라우드 제공업체에서 실행할 때 필요한 동일한 API와 의존성을 사용하여 로컬에서 애플리케이션을 실행할 수 있도록 할 수 있다면 좋습니다.</p><p>이 점들을 염두에 두고 장점과 트레이드오프를 살펴보겠습니다.</p><h3 id="장점" tabindex="-1"><a class="header-anchor" href="#장점"><span>장점</span></a></h3><ul><li>분산 애플리케이션에서 요구하는 공통된 동작에 접근하고, 애플리케이션의 여러 모듈이나 계층에 걸쳐서 공통적으로 발생하는 문제나 기능을 처리하는 간결한 API를 제공합니다. 이를 통해 개발자는 복원력(재시도 및 회로 차단 메커니즘), 가시성(오픈 텔레메트리(OpenTelemetry)<sup class="footnote-ref"><a href="#footnote19">[19]</a><a class="footnote-anchor" id="footnote-ref19"></a></sup> 사용, 로그, 트레이스 및 메트릭), 보안(인증서 및 상호 TLS(mTLS)<sup class="footnote-ref"><a href="#footnote20">[20]</a><a class="footnote-anchor" id="footnote-ref20"></a></sup>)과 같은 문제를 대퍼에 위임할 수 있습니다.</li><li>새로운 스프링 부트 통합 덕분에 개발자는 기존의 프로그래밍 모델을 사용하여 기능에 접근할 수 있습니다.</li><li>대퍼와 테스트컨테이너 통합 덕분에 개발자는 대퍼를 실행하거나 구성하는 데 걱정할 필요가 없고, 기존 개발 루프에 외부 도구를 배우지 않아도 됩니다. 대퍼 API는 개발자가 로컬에서 기능을 구축, 테스트 및 디버깅할 수 있도록 제공됩니다.</li><li>대퍼 API는 개발자가 인프라와 상호 작용할 때 시간을 절약할 수 있도록 도와줍니다. 예를 들어, 모든 개발자가 카프카/펄사/래빗엠큐가 어떻게 작동하는지 배우는 대신, 대퍼 API를 사용하여 이벤트를 발행하고 소비하는 방법만 배우면 됩니다.</li><li>대퍼는 클라우드 네이티브 환경에서의 포터빌리티를 가능하게 하여, 코드 변경 없이 로컬 또는 클라우드 관리 인프라에서 애플리케이션을 실행할 수 있습니다. 대퍼는 운영/플랫폼 팀이 다양한 지원되는 구성 요소에서 인프라를 연결할 수 있도록 명확한 관심사의 분리를 제공합니다.</li></ul><h3 id="트레이드오프" tabindex="-1"><a class="header-anchor" href="#트레이드오프"><span>트레이드오프</span></a></h3><p>대퍼 API와 같은 추상화 계층을 도입하면 항상 일부 트레이드오프가 따릅니다.</p><ul><li>대퍼는 모든 시나리오에 가장 적합하지 않을 수 있습니다. 이러한 경우에는 특정 클라이언트/드라이버가 필요한 복잡한 기능을 별도의 모듈이나 서비스로 분리할 수 있습니다.</li><li>대퍼는 애플리케이션이 실행될 대상 환경에서 필요합니다. 애플리케이션은 대퍼가 존재하고 애플리케이션이 제대로 작동하도록 필요한 인프라가 올바르게 연결되어 있어야 합니다. 만약 운영/플랫폼 팀이 이미 쿠버네티스를 사용하고 있다면, 대퍼는 <sup class="footnote-ref"><a href="#footnote21">[21]</a><a class="footnote-anchor" id="footnote-ref21"></a></sup>CNCF(Cloud Native Computing Foundation) 프로젝트로서 상당히 성숙한 프로젝트로 3,000명 이상의 기여자가 있으므로 쉽게 도입할 수 있습니다.</li><li>애플리케이션과 인프라 구성 요소 사이에 추가적인 추상화가 있을 경우 문제 해결이 더 어려워질 수 있습니다. 스프링 부트 통합의 품질은 문제가 발생했을 때 오류가 개발자에게 얼마나 잘 전달되는지로 측정할 수 있습니다.</li></ul><p>장점과 트레이드오프는 귀하의 특정 상황과 배경에 따라 달라진다는 것을 알고 있습니다. 이 목록에 빠진 내용이 있다면 언제든지 문의해 주세요.</p><hr><h2 id="요약-및-다음-단계" tabindex="-1"><a class="header-anchor" href="#요약-및-다음-단계"><span>요약 및 다음 단계</span></a></h2><p>Dapr Statestore (KeyValue)와 PubSub (Messaging)을 다룬 것은 첫 번째 단계에 불과하며, 스프링 부트 프로그래밍 모델에 더 고급 대퍼 기능을 추가하면 개발자가 강력한 분산 애플리케이션을 만드는 데 필요한 더 많은 기능에 접근할 수 있습니다. TODO 목록에 대퍼 Workflows를 통한 내구성 있는 실행이 포함되어 있으며, 서비스 간 복잡하고 장기 실행되는 오케스트레이션을 개발하는 원활한 경험을 제공하는 것이 일반적인 요구 사항입니다.</p><p>제가 스프링 부트와 대퍼 통합 작업을 열정적으로 진행한 이유 중 하나는 자바 커뮤니티가 생산성과 일관된 인터페이스에 집중하여 개발자 경험을 다듬기 위해 열심히 노력했다는 것을 알기 때문입니다. 저는 자바 커뮤니티에서 쌓인 모든 지식이 대퍼 API를 다음 단계로 끌어올리는 데 활용될 수 있다고 확신합니다. 기존 API로 다룰 수 있는 사용 사례를 검증하고 갭을 찾아내어 더 나은 통합을 구축하고 다양한 언어에서 개발자 경험을 자동으로 개선할 수 있습니다.</p>',21)),a("p",null,[a("a",E,[e(o,{icon:"fa-brands fa-youtube"}),n[55]||(n[55]=s("Spring I/O에서 제시한"))]),n[56]||(n[56]=s(" 예제의 모든 소스 코드는 이 글의 “Today, Kubernetes, and Cloud-Native Runtimes” 섹션에 링크되어 있습니다."))]),e(v,{src:"youtube/pMGz54Gstas"}),n[70]||(n[70]=a("p",null,"우리는 스프링 부트와 대퍼 통합 코드를 Dapr Java SDK에 병합하여 스프링 부트에서 작업할 때 기본 대퍼 경험으로 만들 예정입니다. 문서도 곧 제공할 거고요. 만약 이 프로젝트에 기여하거나 대퍼가 스프링 부트와 더 잘 통합될 수 있도록 도와주고 싶다면 우리에게 연락주세요.",-1)),n[71]||(n[71]=a("hr",null,null,-1)),a("div",N,[n[57]||(n[57]=a("p",{class:"hint-container-title"},"원문",-1)),e(d,{name:"Open-Source Dapr for Spring Boot Developers",desc:"Using Dapr with Spring Boot simplifies the development for Dapr-enabled apps: run, test, and debug locally without the need to run inside a K8s cluster.",url:"https://diagrid.io/blog/dapr-for-spring-boot/",logo:"https://dz2cdn1.dzone.com/themes/dz20/images/favicon.png",preview:"https://dz2cdn1.dzone.com/storage/article-thumb/17747913-thumb.jpg"})]),y(" TODO: add ARTICLE CARD "),e(u,f(m({title:"스프링 부트 개발자를 위한 오픈소스 ‘Dapr’",desc:"스프링 부트와 대퍼(Dapr)를 함께 사용하면, 복잡한 쿠버네티스(Kubernetes, K8s) 클러스터 없이도 로컬에서 대퍼 기반의 애플리케이션을 실행, 테스트, 디버그할 수 있어 개발 과정이 더 간단해집니다. 오늘날 개발자들은 다양한 도구와 클라우드 서비스들을 평가하고 사용해야 하며, 복잡한 내부 개발 프로세스를 따라야 하는 상황에 직면합니다. 이번 글에서는 오픈소스 프로젝트인 대퍼가 스프링 부트 개발자들이 더 견고하고 환경에 종속되지 않는 애플리케이션을 구축하는 데 어떻게 도움을 줄 수 있는지 살펴봅니다.",link:"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2990.html",logo:"https://yozm.wishket.com/favicon.ico",background:"rgba(84,7,224,0.2)"})),null,16),n[72]||(n[72]=p('<hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>스프링 부트: 웹사이트나 모바일 앱과 같은 소프트웨어를 빠르고 효율적으로 개발할 수 있도록 도와주는 프레임워크 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>대퍼: 큰 소프트웨어를 여러 개의 작은 서비스로 나누어 쉽게 개발하고 운영할 수 있도록 도와주는 오픈 소스 도구 <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li><li id="footnote3" class="footnote-item"><p>쿠버네티스: 애플리케이션을 실행하고 관리하는 자동화 도구 <a href="#footnote-ref3" class="footnote-backref">↩︎</a></p></li><li id="footnote4" class="footnote-item"><p>한 시스템이 다른 시스템과 통신하거나 기능을 호출할 수 있도록 제공하는 규칙, 프로토콜, 그리고 도구의 집합 <a href="#footnote-ref4" class="footnote-backref">↩︎</a></p></li><li id="footnote5" class="footnote-item"><p>클라우드 환경에서 애플리케이션을 효율적으로 개발, 배포, 실행할 수 있도록 설계된 실행 환경 <a href="#footnote-ref5" class="footnote-backref">↩︎</a></p></li><li id="footnote6" class="footnote-item"><p>Redis: Remote Dictionary Server의 약자로, 주로 메모리 기반의 데이터 저장소로 사용되는 오픈 소스 소프트웨어 <a href="#footnote-ref6" class="footnote-backref">↩︎</a></p></li><li id="footnote7" class="footnote-item"><p>PostgreSQL: 오픈 소스 기반의 관계형 데이터베이스 관리 시스템(RDBMS) <a href="#footnote-ref7" class="footnote-backref">↩︎</a></p></li><li id="footnote8" class="footnote-item"><p>RabbitMQ: 오픈 소스 메시지 브로커(Message Broker) 소프트웨어로, 애플리케이션 간 메시지를 송수신하고 관리하는 역할 <a href="#footnote-ref8" class="footnote-backref">↩︎</a></p></li><li id="footnote9" class="footnote-item"><p>Kafka: 대규모 데이터 스트리밍과 메시지 큐잉을 효율적으로 처리할 수 있는 시스템으로, 높은 처리 성능과 내구성을 제공 <a href="#footnote-ref9" class="footnote-backref">↩︎</a></p></li><li id="footnote10" class="footnote-item"><p>JDBC(Java Database Connectivity): API를 사용하여 Java 애플리케이션이 데이터베이스와 상호작용할 수 있도록 해주는 소프트웨어 컴포넌트 <a href="#footnote-ref10" class="footnote-backref">↩︎</a></p></li><li id="footnote11" class="footnote-item"><p>Spring Data KeyValue: 프로젝트의 일환으로 제공되는 데이터 저장소 추상화 라이브러리 <a href="#footnote-ref11" class="footnote-backref">↩︎</a></p></li><li id="footnote12" class="footnote-item"><p>Spring Data JDBC: JDBC를 사용하여 관계형 데이터베이스와 상호작용하는 스프링 데이터 프로젝트의 모듈 <a href="#footnote-ref12" class="footnote-backref">↩︎</a></p></li><li id="footnote13" class="footnote-item"><p>구글에서 개발한 고성능, 오픈 소스 원격 프로시저 호출(RPC) 시스템 <a href="#footnote-ref13" class="footnote-backref">↩︎</a></p></li><li id="footnote14" class="footnote-item"><p>고성능의 분산 메시징 시스템으로, 실시간 데이터 스트리밍 및 메시징을 지원하며, 뛰어난 내구성, 확장성, 멀티 테넌시 기능을 제공하는 오픈 소스 플랫폼 <a href="#footnote-ref14" class="footnote-backref">↩︎</a></p></li><li id="footnote15" class="footnote-item"><p>MongoDB: NoSQL 데이터베이스의 하나로, 비관계형 데이터베이스 시스템 <a href="#footnote-ref15" class="footnote-backref">↩︎</a></p></li><li id="footnote16" class="footnote-item"><p>Memcached: 메모리 기반 캐시 시스템으로, 주로 데이터베이스나 웹 애플리케이션에서 자주 조회되는 데이터를 메모리에 저장해 두고 빠르게 접근할 수 있도록 도와주는 시스템 <a href="#footnote-ref16" class="footnote-backref">↩︎</a></p></li><li id="footnote17" class="footnote-item"><p>DynamoDB: AWS에서 제공하는 NoSQL 데이터베이스 서비스 <a href="#footnote-ref17" class="footnote-backref">↩︎</a></p></li><li id="footnote18" class="footnote-item"><p>Google Cloud Firestore: 클라우드 기반 NoSQL 데이터베이스 <a href="#footnote-ref18" class="footnote-backref">↩︎</a></p></li><li id="footnote19" class="footnote-item"><p>분산 시스템에서 애플리케이션의 동작을 추적하고 모니터링할 수 있도록 도와주는 오픈소스 프로젝트 <a href="#footnote-ref19" class="footnote-backref">↩︎</a></p></li><li id="footnote20" class="footnote-item"><p>Mutual TLS의 약자. 클라이언트와 서버가 서로를 인증하는 보안 프로토콜 <a href="#footnote-ref20" class="footnote-backref">↩︎</a></p></li><li id="footnote21" class="footnote-item"><p>클라우드 네이티브 컴퓨팅 재단 <a href="#footnote-ref21" class="footnote-backref">↩︎</a></p></li></ol></section>',2))])}const F=b(j,[["render",O]]),H=JSON.parse('{"path":"/yozm.wishket.com/2990.html","title":"스프링 부트 개발자를 위한 오픈소스 ‘Dapr’","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"스프링 부트 개발자를 위한 오픈소스 ‘Dapr’","description":"Article(s) > 스프링 부트 개발자를 위한 오픈소스 ‘Dapr’","icon":"iconfont icon-spring","category":["Java","Spring","Article(s)"],"tag":["blog","yozm.wishket.com","java","jdk","spring","springframework","springboog"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"스프링 부트 개발자를 위한 오픈소스 ‘Dapr’\\",\\"image\\":[\\"https://wishket.com/media/news/2990/1.jpg\\",\\"https://wishket.com/media/news/2990/2.jpg\\",\\"https://wishket.com/media/news/2990/3.jpg\\",\\"https://wishket.com/media/news/2990/4.jpg\\",\\"https://wishket.com/media/news/2990/5.jpg\\",\\"https://wishket.com/media/news/2990/6.jpg\\"],\\"datePublished\\":\\"2025-02-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"요즘IT의 번역글\\",\\"url\\":\\"https://yozm.wishket.com/magazine/@yozm_global/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2990.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"스프링 부트 개발자를 위한 오픈소스 ‘Dapr’"}],["meta",{"property":"og:description","content":"Article(s) > 스프링 부트 개발자를 위한 오픈소스 ‘Dapr’"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/2990/001.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/2990/001.png"}],["meta",{"name":"twitter:image:alt","content":"스프링 부트 개발자를 위한 오픈소스 ‘Dapr’"}],["meta",{"property":"article:author","content":"요즘IT의 번역글"}],["meta",{"property":"article:tag","content":"springboog"}],["meta",{"property":"article:tag","content":"springframework"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-02-25T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 스프링 부트 개발자를 위한 오픈소스 ‘Dapr’"},{"property":"og:description","content":"스프링 부트 개발자를 위한 오픈소스 ‘Dapr’"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2990.html"}]],"prev":"/programming/java-spring/articles/README.md","date":"2025-02-25T00:00:00.000Z","isOriginal":false,"author":[{"name":"요즘IT의 번역글","url":"https://yozm.wishket.com/magazine/@yozm_global/"}],"cover":"https://yozm.wishket.com/media/news/2990/001.png"},"git":{},"readingTime":{"minutes":3.1,"words":929},"filePathRelative":"yozm.wishket.com/2990.md","copyright":{"author":"요즘IT의 번역글"}}');export{F as comp,H as data};
