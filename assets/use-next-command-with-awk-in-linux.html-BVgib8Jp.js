import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as e,f as i,b as w,a as x,t as f,n as r,g as d,w as a,e as n,r as o,o as b}from"./app-BVguHYKu.js";const v={},k={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"};function C(m,t){const l=o("VPCard"),s=o("router-link"),p=o("SiteInfo"),c=o("RouteLink"),u=o("VPIcon");return b(),h("div",null,[e("h1",k,[e("a",y,[e("span",null,f(m.$frontmatter.title)+" 관련",1)])]),i(l,r(d({title:"awk > Article(s)",desc:"Article(s)",link:"/tool/awk/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),i(l,r(d({title:"Shell > Article(s)",desc:"Article(s)",link:"/programming/sh/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",A,[e("ul",null,[e("li",null,[i(s,{to:"#what-is-the-next-command"},{default:a(()=>t[0]||(t[0]=[n("What is the next Command?")])),_:1,__:[0]})]),e("li",null,[i(s,{to:"#example-1-flagging-items-based-on-quantity"},{default:a(()=>t[1]||(t[1]=[n("Example 1: Flagging Items Based on Quantity")])),_:1,__:[1]})]),e("li",null,[i(s,{to:"#optimized-command-using-next"},{default:a(()=>t[2]||(t[2]=[n("Optimized Command Using next")])),_:1,__:[2]})]),e("li",null,[i(s,{to:"#example-2-filtering-and-formatting-data"},{default:a(()=>t[3]||(t[3]=[n("Example 2: Filtering and Formatting Data")])),_:1,__:[3]})]),e("li",null,[i(s,{to:"#summary"},{default:a(()=>t[4]||(t[4]=[n("Summary")])),_:1,__:[4]})])])]),t[13]||(t[13]=e("hr",null,null,-1)),i(p,{name:"How to Use ‘next’ Command with Awk in Linux - Part 6",desc:"In this article, we’ll explore how the `next` command in `awk` skips remaining patterns and moves to the next input line.",url:"https://tecmint.com/use-next-command-with-awk-in-linux",logo:"https://tecmint.com/wp-content/uploads/2020/07/favicon.ico",preview:"https://tecmint.com/wp-content/uploads/2016/06/Use-next-Command-with-Awk-in-Linux.png"}),e("p",null,[t[6]||(t[6]=n("In this sixth part of the ")),i(c,{to:"/tecmint.com/use-linux-awk-command-to-filter-text-string-in-files.html"},{default:a(()=>t[5]||(t[5]=[e("strong",null,"Awk series",-1)])),_:1,__:[5]}),t[7]||(t[7]=n(", we shall dive into the ")),t[8]||(t[8]=e("strong",null,"next",-1)),t[9]||(t[9]=n(" command and see how it can be used to optimize your script executions, as this command is particularly useful for skipping unnecessary steps in processing your data."))]),t[14]||(t[14]=e("hr",null,null,-1)),t[15]||(t[15]=e("h2",{id:"what-is-the-next-command",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#what-is-the-next-command"},[e("span",null,"What is the next Command?")])],-1)),t[16]||(t[16]=e("p",null,[n("The "),e("strong",null,"next"),n(" command in "),e("strong",null,"awk"),n(" tells it to skip the remaining patterns and actions for the current line and proceed to the next input line. This can help avoid executing redundant or unnecessary steps, making your scripts more efficient.")],-1)),t[17]||(t[17]=e("hr",null,null,-1)),t[18]||(t[18]=e("h2",{id:"example-1-flagging-items-based-on-quantity",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#example-1-flagging-items-based-on-quantity"},[e("span",null,"Example 1: Flagging Items Based on Quantity")])],-1)),e("p",null,[t[10]||(t[10]=n("Let’s start with a practical example by considering a file named ")),i(u,{icon:"fas fa-file-lines"}),t[11]||(t[11]=e("code",null,"food_list.txt",-1)),t[12]||(t[12]=n(" with the following content."))]),t[19]||(t[19]=w(`<div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">Food List Items</span>
<span class="line">No      Item_Name               Price           Quantity</span>
<span class="line">1       Mangoes                 $3.45              5</span>
<span class="line">2       Apples                  $2.45              25</span>
<span class="line">3       Pineapples              $4.45              55</span>
<span class="line">4       Tomatoes                $3.45              25</span>
<span class="line">5       Onions                  $1.45              15</span>
<span class="line">6       Bananas                 $3.45              30</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Consider running the following command that will flag food items whose quantity is less than or equal to <strong>20</strong> with a <code>(*)</code> sign at the end of each line:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">awk</span> <span class="token string">&#39;$4 &lt;= 20 { printf &quot;%s\\t%s\\n&quot;, $0,&quot;*&quot; ; } $4 &gt; 20 { print $0 ;}&#39;</span> food_list.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://tecmint.com/wp-content/uploads/2016/06/Flagging-Items-Based-on-Quantity.png" alt="Flagging Items Based on Quantity" tabindex="0" loading="lazy"><figcaption>Flagging Items Based on Quantity</figcaption></figure><p>The command above actually works as follows:</p><ul><li>First, it checks whether the quantity, fourth field of each input line is less than or equal to <strong>20</strong>, if a value meets that condition, it is printed and flagged with the <code>(*)</code> sign at the end using expression one: <code>$4 &lt;= 20</code></li><li>Secondly, it checks if the fourth field of each input line is greater than <strong>20</strong>, and if a line meets the condition it gets printed using expression two: <code>$4 &gt; 20</code></li></ul><div class="hint-container important"><p class="hint-container-title">The Problem:</p><p>But there is one problem here, when the <strong>first expression</strong> is executed, a line that we want to flag is printed using: <code>{ printf &quot;%s\\t%s\\n&quot;, $0,&quot;**&quot; ; }</code> and then in the same step, the <strong>second expression</strong> is also checked which becomes a time-wasting factor.</p><p>So there is no need to execute the second expression, <code>$4 &gt; 20</code> again after printing already flagged lines that have been printed using the first expression.</p></div><hr><h2 id="optimized-command-using-next" tabindex="-1"><a class="header-anchor" href="#optimized-command-using-next"><span>Optimized Command Using next</span></a></h2><p>To deal with this problem, you have to use the <code>next</code> command as follows:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">awk</span> <span class="token string">&#39;$4 &lt;= 20 { printf &quot;%s\\t%s\\n&quot;, $0,&quot;*&quot; ; next; } $4 &gt; 20 { print $0 ;}&#39;</span> food_list.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://tecmint.com/wp-content/uploads/2016/06/Optimized-Command-Using-next.png" alt="Optimized Command Using next" tabindex="0" loading="lazy"><figcaption>Optimized Command Using next</figcaption></figure><p>Here’s how it works:</p><ul><li>When a line meets the <code>$4 &lt;= 20</code> condition, it prints the line with an asterisk and then next skips the remaining actions for that line, moving directly to the next line.</li><li>This prevents the <code>$4 &amp;gtl 20</code> condition from being checked for lines already processed.</li></ul><hr><h2 id="example-2-filtering-and-formatting-data" tabindex="-1"><a class="header-anchor" href="#example-2-filtering-and-formatting-data"><span>Example 2: Filtering and Formatting Data</span></a></h2><p>Consider a file <code>data.txt</code> with the following content:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="data.txt"><span>data.txt</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">ID   Name        Age   Score</span>
<span class="line">1    Alice       30    85</span>
<span class="line">2    Bob         25    90</span>
<span class="line">3    Charlie     35    70</span>
<span class="line">4    David       28    92</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>If you want to print only records where the score is above <strong>80</strong> and format them as “<strong>Name: [Name]</strong>, <strong>Score: [Score]</strong>“, use:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">awk</span> <span class="token string">&#39;$4 &gt; 80 { printf &quot;Name: %s, Score: %d\\n&quot;, $2, $4; next; }&#39;</span> data.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://tecmint.com/wp-content/uploads/2016/06/Printing-Records-with-Scores.png" alt="Printing Records with Scores" tabindex="0" loading="lazy"><figcaption>Printing Records with Scores</figcaption></figure><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Using the <strong>next</strong> command in awk is a powerful way to streamline your data processing by avoiding unnecessary evaluations. By skipping the rest of the script for lines that have already been processed, you make your awk scripts more efficient and faster.</p><p>For those seeking a comprehensive resource, we’ve compiled all the <strong>Awk</strong> series articles into a book, that includes 13 chapters and spans 41 pages, covering both basic and advanced Awk usage with practical examples.</p><p>In the next part of our awk series, we’ll explore how to use standard input (<strong>STDIN</strong>) with awk. Stay tuned, and as always, feel free to share your thoughts and questions in the comments below!</p>`,26)),x(" TODO: add ARTICLE CARD "),i(l,r(d({title:"How to Use ‘next’ Command with Awk in Linux - Part 6",desc:"In this article, we’ll explore how the `next` command in `awk` skips remaining patterns and moves to the next input line.",link:"https://chanhi2000.github.io/bookshelf/tecmint.com/use-next-command-with-awk-in-linux.html",logo:"https://tecmint.com/wp-content/uploads/2020/07/favicon.ico",background:"rgba(5,86,243,0.2)"})),null,16)])}const S=g(v,[["render",C]]),$=JSON.parse('{"path":"/tecmint.com/use-next-command-with-awk-in-linux.html","title":"How to Use ‘next’ Command with Awk in Linux - Part 6","lang":"en-US","frontmatter":{"lang":"en-US","title":"How to Use ‘next’ Command with Awk in Linux - Part 6","description":"Article(s) > How to Use ‘next’ Command with Awk in Linux - Part 6","icon":"iconfont icon-awk","category":["Linux","Shell","awk","Article(s)"],"tag":["blog","tecmint.com","sh","shell","linux","awk"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to Use ‘next’ Command with Awk in Linux - Part 6\\",\\"image\\":[\\"https://tecmint.com/wp-content/uploads/2016/06/Flagging-Items-Based-on-Quantity.png\\",\\"https://tecmint.com/wp-content/uploads/2016/06/Optimized-Command-Using-next.png\\",\\"https://tecmint.com/wp-content/uploads/2016/06/Printing-Records-with-Scores.png\\"],\\"datePublished\\":\\"2024-08-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aaron Kili\\",\\"url\\":\\"https://tecmint.com/author/aaronkili/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/tecmint.com/use-next-command-with-awk-in-linux.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to Use ‘next’ Command with Awk in Linux - Part 6"}],["meta",{"property":"og:description","content":"Article(s) > How to Use ‘next’ Command with Awk in Linux - Part 6"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tecmint.com/wp-content/uploads/2016/06/Use-next-Command-with-Awk-in-Linux.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://tecmint.com/wp-content/uploads/2016/06/Use-next-Command-with-Awk-in-Linux.png"}],["meta",{"name":"twitter:image:alt","content":"How to Use ‘next’ Command with Awk in Linux - Part 6"}],["meta",{"property":"article:author","content":"Aaron Kili"}],["meta",{"property":"article:tag","content":"awk"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:tag","content":"tecmint.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-08-12T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How to Use ‘next’ Command with Awk in Linux - Part 6"},{"property":"og:description","content":"How to Use ‘next’ Command with Awk in Linux - Part 6"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/tecmint.com/use-next-command-with-awk-in-linux.html"}]],"prev":"/tool/awk/articles/README.md","date":"2024-08-12T00:00:00.000Z","isOriginal":false,"author":[{"name":"Aaron Kili","url":"https://tecmint.com/author/aaronkili/"}],"cover":"https://tecmint.com/wp-content/uploads/2016/06/Use-next-Command-with-Awk-in-Linux.png"},"git":{},"readingTime":{"minutes":3.13,"words":939},"filePathRelative":"tecmint.com/use-next-command-with-awk-in-linux.md","copyright":{"author":"Aaron Kili"}}');export{S as comp,$ as data};
