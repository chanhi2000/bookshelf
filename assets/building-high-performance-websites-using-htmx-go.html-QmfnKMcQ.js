import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as t,b as l,a as b,t as h,n as r,g as d,w as e,e as a,r as i,o as f}from"./app-BVguHYKu.js";const q="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-websites-using-htmx-go/banner.png",w="/bookshelf/assets/image/blog.logrocket.com/building-high-performance-websites-using-htmx-go/to-do-list-app-preview-scaled.webp",y={},x={id:"frontmatter-title-관련",tabindex:"-1"},T={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},E={href:"https://w3schools.com/xml/ajax_intro.asp",target:"_blank",rel:"noopener noreferrer"},H={href:"https://htmx.org/docs/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://go.dev/doc/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://dev.mysql.com/downloads/installer/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/abhinav-anshul/htmx-todo-app",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/jmoiron/sqlx",target:"_blank",rel:"noopener noreferrer"};function O(k,n){const u=i("VPCard"),p=i("router-link"),m=i("SiteInfo"),c=i("RouteLink"),o=i("VPIcon");return f(),g("div",null,[s("h1",x,[s("a",T,[s("span",null,h(k.$frontmatter.title)+" 관련",1)])]),t(u,r(d({title:"Go > Article(s)",desc:"Article(s)",link:"/programming/go/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[t(p,{to:"#what-is-htmx"},{default:e(()=>n[0]||(n[0]=[a("What is htmx?")])),_:1,__:[0]})]),s("li",null,[t(p,{to:"#what-is-golang"},{default:e(()=>n[1]||(n[1]=[a("What is Golang?")])),_:1,__:[1]})]),s("li",null,[t(p,{to:"#building-a-simple-dynamic-app-with-htmx-and-go"},{default:e(()=>n[2]||(n[2]=[a("Building a simple dynamic app with htmx and Go")])),_:1,__:[2]}),s("ul",null,[s("li",null,[t(p,{to:"#setting-up-a-go-server"},{default:e(()=>n[3]||(n[3]=[a("Setting up a Go server")])),_:1,__:[3]})]),s("li",null,[t(p,{to:"#adding-interactivity-with-htmx"},{default:e(()=>n[4]||(n[4]=[a("Adding interactivity with htmx")])),_:1,__:[4]})])])]),s("li",null,[t(p,{to:"#advanced-usage-real-world-examples"},{default:e(()=>n[5]||(n[5]=[a("Advanced usage: Real-world examples")])),_:1,__:[5]}),s("ul",null,[s("li",null,[t(p,{to:"#building-a-to-do-list-app"},{default:e(()=>n[6]||(n[6]=[a("Building a to-do list app")])),_:1,__:[6]})]),s("li",null,[t(p,{to:"#define-a-task-model-in-go"},{default:e(()=>n[7]||(n[7]=[a("Define a task model in Go")])),_:1,__:[7]})]),s("li",null,[t(p,{to:"#api-endpoints-to-add-delete-and-mark-tasks-as-completed"},{default:e(()=>n[8]||(n[8]=[a("API endpoints to add, delete, and mark tasks as completed")])),_:1,__:[8]})]),s("li",null,[t(p,{to:"#building-a-database-using-sql"},{default:e(()=>n[9]||(n[9]=[a("Building a database using SQL")])),_:1,__:[9]})]),s("li",null,[t(p,{to:"#building-frontend-using-htmx"},{default:e(()=>n[10]||(n[10]=[a("Building frontend using htmx")])),_:1,__:[10]})])])]),s("li",null,[t(p,{to:"#optimizations"},{default:e(()=>n[11]||(n[11]=[a("Optimizations")])),_:1,__:[11]}),s("ul",null,[s("li",null,[t(p,{to:"#backend-optimizations-with-go"},{default:e(()=>n[12]||(n[12]=[a("Backend optimizations with Go")])),_:1,__:[12]})]),s("li",null,[t(p,{to:"#frontend-optimizations-with-htmx"},{default:e(()=>n[13]||(n[13]=[a("Frontend optimizations with htmx")])),_:1,__:[13]})])])]),s("li",null,[t(p,{to:"#benefits-trade-offs-and-best-practices"},{default:e(()=>n[14]||(n[14]=[a("Benefits, trade-offs, and best practices")])),_:1,__:[14]})])])]),n[79]||(n[79]=s("hr",null,null,-1)),t(m,{name:"Building high-performance websites using htmx and Go",desc:"Use htmx and Go to build high-performance websites, leveraging server-side rendering and minimal JavaScript for fast and efficient applications.",url:"https://blog.logrocket.com/building-high-performance-websites-using-htmx-go",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/building-high-performance-websites-using-htmx-go/banner.png"}),n[80]||(n[80]=s("p",null,[a("The web development landscape is shifting back toward server-side rendering and away from JavaScript-heavy client-side architectures. This trend has been fueled by tools like React Server Components and the "),s("code",null,"app"),a(" directory in frameworks like Next.js, which simplifies server-side routing and rendering.")],-1)),n[81]||(n[81]=s("figure",null,[s("img",{src:q,alt:"Building High-Performance Websites Using Htmx And Go",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Building High-Performance Websites Using Htmx And Go")],-1)),n[82]||(n[82]=s("p",null,"In response to this shift, tools like htmx are gaining popularity for building interactive web experiences with minimal JavaScript. The HTML-based htmx allows for server-side rendering using AJAX. In this article, we’ll explore how to build a high-performance website using htmx and Go, a backend language known for its speed and efficiency.",-1)),n[83]||(n[83]=s("hr",null,null,-1)),n[84]||(n[84]=s("h2",{id:"what-is-htmx",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#what-is-htmx"},[s("span",null,"What is htmx?")])],-1)),s("p",null,[t(c,{to:"/blog.logrocket.com/using-htmx-modern-apps-classic-techniques.html"},{default:e(()=>n[15]||(n[15]=[s("strong",null,"htmx",-1)])),_:1,__:[15]}),n[16]||(n[16]=a(" is a lightweight JavaScript library that enables building large, dynamic sites with minimal reliance on client-side JavaScript."))]),s("p",null,[n[18]||(n[18]=a("htmx injects various AJAX-like attributes and is rendered to simple HTML on the server, which allows developers to achieve ")),s("a",E,[t(o,{icon:"fas fa-globe"}),n[17]||(n[17]=a("AJAX"))]),n[19]||(n[19]=a("-like updates and dynamic interactions on the pages."))]),s("p",null,[n[21]||(n[21]=a("Let’s see a quick ")),s("a",H,[t(o,{icon:"fas fa-globe"}),n[20]||(n[20]=a("example straight from the docs"))]),n[22]||(n[22]=a(" to demonstrate how htmx handles dynamic interactions:"))]),n[85]||(n[85]=l(`<div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">hx-post</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/clicked<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name">hx-trigger</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>click<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name">hx-target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#parent-div<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name">hx-swap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>outerHTML<span class="token punctuation">&quot;</span></span></span>
<span class="line"><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  Click Me!</span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, a button element is given various attributes. When clicked, the <code>hx-post=&quot;/clicked&quot;</code> attribute sends an HTTP POST request to the <code>/clicked</code> API. Afterward, the button click will swap the targeted div with an ID of <code>#parent-div</code> with the response received from the API.</p><p>This is how htmx handles typical dynamic interactions. As you can see, the page or the element in this case will be server-rendered, thus quite quick in terms of interactivity, while saving on client-side JavaScript bundles.</p><hr><h2 id="what-is-golang" tabindex="-1"><a class="header-anchor" href="#what-is-golang"><span>What is Golang?</span></a></h2>`,5)),s("p",null,[s("a",I,[t(o,{icon:"fa-brands fa-golang"}),n[23]||(n[23]=a("Golang"))]),n[24]||(n[24]=a(", or Go, is a high-performance, typed programming language. Its automatic garbage collection, efficient concurrency model, and rapid execution make it a popular choice for building scalable backends."))]),n[86]||(n[86]=s("hr",null,null,-1)),n[87]||(n[87]=s("h2",{id:"building-a-simple-dynamic-app-with-htmx-and-go",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#building-a-simple-dynamic-app-with-htmx-and-go"},[s("span",null,"Building a simple dynamic app with htmx and Go")])],-1)),n[88]||(n[88]=s("h3",{id:"setting-up-a-go-server",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#setting-up-a-go-server"},[s("span",null,"Setting up a Go server")])],-1)),s("p",null,[n[25]||(n[25]=a("Setting up a Go server is the first step in building a backend with Go. Go’s specification makes it easy to quickly spin up a server by using its built-in ")),n[26]||(n[26]=s("code",null,"net/http",-1)),n[27]||(n[27]=a(" package. Assuming you have Go set up in your system, you can create a Go project in a directory and start by creating a file called ")),t(o,{icon:"fa-brands fa-golang"}),n[28]||(n[28]=s("code",null,"main.go",-1)),n[29]||(n[29]=a("."))]),n[89]||(n[89]=l(`<p>In this file, you have to import the <code>fmt</code> for string and log formatting and <code>net/http</code> for initiating the server:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="main.go"><span>main.go</span></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">  <span class="token string">&quot;net/http&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This creates the <code>main</code> function with the following server code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="main.go"><span>main.go</span></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">  <span class="token string">&quot;net/http&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Server running at http://localhost:8080&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This will run your server at 8080 port and print “Hello World!” in your terminal.</p><p>You can go a step further and, instead of printing the log, you can render a simple UI by changing the <code>main</code> function:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line">http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">// Set the Content-Type header to HTML</span></span>
<span class="line">w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// Write an HTML response</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">\`</span>
<span class="line">  &lt;!DOCTYPE html&gt;</span>
<span class="line">  &lt;html lang=&quot;en&quot;&gt;</span>
<span class="line">  &lt;head&gt;</span>
<span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span>
<span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span>
<span class="line">    &lt;title&gt;Hello, World&lt;/title&gt;</span>
<span class="line">  &lt;/head&gt;</span>
<span class="line">  &lt;body&gt;</span>
<span class="line">    &lt;h1&gt;Hello, World!&lt;/h1&gt;</span>
<span class="line">    &lt;p&gt;Welcome to your first Go web server.&lt;/p&gt;</span>
<span class="line">  &lt;/body&gt;</span>
<span class="line">  &lt;/html&gt;</span>
<span class="line">\`</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)),s("p",null,[n[30]||(n[30]=a("Now, at the root ")),n[31]||(n[31]=s("code",null,"/",-1)),n[32]||(n[32]=a(", this HTML will be rendered instead. The key thing to note here is that ")),n[33]||(n[33]=s("code",null,'w.Header().Set("Content-Type", "text/html")',-1)),n[34]||(n[34]=a(" sets the response header to indicate the content type is HTML. Finally, you can execute this file by running the command ")),n[35]||(n[35]=s("code",null,"go run main.go",-1)),n[36]||(n[36]=a(" where ")),t(o,{icon:"fa-brands fa-golang"}),n[37]||(n[37]=s("code",null,"main.go",-1)),n[38]||(n[38]=a(" is the filename."))]),n[90]||(n[90]=l(`<h3 id="adding-interactivity-with-htmx" tabindex="-1"><a class="header-anchor" href="#adding-interactivity-with-htmx"><span>Adding interactivity with htmx</span></a></h3><p>You can use htmx to render the same HTML snippet with htmx-specific attributes that will allow you to add interactions to the page.</p><p>You can integrate htmx in this project by just using a CDN, and including it in your script wherever you are rendering:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/htmx.org<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In this example, you can update your <code>main()</code> function to include the htmx syntax:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">// Handler for the main page</span></span>
<span class="line">http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">\`</span>
<span class="line">&lt;!DOCTYPE html&gt;</span>
<span class="line">&lt;html lang=&quot;en&quot;&gt;</span>
<span class="line">&lt;head&gt;</span>
<span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span>
<span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span>
<span class="line">  &lt;title&gt;HTMX Demo&lt;/title&gt;</span>
<span class="line">  &lt;script src=&quot;https://unpkg.com/htmx.org&quot;&gt;&lt;/script&gt;</span>
<span class="line">&lt;/head&gt;</span>
<span class="line">&lt;body&gt;</span>
<span class="line">  &lt;h1&gt;HTMX Demo&lt;/h1&gt;</span>
<span class="line">  &lt;div id=&quot;content&quot;&gt;</span>
<span class="line">    &lt;p&gt;Click the button to fetch updated content!&lt;/p&gt;</span>
<span class="line">  &lt;/div&gt;</span>
<span class="line">  &lt;button hx-get=&quot;/update&quot; hx-target=&quot;#content&quot; hx-swap=&quot;innerHTML&quot;&gt;</span>
<span class="line">    Get Updated Content</span>
<span class="line">  &lt;/button&gt;</span>
<span class="line">&lt;/body&gt;</span>
<span class="line">&lt;/html&gt;</span>
<span class="line">\`</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can see the <code>script</code> tag that now allows you to write the htmx-specific syntax and hence the attributes. What is really happening here?</p><p>Well, as you have seen in the first section of this article, the <code>hx-get=&quot;/update&quot;</code> attribute will get a response from the <code>/update</code> API and will swap the <code>innerHTML</code> due to <code>hx-swap=&quot;innerHTML&quot;</code>. This new response will update the div with an ID of <code>#content&quot;</code> due to the <code>hx-target=&quot;#content&quot;</code> attribute.</p><p>For all of this to happen, you need to have the <code>/update</code> endpoint that will send a content response that is supposed to replace the existing HTML content. In Go, you can create such a handler like so:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line">http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/update&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">\`&lt;p&gt;Content updated at: \`</span><span class="token operator">+</span>r<span class="token punctuation">.</span>RemoteAddr<span class="token operator">+</span><span class="token string">\`&lt;/p&gt;\`</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This handler will send the HTML response of <code>&lt;p&gt;Content updated at: +r.RemoteAddr+&lt;/p&gt;</code>, i.e. printing the IP address of the user.</p><hr><h2 id="advanced-usage-real-world-examples" tabindex="-1"><a class="header-anchor" href="#advanced-usage-real-world-examples"><span>Advanced usage: Real-world examples</span></a></h2><p>Now that you understand the basic implementation with Go, we’re going to go a little deeper and build a small to-do list app.</p><h3 id="building-a-to-do-list-app" tabindex="-1"><a class="header-anchor" href="#building-a-to-do-list-app"><span>Building a to-do list app</span></a></h3>`,15)),s("p",null,[n[39]||(n[39]=a("First things first, create a directory/folder on your system and create a ")),t(o,{icon:"fa-brands fa-golang"}),n[40]||(n[40]=s("code",null,"main.go",-1)),n[41]||(n[41]=a(" file. Alternatively, you can run the following code:"))]),n[91]||(n[91]=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">go mod init todo-app</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),s("p",null,[n[42]||(n[42]=a("Here, the todo-app will be your project name, which will create the ")),t(o,{icon:"fa-brands fa-golang"}),n[43]||(n[43]=s("code",null,"main.go",-1)),n[44]||(n[44]=a(" file where you will write all the backend logic. Now, you need something to store your entries to ensure data persistence."))]),n[92]||(n[92]=l(`<p>You can use SQL to store your creds and the items that your to-do app will contain. You’ll need to import this library by running the following:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">go get <span class="token parameter variable">-u</span> github.com/go-sql-driver/mysql</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,2)),s("p",null,[n[45]||(n[45]=a("Finally, in your ")),t(o,{icon:"fa-brands fa-golang"}),n[46]||(n[46]=s("code",null,"main.go",-1)),n[47]||(n[47]=a(" file, import the following libraries:"))]),n[93]||(n[93]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;database/sql&quot;</span></span>
<span class="line">  <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">  <span class="token string">&quot;html/template&quot;</span></span>
<span class="line">  <span class="token string">&quot;log&quot;</span></span>
<span class="line">  <span class="token string">&quot;net/http&quot;</span></span>
<span class="line">  <span class="token boolean">_</span> <span class="token string">&quot;github.com/go-sql-driver/mysql&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="define-a-task-model-in-go" tabindex="-1"><a class="header-anchor" href="#define-a-task-model-in-go"><span>Define a task model in Go</span></a></h3><p>Now, you need to define the schema for your to-do items. Any to-do items will have an ID and a status to track if it is completed or not. In Go, you can have this schema typed in as follows:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">type</span> Todo <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    ID <span class="token builtin">int</span> <span class="token string">\`json:&quot;id&quot;\`</span></span>
<span class="line">    Title <span class="token builtin">string</span> <span class="token string">\`json:&quot;title&quot;\`</span></span>
<span class="line">    Completed <span class="token builtin">bool</span> <span class="token string">\`json:&quot;completed&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With the schema set, you now need to have an <code>indexHandler</code> function that will render an HTML file to the browser, and with that, the rest of your backend logic will mutate the rendered HTML based on the new to-do items or its status of being completed:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">indexHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    tmpl<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">&quot;index.html&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Unable to load index.html&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    tmpl<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="api-endpoints-to-add-delete-and-mark-tasks-as-completed" tabindex="-1"><a class="header-anchor" href="#api-endpoints-to-add-delete-and-mark-tasks-as-completed"><span>API endpoints to add, delete, and mark tasks as completed</span></a></h3><p>With <code>indexHandler</code> added, the next step is to define API endpoints and their corresponding functions:</p><ul><li><code>getTodosHandler</code>: Gets all the to-do items from the SQL backend</li><li><code>addTodoHandler</code>: Adds an input from the user by entering the HTML input field</li><li><code>deleteTodoHandler</code>: Deletes items by handling the <code>delete</code> button click</li><li><code>completeTodoHandler</code>: Toggles the item status and marks it as completed</li></ul>`,9)),s("p",null,[n[48]||(n[48]=a("You can find the complete ")),t(o,{icon:"fa-brands fa-golang"}),n[49]||(n[49]=s("code",null,"main.go",-1)),n[50]||(n[50]=a(" backend logic here:"))]),n[94]||(n[94]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="main.go"><span>main.go</span></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;database/sql&quot;</span></span>
<span class="line">    <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">    <span class="token string">&quot;html/template&quot;</span></span>
<span class="line">    <span class="token string">&quot;log&quot;</span></span>
<span class="line">    <span class="token string">&quot;net/http&quot;</span></span>
<span class="line">    <span class="token boolean">_</span> <span class="token string">&quot;github.com/go-sql-driver/mysql&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">type</span> Todo <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    ID <span class="token builtin">int</span> <span class="token string">\`json:&quot;id&quot;\`</span></span>
<span class="line">    Title <span class="token builtin">string</span> <span class="token string">\`json:&quot;title&quot;\`</span></span>
<span class="line">    Completed <span class="token builtin">bool</span> <span class="token string">\`json:&quot;completed&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">var</span> db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB</span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> err <span class="token builtin">error</span></span>
<span class="line">    dsn <span class="token operator">:=</span> <span class="token string">&quot;root:Thecityofroma@123@tcp(localhost:3306)/todo_app&quot;</span></span>
<span class="line">    db<span class="token punctuation">,</span> err <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span> dsn<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;Error connecting to the database: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;Error pinging the database: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> indexHandler<span class="token punctuation">)</span></span>
<span class="line">    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/api/todos&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> r<span class="token punctuation">.</span>Method <span class="token operator">==</span> http<span class="token punctuation">.</span>MethodGet <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">getTodosHandler</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> r<span class="token punctuation">.</span>Method <span class="token operator">==</span> http<span class="token punctuation">.</span>MethodPost <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">addTodoHandler</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Method not allowed&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusMethodNotAllowed<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/api/delete-todo&quot;</span><span class="token punctuation">,</span> deleteTodoHandler<span class="token punctuation">)</span></span>
<span class="line">    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/api/complete-todo&quot;</span><span class="token punctuation">,</span> completeTodoHandler<span class="token punctuation">)</span></span>
<span class="line">    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Server is running on http://localhost:8080&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;Error starting server: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">indexHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    tmpl<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">&quot;index.html&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Unable to load index.html&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    tmpl<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">renderTodoHTML</span><span class="token punctuation">(</span>todo Todo<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">    completedStatus <span class="token operator">:=</span> <span class="token string">&quot;&quot;</span></span>
<span class="line">    bgColor <span class="token operator">:=</span> <span class="token string">&quot;white&quot;</span></span>
<span class="line">    buttonText <span class="token operator">:=</span> <span class="token string">&quot;Complete&quot;</span></span>
<span class="line">    <span class="token keyword">if</span> todo<span class="token punctuation">.</span>Completed <span class="token punctuation">{</span></span>
<span class="line">        completedStatus <span class="token operator">=</span> <span class="token string">&quot; (Completed)&quot;</span></span>
<span class="line">        bgColor <span class="token operator">=</span> <span class="token string">&quot;#f0f0f0&quot;</span> <span class="token comment">// Light grey background for completed tasks</span></span>
<span class="line">        buttonText <span class="token operator">=</span> <span class="token string">&quot;Uncomplete&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">\`</span>
<span class="line">&lt;div class=&quot;todo-item&quot; id=&quot;todo-%d&quot; style=&quot;background-color: %s;&quot;&gt;</span>
<span class="line">&lt;p&gt;&lt;strong&gt;%s&lt;/strong&gt;%s&lt;/p&gt;</span>
<span class="line">&lt;button hx-post=&quot;/api/delete-todo&quot;</span>
<span class="line">hx-target=&quot;#todo-%d&quot;</span>
<span class="line">hx-swap=&quot;outerHTML&quot;</span>
<span class="line">hx-include=&quot;#todo-%d [name=id]&quot;</span>
<span class="line">type=&quot;button&quot;&gt;</span>
<span class="line">Delete</span>
<span class="line">&lt;/button&gt;</span>
<span class="line">&lt;button hx-post=&quot;/api/complete-todo&quot;</span>
<span class="line">hx-target=&quot;#todo-%d&quot;</span>
<span class="line">hx-swap=&quot;outerHTML&quot;</span>
<span class="line">hx-include=&quot;#todo-%d [name=id]&quot;</span>
<span class="line">type=&quot;button&quot;&gt;</span>
<span class="line">                %s</span>
<span class="line">&lt;/button&gt;</span>
<span class="line">&lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;%d&quot;&gt;</span>
<span class="line">&lt;/div&gt;\`</span><span class="token punctuation">,</span> todo<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> bgColor<span class="token punctuation">,</span> todo<span class="token punctuation">.</span>Title<span class="token punctuation">,</span> completedStatus<span class="token punctuation">,</span> todo<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> todo<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> todo<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> todo<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> buttonText<span class="token punctuation">,</span> todo<span class="token punctuation">.</span>ID<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">getTodosHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT id, title, completed FROM todos&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Unable to fetch TODO items&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">var</span> todos <span class="token punctuation">[</span><span class="token punctuation">]</span>Todo</span>
<span class="line">    <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> todo Todo</span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todo<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token operator">&amp;</span>todo<span class="token punctuation">.</span>Title<span class="token punctuation">,</span> <span class="token operator">&amp;</span>todo<span class="token punctuation">.</span>Completed<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Error reading TODO items&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        todos <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>todos<span class="token punctuation">,</span> todo<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">var</span> html <span class="token builtin">string</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> todo <span class="token operator">:=</span> <span class="token keyword">range</span> todos <span class="token punctuation">{</span></span>
<span class="line">        html <span class="token operator">+=</span> <span class="token function">renderTodoHTML</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">addTodoHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Invalid form data&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    title <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">FormValue</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> title <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Title is required&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Insert new TODO into the database</span></span>
<span class="line">    result<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO todos (title, completed) VALUES (?, false)&quot;</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Unable to add TODO item&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Get the last inserted ID</span></span>
<span class="line">    id<span class="token punctuation">,</span> err <span class="token operator">:=</span> result<span class="token punctuation">.</span><span class="token function">LastInsertId</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Unable to fetch inserted ID&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Fetch the newly added TODO from the database</span></span>
<span class="line">    todo <span class="token operator">:=</span> Todo<span class="token punctuation">{</span></span>
<span class="line">        ID<span class="token punctuation">:</span> <span class="token function">int</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        Title<span class="token punctuation">:</span> title<span class="token punctuation">,</span></span>
<span class="line">        Completed<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Render the newly added TODO item as HTML</span></span>
<span class="line">    html <span class="token operator">:=</span> <span class="token function">renderTodoHTML</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// Return the generated HTML for the new todo</span></span>
<span class="line">    w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// deleteTodoHandler deletes a TODO item by ID.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">deleteTodoHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> r<span class="token punctuation">.</span>Method <span class="token operator">!=</span> http<span class="token punctuation">.</span>MethodPost <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Method not allowed&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusMethodNotAllowed<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Invalid form data&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    id <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">FormValue</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> id <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;ID is required&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Execute the delete query</span></span>
<span class="line">    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">&quot;DELETE FROM todos WHERE id = ?&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Unable to delete TODO item&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Respond with an empty string to indicate successful deletion.</span></span>
<span class="line">    w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// completeTodoHandler toggles the completed status of a TODO item by ID.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">completeTodoHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> r<span class="token punctuation">.</span>Method <span class="token operator">!=</span> http<span class="token punctuation">.</span>MethodPost <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Method not allowed&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusMethodNotAllowed<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Invalid form data&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    id <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">FormValue</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> id <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;ID is required&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Toggle the completed status</span></span>
<span class="line">    <span class="token keyword">var</span> completed <span class="token builtin">bool</span></span>
<span class="line">    err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT completed FROM todos WHERE id = ?&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>completed<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">==</span> sql<span class="token punctuation">.</span>ErrNoRows <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;TODO item not found&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Unable to fetch TODO item&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Update the completed status</span></span>
<span class="line">    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE todos SET completed = ? WHERE id = ?&quot;</span><span class="token punctuation">,</span> <span class="token operator">!</span>completed<span class="token punctuation">,</span> id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Unable to update TODO item&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Fetch the updated TODO item</span></span>
<span class="line">    <span class="token keyword">var</span> todo Todo</span>
<span class="line">    err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT id, title, completed FROM todos WHERE id = ?&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todo<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token operator">&amp;</span>todo<span class="token punctuation">.</span>Title<span class="token punctuation">,</span> <span class="token operator">&amp;</span>todo<span class="token punctuation">.</span>Completed<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">==</span> sql<span class="token punctuation">.</span>ErrNoRows <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Updated TODO item not found&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Unable to fetch updated TODO item&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Render and return the updated TODO item&#39;s HTML</span></span>
<span class="line">    html <span class="token operator">:=</span> <span class="token function">renderTodoHTML</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span></span>
<span class="line">    w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="building-a-database-using-sql" tabindex="-1"><a class="header-anchor" href="#building-a-database-using-sql"><span>Building a database using SQL</span></a></h3>`,2)),s("p",null,[n[53]||(n[53]=a("To make sure your to-do items are persisted, you have to save them to a local database. In this example, I’ll use ")),t(c,{to:"/blog.logrocket.com/using-sql-database-golang.html"},{default:e(()=>n[51]||(n[51]=[s("strong",null,"SQL",-1)])),_:1,__:[51]}),n[54]||(n[54]=a(". Just spin up a new terminal, assuming you have ")),s("a",A,[t(o,{icon:"iconfont icon-mysql"}),n[52]||(n[52]=a("SQL installed"))]),n[55]||(n[55]=a(" on your system, you can create a new database by running:"))]),n[95]||(n[95]=l(`<div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> todo_app<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now create a schema on the database called <code>todo_app</code> with the described types and keys:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> todos <span class="token punctuation">(</span></span>
<span class="line">  id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span></span>
<span class="line">  title <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">  completed <span class="token keyword">BOOLEAN</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">FALSE</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, the <code>id</code> is our primary key.</p><p>To make sure your database has been created, you can run <code>show databases;</code>; it will render all your databases as follows:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="query result"><span>query result</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">+--------------------+</span>
<span class="line">| Database |</span>
<span class="line">+--------------------+</span>
<span class="line">| information_schema |</span>
<span class="line">| mysql              |</span>
<span class="line">| performance_schema |</span>
<span class="line">| sys                |</span>
<span class="line">| testdb             |</span>
<span class="line">| todo_app.          | -&gt; this is your database</span>
<span class="line">+--------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>To check the entries in your app, run <code>SELECT id, title, details FROM todos;</code>, which will render all the to-do items entries.</p><h3 id="building-frontend-using-htmx" tabindex="-1"><a class="header-anchor" href="#building-frontend-using-htmx"><span>Building frontend using htmx</span></a></h3>`,8)),s("p",null,[n[56]||(n[56]=a("Now, with the ")),t(o,{icon:"fa-brands fa-golang"}),n[57]||(n[57]=s("code",null,"main.go",-1)),n[58]||(n[58]=a(" and the ")),n[59]||(n[59]=s("code",null,"SQL",-1)),n[60]||(n[60]=a(" logic set in, you can move over to the HTML part and create a file called ")),t(o,{icon:"fa-brands fa-html5"}),n[61]||(n[61]=s("code",null,"index.html",-1)),n[62]||(n[62]=a(". It will be responsible for rendering out and swapping items based on the mutation from the backend logic from the ")),t(o,{icon:"fa-brands fa-golang"}),n[63]||(n[63]=s("code",null,"main.go",-1)),n[64]||(n[64]=a(" file:"))]),n[96]||(n[96]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="index.html"><span>index.html</span></div><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>TODO List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/htmx.org<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"></span>
<span class="line">    <span class="token selector">body</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">margin</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token selector">h1</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token selector">.todo-item</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ddd<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>TODO List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">&lt;!-- Form to add a new TODO --&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>add-todo-form<span class="token punctuation">&quot;</span></span> <span class="token attr-name">hx-post</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/api/todos<span class="token punctuation">&quot;</span></span> <span class="token attr-name">hx-swap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beforeend<span class="token punctuation">&quot;</span></span> <span class="token attr-name">hx-target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#todo-list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Enter a TODO item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">required</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo-list<span class="token punctuation">&quot;</span></span></span>
<span class="line">     <span class="token attr-name">hx-get</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/api/todos<span class="token punctuation">&quot;</span></span></span>
<span class="line">     <span class="token attr-name">hx-trigger</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>load<span class="token punctuation">&quot;</span></span></span>
<span class="line">     <span class="token attr-name">hx-swap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>innerHTML<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!-- TODO items will be loaded here dynamically --&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[68]||(n[68]=a("Notice that the CSS is being written in the same file, but you can move to a CSS file of its own based on your preference. You can move the styling part to its own file and import the file in HTML itself. Find the complete code in this ")),s("a",R,[n[65]||(n[65]=a("GitHub repository (")),t(o,{icon:"iconfont icon-github"}),n[66]||(n[66]=s("code",null,"abhinav-anshul/htmx-todo-app",-1)),n[67]||(n[67]=a(")"))]),n[69]||(n[69]=a("."))]),n[97]||(n[97]=l('<p>Make sure you have SQL set up on your system for the application to work correctly. You can see the preview here:</p><figure><img src="'+w+'" alt="To-Do List App Preview" tabindex="0" loading="lazy"><figcaption>To-Do List App Preview</figcaption></figure><hr><h2 id="optimizations" tabindex="-1"><a class="header-anchor" href="#optimizations"><span>Optimizations</span></a></h2><p>In a typical htmx and Go setup, you already have an application that is quite fast as it leverages server-side rendering, but you can still use a series of steps on both the frontend and backend as you scale up your application. Below are a few optimization methods I recommend.</p><h3 id="backend-optimizations-with-go" tabindex="-1"><a class="header-anchor" href="#backend-optimizations-with-go"><span>Backend optimizations with Go</span></a></h3><p>Backend optimization ensures smooth API delivery and scales an application’s performance. Go is built with optimal performance and scalability in mind.</p><h4 id="efficient-database-handling-with-go-use-sqlx-or-native-database-drivers" tabindex="-1"><a class="header-anchor" href="#efficient-database-handling-with-go-use-sqlx-or-native-database-drivers"><span>Efficient database handling with Go: Use sqlx or native database drivers</span></a></h4>',8)),s("p",null,[n[71]||(n[71]=a("Go offers quick database interactions that result in fast performance. It provides both native database drivers and ")),s("a",D,[t(o,{icon:"iconfont icon-github"}),n[70]||(n[70]=s("code",null,"jmoiron/sqlx",-1))]),n[72]||(n[72]=a(" for simplified querying. As you have seen in this article, you have used native database driver, SQL just by importing a package straight from GitHub. Similarly, you can use sqlx to have reduced boilerplate and more built-in features like struct mapping."))]),n[98]||(n[98]=l(`<h4 id="caching-responses-to-reduce-server-load" tabindex="-1"><a class="header-anchor" href="#caching-responses-to-reduce-server-load"><span>Caching responses to reduce server load</span></a></h4><p>Go offers several approaches to caching to reduce computation and not overburden the database. You can use in-memory caching techniques such as <code>sync.Map</code> for lightweight, easy-to-use key-value pair-styled caching:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">import</span> <span class="token string">&quot;sync&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> cache sync<span class="token punctuation">.</span>Map</span>
<span class="line"><span class="token comment">// setting a value in in-memory cache</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">setCache</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  cache<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[74]||(n[74]=a("Similarly, for more advanced use cases, you can use ")),t(c,{to:"/blog.logrocket.com/guide-to-fully-understanding-redis.html"},{default:e(()=>n[73]||(n[73]=[s("strong",null,"Redis",-1)])),_:1,__:[73]}),n[75]||(n[75]=a(". All you have to do is import the package from GitHub and get started:"))]),n[99]||(n[99]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">&quot;github.com/redis/go-redis/v9&quot;</span> <span class="token string">&quot;context&quot;</span> <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="use-goroutines-for-concurrent-task-execution" tabindex="-1"><a class="header-anchor" href="#use-goroutines-for-concurrent-task-execution"><span>Use goroutines for concurrent task execution</span></a></h4>`,2)),s("p",null,[n[77]||(n[77]=a("It would be unfair to talk about Go and not mention concurrency. ")),t(c,{to:"/blog.logrocket.com/concurrency-patterns-golang-waitgroups-goroutines.html"},{default:e(()=>n[76]||(n[76]=[s("strong",null,"Goroutines",-1)])),_:1,__:[76]}),n[78]||(n[78]=a(", when paired with concurrency, can be quite powerful. Goroutines are small lightweight threads that can be run programmatically to manage by Go’s runtime:"))]),n[100]||(n[100]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">doTask</span><span class="token punctuation">(</span>ID <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Processing&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">go</span> <span class="token function">doTask</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="frontend-optimizations-with-htmx" tabindex="-1"><a class="header-anchor" href="#frontend-optimizations-with-htmx"><span>Frontend optimizations with htmx</span></a></h3><p>In this application, you optimized HTML by using htmx, an external third-party library that relies heavily on server-side rendering. htmx not only makes it easier to develop applications with Go but it also minimizes the payload.</p><p>It uses some of the very smart and well-thought-out attributes, such as <code>hx-trigger=&quot;revealed&quot;</code>, to lazy load the content. If you are developing a scalable app with server-side rendering, htmx is probably the missing piece if not using any other server-rendering libraries.</p><hr><h2 id="benefits-trade-offs-and-best-practices" tabindex="-1"><a class="header-anchor" href="#benefits-trade-offs-and-best-practices"><span>Benefits, trade-offs, and best practices</span></a></h2><p>As web development trends shift toward optimizing performance and reducing JavaScript overhead, the htmx and Go stack provides an efficient alternative to traditional frontend-heavy frameworks.</p><p>When building an app with htmx and Go, you can maintain a clear separation between backend logic and UI updates, which can save you a lot of time when working across different teams.</p><p>While htmx is relatively new and may have a learning curve, developers with a solid Go background will find it a powerful choice for building fast, server-rendered applications.</p>`,9)),b(" TODO: add ARTICLE CARD "),t(u,r(d({title:"Building high-performance websites using htmx and Go",desc:"Use htmx and Go to build high-performance websites, leveraging server-side rendering and minimal JavaScript for fast and efficient applications.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/building-high-performance-websites-using-htmx-go.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const M=v(y,[["render",O]]),C=JSON.parse('{"path":"/blog.logrocket.com/building-high-performance-websites-using-htmx-go.html","title":"Building high-performance websites using htmx and Go","lang":"en-US","frontmatter":{"lang":"en-US","title":"Building high-performance websites using htmx and Go","description":"Article(s) > Building high-performance websites using htmx and Go","icon":"fa-brands fa-golang","category":["Go","Article(s)"],"tag":["blog","blog.logrocket.com","go","golang"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Building high-performance websites using htmx and Go\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-websites-using-htmx-go/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-websites-using-htmx-go/to-do-list-app-preview-scaled.webp\\"],\\"datePublished\\":\\"2025-02-10T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Abhinav Anshul\\",\\"url\\":\\"https://blog.logrocket.com/author/abhinavanshul/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/building-high-performance-websites-using-htmx-go.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Building high-performance websites using htmx and Go"}],["meta",{"property":"og:description","content":"Article(s) > Building high-performance websites using htmx and Go"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-websites-using-htmx-go/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-high-performance-websites-using-htmx-go/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Building high-performance websites using htmx and Go"}],["meta",{"property":"article:author","content":"Abhinav Anshul"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-02-10T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Building high-performance websites using htmx and Go"},{"property":"og:description","content":"Building high-performance websites using htmx and Go"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/building-high-performance-websites-using-htmx-go.html"}]],"prev":"/programming/go/articles/README.md","date":"2025-02-10T00:00:00.000Z","isOriginal":false,"author":[{"name":"Abhinav Anshul","url":"https://blog.logrocket.com/author/abhinavanshul/"}],"cover":"/assets/image/blog.logrocket.com/building-high-performance-websites-using-htmx-go/banner.png"},"git":{},"readingTime":{"minutes":11.15,"words":3346},"filePathRelative":"blog.logrocket.com/building-high-performance-websites-using-htmx-go.md","copyright":{"author":"Abhinav Anshul"}}');export{M as comp,C as data};
