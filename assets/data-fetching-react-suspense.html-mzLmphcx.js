import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as n,f as e,b as l,a as u,e as a,t as b,n as d,g as k,w as p,r as i,o as f}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/blog.logrocket.com/data-fetching-react-suspense/banner.png",y="/bookshelf/assets/image/blog.logrocket.com/data-fetching-react-suspense/sample-todo-app.png",x="/bookshelf/assets/image/blog.logrocket.com/data-fetching-react-suspense/janky-loading-demo-app.webp",j="/bookshelf/assets/image/blog.logrocket.com/data-fetching-react-suspense/demo-app-top-down-loading.webp",S="/bookshelf/assets/image/blog.logrocket.com/data-fetching-react-suspense/delegating-error-boundaries-graphic.png",T="/bookshelf/assets/image/blog.logrocket.com/data-fetching-react-suspense/network-requests-chrome-devtools.png",D={},P={id:"frontmatter-title-관련",tabindex:"-1"},R={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"},I={href:"https://react.dev/reference/react/Suspense",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/reactjs/rfcs/blob/main/text/0213-suspense-in-react-18.md",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/ghengeveld/react-async",target:"_blank",rel:"noopener noreferrer"},U={href:"https://relay.dev/docs/guided-tour/rendering/loading-states/#internaldocs-banner",target:"_blank",rel:"noopener noreferrer"},N={href:"https://swr.vercel.app/docs/suspense",target:"_blank",rel:"noopener noreferrer"},L={href:"https://web.dev/cls/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/ovieokeh/suspense-data-fetching",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/ovieokeh/suspense-data-fetching/blob/master/public/index.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/ovieokeh/suspense-data-fetching/blob/master/public/index.css",target:"_blank",rel:"noopener noreferrer"},F={id:"wrappromise-js",tabindex:"-1"},C={class:"header-anchor",href:"#wrappromise-js"},z={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw",target:"_blank",rel:"noopener noreferrer"},M={href:"https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary",target:"_blank",rel:"noopener noreferrer"},V={id:"fetchdata-js",tabindex:"-1"},H={class:"header-anchor",href:"#fetchdata-js"},J={href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://developer.mozilla.org/en-US/docs/Web/API/Response",target:"_blank",rel:"noopener noreferrer"},Z={id:"index-jsx",tabindex:"-1"},G={class:"header-anchor",href:"#index-jsx"},$={id:"app-jsx",tabindex:"-1"},X={class:"header-anchor",href:"#app-jsx"},K={id:"userwelcome-jsx",tabindex:"-1"},Q={class:"header-anchor",href:"#userwelcome-jsx"},_={id:"todos-jsx",tabindex:"-1"},ss={class:"header-anchor",href:"#todos-jsx"},ns={href:"https://reactjs.org/docs/concurrent-mode-patterns.html#suspenselist",target:"_blank",rel:"noopener noreferrer"},as={href:"https://react.dev",target:"_blank",rel:"noopener noreferrer"};function es(g,s){const c=i("VPCard"),o=i("router-link"),t=i("VPIcon"),m=i("SiteInfo"),r=i("RouteLink");return f(),h("div",null,[n("h1",P,[n("a",R,[n("span",null,b(g.$frontmatter.title)+" 관련",1)])]),e(c,d(k({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",A,[n("ul",null,[n("li",null,[e(o,{to:"#what-is-react-suspense"},{default:p(()=>s[0]||(s[0]=[a("What is React Suspense?")])),_:1,__:[0]})]),n("li",null,[e(o,{to:"#how-to-use-suspense"},{default:p(()=>s[1]||(s[1]=[a("How to use Suspense")])),_:1,__:[1]})]),n("li",null,[e(o,{to:"#react-data-fetching-patterns"},{default:p(()=>s[2]||(s[2]=[a("React data fetching patterns")])),_:1,__:[2]}),n("ul",null,[n("li",null,[e(o,{to:"#fetch-on-render"},{default:p(()=>s[3]||(s[3]=[a("Fetch-on-render")])),_:1,__:[3]})]),n("li",null,[e(o,{to:"#fetch-then-render"},{default:p(()=>s[4]||(s[4]=[a("Fetch-then-render")])),_:1,__:[4]})]),n("li",null,[e(o,{to:"#data-fetching-using-suspense"},{default:p(()=>s[5]||(s[5]=[a("Data fetching using Suspense")])),_:1,__:[5]})])])]),n("li",null,[e(o,{to:"#data-fetching-with-and-without-suspense"},{default:p(()=>s[6]||(s[6]=[a("Data fetching with and without Suspense")])),_:1,__:[6]})]),n("li",null,[e(o,{to:"#building-a-sample-app-with-react-suspense"},{default:p(()=>s[7]||(s[7]=[a("Building a sample app with React Suspense")])),_:1,__:[7]})]),n("li",null,[e(o,{to:"#structuring-the-api-folder"},{default:p(()=>s[8]||(s[8]=[a("Structuring the API folder")])),_:1,__:[8]}),n("ul",null,[n("li",null,[e(o,{to:"#wrappromise-js"},{default:p(()=>[e(t,{icon:"fa-brands fa-js"}),s[9]||(s[9]=a("wrapPromise.js"))]),_:1,__:[9]})]),n("li",null,[e(o,{to:"#fetchdata-js"},{default:p(()=>[e(t,{icon:"fa-brands fa-js"}),s[10]||(s[10]=a("fetchData.js"))]),_:1,__:[10]})])])]),n("li",null,[e(o,{to:"#building-our-app-components"},{default:p(()=>s[11]||(s[11]=[a("Building our app components")])),_:1,__:[11]}),n("ul",null,[n("li",null,[e(o,{to:"#index-jsx"},{default:p(()=>[e(t,{icon:"fa-brands fa-react"}),s[12]||(s[12]=a("index.jsx"))]),_:1,__:[12]})]),n("li",null,[e(o,{to:"#app-jsx"},{default:p(()=>[e(t,{icon:"fa-brands fa-react"}),s[13]||(s[13]=a("App.jsx"))]),_:1,__:[13]})]),n("li",null,[e(o,{to:"#userwelcome-jsx"},{default:p(()=>[e(t,{icon:"fa-brands fa-react"}),s[14]||(s[14]=a("UserWelcome.jsx"))]),_:1,__:[14]})]),n("li",null,[e(o,{to:"#todos-jsx"},{default:p(()=>[e(t,{icon:"fa-brands fa-react"}),s[15]||(s[15]=a("Todos.jsx"))]),_:1,__:[15]})])])]),n("li",null,[e(o,{to:"#managing-rendering-order-with-suspense"},{default:p(()=>s[16]||(s[16]=[a("Managing rendering order with Suspense")])),_:1,__:[16]})]),n("li",null,[e(o,{to:"#handling-errors-in-suspense"},{default:p(()=>s[17]||(s[17]=[a("Handling errors in Suspense")])),_:1,__:[17]})]),n("li",null,[e(o,{to:"#finishing-our-app"},{default:p(()=>s[18]||(s[18]=[a("Finishing our app")])),_:1,__:[18]})]),n("li",null,[e(o,{to:"#conclusion"},{default:p(()=>s[19]||(s[19]=[a("Conclusion")])),_:1,__:[19]})])])]),s[136]||(s[136]=n("hr",null,null,-1)),e(m,{name:"Data fetching with React Suspense",desc:"Using React's Suspense component, create a simple to-do app that fetches data from an API and renders it to the DOM.",url:"https://blog.logrocket.com/data-fetching-react-suspense",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/data-fetching-react-suspense/banner.png"}),s[137]||(s[137]=n("div",{class:"hint-container note"},[n("p",{class:"hint-container-title"},"Editor’s note:"),n("p",null,"This article was updated on 3 August 2023 to compare data fetching with and without React Suspense.")],-1)),s[138]||(s[138]=n("figure",null,[n("img",{src:w,alt:"Data Fetching With React Suspense",tabindex:"0",loading:"lazy"}),n("figcaption",null,"Data Fetching With React Suspense")],-1)),n("p",null,[s[21]||(s[21]=a("Managing data loading in a frontend application can become complex over time, so much so that there is a whole ecosystem of libraries dedicated to state management. The React core team have responded by releasing a set of concurrent features to make data fetching in React easier. ")),n("a",I,[e(t,{icon:"fa-brands fa-react"}),s[20]||(s[20]=a("Suspense"))]),s[22]||(s[22]=a(" is among these features, and it aims to simplify managing loading states in React components."))]),s[139]||(s[139]=n("p",null,"In this article, we’ll look at how Suspense works by creating a simple app that fetches data from an API and renders it to the DOM. We’ll cover the following:",-1)),s[140]||(s[140]=n("hr",null,null,-1)),s[141]||(s[141]=n("h2",{id:"what-is-react-suspense",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#what-is-react-suspense"},[n("span",null,"What is React Suspense?")])],-1)),n("p",null,[n("a",q,[s[23]||(s[23]=a("Suspense (")),e(t,{icon:"iconfont icon-github"}),s[24]||(s[24]=n("code",null,"reactjs/rfcs",-1)),s[25]||(s[25]=a(")"))]),s[28]||(s[28]=a(" is a feature for managing asynchronous operations in a React app. It lets your components communicate to React that they are waiting for some data. It is important to note that Suspense is not a data fetching library like ")),n("a",W,[e(t,{icon:"iconfont icon-github"}),s[26]||(s[26]=n("code",null,"ghengeveld/react-async",-1))]),s[29]||(s[29]=a(", nor is it a way to manage state like ")),e(r,{to:"/blog.logrocket.com/understanding-redux-saga-action-creators-sagas.html"},{default:p(()=>s[27]||(s[27]=[n("strong",null,"Redux",-1)])),_:1,__:[27]}),s[30]||(s[30]=a(". It simply lets you render a fallback declaratively while a component is waiting for some asynchronous operation (i.e., a network request) to be completed."))]),s[142]||(s[142]=l(`<p>As we’ll see further down, this allows us to synchronize loading states across different components to allow for a better user experience. Suspense does this in a non-intrusive way that doesn’t require a complete rewrite of existing applications.</p><hr><h2 id="how-to-use-suspense" tabindex="-1"><a class="header-anchor" href="#how-to-use-suspense"><span>How to use Suspense</span></a></h2><p>Let’s look at the simplest use case of Suspense, which is handling a pending network request in a component:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> isLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token string">&#39;/todos&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Spinner</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Todos</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>todos<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This should look familiar, as it is how most people (me included) handle waiting for network calls. The implementation of the <code>fetchData</code> function, and the <code>Spinner</code> and <code>Todos</code> components is not relevant here.</p><p>The <code>isLoading</code> variable is used to track the status of the request. If <code>true</code>, we render a spinner to communicate this state to the user. There’s nothing wrong with doing it this way, but let’s see how we would handle this using Suspense:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token string">&#39;/todos&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Spinner</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Todos</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>todos<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There’s a subtle but important change to the code. Instead of having the loading state as a state variable with logic to render a spinner based on the value, it’s instead being managed by React using Suspense. We’re now rendering a fallback declaratively.</p><p>In the previous example, React had no knowledge of the network call, so we had to manage the loading state using the <code>isLoading</code> variable. With this example, React knows that a network call is happening, and by wrapping the <code>Todos</code> component in Suspense, it delays rendering it until the network call is done.</p><p>Another important thing to note is the <code>fallback</code> property passed to Suspense. This is whatever we want to render while waiting for the network call to finish. It could be a spinner, skeleton loader, or nothing. React will render whatever the value of <code>fallback</code> is while waiting for the network request to finish.</p><p>But how exactly does React know that a network call is pending? As far as we’ve reviewed, Suspense only renders a fallback component while waiting. Where in the code do we communicate to React that we’re making a network call?</p>`,12)),n("p",null,[s[33]||(s[33]=a("This is where the data fetching libraries come in. Currently, ")),n("a",U,[e(t,{icon:"fas fa-globe"}),s[31]||(s[31]=a("Relay"))]),s[34]||(s[34]=a(" and ")),n("a",N,[e(t,{icon:"fas fa-globe"}),s[32]||(s[32]=a("SWR"))]),s[35]||(s[35]=a(" have integrations with Suspense to communicate loading states to React. I imagine more library authors will add integrations in the future."))]),s[143]||(s[143]=n("p",null,"Now, let’s explore some common data fetching approaches, their limitations, and how Suspense improves the developer and user experience.",-1)),s[144]||(s[144]=n("hr",null,null,-1)),s[145]||(s[145]=n("h2",{id:"react-data-fetching-patterns",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#react-data-fetching-patterns"},[n("span",null,"React data fetching patterns")])],-1)),s[146]||(s[146]=n("p",null,[a("If a React component needs data from an API, we usually have to make a network request somewhere to retrieve it. This is where "),n("a",{href:"/blog.logrocket.com/patterns-for-data-fetching-in-react-981ced7e5c56/",target:"_blank",rel:"noopener noreferrer"},[n("strong",null,"data fetching approaches")]),a(" come in to play.")],-1)),u(" TODO: /blog.logrocket.com/patterns-for-data-fetching-in-react.md "),s[147]||(s[147]=l(`<h3 id="fetch-on-render" tabindex="-1"><a class="header-anchor" href="#fetch-on-render"><span>Fetch-on-render</span></a></h3><p>Using the fetch-on-render approach, the network request is triggered in the component itself after mounting. The reason it’s called fetch-on-render is because the request isn’t triggered until the component renders:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.jsx"><span>App.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>userDetails<span class="token punctuation">,</span> setUserDetails<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">fetchUserDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>setUserDetails<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userDetails<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Fetching user details...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Simple Todo</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UserWelcome</span></span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>userDetails<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Todos</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>A major drawback to this is that it can lead to a network waterfall problem. This is because every component has an async fetch request. If this component renders another component with similar fetch requests, it will result in multiple, nested waterfall-like requests that cause performance issues.</p><h3 id="fetch-then-render" tabindex="-1"><a class="header-anchor" href="#fetch-then-render"><span>Fetch-then-render</span></a></h3><p>The fetch-then-render approach allows us to make an async request before the component is rendered. Let’s go back to the previous example and see how we would fix it:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.jsx"><span>App.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> fetchDataPromise <span class="token operator">=</span> <span class="token function">fetchUserDetailsAndTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// We start fetching here</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>userDetails<span class="token punctuation">,</span> setUserDetails<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    fetchDataPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setUserDetails</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>userDetails<span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">setTodos</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>todos<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Simple Todo</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UserWelcome</span></span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>userDetails<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Todos</span></span> <span class="token attr-name">todos</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>todos<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In this case, we’ve moved the fetching logic outside of the <code>App</code> component so that the network request begins before the component is even mounted.</p><p>Inspecting the <strong>networks</strong> tab clearly shows that both requests are started at the same time. While both <code>fetchUserDetails</code> and <code>fetchTodos()</code> are started in parallel, we would still need to wait for the slower request between the two to complete before we render any useful data. This is because <code>Promise.all</code> waits until all the promises are resolved before resolving.</p><h3 id="data-fetching-using-suspense" tabindex="-1"><a class="header-anchor" href="#data-fetching-using-suspense"><span>Data fetching using Suspense</span></a></h3><p>We have seen how trivial data fetching patterns aren’t always very performant, and have issues when dealing with async calls. This is where we can tap into Suspense, which allows us to begin rendering our component immediately after triggering the network request. This particular data fetching pattern is called render-as-you-fetch.</p><p>As the name suggests, we are rendering UI consecutively as we fetch data from an API. This means that, just like fetch-then-render, we kick off fetching before rendering, but we don’t have to wait for a response before we start rendering. Let’s look at some code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.jsx"><span>App.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// this is not a promise (we&#39;ll implement something similar)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Fetching user details...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UserWelcome</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading todos...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Todos</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">UserWelcome</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> userDetails <span class="token operator">=</span> data<span class="token punctuation">.</span>userDetails<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">// code to render welcome message</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Todos</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> todos <span class="token operator">=</span> data<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">// code to map and render todos</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>When <code>App</code> mounts for the first time, it tries to render <code>UserWelcome</code> first, and this triggers the <code>data.userDetails.read()</code> line. If the data isn’t ready yet (i.e., the request hasn’t resolved), it is communicated back to Suspense, which then renders <code>&lt;p&gt;Fetching user details…&lt;/p&gt;</code>. The same thing happens for <code>Todos</code>.</p><p>The best thing about this pattern is that no component has to wait for others to finish, which improves response time.</p><hr><h2 id="data-fetching-with-and-without-suspense" tabindex="-1"><a class="header-anchor" href="#data-fetching-with-and-without-suspense"><span>Data fetching with and without Suspense</span></a></h2>`,17)),n("p",null,[s[37]||(s[37]=a("While trivial client-side data fetching has existed in React for years, the new Suspense pattern is a good addition to the data fetching technique. From a user’s perspective, Suspense significantly improves data fetching because its subtle loaders not only provide immediate UI feedback, but also improve the ")),n("a",L,[e(t,{icon:"iconfont icon-webdev"}),s[36]||(s[36]=a("CLS score"))]),s[38]||(s[38]=a(" by a large margin."))]),s[148]||(s[148]=n("p",null,"From the developer’s perspective, the Suspense pattern pushes for a more reactive pattern than a declarative one. We don’t need to manually handle errors, loading state for each async call from the app.",-1)),s[149]||(s[149]=n("p",null,"The Suspense API is becoming more popular as it allows for more reactive and maintainable code, resulting in better UX and performance. Now, let’s look at Suspense in a practical sense by building an app ourselves.",-1)),s[150]||(s[150]=n("hr",null,null,-1)),s[151]||(s[151]=n("h2",{id:"building-a-sample-app-with-react-suspense",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#building-a-sample-app-with-react-suspense"},[n("span",null,"Building a sample app with React Suspense")])],-1)),n("p",null,[s[43]||(s[43]=a("Using Suspense and the render-as-you-fetch approach, we will build a simple app that fetches data from an API and renders it to the DOM. I’m assuming you are already familiar with ")),e(r,{to:"/blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems.html"},{default:p(()=>s[39]||(s[39]=[n("strong",null,"React Hooks",-1)])),_:1,__:[39]}),s[44]||(s[44]=a(". Check out the ")),n("a",O,[s[40]||(s[40]=a("code for this project here (")),e(t,{icon:"iconfont icon-github"}),s[41]||(s[41]=n("code",null,"ovieokeh/suspense-data-fetching",-1)),s[42]||(s[42]=a(")"))]),s[45]||(s[45]=a("."))]),s[152]||(s[152]=l('<p>This is what our app will look like:</p><figure><img src="'+y+`" alt="Our Finished Sample Todo App" tabindex="0" loading="lazy"><figcaption>Our Finished Sample Todo App</figcaption></figure><p>First, let’s create all the files and folders and install the required packages. We’ll fill in the contents as we go. Then, to set up the project structure, run the following commands:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">mkdir</span> suspense-data-fetching <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> suspense-data-fetching</span>
<span class="line"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> lib/<span class="token punctuation">{</span>api,components<span class="token punctuation">}</span> public</span>
<span class="line"><span class="token function">touch</span> public/index.html public/index.css</span>
<span class="line"><span class="token builtin class-name">cd</span> lib/ <span class="token operator">&amp;&amp;</span> <span class="token function">touch</span> index.jsx</span>
<span class="line"><span class="token function">touch</span> api/fetchData.js api/wrapPromise.js</span>
<span class="line"><span class="token builtin class-name">cd</span> components/</span>
<span class="line"><span class="token function">touch</span> App.jsx UserWelcome.jsx Todos.jsx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, let’s install the required dependencies:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> <span class="token function">install</span> react react-dom</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> --save-dev parcel parcel-bundler</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>We’re installing <code>parcel</code> and <code>parcel-bundler</code> to help us transpile our code into something that the browser can understand. The reason I opted for Parcel instead of something like webpack is because it requires zero config and works really well.</p>`,7)),n("p",null,[s[46]||(s[46]=a("Next, add the following section in ")),e(t,{icon:"iconfont icon-json"}),s[47]||(s[47]=n("code",null,"package.json",-1)),s[48]||(s[48]=a(":"))]),s[153]||(s[153]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="package.json"><span>package.json</span></div><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;parcel public/index.html -p 4000&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),n("p",null,[s[57]||(s[57]=a("Now that we have our project structure ready and the required dependencies installed, let’s start writing some code. To keep the tutorial succinct, I will leave out the code for the following files, which you can get from the linked repo: ")),n("a",E,[s[49]||(s[49]=n("code",null,"index.html",-1)),s[50]||(s[50]=a(" (")),e(t,{icon:"iconfont icon-github"}),s[51]||(s[51]=n("code",null,"ovieokeh/suspense-data-fetching",-1)),s[52]||(s[52]=a(")"))]),s[58]||(s[58]=a(" and ")),n("a",B,[s[53]||(s[53]=n("code",null,"index.css",-1)),s[54]||(s[54]=a(" (")),e(t,{icon:"iconfont icon-github"}),s[55]||(s[55]=n("code",null,"ovieokeh/suspense-data-fetching",-1)),s[56]||(s[56]=a(")"))]),s[59]||(s[59]=a("."))]),s[154]||(s[154]=n("hr",null,null,-1)),s[155]||(s[155]=n("h2",{id:"structuring-the-api-folder",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#structuring-the-api-folder"},[n("span",null,"Structuring the API folder")])],-1)),n("p",null,[s[60]||(s[60]=a("Now, we can create our ")),s[61]||(s[61]=n("code",null,"API",-1)),s[62]||(s[62]=a(" folder where we will be writing most of our logic. In this folder, there will be two files. The first is ")),e(t,{icon:"fa-brands fa-js"}),s[63]||(s[63]=n("code",null,"wrapPromise.js",-1)),s[64]||(s[64]=a(", which is simply a wrapper for handling various Promise states. The second file is ")),e(t,{icon:"fa-brands fa-js"}),s[65]||(s[65]=n("code",null,"fetchData.js",-1)),s[66]||(s[66]=a(" where we will fetch from an actual ")),s[67]||(s[67]=n("code",null,"URL",-1)),s[68]||(s[68]=a(" endpoint."))]),n("h3",F,[n("a",C,[n("span",null,[e(t,{icon:"fa-brands fa-js"}),s[69]||(s[69]=n("code",null,"wrapPromise.js",-1))])])]),n("p",null,[s[70]||(s[70]=a("This is probably the most important part of this whole tutorial because ")),e(t,{icon:"fa-brands fa-js"}),s[71]||(s[71]=n("code",null,"wrapPromise.js",-1)),s[72]||(s[72]=a(" is what communicates with Suspense, and what any library author writing abstractions for the Suspense API would spend most of their time on."))]),e(t,{icon:"fa-brands fa-js"}),s[156]||(s[156]=n("code",null,"wrapPromise.js",-1)),s[157]||(s[157]=a(" is a wrapper that wraps over a Promise and provides a method that allows you to determine whether the data being returned from the Promise is ready to be read. If the Promise resolves, it returns the resolved data. If it rejects, it throws the error. And if it is still pending, it throws back the Promise.")),s[158]||(s[158]=n("p",null,"This Promise argument is usually going to be a network request to retrieve some data from an API, but it could technically be any Promise object. The actual implementation is left for whoever is implementing it to figure out, so you could probably find other ways to do it.",-1)),n("p",null,[s[73]||(s[73]=a("The ")),e(t,{icon:"fa-brands fa-js"}),s[74]||(s[74]=n("code",null,"wrapPromise.js",-1)),s[75]||(s[75]=a(" function has the following requirements:"))]),s[159]||(s[159]=n("ul",null,[n("li",null,"It takes in a Promise as an argument"),n("li",null,"When the Promise is resolved, it returns the resolved value"),n("li",null,"When the Promise is rejected, it throws the rejected value"),n("li",null,"When the Promise is still pending, it throws back the Promise"),n("li",null,"It exposes a method to read the status of the Promise")],-1)),n("p",null,[s[76]||(s[76]=a("With the requirements defined, it’s time to write some code. Open the ")),e(t,{icon:"fas fa-folder-open"}),s[77]||(s[77]=n("code",null,"api/",-1)),e(t,{icon:"fa-brands fa-js"}),s[78]||(s[78]=n("code",null,"wrapPromise.js",-1)),s[79]||(s[79]=a(" file and we can get started:"))]),s[160]||(s[160]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="api/wrapPromise.js"><span>api/wrapPromise.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">wrapPromise</span><span class="token punctuation">(</span><span class="token parameter">promise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> status <span class="token operator">=</span> <span class="token string">&#39;pending&#39;</span></span>
<span class="line">  <span class="token keyword">let</span> response</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> suspender <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      status <span class="token operator">=</span> <span class="token string">&#39;success&#39;</span></span>
<span class="line">      response <span class="token operator">=</span> res</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      status <span class="token operator">=</span> <span class="token string">&#39;error&#39;</span></span>
<span class="line">      response <span class="token operator">=</span> err</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">...</span>to be continued<span class="token operator">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),n("p",null,[s[80]||(s[80]=a("What’s happening here? Inside the ")),e(t,{icon:"fa-brands fa-js"}),s[81]||(s[81]=n("code",null,"wrapPromise.js",-1)),s[82]||(s[82]=a(" function, we’re defining two variables:"))]),s[161]||(s[161]=l(`<ul><li><code>status</code>: Tracks the status of the promise argument</li><li><code>response</code>: Holds the result of the Promise (whether resolved or rejected)</li></ul><p><code>status</code> is initialized to <code>pending</code> by default, because that’s the default state of any new Promise. We then initialize a new variable, <code>suspender</code>, set its value to the Promise, and attach a <code>then</code> method to it.</p><p>Inside this <code>then</code> method, we have two callback functions: the first to handle the resolved value, and the second to handle the rejected value. If the Promise resolves successfully, we update the <code>status</code> variable to be <code>success</code> and set the <code>response</code> variable to the resolved value. If the Promise rejects, we update the <code>status</code> variable to be <code>error</code> and set the <code>response</code> variable to the rejected value:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line">  <span class="token comment">/* ...continued from above... */</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">read</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">case</span> <span class="token string">&#39;pending&#39;</span><span class="token operator">:</span></span>
<span class="line">        <span class="token keyword">throw</span> suspender</span>
<span class="line">      <span class="token keyword">case</span> <span class="token string">&#39;error&#39;</span><span class="token operator">:</span></span>
<span class="line">        <span class="token keyword">throw</span> response</span>
<span class="line">      <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">        <span class="token keyword">return</span> response</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> read <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> wrapPromise</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, we create a new function called <code>read</code>, and inside this function, we have a <code>switch</code> statement that checks the value of the <code>status</code> variable. If the <code>status</code> of the promise is <code>pending</code>, we throw the <code>suspender</code> variable we just defined. If it is <code>error</code>, we throw the <code>response</code> variable. And, finally, if it is anything other than the two (i.e., <code>success</code>), we return the <code>response</code> variable.</p>`,5)),n("p",null,[s[84]||(s[84]=a("The reason we throw either the ")),s[85]||(s[85]=n("code",null,"suspender",-1)),s[86]||(s[86]=a(" variable or the error ")),s[87]||(s[87]=n("code",null,"response",-1)),s[88]||(s[88]=a(" variable is because we want to communicate back to Suspense that the Promise is not yet resolved. We’re doing that by simulating an error in the component (using ")),n("a",z,[e(t,{icon:"fa-brands fa-firefox"}),s[83]||(s[83]=n("code",null,"throw",-1))]),s[89]||(s[89]=a("), which will be intercepted by the Suspense component. The Suspense component then looks at the thrown value to determine if it’s an actual error or a Promise."))]),n("p",null,[s[91]||(s[91]=a("If it is a Promise, the Suspense component will recognize that the component is still waiting for some data, and it will render the fallback. If it’s an error, it bubbles the error back up to the nearest ")),n("a",M,[e(t,{icon:"fa-brands fa-react"}),s[90]||(s[90]=a("error boundary"))]),s[92]||(s[92]=a(" until it is either caught or it crashes the application."))]),n("p",null,[s[93]||(s[93]=a("At the end of the ")),e(t,{icon:"fa-brands fa-js"}),s[94]||(s[94]=n("code",null,"wrapPromise.js",-1)),s[95]||(s[95]=a(" function, we return an object containing the ")),s[96]||(s[96]=n("code",null,"read",-1)),s[97]||(s[97]=a(" function as a method, and this is what our React components will interact with to retrieve the value of the Promise."))]),n("p",null,[s[98]||(s[98]=a("Lastly, we have a default export so that we can use the ")),e(t,{icon:"fa-brands fa-js"}),s[99]||(s[99]=n("code",null,"wrapPromise.js",-1)),s[100]||(s[100]=a(" function in other files. Now let’s move on to the ")),e(t,{icon:"fa-brands fa-js"}),s[101]||(s[101]=n("code",null,"fetchData.js",-1)),s[102]||(s[102]=a(" file."))]),n("h3",V,[n("a",H,[n("span",null,[e(t,{icon:"fa-brands fa-js"}),s[103]||(s[103]=n("code",null,"fetchData.js",-1))])])]),n("p",null,[s[104]||(s[104]=a("Inside this file, we’ll create a function to fetch the data that our components require. It will return a Promise wrapped with the ")),e(t,{icon:"fa-brands fa-js"}),s[105]||(s[105]=n("code",null,"wrapPromise.js",-1)),s[106]||(s[106]=a(" function we just reviewed:"))]),s[162]||(s[162]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="api/fetchData.js"><span>api/fetchData.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> wrapPromise <span class="token keyword">from</span> <span class="token string">&#39;./wrapPromise&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">wrapPromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> fetchData</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The first thing we do here is import the <code>wrapPromise</code> function we created, and then define the <code>fetchData</code> function.</p>`,2)),n("p",null,[s[110]||(s[110]=a("Inside this function, we initialize a new variable, ")),s[111]||(s[111]=n("code",null,"promise",-1)),s[112]||(s[112]=a(", and set its value to a ")),n("a",J,[e(t,{icon:"fa-brands fa-firefox"}),s[107]||(s[107]=a("fetch"))]),s[113]||(s[113]=a(" request Promise. When this request is completed, we get the data from the ")),n("a",Y,[e(t,{icon:"fa-brands fa-firefox"}),s[108]||(s[108]=n("code",null,"Response",-1)),s[109]||(s[109]=a(" object"))]),s[114]||(s[114]=a(" using ")),s[115]||(s[115]=n("code",null,"res.json()",-1)),s[116]||(s[116]=a(" and then return ")),s[117]||(s[117]=n("code",null,"res.data",-1)),s[118]||(s[118]=a(", which contains the data that we need."))]),s[163]||(s[163]=n("p",null,[a("Finally, we pass this "),n("code",null,"promise"),a(" to the "),n("code",null,"wrapPromise"),a(" function and return it. At the end of this file, we export the "),n("code",null,"fetchData"),a(" function. Now on to the components!")],-1)),s[164]||(s[164]=n("hr",null,null,-1)),s[165]||(s[165]=n("h2",{id:"building-our-app-components",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#building-our-app-components"},[n("span",null,"Building our app components")])],-1)),s[166]||(s[166]=n("p",null,"We now have the “backend” for our app ready, so it’s time to build out the components.",-1)),n("h3",Z,[n("a",G,[n("span",null,[e(t,{icon:"fa-brands fa-react"}),s[119]||(s[119]=n("code",null,"index.jsx",-1))])])]),e(t,{icon:"fa-brands fa-react"}),s[167]||(s[167]=l(`<code>index.jsx</code> is the entry point of our application, and we’ll be creating it first. This is where we’ll mount our React app to the DOM:<div class="code-block-with-title"><div class="code-block-title-bar" data-title="index.jsx"><span>index.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span></span>
<span class="line"><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom/client&#39;</span></span>
<span class="line"><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./components/App&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> mountNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">)</span></span>
<span class="line">ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>mountNode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Notice, we are using React 18, which means that the new <code>createRoot</code> API is being used.</p>`,4)),n("h3",$,[n("a",X,[n("span",null,[e(t,{icon:"fa-brands fa-react"}),s[120]||(s[120]=n("code",null,"App.jsx",-1))])])]),s[168]||(s[168]=l(`<p>This is where we will import and use the majority of our components, wrapped in <code>Suspense</code> API. Here, we have used Suspense’s <code>fallback</code> for nearly every component that is supposed to fetch or deal with an asynchronous operation:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.jsx"><span>App.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Suspense <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> UserWelcome <span class="token keyword">from</span> <span class="token string">&#39;./UserWelcome&#39;</span></span>
<span class="line"><span class="token keyword">import</span> Todos <span class="token keyword">from</span> <span class="token string">&#39;./Todos&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Simple Todo</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading user details...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UserWelcome</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading Todos...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Todos</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> App</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),n("h3",K,[n("a",Q,[n("span",null,[e(t,{icon:"fa-brands fa-react"}),s[121]||(s[121]=n("code",null,"UserWelcome.jsx",-1))])])]),e(t,{icon:"fa-brands fa-react"}),s[169]||(s[169]=n("code",null,"UserWelcome.jsx",-1)),s[170]||(s[170]=a(" is a component that renders username. Alternatively, you could have included this in ")),e(t,{icon:"fa-brands fa-react"}),s[171]||(s[171]=l(`<code>App.jsx</code> itself but for the sake of clean code, you can also modularize it:<div class="code-block-with-title"><div class="code-block-title-bar" data-title="UserWelcome.jsx"><span>UserWelcome.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span></span>
<span class="line"><span class="token keyword">import</span> fetchData <span class="token keyword">from</span> <span class="token string">&#39;../api/fetchData&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> resource <span class="token operator">=</span> <span class="token function">fetchData</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&#39;https://run.mocky.io/v3/d6ac91ac-6dab-4ff0-a08e-9348d7deed51&#39;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">UserWelcome</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> userDetails <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Welcome </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user-name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>userDetails<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">, here are</span>
<span class="line">        your Todos for today</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Completed todos have a line through them</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> UserWelcome</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),n("h3",_,[n("a",ss,[n("span",null,[e(t,{icon:"fa-brands fa-react"}),s[122]||(s[122]=n("code",null,"Todos.jsx",-1))])])]),s[172]||(s[172]=l(`<p>This component reads <code>todos</code> and renders them on the UI:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Todos.jsx"><span>Todos.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span></span>
<span class="line"><span class="token keyword">import</span> fetchData <span class="token keyword">from</span> <span class="token string">&#39;../api/fetchData&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> resource <span class="token operator">=</span> <span class="token function">fetchData</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&#39;https://run.mocky.io/v3/8a33e687-bc2f-41ea-b23d-3bc2fb452ead&#39;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Todos</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> todos <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> renderTodos <span class="token operator">=</span> todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> className <span class="token operator">=</span> todo<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&#39;Completed&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;todo-completed&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;todo&#39;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">todo </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>className<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Todos</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todos<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>renderTodos<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> Todos</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now that all our React components are in place, let’s look at how to manage rendering order with Suspense.</p><hr><h2 id="managing-rendering-order-with-suspense" tabindex="-1"><a class="header-anchor" href="#managing-rendering-order-with-suspense"><span>Managing rendering order with Suspense</span></a></h2><p>Imagine if the <code>Todos</code> component gets its data first, and you begin to go through the list only for <code>UserWelcome</code> to resolve a little while later. The new contents being rendered will push the existing todo contents down in an awkward way, and this could disorient your users:</p><figure><img src="`+x+`" alt="Janky Loading In Our Demo App" tabindex="0" loading="lazy"><figcaption>Janky Loading In Our Demo App</figcaption></figure><p>If you want the <code>Todos</code> component to render only when the <code>UserWelcome</code> component has finished rendering, then you could nest the <code>Suspense</code> component wrapping <code>Todos</code> like so:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading user details...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UserWelcome</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading Todos...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Todos</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)),n("p",null,[s[124]||(s[124]=a("Another approach is to wrap both ")),s[125]||(s[125]=n("code",null,"Suspense",-1)),s[126]||(s[126]=a(" components in ")),n("a",ns,[e(t,{icon:"fa-brands fa-react"}),s[123]||(s[123]=n("code",null,"SuspenseList",-1))]),s[127]||(s[127]=a(" and specify a “reveal order,” like so:"))]),s[173]||(s[173]=l(`<div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SuspenseList</span></span> <span class="token attr-name">revealOrder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>forwards<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading user details...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UserWelcome</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading Todos...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Todos</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SuspenseList</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will cause React to render the components in the order they appear in your code, regardless of which one gets its data first:</p><figure><img src="`+j+`" alt="Updated Demo App With Top-Down Loading" tabindex="0" loading="lazy"><figcaption>Updated Demo App With Top-Down Loading</figcaption></figure><p>You can see how easy it becomes to organize your application’s loading states as opposed to having to manage <code>isLoading</code> variables yourself. A top-down loading style is much better.</p><hr><h2 id="handling-errors-in-suspense" tabindex="-1"><a class="header-anchor" href="#handling-errors-in-suspense"><span>Handling errors in Suspense</span></a></h2><p>We can even go a step further and add error handling capabilities to our application. Suspense provides an intuitive API to handle errors: Error Boundary. This API helps catch errors within the Suspense tree without affecting the rest of the React DOM nodes.</p><p>In a typical Suspense pattern, we are likely running an async operation using Promises. This Promise might not be resolved, and the Suspense boundary needs to take care of this scenario as well. This is where Error Boundary comes in to take care of a failed Promise state.</p><p>To use Suspense effectively, we need to use Error Boundary. The official React docs provide an Error Boundary component that you can simply import in your component:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ErrorBoundary.jsx"><span>ErrorBoundary.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">class</span> <span class="token class-name">ErrorBoundary</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">hasError</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">fallback</span><span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Something went wrong.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">getDerivedStateFromError</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">hasError</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">componentDidCatch</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> errorInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> errorInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>fallback<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now we are all set to use this component within the Suspense boundary:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> ErrorBoundary <span class="token keyword">from</span> <span class="token string">&quot;./errorboundary&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorBoundary</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Failed to fetch data!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      // root component of our application</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ErrorBoundary</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how the entire app is wrapped in an <code>ErrorBoundary</code> component. This ensures a root-level error that will stop your entire app from rendering if the Promise fails.</p><p>There may be certain use cases where you want a global error boundary like we see above, such as when there is an internet connection interruption and you want to stop the entire to-do app.</p><p>However, in most cases, you want to delegate the error boundary close to each component only. This allows you to have component-wise error handling that doesn’t stop the entire app altogether or affect other DOM nodes from their usual operations:</p><figure><img src="`+S+'" alt="Graphic To Demonstrate Error Boundaries" tabindex="0" loading="lazy"><figcaption>Graphic To Demonstrate Error Boundaries</figcaption></figure><hr><h2 id="finishing-our-app" tabindex="-1"><a class="header-anchor" href="#finishing-our-app"><span>Finishing our app</span></a></h2><p>We’re done coding our components, and it’s time to review what we’ve done so far:</p>',19)),n("ul",null,[n("li",null,[s[128]||(s[128]=a("We opted in to use concurrent features in our ")),e(t,{icon:"fa-brands fa-react"}),s[129]||(s[129]=n("code",null,"index.jsx",-1)),s[130]||(s[130]=a(" file"))]),s[131]||(s[131]=n("li",null,[a("We created an "),n("code",null,"App"),a(" component that had two children components, each wrapped in a "),n("code",null,"Suspense"),a(" component")],-1)),s[132]||(s[132]=n("li",null,"In each of the children components, we kicked off our network request before they mounted",-1))]),s[174]||(s[174]=l('<p>Let’s run our app and see if it works. In your terminal, run <code>npm run dev</code> and navigate to <code>http://localhost:4000</code> in your browser. Open the <strong>Networks</strong> tab in your Chrome developer tools and refresh the page. You should see that the requests for both the completed and pending todo items are both happening in parallel like so:</p><figure><img src="'+T+'" alt="Network Requests In Chrome DevTools" tabindex="0" loading="lazy"><figcaption>Network Requests In Chrome DevTools</figcaption></figure><p>If we look at the <strong>Waterfall</strong> section, we can see that we have successfully implemented a naive version of Suspense for data fetching. You can see how it helps you orchestrate your app’s data fetching operations in a simple and predictable manner.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, we took a look at the React Suspense component, and various data fetching approaches in React. We also built a simple app that uses Suspense for data fetching.</p>',6)),n("p",null,[s[134]||(s[134]=a("The newly built ")),n("a",as,[e(t,{icon:"fa-brands fa-react"}),s[133]||(s[133]=a("React docs"))]),s[135]||(s[135]=a(" are a great resource for learning about data fetching from the server point of view, but for client-heavy interactions, you can always opt for the fetching patterns we discussed above."))]),u(" TODO: add ARTICLE CARD "),e(c,d(k({title:"Data fetching with React Suspense",desc:"Using React's Suspense component, create a simple to-do app that fetches data from an API and renders it to the DOM.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/data-fetching-react-suspense.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const os=v(D,[["render",es]]),ls=JSON.parse('{"path":"/blog.logrocket.com/data-fetching-react-suspense.html","title":"Data fetching with React Suspense","lang":"en-US","frontmatter":{"lang":"en-US","title":"Data fetching with React Suspense","description":"Article(s) > Data fetching with React Suspense","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Data fetching with React Suspense\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/data-fetching-react-suspense/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/data-fetching-react-suspense/sample-todo-app.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/data-fetching-react-suspense/janky-loading-demo-app.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/data-fetching-react-suspense/demo-app-top-down-loading.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/data-fetching-react-suspense/delegating-error-boundaries-graphic.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/data-fetching-react-suspense/network-requests-chrome-devtools.png\\"],\\"datePublished\\":\\"2023-08-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ovie Okeh\\",\\"url\\":\\"https://blog.logrocket.com/author/ovieokeh/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/data-fetching-react-suspense.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Data fetching with React Suspense"}],["meta",{"property":"og:description","content":"Article(s) > Data fetching with React Suspense"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/data-fetching-react-suspense/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/data-fetching-react-suspense/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Data fetching with React Suspense"}],["meta",{"property":"article:author","content":"Ovie Okeh"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-08-03T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Data fetching with React Suspense"},{"property":"og:description","content":"Data fetching with React Suspense"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/data-fetching-react-suspense.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2023-08-03T00:00:00.000Z","isOriginal":false,"author":[{"name":"Ovie Okeh","url":"https://blog.logrocket.com/author/ovieokeh/"}],"cover":"/assets/image/blog.logrocket.com/data-fetching-react-suspense/banner.png"},"git":{},"readingTime":{"minutes":13.9,"words":4171},"filePathRelative":"blog.logrocket.com/data-fetching-react-suspense.md","copyright":{"author":"Ovie Okeh"}}');export{os as comp,ls as data};
