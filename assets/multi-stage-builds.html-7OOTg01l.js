import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as t,f as s,b as l,a as f,t as k,n as r,g as p,w as b,e as a,r as o,o as h}from"./app-BVguHYKu.js";const v={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},D={href:"https://docs.docker.com/engine/userguide/eng-image/multistage-build/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/dockersamples/atsea-sample-shop-app",target:"_blank",rel:"noopener noreferrer"},B={href:"https://gist.github.com/spara/780c4f6f3debc451aa2e0c8ffbad0b4f",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/facebookincubator/create-react-app",target:"_blank",rel:"noopener noreferrer"},M={href:"https://docs.docker.com/engine/userguide/eng-image/multistage-build/",target:"_blank",rel:"noopener noreferrer"},j={href:"http://blog.alexellis.io/mutli-stage-docker-builds/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://youtu.be/pPsREQbf3PA",target:"_blank",rel:"noopener noreferrer"},x={href:"https://slideshare.net/Docker/creating-effective-images-abby-fuller-aws",target:"_blank",rel:"noopener noreferrer"};function T(c,e){const i=o("VPCard"),d=o("router-link"),u=o("SiteInfo"),n=o("VPIcon");return h(),m("div",null,[t("h1",y,[t("a",w,[t("span",null,k(c.$frontmatter.title)+" 관련",1)])]),s(i,r(p({title:"Docker > Article(s)",desc:"Article(s)",link:"/devops/docker/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t("nav",S,[t("ul",null,[t("li",null,[s(d,{to:"#multi-stage-builds-in-docker-cloud"},{default:b(()=>e[0]||(e[0]=[a("Multi-Stage Builds in Docker Cloud")])),_:1,__:[0]})])])]),e[31]||(e[31]=t("hr",null,null,-1)),s(u,{name:"Multi-Stage Builds",desc:"Learn from Docker experts to simplify and advance your app development and management with Docker. Stay up to date on Docker events and new version",url:"https://docker.com/blog/multi-stage-builds",logo:"https://docker.com/app/uploads/2024/02/cropped-docker-logo-favicon-192x192.png",preview:"https://docker.com/app/uploads/8478f1f4-490f-4901-ac48-3cc78a4a0980.jpg"}),t("p",null,[e[5]||(e[5]=a("This is part of a series of articles describing how the AtSea Shop application was built using enterprise development tools and Docker. In the previous post, I introduced the AtSea application and how I developed a REST application with the Eclipse IDE and Docker. ")),t("a",D,[s(n,{icon:"fa-brands fa-docker"}),e[1]||(e[1]=a("Multi-stage builds"))]),e[6]||(e[6]=a(", a Docker feature introduced in Docker 17.06 CE, let you orchestrate a complex build in a single Dockerfile. Before multi-stage build, Docker users would use a script to compile the applications on the host machine, then use Dockerfiles to build the images. The ")),t("a",R,[e[2]||(e[2]=a("AtSea application (")),s(n,{icon:"iconfont icon-github"}),e[3]||(e[3]=t("code",null,"dockersamples/atsea-sample-shop-app",-1)),e[4]||(e[4]=a(")"))]),e[7]||(e[7]=a(" is the perfect use case for a multi-stage build because:"))]),e[32]||(e[32]=t("ul",null,[t("li",null,"it uses node.js to compile the ReactJs app into storefront"),t("li",null,"it uses Spring Boot and Maven to make a standalone jar file"),t("li",null,"it is deployed to a standalone JDK container"),t("li",null,"the storefront is then included in the jar")],-1)),t("p",null,[e[11]||(e[11]=a("Let’s look at the ")),t("a",B,[e[8]||(e[8]=a("Dockerfile (")),s(n,{icon:"iconfont icon-github"}),e[9]||(e[9]=t("code",null,"spara",-1)),e[10]||(e[10]=a(")"))]),e[12]||(e[12]=a("."))]),t("p",null,[e[14]||(e[14]=a("The react-app is an extension of ")),t("a",A,[s(n,{icon:"iconfont icon-github"}),e[13]||(e[13]=t("code",null,"facebookincubator/create-react-app",-1))]),e[15]||(e[15]=a(". From within the react-app directory we run AtSea’s frontend in local development mode."))]),e[33]||(e[33]=t("p",null,[a("The first stage of the build uses a Node base image to create a production-ready frontend build directory consisting of static javascript and css files. A Docker best practice is named stages, e.g. "),t("code",null,'"FROM node:latest AS storefront"'),a(".")],-1)),t("p",null,[e[16]||(e[16]=a("This step first makes our image’s working directory at ")),s(n,{icon:"fas fa-folder-open"}),e[17]||(e[17]=t("code",null,"/usr/src/atsea/app/react-app",-1)),e[18]||(e[18]=a(". We copy the contents of the react-app directory, which includes the ReactJs source and package.json file, to the root of our image’s working directory. Then we use npm to install all necessary react-app’s node dependencies. Finally, npm run build bundles the react-app using the node dependencies and ReactJs source into a build directory at the root."))]),e[34]||(e[34]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> node:latest <span class="token keyword">AS</span> storefront</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /usr/src/atsea/app/react-app</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> react-app .</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> npm install</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> npm run build</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Once this build stage is complete, the builder has an intermediate image named storefront. This temporary image will not show up in your list of images from a docker image ls. Yet the builder can access and choose artifacts from this stage in other stages of the build.</p><p>To compile the AtSea REST application, we use a maven image and copy the pom.xml file, which maven uses to install the dependencies. We copy the source files to the image and run maven again to build the AtSea jar file using the package command. This creates another intermediate image called appserver.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> maven:latest <span class="token keyword">AS</span> appserver</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /usr/src/atsea</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> pom.xml .</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> mvn -B -f pom.xml -s /usr/share/maven/ref/settings-docker.xml dependency:resolve</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> . .</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> mvn -B -s /usr/share/maven/ref/settings-docker.xml package -DskipTests</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,4)),t("p",null,[e[19]||(e[19]=a("Putting it all together, we use a java image to build the final Docker image. The build directory in storefront, created during the first build stage, is copied to the ")),s(n,{icon:"fas fa-folder-open"}),e[20]||(e[20]=t("code",null,"/static",-1)),e[21]||(e[21]=a(" directory, defined as an external directory in the AtSea REST application. We are choosing to leave behind all those node modules."))]),e[35]||(e[35]=l(`<p>We copy the AtSea jar file to the java image and set ENTRYPOINT to start the application and set the profile to use a PostgreSQL database. The final image is compact since it only contains the compiled applications in the JDK base image.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> java:8-jdk-alpine</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /static</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">storefront</span></span> /usr/src/atsea/app/react-app/build/ .</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">appserver</span></span> /usr/src/atsea/target/AtSea-0.0.1-SNAPSHOT.jar .</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;-jar&quot;</span>, <span class="token string">&quot;/app/AtSea-0.0.1-SNAPSHOT.jar&quot;</span>]</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;--spring.profiles.active=postgres&quot;</span>]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This step uses COPY -from command to copy files from the intermediate images. Multi-stage builds can also use offsets instead of named stages, e.g. “<code>COPY --from=0 /usr/src/atsea/app/react-app/build/ .”</code></p><p>Multi-stage builds facilitate the creation of small and significantly more efficient containers since the final image can be free of any build tools. External scripts are no longer needed to orchestrate a build. Instead, an application image is built and started by using docker-compose up -build. A stack is deployed using <code>docker stack deploy -c docker-stack.yml.</code></p><hr><h2 id="multi-stage-builds-in-docker-cloud" tabindex="-1"><a class="header-anchor" href="#multi-stage-builds-in-docker-cloud"><span>Multi-Stage Builds in Docker Cloud</span></a></h2><p>Docker Cloud now supports multi-stage builds for automated builds. Linking the github repository to Docker Cloud ensures that your images will be always be current. To enable automated builds, tag and push your image to your Docker Cloud repository.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> tag atsea_app <span class="token operator">&lt;</span>YOUR_USERNAME<span class="token operator">&gt;</span>/atsea_app</span>
<span class="line"><span class="token function">docker</span> push <span class="token operator">&lt;</span>YOUR_USERNAME<span class="token operator">&gt;</span>/atsea_app</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Log into your Docker Cloud account.</p><figure><img src="https://docker.com/app/uploads/8478f1f4-490f-4901-ac48-3cc78a4a0980.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Next connect your Github account to give Cloud access to the source code. Click on Cloud Settings, then click on sources, and the plug icon. Follow the directions to connect your Github account.</p><figure><img src="https://docker.com/app/uploads/4b4c8efc-5fde-422b-9de4-d90bbb0775e0-1.jpg" alt="Multi-stage Builds" tabindex="0" loading="lazy"><figcaption>Multi-stage Builds</figcaption></figure><p>After your Github account is connected, click on Repositories on the side menu and then click your atsea_app repository.</p><figure><img src="https://docker.com/app/uploads/7882b11e-896f-4f24-b14d-0c2015254f77-1.jpg" alt="Multi-stage Builds" tabindex="0" loading="lazy"><figcaption>Multi-stage Builds</figcaption></figure><p>Click on Builds, then click on Configure Automated Builds on the following screen.</p><figure><img src="https://docker.com/app/uploads/30e36f84-a54d-44bb-88c8-63fc53655326-1.jpg" alt="30e36f84 a54d 44bb 88c8 63fc53655326 1" tabindex="0" loading="lazy"><figcaption>30e36f84 a54d 44bb 88c8 63fc53655326 1</figcaption></figure><p>In the Build Configurations form, complete</p><ul><li>the Source Repository with the Github account and repository</li><li>the Build Location, we’ll use Docker Cloud with a medium node</li><li>the Docker Version using Edge 17.05 CE which supports multi-stage builds</li><li>leave Autotest to off</li><li>create a Build Rule that specifies the dockerfile in the app directory of the repository</li></ul><p>Click on Save and Build to build the image.</p><figure><img src="https://docker.com/app/uploads/save.png" alt="Multi-stage Builds" tabindex="0" loading="lazy"><figcaption>Multi-stage Builds</figcaption></figure><p>Docker Cloud will notify you if the build was successful.</p><figure><img src="https://docker.com/app/uploads/13c713b5-fdbb-4d25-ad1a-ff3a8f5fb0d6.jpg" alt="Multi-stage Builds" tabindex="0" loading="lazy"><figcaption>Multi-stage Builds</figcaption></figure>`,22)),t("p",null,[e[26]||(e[26]=a("For more information on multi-stage builds read the ")),t("a",M,[s(n,{icon:"fa-brands fa-docker"}),e[22]||(e[22]=a("documentation"))]),e[27]||(e[27]=a(" and Docker Captain Alexis Ellis’ ")),t("a",j,[s(n,{icon:"fas fa-globe"}),e[23]||(e[23]=a("Builder pattern vs. Multi-stage builds in Docker"))]),e[28]||(e[28]=a(". To build compact and efficient images watch Abby Fuller’s Dockercon 2017 presentation, ")),t("a",C,[s(n,{icon:"fa-brands fa-youtube"}),e[24]||(e[24]=a("Creating Effective Images"))]),e[29]||(e[29]=a(" and check out her ")),t("a",x,[s(n,{icon:"fas fa-globe"}),e[25]||(e[25]=a("slides"))]),e[30]||(e[30]=a("."))]),f(" TODO: add ARTICLE CARD "),s(i,r(p({title:"Multi-Stage Builds",desc:"Learn from Docker experts to simplify and advance your app development and management with Docker. Stay up to date on Docker events and new version",link:"https://chanhi2000.github.io/bookshelf/docker.com/multi-stage-builds.html",logo:"https://docker.com/app/uploads/2024/02/cropped-docker-logo-favicon-192x192.png",background:"rgba(29,99,237,0.2)"})),null,16)])}const E=g(v,[["render",T]]),N=JSON.parse('{"path":"/docker.com/multi-stage-builds.html","title":"Multi-Stage Builds","lang":"en-US","frontmatter":{"lang":"en-US","title":"Multi-Stage Builds","description":"Article(s) > Multi-Stage Builds","icon":"fa-brands fa-docker","category":["DevOps","Docker","Article(s)"],"tag":["blog","docker.com","devops","docker"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Multi-Stage Builds\\",\\"image\\":[\\"https://docker.com/app/uploads/8478f1f4-490f-4901-ac48-3cc78a4a0980.jpg\\",\\"https://docker.com/app/uploads/4b4c8efc-5fde-422b-9de4-d90bbb0775e0-1.jpg\\",\\"https://docker.com/app/uploads/7882b11e-896f-4f24-b14d-0c2015254f77-1.jpg\\",\\"https://docker.com/app/uploads/30e36f84-a54d-44bb-88c8-63fc53655326-1.jpg\\",\\"https://docker.com/app/uploads/save.png\\",\\"https://docker.com/app/uploads/13c713b5-fdbb-4d25-ad1a-ff3a8f5fb0d6.jpg\\"],\\"datePublished\\":\\"2017-07-06T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Sophia Parafina\\",\\"url\\":\\"https://docker.com/author/sophia/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/docker.com/multi-stage-builds.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Multi-Stage Builds"}],["meta",{"property":"og:description","content":"Article(s) > Multi-Stage Builds"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://docker.com/app/uploads/8478f1f4-490f-4901-ac48-3cc78a4a0980.jpg"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://docker.com/app/uploads/8478f1f4-490f-4901-ac48-3cc78a4a0980.jpg"}],["meta",{"name":"twitter:image:alt","content":"Multi-Stage Builds"}],["meta",{"property":"article:author","content":"Sophia Parafina"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"docker.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2017-07-06T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Multi-Stage Builds"},{"property":"og:description","content":"Multi-Stage Builds"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/docker.com/multi-stage-builds.html"}]],"prev":"/devops/docker/articles/README.md","date":"2017-07-06T00:00:00.000Z","isOriginal":false,"author":[{"name":"Sophia Parafina","url":"https://docker.com/author/sophia/"}],"cover":"https://docker.com/app/uploads/8478f1f4-490f-4901-ac48-3cc78a4a0980.jpg"},"git":{},"readingTime":{"minutes":4.24,"words":1273},"filePathRelative":"docker.com/multi-stage-builds.md","copyright":{"author":"Sophia Parafina"}}');export{E as comp,N as data};
