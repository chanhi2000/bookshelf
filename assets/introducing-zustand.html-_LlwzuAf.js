import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as t,b as l,a as h,t as v,n as r,g as u,w as o,e as a,r as p,o as f}from"./app-BVguHYKu.js";const b={},w={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},T={href:"https://github.com/pmndrs/zustand",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/arackaf/zustand-sandbox",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/pmndrs/zustand",target:"_blank",rel:"noopener noreferrer"};function C(d,n){const c=p("VPCard"),e=p("router-link"),k=p("SiteInfo"),i=p("VPIcon");return f(),g("div",null,[s("h1",w,[s("a",y,[s("span",null,v(d.$frontmatter.title)+" 관련",1)])]),t(c,r(u({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[t(e,{to:"#getting-started"},{default:o(()=>n[0]||(n[0]=[a("Getting Started")])),_:1,__:[0]}),s("ul",null,[s("li",null,[t(e,{to:"#the-state-we-need"},{default:o(()=>n[1]||(n[1]=[a("The state we need")])),_:1,__:[1]})])])]),s("li",null,[t(e,{to:"#the-vanilla-version"},{default:o(()=>n[2]||(n[2]=[a("The Vanilla Version")])),_:1,__:[2]}),s("ul",null,[s("li",null,[t(e,{to:"#what-s-the-problem"},{default:o(()=>n[3]||(n[3]=[a("What’s the problem?")])),_:1,__:[3]})])])]),s("li",null,[t(e,{to:"#introducing-zustand"},{default:o(()=>n[4]||(n[4]=[a("Introducing Zustand")])),_:1,__:[4]}),s("ul",null,[s("li",null,[t(e,{to:"#updating-state"},{default:o(()=>n[5]||(n[5]=[a("Updating state")])),_:1,__:[5]})]),s("li",null,[t(e,{to:"#reading-our-state"},{default:o(()=>n[6]||(n[6]=[a("Reading our state")])),_:1,__:[6]})])])]),s("li",null,[t(e,{to:"#the-correct-way-to-read-state"},{default:o(()=>n[7]||(n[7]=[a("The Correct Way to Read State")])),_:1,__:[7]})]),s("li",null,[t(e,{to:"#odds-ends"},{default:o(()=>n[8]||(n[8]=[a("Odds & Ends")])),_:1,__:[8]}),s("ul",null,[s("li",null,[t(e,{to:"#async-friendly"},{default:o(()=>n[9]||(n[9]=[a("Async friendly")])),_:1,__:[9]})]),s("li",null,[t(e,{to:"#reading-state-inside-your-store-but-outside-of-set"},{default:o(()=>n[10]||(n[10]=[a("Reading state inside your store, but outside of set")])),_:1,__:[10]})]),s("li",null,[t(e,{to:"#reading-state-outside-of-react-components"},{default:o(()=>n[11]||(n[11]=[a("Reading state outside of React components")])),_:1,__:[11]})]),s("li",null,[t(e,{to:"#pushing-further"},{default:o(()=>n[12]||(n[12]=[a("Pushing further")])),_:1,__:[12]})])])]),s("li",null,[t(e,{to:"#concluding-thoughts"},{default:o(()=>n[13]||(n[13]=[a("Concluding Thoughts")])),_:1,__:[13]})])])]),n[28]||(n[28]=s("hr",null,null,-1)),t(k,{name:"Introducing Zustand (State Management)",desc:"Zustand is a minimal, but fun and effective state management library which just may improve your render performance.",url:"https://frontendmasters.com/blog/introducing-zustand/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6584"}),s("p",null,[s("a",T,[n[14]||(n[14]=a("Zustand (")),t(i,{icon:"iconfont icon-github"}),n[15]||(n[15]=s("code",null,"pmndrs/zustand",-1)),n[16]||(n[16]=a(")"))]),n[17]||(n[17]=a(" is a minimal, but fun and effective state management library. It’s somewhat weird for me to write an introductory blog post on a tool that’s over 5 years old and pretty popular. But it’s popular for a reason, and there are almost certainly more developers who aren’t familiar with it than are. So if you’re in the former group, hopefully this post will be the concise and impactful introduction you didn’t know you needed."))]),s("p",null,[n[21]||(n[21]=a("The code for everything in this post is on ")),s("a",S,[n[18]||(n[18]=a("my GitHub repo (")),t(i,{icon:"iconfont icon-github"}),n[19]||(n[19]=s("code",null,"arackaf/zustand-sandbox",-1)),n[20]||(n[20]=a(")"))]),n[22]||(n[22]=a("."))]),n[29]||(n[29]=l(`<hr><h2 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started"><span>Getting Started</span></a></h2><p>We’ll look at a toy task management app that does minimal work so we can focus on state management. It shows a (static) list of tasks, a button to add a new task, a heading showing the number of tasks, and a component to change the UI view between three options.</p><p>Moreover, the same app was written 3 times, once using vanilla React context for state, once using Zustand simply but non-idiomatically, and then a third version using Zustand more properly, so we can see some of the performance benefits it offers.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/img1-app.png?resize=1024%2C665&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Each of the three apps is identical, except for the label above the <strong>Add New Task</strong> button.</p><p>Each app is broken down more or less identically as so.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.jsx"><span>App.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Rendering App&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>m-5 p-5 flex flex-col gap-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">VanillaLabel</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AddNewTask</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TasksCount</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TasksHeader</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Filter</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TasksBody</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>It’s probably more components than needed, but it’ll help us inspect render performance.</p><h3 id="the-state-we-need" tabindex="-1"><a class="header-anchor" href="#the-state-we-need"><span>The state we need</span></a></h3><p>Our state payload for this app will include an array of tasks, a method to update the tasks, the current UI view being displayed, a function to update it, and a current filter, with, of course, a method to update it.</p><p>Those values can all be declared as various pieces of state, and then passed down the component tree as needed. This is simple and it works, but the excessive amount of prop passing, often referred to as “prop drilling,” can get annoying pretty quickly. There are many ways to avoid this, from state management libraries like Zustand, Redux, and MobX, to the regular old React context.</p><p>In this post, we’ll first explore what this looks like using React context, and then we’ll examine how Zustand can simplify things while improving performance in the process.</p><hr><h2 id="the-vanilla-version" tabindex="-1"><a class="header-anchor" href="#the-vanilla-version"><span>The Vanilla Version</span></a></h2><p>There’s a very good argument to be made that React’s context feature was not designed to be a state management library, but that hasn’t stopped many devs from trying. To avoid excessive prop drilling while minimizing external dependencies, developers will often store the state required for a specific part of their UI in context and access it lower in the component tree as needed.</p><p>Our app has its entire state stored like this, but that’s just a product of how unrealistically small it is.</p><p>Let’s get started. First, we have to declare our context</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> TasksContext <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createContext</span><span class="token generic class-name"><span class="token operator">&lt;</span>TasksState<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then we need a <em>component</em> that renders a <em>Provider</em> for that context, while declaring, and then passing in the actual state</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">TasksProvider</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> children<span class="token operator">:</span> ReactNode <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Rendering TasksProvider&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>tasks<span class="token punctuation">,</span> setTasks<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>Task<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>dummyTasks<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>currentView<span class="token punctuation">,</span> setCurrentView<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>TasksView<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>currentFilter<span class="token punctuation">,</span> setCurrentFilter<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> value<span class="token operator">:</span> TasksState <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    tasks<span class="token punctuation">,</span></span>
<span class="line">    setTasks<span class="token punctuation">,</span></span>
<span class="line">    currentView<span class="token punctuation">,</span></span>
<span class="line">    setCurrentView<span class="token punctuation">,</span></span>
<span class="line">    currentFilter<span class="token punctuation">,</span></span>
<span class="line">    setCurrentFilter<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TasksContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TasksContext.Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The logging <code>console.log(&quot;Rendering TasksProvider&quot;);</code> is present in every component in all versions of this app, so we can inspect re-renders.</p><p>Notice how we have to declare each piece of state with <code>useState</code> (or <code>useReducer</code>)</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>tasks<span class="token punctuation">,</span> setTasks<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>Task<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>dummyTasks<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>currentView<span class="token punctuation">,</span> setCurrentView<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>TasksView<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>currentFilter<span class="token punctuation">,</span> setCurrentFilter<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>and then splice it together in our big state payload, and then render our context provider</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> value<span class="token operator">:</span> TasksState <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  tasks<span class="token punctuation">,</span></span>
<span class="line">  setTasks<span class="token punctuation">,</span></span>
<span class="line">  currentView<span class="token punctuation">,</span></span>
<span class="line">  setCurrentView<span class="token punctuation">,</span></span>
<span class="line">  currentFilter<span class="token punctuation">,</span></span>
<span class="line">  setCurrentFilter<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TasksContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TasksContext.Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To <em>get</em> the current context value in a component that wants to use it, we call the <code>useContext</code> hook, and pass in the context object we declared above. To simplify this, it’s not uncommon to build a simple hook for just this purpose.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useTasksContext</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">useContext</span><span class="token punctuation">(</span>TasksContext<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now components can grab whatever slice of state they need.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> currentView<span class="token punctuation">,</span> tasks<span class="token punctuation">,</span> currentFilter <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useTasksContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="what-s-the-problem" tabindex="-1"><a class="header-anchor" href="#what-s-the-problem"><span>What’s the problem?</span></a></h3><p>This code is <em>fine</em>. It’s simple enough. And it works. I’ll be honest, though, as someone who works with code like this a lot, the boilerplate can become annoying pretty quickly. We have to declare each piece of state with the normal React primitives (useState, useReducer), and then also integrate it into our context payload (and typings). It’s not the worst thing to deal with; it’s just annoying.</p><p>Another downside of this code is that <em>all</em> consumers of this context will always rerender anytime <em>any</em> part of the context changes, even if that particular component is not using the part of the context that just changed. We can see that with the logging that’s in these components.</p><p>For example, changing the current UI view rerenders everything, even though only the task header, and task body read that state</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/img2-context-rerender.png?resize=544%2C510&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="introducing-zustand" tabindex="-1"><a class="header-anchor" href="#introducing-zustand"><span>Introducing Zustand</span></a></h2><p>Zustand is a minimal but powerful state management library. To create state, Zustand gives you a <code>create</code> method</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> create <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zustand&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>It’s easier to show this than to describe it.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> useTasksStore <span class="token operator">=</span> <span class="token generic-function"><span class="token function">create</span><span class="token generic class-name"><span class="token operator">&lt;</span>TasksState<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>set <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  tasks<span class="token punctuation">,</span></span>
<span class="line">  setTasks<span class="token operator">:</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> Task<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tasks<span class="token operator">:</span> Task<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Task<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">set</span><span class="token punctuation">(</span>state <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        tasks<span class="token operator">:</span> <span class="token keyword">typeof</span> arg <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token operator">?</span> <span class="token function">arg</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>tasks<span class="token punctuation">)</span> <span class="token operator">:</span> arg<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  currentView<span class="token operator">:</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">setCurrentView</span><span class="token operator">:</span> <span class="token punctuation">(</span>newView<span class="token operator">:</span> TasksView<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span> currentView<span class="token operator">:</span> newView <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  currentFilter<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">setCurrentFilter</span><span class="token operator">:</span> <span class="token punctuation">(</span>newFilter<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span> currentFilter<span class="token operator">:</span> newFilter <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We pass a function to <code>create</code> and return our state. Just like that. Simple and humble. The function we pass also takes an argument, which I’ve called <code>set</code>. The result of the <code>create</code> function, which I’ve named <code>useTasksStore</code> here, will be a React hook that you use to <em>read</em> your state.</p><h3 id="updating-state" tabindex="-1"><a class="header-anchor" href="#updating-state"><span>Updating state</span></a></h3><p>Updating our state couldn’t be simpler. The <code>set</code> function we see above is how we do that. Notice our updating functions like this:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line">setCur\`<span class="token function-variable function">rentView</span><span class="token operator">:</span> <span class="token punctuation">(</span>newView<span class="token operator">:</span> TasksView<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span> currentView<span class="token operator">:</span> newView <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>By default <code>set</code> will take what we return, and <em>integrate it</em> into the state that’s already there. So we can return the pieces that have changed, and Zustand will handle the update.</p><p>Naturally, there’s an override: if we pass <code>true</code> for the second argument to <code>set</code>, then what we return will overwrite the existing state in its entirety.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token function-variable function">clear</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The above would wipe our state, and replace it with an empty object; use this cautiously!</p><h3 id="reading-our-state" tabindex="-1"><a class="header-anchor" href="#reading-our-state"><span>Reading our state</span></a></h3><p>To read our state in the components which need it, we call the hook that was returned from <code>create</code>, which would be <code>useTasksStore</code> from above. We <em>could</em> read our state in the same way we read our context above</p><p>This is not the best way to use Zustand. Keep reading for a better way to use this API.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> currentView<span class="token punctuation">,</span> tasks<span class="token punctuation">,</span> currentFilter <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useTasksStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This will work and behave exactly like our context example before.</p><p>This means changing the current UI view will again re-render all components that read <em>anything</em> from the Zustand store, whether related to this piece of state, or not.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/img3-zustand-default-rerender.png?resize=558%2C460&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="the-correct-way-to-read-state" tabindex="-1"><a class="header-anchor" href="#the-correct-way-to-read-state"><span>The Correct Way to Read State</span></a></h2><p>It’s easy to miss in the docs the first time you read them, but when reading from your Zustand store, you shouldn’t do this:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> yourFields <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useTasksStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Zustand is well optimized, and will cause the component with the call to <code>useTasksStore</code> to only re-render when the <em>result</em> of the hook call changes. By default, it returns an object with your entire state. And when you change any piece of your state, the surrounding object will have to be recreated by Zustand, and will no longer match.</p><p>Instead, you should pass a selector argument into <code>useTasksStore</code>, in order to <em>select</em> the piece of state you want. The simplest usage would look like this</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> currentView <span class="token operator">=</span> <span class="token function">useTasksStore</span><span class="token punctuation">(</span>state <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>currentView<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token function">useTasksStore</span><span class="token punctuation">(</span>state <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>tasks<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> currentFilter <span class="token operator">=</span> <span class="token function">useTasksStore</span><span class="token punctuation">(</span>state <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>currentFilter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now our call returns only the <code>currentView</code> value in the first line, or our <code>tasks</code> array, or <code>currentFilter</code> in our second and third lines, respectively.</p><p>The value returned for <code>currentView</code> will only be different if you’ve <em>changed</em> that state value, and so on with <code>tasks</code>, and <code>currentFilter</code>. That means if <em>none</em> of these values have changed, then this component will not rerender, even if <em>other</em> values in our Zustand store have changed.</p><p>If you don’t like having those multiple calls, you’re free to use Zustand’s <code>useShallow</code> helper</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useShallow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zustand/react/shallow&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> tasks<span class="token punctuation">,</span> setTasks <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useTasksStore</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token function">useShallow</span><span class="token punctuation">(</span>state <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    tasks<span class="token operator">:</span> state<span class="token punctuation">.</span>tasks<span class="token punctuation">,</span></span>
<span class="line">    setTasks<span class="token operator">:</span> state<span class="token punctuation">.</span>setTasks<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>useShallow</code> hook lets us return an object with the state we want, and will trigger a rerender only if a shallow check on the properties in this object change.</p><p>If you want to save a few lines of code, you’re also free to return an array with <code>useShallow</code>.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>tasks<span class="token punctuation">,</span> setTasks<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTasksStore</span><span class="token punctuation">(</span><span class="token function">useShallow</span><span class="token punctuation">(</span>state <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>state<span class="token punctuation">.</span>tasks<span class="token punctuation">,</span> state<span class="token punctuation">.</span>setTasks<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This does the same thing.</p><p>The Zustand-optimized version of the app only uses the <code>useTasksStore</code> hook with a selector function, which means we can observe our improved re-rendering.</p><p>Changing the current UI view will only rerender the components that use the ui view part of the state.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/img4-zustand-optimized.png?resize=558%2C296&amp;ssl=1" alt="Console log showing rendering messages for TasksHeader, TasksBody, and TasksDetailed components." tabindex="0" loading="lazy"><figcaption>Console log showing rendering messages for TasksHeader, TasksBody, and TasksDetailed components.</figcaption></figure><p>For a trivial app like this, it probably won’t matter, but for a large app at scale, this can be beneficial, especially for users on slower devices.</p><hr><h2 id="odds-ends" tabindex="-1"><a class="header-anchor" href="#odds-ends"><span>Odds &amp; Ends</span></a></h2>`,77)),s("p",null,[n[26]||(n[26]=a("The full ")),s("a",j,[n[23]||(n[23]=a("Zustand docs are here (")),t(i,{icon:"iconfont icon-github"}),n[24]||(n[24]=s("code",null,"pmndrs/zustand",-1)),n[25]||(n[25]=a(")"))]),n[27]||(n[27]=a(". Zustand has a delightfully small surface area, so I’d urge you to just read the docs if you’re curious."))]),n[30]||(n[30]=l(`<p>That being said, there are a few features worth noting here.</p><h3 id="async-friendly" tabindex="-1"><a class="header-anchor" href="#async-friendly"><span>Async friendly</span></a></h3><p>Zustand doesn’t care where or when the <code>set</code> function is called. You’re free to have async methods in your store, which call <code>set</code> after a fetch.</p><p>The docs offer this example:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> useFishStore <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>set <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  fishies<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">fetch</span><span class="token operator">:</span> <span class="token keyword">async</span> pond <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>pond<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span> fishies<span class="token operator">:</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reading-state-inside-your-store-but-outside-of-set" tabindex="-1"><a class="header-anchor" href="#reading-state-inside-your-store-but-outside-of-set"><span>Reading state inside your store, but outside of <code>set</code></span></a></h3><p>We already know that we can call <code>set(oldState =&gt; newState)</code>, but what if we need (or just want) to read the <em>current</em> state inside one of our actions, unrelated to an update?</p><p>It turns out <code>create</code> also has a second argument, <code>get</code>, that you can use for this very purpose</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> useTasksStore <span class="token operator">=</span> <span class="token generic-function"><span class="token function">create</span><span class="token generic class-name"><span class="token operator">&lt;</span>TasksState<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span> get<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And now you can do something like this</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token function-variable function">logOddTasks</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> oddTasks <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tasks<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> oddTasks<span class="token operator">:</span> oddTasks <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The first line grabs a piece of state, completely detached from any updates.</p><h3 id="reading-state-outside-of-react-components" tabindex="-1"><a class="header-anchor" href="#reading-state-outside-of-react-components"><span>Reading state outside of React components</span></a></h3><p>Zustand gives you back a React <em>hook</em> from <code>create</code>. But what if you want to read your state outside of a React component? Zustand attaches a <code>getState()</code> method directly onto your hook, which you can call anywhere.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t call a hook here&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> tasks <span class="token operator">=</span> useTasksStore<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tasks<span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span> tasks <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pushing-further" tabindex="-1"><a class="header-anchor" href="#pushing-further"><span>Pushing further</span></a></h3><p>Zustand also supports manual, fine-grained subscriptions; bindings for vanilla JavaScript, with no React at all; and integrates well with immutable helpers like Immer. It also has some other, more advanced goodies that we won’t try to cover here. Check out the docs if this post has sparked your interest!</p><hr><h2 id="concluding-thoughts" tabindex="-1"><a class="header-anchor" href="#concluding-thoughts"><span>Concluding Thoughts</span></a></h2><p>Zustand is a wonderfully simple, frankly fun library to use to manage state management in React. And as an added bonus, it can also improve your render performance.</p>`,20)),h(" TODO: add ARTICLE CARD "),t(c,r(u({title:"Introducing Zustand (State Management)",desc:"Zustand is a minimal, but fun and effective state management library which just may improve your render performance.",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/introducing-zustand.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const V=m(b,[["render",C]]),z=JSON.parse('{"path":"/frontendmasters.com/introducing-zustand.html","title":"Introducing Zustand (State Management)","lang":"en-US","frontmatter":{"lang":"en-US","title":"Introducing Zustand (State Management)","description":"Article(s) > Introducing Zustand (State Management)","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","frontendmasters.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Introducing Zustand (State Management)\\",\\"image\\":[\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/img1-app.png?resize=1024%2C665&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/img2-context-rerender.png?resize=544%2C510&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/img3-zustand-default-rerender.png?resize=558%2C460&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/img4-zustand-optimized.png?resize=558%2C296&ssl=1\\"],\\"datePublished\\":\\"2025-07-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Adam Rackis\\",\\"url\\":\\"https://frontendmasters.com/blog/author/adamrackis/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/introducing-zustand.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Introducing Zustand (State Management)"}],["meta",{"property":"og:description","content":"Article(s) > Introducing Zustand (State Management)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6584"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6584"}],["meta",{"name":"twitter:image:alt","content":"Introducing Zustand (State Management)"}],["meta",{"property":"article:author","content":"Adam Rackis"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-07-21T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Introducing Zustand (State Management)"},{"property":"og:description","content":"Introducing Zustand (State Management)"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/introducing-zustand.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2025-07-21T00:00:00.000Z","isOriginal":false,"author":[{"name":"Adam Rackis","url":"https://frontendmasters.com/blog/author/adamrackis/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6584"},"git":{},"readingTime":{"minutes":7.42,"words":2225},"filePathRelative":"frontendmasters.com/introducing-zustand.md","copyright":{"author":"Adam Rackis"}}');export{V as comp,z as data};
