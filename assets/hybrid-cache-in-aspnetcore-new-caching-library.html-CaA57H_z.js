import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as y,d as n,f as e,b as u,a as f,t as w,n as d,g as k,w as t,e as a,r as p,o as C}from"./app-BVguHYKu.js";const T={},A={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},E={href:"https://learn.microsoft.com/en-us/aspnet/core/performance/caching/hybrid",target:"_blank",rel:"noopener noreferrer"},H={href:"https://en.wikipedia.org/wiki/Cache_stampede",target:"_blank",rel:"noopener noreferrer"},N={href:"https://redis.io/",target:"_blank",rel:"noopener noreferrer"};function L(m,s){const r=p("VPCard"),i=p("router-link"),h=p("SiteInfo"),v=p("RouteLink"),o=p("VPIcon"),g=p("Tabs");return C(),y("div",null,[n("h1",A,[n("a",x,[n("span",null,w(m.$frontmatter.title)+" 관련",1)])]),e(r,d(k({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",S,[n("ul",null,[n("li",null,[e(i,{to:"#what-is-hybridcache"},{default:t(()=>s[0]||(s[0]=[a("What is HybridCache?")])),_:1,__:[0]})]),n("li",null,[e(i,{to:"#installing-hybridcache"},{default:t(()=>s[1]||(s[1]=[a("Installing HybridCache")])),_:1,__:[1]})]),n("li",null,[e(i,{to:"#using-hybridcache"},{default:t(()=>s[2]||(s[2]=[a("Using HybridCache")])),_:1,__:[2]}),n("ul",null,[n("li",null,[e(i,{to:"#getting-or-creating-cache-entries"},{default:t(()=>s[3]||(s[3]=[a("Getting or Creating Cache Entries")])),_:1,__:[3]})]),n("li",null,[e(i,{to:"#setting-cache-entries-directly"},{default:t(()=>s[4]||(s[4]=[a("Setting Cache Entries Directly")])),_:1,__:[4]})]),n("li",null,[e(i,{to:"#using-cache-tags"},{default:t(()=>s[5]||(s[5]=[a("Using Cache Tags")])),_:1,__:[5]})]),n("li",null,[e(i,{to:"#removing-single-entries"},{default:t(()=>s[6]||(s[6]=[a("Removing Single Entries")])),_:1,__:[6]})])])]),n("li",null,[e(i,{to:"#adding-redis-as-l2-cache"},{default:t(()=>s[7]||(s[7]=[a("Adding Redis as L2 Cache")])),_:1,__:[7]})]),n("li",null,[e(i,{to:"#summary"},{default:t(()=>s[8]||(s[8]=[a("Summary")])),_:1,__:[8]})])])]),s[31]||(s[31]=n("hr",null,null,-1)),e(h,{name:"HybridCache in ASP.NET Core - New Caching Library",desc:"HybridCache in .NET 9 combines fast in-memory caching with distributed caching, solving common problems like cache stampede while adding features like tag-based invalidation. This guide shows you how to use HybridCache in your applications, from basic setup to real-world usage patterns with Entity Framework Core and minimal APIs.",url:"https://milanjovanovic.tech/blog/hybrid-cache-in-aspnetcore-new-caching-library",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_116.png"}),n("p",null,[e(v,{to:"/milanjovanovic.tech/caching-in-aspnetcore-improving-application-performance.html"},{default:t(()=>s[9]||(s[9]=[a("Caching")])),_:1,__:[9]}),s[10]||(s[10]=a(" is essential for building fast, scalable applications. ASP.NET Core has traditionally offered two caching options: in-memory caching and distributed caching. Each has its trade-offs. In-memory caching using ")),s[11]||(s[11]=n("code",null,"IMemoryCache",-1)),s[12]||(s[12]=a(" is fast but limited to a single server. Distributed caching with ")),s[13]||(s[13]=n("code",null,"IDistributedCache",-1)),s[14]||(s[14]=a(" works across multiple servers using a backplane."))]),s[32]||(s[32]=n("p",null,[a(".NET 9 introduces "),n("code",null,"HybridCache"),a(", a new library that combines the best of both approaches. It prevents common caching problems like cache stampede. It also adds useful features like tag-based invalidation and better performance monitoring.")],-1)),s[33]||(s[33]=n("p",null,[a("In this week's issue, I'll show you how to use "),n("code",null,"HybridCache"),a(" in your applications.")],-1)),s[34]||(s[34]=n("hr",null,null,-1)),s[35]||(s[35]=n("h2",{id:"what-is-hybridcache",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#what-is-hybridcache"},[n("span",null,"What is HybridCache?")])],-1)),s[36]||(s[36]=n("p",null,"The traditional caching options in ASP.NET Core have limitations. In-memory caching is fast but limited to one server. Distributed caching works across servers but is slower.",-1)),n("p",null,[n("a",E,[e(o,{icon:"fa-brands fa-microsoft"}),s[15]||(s[15]=a("HybridCache"))]),s[16]||(s[16]=a(" combines both approaches and adds important features:"))]),n("ul",null,[s[20]||(s[20]=n("li",null,[a("Two-level caching (L1/L2) "),n("ul",null,[n("li",null,"L1: Fast in-memory cache"),n("li",null,"L2: Distributed cache (Redis, SQL Server, etc.)")])],-1)),n("li",null,[s[18]||(s[18]=a("Protection against ")),n("a",H,[e(o,{icon:"fa-brands fa-wikipedia-w"}),s[17]||(s[17]=a("cache stampede"))]),s[19]||(s[19]=a(" (when many requests hit an empty cache at once)"))]),s[21]||(s[21]=n("li",null,"Tag-based cache invalidation",-1)),s[22]||(s[22]=n("li",null,"Configurable serialization",-1)),s[23]||(s[23]=n("li",null,"Metrics and monitoring",-1))]),s[37]||(s[37]=u(`<p>The L1 cache runs in your application&#39;s memory. The L2 cache can be Redis, SQL Server, or any other distributed cache. You can use HybridCache with just the L1 cache if you don&#39;t need distributed caching.</p><hr><h2 id="installing-hybridcache" tabindex="-1"><a class="header-anchor" href="#installing-hybridcache"><span>Installing HybridCache</span></a></h2><p>Install the <code>Microsoft.Extensions.Caching.Hybrid</code> NuGet package:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Caching<span class="token punctuation">.</span>Hybrid</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Add <code>HybridCache</code> to your services:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddHybridCache</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Maximum size of cached items</span></span>
<span class="line">    options<span class="token punctuation">.</span>MaximumPayloadBytes <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 10MB</span></span>
<span class="line">    options<span class="token punctuation">.</span>MaximumKeyLength <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Default timeouts</span></span>
<span class="line">    options<span class="token punctuation">.</span>DefaultEntryOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HybridCacheEntryOptions</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Expiration <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        LocalCacheExpiration <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For custom types, you can add your own serializer:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddHybridCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSerializer</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomType<span class="token punctuation">,</span> CustomSerializer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="using-hybridcache" tabindex="-1"><a class="header-anchor" href="#using-hybridcache"><span>Using HybridCache</span></a></h2><p><code>HybridCache</code> provides several methods to work with cached data. The most important ones are <code>GetOrCreateAsync</code>, <code>SetAsync</code>, and various remove methods. Let&#39;s see how to use each one in real-world scenarios.</p><h3 id="getting-or-creating-cache-entries" tabindex="-1"><a class="header-anchor" href="#getting-or-creating-cache-entries"><span>Getting or Creating Cache Entries</span></a></h3><p>The <code>GetOrCreateAsync</code> method is your main tool for working with cached data. It handles both cache hits and misses automatically. If the data isn&#39;t in the cache, it calls your factory method to get the data, caches it, and returns it.</p><p>Here&#39;s an endpoint that gets product details:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/products/{id}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">HybridCache</span> cache<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ProductDbContext</span> db<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">CancellationToken</span> ct<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> product <span class="token operator">=</span> <span class="token keyword">await</span> cache<span class="token punctuation">.</span><span class="token function">GetOrCreateAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token interpolation-string"><span class="token string">$&quot;product-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">async</span> token <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>Products</span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Category<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">FirstOrDefaultAsync</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Id <span class="token operator">==</span> id<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token named-parameter punctuation">cancellationToken</span><span class="token punctuation">:</span> ct</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> product <span class="token keyword">is</span> <span class="token keyword">null</span> <span class="token punctuation">?</span> Results<span class="token punctuation">.</span><span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example:</p><ul><li>The cache key is unique per product</li><li>If the product is in the cache, it&#39;s returned immediately</li><li>If not, the factory method runs to get the data</li><li>Other concurrent requests for the same product wait for the first one to finish</li></ul><h3 id="setting-cache-entries-directly" tabindex="-1"><a class="header-anchor" href="#setting-cache-entries-directly"><span>Setting Cache Entries Directly</span></a></h3><p>Sometimes you need to update the cache directly, like after modifying data. The <code>SetAsync</code> method handles this:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token function">MapPut</span><span class="token punctuation">(</span><span class="token string">&quot;/products/{id}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span> <span class="token class-name">Product</span> product<span class="token punctuation">,</span> <span class="token class-name">HybridCache</span> cache<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// First update the database</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">UpdateProductInDatabase</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Then update the cache with custom expiration</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HybridCacheEntryOptions</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Expiration <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        LocalCacheExpiration <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> cache<span class="token punctuation">.</span><span class="token function">SetAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token interpolation-string"><span class="token string">$&quot;product-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        product<span class="token punctuation">,</span></span>
<span class="line">        options</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">NoContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Key points about <code>SetAsync</code>:</p><ul><li>It updates both L1 and L2 cache</li><li>You can specify different timeouts for L1 and L2</li><li>It overwrites any existing value for the same key</li></ul><h3 id="using-cache-tags" tabindex="-1"><a class="header-anchor" href="#using-cache-tags"><span>Using Cache Tags</span></a></h3><p>Tags are powerful for managing groups of related cache entries. You can invalidate multiple entries at once using tags:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/categories/{id}/products&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">HybridCache</span> cache<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ProductDbContext</span> db<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">CancellationToken</span> ct<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> tags <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">$&quot;category-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> <span class="token string">&quot;products&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> products <span class="token operator">=</span> <span class="token keyword">await</span> cache<span class="token punctuation">.</span><span class="token function">GetOrCreateAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token interpolation-string"><span class="token string">$&quot;products-by-category-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">async</span> token <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>Products</span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>CategoryId <span class="token operator">==</span> id<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Category<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token named-parameter punctuation">tags</span><span class="token punctuation">:</span> tags<span class="token punctuation">,</span></span>
<span class="line">        <span class="token named-parameter punctuation">cancellationToken</span><span class="token punctuation">:</span> ct</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span>products<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Endpoint to invalidate all products in a category</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapPost</span><span class="token punctuation">(</span><span class="token string">&quot;/categories/{id}/invalidate&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">HybridCache</span> cache<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">CancellationToken</span> ct<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> cache<span class="token punctuation">.</span><span class="token function">RemoveByTagAsync</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;category-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> ct<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">NoContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tags are useful for:</p><ul><li>Invalidating all products in a category</li><li>Clearing all cached data for a specific user</li><li>Refreshing all related data when something changes</li></ul><h3 id="removing-single-entries" tabindex="-1"><a class="header-anchor" href="#removing-single-entries"><span>Removing Single Entries</span></a></h3><p>For direct cache invalidation of specific items, use <code>RemoveAsync</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token function">MapDelete</span><span class="token punctuation">(</span><span class="token string">&quot;/products/{id}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span> <span class="token class-name">HybridCache</span> cache<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// First delete from database</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">DeleteProductFromDatabase</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Then remove from cache</span></span>
<span class="line">    <span class="token keyword">await</span> cache<span class="token punctuation">.</span><span class="token function">RemoveAsync</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;product-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">NoContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>RemoveAsync</code>:</p><ul><li>Removes the item from both L1 and L2 cache</li><li>Works immediately, no delay</li><li>Does nothing if the key doesn&#39;t exist</li><li>Is safe to call multiple times</li></ul><p>Remember that <code>HybridCache</code> handles all the complexity of distributed caching, serialization, and stampede protection for you. You just need to focus on your cache keys and when to invalidate the cache.</p><hr><h2 id="adding-redis-as-l2-cache" tabindex="-1"><a class="header-anchor" href="#adding-redis-as-l2-cache"><span>Adding Redis as L2 Cache</span></a></h2>`,36)),n("p",null,[s[25]||(s[25]=a("To use ")),n("a",N,[e(o,{icon:"iconfont icon-redis"}),s[24]||(s[24]=a("Redis"))]),s[26]||(s[26]=a(" as your distributed cache:"))]),e(g,{data:[{id:"1."},{id:"2."}],active:0},{title0:t(({value:c,isActive:l})=>s[27]||(s[27]=[a("1.")])),title1:t(({value:c,isActive:l})=>s[28]||(s[28]=[a("2.")])),tab0:t(({value:c,isActive:l})=>s[29]||(s[29]=[n("p",null,[a("Install the "),n("code",null,"Microsoft.Extensions.Caching.StackExchangeRedis"),a(" NuGet package:")],-1),n("div",{class:"language-powershell line-numbers-mode","data-highlighter":"prismjs","data-ext":"powershell"},[n("pre",null,[n("code",{class:"language-powershell"},[n("span",{class:"line"},[n("span",{class:"token function"},"Install-Package"),a(" Microsoft"),n("span",{class:"token punctuation"},"."),a("Extensions"),n("span",{class:"token punctuation"},"."),a("Caching"),n("span",{class:"token punctuation"},"."),a("StackExchangeRedis")]),a(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1)])),tab1:t(({value:c,isActive:l})=>s[30]||(s[30]=[n("p",null,[a("Configure Redis and "),n("code",null,"HybridCache"),a(":")],-1),n("div",{class:"language-csharp line-numbers-mode","data-highlighter":"prismjs","data-ext":"cs"},[n("pre",null,[n("code",{class:"language-csharp"},[n("span",{class:"line"},[n("span",{class:"token comment"},"// Add Redis")]),a(`
`),n("span",{class:"line"},[a("builder"),n("span",{class:"token punctuation"},"."),a("Services"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"AddStackExchangeRedisCache"),n("span",{class:"token punctuation"},"("),a("options "),n("span",{class:"token operator"},"=>")]),a(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"{")]),a(`
`),n("span",{class:"line"},[a("    options"),n("span",{class:"token punctuation"},"."),a("Configuration "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"your-redis-connection-string"'),n("span",{class:"token punctuation"},";")]),a(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),a(`
`),n("span",{class:"line"}),a(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// Add HybridCache - it will automatically use Redis as L2")]),a(`
`),n("span",{class:"line"},[a("builder"),n("span",{class:"token punctuation"},"."),a("Services"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"AddHybridCache"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),a(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),s[38]||(s[38]=u('<p><code>HybridCache</code> will automatically detect and use Redis as the L2 cache.</p><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p><code>HybridCache</code> simplifies caching in .NET applications. It combines fast in-memory caching with distributed caching, prevents common problems like cache stampede, and works well in both single-server and distributed systems.</p><p>Start with the default settings and basic usage patterns - the library is designed to be simple to use while solving complex caching problems.</p><p>Thanks for reading.</p><p>And stay awesome!</p><hr>',8)),f(" TODO: add ARTICLE CARD "),e(r,d(k({title:"HybridCache in ASP.NET Core - New Caching Library",desc:"HybridCache in .NET 9 combines fast in-memory caching with distributed caching, solving common problems like cache stampede while adding features like tag-based invalidation. This guide shows you how to use HybridCache in your applications, from basic setup to real-world usage patterns with Entity Framework Core and minimal APIs.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/hybrid-cache-in-aspnetcore-new-caching-library.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const R=b(T,[["render",L]]),j=JSON.parse('{"path":"/milanjovanovic.tech/hybrid-cache-in-aspnetcore-new-caching-library.html","title":"HybridCache in ASP.NET Core - New Caching Library","lang":"en-US","frontmatter":{"lang":"en-US","title":"HybridCache in ASP.NET Core - New Caching Library","description":"Article(s) > HybridCache in ASP.NET Core - New Caching Library","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HybridCache in ASP.NET Core - New Caching Library\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_116.png\\"],\\"datePublished\\":\\"2024-11-16T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/hybrid-cache-in-aspnetcore-new-caching-library.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"HybridCache in ASP.NET Core - New Caching Library"}],["meta",{"property":"og:description","content":"Article(s) > HybridCache in ASP.NET Core - New Caching Library"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_116.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_116.png"}],["meta",{"name":"twitter:image:alt","content":"HybridCache in ASP.NET Core - New Caching Library"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-16T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > HybridCache in ASP.NET Core - New Caching Library"},{"property":"og:description","content":"HybridCache in ASP.NET Core - New Caching Library"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/hybrid-cache-in-aspnetcore-new-caching-library.html"}]],"prev":"/programming/cs/articles/README.md","date":"2024-11-16T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_116.png"},"git":{},"readingTime":{"minutes":4,"words":1200},"filePathRelative":"milanjovanovic.tech/hybrid-cache-in-aspnetcore-new-caching-library.md","copyright":{"author":"Milan Jovanović"}}');export{R as comp,j as data};
