import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as t,b as i,t as m,n as v,g as f,w as o,e as a,r as l,o as g}from"./app-BVguHYKu.js";const b={},h={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},P={href:"https://en.wikipedia.org/wiki/PDF",target:"_blank",rel:"noopener noreferrer"},D={href:"https://questpdf.com/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://questpdf.com/introduction.html",target:"_blank",rel:"noopener noreferrer"},T={class:"hint-container info"},C={href:"https://questpdf.com/license/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://ironpdf.com/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://ironpdf.com/how-to/pdfa/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://ironpdf.com/how-to/signing/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://learn.microsoft.com/en-us/aspnet/core/mvc/views/overview?view=aspnetcore-7.0",target:"_blank",rel:"noopener noreferrer"},E={href:"https://learn.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-7.0",target:"_blank",rel:"noopener noreferrer"},q={class:"hint-container info"},H={href:"https://ironpdf.com/licensing/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types",target:"_blank",rel:"noopener noreferrer"};function S(c,n){const u=l("VPCard"),p=l("router-link"),r=l("SiteInfo"),e=l("VPIcon");return g(),k("div",null,[s("h1",h,[s("a",y,[s("span",null,m(c.$frontmatter.title)+" 관련",1)])]),t(u,v(f({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",w,[s("ul",null,[s("li",null,[t(p,{to:"#creating-pdf-files-with-questpdf"},{default:o(()=>n[0]||(n[0]=[a("Creating PDF Files With QuestPDF")])),_:1,__:[0]})]),s("li",null,[t(p,{to:"#html-to-pdf-conversion-with-ironpdf"},{default:o(()=>n[1]||(n[1]=[a("HTML to PDF Conversion With IronPDF")])),_:1,__:[1]})]),s("li",null,[t(p,{to:"#merging-multiple-pdf-files"},{default:o(()=>n[2]||(n[2]=[a("Merging Multiple PDF Files")])),_:1,__:[2]})]),s("li",null,[t(p,{to:"#exporting-pdf-files-from-an-api"},{default:o(()=>n[3]||(n[3]=[a("Exporting PDF Files From an API")])),_:1,__:[3]})]),s("li",null,[t(p,{to:"#takeaway"},{default:o(()=>n[4]||(n[4]=[a("Takeaway")])),_:1,__:[4]})])])]),n[42]||(n[42]=s("hr",null,null,-1)),t(r,{name:"How To Easily Create PDF Documents in ASP.NET Core",desc:"Reporting is essential for business applications like e-commerce, shipping, fintech, etc. One of the most popular document formats for reporting purposes is PDF. Today I want to show you a few interesting ways to generate PDF files in .NET.",url:"https://milanjovanovic.tech/blog/how-to-easily-create-pdf-documents-in-aspnetcore/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_063.png"}),n[43]||(n[43]=s("p",null,"Reporting is essential for business applications like e-commerce, shipping, fintech, etc.",-1)),s("p",null,[n[6]||(n[6]=a("One of the most popular document formats for reporting purposes is ")),s("a",P,[t(e,{icon:"fa-brands fa-wikipedia-w"}),n[5]||(n[5]=a("PDF"))]),n[7]||(n[7]=a("."))]),n[44]||(n[44]=s("p",null,"PDF stands for Portable Document Format. It's a file format to present documents (including text formatting and images) independently of application software, hardware, and operating systems.",-1)),n[45]||(n[45]=s("p",null,"Some common problems .NET developers will face when working with PDF files:",-1)),n[46]||(n[46]=s("ul",null,[s("li",null,"Creating dynamic PDF documents"),s("li",null,"Designing a consistent page layout"),s("li",null,"Customizing fonts on printed documents")],-1)),n[47]||(n[47]=s("p",null,"Today I want to show you a few interesting ways to generate PDF files in .NET.",-1)),n[48]||(n[48]=s("hr",null,null,-1)),n[49]||(n[49]=s("h2",{id:"creating-pdf-files-with-questpdf",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#creating-pdf-files-with-questpdf"},[s("span",null,"Creating PDF Files With QuestPDF")])],-1)),s("p",null,[s("a",D,[t(e,{icon:"fas fa-globe"}),n[8]||(n[8]=a("QuestPDF"))]),n[9]||(n[9]=a(" is an open-source .NET library for generating PDF documents. It exposes a fluent API you can use to compose together many simple elements to create complex documents. Unlike other libraries, it does not rely on HTML-to-PDF conversion."))]),n[50]||(n[50]=i(`<p>Let&#39;s install the QuestPDF NuGet package:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> QuestPDF</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Here&#39;s how you can generate a simplified invoice with QuestPDF:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">using</span> <span class="token namespace">QuestPDF<span class="token punctuation">.</span>Fluent</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">QuestPDF<span class="token punctuation">.</span>Helpers</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">QuestPDF<span class="token punctuation">.</span>Infrastructure</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Document<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>container <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    container<span class="token punctuation">.</span><span class="token function">Page</span><span class="token punctuation">(</span>page <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        page<span class="token punctuation">.</span><span class="token function">Margin</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        page<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span>PageSizes<span class="token punctuation">.</span>A4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        page<span class="token punctuation">.</span><span class="token function">PageColor</span><span class="token punctuation">(</span>Colors<span class="token punctuation">.</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        page<span class="token punctuation">.</span><span class="token function">DefaultTextStyle</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">FontSize</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        page<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">AlignCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&quot;Invoice #: 2023-77&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">SemiBold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FontSize</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FontColor</span><span class="token punctuation">(</span>Colors<span class="token punctuation">.</span>Grey<span class="token punctuation">.</span>Darken4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        page<span class="token punctuation">.</span><span class="token function">Content</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span>table <span class="token operator">=&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                table<span class="token punctuation">.</span><span class="token function">ColumnsDefinition</span><span class="token punctuation">(</span>columns <span class="token operator">=&gt;</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    columns<span class="token punctuation">.</span><span class="token function">ConstantColumn</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    columns<span class="token punctuation">.</span><span class="token function">RelativeColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    columns<span class="token punctuation">.</span><span class="token function">RelativeColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                table<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span>header <span class="token operator">=&gt;</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    header<span class="token punctuation">.</span><span class="token function">Cell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    header<span class="token punctuation">.</span><span class="token function">Cell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&quot;Product&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    header<span class="token punctuation">.</span><span class="token function">Cell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AlignRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&quot;Price&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> lineItem <span class="token keyword">in</span> lineItems<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    table<span class="token punctuation">.</span><span class="token function">Cell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span>lineItem<span class="token punctuation">.</span>Index<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    table<span class="token punctuation">.</span><span class="token function">Cell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span>lineItem<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    table<span class="token punctuation">.</span><span class="token function">Cell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;$</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">lineItem<span class="token punctuation">.</span>Price</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">GeneratePdf</span><span class="token punctuation">(</span><span class="token string">&quot;invoice.pdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What I like about QuestPDF:</p>`,5)),s("ul",null,[n[12]||(n[12]=s("li",null,"Fluent API",-1)),n[13]||(n[13]=s("li",null,"Easy to use",-1)),s("li",null,[n[11]||(n[11]=a("Good ")),s("a",F,[t(e,{icon:"fas fa-globe"}),n[10]||(n[10]=a("documentation"))])])]),n[51]||(n[51]=s("p",null,"What I don't like about QuestPDF:",-1)),n[52]||(n[52]=s("ul",null,[s("li",null,"Having to write a lot of code to create documents"),s("li",null,"Limited scope of features"),s("li",null,"No HTML-to-PDF support")],-1)),s("div",T,[n[17]||(n[17]=s("p",{class:"hint-container-title"},"Licensing",-1)),s("p",null,[n[15]||(n[15]=a("QuestPDF is free for small companies and development use. There's also a commercial license for larger companies. You can check out the licensing details ")),s("a",C,[t(e,{icon:"fas fa-globe"}),n[14]||(n[14]=a("here"))]),n[16]||(n[16]=a("."))])]),n[53]||(n[53]=s("hr",null,null,-1)),n[54]||(n[54]=s("h2",{id:"html-to-pdf-conversion-with-ironpdf",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#html-to-pdf-conversion-with-ironpdf"},[s("span",null,"HTML to PDF Conversion With IronPDF")])],-1)),n[55]||(n[55]=s("p",null,"The more common approach for generating PDF files is using an HTML template.",-1)),s("p",null,[n[19]||(n[19]=a("My favorite library that supports this is ")),s("a",I,[t(e,{icon:"fas fa-globe"}),n[18]||(n[18]=a("IronPDF"))]),n[20]||(n[20]=a("."))]),s("p",null,[n[23]||(n[23]=a("IronPDF is a C# PDF library that allows for fast and efficient manipulation of PDF files. It also has many valuable features, like ")),s("a",x,[t(e,{icon:"fas fa-globe"}),n[21]||(n[21]=a("exporting to PDF/A format"))]),n[24]||(n[24]=a(" and ")),s("a",A,[t(e,{icon:"fas fa-globe"}),n[22]||(n[22]=a("digitally signing PDF documents"))]),n[25]||(n[25]=a("."))]),n[56]||(n[56]=s("p",null,"But what's the idea behind using an HTML template?",-1)),n[57]||(n[57]=s("p",null,"First of all, you have more control over formatting the document. You can use CSS to style the HTML markup, which will be applied when exporting to a PDF document.",-1)),s("p",null,[n[28]||(n[28]=a("An interesting implementation approach is using ")),s("a",M,[t(e,{icon:"fa-brands fa-microsoft"}),n[26]||(n[26]=a("ASP.NET Core MVC views"))]),n[29]||(n[29]=a(" and the ")),s("a",E,[t(e,{icon:"fa-brands fa-microsoft"}),n[27]||(n[27]=a("Razor syntax"))]),n[30]||(n[30]=a(". You can pass an object to the view at runtime to render dynamic HTML content."))]),n[58]||(n[58]=i(`<p>I&#39;ve used this approach with MVC views on a few projects with excellent results.</p><p>Let&#39;s start by installing the IronPDF NuGet package:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> IronPdf</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>I&#39;m using a strongly typed Razor view to define my markup. The <code>InoviceViewModel</code> class is the model, and it&#39;s used to create dynamic content.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">model</span></span> ViewModels<span class="token punctuation">.</span>InoviceViewModel</span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Invoice number: @Model.InvoiceNumber</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Invoice date: @Model.InvoiceDate</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Line items:</span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    @foreach(var lineItem in Model.LineItems)</span>
<span class="line">    </span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">-</span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">lineItem</span></span><span class="token punctuation">.</span>Name <span class="token operator">|</span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">lineItem</span></span><span class="token punctuation">.</span>Price</span>
<span class="line">    <span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, you need to use the IronPDF <code>ChromePdfRenderer</code> to convert the HTML to a PDF document.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> html <span class="token operator">=</span> <span class="token function">ConvertRazorViewToHtml</span><span class="token punctuation">(</span>invoice<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> renderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ChromePdfRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> pdf <span class="token operator">=</span> renderer<span class="token punctuation">.</span><span class="token function">RenderHtmlAsPdf</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">pdf<span class="token punctuation">.</span><span class="token function">SaveAs</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;invoice-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">invoice<span class="token punctuation">.</span>InvoiceNumber</span><span class="token punctuation">}</span></span><span class="token string">.pdf&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It really is that simple.</p>`,8)),s("div",q,[n[34]||(n[34]=s("p",{class:"hint-container-title"},"Licensing",-1)),s("p",null,[n[32]||(n[32]=a("IronPDF is free for development use and has multiple pricing tiers for commercial use that you can check out ")),s("a",H,[t(e,{icon:"fas fa-globe"}),n[31]||(n[31]=a("here"))]),n[33]||(n[33]=a("."))])]),n[59]||(n[59]=i(`<hr><h2 id="merging-multiple-pdf-files" tabindex="-1"><a class="header-anchor" href="#merging-multiple-pdf-files"><span>Merging Multiple PDF Files</span></a></h2><p>Another common requirement I&#39;ve seen is merging multiple PDF files. For example, you could implement a feature to merge the monthly receipts for the accounting department.</p><p>You can use the <code>PdfDocument.Merge</code> method to implement this. It accepts a <code>PdfDocument</code> collection as the argument. You&#39;ll first have to load the PDF documents into memory before merging them.</p><p>Here&#39;s an example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> pdfs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>PdfDocument<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">pdfs<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>PdfDocument<span class="token punctuation">.</span><span class="token function">FromFile</span><span class="token punctuation">(</span><span class="token string">&quot;google-invoice.pdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">pdfs<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>PdfDocument<span class="token punctuation">.</span><span class="token function">FromFile</span><span class="token punctuation">(</span><span class="token string">&quot;google-ads-invoice.pdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">pdfs<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>PdfDocument<span class="token punctuation">.</span><span class="token function">FromFile</span><span class="token punctuation">(</span><span class="token string">&quot;converkit-invoice.pdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">PdfDocument</span> mergedPdfDocument <span class="token operator">=</span> PdfDocument<span class="token punctuation">.</span><span class="token function">Merge</span><span class="token punctuation">(</span>pdfs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">mergedPdfDocument<span class="token punctuation">.</span><span class="token function">SaveAs</span><span class="token punctuation">(</span><span class="token string">&quot;merged-invoices.pdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="exporting-pdf-files-from-an-api" tabindex="-1"><a class="header-anchor" href="#exporting-pdf-files-from-an-api"><span>Exporting PDF Files From an API</span></a></h2><p>It&#39;s pretty straightforward to return a PDF file from an API endpoint in ASP.NET Core.</p>`,9)),s("p",null,[n[36]||(n[36]=a("Minimal APIs have the ")),n[37]||(n[37]=s("code",null,"Results.File",-1)),n[38]||(n[38]=a(" method accepting either a file path, stream, or byte array. You also need to specify the content type and an optional file name. The ")),s("a",N,[t(e,{icon:"fa-brands fa-firefox"}),n[35]||(n[35]=a("MIME type"))]),n[39]||(n[39]=a(" for PDF files is ")),n[40]||(n[40]=s("code",null,"application/pdf",-1)),n[41]||(n[41]=a("."))]),n[60]||(n[60]=i(`<p>Here&#39;s how you can return a PDF file from a byte array:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;newsletter/download&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> renderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ChromePdfRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> pdf <span class="token operator">=</span> renderer<span class="token punctuation">.</span><span class="token function">RenderHtmlAsPdf</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;The .NET Weekly&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">File</span><span class="token punctuation">(</span>pdf<span class="token punctuation">.</span>BinaryData<span class="token punctuation">,</span> <span class="token string">&quot;application/pdf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;newsletter.pdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="takeaway" tabindex="-1"><a class="header-anchor" href="#takeaway"><span>Takeaway</span></a></h2><p>Choosing which PDF library you will use in .NET is an important consideration to make. And while pricing is a significant factor, the features you want to use will also dictate your choice.</p><p>QuestPDF is an excellent choice if you&#39;re looking for a (mostly) free option with rich features. The library is constantly improved, and new features are being added. However, it doesn&#39;t support HTML-to-PDF conversion and modifying existing documents.</p><p>IronPDF is the library I&#39;ve used most often on commercial projects. It has fantastic features for working with PDF files, with many customization options. The HTML-to-PDF conversion works like a charm.</p><p>The hardest part is picking the right tool for the job.</p><p>So I hope this is helpful.</p><p>See you next week.</p>`,10))])}const L=d(b,[["render",S]]),V=JSON.parse('{"path":"/milanjovanovic.tech/how-to-easily-create-pdf-documents-in-aspnetcore.html","title":"How To Easily Create PDF Documents in ASP.NET Core","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How To Easily Create PDF Documents in ASP.NET Core","description":"Article(s) > How To Easily Create PDF Documents in ASP.NET Core","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How To Easily Create PDF Documents in ASP.NET Core\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_063.png\\"],\\"datePublished\\":\\"2023-11-11T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-to-easily-create-pdf-documents-in-aspnetcore.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How To Easily Create PDF Documents in ASP.NET Core"}],["meta",{"property":"og:description","content":"Article(s) > How To Easily Create PDF Documents in ASP.NET Core"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_063.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_063.png"}],["meta",{"name":"twitter:image:alt","content":"How To Easily Create PDF Documents in ASP.NET Core"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-11-11T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How To Easily Create PDF Documents in ASP.NET Core"},{"property":"og:description","content":"How To Easily Create PDF Documents in ASP.NET Core"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-to-easily-create-pdf-documents-in-aspnetcore.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-11-11T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_063.png"},"git":{},"readingTime":{"minutes":3.93,"words":1179},"filePathRelative":"milanjovanovic.tech/how-to-easily-create-pdf-documents-in-aspnetcore.md","copyright":{"author":"Milan Jovanović"}}');export{L as comp,V as data};
