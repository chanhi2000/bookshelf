import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as e,b as u,a as b,t as g,n as r,g as d,w as t,e as a,r as p,o as f}from"./app-BVguHYKu.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},P={class:"header-anchor",href:"#frontmatter-title-관련"},T={class:"table-of-contents"},C={href:"https://github.com/jbogard/MediatR",target:"_blank",rel:"noopener noreferrer"},x={href:"https://opentelemetry.io/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://en.wikipedia.org/wiki/Dead_letter_queue",target:"_blank",rel:"noopener noreferrer"},N={href:"https://rabbitmq.com/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://masstransit.io",target:"_blank",rel:"noopener noreferrer"},W={href:"https://particular.net/nservicebus",target:"_blank",rel:"noopener noreferrer"};function q(k,n){const c=p("VPCard"),i=p("router-link"),m=p("SiteInfo"),o=p("RouteLink"),l=p("VPIcon");return f(),v("div",null,[s("h1",w,[s("a",P,[s("span",null,g(k.$frontmatter.title)+" 관련",1)])]),e(c,r(d({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",T,[s("ul",null,[s("li",null,[e(i,{to:"#the-notification-publisher"},{default:t(()=>n[0]||(n[0]=[a("The Notification Publisher")])),_:1,__:[0]})]),s("li",null,[e(i,{to:"#proving-the-point-with-opentelemetry"},{default:t(()=>n[1]||(n[1]=[a("Proving the Point with OpenTelemetry")])),_:1,__:[1]}),s("ul",null,[s("li",null,[e(i,{to:"#foreachawaitpublisher-traces"},{default:t(()=>n[2]||(n[2]=[a("ForeachAwaitPublisher Traces")])),_:1,__:[2]})]),s("li",null,[e(i,{to:"#taskwhenallpublisher-traces"},{default:t(()=>n[3]||(n[3]=[a("TaskWhenAllPublisher Traces")])),_:1,__:[3]})])])]),s("li",null,[e(i,{to:"#building-an-async-notification-publisher-with-channels"},{default:t(()=>n[4]||(n[4]=[a("Building an Async Notification Publisher with Channels")])),_:1,__:[4]})]),s("li",null,[e(i,{to:"#comparing-approaches-with-opentelemetry"},{default:t(()=>n[5]||(n[5]=[a("Comparing Approaches With OpenTelemetry")])),_:1,__:[5]})]),s("li",null,[e(i,{to:"#takeaway"},{default:t(()=>n[6]||(n[6]=[a("Takeaway")])),_:1,__:[6]})])])]),n[38]||(n[38]=s("hr",null,null,-1)),e(m,{name:"Building a Better MediatR Publisher With Channels (and why you shouldn't)",desc:"Discover why MediatR's notification publishers block your application, and explore a Channel-based solution before reaching for a message queue.",url:"https://milanjovanovic.tech/blog/building-a-better-mediatr-publisher-with-channels-and-why-you-shouldnt",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_130.png"}),n[39]||(n[39]=s("p",null,"I've been meaning to write this article for a while now. This problem has been bugging me, and I finally found the time to address it.",-1)),n[40]||(n[40]=s("p",null,"What problem is that?",-1)),s("p",null,[n[8]||(n[8]=a("Well, it's about MediatR's ")),e(o,{to:"/milanjovanovic.tech/how-to-publish-mediatr-notifications-in-parallel.html"},{default:t(()=>n[7]||(n[7]=[s("strong",null,"notification publishing",-1)])),_:1,__:[7]}),n[9]||(n[9]=a(" mechanism."))]),n[41]||(n[41]=s("p",null,"MediatR supports simple in-process publish/subscribe capabilities. This lets you broadcast notifications to multiple handlers without coupling them directly to the publisher.",-1)),n[42]||(n[42]=s("p",null,[a("While MediatR's notification system appears asynchronous at first glance, "),s("strong",null,"it's not"),a(".")],-1)),n[43]||(n[43]=s("p",null,"By asynchronous, I mean that the publishing thread should not wait for all handlers to complete. Instead, it should return immediately after queuing the notification for processing.",-1)),n[44]||(n[44]=s("p",null,"In this article, we'll understand MediatR's notification publishing mechanics. We'll use distributed tracing to examine its execution model, and explore alternatives for true asynchronous processing.",-1)),n[45]||(n[45]=s("hr",null,null,-1)),n[46]||(n[46]=s("h2",{id:"the-notification-publisher",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#the-notification-publisher"},[s("span",null,"The Notification Publisher")])],-1)),s("p",null,[s("a",C,[e(l,{icon:"iconfont icon-github"}),n[10]||(n[10]=s("code",null,"jbogard/MediatR",-1))]),n[11]||(n[11]=a(" provides two built-in implementations of its ")),n[12]||(n[12]=s("code",null,"INotificationPublisher",-1)),n[13]||(n[13]=a(" interface. They each have distinct characteristics but share one crucial trait: they block the publishing thread until the handlers complete."))]),n[47]||(n[47]=u(`<p>Here&#39;s the <code>INotificationPublisher</code> interface:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="INotificationPublisher.cs"><span>INotificationPublisher.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">INotificationPublisher</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task</span> <span class="token function">Publish</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>NotificationHandlerExecutor<span class="token punctuation">&gt;</span></span> handlerExecutors<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">INotification</span> notification<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This interface provides the contract for executing notification handlers, but the execution strategy is left to the implementing classes.</p><p>By default, MediatR uses the <code>ForeachAwaitPublisher</code>:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ForeachAwaitPublisher.cs"><span>ForeachAwaitPublisher.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForeachAwaitPublisher</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INotificationPublisher</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Publish</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>NotificationHandlerExecutor<span class="token punctuation">&gt;</span></span> handlerExecutors<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">INotification</span> notification<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> handler <span class="token keyword">in</span> handlerExecutors<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">await</span> handler<span class="token punctuation">.</span><span class="token function">HandlerCallback</span><span class="token punctuation">(</span>notification<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This implementation processes handlers sequentially, ensuring a predictable order of execution.</p><p>The alternative <code>TaskWhenAllPublisher</code> offers concurrent execution:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="TaskWhenAllPublisher.cs"><span>TaskWhenAllPublisher.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskWhenAllPublisher</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INotificationPublisher</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">Publish</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>NotificationHandlerExecutor<span class="token punctuation">&gt;</span></span> handlerExecutors<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">INotification</span> notification<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> tasks <span class="token operator">=</span> handlerExecutors</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>handler <span class="token operator">=&gt;</span> handler<span class="token punctuation">.</span><span class="token function">HandlerCallback</span><span class="token punctuation">(</span>notification<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">WhenAll</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,8)),s("p",null,[n[15]||(n[15]=a(`While this publisher executes handlers concurrently, it's crucial to understand that "concurrent" doesn't mean `)),e(o,{to:"/milanjovanovic.tech/building-async-apis-in-aspnetcore-the-right-way.html"},{default:t(()=>n[14]||(n[14]=[s("strong",null,'"background processing"',-1)])),_:1,__:[14]}),n[16]||(n[16]=a(". The publishing thread still waits for all handlers to complete before continuing."))]),n[48]||(n[48]=s("hr",null,null,-1)),n[49]||(n[49]=s("h2",{id:"proving-the-point-with-opentelemetry",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#proving-the-point-with-opentelemetry"},[s("span",null,"Proving the Point with OpenTelemetry")])],-1)),s("p",null,[n[18]||(n[18]=a("To demonstrate the blocking nature of both publishers, let's set up a simple example with ")),s("a",x,[e(l,{icon:"fas fa-globe"}),n[17]||(n[17]=a("OpenTelemetry"))]),n[19]||(n[19]=a(" tracing:"))]),n[50]||(n[50]=u(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// This will register all handlers in the same assembly as the Program class</span></span>
<span class="line"><span class="token comment">// We&#39;re also configuring the notifcation publisher</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddMediatR</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterServicesFromAssemblyContaining</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Program<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted">    cfg<span class="token punctuation">.</span>NotificationPublisherType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ForeachAwaitPublisher</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">    <span class="token comment">// or we could say 👇</span></span>
<span class="line highlighted">    <span class="token comment">// cfg.NotificationPublisherType = typeof(TaskWhenAllPublisher);</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddOpenTelemetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ConfigureResource</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span><span class="token function">AddService</span><span class="token punctuation">(</span>DiagnosticConfig<span class="token punctuation">.</span>Source<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">WithTracing</span><span class="token punctuation">(</span>tracing <span class="token operator">=&gt;</span></span>
<span class="line">        tracing</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">AddAspNetCoreInstrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">AddSource</span><span class="token punctuation">(</span>DiagnosticConfig<span class="token punctuation">.</span>Source<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">UseOtlpExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Dummy endpoint to trigger the notification</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapPost</span><span class="token punctuation">(</span><span class="token string">&quot;orders&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token class-name">IMediator</span> mediator<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> activity <span class="token operator">=</span> DiagnosticConfig<span class="token punctuation">.</span>Source<span class="token punctuation">.</span><span class="token function">StartActivity</span><span class="token punctuation">(</span><span class="token string">&quot;CreateOrder&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> orderId <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Just publish the notification, we don&#39;t care about doing &quot;real&quot; work here</span></span>
<span class="line">    <span class="token keyword">await</span> mediator<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderCreatedNotification</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        OrderId <span class="token operator">=</span> orderId<span class="token punctuation">,</span></span>
<span class="line">        ParentId <span class="token operator">=</span> activity<span class="token punctuation">?.</span>Id <span class="token comment">// Propagating the parent activity ID</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// The simple notification class</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderCreatedNotification</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INotification</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> ParentId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// A slow handler to simulate blocking behavior</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlowOrderCreatedHandler</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>SlowOrderCreatedHandler<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> INotificationHandler<span class="token operator">&lt;</span>OrderCreatedNotification<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">OrderCreatedNotification</span> notification<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> token<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> activity <span class="token operator">=</span> DiagnosticConfig<span class="token punctuation">.</span>Source<span class="token punctuation">.</span><span class="token function">StartActivity</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">&quot;SlowOrderCreatedHandler.Handle&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            ActivityKind<span class="token punctuation">.</span>Internal<span class="token punctuation">,</span></span>
<span class="line">            notification<span class="token punctuation">.</span>ParentId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Simulate work</span></span>
<span class="line"></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">&quot;Slow handler completed for order {OrderId}&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            notification<span class="token punctuation">.</span>OrderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Defines the OpenTelemetry ActivitySource</span></span>
<span class="line"><span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DiagnosticConfig</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">ActivitySource</span> Source <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">&quot;Order.Service&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When we examine the resulting traces, we&#39;ll see that the handler execution spans are contained within the HTTP request span, indicating that the request thread is blocked until all handlers complete.</p><p>Now, let&#39;s see how these publishers behave in practice. I&#39;ll add a few more handlers to the mix to make the example more interesting.</p><h3 id="foreachawaitpublisher-traces" tabindex="-1"><a class="header-anchor" href="#foreachawaitpublisher-traces"><span>ForeachAwaitPublisher Traces</span></a></h3><p>You can see the sequential execution of handlers in the trace visualization. The request span encompasses all handler execution, demonstrating the blocking nature of the <code>ForeachAwaitPublisher</code>.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_130/foreachawait_publisher.png?imwidth=3840" alt="Distributed trace demonstrating notification handling." tabindex="0" loading="lazy"><figcaption>Distributed trace demonstrating notification handling.</figcaption></figure><h3 id="taskwhenallpublisher-traces" tabindex="-1"><a class="header-anchor" href="#taskwhenallpublisher-traces"><span>TaskWhenAllPublisher Traces</span></a></h3><p>Similarly, the <code>TaskWhenAllPublisher</code> shows concurrent handler execution within the request span. We do get a slight improvement in handler execution time, but the request thread still waits for all handlers to complete before returning.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_130/taskwhenall_publisher.png?imwidth=3840" alt="Distributed trace demonstrating notification handling." tabindex="0" loading="lazy"><figcaption>Distributed trace demonstrating notification handling.</figcaption></figure><hr><h2 id="building-an-async-notification-publisher-with-channels" tabindex="-1"><a class="header-anchor" href="#building-an-async-notification-publisher-with-channels"><span>Building an Async Notification Publisher with Channels</span></a></h2><p>How can we make MediatR&#39;s notification publishing truly asynchronous?</p><p>We&#39;ll implement a custom <code>INotificationPublisher</code> that leverages <code>System.Threading.Channels</code> for true asynchronous processing. This implementation will queue notifications for background processing, allowing the publishing thread to return immediately.</p><p>Here&#39;s the <code>ChannelPublisher</code>:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ChannelPublisher.cs"><span>ChannelPublisher.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// The publisher just queues the notification for processing</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChannelPublisher</span><span class="token punctuation">(</span><span class="token class-name">NotificationsQueue</span> queue<span class="token punctuation">)</span> <span class="token punctuation">:</span> INotificationPublisher</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Publish</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>NotificationHandlerExecutor<span class="token punctuation">&gt;</span></span> handlerExecutors<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">INotification</span> notification<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Write the message to the channel, and return immediately</span></span>
<span class="line">        <span class="token keyword">await</span> queue<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotificationEntry</span><span class="token punctuation">(</span>handlerExecutors<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// It&#39;s the Channel that handles the actual message passing</span></span>
<span class="line"><span class="token comment">// We can control the capacity and backpressure handling here</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotificationsQueue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> capacity <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Channel<span class="token punctuation">&lt;</span>NotificationEntry<span class="token punctuation">&gt;</span></span> _queue <span class="token operator">=</span></span>
<span class="line">        Channel<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateBounded</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NotificationEntry<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">BoundedChannelOptions</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            FullMode <span class="token operator">=</span> BoundedChannelFullMode<span class="token punctuation">.</span>Wait <span class="token comment">// Backpressure handling</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">ChannelReader<span class="token punctuation">&lt;</span>NotificationEntry<span class="token punctuation">&gt;</span></span> Reader <span class="token operator">=&gt;</span> _queue<span class="token punctuation">.</span>Reader<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">ChannelWriter<span class="token punctuation">&lt;</span>NotificationEntry<span class="token punctuation">&gt;</span></span> Writer <span class="token operator">=&gt;</span> _queue<span class="token punctuation">.</span>Writer<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// A simple data structure to hold the notification and handlers</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">NotificationEntry</span><span class="token punctuation">(</span><span class="token class-name">NotificationHandlerExecutor<span class="token punctuation">[</span><span class="token punctuation">]</span></span> Handlers<span class="token punctuation">,</span> <span class="token class-name">INotification</span> Notification<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Program.cs</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NotificationsQueue<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>But this is just part of the solution. We need a background service to process the queued notifications:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ChannelPublisherWorker.cs"><span>ChannelPublisherWorker.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// We&#39;ll use the NotificationsQueue to read and process notifications</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChannelPublisherWorker</span><span class="token punctuation">(</span><span class="token class-name">NotificationsQueue</span> queue<span class="token punctuation">)</span> <span class="token punctuation">:</span> BackgroundService</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> stoppingToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Read notifications from the queue and process them</span></span>
<span class="line">        <span class="token keyword">await</span> <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">NotificationEntry</span> entry <span class="token keyword">in</span> queue<span class="token punctuation">.</span>Reader<span class="token punctuation">.</span><span class="token function">ReadAllAsync</span><span class="token punctuation">(</span>stoppingToken<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Parallel.ForEachAsync for style points</span></span>
<span class="line">            <span class="token keyword">await</span> Parallel<span class="token punctuation">.</span><span class="token function">ForEachAsync</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>Handlers<span class="token punctuation">,</span> stoppingToken<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>executor<span class="token punctuation">,</span> token<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// We&#39;re finally executing the handler</span></span>
<span class="line">                <span class="token keyword">await</span> executor<span class="token punctuation">.</span><span class="token function">HandlerCallback</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>Notification<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Program.cs</span></span>
<span class="line">builser<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHostedService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ChannelPublisherWorker<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This implementation offers several advantages:</p><ul><li>True background processing - the publisher returns immediately after queueing the notification</li><li>Backpressure handling through bounded channel capacity</li><li>Independent handler execution</li></ul><p>To use this publisher, register it with MediatR by setting the <code>NotificationPublisherType</code> to be <code>ChannelPublisher</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">services<span class="token punctuation">.</span><span class="token function">AddMediatR</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    cfg<span class="token punctuation">.</span>NotificationPublisherType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ChannelPublisher</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s see how this implementation performs in practice.</p><hr><h2 id="comparing-approaches-with-opentelemetry" tabindex="-1"><a class="header-anchor" href="#comparing-approaches-with-opentelemetry"><span>Comparing Approaches With OpenTelemetry</span></a></h2><p>When we examine the traces with our <code>ChannelPublisher</code>, we&#39;ll see a significant difference:</p><ol><li>The HTTP request span completes quickly after queueing the notification</li><li>Handler execution spans appear as separate traces</li><li>Overall system responsiveness improves</li></ol><figure><img src="https://milanjovanovic.tech/blogs/mnw_130/channel_publisher.png?imwidth=3840" alt="Distributed trace demonstrating notification handling." tabindex="0" loading="lazy"><figcaption>Distributed trace demonstrating notification handling.</figcaption></figure><p>This visualization clearly demonstrates the non-blocking nature of our implementation.</p><p>But is it worth it?</p><p>Here&#39;s what you should consider first before adopting this approach:</p>`,30)),s("ul",null,[n[23]||(n[23]=s("li",null,[a("The "),s("code",null,"ChannelPublisher"),a(" introduces additional complexity compared to the built-in publishers")],-1)),s("li",null,[n[21]||(n[21]=a("Error handling is your responsibility (e.g., retrying failed handlers, ")),s("a",A,[e(l,{icon:"fa-brands fa-wikipedia-w"}),n[20]||(n[20]=a("dead-letter queue"))]),n[22]||(n[22]=a(")"))]),n[24]||(n[24]=s("li",null,[a("And did I mention "),s("a",{href:"/milanjovanovic.tech/idempotent-consumer-handling-duplicate-messages",target:"_blank",rel:"noopener noreferrer"},[s("strong",null,"idempotent consumers")]),a("? Yeah... you need those too")],-1)),n[25]||(n[25]=s("li",null,[s("a",{href:"/milanjovanovic.tech/lightweight-in-memory-message-bus-using-dotnet-channels",target:"_blank",rel:"noopener noreferrer"},[s("strong",null,"Channels")]),a(" aren't durable - messages are lost if the application crashes")],-1))]),n[51]||(n[51]=s("p",null,"Before you know it, you might find yourself reinventing the wheel with a custom message queueing system.",-1)),s("p",null,[n[29]||(n[29]=a("Instead, consider using a real message broker like ")),s("a",N,[e(l,{icon:"iconfont icon-rabbitmq"}),n[26]||(n[26]=a("RabbitMQ"))]),n[30]||(n[30]=a(". Combine it with a library like ")),s("a",I,[e(l,{icon:"fas fa-globe"}),n[27]||(n[27]=a("MassTransit"))]),n[31]||(n[31]=a(" or ")),s("a",W,[e(l,{icon:"fas fa-globe"}),n[28]||(n[28]=a("NServiceBus"))]),n[32]||(n[32]=a(" for a robust, scalable, and reliable messaging solution."))]),n[52]||(n[52]=s("hr",null,null,-1)),n[53]||(n[53]=s("h2",{id:"takeaway",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#takeaway"},[s("span",null,"Takeaway")])],-1)),n[54]||(n[54]=s("p",null,"MediatR's notification system is great for simple in-process pub/sub scenarios. However, the built-in publishers can become a bottleneck in high-throughput applications due to their blocking nature.",-1)),n[55]||(n[55]=s("p",null,[a("The "),s("code",null,"ChannelPublisher"),a(" implementation we explored offers true asynchronous processing. However, it also comes with extra complexity around message handling and delivery guarantees. Managing message persistence, error handling, retries, and idempotency quickly becomes challenging.")],-1)),s("p",null,[n[35]||(n[35]=a("If your application requires these features, you'll be better off adopting a mature solution like ")),e(o,{to:"/milanjovanovic.tech/using-masstransit-with-rabbitmq-and-azure-service-bus.html"},{default:t(()=>n[33]||(n[33]=[s("strong",null,"RabbitMQ",-1)])),_:1,__:[33]}),n[36]||(n[36]=a(" or ")),e(o,{to:"/milanjovanovic.tech/complete-guide-to-amazon-sqs-and-amazon-sns-with-masstransit.html"},{default:t(()=>n[34]||(n[34]=[s("strong",null,"Amazon SQS",-1)])),_:1,__:[34]}),n[37]||(n[37]=a("."))]),n[56]||(n[56]=s("hr",null,null,-1)),b(" TODO: add ARTICLE CARD "),e(c,r(d({title:"Building a Better MediatR Publisher With Channels (and why you shouldn't)",desc:"Discover why MediatR's notification publishers block your application, and explore a Channel-based solution before reaching for a message queue.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/building-a-better-mediatr-publisher-with-channels-and-why-you-shouldnt.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const M=h(y,[["render",q]]),S=JSON.parse(`{"path":"/milanjovanovic.tech/building-a-better-mediatr-publisher-with-channels-and-why-you-shouldnt.html","title":"Building a Better MediatR Publisher With Channels (and why you shouldn't)","lang":"en-US","frontmatter":{"lang":"en-US","title":"Building a Better MediatR Publisher With Channels (and why you shouldn't)","description":"Article(s) > Building a Better MediatR Publisher With Channels (and why you shouldn't)","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Building a Better MediatR Publisher With Channels (and why you shouldn't)\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_130/foreachawait_publisher.png?imwidth=3840\\",\\"https://milanjovanovic.tech/blogs/mnw_130/taskwhenall_publisher.png?imwidth=3840\\",\\"https://milanjovanovic.tech/blogs/mnw_130/channel_publisher.png?imwidth=3840\\"],\\"datePublished\\":\\"2025-02-22T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/building-a-better-mediatr-publisher-with-channels-and-why-you-shouldnt.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Building a Better MediatR Publisher With Channels (and why you shouldn't)"}],["meta",{"property":"og:description","content":"Article(s) > Building a Better MediatR Publisher With Channels (and why you shouldn't)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_130.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_130.png"}],["meta",{"name":"twitter:image:alt","content":"Building a Better MediatR Publisher With Channels (and why you shouldn't)"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-02-22T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Building a Better MediatR Publisher With Channels (and why you shouldn't)"},{"property":"og:description","content":"Building a Better MediatR Publisher With Channels (and why you shouldn't)"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/building-a-better-mediatr-publisher-with-channels-and-why-you-shouldnt.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-02-22T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_130.png"},"git":{},"readingTime":{"minutes":5.31,"words":1593},"filePathRelative":"milanjovanovic.tech/building-a-better-mediatr-publisher-with-channels-and-why-you-shouldnt.md","copyright":{"author":"Milan Jovanović"}}`);export{M as comp,S as data};
