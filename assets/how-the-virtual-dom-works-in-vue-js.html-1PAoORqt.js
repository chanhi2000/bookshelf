import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as t,b as r,a as k,t as v,n as c,g as u,w as o,e as a,r as l,o as b}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/blog.logrocket.com/how-the-virtual-dom-works-in-vue-js/banner.png",f="/bookshelf/assets/image/blog.logrocket.com/how-the-virtual-dom-works-in-vue-js/wireframe-html-dom.png",y={},j={id:"frontmatter-title-관련",tabindex:"-1"},M={class:"header-anchor",href:"#frontmatter-title-관련"},D={class:"table-of-contents"};function O(d,n){const i=l("VPCard"),e=l("router-link"),h=l("SiteInfo"),p=l("VPIcon");return b(),g("div",null,[s("h1",j,[s("a",M,[s("span",null,v(d.$frontmatter.title)+" 관련",1)])]),t(i,c(u({title:"Vue.js > Article(s)",desc:"Article(s)",link:"/programming/js-vue/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",D,[s("ul",null,[s("li",null,[t(e,{to:"#introduction"},{default:o(()=>n[0]||(n[0]=[a("Introduction")])),_:1,__:[0]})]),s("li",null,[t(e,{to:"#the-dom-itself"},{default:o(()=>n[1]||(n[1]=[a("The DOM itself")])),_:1,__:[1]}),s("ul",null,[s("li",null,[t(e,{to:"#why-the-traditional-dom-is-not-enough"},{default:o(()=>n[2]||(n[2]=[a("Why the traditional DOM is not enough")])),_:1,__:[2]})])])]),s("li",null,[t(e,{to:"#the-vue-js-virtual-dom"},{default:o(()=>n[3]||(n[3]=[a("The Vue.js virtual DOM")])),_:1,__:[3]}),s("ul",null,[s("li",null,[t(e,{to:"#how-it-works"},{default:o(()=>n[4]||(n[4]=[a("How it works")])),_:1,__:[4]})]),s("li",null,[t(e,{to:"#how-to-mount-a-virtual-dom-to-an-html-element"},{default:o(()=>n[5]||(n[5]=[a("How to mount a virtual DOM to an HTML element")])),_:1,__:[5]})])])]),s("li",null,[t(e,{to:"#some-lessons"},{default:o(()=>n[6]||(n[6]=[a("Some lessons")])),_:1,__:[6]})]),s("li",null,[t(e,{to:"#conclusion"},{default:o(()=>n[7]||(n[7]=[a("Conclusion")])),_:1,__:[7]})])])]),n[20]||(n[20]=s("hr",null,null,-1)),t(h,{name:"How the virtual DOM works in Vue.js",desc:"With this overview of how the virtual DOM works in Vue.js, you can learn exactly what is happening behind the scenes.",url:"https://blog.logrocket.com/how-the-virtual-dom-works-in-vue-js",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/how-the-virtual-dom-works-in-vue-js/banner.png"}),n[21]||(n[21]=r('<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>Vue.js is a JavaScript framework known for its fast loading speed and easy scalability. Some of its features can be linked directly its use of a virtual DOM to update the actual DOM as necessary.</p><figure><img src="'+w+`" alt="The Virtual DOM in Vue.js" tabindex="0" loading="lazy"><figcaption>The Virtual DOM in Vue.js</figcaption></figure><p>Understanding the virtual DOM is not a requirement for learning Vue.js, but it can certainly help budding Vue developers begin to understand some of the things happening behind the scenes.</p><hr><h2 id="the-dom-itself" tabindex="-1"><a class="header-anchor" href="#the-dom-itself"><span>The DOM itself</span></a></h2><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Page Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>This is a Heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is a paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Before we talk about the Vue.js virtual DOM, it is important to understand what the DOM itself is. The Document Object Model, or DOM, is a kind of interface that treats all the markup language (your HTML) as connected nodes. It can be seen as an interface of objects for markup elements stored in a tree-like structure.</p><p>The DOM is what allows us to write and change styles on elements, and even change elements themselves. This is done by adding, modifying, or deleting element tags or CSS styles in the head and body of a document because they are represented as nodes and objects. This is how the HTML DOM works — so why would Vue have another DOM?</p><figure><img src="`+f+`" alt="Wireframe of the HTML DOM" tabindex="0" loading="lazy"><figcaption>Wireframe of the HTML DOM</figcaption></figure><h3 id="why-the-traditional-dom-is-not-enough" tabindex="-1"><a class="header-anchor" href="#why-the-traditional-dom-is-not-enough"><span>Why the traditional DOM is not enough</span></a></h3><p>So all is fine and good with the DOM. As applications grow, however — meaning more nodes to traverse, more elements, and more scripts to communicate with those elements — the DOM grows slower and costs a lot of processing power.</p><p>Trying to perform a search or even update a DOM becomes a hard task, ultimately affecting the performance of the application. This is why the virtual DOM was created.</p><hr><h2 id="the-vue-js-virtual-dom" tabindex="-1"><a class="header-anchor" href="#the-vue-js-virtual-dom"><span>The Vue.js virtual DOM</span></a></h2><p>The Vue.js team built the virtual DOM to be a kind of abstraction of the traditional DOM; it is a “lite” version of the HTML DOM, but with superpowers. The virtual DOM is smarter, and so it finds a way to be more efficient than the traditional DOM.</p><p>The primary way it accomplishes this is through various diff algorithms to avoid re-rendering the entire DOM after any new change or update to the document. That alone improves efficiency and resource management to a great degree because the DOM API is called less often.</p><p>The virtual DOM by that explanation is located between the actual DOM and the Vue instance.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;hi LogRocket&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span> <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;headers&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>text</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This returns the elements below on render:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>’app’</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>’headers’</span><span class="token punctuation">&gt;</span></span>hi LogRocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You see that Vue virtual DOM is made of Vue components, which are JavaScript objects that extend the Vue instance. Vue uses a virtual DOM because of the sheer difference in speed and efficiency compared to the actual DOM. The virtual DOM is also smaller in size than the actual DOM and so is very efficient.</p><h3 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How it works</span></a></h3><p>Let’s use a form with a conditional statement in it to show how the virtual DOM works:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”form-group”</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”{‘form-group</span> <span class="token attr-name">—</span> <span class="token attr-name"><span class="token namespace">error’:</span></span> <span class="token attr-name">$v.name.$error</span> <span class="token attr-name">}”</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”form__label”</span><span class="token punctuation">&gt;</span></span>Full Name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”form__input”</span> <span class="token attr-name">v-model.trim</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”$v.name.$model”/</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”error”</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”!$v.name.required”</span><span class="token punctuation">&gt;</span></span>Field is required<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how the code block above has a <code>span</code> with a <code>v-if</code> statement showing an <code>error</code> class when the name is not entered. In this code, a small span line appears if you do not type a name in the box indicating “Field is required.” The change in the virtual DOM will be to conditionally add this <code>span</code> element if the <code>v-if</code> condition returns <code>true</code>.</p><p>Before this line is read, the actual DOM and the virtual DOM will read the same; after this condition is met, a diff is now made between the two states (in the actual DOM and the virtual DOM), and this diff will output a patch of changes that will now be applied to the actual DOM without re-rendering it. In this way, both DOMs go back to being the same immediately.</p><h3 id="how-to-mount-a-virtual-dom-to-an-html-element" tabindex="-1"><a class="header-anchor" href="#how-to-mount-a-virtual-dom-to-an-html-element"><span>How to mount a virtual DOM to an HTML element</span></a></h3><p>You might not have noticed, but any time you run a Vue.js command for a new project, like hello world:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">vue create hello-world</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,30)),s("p",null,[n[8]||(n[8]=a("You see that by default you are already using the Vue’s virtual DOM; you can confirm that when you go to your ")),t(p,{icon:"fa-brands fa-js"}),n[9]||(n[9]=s("code",null,"main.js",-1)),n[10]||(n[10]=a(" file. It should look somewhat similar to this code block below:"))]),n[22]||(n[22]=r(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="main.js"><span>main.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[11]||(n[11]=a("You can see that the element here is any element with the ID of ")),n[12]||(n[12]=s("code",null,"App",-1)),n[13]||(n[13]=a(", which is usually the ")),n[14]||(n[14]=s("code",null,"App",-1)),n[15]||(n[15]=a(" component in the ")),t(p,{icon:"iconfont icon-vuejs"}),n[16]||(n[16]=s("code",null,"App.vue",-1)),n[17]||(n[17]=a(" file. Inside any component, you can specifically target an element of your choice by using the ")),n[18]||(n[18]=s("code",null,"el",-1)),n[19]||(n[19]=a(" option, and it becomes mounted to the HTML DOM."))]),n[23]||(n[23]=s("hr",null,null,-1)),n[24]||(n[24]=s("h2",{id:"some-lessons",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#some-lessons"},[s("span",null,"Some lessons")])],-1)),n[25]||(n[25]=s("p",null,"It is refreshing to catch a glimpse of what happens behind the scenes with the virtual DOM in Vue.js. It is also important to recognize that whatever code we write is parsed by the virtual DOM, and things like directives and even events inside our template sections do not end up that way on the actual DOM.",-1)),n[26]||(n[26]=s("p",null,"Vue makes use of them, processes them, and the patch created is what gets to the actual DOM. You can easily inspect your app in your browser to confirm that you would not see any directives.",-1)),n[27]||(n[27]=s("hr",null,null,-1)),n[28]||(n[28]=s("h2",{id:"conclusion",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#conclusion"},[s("span",null,"Conclusion")])],-1)),n[29]||(n[29]=s("p",null,"This post has been an overview of how the virtual DOM works in Vue.js, with a few illustrations to follow and how to mount one. It is my hope that after reading this post, you appreciate the concepts behind the things you use every day whenever you create a Vue project. Happy hacking!",-1)),k(" TODO: add ARTICLE CARD "),t(i,c(u({title:"How the virtual DOM works in Vue.js",desc:"With this overview of how the virtual DOM works in Vue.js, you can learn exactly what is happening behind the scenes.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/how-the-virtual-dom-works-in-vue-js.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const x=m(y,[["render",O]]),H=JSON.parse('{"path":"/blog.logrocket.com/how-the-virtual-dom-works-in-vue-js.html","title":"How the virtual DOM works in Vue.js","lang":"en-US","frontmatter":{"lang":"en-US","title":"How the virtual DOM works in Vue.js","description":"Article(s) > How the virtual DOM works in Vue.js","icon":"iconfont icon-vuejs","category":["Node.js","Vue.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","vue","vuejs","vue-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How the virtual DOM works in Vue.js\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/how-the-virtual-dom-works-in-vue-js/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/how-the-virtual-dom-works-in-vue-js/wireframe-html-dom.png\\"],\\"datePublished\\":\\"2020-12-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Nwose Lotanna\\",\\"url\\":\\"https://blog.logrocket.com/author/nwoselotanna/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/how-the-virtual-dom-works-in-vue-js.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How the virtual DOM works in Vue.js"}],["meta",{"property":"og:description","content":"Article(s) > How the virtual DOM works in Vue.js"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/how-the-virtual-dom-works-in-vue-js/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/how-the-virtual-dom-works-in-vue-js/banner.png"}],["meta",{"name":"twitter:image:alt","content":"How the virtual DOM works in Vue.js"}],["meta",{"property":"article:author","content":"Nwose Lotanna"}],["meta",{"property":"article:tag","content":"vue-js"}],["meta",{"property":"article:tag","content":"vuejs"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2020-12-03T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How the virtual DOM works in Vue.js"},{"property":"og:description","content":"How the virtual DOM works in Vue.js"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/how-the-virtual-dom-works-in-vue-js.html"}]],"prev":"/programming/js-vue/articles/README.md","date":"2020-12-03T00:00:00.000Z","isOriginal":false,"author":[{"name":"Nwose Lotanna","url":"https://blog.logrocket.com/author/nwoselotanna/"}],"cover":"/assets/image/blog.logrocket.com/how-the-virtual-dom-works-in-vue-js/banner.png"},"git":{},"readingTime":{"minutes":4.19,"words":1257},"filePathRelative":"blog.logrocket.com/how-the-virtual-dom-works-in-vue-js.md","copyright":{"author":"Nwose Lotanna"}}');export{x as comp,H as data};
