import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as t,b as o,t as k,n as v,g as h,w as e,e as a,r as p,o as y}from"./app-BVguHYKu.js";const b={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},R={class:"table-of-contents"},x={href:"https://learn.microsoft.com/en-us/aspnet/core/performance/rate-limit?view=aspnetcore-7.0#create-chained-limiters",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/cristipufu/aspnetcore-redis-rate-limiting",target:"_blank",rel:"noopener noreferrer"};function P(c,n){const u=p("VPCard"),i=p("router-link"),d=p("SiteInfo"),l=p("RouteLink"),r=p("VPIcon");return y(),g("div",null,[s("h1",f,[s("a",w,[s("span",null,k(c.$frontmatter.title)+" 관련",1)])]),t(u,v(h({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",R,[s("ul",null,[s("li",null,[t(i,{to:"#built-in-rate-limiting-in-net-7"},{default:e(()=>n[0]||(n[0]=[a("Built-In Rate Limiting In .NET 7")])),_:1,__:[0]})]),s("li",null,[t(i,{to:"#rate-limiting-users-by-ip-address"},{default:e(()=>n[1]||(n[1]=[a("Rate Limiting Users By IP Address")])),_:1,__:[1]})]),s("li",null,[t(i,{to:"#rate-limiting-users-by-identity"},{default:e(()=>n[2]||(n[2]=[a("Rate Limiting Users By Identity")])),_:1,__:[2]})]),s("li",null,[t(i,{to:"#applying-rate-limting-on-the-reverse-proxy"},{default:e(()=>n[3]||(n[3]=[a("Applying Rate Limting On The Reverse Proxy")])),_:1,__:[3]})]),s("li",null,[t(i,{to:"#closing-thoughts"},{default:e(()=>n[4]||(n[4]=[a("Closing Thoughts")])),_:1,__:[4]})])])]),n[29]||(n[29]=s("hr",null,null,-1)),t(d,{name:"Advanced Rate Limiting Use Cases In .NET",desc:"Rate limiting is about restricting the number of requests to your application. It's usually applied within a specific time window or based on some other criteria. Rate limiting is practical for a few reasons: - Improves security - Guards against DDoS attacks - Prevents overloading of application servers - Reduces costs by preventing unnecessary resource consumption But you need to know how to implement it correctly, or you could grind your system to a halt.",url:"https://milanjovanovic.tech/blog/advanced-rate-limiting-use-cases-in-dotnet/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_051.png"}),n[30]||(n[30]=o(`<p><strong>Rate limiting</strong> is about restricting the number of requests to your application. It&#39;s usually applied within a specific time window or based on other criteria.</p><p>It&#39;s helpful for a few reasons:</p><ul><li>Improves security</li><li>Guards against DDoS attacks</li><li>Prevents overloading of application servers</li><li>Reduces costs by preventing unnecessary resource consumption</li></ul><p><strong>.NET 7</strong> shipped with a <strong>built-in rate limiter</strong>, but you need to know how to implement it correctly. Or you could grind your system to a halt - and we don&#39;t want that.</p><p>In this week&#39;s newsletter, I&#39;ll teach you:</p><ul><li>How to rate limit users by <strong>IP address</strong></li><li>How to rate limit users by their <strong>identity</strong></li><li>How to apply <strong>rate limiting</strong> on the <strong>reverse proxy</strong></li></ul><p>So let&#39;s dive in!</p><hr><h2 id="built-in-rate-limiting-in-net-7" tabindex="-1"><a class="header-anchor" href="#built-in-rate-limiting-in-net-7"><span>Built-In Rate Limiting In .NET 7</span></a></h2><p>Starting with .NET 7, we have access to built-in <strong>rate limiting middleware</strong> in the <code>Microsoft.AspNetCore.RateLimiting</code> namespace. The API is straightforward, and you can create a rate limit policy with a few lines of code.</p><p>We can use one of the four <strong>rate limiting algorithms</strong>:</p><ul><li>Fixed window</li><li>Sliding window</li><li>Token bucket</li><li>Concurrency</li></ul><p>Here&#39;s how to define a <strong>rate limit policy</strong> by calling the <code>AddTokenBucketLimiter</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddRateLimiter</span><span class="token punctuation">(</span>rateLimiterOptions <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span>RejectionStatusCode <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status429TooManyRequests<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    rateLimiterOptions<span class="token punctuation">.</span><span class="token function">AddTokenBucketLimiter</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">,</span> options <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        options<span class="token punctuation">.</span>TokenLimit <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span></span>
<span class="line">        options<span class="token punctuation">.</span>ReplenishmentPeriod <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        options<span class="token punctuation">.</span>TokensPerPeriod <span class="token operator">=</span> <span class="token number">700</span><span class="token punctuation">;</span></span>
<span class="line">        options<span class="token punctuation">.</span>AutoReplenishment <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you can reference the <code>token</code> rate limit policy on your endpoint or controller.</p><p>You also have to add the <code>RateLimitingMiddleware</code> to the request pipeline:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token function">UseRateLimiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,17)),s("p",null,[n[6]||(n[6]=a("You can learn more about ")),t(l,{to:"/milanjovanovic.tech/how-to-use-rate-limiting-in-aspnet-core.html"},{default:e(()=>n[5]||(n[5]=[s("strong",null,"rate limiting in .NET 7 here,",-1)])),_:1,__:[5]}),n[7]||(n[7]=a(" so I won't go deeper into the fundamentals."))]),n[31]||(n[31]=o(`<hr><h2 id="rate-limiting-users-by-ip-address" tabindex="-1"><a class="header-anchor" href="#rate-limiting-users-by-ip-address"><span>Rate Limiting Users By IP Address</span></a></h2><p>The approach I just showed you has a <strong>problem</strong> - the <strong>rate limit policy</strong> is global and <strong>applies to all users</strong>.</p><p>Most of the time, you don&#39;t want to do this. Rate limiting should be granular and apply to <strong>individual users</strong>.</p><p>Luckily, you can achieve this by creating a <code>RateLimitPartition</code>.</p><p>The <code>RateLimitPartition</code> has two components:</p><ul><li>Partition key</li><li>Rate limiter policy</li></ul><p>Here&#39;s how to define a rate limiter with a fixed window policy, and the <strong>partition key</strong> is the user&#39;s <strong>IP address</strong>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddRateLimiter</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;fixed-by-ip&quot;</span><span class="token punctuation">,</span> httpContext <span class="token operator">=&gt;</span></span>
<span class="line">        RateLimitPartition<span class="token punctuation">.</span><span class="token function">GetFixedWindowLimiter</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token named-parameter punctuation">partitionKey</span><span class="token punctuation">:</span> httpContext<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress<span class="token punctuation">?.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token named-parameter punctuation">factory</span><span class="token punctuation">:</span> _ <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FixedWindowRateLimiterOptions</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                PermitLimit <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">                Window <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Rate limiting by <strong>IP address</strong> can be a good layer of security for <strong>unauthenticated users</strong>. You don&#39;t know who is accessing your system and can&#39;t apply more granular rate limiting. This can help protect your system from malicious users trying to perform a DDoS attack.</p>`,10)),s("p",null,[n[9]||(n[9]=a("You can also ")),s("a",x,[t(r,{icon:"fa-brands fa-microsoft"}),n[8]||(n[8]=s("strong",null,"create chained limiters",-1))]),n[10]||(n[10]=a(" using the ")),n[11]||(n[11]=s("code",null,"CreateChained",-1)),n[12]||(n[12]=a(" API. It allows you to pass in multiple ")),n[13]||(n[13]=s("code",null,"PartitionedRateLimiter",-1)),n[14]||(n[14]=a(", which are combined into one ")),n[15]||(n[15]=s("code",null,"PartitionedRateLimiter",-1)),n[16]||(n[16]=a(". The chained limiter runs all the input limiters in sequence (one by one)."))]),n[32]||(n[32]=o(`<p>If your application is running behind a <strong>reverse proxy</strong>, you need to make sure not to rate limit the proxy IP address. Reverse proxies usually <strong>forward</strong> the original IP address with the <code>X-Forwarded-For</code> header. So you can use it as the <strong>partition key</strong>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddRateLimiter</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;fixed-by-ip&quot;</span><span class="token punctuation">,</span> httpContext <span class="token operator">=&gt;</span></span>
<span class="line">        RateLimitPartition<span class="token punctuation">.</span><span class="token function">GetFixedWindowLimiter</span><span class="token punctuation">(</span></span>
<span class="line">            httpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">&quot;X-Forwarded-For&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token named-parameter punctuation">factory</span><span class="token punctuation">:</span> _ <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FixedWindowRateLimiterOptions</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                PermitLimit <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">                Window <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="rate-limiting-users-by-identity" tabindex="-1"><a class="header-anchor" href="#rate-limiting-users-by-identity"><span>Rate Limiting Users By Identity</span></a></h2><p>If you require users to <strong>authenticate</strong> with your API, you can determine who the current is. Then you can use the user&#39;s <strong>identity</strong> as the <strong>partition key</strong> for a <code>RateLimitPartition</code>.</p><p>Here&#39;s how you would create such a rate limit policy:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddRateLimiter</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;fixed-by-user&quot;</span><span class="token punctuation">,</span> httpContext <span class="token operator">=&gt;</span></span>
<span class="line">        RateLimitPartition<span class="token punctuation">.</span><span class="token function">GetFixedWindowLimiter</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token named-parameter punctuation">partitionKey</span><span class="token punctuation">:</span> httpContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Identity<span class="token punctuation">?.</span>Name<span class="token punctuation">?.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token named-parameter punctuation">factory</span><span class="token punctuation">:</span> _ <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FixedWindowRateLimiterOptions</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                PermitLimit <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">                Window <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I&#39;m using the <code>User.Identity</code> value on the <code>HttpContext</code> to get the current user&#39;s <code>Name</code> claim. This usually corresponds to the <code>sub</code> claim inside a JWT - which is the user identifier.</p><hr><h2 id="applying-rate-limting-on-the-reverse-proxy" tabindex="-1"><a class="header-anchor" href="#applying-rate-limting-on-the-reverse-proxy"><span>Applying Rate Limting On The Reverse Proxy</span></a></h2><p>In a robust implementation, you want to <strong>rate limit</strong> on the <strong>reverse proxy</strong> level before the request hits your API. And if you have a distributed system, this is a requirement. Otherwise, your system wouldn&#39;t function correctly.</p><p>There are many reverse proxy implementations to choose from.</p>`,12)),s("p",null,[n[18]||(n[18]=s("strong",null,"YARP",-1)),n[19]||(n[19]=a(" is a reverse proxy with excellent .NET integration. Not surprising since it was written in C#. You can learn more about ")),t(l,{to:"/milanjovanovic.tech/implementing-an-api-gateway-for-microservices-with-yarp.html"},{default:e(()=>n[17]||(n[17]=[s("strong",null,"building an API Gateway with YARP here.",-1)])),_:1,__:[17]})]),n[33]||(n[33]=o(`<p>To implement rate limiting on the reverse proxy with <strong>YARP</strong> you need to:</p><ul><li>Define a rate limit policy (covered in previous examples)</li><li>Configure the <code>RateLimiterPolicy</code> for the route in YARP settings</li></ul><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token property">&quot;products-route&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;ClusterId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;products-cluster&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;RateLimiterPolicy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sixty-per-minute-fixed&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;Match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;Path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/products/{**catch-all}&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;Transforms&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token property">&quot;PathPattern&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{**catch-all}&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[24]||(n[24]=a("The built-in rate limiter middleware uses an ")),n[25]||(n[25]=s("strong",null,"in-memory",-1)),n[26]||(n[26]=a(" store to track the number of requests. If you want to run your reverse proxy in a high-availability setup, you will need to use a ")),n[27]||(n[27]=s("strong",null,"distributed cache",-1)),n[28]||(n[28]=a(". A nice option to look into is using a ")),s("a",I,[n[20]||(n[20]=s("strong",null,"Redis backplane for rate limiting.",-1)),n[21]||(n[21]=a(" (")),t(r,{icon:"iconfont icon-github"}),n[22]||(n[22]=s("code",null,"cristipufu/aspnetcore-redis-rate-limiting",-1)),n[23]||(n[23]=a(")"))])]),n[34]||(n[34]=o('<hr><h2 id="closing-thoughts" tabindex="-1"><a class="header-anchor" href="#closing-thoughts"><span>Closing Thoughts</span></a></h2><p>With the <code>PartitionedRateLimiter</code> you can easily create granular rate limit policies.</p><p>The two common approaches are:</p><ul><li>Rate limiting by <strong>IP address</strong></li><li>Rate limiting by the <strong>user identifier</strong></li></ul><p>I was really excited to see the .NET team ship rate limiting. But, the current implementation has its shortcomings. The main issue is that it only works <strong>in memory</strong>. For a <strong>distributed</strong> solution, you need to implement something yourself or use an external library.</p><p>You can use the <strong>YARP</strong> reverse proxy to build robust and scalable distributed systems. And it only takes a few lines of code to add <strong>rate limiting</strong> on the reverse proxy level. I&#39;m using it extensively in my systems.</p><p>Thanks for reading.</p><p>And stay awesome!</p>',9))])}const A=m(b,[["render",P]]),q=JSON.parse('{"path":"/milanjovanovic.tech/advanced-rate-limiting-use-cases-in-dotnet.html","title":"Advanced Rate Limiting Use Cases In .NET","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Advanced Rate Limiting Use Cases In .NET","description":"Article(s) > Advanced Rate Limiting Use Cases In .NET","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Advanced Rate Limiting Use Cases In .NET\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_051.png\\"],\\"datePublished\\":\\"2023-08-19T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/advanced-rate-limiting-use-cases-in-dotnet.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Advanced Rate Limiting Use Cases In .NET"}],["meta",{"property":"og:description","content":"Article(s) > Advanced Rate Limiting Use Cases In .NET"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_051.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_051.png"}],["meta",{"name":"twitter:image:alt","content":"Advanced Rate Limiting Use Cases In .NET"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-08-19T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Advanced Rate Limiting Use Cases In .NET"},{"property":"og:description","content":"Advanced Rate Limiting Use Cases In .NET"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/advanced-rate-limiting-use-cases-in-dotnet.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-08-19T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_051.png"},"git":{},"readingTime":{"minutes":4.01,"words":1203},"filePathRelative":"milanjovanovic.tech/advanced-rate-limiting-use-cases-in-dotnet.md","copyright":{"author":"Milan Jovanović"}}');export{A as comp,q as data};
