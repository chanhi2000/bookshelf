import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as a,b as h,a as g,t as b,n as i,g as p,w as l,e,r as c,o as f}from"./app-BVguHYKu.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},I={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},C={class:"hint-container info"},P={class:"hint-container info"},D={href:"https://github.com/CodeMazeBlog/solid-principles-csharp/tree/interface-segregation-principle",target:"_blank",rel:"noopener noreferrer"};function L(u,n){const t=c("VPCard"),o=c("router-link"),r=c("SiteInfo"),d=c("VPIcon"),m=c("RouteLink");return f(),v("div",null,[s("h1",w,[s("a",I,[s("span",null,b(u.$frontmatter.title)+" 관련",1)])]),a(t,i(p({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[a(o,{to:"#starting-example"},{default:l(()=>n[0]||(n[0]=[e("Starting Example")])),_:1,__:[0]})]),s("li",null,[a(o,{to:"#implementing-the-isp-in-the-current-solution"},{default:l(()=>n[1]||(n[1]=[e("Implementing the ISP In the Current Solution")])),_:1,__:[1]})]),s("li",null,[a(o,{to:"#what-are-the-benefits-of-the-interface-segregation-principle"},{default:l(()=>n[2]||(n[2]=[e("What are the Benefits of the Interface Segregation Principle")])),_:1,__:[2]})]),s("li",null,[a(o,{to:"#conclusion"},{default:l(()=>n[3]||(n[3]=[e("Conclusion")])),_:1,__:[3]})])])]),n[14]||(n[14]=s("hr",null,null,-1)),a(r,{name:"SOLID Principles in C# - Interface Segregation Principle",desc:"In this article you are going to learn about Interface Segregation Principle, how to implement it and what are the benefits of its implementation.",url:"https://code-maze.com/interface-segregation-principle/",logo:"/assets/image/code-maze.com/favicon.png",preview:"/assets/image/interface-segregation-principle/banner.png"}),n[15]||(n[15]=s("p",null,"The Interface Segregation Principle states that no client should be forced to depend on methods it does not use. So, this is the basic definition which we can read in many different articles, but what does this really mean?",-1)),n[16]||(n[16]=s("p",null,"Let’s imagine that we are starting a new feature on our project. We start with some code and from that code, an interface emerges with the required declarations. Soon after, the customer decides that they want another feature that is similar to the previous one and we decide to implement the same interface in another class. But now, as a consequence, we don’t need all the methods from that interface, just some of them. Of course, we have to implement all the methods, which we shouldn’t have to, and that’s the problem and where the ISP helps us a lot.",-1)),n[17]||(n[17]=s("p",null,"Basically, the ISP states that we should reduce code objects down to the smallest required implementation thus creating interfaces with only required declarations. As a result, an interface that has a lot of different declarations should be split up into smaller interfaces.",-1)),n[18]||(n[18]=s("p",null,"Let’s see how this looks in an example.",-1)),s("div",C,[n[4]||(n[4]=s("p",{class:"hint-container-title"},"Series",-1)),a(t,i(p({title:"SOLID Principles in C# – Single Responsibility Principle",desc:"In this article you will learn how to implement Single Responsibility Principle (SRP) in your code thus making it better, readable and maintainable as well.",link:"/code-maze.com/single-responsibility-principle.md",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16),a(t,i(p({title:"SOLID Principles in C# – Open Closed Principle",desc:"In this article you will learn about Open Closed Principle, how to implement it step by step and why it is important while developing a project.",link:"/code-maze.com/open-closed-principle.md",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16),a(t,i(p({title:"SOLID Principles in C# – Liskov Substitution Principle",desc:"In this article you will learn more about Liskov Substitution Principle, how to achieve it in your code and why should we use it.",link:"/code-maze.com/liskov-substitution-principle.md",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16),a(t,i(p({title:"SOLID Principles in C# – Interface Segregation Principle",desc:"In this article you are going to learn about Interface Segregation Principle, how to implement it and what are the benefits of its implementation.",link:"/code-maze.com/interface-segregation-principle.md",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16),a(t,i(p({title:"SOLID Principles in C# – Dependency Inversion Principle",desc:"In this article you are going to learn about Dependency Inversion Principle, how to implement this principle and what are the benefits of implementation.",link:"/code-maze.com/dependency-inversion-principle.md",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16)]),s("div",P,[n[10]||(n[10]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[8]||(n[8]=e("To download the source code for this project, check out the ")),s("a",D,[n[5]||(n[5]=e("Interface Segregation Principle Project Source Code (")),a(d,{icon:"iconfont icon-github"}),n[6]||(n[6]=s("code",null,"CodeMazeBlog/solid-principles-csharp",-1)),n[7]||(n[7]=e(")"))]),n[9]||(n[9]=e("."))]),a(r,{name:"CodeMazeBlog/solid-principles-csharp at interface-segregation-principle",desc:"This repository contains source code for the SOLID principles in C# on Code Maze blog - CodeMazeBlog/solid-principles-csharp at interface-segregation-principle",url:"https://github.com/CodeMazeBlog/solid-principles-csharp/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/ea17b32ee72d286321112ce49503fb8ba1f177691cc01f5cf36da56bafc48bec/CodeMazeBlog/solid-principles-csharp"})]),s("p",null,[n[12]||(n[12]=e("To read about other SOLID principles, check out our ")),a(m,{to:"/code-maze.com/solid-principles.html"},{default:l(()=>n[11]||(n[11]=[s("strong",null,"SOLID Principles page",-1)])),_:1,__:[11]}),n[13]||(n[13]=e("."))]),n[19]||(n[19]=h(`<hr><h2 id="starting-example" tabindex="-1"><a class="header-anchor" href="#starting-example"><span>Starting Example</span></a></h2><p>There are vehicles that we can drive, and there are those we can fly with. But there are cars we can drive and fly (yes those are on sale). So, we want to create a code structure which supports all the actions for a single vehicle, and we are going to start with an interface:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IVehicle</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now if we want to develop a behavior for a multifunctional car, this interface is going to be perfect for us:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiFunctionalCar</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IVehicle</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//actions to start driving car</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Drive a multifunctional car&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//actions to start flying</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Fly a multifunctional car&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is working great. Our interface covers all the required actions.</p><p>But now, we want to implement the <code>Car</code> class and the <code>Airplane</code> class as well:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IVehicle</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//actions to drive a car</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Driving a car&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Airplane</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IVehicle</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//actions to fly a plane</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Flying a plane&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can see what the problem with the <code>IVehicle</code> interface is. It contains only one required declaration per each class. The other method, which is not required, is implemented to throw an exception. That is a bad idea because we should be writing our code to do something and not just to throw exceptions. Furthermore, we would have to put an additional effort to document our class so that users know why they shouldn’t be using the not implemented method. A really bad idea.</p><p>So, in order to fix this problem, we are going to do some refactoring to our code and write it in accordance to ISP.</p><hr><h2 id="implementing-the-isp-in-the-current-solution" tabindex="-1"><a class="header-anchor" href="#implementing-the-isp-in-the-current-solution"><span>Implementing the ISP In the Current Solution</span></a></h2><p>The first thing we are going to do is to divide our <code>IVehicle</code> interface:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICar</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAirplane</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As a result, our classes can implement only the methods they need:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICar</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//actions to drive a car</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Driving a car&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Airplane</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IAirplane</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//actions to fly a plane</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Flying a plane&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiFunctionalCar</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICar</span><span class="token punctuation">,</span> <span class="token class-name">IAirplane</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//actions to start driving car</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Drive a multifunctional car&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//actions to start flying</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Fly a multifunctional car&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can even use a higher level interface if we want in a situation where a single class implements more than one interface:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMultiFunctionalVehicle</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICar</span><span class="token punctuation">,</span> <span class="token class-name">IAirplane</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once we have our higher level interface, we can implement it in different ways. The first one is to implement the required methods:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiFunctionalCar</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMultiFunctionalVehicle</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//actions to start driving car</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Drive a multifunctional car&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//actions to start flying</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Fly a multifunctional car&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or if we already have implemented the Car class and the Airplane class, we can use them inside our class by using the decorator pattern:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiFunctionalCar</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMultiFunctionalVehicle</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ICar</span> _car<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IAirplane</span> _airplane<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">MultiFunctionalCar</span><span class="token punctuation">(</span><span class="token class-name">ICar</span> car<span class="token punctuation">,</span> <span class="token class-name">IAirplane</span> airplane<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _car <span class="token operator">=</span> car<span class="token punctuation">;</span></span>
<span class="line">        _airplane <span class="token operator">=</span> airplane<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _car<span class="token punctuation">.</span><span class="token function">Drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _airplane<span class="token punctuation">.</span><span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="what-are-the-benefits-of-the-interface-segregation-principle" tabindex="-1"><a class="header-anchor" href="#what-are-the-benefits-of-the-interface-segregation-principle"><span>What are the Benefits of the Interface Segregation Principle</span></a></h2><p>We can see from the example above, that smaller interface is a lot easier to implement due to not having to implement methods that our class doesn’t need.</p><p>Of course, due to the simplicity of our example, we can make a single interface with a single method inside it. But in real-world projects, we often come up with an interface with multiple methods, which is perfectly normal as long as those methods are highly related to each other. Therefore, we make sure that our class needs all these actions to complete its task.</p><p>Another benefit is that the Interface Segregation Principle increases the readability and maintainability of our code. We are reducing our class implementation only to required actions without any additional or unnecessary code.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>To sum this article up, we should put an effort into creating smaller interfaces while developing our project. Yes, we may end up with a lot of different interfaces in the end but from our point of view, this is much better than having a few large interfaces that can force us to implement non-required methods in our classes.</p>`,35)),g(" TODO: add ARTICLE CARD "),a(t,i(p({title:"SOLID Principles in C# – Interface Segregation Principle",desc:"In this article you are going to learn about Interface Segregation Principle, how to implement it and what are the benefits of its implementation.",link:"https://chanhi2000.github.io/bookshelf/code-maze.com/interface-segregation-principle.html",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16)])}const q=k(y,[["render",L]]),O=JSON.parse('{"path":"/code-maze.com/interface-segregation-principle.html","title":"SOLID Principles in C# – Interface Segregation Principle","lang":"en-US","frontmatter":{"lang":"en-US","title":"SOLID Principles in C# – Interface Segregation Principle","description":"Article(s) > SOLID Principles in C# – Interface Segregation Principle","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","code-maze.com","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SOLID Principles in C# – Interface Segregation Principle\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/interface-segregation-principle/banner.png\\"],\\"datePublished\\":\\"2019-01-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marinko Spasojević\\",\\"url\\":\\"https://code-maze.com/author/marinko/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/interface-segregation-principle.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"SOLID Principles in C# – Interface Segregation Principle"}],["meta",{"property":"og:description","content":"Article(s) > SOLID Principles in C# – Interface Segregation Principle"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/interface-segregation-principle/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/interface-segregation-principle/banner.png"}],["meta",{"name":"twitter:image:alt","content":"SOLID Principles in C# – Interface Segregation Principle"}],["meta",{"property":"article:author","content":"Marinko Spasojević"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2019-01-21T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > SOLID Principles in C# – Interface Segregation Principle"},{"property":"og:description","content":"SOLID Principles in C# – Interface Segregation Principle"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/interface-segregation-principle.html"}]],"prev":"/programming/cs/articles/README.md","date":"2019-01-21T00:00:00.000Z","isOriginal":false,"author":[{"name":"Marinko Spasojević","url":"https://code-maze.com/author/marinko/"}],"cover":"/assets/image/code-maze.com/interface-segregation-principle/banner.png"},"git":{},"readingTime":{"minutes":5.01,"words":1504},"filePathRelative":"code-maze.com/interface-segregation-principle.md","copyright":{"author":"Marinko Spasojević"}}');export{q as comp,O as data};
