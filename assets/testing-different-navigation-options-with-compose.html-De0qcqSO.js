import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as a,b as c,a as h,t as g,n as u,g as d,w as o,e as t,r as l,o as b}from"./app-BVguHYKu.js";const f={},w={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},T={class:"table-of-contents"},x={href:"https://proandroiddev.com/testing-different-navigation-options-with-compose-80f180ee10e6#related-blog-posts",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/eevajonnapanula/graph-accessibility-example/commit/e693b4ee915d9ba2b50be7b4783a9fa91c17aa62",target:"_blank",rel:"noopener noreferrer"},C={href:"https://developer.android.com/reference/kotlin/androidx/compose/ui/test/package-summary#(androidx.compose.ui.test.SemanticsNodeInteraction).performKeyInput(kotlin.Function1)",target:"_blank",rel:"noopener noreferrer"},A={class:"hint-container info"},I={href:"https://proandroiddev.com/testing-different-navigation-options-with-compose-80f180ee10e6",target:"_blank",rel:"noopener noreferrer"};function D(m,n){const r=l("VPCard"),i=l("router-link"),e=l("SiteInfo"),p=l("VPIcon");return b(),k("div",null,[s("h1",w,[s("a",y,[s("span",null,g(m.$frontmatter.title)+" 관련",1)])]),a(r,u(d({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",T,[s("ul",null,[s("li",null,[a(i,{to:"#about-the-code-we-re-using"},{default:o(()=>n[0]||(n[0]=[t("About the Code We’re Using")])),_:1,__:[0]}),s("ul",null,[s("li",null,[a(i,{to:"#setting-up-the-tests"},{default:o(()=>n[1]||(n[1]=[t("Setting Up The Tests")])),_:1,__:[1]})]),s("li",null,[a(i,{to:"#touch-navigation"},{default:o(()=>n[2]||(n[2]=[t("Touch Navigation")])),_:1,__:[2]})]),s("li",null,[a(i,{to:"#keyboard-navigation"},{default:o(()=>n[3]||(n[3]=[t("Keyboard Navigation")])),_:1,__:[3]})]),s("li",null,[a(i,{to:"#navigation-using-on-screen-buttons"},{default:o(()=>n[4]||(n[4]=[t("Navigation Using On-Screen Buttons")])),_:1,__:[4]})])])]),s("li",null,[a(i,{to:"#wrapping-up"},{default:o(()=>n[5]||(n[5]=[t("Wrapping Up")])),_:1,__:[5]}),s("ul",null,[s("li",null,[a(i,{to:"#links-in-the-blog-post"},{default:o(()=>n[6]||(n[6]=[t("Links in the Blog Post")])),_:1,__:[6]})]),s("li",null,[a(i,{to:"#related-blog-posts"},{default:o(()=>n[7]||(n[7]=[t("Related Blog Posts")])),_:1,__:[7]})])])])])]),n[26]||(n[26]=s("hr",null,null,-1)),a(e,{name:"Testing Different Navigation Options with Compose",desc:"One part of creating accessible Android apps is to provide alternative navigation options. Some examples include touch (or pointer) input, keyboard navigation, switch navigation, and screen reader navigation. But how can you write tests for these different ways of navigation?",url:"https://droidcon.com/testing-different-navigation-options-with-compose",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",preview:"https://droidcon.com/wp-content/uploads/2024/12/0_1PLUSpvlLu3EWvqG-1024x538.webp"}),n[27]||(n[27]=s("figure",null,[s("img",{src:"https://droidcon.com/wp-content/uploads/2024/12/0_1PLUSpvlLu3EWvqG-1024x538.webp",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),n[28]||(n[28]=s("p",null,"One part of creating accessible Android apps is to provide alternative navigation options. Some examples include touch (or pointer) input, keyboard navigation, switch navigation, and screen reader navigation. But how can you write tests for these different ways of navigation?",-1)),n[29]||(n[29]=s("p",null,"In this blog post, I’ll share some examples of how to do that. I’m using an old demo project about making graphs more accessible and demonstrating how to write tests for the different elements I’ve explained with that demo project.",-1)),n[30]||(n[30]=s("hr",null,null,-1)),n[31]||(n[31]=s("h2",{id:"about-the-code-we-re-using",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#about-the-code-we-re-using"},[s("span",null,"About the Code We’re Using")])],-1)),n[32]||(n[32]=s("p",null,"As mentioned, I’m using an old demo project as the basis for the tests. In short, it contains a graph displaying data and is navigable with touch input, keyboard, switch device, and screen reader. The additional buttons for changing the highlighted sections in the chart also work for someone who has, for example, tremors in their hands or reduced dexterity.",-1)),s("p",null,[n[11]||(n[11]=t("If you want to learn more about how I built the UI and the reasons behind the decisions, I’ve added links to all the blog posts in the")),s("a",x,[n[8]||(n[8]=t("Related Blog Posts (")),a(p,{icon:"fa-brands fa-medium"}),n[9]||(n[9]=s("code",null,"proandroiddev",-1)),n[10]||(n[10]=t(")"))]),n[12]||(n[12]=t("section."))]),n[33]||(n[33]=c(`<p>Alright, let’s get to writing tests!</p><h3 id="setting-up-the-tests" tabindex="-1"><a class="header-anchor" href="#setting-up-the-tests"><span>Setting Up The Tests</span></a></h3><p>Let’s first set up the tests by creating a test class in the<code>androidTest</code>-package, defining<code>composeTestRule</code>, and adding a setup function that runs before each test:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="GraphScreenTest.kt"><span>GraphScreenTest.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> GraphScreenTest <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation builtin">@get:Rule</span></span>
<span class="line">    <span class="token keyword">val</span> composeTestRule <span class="token operator">=</span> <span class="token function">createComposeRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation builtin">@Before</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">setupTests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        composeTestRule<span class="token punctuation">.</span><span class="token function">setContent</span> <span class="token punctuation">{</span></span>
<span class="line">            GraphExampleTheme <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">GraphScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Another part of the setup phase is deciding how we will retrieve the elements we use for testing. In this case, I decided to use test tags for simplicity, and I’ve defined a<code>TestTags</code>-object for sharing between the UI and tests. This solution is straightforward and might not be your choice in a production app, but as this is a demo, it uses the most explicit option.</p>`,5)),s("p",null,[n[16]||(n[16]=t("You can find")),s("a",N,[n[13]||(n[13]=t("all the changes from this blog post in this commit (")),a(p,{icon:"iconfont icon-github"}),n[14]||(n[14]=s("code",null,"eevajonnapanula/graph-accessibility-example",-1)),n[15]||(n[15]=t(")"))]),n[17]||(n[17]=t("."))]),a(e,{name:"Add tests for alternative navigation options (#7) · eevajonnapanula/graph-accessibility-example@e693b4e",desc:"",url:"https://github.com/eevajonnapanula/graph-accessibility-example/commit/e693b4ee915d9ba2b50be7b4783a9fa91c17aa62/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/cc73352c9ef265973c211a41fea42f9669e49175ef8530206da5424e1c91bd16/eevajonnapanula/graph-accessibility-example/commit/e693b4ee915d9ba2b50be7b4783a9fa91c17aa62"}),n[34]||(n[34]=c(`<h3 id="touch-navigation" tabindex="-1"><a class="header-anchor" href="#touch-navigation"><span>Touch Navigation</span></a></h3><p>The first tests we’re going to write are about touch interaction. First, here’s a short video of how things work in the UI when a user uses their finger to drag over the chart:</p><p>So, when a user moves their pointer input around in the graph, a box with values appears in the bottom right corner of the UI, displaying the values for the selected year.</p><p>Let’s first get the elements we’re going to use in the test:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Test</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">touchInteractionsWorkCorrectly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> labels <span class="token operator">=</span> </span>
<span class="line">        composeTestRule<span class="token punctuation">.</span><span class="token function">onNode</span><span class="token punctuation">(</span><span class="token function">hasTestTag</span><span class="token punctuation">(</span>TestTags<span class="token punctuation">.</span>labelsTestTag<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> chart <span class="token operator">=</span> </span>
<span class="line">        composeTestRule<span class="token punctuation">.</span><span class="token function">onNode</span><span class="token punctuation">(</span><span class="token function">hasTestTag</span><span class="token punctuation">(</span>TestTags<span class="token punctuation">.</span>chartTestTag<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Why these two? First, the<code>labels</code>variable is the one we’re using to check if things work correctly. It contains the information that changes, so by checking the year, we can ensure that navigation works correctly. Second, the chart is the one we’re interacting with.</p><p>The actual tests look like this:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Test</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">touchInteractionsWorkCorrectly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    labels<span class="token punctuation">.</span><span class="token function">assertIsNotDisplayed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Navigate forward</span></span>
<span class="line">    chart<span class="token punctuation">.</span><span class="token function">performTouchInput</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">swipeRight</span><span class="token punctuation">(</span>startX <span class="token operator">=</span> <span class="token number">0f</span><span class="token punctuation">,</span> endX <span class="token operator">=</span> <span class="token number">30f</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    labels<span class="token punctuation">.</span><span class="token function">assertIsDisplayed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    labels<span class="token punctuation">.</span><span class="token function">onChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">assertAny</span><span class="token punctuation">(</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;2015&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Navigate forward</span></span>
<span class="line">    chart<span class="token punctuation">.</span><span class="token function">performTouchInput</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">swipeRight</span><span class="token punctuation">(</span>startX <span class="token operator">=</span> <span class="token number">30f</span><span class="token punctuation">,</span> endX <span class="token operator">=</span> <span class="token number">70f</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    labels<span class="token punctuation">.</span><span class="token function">onChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">assertAny</span><span class="token punctuation">(</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;2016&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We first assert that the labels are not visible because that’s how the UI is before navigation actions. After that, we perform touch input by swiping right, asserting that the correct year (in this case, “2015”) is displayed in the labels component.</p><p>The numbers we use for<code>swipeRight</code>are based on the code, and the 35-pixel swipe is still inside the area used in the code for deciding what year is shown. In the same way, the second swipe from 30 to 70 moves from the first year to the second year.</p><h3 id="keyboard-navigation" tabindex="-1"><a class="header-anchor" href="#keyboard-navigation"><span>Keyboard Navigation</span></a></h3><p>Alright, we’ve written a test for touch/pointer input navigation. Next, we want to write tests for keyboard navigation.</p><p>The following video demonstrates what the keyboard navigation looks like on the graph when a user presses the “next” button (right arrow in this case) to navigate forward in the graph:</p><p>To test the keyboard navigation, we’ll need a similar setup as for the touch/pointer interactions:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Test</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">keyboardNavigationWorksCorrectly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> labels <span class="token operator">=</span> </span>
<span class="line">        composeTestRule<span class="token punctuation">.</span><span class="token function">onNode</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token function">hasTestTag</span><span class="token punctuation">(</span>TestTags<span class="token punctuation">.</span>labelsTestTag<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> chart <span class="token operator">=</span> </span>
<span class="line">        composeTestRule<span class="token punctuation">.</span><span class="token function">onNode</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token function">hasTestTag</span><span class="token punctuation">(</span>TestTags<span class="token punctuation">.</span>chartTestTag<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    labels<span class="token punctuation">.</span><span class="token function">assertIsNotDisplayed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For this test, we define the same variables (<code>labels</code>and<code>chart</code>) and then assert that the labels component is not displayed.</p>`,16)),s("p",null,[n[19]||(n[19]=t("Next, we’ll need to perform some keyboard input actions. We can do that with")),s("a",C,[a(p,{icon:"fa-brands fa-android"}),n[18]||(n[18]=t("performKeyInput"))]),n[20]||(n[20]=t("and")),n[21]||(n[21]=s("code",null,"pressKey",-1)),n[22]||(n[22]=t(":"))]),n[35]||(n[35]=c(`<div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Test</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">keyboardNavigationWorksCorrectly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Navigate forward</span></span>
<span class="line">    chart<span class="token punctuation">.</span><span class="token function">performKeyInput</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">pressKey</span><span class="token punctuation">(</span>Key<span class="token punctuation">.</span>DirectionRight<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">pressKey</span><span class="token punctuation">(</span>Key<span class="token punctuation">.</span>DirectionRight<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">pressKey</span><span class="token punctuation">(</span>Key<span class="token punctuation">.</span>DirectionRight<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">pressKey</span><span class="token punctuation">(</span>Key<span class="token punctuation">.</span>DirectionRight<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">pressKey</span><span class="token punctuation">(</span>Key<span class="token punctuation">.</span>DirectionRight<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">pressKey</span><span class="token punctuation">(</span>Key<span class="token punctuation">.</span>DirectionRight<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    labels<span class="token punctuation">.</span><span class="token function">onChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">assertAny</span><span class="token punctuation">(</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;2020&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Navigate back</span></span>
<span class="line">    chart<span class="token punctuation">.</span><span class="token function">performKeyInput</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">pressKey</span><span class="token punctuation">(</span>Key<span class="token punctuation">.</span>DirectionLeft<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">pressKey</span><span class="token punctuation">(</span>Key<span class="token punctuation">.</span>DirectionLeft<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">pressKey</span><span class="token punctuation">(</span>Key<span class="token punctuation">.</span>DirectionLeft<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    labels<span class="token punctuation">.</span><span class="token function">onChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">assertAny</span><span class="token punctuation">(</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;2017&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These lines assert that the keyboard navigation works correctly. The last thing to test in the context of this blog post is the on-screen button navigation.</p><h3 id="navigation-using-on-screen-buttons" tabindex="-1"><a class="header-anchor" href="#navigation-using-on-screen-buttons"><span>Navigation Using On-Screen Buttons</span></a></h3><p>The previous videos didn’t display the on-screen buttons because they were recorded before adding them. Here’s a video with the buttons and how the navigation works:</p><p>So, to test, again, we’ll have similar — but not exactly the same! — setup:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Test</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">buttonNavigationWorksCorrectly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> labels <span class="token operator">=</span> </span>
<span class="line">        composeTestRule<span class="token punctuation">.</span><span class="token function">onNode</span><span class="token punctuation">(</span><span class="token function">hasTestTag</span><span class="token punctuation">(</span>TestTags<span class="token punctuation">.</span>labelsTestTag<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> leftButton <span class="token operator">=</span></span>
<span class="line">        composeTestRule<span class="token punctuation">.</span><span class="token function">onNode</span><span class="token punctuation">(</span><span class="token function">hasTestTag</span><span class="token punctuation">(</span>TestTags<span class="token punctuation">.</span>leftButtonTestTag<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> rightButton <span class="token operator">=</span> </span>
<span class="line">        composeTestRule<span class="token punctuation">.</span><span class="token function">onNode</span><span class="token punctuation">(</span><span class="token function">hasTestTag</span><span class="token punctuation">(</span>TestTags<span class="token punctuation">.</span>rightButtonTestTag<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    labels<span class="token punctuation">.</span><span class="token function">assertIsNotDisplayed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This time, besides getting the labels, we don’t need the chart component at all. Instead, we’ll get a reference to both buttons on the screen.</p><p>Next, we want to navigate forward by clicking the button and asserting that the year on the label is correct. After that, we do some forward and backward navigation to ensure both buttons work correctly:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Test</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">buttonNavigationWorksCorrectly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Navigate forward</span></span>
<span class="line">    rightButton<span class="token punctuation">.</span><span class="token function">performClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    labels<span class="token punctuation">.</span><span class="token function">assertIsDisplayed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    labels<span class="token punctuation">.</span><span class="token function">onChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">assertAny</span><span class="token punctuation">(</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;2015&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Navigate forward</span></span>
<span class="line">    rightButton<span class="token punctuation">.</span><span class="token function">performClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    rightButton<span class="token punctuation">.</span><span class="token function">performClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    rightButton<span class="token punctuation">.</span><span class="token function">performClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    rightButton<span class="token punctuation">.</span><span class="token function">performClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Navigate back</span></span>
<span class="line">    leftButton<span class="token punctuation">.</span><span class="token function">performClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    leftButton<span class="token punctuation">.</span><span class="token function">performClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    labels<span class="token punctuation">.</span><span class="token function">onChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">assertAny</span><span class="token punctuation">(</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;2017&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And this is how we can test the on-screen button navigation in the graph.</p><hr><h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="#wrapping-up"><span>Wrapping Up</span></a></h2><p>In this blog post, we’ve written tests for three different navigation styles: Touch/pointer input, keyboard navigation, and on-screen button navigation. This way, we’ve tested that users using different navigation methods and tools can use the app.</p><p>Do you test for these interactions and navigation alternatives? If so, do you have any tips on testing them?</p><h3 id="links-in-the-blog-post" tabindex="-1"><a class="header-anchor" href="#links-in-the-blog-post"><span>Links in the Blog Post</span></a></h3>`,15)),a(e,{name:"Add tests for alternative navigation options (#7) · eevajonnapanula/graph-accessibility-example@e693b4e",desc:"",url:"https://github.com/eevajonnapanula/graph-accessibility-example/commit/e693b4ee915d9ba2b50be7b4783a9fa91c17aa62/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/cc73352c9ef265973c211a41fea42f9669e49175ef8530206da5424e1c91bd16/eevajonnapanula/graph-accessibility-example/commit/e693b4ee915d9ba2b50be7b4783a9fa91c17aa62"}),a(e,{name:"androidx.compose.ui.test | Android Developers",desc:"In this page, you'll find documentation for types, properties, and functions available in the androidx.compose.ui.test package.",url:"https://developer.android.com/reference/kotlin/androidx/compose/ui/test/package-summary#(androidx.compose.ui.test.SemanticsNodeInteraction).performKeyInput(kotlin.Function1)",logo:"https://gstatic.com/devrel-devsite/prod/v5ab6fd0ad9c02b131b4d387b5751ac2c3616478c6dd65b5e931f0805efa1009c/android/images/favicon.svg",preview:"https://developer.android.com/static/images/social/android-developers.png"}),n[36]||(n[36]=s("h3",{id:"related-blog-posts",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#related-blog-posts"},[s("span",null,"Related Blog Posts")])],-1)),a(e,{name:"Accessibility Tests in Compose — Name, Role, Value",desc:"In this blog post, we’ll look into how to write tests for custom components for programmatically available name, role, and value.",url:"https://proandroiddev.com/accessibility-tests-in-compose-name-role-value-7fc70bfb674a/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1200/0*TTBqt052V3mPJy-1.png"}),a(e,{name:"More Accessible Graphs with Jetpack Compose Part 1: Adding Content Description",desc:"In this blog post, I explain how to add content descriptions for a line graph.",url:"https://proandroiddev.com/more-accessible-graphs-with-jetpack-compose-part-1-adding-content-description-29567d6e2724/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1200/1*VhvV7VYoqf9Gvec6xX-tUQ.png"}),a(e,{name:"More Accessible Graphs with Jetpack Compose Part 2: Adding Keyboard Interaction",desc:"Welcome to the second episode of “More Accessible Graphs with Jetpack Compose” — in this blog post, we’ll continue from where we left off…",url:"https://proandroiddev.com/more-accessible-graphs-with-jetpack-compose-part-2-adding-keyboard-interaction-64202cc8789b/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1200/1*ruhkBPzq0NszW4fGiR0Lww.png"}),a(e,{name:"More Accessible Graphs with Jetpack Compose Part 3: Differentiating without Color",desc:"Making graphs accessible on Android requires some work. The third post in series is all about differentiating data by other means than…",url:"https://proandroiddev.com/more-accessible-graphs-with-jetpack-compose-part-3-differentiating-without-color-8352ec5860e5/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1200/1*XVRvNBPcSdZ5_4wpjg9poQ.png"}),a(e,{name:"More Accessible Graphs with Jetpack Compose Part 4: On-Screen Control Buttons",desc:"This blog post is the fourth one in my series on more accessible graphs with Jetpack Compose. You can find the previous three from the…",url:"https://proandroiddev.com/more-accessible-graphs-with-jetpack-compose-part-4-on-screen-control-buttons-6187e6991ddc/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1200/1*zSbUqBnwjqJ-3GaAFgJ98A.png"}),s("div",A,[n[25]||(n[25]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[24]||(n[24]=t("This article is previously published on ")),s("a",I,[a(p,{icon:"fa-brands fa-medium"}),n[23]||(n[23]=s("code",null,"proandroiddev",-1))])]),a(e,{name:"Testing Different Navigation Options with Compose",desc:"One part of creating accessible Android apps is to provide alternative navigation options. This blog post explores testing them.",url:"https://proandroiddev.com/testing-different-navigation-options-with-compose-80f180ee10e6/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1200/0*1PLUSpvlLu3EWvqG.png"})]),h(" TODO: add ARTICLE CARD "),a(r,u(d({title:"Testing Different Navigation Options with Compose",desc:"One part of creating accessible Android apps is to provide alternative navigation options. Some examples include touch (or pointer) input, keyboard navigation, switch navigation, and screen reader navigation. But how can you write tests for these different ways of navigation?",link:"https://chanhi2000.github.io/bookshelf/droidcon.com/testing-different-navigation-options-with-compose.html",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",background:"rgba(4,20,221,0.2)"})),null,16)])}const R=v(f,[["render",D]]),B=JSON.parse('{"path":"/droidcon.com/testing-different-navigation-options-with-compose.html","title":"Testing Different Navigation Options with Compose","lang":"en-US","frontmatter":{"lang":"en-US","title":"Testing Different Navigation Options with Compose","description":"Article(s) > Testing Different Navigation Options with Compose","icon":"fa-brands fa-android","category":["Java","Kotlin","Android","Article(s)"],"tag":["blog","droidcon.com","java","kotlin","android"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Testing Different Navigation Options with Compose\\",\\"image\\":[\\"https://droidcon.com/wp-content/uploads/2024/12/0_1PLUSpvlLu3EWvqG-1024x538.webp\\"],\\"datePublished\\":\\"2024-12-09T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Eevis Panula\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/testing-different-navigation-options-with-compose.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Testing Different Navigation Options with Compose"}],["meta",{"property":"og:description","content":"Article(s) > Testing Different Navigation Options with Compose"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://droidcon.com/wp-content/uploads/2024/12/0_1PLUSpvlLu3EWvqG-1024x538.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://droidcon.com/wp-content/uploads/2024/12/0_1PLUSpvlLu3EWvqG-1024x538.webp"}],["meta",{"name":"twitter:image:alt","content":"Testing Different Navigation Options with Compose"}],["meta",{"property":"article:author","content":"Eevis Panula"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"droidcon.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-12-09T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Testing Different Navigation Options with Compose"},{"property":"og:description","content":"Testing Different Navigation Options with Compose"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/testing-different-navigation-options-with-compose.html"}]],"prev":"/programming/java-android/articles/README.md","date":"2024-12-09T00:00:00.000Z","isOriginal":false,"author":"Eevis Panula","cover":"https://droidcon.com/wp-content/uploads/2024/12/0_1PLUSpvlLu3EWvqG-1024x538.webp"},"git":{},"readingTime":{"minutes":6.06,"words":1818},"filePathRelative":"droidcon.com/testing-different-navigation-options-with-compose.md","copyright":{"author":"Eevis Panula"}}');export{R as comp,B as data};
