import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as e,b as l,a as c,t as b,n as d,g as m,w as t,e as a,r as p,o as f}from"./app-BVguHYKu.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},T={href:"http://freepik.com/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://medium.com/@olivervicente/9-tips-to-improve-your-jetpack-compose-previews-a4e00831bacc",target:"_blank",rel:"noopener noreferrer"},C={href:"https://medium.com/u/e0a4c9469bb5",target:"_blank",rel:"noopener noreferrer"},P={href:"https://medium.com/u/d0f719b3e5e9",target:"_blank",rel:"noopener noreferrer"},j={href:"https://docs.github.com/es/enterprise-cloud@latest/repositories/working-with-files/managing-large-files/installing-git-large-file-storage",target:"_blank",rel:"noopener noreferrer"},F={href:"https://medium.com/@olivervicente",target:"_blank",rel:"noopener noreferrer"},O={href:"https://linkedin.com/in/olivervicentealfonso/",target:"_blank",rel:"noopener noreferrer"},J={class:"hint-container info"},A={href:"https://proandroiddev.com/screenshot-testing-in-jetpack-compose-bbed440ea19a",target:"_blank",rel:"noopener noreferrer"};function V(k,n){const r=p("VPCard"),i=p("router-link"),u=p("SiteInfo"),o=p("VPIcon"),v=p("RouteLink");return f(),h("div",null,[s("h1",w,[s("a",x,[s("span",null,b(k.$frontmatter.title)+" 관련",1)])]),e(r,d(m({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[e(i,{to:"#what-is-screenshot-testing"},{default:t(()=>n[0]||(n[0]=[a("What is Screenshot Testing?")])),_:1,__:[0]})]),s("li",null,[e(i,{to:"#why-use-this-tool"},{default:t(()=>n[1]||(n[1]=[a("Why Use This Tool?")])),_:1,__:[1]}),s("ul",null,[s("li",null,[e(i,{to:"#_1-backed-by-google"},{default:t(()=>n[2]||(n[2]=[a("1. Backed by Google")])),_:1,__:[2]})]),s("li",null,[e(i,{to:"#_2-integration-with-compose-previews"},{default:t(()=>n[3]||(n[3]=[a("2. Integration with Compose Previews")])),_:1,__:[3]})]),s("li",null,[e(i,{to:"#_3-dedicated-source-set-for-screenshot-tests"},{default:t(()=>n[4]||(n[4]=[a("3. Dedicated Source Set for Screenshot Tests")])),_:1,__:[4]})]),s("li",null,[e(i,{to:"#_4-future-enhancements"},{default:t(()=>n[5]||(n[5]=[a("4. Future Enhancements")])),_:1,__:[5]})])])]),s("li",null,[e(i,{to:"#let-s-get-started"},{default:t(()=>n[6]||(n[6]=[a("Let’s Get Started")])),_:1,__:[6]}),s("ul",null,[s("li",null,[e(i,{to:"#setting-up-the-plugin"},{default:t(()=>n[7]||(n[7]=[a("Setting Up the Plugin")])),_:1,__:[7]})]),s("li",null,[e(i,{to:"#step-1-add-the-plugin"},{default:t(()=>n[8]||(n[8]=[a("Step 1: Add the Plugin")])),_:1,__:[8]})]),s("li",null,[e(i,{to:"#step-2-enable-experimental-properties"},{default:t(()=>n[9]||(n[9]=[a("Step 2: Enable Experimental Properties")])),_:1,__:[9]})]),s("li",null,[e(i,{to:"#step-3-check-theui-toolingdependency"},{default:t(()=>n[10]||(n[10]=[a("Step 3: Check theui-toolingDependency")])),_:1,__:[10]})])])]),s("li",null,[e(i,{to:"#creating-screenshot-tests"},{default:t(()=>n[11]||(n[11]=[a("Creating Screenshot Tests")])),_:1,__:[11]}),s("ul",null,[s("li",null,[e(i,{to:"#step-1-mark-previews-as-internal"},{default:t(()=>n[12]||(n[12]=[a("Step 1: Mark Previews as Internal")])),_:1,__:[12]})]),s("li",null,[e(i,{to:"#step-2-reference-preview-functions-in-testing-classes"},{default:t(()=>n[13]||(n[13]=[a("Step 2: Reference Preview Functions in Testing Classes")])),_:1,__:[13]})]),s("li",null,[e(i,{to:"#generating-reference-images"},{default:t(()=>n[14]||(n[14]=[a("Generating Reference Images")])),_:1,__:[14]})]),s("li",null,[e(i,{to:"#output-location"},{default:t(()=>n[15]||(n[15]=[a("Output Location")])),_:1,__:[15]})]),s("li",null,[e(i,{to:"#why-five-files"},{default:t(()=>n[16]||(n[16]=[a("Why Five Files?")])),_:1,__:[16]})]),s("li",null,[e(i,{to:"#preview-example"},{default:t(()=>n[17]||(n[17]=[a("Preview Example")])),_:1,__:[17]})]),s("li",null,[e(i,{to:"#validating-the-test-report"},{default:t(()=>n[18]||(n[18]=[a("Validating the Test Report")])),_:1,__:[18]})]),s("li",null,[e(i,{to:"#command-to-validate-screenshot-tests"},{default:t(()=>n[19]||(n[19]=[a("Command to Validate Screenshot Tests")])),_:1,__:[19]})]),s("li",null,[e(i,{to:"#example-usage"},{default:t(()=>n[20]||(n[20]=[a("Example Usage")])),_:1,__:[20]})]),s("li",null,[e(i,{to:"#report-location"},{default:t(()=>n[21]||(n[21]=[a("Report Location")])),_:1,__:[21]})]),s("li",null,[e(i,{to:"#testing-changes-and-understanding-errors"},{default:t(()=>n[22]||(n[22]=[a("Testing Changes and Understanding Errors")])),_:1,__:[22]})]),s("li",null,[e(i,{to:"#use-git-lfs-large-file-storage"},{default:t(()=>n[23]||(n[23]=[a("Use Git LFS (Large File Storage)")])),_:1,__:[23]})]),s("li",null,[e(i,{to:"#configuring-ci-cd"},{default:t(()=>n[24]||(n[24]=[a("Configuring CI/CD")])),_:1,__:[24]})]),s("li",null,[e(i,{to:"#steps-to-configure"},{default:t(()=>n[25]||(n[25]=[a("Steps to Configure")])),_:1,__:[25]})]),s("li",null,[e(i,{to:"#image-difference-threshold"},{default:t(()=>n[26]||(n[26]=[a("Image Difference Threshold")])),_:1,__:[26]})])])]),s("li",null,[e(i,{to:"#closing"},{default:t(()=>n[27]||(n[27]=[a("Closing")])),_:1,__:[27]})])])]),n[97]||(n[97]=s("hr",null,null,-1)),e(u,{name:"Screenshot testing in Jetpack Compose",desc:"In this article, I’ll introduce a useful tool for screenshot testing in Jetpack Compose. This tool was officially announced at the last Google I/O as part of a new library. Although it’s still in the early stages (version 0.0.1-alpha08), it can already be integrated into your projects with minimal configuration and code, allowing you to start testing your UI efficiently.",url:"https://droidcon.com/screenshot-testing-in-jetpack-compose",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",preview:"https://droidcon.com/wp-content/uploads/2024/12/1_V1-JTPCSJ2rYG-En0wxasQ-1024x1024.webp"}),s("figure",null,[n[30]||(n[30]=s("img",{src:"https://droidcon.com/wp-content/uploads/2024/12/1_V1-JTPCSJ2rYG-En0wxasQ-1024x1024.webp",alt:'Designed by <VPIcon icon="fas fa-globe"/>Freepik',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[29]||(n[29]=a("Designed by ")),s("a",T,[e(o,{icon:"fas fa-globe"}),n[28]||(n[28]=a("Freepik"))])])]),n[98]||(n[98]=l('<p>In this article, I’ll introduce a useful tool for screenshot testing in Jetpack Compose. This tool was officially announced at the last Google I/O as part of a new library. Although it’s still in the early stages (version<code>0.0.1-alpha08</code>), it can already be integrated into your projects with minimal configuration and code, allowing you to start testing your UI efficiently.</p><hr><h2 id="what-is-screenshot-testing" tabindex="-1"><a class="header-anchor" href="#what-is-screenshot-testing"><span>What is Screenshot Testing?</span></a></h2><p>Screenshot testing involves comparing a<strong>reference image</strong>(a baseline) with the<strong>current state</strong>of your UI to detect visual discrepancies. Screenshots are taken with specific configurations such as:</p><ul><li><strong>Screen size</strong></li><li><strong>Dark or light theme</strong></li><li><strong>Font scaling</strong></li></ul><p>This approach allows developers to validate UI designs with stakeholders (e.g., designers) by taking screenshots, reviewing them, and then using these validated screenshots as a safeguard to ensure future changes don’t “break” the approved UI. If intentional UI changes occur, new reference images must replace the outdated ones.</p><p>**The best part?**The process is automated — only new reference screenshots need manual validation.</p><hr><h2 id="why-use-this-tool" tabindex="-1"><a class="header-anchor" href="#why-use-this-tool"><span>Why Use This Tool?</span></a></h2><h3 id="_1-backed-by-google" tabindex="-1"><a class="header-anchor" href="#_1-backed-by-google"><span>1. Backed by Google</span></a></h3><p>Having Google’s developer team maintaining and evolving this tool ensures it follows best practices and integrates seamlessly with the Jetpack ecosystem.</p><h3 id="_2-integration-with-compose-previews" tabindex="-1"><a class="header-anchor" href="#_2-integration-with-compose-previews"><span>2. Integration with Compose Previews</span></a></h3><p>One standout feature is its ability to leverage<strong>Compose Preview annotations</strong>. If you’re familiar with previews in Jetpack Compose, you know how useful they are for quickly visualizing UI components. With this screenshot testing tool, you can use custom preview annotations to define multiple configurations and test them effortlessly.</p><p>For example, you can create a single annotation to generate previews for:</p><ul><li><strong>Four screen sizes</strong>in both<strong>light and dark themes</strong>, or</li><li><strong>Two screen sizes</strong>with<strong>five different font scales</strong>.</li></ul>',15)),s("p",null,[n[34]||(n[34]=a("If you want to learn more about optimizing your previews, check out")),s("a",I,[n[31]||(n[31]=a("my post (")),e(o,{icon:"fa-brands fa-medium"}),n[32]||(n[32]=s("code",null,"olivervicente",-1)),n[33]||(n[33]=a(")"))]),n[35]||(n[35]=a(", where I share tips like creating your own preview annotations."))]),n[99]||(n[99]=s("h3",{id:"_3-dedicated-source-set-for-screenshot-tests",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3-dedicated-source-set-for-screenshot-tests"},[s("span",null,"3. Dedicated Source Set for Screenshot Tests")])],-1)),n[100]||(n[100]=s("p",null,[a("All screenshot tests are stored in a special source set called"),s("code",null,"screenshotTest"),a(". This structure keeps screenshot tests separate from other unit and integration tests, maintaining a clean and organized codebase.")],-1)),n[101]||(n[101]=s("h3",{id:"_4-future-enhancements",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_4-future-enhancements"},[s("span",null,"4. Future Enhancements")])],-1)),s("p",null,[n[43]||(n[43]=a("At")),n[44]||(n[44]=s("strong",null,"London Droidcon",-1)),n[45]||(n[45]=a(",")),s("a",C,[n[36]||(n[36]=a("Jose Alcérreca (")),e(o,{icon:"fa-brands fa-medium"}),n[37]||(n[37]=s("code",null,"JoseAlcerreca",-1)),n[38]||(n[38]=a(")"))]),n[46]||(n[46]=a("and")),s("a",P,[n[39]||(n[39]=a("Adarsh Fernando (")),e(o,{icon:"fa-brands fa-medium"}),n[40]||(n[40]=s("code",null,"adarshf",-1)),n[41]||(n[41]=a(")"))]),n[47]||(n[47]=a("(in their talk on")),e(v,{to:"/droidcon.com/scalable-testing-strategies.html"},{default:t(()=>n[42]||(n[42]=[a("testing strategies")])),_:1,__:[42]}),n[48]||(n[48]=a(", around the 19-minute mark) mentioned an upcoming feature: the ability to use screenshot tests as")),n[49]||(n[49]=s("strong",null,"previews",-1)),n[50]||(n[50]=a("in the files where your composables are defined. This would eliminate the need to duplicate code — one function for the preview and another for the screenshot test. While this feature isn’t available in version")),n[51]||(n[51]=s("code",null,"0.0.1-alpha08",-1)),n[52]||(n[52]=a(", it’s a promising addition to look forward to!"))]),n[102]||(n[102]=l(`<hr><h2 id="let-s-get-started" tabindex="-1"><a class="header-anchor" href="#let-s-get-started"><span>Let’s Get Started</span></a></h2><p>Enough talk — let’s set up this tool in your project!<br> Follow along as we configure the tool step-by-step, so you can start testing and validating your Jetpack Compose UIs with screenshot tests.</p><h3 id="setting-up-the-plugin" tabindex="-1"><a class="header-anchor" href="#setting-up-the-plugin"><span>Setting Up the Plugin</span></a></h3><p>To get started with screenshot testing in Jetpack Compose, you’ll need to ensure your project meets the following prerequisites:</p><ul><li><strong>Kotlin Version</strong>: At least<code>1.9.20</code>(or newer). For this guide, I’ll be using a more recent version for improved compatibility.</li><li><strong>Android Gradle Plugin</strong>: Version<code>8.5.0-beta01</code>or higher.</li></ul><div class="code-block-with-title"><div class="code-block-title-bar" data-title="libs.versions.toml"><span>libs.versions.toml</span></div><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">versions</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token key property">agp</span> <span class="token punctuation">=</span> <span class="token string">&quot;8.6.1&quot;</span></span>
<span class="line"><span class="token key property">kotlin</span> <span class="token punctuation">=</span> <span class="token string">&quot;2.0.21&quot;</span></span>
<span class="line"><span class="token key property">composeScreenshot</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.0.1-alpha08&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span><span class="token table class-name">plugins</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">compose-screenshot</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">id</span> <span class="token punctuation">=</span> <span class="token string">&quot;com.android.compose.screenshot&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;composeScreenshot&quot;</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="step-1-add-the-plugin" tabindex="-1"><a class="header-anchor" href="#step-1-add-the-plugin"><span>Step 1: Add the Plugin</span></a></h3>`,8)),s("p",null,[n[56]||(n[56]=a("Include the screenshot testing plugin in your")),s("strong",null,[n[53]||(n[53]=a("module-level ")),e(o,{icon:"iconfont icon-kotlin"}),n[54]||(n[54]=s("code",null,"build.gradle.kts",-1)),n[55]||(n[55]=a(" file"))]),n[57]||(n[57]=a(":"))]),n[103]||(n[103]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="build.gradle.kts"><span>build.gradle.kts</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">plugins <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    <span class="token function">alias</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>screenshot<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="step-2-enable-experimental-properties" tabindex="-1"><a class="header-anchor" href="#step-2-enable-experimental-properties"><span>Step 2: Enable Experimental Properties</span></a></h3>`,2)),s("p",null,[n[61]||(n[61]=a("In your")),s("strong",null,[n[58]||(n[58]=a("project’s ")),e(o,{icon:"fas fa-file-lines"}),n[59]||(n[59]=s("code",null,"gradle.properties",-1)),n[60]||(n[60]=a(" file"))]),n[62]||(n[62]=a(", enable the necessary experimental properties:"))]),n[104]||(n[104]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="gradle.properties"><span>gradle.properties</span></div><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties"><pre><code class="language-properties"><span class="line"><span class="token key attr-name">android.experimental.enableScreenshotTest</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[66]||(n[66]=a("You’ll also need to set the experimental flag in your")),s("strong",null,[n[63]||(n[63]=a("module-level ")),e(o,{icon:"iconfont icon-kotlin"}),n[64]||(n[64]=s("code",null,"build.gradle.kts",-1)),n[65]||(n[65]=a(" file"))]),n[67]||(n[67]=a(":"))]),n[105]||(n[105]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="build.gradle.kts"><span>build.gradle.kts</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">android <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  experimentalProperties\\<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;android.experimental.enableScreenshotTest&quot;</span></span>\\<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="step-3-check-theui-toolingdependency" tabindex="-1"><a class="header-anchor" href="#step-3-check-theui-toolingdependency"><span>Step 3: Check the<code>ui-tooling</code>Dependency</span></a></h3><p>Ensure the<code>ui-tooling</code>dependency is included in your<strong>version catalog</strong>(if you’re using one) and in your<strong>module-level build.gradle.kts file</strong>. This dependency is essential for rendering and testing Compose UI elements. If you’re using the<strong>Compose BOM (Bill of Materials)</strong>, the version should be managed automatically:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="libs.versions.toml"><span>libs.versions.toml</span></div><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">libraries</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token comment"># compose</span></span>
<span class="line"><span class="token key property">androidx-compose-bom</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">group</span> <span class="token punctuation">=</span> <span class="token string">&quot;androidx.compose&quot;</span><span class="token punctuation">,</span> <span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;compose-bom&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;composeBom&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token key property">androidx-ui-tooling</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">group</span> <span class="token punctuation">=</span> <span class="token string">&quot;androidx.compose.ui&quot;</span><span class="token punctuation">,</span> <span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;ui-tooling&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="build.gradle.kts"><span>build.gradle.kts</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">dependencies <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    <span class="token comment">// Compose</span></span>
<span class="line">    <span class="token function">screenshotTestImplementation</span><span class="token punctuation">(</span><span class="token function">platform</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>bom<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">screenshotTestImplementation</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>androidx<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>tooling<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="creating-screenshot-tests" tabindex="-1"><a class="header-anchor" href="#creating-screenshot-tests"><span>Creating Screenshot Tests</span></a></h2><p>In the previous section, I mentioned an exciting upcoming feature: the ability to use preview functions from screenshot testing classes to preview composables directly within the file where they are developed. While this feature isn’t available yet, there’s a workaround to avoid duplicating code in the meantime.</p><h3 id="step-1-mark-previews-as-internal" tabindex="-1"><a class="header-anchor" href="#step-1-mark-previews-as-internal"><span>Step 1: Mark Previews as Internal</span></a></h3><p>For composables that already have preview functions, start by marking these preview functions as<code>internal</code>. This ensures they remain accessible within your testing source set while keeping them encapsulated.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="OBookScaffold.kt"><span>OBookScaffold.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>obook<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>component<span class="token punctuation">.</span>scaffold</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>foundation<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>Box</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>foundation<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fillMaxSize</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>material3<span class="token punctuation">.</span>MaterialTheme</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>material3<span class="token punctuation">.</span>Surface</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>material3<span class="token punctuation">.</span>Text</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>material3<span class="token punctuation">.</span>adaptive<span class="token punctuation">.</span>currentWindowAdaptiveInfo</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>material3<span class="token punctuation">.</span>adaptive<span class="token punctuation">.</span>navigationsuite<span class="token punctuation">.</span>NavigationSuiteScaffold</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>material3<span class="token punctuation">.</span>adaptive<span class="token punctuation">.</span>navigationsuite<span class="token punctuation">.</span>NavigationSuiteScaffoldDefaults</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>material3<span class="token punctuation">.</span>adaptive<span class="token punctuation">.</span>navigationsuite<span class="token punctuation">.</span>NavigationSuiteType</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>Composable</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>getValue</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>mutableIntStateOf</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>remember</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>setValue</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Alignment</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Modifier</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>tooling<span class="token punctuation">.</span>preview<span class="token punctuation">.</span>PreviewScreenSizes</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>navigation<span class="token punctuation">.</span>NavHostController</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>navigation<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>rememberNavController</span>
<span class="line"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>obook<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>component<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>MenuIcon</span>
<span class="line"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>obook<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>component<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>getMenuItems</span>
<span class="line"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>obook<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>navigation<span class="token punctuation">.</span>NavigationRoutes</span>
<span class="line"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>obook<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>preview<span class="token punctuation">.</span>getNavigationSuiteType</span>
<span class="line"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>obook<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>OBookTheme</span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@Composable</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">OBookScaffold</span><span class="token punctuation">(</span></span>
<span class="line">    navController<span class="token operator">:</span> NavHostController <span class="token operator">=</span> <span class="token function">rememberNavController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    layoutType<span class="token operator">:</span> NavigationSuiteType <span class="token operator">=</span> NavigationSuiteScaffoldDefaults<span class="token punctuation">.</span><span class="token function">calculateFromAdaptiveInfo</span><span class="token punctuation">(</span><span class="token function">currentWindowAdaptiveInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> selectedIndex <span class="token keyword">by</span> remember <span class="token punctuation">{</span> <span class="token function">mutableIntStateOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">val</span> menuItems <span class="token operator">=</span> <span class="token function">getMenuItems</span><span class="token punctuation">(</span></span>
<span class="line">        onNavigateToBook <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            navController<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span>route <span class="token operator">=</span> NavigationRoutes<span class="token punctuation">.</span>BOOK_SEARCH<span class="token punctuation">)</span></span>
<span class="line">            selectedIndex <span class="token operator">=</span> it</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        onNavigateToCart <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            navController<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span>route <span class="token operator">=</span> NavigationRoutes<span class="token punctuation">.</span>SHOPPING_CART<span class="token punctuation">)</span></span>
<span class="line">            selectedIndex <span class="token operator">=</span> it</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        onNavigateToUser <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            navController<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span>route <span class="token operator">=</span> NavigationRoutes<span class="token punctuation">.</span>USER<span class="token punctuation">)</span></span>
<span class="line">            selectedIndex <span class="token operator">=</span> it</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">NavigationSuiteScaffold</span><span class="token punctuation">(</span></span>
<span class="line">        layoutType <span class="token operator">=</span> layoutType<span class="token punctuation">,</span></span>
<span class="line">        navigationSuiteItems <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            menuItems<span class="token punctuation">.</span><span class="token function">forEachIndexed</span> <span class="token punctuation">{</span> index<span class="token punctuation">,</span> navItem <span class="token operator">-&gt;</span></span>
<span class="line">                <span class="token function">item</span><span class="token punctuation">(</span></span>
<span class="line">                    icon <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">MenuIcon</span><span class="token punctuation">(</span>icon <span class="token operator">=</span> navItem<span class="token punctuation">.</span>icon<span class="token punctuation">,</span> label <span class="token operator">=</span> navItem<span class="token punctuation">.</span>label<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                    label <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">Text</span><span class="token punctuation">(</span>navItem<span class="token punctuation">.</span>label<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                    selected <span class="token operator">=</span> selectedIndex <span class="token operator">==</span> index<span class="token punctuation">,</span></span>
<span class="line">                    onClick <span class="token operator">=</span> <span class="token punctuation">{</span> navItem<span class="token punctuation">.</span><span class="token function">navigationCallback</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">Box</span><span class="token punctuation">(</span></span>
<span class="line">            contentAlignment <span class="token operator">=</span> Alignment<span class="token punctuation">.</span>Center<span class="token punctuation">,</span></span>
<span class="line">            modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">fillMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Content&quot;</span></span><span class="token punctuation">,</span> style <span class="token operator">=</span> MaterialTheme<span class="token punctuation">.</span>typography<span class="token punctuation">.</span>headlineLarge<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@PreviewScreenSizes</span></span>
<span class="line"><span class="token annotation builtin">@Composable</span></span>
<span class="line"><span class="token keyword">internal</span> <span class="token keyword">fun</span> <span class="token function">PreviewOBookScaffold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    OBookTheme <span class="token punctuation">{</span></span>
<span class="line">        Surface <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">OBookScaffold</span><span class="token punctuation">(</span>layoutType <span class="token operator">=</span> <span class="token function">getNavigationSuiteType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,11)),c(" @include: https://gist.github.com/OliverVicente/0c63321eb4306e31ea032cac51403940/raw/962e1ee49cf9a69e13d70b58d90a271d3a497a55/OBookScaffold.kt "),n[106]||(n[106]=l(`<h3 id="step-2-reference-preview-functions-in-testing-classes" tabindex="-1"><a class="header-anchor" href="#step-2-reference-preview-functions-in-testing-classes"><span>Step 2: Reference Preview Functions in Testing Classes</span></a></h3><p>Next, create a dedicated testing class for each composable within the<code>screenshotTest</code>source set. In these classes, reference the existing preview function instead of creating a duplicate.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="OBookScaffoldScreenshots.kt"><span>OBookScaffoldScreenshots.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>obook<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>component<span class="token punctuation">.</span>scaffold</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>Composable</span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>tooling<span class="token punctuation">.</span>preview<span class="token punctuation">.</span>PreviewScreenSizes</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> OBookScaffoldScreenshots <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation builtin">@PreviewScreenSizes</span></span>
<span class="line">    <span class="token annotation builtin">@Composable</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">OBookScaffoldPreview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">PreviewOBookScaffold</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),c(" @include: https://gist.github.com/OliverVicente/327c59200e9481a8c651de1deb13d9a8/raw/6ab1534390b4e135e83930198abcd7505b8d8ed0/OBookScaffoldScreenshots.kt "),n[107]||(n[107]=l('<h3 id="generating-reference-images" tabindex="-1"><a class="header-anchor" href="#generating-reference-images"><span>Generating Reference Images</span></a></h3><p>To generate reference images for your screenshot tests, use the following Gradle commands based on your operating system:</p><ul><li>Linux and macOS:<code>./gradlew updateDebugScreenshotTest</code>(<code>./gradlew {:module:}update{Variant}ScreenshotTest</code>)</li><li>Windows:<code>gradlew updateDebugScreenshotTest</code>(<code>gradlew {:module:}update{Variant}ScreenshotTest</code>)</li></ul>',3)),s("p",null,[n[68]||(n[68]=a("In my case, I’m running macOS and have a single module named")),e(o,{icon:"fas fa-folder-open"}),n[69]||(n[69]=s("code",null,"app",-1)),n[70]||(n[70]=a(". Therefore, I use the following command:"))]),n[108]||(n[108]=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">./gradlew :app:updateDebugScreenshotTest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="output-location" tabindex="-1"><a class="header-anchor" href="#output-location"><span>Output Location</span></a></h3><p>After running the command, the reference images are generated and stored in the following directory:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="location"><span>location</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">/app/src/debug/screenshotTest/reference/com/example/obook/ui/component/scaffold/</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>Inside this folder, I find a subfolder named after the testing class,<code>OBookScaffoldScreenshots</code>.</p><figure><img src="https://droidcon.com/wp-content/uploads/2024/12/1_wVPkpKw8t5gKH5MmMrJC3Q.webp" alt="This folder contains five reference image files" tabindex="0" loading="lazy"><figcaption>This folder contains five reference image files</figcaption></figure><h3 id="why-five-files" tabindex="-1"><a class="header-anchor" href="#why-five-files"><span>Why Five Files?</span></a></h3><p>This is because I used the<code>@PreviewScreenSizes</code>annotation in my test class, which generates previews for<strong>five different screen sizes</strong>.</p><h3 id="preview-example" tabindex="-1"><a class="header-anchor" href="#preview-example"><span>Preview Example</span></a></h3><p>For instance, if I open the file corresponding to the portrait phone screen size, I can see the captured screenshot representing the composable for that specific configuration.</p><figure><img src="https://droidcon.com/wp-content/uploads/2024/12/1_2auWdi4HuINRJJkFkUTA_Q-472x1024.webp" alt="This setup provides a straightforward way to validate UI designs across multiple configurations efficiently." tabindex="0" loading="lazy"><figcaption>This setup provides a straightforward way to validate UI designs across multiple configurations efficiently.</figcaption></figure><h3 id="validating-the-test-report" tabindex="-1"><a class="header-anchor" href="#validating-the-test-report"><span>Validating the Test Report</span></a></h3><p>With reference images generated, you can now validate your screenshot tests and inspect the results through a detailed report.</p><h3 id="command-to-validate-screenshot-tests" tabindex="-1"><a class="header-anchor" href="#command-to-validate-screenshot-tests"><span>Command to Validate Screenshot Tests</span></a></h3><p>Depending on your operating system, run the following commands:</p><ul><li>Linux and macOS:<code>./gradlew validateDebugScreenshotTest</code>(<code>./gradlew {:module:}validate{Variant}ScreenshotTest</code>)</li><li>Windows:<code>gradlew validateDebugScreenshotTest</code>(<code>gradlew {:module:}validate{Variant}ScreenshotTest</code>)</li></ul><h3 id="example-usage" tabindex="-1"><a class="header-anchor" href="#example-usage"><span>Example Usage</span></a></h3>`,17)),s("p",null,[n[71]||(n[71]=a("In my case, since I have a single module named")),e(o,{icon:"fas fa-folder-open"}),n[72]||(n[72]=s("code",null,"app",-1)),n[73]||(n[73]=a(", the command is:"))]),n[109]||(n[109]=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">./gradlew :app:validateDebugScreenshotTest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="report-location" tabindex="-1"><a class="header-anchor" href="#report-location"><span>Report Location</span></a></h3><p>The test report is generated at the following path:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="folder location"><span>folder location</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">app/build/reports/screenshotTest/preview/debug/index.html  </span>
<span class="line"># General format: {module}/build/reports/screenshotTest/preview/{variant}/index.html</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="testing-changes-and-understanding-errors" tabindex="-1"><a class="header-anchor" href="#testing-changes-and-understanding-errors"><span>Testing Changes and Understanding Errors</span></a></h3><p>To simulate a failure, I made a change to the text in the component and ran the validation command again. This resulted in an error.</p><figure><img src="https://droidcon.com/wp-content/uploads/2024/12/1_VzxBmBMmUx9PwVaY0CWbmg-1024x336.webp" alt="Test Report With Errors" tabindex="0" loading="lazy"><figcaption>Test Report With Errors</figcaption></figure><p>By inspecting the report, I could analyze the issue:</p><ul><li><strong>Left Panel</strong>: Displays the reference screenshot image.</li><li><strong>Middle Panel</strong>: Shows the current image (with the changes applied).</li><li><strong>Right Panel</strong>: Highlights the differences between the reference and the current image.</li></ul><figure><img src="https://droidcon.com/wp-content/uploads/2024/12/1_-f9hS0z55vWz8OYweOTbfA-1024x259.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>In the case of a real error, you have two options:</p><ol><li>Verify that the issue is an actual error, fix it, and re-run the validation to ensure the test passes successfully.</li><li>Confirm that the new image is correct due to an intentional design update, update the reference image to reflect the change, and then re-validate to ensure consistency.</li></ol><h3 id="use-git-lfs-large-file-storage" tabindex="-1"><a class="header-anchor" href="#use-git-lfs-large-file-storage"><span>Use Git LFS (Large File Storage)</span></a></h3><p>Git LFS is a tool to avoid having large files that are not code files in our repository. In our case the reference images.</p>`,14)),s("p",null,[n[75]||(n[75]=a("Follow")),s("a",j,[e(o,{icon:"iconfont icon-github"}),n[74]||(n[74]=a("official documentation"))]),n[76]||(n[76]=a("to install Git LFS. In my case, I will install it using Homebrew:"))]),n[110]||(n[110]=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">brew <span class="token function">install</span> git-lfs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>then track screenshot images with Git LFS</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> lfs track <span class="token string">&quot;app/src/debug/**/*.png&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,3)),s("p",null,[n[77]||(n[77]=a("Add ")),e(o,{icon:"iconfont icon-git"}),n[78]||(n[78]=s("code",null,".gitattributes",-1)),n[79]||(n[79]=a(" to the repository"))]),n[111]||(n[111]=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> <span class="token function">add</span> .gitattributes</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Commit the changes</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Track PNG files in app/src/debug/* subfolders with Git LFS&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="configuring-ci-cd" tabindex="-1"><a class="header-anchor" href="#configuring-ci-cd"><span>Configuring CI/CD</span></a></h3><p>To streamline the development team’s workflow with screenshot tests, we need to automate the process by creating a CI/CD workflow.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="test-ui.yml"><span>test-ui.yml</span></div><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">name</span><span class="token punctuation">:</span> Test UI</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">on</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">branches</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> main</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">jobs</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">build</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest</span>
<span class="line">    <span class="token key atrule">concurrency</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>ui<span class="token punctuation">-</span>$<span class="token punctuation">{</span><span class="token punctuation">{</span> github.ref <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token key atrule">steps</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout code</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v4</span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set up JDK 21</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>java@v4</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">distribution</span><span class="token punctuation">:</span> <span class="token string">&#39;temurin&#39;</span></span>
<span class="line">          <span class="token key atrule">java-version</span><span class="token punctuation">:</span> <span class="token string">&#39;21&#39;</span></span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Cache Gradle dependencies</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v4</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">              ~/.gradle/caches</span>
<span class="line">              ~/.gradle/wrapper</span></span>
<span class="line">            <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> runner.os <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">-</span>gradle<span class="token punctuation">-</span>$<span class="token punctuation">{</span><span class="token punctuation">{</span> hashFiles(&#39;<span class="token important">**/*.gradle*&#39;</span><span class="token punctuation">,</span> &#39;<span class="token important">**/gradle-wrapper.properties&#39;)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">            <span class="token key atrule">restore-keys</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">              \${{ runner.os }}-gradle-    </span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Git LFS</span>
<span class="line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">            sudo apt-get install git-lfs</span>
<span class="line">            git lfs install</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Pull LFS files</span>
<span class="line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> git lfs pull</span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Grant execute permission for gradlew</span>
<span class="line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> chmod +x ./gradlew</span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build with Gradle</span>
<span class="line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> ./gradlew build</span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Run screenshot tests</span>
<span class="line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> ./gradlew <span class="token punctuation">:</span>app<span class="token punctuation">:</span>validateDebugScreenshotTest</span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Upload screenshot test report</span>
<span class="line">        <span class="token key atrule">if</span><span class="token punctuation">:</span> always()</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/upload<span class="token punctuation">-</span>artifact@v4</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">name</span><span class="token punctuation">:</span> screenshot<span class="token punctuation">-</span>test<span class="token punctuation">-</span>report</span>
<span class="line">          <span class="token key atrule">path</span><span class="token punctuation">:</span> app/build/reports/screenshotTest/</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">permissions</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">contents</span><span class="token punctuation">:</span> read</span>
<span class="line">  <span class="token key atrule">pull-requests</span><span class="token punctuation">:</span> read</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,6)),c(" @include: https://gist.github.com/OliverVicente/4106b394a6eda1f334457733037e4676/raw/e6feed78540059a9af92b2411e963d82f0bef978/test-ui.yml "),n[112]||(n[112]=l(`<h3 id="steps-to-configure" tabindex="-1"><a class="header-anchor" href="#steps-to-configure"><span>Steps to Configure</span></a></h3><h4 id="install-lfs-and-pull-files" tabindex="-1"><a class="header-anchor" href="#install-lfs-and-pull-files"><span>Install LFS and Pull Files</span></a></h4><p>Configure the workflow to install Git LFS (Large File Storage) and pull the required files. This ensures that the reference images are accessible when running the tests.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Git LFS</span>
<span class="line">  <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">    sudo apt-get install git-lfs</span>
<span class="line">    git lfs install</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Pull LFS files</span>
<span class="line">  <span class="token key atrule">run</span><span class="token punctuation">:</span> git lfs pull</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="set-read-permissions" tabindex="-1"><a class="header-anchor" href="#set-read-permissions"><span>Set Read Permissions</span></a></h4><p>Grant the necessary read permissions to the workflow so it can access the required resources, including reference images and other test-related files.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">permissions</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">contents</span><span class="token punctuation">:</span> read</span>
<span class="line">  <span class="token key atrule">pull-requests</span><span class="token punctuation">:</span> read</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="run-tests-generate-reports-and-host-artifacts" tabindex="-1"><a class="header-anchor" href="#run-tests-generate-reports-and-host-artifacts"><span>Run Tests, Generate Reports, and Host Artifacts</span></a></h4><p>The workflow should automate the following steps:</p><ul><li>Execute the screenshot tests.</li><li>Generate the test report.</li><li>Store the report as an artifact, making it accessible for review.</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Run screenshot tests</span>
<span class="line">  <span class="token key atrule">run</span><span class="token punctuation">:</span> ./gradlew <span class="token punctuation">:</span>app<span class="token punctuation">:</span>validateDebugScreenshotTest</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Upload screenshot test report</span>
<span class="line">  <span class="token key atrule">if</span><span class="token punctuation">:</span> always()</span>
<span class="line">  <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/upload<span class="token punctuation">-</span>artifact@v4</span>
<span class="line">  <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> screenshot<span class="token punctuation">-</span>test<span class="token punctuation">-</span>report</span>
<span class="line">    <span class="token key atrule">path</span><span class="token punctuation">:</span> app/build/reports/screenshotTest/</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="image-difference-threshold" tabindex="-1"><a class="header-anchor" href="#image-difference-threshold"><span>Image Difference Threshold</span></a></h3><p>When running the validation in GitHub Actions, an error might occur because the images are not identical. However, the root cause isn’t a significant issue but rather a minor discrepancy in how colors are rendered on different platforms. For example, your local machine (Mac) and the GitHub Actions runner (Ubuntu server) may generate slightly different color values, leading to false positives in the comparison.</p><figure><img src="https://droidcon.com/wp-content/uploads/2024/12/1_RCGEiCDrx33Q_rFQFnSFcw-1024x457.webp" alt="Screenshot Difference" tabindex="0" loading="lazy"><figcaption>Screenshot Difference</figcaption></figure>`,14)),s("p",null,[n[80]||(n[80]=a("To address the issue of minor image differences, we can adjust the")),n[81]||(n[81]=s("strong",null,"Image Difference Threshold",-1)),n[82]||(n[82]=a(". To configure this, add the following to your**module-level ")),e(o,{icon:"iconfont icon-kotlin"}),n[83]||(n[83]=s("code",null,"build.gradle.kts",-1)),n[84]||(n[84]=a("**file:"))]),n[113]||(n[113]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="build.gradle.kts"><span>build.gradle.kts</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">android <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  testOptions <span class="token punctuation">{</span></span>
<span class="line">        screenshotTests <span class="token punctuation">{</span></span>
<span class="line">            imageDifferenceThreshold <span class="token operator">=</span> <span class="token number">0.002f</span> <span class="token comment">// 0.2%</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now, when you run the pipeline again, the job will succeed without errors.</p><p>In a real project scenario, it’s generally better to generate reference images on the server itself. This ensures that both the updates and validations occur on the same machine, eliminating the need for adjustments to the<strong>Image Difference Threshold</strong>configuration. This approach helps maintain consistency across environments and simplifies the testing process.</p><hr><h2 id="closing" tabindex="-1"><a class="header-anchor" href="#closing"><span>Closing</span></a></h2><p>If you found this article helpful or interesting, please give it a clap and consider subscribing for more content! I’d love to hear your thoughts! Your feedback and insights are always welcome, as I’m eager to learn, collaborate, and grow with other developers in the community.</p><p>Have any questions? Feel free to reach out!</p>`,7)),s("p",null,[n[91]||(n[91]=a("You can also follow me on")),s("a",F,[n[85]||(n[85]=a("Medium (")),e(o,{icon:"fa-brands fa-medium"}),n[86]||(n[86]=s("code",null,"olivervicente",-1)),n[87]||(n[87]=a(")"))]),n[92]||(n[92]=a("or")),s("a",O,[n[88]||(n[88]=a("LinkedIn (")),e(o,{icon:"fa-brands fa-linkedin"}),n[89]||(n[89]=s("code",null,"olivervicentealfonso",-1)),n[90]||(n[90]=a(")"))]),n[93]||(n[93]=a("for more insightful articles and updates. Let’s stay connected!"))]),s("div",J,[n[96]||(n[96]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[95]||(n[95]=a("This article is previously published on ")),s("a",A,[e(o,{icon:"fa-brands fa-medium"}),n[94]||(n[94]=s("code",null,"proandroiddev",-1))])]),e(u,{name:"Screenshot testing in Jetpack Compose",desc:"In this article, I’ll introduce a useful tool for screenshot testing in Jetpack Compose. This tool was officially announced at the last…",url:"https://proandroiddev.com/screenshot-testing-in-jetpack-compose-bbed440ea19a/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1200/1*V1-JTPCSJ2rYG-En0wxasQ.jpeg"})]),c(" TODO: add ARTICLE CARD "),e(r,d(m({title:"Screenshot testing in Jetpack Compose",desc:"In this article, I’ll introduce a useful tool for screenshot testing in Jetpack Compose. This tool was officially announced at the last Google I/O as part of a new library. Although it’s still in the early stages (version 0.0.1-alpha08), it can already be integrated into your projects with minimal configuration and code, allowing you to start testing your UI efficiently.",link:"https://chanhi2000.github.io/bookshelf/droidcon.com/screenshot-testing-in-jetpack-compose.html",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",background:"rgba(4,20,221,0.2)"})),null,16)])}const q=g(y,[["render",V]]),U=JSON.parse('{"path":"/droidcon.com/screenshot-testing-in-jetpack-compose.html","title":"Screenshot testing in Jetpack Compose","lang":"en-US","frontmatter":{"lang":"en-US","title":"Screenshot testing in Jetpack Compose","description":"Article(s) > Screenshot testing in Jetpack Compose","icon":"fa-brands fa-android","category":["Java","Kotlin","Android","Article(s)"],"tag":["blog","droidcon.com","java","kotlin","android"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Screenshot testing in Jetpack Compose\\",\\"image\\":[\\"http://freepik.com/\\",\\"https://droidcon.com/wp-content/uploads/2024/12/1_wVPkpKw8t5gKH5MmMrJC3Q.webp\\",\\"https://droidcon.com/wp-content/uploads/2024/12/1_2auWdi4HuINRJJkFkUTA_Q-472x1024.webp\\",\\"https://droidcon.com/wp-content/uploads/2024/12/1_VzxBmBMmUx9PwVaY0CWbmg-1024x336.webp\\",\\"https://droidcon.com/wp-content/uploads/2024/12/1_-f9hS0z55vWz8OYweOTbfA-1024x259.webp\\",\\"https://droidcon.com/wp-content/uploads/2024/12/1_RCGEiCDrx33Q_rFQFnSFcw-1024x457.webp\\"],\\"datePublished\\":\\"2024-12-04T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Oliver Vicente\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/screenshot-testing-in-jetpack-compose.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Screenshot testing in Jetpack Compose"}],["meta",{"property":"og:description","content":"Article(s) > Screenshot testing in Jetpack Compose"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://droidcon.com/wp-content/uploads/2024/12/1_V1-JTPCSJ2rYG-En0wxasQ-1024x1024.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://droidcon.com/wp-content/uploads/2024/12/1_V1-JTPCSJ2rYG-En0wxasQ-1024x1024.webp"}],["meta",{"name":"twitter:image:alt","content":"Screenshot testing in Jetpack Compose"}],["meta",{"property":"article:author","content":"Oliver Vicente"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"droidcon.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-12-04T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Screenshot testing in Jetpack Compose"},{"property":"og:description","content":"Screenshot testing in Jetpack Compose"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/screenshot-testing-in-jetpack-compose.html"}]],"prev":"/programming/java-android/articles/README.md","date":"2024-12-04T00:00:00.000Z","isOriginal":false,"author":"Oliver Vicente","cover":"https://droidcon.com/wp-content/uploads/2024/12/1_V1-JTPCSJ2rYG-En0wxasQ-1024x1024.webp"},"git":{},"readingTime":{"minutes":8.6,"words":2579},"filePathRelative":"droidcon.com/screenshot-testing-in-jetpack-compose.md","copyright":{"author":"Oliver Vicente"}}');export{q as comp,U as data};
