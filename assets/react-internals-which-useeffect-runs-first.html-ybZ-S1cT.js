import{_ as f}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as e,b as p,a as k,t as h,n as r,g as u,w as o,e as a,r as l,o as b}from"./app-BVguHYKu.js";const v={},w={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},R={class:"table-of-contents"},x={href:"https://react.dev/reference/react/useEffect",target:"_blank",rel:"noopener noreferrer"},C={href:"https://react.dev/learn/render-and-commit",target:"_blank",rel:"noopener noreferrer"},E={class:"hint-container note"},I={href:"https://jser.dev/series/react-source-code-walkthrough",target:"_blank",rel:"noopener noreferrer"},T={href:"https://jser.pro/ddir/rie?reactVersion=18.3.1&snippetKey=hq8jm2ylzb9u8eh468",target:"_blank",rel:"noopener noreferrer"},j={class:"hint-container info"},P={href:"https://github.com/facebook/react/blob/c44e4a250557e53b120e40db8b01fb5fd93f1e35/packages/react-reconciler/src/ReactFiberWorkLoop.js#L2484",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/facebook/react/blob/c44e4a250557e53b120e40db8b01fb5fd93f1e35/packages/react-reconciler/src/ReactFiberWorkLoop.js#L2811",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/facebook/react/blob/c44e4a250557e53b120e40db8b01fb5fd93f1e35/packages/react-reconciler/src/ReactFiberWorkLoop.js#L2831",target:"_blank",rel:"noopener noreferrer"},A={class:"hint-container note"},z={href:"https://github.com/facebook/react/blob/c44e4a250557e53b120e40db8b01fb5fd93f1e35/packages/react-reconciler/src/ReactFiberCommitWork.js#L3283",target:"_blank",rel:"noopener noreferrer"};function D(d,n){const c=l("VPCard"),t=l("router-link"),m=l("SiteInfo"),i=l("VPIcon");return b(),g("div",null,[s("h1",w,[s("a",y,[s("span",null,h(d.$frontmatter.title)+" 관련",1)])]),e(c,r(u({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",R,[s("ul",null,[s("li",null,[e(t,{to:"#overview-of-react-internals"},{default:o(()=>n[0]||(n[0]=[a("Overview of React Internals")])),_:1,__:[0]}),s("ul",null,[s("li",null,[e(t,{to:"#triggering-a-render"},{default:o(()=>n[1]||(n[1]=[a("Triggering a render")])),_:1,__:[1]})]),s("li",null,[e(t,{to:"#rendering"},{default:o(()=>n[2]||(n[2]=[a("Rendering")])),_:1,__:[2]})]),s("li",null,[e(t,{to:"#committing-to-the-dom"},{default:o(()=>n[3]||(n[3]=[a("Committing to the DOM")])),_:1,__:[3]})])])]),s("li",null,[e(t,{to:"#react-fiber-tree"},{default:o(()=>n[4]||(n[4]=[a("React Fiber Tree")])),_:1,__:[4]})]),s("li",null,[e(t,{to:"#how-fiber-tree-is-traversed"},{default:o(()=>n[5]||(n[5]=[a("How Fiber Tree Is Traversed")])),_:1,__:[5]})]),s("li",null,[e(t,{to:"#render-phase"},{default:o(()=>n[6]||(n[6]=[a("Render Phase")])),_:1,__:[6]})]),s("li",null,[e(t,{to:"#commit-phase"},{default:o(()=>n[7]||(n[7]=[a("Commit Phase")])),_:1,__:[7]}),s("ul",null,[s("li",null,[e(t,{to:"#committing-effects"},{default:o(()=>n[8]||(n[8]=[a("Committing effects")])),_:1,__:[8]})])])])])]),n[45]||(n[45]=s("hr",null,null,-1)),e(m,{name:"React Internals: Which useEffect runs first?",desc:"It's not particularly obvious, but a child's useEffect will run before a parent's will. Let's look at why.",url:"https://frontendmasters.com/blog/react-internals-which-useeffect-runs-first/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/5672"}),s("p",null,[s("a",x,[e(i,{icon:"fa-brands fa-react"}),n[9]||(n[9]=s("code",null,"useEffect",-1))]),n[10]||(n[10]=a(" is one of the most commonly used hooks in the React community. Regardless of how much experience you have with React, you’ve probably used it before."))]),n[46]||(n[46]=p(`<p>But have you ever run into situations where <strong><code>useEffect</code> hooks run in an unexpected order</strong> when multiple layers of components are involved?</p><p>Let’s start with a quick quiz. <strong>What’s the correct order of these <code>console.log</code> statements in the console?</strong></p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Parent is rendered&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Parent committed effect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Child is rendered&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Child committed effect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Child</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Parent</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Parent</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Answer</summary><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">// initial render  </span>
<span class="line">Parent is rendered  </span>
<span class="line">Child is rendered  </span>
<span class="line">  </span>
<span class="line">// useEffects  </span>
<span class="line">Child committed effect  </span>
<span class="line">Parent committed effect</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>If you got it right—nice job! If not, no worries—most React devs get this wrong too. In fact, this isn’t something that’s clearly documented or explained on the official React website.</p><p>Let’s explore why children components are rendered last but their effects are committed first. We’ll dive into how and when React renders components and commits effects (<code>useEffect</code>). We’ll touch on a few React internal concepts like the <strong>React Fiber architecture</strong> and its <strong>traversal algorithm</strong>.</p><hr><h2 id="overview-of-react-internals" tabindex="-1"><a class="header-anchor" href="#overview-of-react-internals"><span>Overview of React Internals</span></a></h2>`,8)),s("p",null,[n[12]||(n[12]=a("According to ")),s("a",C,[e(i,{icon:"fa-brands fa-react"}),n[11]||(n[11]=a("React official documentation"))]),n[13]||(n[13]=a(", the entire React’s component lifecycle can be roughly divided into 3 phases: ")),n[14]||(n[14]=s("strong",null,[s("em",null,"Trigger → Render → Commit")],-1))]),n[47]||(n[47]=p('<h3 id="triggering-a-render" tabindex="-1"><a class="header-anchor" href="#triggering-a-render"><span>Triggering a render</span></a></h3><ul><li>The component’s initial render, or state updates with <code>setState</code>.</li><li>A state update is put in a queue and scheduled to be processed by the React Scheduler.</li></ul><h3 id="rendering" tabindex="-1"><a class="header-anchor" href="#rendering"><span>Rendering</span></a></h3><ul><li>React calls the component and works on the state update.</li><li>React reconciles and marks it as “dirty” for commit phase.</li><li>Create new DOM node internally.</li></ul><h3 id="committing-to-the-dom" tabindex="-1"><a class="header-anchor" href="#committing-to-the-dom"><span>Committing to the DOM</span></a></h3><ul><li>Apply actual DOM manipulation.</li><li>Runs effects (<code>useEffect</code>, <code>useLayoutEffect</code>).</li></ul><hr><h2 id="react-fiber-tree" tabindex="-1"><a class="header-anchor" href="#react-fiber-tree"><span>React Fiber Tree</span></a></h2><p>Before diving into the traversal algorithm, we need to understand the <strong>React Fiber</strong> architecture. I’ll try to keep this introduction beginner-friendly.</p><p>Internally, React uses a tree-like data structure called <strong>fiber tree</strong> to represent the component hierarchy and track updates.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/04/Screenshot-2025-04-22-at-9.40.32 AM.png?resize=887%2C1024&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>From the diagram above, we can tell that <strong>fiber tree is not exactly a one-to-one mapping of DOM tree</strong>. It includes <strong>additional information</strong> that help React manage rendering more efficiently.</p><p>Each node in this tree is called a <strong>fiber node.</strong> There are different kinds of fiber nodes such as <code>HostComponent</code> which refers to a <strong>native DOM element</strong>, like <code>&lt;div&gt;</code> or <code>&lt;p&gt;</code> in the diagram. <code>FiberRootNode</code> is the root node and will point to a different <code>HostRoot</code> node during each new render.</p><p>Every fiber node contains properties like <code>props</code>, <code>state</code>, and most importantly:</p><ol><li><code>child</code> - The child of the fiber.</li><li><code>sibling</code> - The sibling of the fiber.</li><li><code>return</code> - The return value of the fiber is the parent fiber.</li></ol><p>These information allows React to form a tree.</p><p>Every time there is a state update, React will construct a new fiber tree and compare against the old tree internally.</p>',17)),s("div",E,[n[20]||(n[20]=s("p",{class:"hint-container-title"},"Note",-1)),s("p",null,[n[17]||(n[17]=a("If you’re interested in the detail, please check out ")),s("a",I,[e(i,{icon:"fas fa-globe"}),n[15]||(n[15]=a("JSer’s blog"))]),n[18]||(n[18]=a(" or his super cool project ")),s("a",T,[e(i,{icon:"fas fa-globe"}),n[16]||(n[16]=a("React Internal Explorer"))]),n[19]||(n[19]=a("!"))])]),n[48]||(n[48]=p('<hr><h2 id="how-fiber-tree-is-traversed" tabindex="-1"><a class="header-anchor" href="#how-fiber-tree-is-traversed"><span>How Fiber Tree Is Traversed</span></a></h2><p>Generally, React reuses the same traversal algorithm in many use cases.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/04/React-traverse.gif?resize=1024%2C576&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>The animation above shows how React walks the fiber tree. Notice that <strong>each node is stepped twice</strong>. The rule is simple:</p><ol><li>Traverse downwards.</li><li>In each fiber node, React checks <ol><li>If there’s a child, move to the child.</li><li>If there’s no child, step again the current node. Then, <ol><li>If there’s a sibling, move to the sibling.</li><li>If there’s no sibling, move up to its parent.</li></ol></li></ol></li></ol><p>This traversal algorithm ensures each node is stepped twice.</p><p>Now, let’s revisit the quiz above.</p><hr><h2 id="render-phase" tabindex="-1"><a class="header-anchor" href="#render-phase"><span>Render Phase</span></a></h2><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/04/Copy-of-React-traverse.gif?resize=1024%2C576&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>React traverses the fiber tree and recursively performs <strong>two steps</strong> on each fiber node:</p><ul><li><strong>In the first step</strong>, React calls the component — this is where <code>console.log</code> statement is executed. React reconciles and marks the fiber as “dirty” if state or props have changed, preparing it for the commit phase.</li><li><strong>In the second step</strong>, React constructs the new DOM node.</li></ul>',13)),s("div",j,[n[37]||(n[37]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[33]||(n[33]=a("In the React source code, the process is named ")),s("a",P,[n[21]||(n[21]=s("code",null,"workLoop",-1)),n[22]||(n[22]=a(" (")),e(i,{icon:"iconfont icon-github"}),n[23]||(n[23]=s("code",null,"facebook/react",-1)),n[24]||(n[24]=a(")"))]),n[34]||(n[34]=a(". The first step is ")),s("a",q,[n[25]||(n[25]=s("code",null,"beginWork()",-1)),n[26]||(n[26]=a(" (")),e(i,{icon:"iconfont icon-github"}),n[27]||(n[27]=s("code",null,"facebook/react",-1)),n[28]||(n[28]=a(")"))]),n[35]||(n[35]=a(". The second step is ")),s("a",W,[n[29]||(n[29]=s("code",null,"completeWork()",-1)),n[30]||(n[30]=a(" (")),e(i,{icon:"iconfont icon-github"}),n[31]||(n[31]=s("code",null,"facebook/react",-1)),n[32]||(n[32]=a(")"))]),n[36]||(n[36]=a("."))])]),n[49]||(n[49]=p('<p>At the end of Render phase, a new fiber tree with the updated DOM nodes is generated. At this point, <strong>nothing has been committed to the real DOM yet.</strong> The actual DOM mutations will happen in the Commit phase.</p><hr><h2 id="commit-phase" tabindex="-1"><a class="header-anchor" href="#commit-phase"><span>Commit Phase</span></a></h2><p><strong>Commit phase</strong> is where actual <strong>DOM mutations</strong> and <strong>effect flushing</strong> (<code>useEffect</code>). The traversal pattern remains the same, but DOM mutations and effect flushing are handled in separate walks.</p><p>In this section, we’ll skip DOM mutations and focus on the effect flushing walk.</p><h3 id="committing-effects" tabindex="-1"><a class="header-anchor" href="#committing-effects"><span>Committing effects</span></a></h3><p>React uses the same traversal algorithm. However, instead of checking whether a node has a child, it checks whether it has a subtree — which makes sense, because only React components can contain <code>useEffect</code> hooks. A DOM node like <code>&lt;p&gt;</code> won’t contain any React hooks.</p><p>Nothing happens in the first step, but in the second step, it commits effects.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/04/Example-1-commit.gif?resize=1024%2C576&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>This depth-first traversal explains why child effects are run before parent effects. This is the root cause.</p>',10)),s("div",A,[n[44]||(n[44]=s("p",{class:"hint-container-title"},"Note",-1)),s("p",null,[n[42]||(n[42]=a("In the React source code, the recursive function for committing effects is named ")),s("a",z,[n[38]||(n[38]=s("code",null,"recursivelyTraversePassiveMountEffect",-1)),n[39]||(n[39]=a(" (")),e(i,{icon:"iconfont icon-github"}),n[40]||(n[40]=s("code",null,"facebook/react",-1)),n[41]||(n[41]=a(")"))]),n[43]||(n[43]=a("."))])]),n[50]||(n[50]=p(`<p>Now let’s check out another quiz example. The result should make more sense to you now.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Parent is rendered&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Parent committed effect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Child is rendered&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Child committed effect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Child</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">ParentSibling</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;ParentSibling is rendered&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;ParentSibling committed effect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Parent&#39;s Sibling</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Parent</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Parent</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ParentSibling</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Answer</summary><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">// Initial render  </span>
<span class="line">Parent is rendered  </span>
<span class="line">Child is rendered  </span>
<span class="line">ParentSibling is rendered  </span>
<span class="line">  </span>
<span class="line">// useEffects  </span>
<span class="line">Child committed effect  </span>
<span class="line">Parent committed effect  </span>
<span class="line">ParentSibling committed effect</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>During the commit phase:</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/04/Example-2-commit.gif?resize=1024%2C576&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Now, it should be self-explanatory why <strong>child effects are flushed before their parents</strong> during the commit phase.</p><p>Understanding how and when React commits <code>useEffect</code> hooks can help you avoid subtle bugs and unexpected behaviors—especially when working with complex component structures.</p><p>Welcome to React internals!</p>`,8)),k(" TODO: add ARTICLE CARD "),e(c,r(u({title:"React Internals: Which useEffect runs first?",desc:"It's not particularly obvious, but a child's useEffect will run before a parent's will. Let's look at why.",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/react-internals-which-useeffect-runs-first.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const S=f(v,[["render",D]]),N=JSON.parse('{"path":"/frontendmasters.com/react-internals-which-useeffect-runs-first.html","title":"React Internals: Which useEffect runs first?","lang":"en-US","frontmatter":{"lang":"en-US","title":"React Internals: Which useEffect runs first?","description":"Article(s) > React Internals: Which useEffect runs first?","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","frontendmasters.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React Internals: Which useEffect runs first?\\",\\"image\\":[\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/04/Screenshot-2025-04-22-at-9.40.32%E2%80%AFAM.png?resize=887%2C1024&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/04/React-traverse.gif?resize=1024%2C576&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/04/Copy-of-React-traverse.gif?resize=1024%2C576&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/04/Example-1-commit.gif?resize=1024%2C576&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/04/Example-2-commit.gif?resize=1024%2C576&ssl=1\\"],\\"datePublished\\":\\"2025-04-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Teng Wei Herr\\",\\"url\\":\\"https://frontendmasters.com/blog/author/weiherrteng/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/react-internals-which-useeffect-runs-first.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"React Internals: Which useEffect runs first?"}],["meta",{"property":"og:description","content":"Article(s) > React Internals: Which useEffect runs first?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/5672"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/5672"}],["meta",{"name":"twitter:image:alt","content":"React Internals: Which useEffect runs first?"}],["meta",{"property":"article:author","content":"Teng Wei Herr"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-04-28T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > React Internals: Which useEffect runs first?"},{"property":"og:description","content":"React Internals: Which useEffect runs first?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/react-internals-which-useeffect-runs-first.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2025-04-28T00:00:00.000Z","isOriginal":false,"author":[{"name":"Teng Wei Herr","url":"https://frontendmasters.com/blog/author/weiherrteng/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/5672"},"git":{},"readingTime":{"minutes":4.73,"words":1420},"filePathRelative":"frontendmasters.com/react-internals-which-useeffect-runs-first.md","copyright":{"author":"Teng Wei Herr"}}');export{S as comp,N as data};
