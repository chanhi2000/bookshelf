import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as a,f as s,b as d,t as k,n as g,g as m,w as o,r as t,o as h,e as p}from"./app-BVguHYKu.js";const v={},b={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"};function w(c,n){const i=t("VPCard"),e=t("router-link"),l=t("SiteInfo");return h(),r("div",null,[a("h1",b,[a("a",f,[a("span",null,k(c.$frontmatter.title)+" 관련",1)])]),s(i,g(m({title:"How to create a custom toast component with React",desc:"Create a toast component in your React app that is capable of displaying multiple notifications, customizing their position, and deleting them.",link:"/blog.logrocket.com/how-to-create-custom-toast-component-react/README.md",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16),a("nav",y,[a("ul",null,[a("li",null,[s(e,{to:"#auto-deleting-toast-notifications"},{default:o(()=>n[0]||(n[0]=[p("Auto-deleting toast notifications")])),_:1,__:[0]})]),a("li",null,[s(e,{to:"#adding-the-auto-deletion-controls"},{default:o(()=>n[1]||(n[1]=[p("Adding the auto-deletion controls")])),_:1,__:[1]})])])]),n[2]||(n[2]=a("hr",null,null,-1)),s(l,{name:"How to create a custom toast component with React",desc:"Create a toast component in your React app that is capable of displaying multiple notifications, customizing their position, and deleting them.",url:"https://blog.logrocket.com/how-to-create-custom-toast-component-react#deleting-toast-notifications",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/how-to-create-custom-toast-component-react/banner.png"}),n[3]||(n[3]=d(`<p>Removing an individual toast notification is a relatively straightforward task, especially when compared to displaying a toast notification. To accomplish this, we can make use of a function that accepts an <code>id</code> parameter. By filtering the array of toast notifications, we can quickly identify and remove the notification that doesn’t correspond to the given id, and then apply this filtered array using the <code>setToasts</code> method:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">removeToast</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setToasts</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prevToasts</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> prevToasts<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">toast</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> toast<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Removing all notifications is even simpler. Just use the <code>setToasts</code> state method and pass an empty array as its current state:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">removeAllToasts</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setToasts</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Later, we will use these two methods as prop values or click events in order to clear the notifications.</p><hr><h2 id="auto-deleting-toast-notifications" tabindex="-1"><a class="header-anchor" href="#auto-deleting-toast-notifications"><span>Auto-deleting toast notifications</span></a></h2><p>Before addressing the auto-close duration input for the toasts, we need to handle the auto-close checkbox input, which enables or disables the duration input.</p><p>Additionally, whenever the value of this checkbox changes, we should clear all existing toasts to ensure their display remains synchronized. We can take advantage of the <code>removeAllToasts</code> method here that we defined in the last step:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">handleAutoCloseChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setAutoClose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prevAutoClose</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>prevAutoClose<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">removeAllToasts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can manage the duration input with the help of the target property of the JavaScript <code>e\`\`vent</code> object for input elements. By grabbing the currently selected value from the event target, we can then set it as the current state for the duration state variable:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">handleDurationChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setAutoCloseDuration</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To change the default auto-delete duration, simply modify the default value of the <code>autoCloseDuration</code> state variable from five to your desired duration.</p><hr><h2 id="adding-the-auto-deletion-controls" tabindex="-1"><a class="header-anchor" href="#adding-the-auto-deletion-controls"><span>Adding the auto-deletion controls</span></a></h2><p>Let’s proceed to the JSX part and add two app rows to encompass the input checkbox responsible for toggling the auto-close duration input and the duration input itself.</p><p>The checked state of this checkbox is controlled by the <code>autoClose</code> state variable, and its change is managed by the <code>handleAutoCloseChange</code> function that we defined in one of the previous steps:</p><figure><img src="https://blog.logrocket.com/wp-content/uploads/2020/03/auto-deletion-controls.webp" alt="Auto-Deletion Toast Controls In Action" tabindex="0" loading="lazy"><figcaption>Auto-Deletion Toast Controls In Action</figcaption></figure><p>The availability of the duration input depends on the current value of <code>autoClose</code>. The state of this input is managed by the <code>autoCloseDuration</code> state variable, and its change is handled by the <code>handleDurationChange</code> function, which we discussed in one of the previously mentioned steps:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app-row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span></span>
<span class="line">    <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toggleDuration<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>autoClose<span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleAutoCloseChange<span class="token punctuation">}</span></span></span>
<span class="line">  <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">htmlFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toggleDuration<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Auto-dismiss?</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app-row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">htmlFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>duration<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Duration (seconds)</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span></span>
<span class="line">    <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>duration<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>number<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>autoCloseDuration<span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleDurationChange<span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token operator">!</span>autoClose<span class="token punctuation">}</span></span></span>
<span class="line">  <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20))])}const q=u(v,[["render",w]]),C=JSON.parse('{"path":"/blog.logrocket.com/how-to-create-custom-toast-component-react/deleting-toast-notifications.html","title":"Deleting toast notifications","lang":"en-US","frontmatter":{"lang":"en-US","title":"Deleting toast notifications","description":"Article(s) > (8/9) How to create a custom toast component with React","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Deleting toast notifications\\",\\"image\\":[\\"https://blog.logrocket.com/wp-content/uploads/2020/03/auto-deletion-controls.webp\\"],\\"datePublished\\":\\"2023-06-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Uzochukwu Eddie Odozi\\",\\"url\\":\\"https://blog.logrocket.com/author/uzochukwuodozi/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/how-to-create-custom-toast-component-react/deleting-toast-notifications.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Deleting toast notifications"}],["meta",{"property":"og:description","content":"Article(s) > (8/9) How to create a custom toast component with React"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/how-to-create-custom-toast-component-react/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/how-to-create-custom-toast-component-react/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Deleting toast notifications"}],["meta",{"property":"article:author","content":"Uzochukwu Eddie Odozi"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-06-21T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > (8/9) How to create a custom toast component with React"},{"property":"og:description","content":"Deleting toast notifications"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/how-to-create-custom-toast-component-react/deleting-toast-notifications.html"}]],"date":"2023-06-21T00:00:00.000Z","isOriginal":false,"author":[{"name":"Uzochukwu Eddie Odozi","url":"https://blog.logrocket.com/author/uzochukwuodozi/"}],"cover":"/assets/image/blog.logrocket.com/how-to-create-custom-toast-component-react/banner.png"},"git":{},"readingTime":{"minutes":2.16,"words":647},"filePathRelative":"blog.logrocket.com/how-to-create-custom-toast-component-react/deleting-toast-notifications.md","copyright":{"author":"Uzochukwu Eddie Odozi"}}');export{q as comp,C as data};
