import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as f,d as s,f as e,b as o,a as q,t as y,n as m,g as v,w as p,e as a,r as l,o as x}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/blog.logrocket.com/understanding-axios-get-requests/banner.png",j="/bookshelf/assets/image/blog.logrocket.com/understanding-axios-get-requests/Generate-NASA-API-key.png",A="/bookshelf/assets/image/blog.logrocket.com/understanding-axios-get-requests/Generated-NASA-API-key.png",T={},I={id:"frontmatter-title-관련",tabindex:"-1"},P={class:"header-anchor",href:"#frontmatter-title-관련"},E={class:"table-of-contents"},N={class:"hint-container note"},S={href:"https://blog.logrocket.com/author/carlosmucuho/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://rickandmortyapi.com/",target:"_blank",rel:"noopener noreferrer"},G={href:"https://finalspaceapi.com/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/lelouchB/axios-get-examples",target:"_blank",rel:"noopener noreferrer"},H={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",target:"_blank",rel:"noopener noreferrer"},O={href:"https://en.wikipedia.org/wiki/Cross-site_request_forgery",target:"_blank",rel:"noopener noreferrer"},U={href:"https://unsplash.com/photos/XxAriUoOOYA",target:"_blank",rel:"noopener noreferrer"},D={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",target:"_blank",rel:"noopener noreferrer"},F={href:"https://api.nasa.gov/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://npmjs.com/package/dotenv",target:"_blank",rel:"noopener noreferrer"},L={href:"https://npmjs.com/package/axios-retry",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://npmjs.com/package/axios-retry",target:"_blank",rel:"noopener noreferrer"};function B(g,n){const d=l("VPCard"),i=l("router-link"),k=l("SiteInfo"),t=l("VPIcon"),c=l("RouteLink"),b=l("CodeTabs");return x(),f("div",null,[s("h1",I,[s("a",P,[s("span",null,y(g.$frontmatter.title)+" 관련",1)])]),e(d,m(v({title:"Axios > Article(s)",desc:"Article(s)",link:"/programming/js-axios/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",E,[s("ul",null,[s("li",null,[e(i,{to:"#what-is-axios"},{default:p(()=>n[0]||(n[0]=[a("What is Axios?")])),_:1,__:[0]})]),s("li",null,[e(i,{to:"#what-is-the-axios-get-method"},{default:p(()=>n[1]||(n[1]=[a("What is the axios.get() method?")])),_:1,__:[1]})]),s("li",null,[e(i,{to:"#how-to-install-axios-in-a-node-js-project"},{default:p(()=>n[2]||(n[2]=[a("How to install Axios in a Node.js project")])),_:1,__:[2]}),s("ul",null,[s("li",null,[e(i,{to:"#installing-nodemon"},{default:p(()=>n[3]||(n[3]=[a("Installing Nodemon")])),_:1,__:[3]})])])]),s("li",null,[e(i,{to:"#how-to-make-get-requests-using-axios"},{default:p(()=>n[4]||(n[4]=[a("How to make GET requests using Axios")])),_:1,__:[4]})]),s("li",null,[e(i,{to:"#how-to-make-axios-get-requests-with-query-parameters"},{default:p(()=>n[5]||(n[5]=[a("How to make Axios GET requests with query parameters")])),_:1,__:[5]})]),s("li",null,[e(i,{to:"#how-to-make-axios-get-requests-with-an-api-key"},{default:p(()=>n[6]||(n[6]=[a("How to make Axios GET requests with an API key")])),_:1,__:[6]})]),s("li",null,[e(i,{to:"#how-to-make-concurrent-requests-with-axios"},{default:p(()=>n[7]||(n[7]=[a("How to make concurrent requests with Axios")])),_:1,__:[7]})]),s("li",null,[e(i,{to:"#axios-interceptors-for-request-and-response-manipulation"},{default:p(()=>n[8]||(n[8]=[a("Axios interceptors for request and response manipulation")])),_:1,__:[8]}),s("ul",null,[s("li",null,[e(i,{to:"#request-interceptors"},{default:p(()=>n[9]||(n[9]=[a("Request interceptors")])),_:1,__:[9]})]),s("li",null,[e(i,{to:"#response-interceptors"},{default:p(()=>n[10]||(n[10]=[a("Response interceptors")])),_:1,__:[10]})]),s("li",null,[e(i,{to:"#removing-interceptors"},{default:p(()=>n[11]||(n[11]=[a("Removing interceptors")])),_:1,__:[11]})])])]),s("li",null,[e(i,{to:"#error-handling-in-axios"},{default:p(()=>n[12]||(n[12]=[a("Error handling in Axios")])),_:1,__:[12]}),s("ul",null,[s("li",null,[e(i,{to:"#catching-errors"},{default:p(()=>n[13]||(n[13]=[a("Catching errors")])),_:1,__:[13]})]),s("li",null,[e(i,{to:"#retrying-failed-requests-with-the-axios-retryplugin"},{default:p(()=>n[14]||(n[14]=[a("Retrying failed requests with the axios-retryplugin")])),_:1,__:[14]})])])]),s("li",null,[e(i,{to:"#how-to-cancel-requests-with-axios-signal"},{default:p(()=>n[15]||(n[15]=[a("How to cancel requests with Axios signal")])),_:1,__:[15]})]),s("li",null,[e(i,{to:"#how-to-make-head-requests-with-axios"},{default:p(()=>n[16]||(n[16]=[a("How to make HEAD requests with Axios")])),_:1,__:[16]})]),s("li",null,[e(i,{to:"#conclusion"},{default:p(()=>n[17]||(n[17]=[a("Conclusion")])),_:1,__:[17]})])])]),n[155]||(n[155]=s("hr",null,null,-1)),e(k,{name:"Understanding Axios GET requests",desc:"Make Axios GET requests, explore how to efficiently fetch data, handle errors, and enhance request performance.",url:"https://blog.logrocket.com/understanding-axios-get-requests",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/understanding-axios-get-requests/banner.png"}),s("div",N,[n[21]||(n[21]=s("p",{class:"hint-container-title"},"Editor’s note",-1)),s("p",null,[n[19]||(n[19]=a("This article was last updated by ")),s("a",S,[e(t,{icon:"fas fa-globe"}),n[18]||(n[18]=a("Carlos Mucuho"))]),n[20]||(n[20]=a(" on 9 February 2024 to update code blocks according to the most recent Axios version release. This update also expands on the use of Axios interceptors for modifying requests and responses, explores the axios-retry package for error handling, and delves into advanced techniques for managing Axios GET requests."))])]),n[156]||(n[156]=s("figure",null,[s("img",{src:w,alt:"Understanding Axios GET Requests",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Understanding Axios GET Requests")],-1)),n[157]||(n[157]=s("p",null,"As a developer, you will be required to work with APIs, whether internal or third-party. Mastering API communication is necessary for bringing different applications and services together to build a well-defined application.",-1)),s("p",null,[n[23]||(n[23]=a("Communicating with APIs effectively is an essential factor in your application’s performance, scalability, and reliability. Over the years, ")),e(c,{to:"/blog.logrocket.com/http-requests-axios.html"},{default:p(()=>n[22]||(n[22]=[s("strong",null,"Axios has become the most common and popular HTTP client",-1)])),_:1,__:[22]}),n[24]||(n[24]=a(", and it has a massive developer community behind it."))]),s("p",null,[n[27]||(n[27]=a("In this article, we will learn how to make GET requests in Axios. I will demonstrate how you can use Axios GET to make requests to public APIs like ")),s("a",R,[e(t,{icon:"fas fa-globe"}),n[25]||(n[25]=a("The Rick and Morty API"))]),n[28]||(n[28]=a(" and the ")),s("a",G,[e(t,{icon:"fas fa-globe"}),n[26]||(n[26]=a("Final Space API"))]),n[29]||(n[29]=a(", and how you can make concurrent GET requests and handle errors."))]),s("p",null,[n[33]||(n[33]=a("If you want to jump right into the code, check out the ")),s("a",C,[n[30]||(n[30]=a("GitHub repository here (")),e(t,{icon:"iconfont icon-github"}),n[31]||(n[31]=s("code",null,"lelouchB/axios-get-examples",-1)),n[32]||(n[32]=a(")"))]),n[34]||(n[34]=a("."))]),e(k,{name:"lelouchB/axios-get-examples",desc:"",url:"https://github.com/lelouchB/axios-get-examples/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/3021b799945615c6ed5726c0f9e6637ba754ea8b877d1544421f14e264f86e11/lelouchB/axios-get-examples"}),n[158]||(n[158]=s("div",{class:"hint-container note"},[s("p",{class:"hint-container-title"},"Prerequisites"),s("ul",null,[s("li",null,"Working knowledge of HTML, CSS, and JavaScript"),s("li",null,"Node.js and npm installed on your local dev machine"),s("li",null,"Any code editor of your choice")])],-1)),n[159]||(n[159]=s("hr",null,null,-1)),n[160]||(n[160]=s("h2",{id:"what-is-axios",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#what-is-axios"},[s("span",null,"What is Axios?")])],-1)),n[161]||(n[161]=s("p",null,"Axios is a Promise-based HTTP client for the browser and Node. Let’s break down this definition to understand what Axios does.",-1)),n[162]||(n[162]=s("p",null,"First, HTTP stands for Hypertext Transfer Protocol. It is a client-server protocol for fetching resources such as HTML documents.",-1)),s("p",null,[n[36]||(n[36]=a("The client is the user-agent that acts on behalf of the user and initiates the requests for resources. Web browsers such as Google Chrome are a popular example of a client. A Promise-based client returns ")),s("a",H,[e(t,{icon:"fa-brands fa-firefox"}),n[35]||(n[35]=a("Promises"))]),n[37]||(n[37]=a("."))]),s("p",null,[n[39]||(n[39]=a("Axios is isomorphic, which means it can run in the browser and Node.js with the same code. When used on the server side, it uses Node’s native ")),n[40]||(n[40]=s("code",null,"http",-1)),n[41]||(n[41]=a(" module, whereas on the client side, it uses ")),n[42]||(n[42]=s("code",null,"XMLHttpRequest",-1)),n[43]||(n[43]=a(" objects. On the client side, Axios also supports protection against ")),s("a",O,[e(t,{icon:"fa-brands fa-wikipedia-w"}),n[38]||(n[38]=a("XSRF"))]),n[44]||(n[44]=a("."))]),n[163]||(n[163]=o(`<hr><h2 id="what-is-the-axios-get-method" tabindex="-1"><a class="header-anchor" href="#what-is-the-axios-get-method"><span>What is the <code>axios.get()</code> method?</span></a></h2><p>An HTTP <code>GET</code> request is used to request a specified resource from a server. These requests do not contain any payload with them, i.e., the request doesn’t have any content. <code>axios.get()</code> is the method to make HTTP <code>GET</code> requests using the Axios library.</p><hr><h2 id="how-to-install-axios-in-a-node-js-project" tabindex="-1"><a class="header-anchor" href="#how-to-install-axios-in-a-node-js-project"><span>How to install Axios in a Node.js project</span></a></h2><p>In this section, we will create the sample app that uses Axios to fetch data using the <code>GET</code> request.</p><p>To begin, run the following command in the terminal:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">mkdir</span> axios-get-examples</span>
<span class="line"><span class="token builtin class-name">cd</span> axios-get-examples</span>
<span class="line"><span class="token function">npm</span> init <span class="token parameter variable">-y</span></span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> axios</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)),s("p",null,[n[45]||(n[45]=a("The command ")),n[46]||(n[46]=s("code",null,"npm init -y",-1)),n[47]||(n[47]=a(" creates a ")),e(t,{icon:"iconfont icon-json"}),n[48]||(n[48]=s("code",null,"package.json",-1)),n[49]||(n[49]=a(" similar to the one below in your project’s folder:"))]),n[164]||(n[164]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="package.json"><span>package.json</span></div><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;axios-get-examples&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[50]||(n[50]=a("The last command, ")),n[51]||(n[51]=s("code",null,"npm install axios",-1)),n[52]||(n[52]=a(", installs the ")),n[53]||(n[53]=s("code",null,"axios",-1)),n[54]||(n[54]=a(" package as a dependency in your project. There will be a new ")),e(t,{icon:"iconfont icon-json"}),n[55]||(n[55]=s("code",null,"package-lock.json",-1)),n[56]||(n[56]=a(" file and a ")),e(t,{icon:"fas fa-folder-open"}),n[57]||(n[57]=s("code",null,"node_modules",-1)),n[58]||(n[58]=a(" folder in the project folder."))]),s("p",null,[n[59]||(n[59]=a("The ")),e(t,{icon:"iconfont icon-json"}),n[60]||(n[60]=s("code",null,"package.json",-1)),n[61]||(n[61]=a(" file will also update and will look similar to this:"))]),n[165]||(n[165]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="package.json"><span>package.json</span></div><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;axios-get-examples&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token property">&quot;axios&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.6.7&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>You can also install Axios using <code>yarn</code> or <code>bower</code>, like so:</p>`,2)),e(b,{data:[{id:'<VPIcon icon="fa-brands fa-yarn"/>'},{id:'<VPIcon icon="iconfont icon-bower"/>'}],active:0,"tab-id":"sh"},{title0:p(({value:r,isActive:u})=>[e(t,{icon:"fa-brands fa-yarn"})]),title1:p(({value:r,isActive:u})=>[e(t,{icon:"iconfont icon-bower"})]),tab0:p(({value:r,isActive:u})=>n[62]||(n[62]=[s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[s("pre",null,[s("code",{class:"language-bash"},[s("span",{class:"line"},[s("span",{class:"token function"},"yarn"),a(),s("span",{class:"token function"},"add"),a(" axios")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),tab1:p(({value:r,isActive:u})=>n[63]||(n[63]=[s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[s("pre",null,[s("code",{class:"language-bash"},[s("span",{class:"line"},[a("bower "),s("span",{class:"token function"},"install"),a(" axios")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),_:1}),s("p",null,[n[64]||(n[64]=a("Next, create a file named ")),e(t,{icon:"fa-brands fa-js"}),n[65]||(n[65]=s("code",null,"index.js",-1)),n[66]||(n[66]=a(" where you will write the code to fetch resources using the ")),n[67]||(n[67]=s("code",null,"GET",-1)),n[68]||(n[68]=a(" requests. Run the following command in the project’s root to create the ")),e(t,{icon:"fa-brands fa-js"}),n[69]||(n[69]=s("code",null,"index.js",-1)),n[70]||(n[70]=a(" file:"))]),n[166]||(n[166]=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">touch</span> index.js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="installing-nodemon" tabindex="-1"><a class="header-anchor" href="#installing-nodemon"><span>Installing Nodemon</span></a></h3>`,2)),s("p",null,[n[72]||(n[72]=a("Run the following command in your project’s root directory to install ")),n[73]||(n[73]=s("code",null,"nodemon",-1)),n[74]||(n[74]=a(" as a dev dependency. ")),e(c,{to:"/blog.logrocket.com/nodemon-tutorial-automatically-restart-node-js-apps-with-nodemon.html"},{default:p(()=>n[71]||(n[71]=[s("strong",null,"Nodemon",-1)])),_:1,__:[71]}),n[75]||(n[75]=a(" is an excellent local development tool that automatically restarts the Node application whenever it detects a file change in the directory:"))]),n[167]||(n[167]=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> nodemon</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),s("p",null,[n[76]||(n[76]=a("Modify ")),n[77]||(n[77]=s("code",null,'"scripts"',-1)),n[78]||(n[78]=a(" in your ")),e(t,{icon:"iconfont icon-json"}),n[79]||(n[79]=s("code",null,"package.json",-1)),n[80]||(n[80]=a(", like this:"))]),n[168]||(n[168]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="package.json"><span>package.json</span></div><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node index.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nodemon index.js&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[81]||(n[81]=a("Your ")),e(t,{icon:"iconfont icon-json"}),n[82]||(n[82]=s("code",null,"package.json",-1)),n[83]||(n[83]=a(" should look like this:"))]),n[169]||(n[169]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="package.json"><span>package.json</span></div><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;axios-get-examples&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node index.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nodemon index.js&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;axios&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.6.7&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;nodemon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.0.3&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Run the following command to start your Node application:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> run dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You’ll see the following message in your terminal once it has started:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">&gt; axios-get-examples@1.0.0 dev</span>
<span class="line">&gt; nodemon index.js</span>
<span class="line"></span>
<span class="line">[nodemon] 3.0.3</span>
<span class="line">[nodemon] to restart at any time, enter \`rs\`</span>
<span class="line">[nodemon] watching path(s): *.*</span>
<span class="line">[nodemon] watching extensions: js,mjs,cjs,json</span>
<span class="line">[nodemon] starting \`node index.js\`</span>
<span class="line">[nodemon] clean exit - waiting for changes before restart</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,5)),s("p",null,[n[84]||(n[84]=a("Update the ")),e(t,{icon:"fa-brands fa-js"}),n[85]||(n[85]=s("code",null,"index.js",-1)),n[86]||(n[86]=a(" file to include the following code:"))]),n[170]||(n[170]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="index.js"><span>index.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>You will notice that <code>nodemon</code> detects the file change, restarts the application, and shows the following message in the terminal:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">Hello World!</span>
<span class="line">[nodemon] clean exit - waiting for changes before restart</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),s("p",null,[n[87]||(n[87]=a("Finally, you can remove the ")),n[88]||(n[88]=s("code",null,"console.log()",-1)),n[89]||(n[89]=a(" code from the ")),e(t,{icon:"fa-brands fa-js"}),n[90]||(n[90]=s("code",null,"index.js",-1)),n[91]||(n[91]=a(" file."))]),n[171]||(n[171]=s("hr",null,null,-1)),n[172]||(n[172]=s("h2",{id:"how-to-make-get-requests-using-axios",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#how-to-make-get-requests-using-axios"},[s("span",null,[a("How to make "),s("code",null,"GET"),a(" requests using Axios")])])],-1)),n[173]||(n[173]=s("p",null,[a("In this section, we will see how to import and use Axios to make "),s("code",null,"GET"),a(" requests to the Final Space API to fetch data.")],-1)),s("p",null,[n[93]||(n[93]=a("Update the ")),e(t,{icon:"fa-brands fa-js"}),n[94]||(n[94]=s("code",null,"index.js",-1)),n[95]||(n[95]=a(" file to import the ")),n[96]||(n[96]=s("code",null,"axios",-1)),n[97]||(n[97]=a(" package using the ")),n[98]||(n[98]=s("code",null,"require",-1)),n[99]||(n[99]=a(" function. Node follows the ")),e(c,{to:"/blog.logrocket.com/commonjs-vs-es-modules-node-js.html"},{default:p(()=>n[92]||(n[92]=[s("strong",null,"CommonJS",-1)])),_:1,__:[92]}),n[100]||(n[100]=a(" module system, and you can use modules present in separate files using the inbuilt ")),n[101]||(n[101]=s("code",null,"require",-1)),n[102]||(n[102]=a(" function:"))]),n[174]||(n[174]=o(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;axios&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now, you can use the <code>axios.&lt;method&gt;</code> to initiate any request, such as a <code>GET</code> request. Add the following code to the <code>index.file</code>. The following code fetched two characters from the Final Space API Characters endpoint:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Axios GET Default</span></span>
<span class="line">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://finalspaceapi.com/api/v0/character/?limit=2&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You will see a lengthy response in the terminal similar to this (the following response is truncated):</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;statusText&quot;</span><span class="token operator">:</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;headers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;server&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nginx/1.18.0 (Ubuntu)&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Mon, 12 Feb 2024 20:04:49 GMT&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;content-type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json; charset=utf-8&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;content-length&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1452&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;transitional&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;silentJSONParsing&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;forcedJSONParsing&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;clarifyTimeoutError&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;headers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;Accept&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json, text/plain, */*&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;User-Agent&quot;</span><span class="token operator">:</span> <span class="token string">&quot;axios/0.25.0&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://finalspaceapi.com/api/v0/character/?limit=2&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> undefined</span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Gary Goodspeed&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Alive&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;species&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Human&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;gender&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Male&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;hair&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Blonde&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;alias&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string">&quot;The Gary (by Lord Commander and Invictus)&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;Thunder Bandit(code name)&quot;</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;origin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Earth&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;abilities&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string">&quot;Piloting&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;Marksmanship&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;Hand-to-hand combat&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;Weapons: Blasters&quot;</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;img_url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://finalspaceapi.com/api/character/avatar/gary_goodspeed.png&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Mooncake&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;species&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Mooncake&#39;s Species&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;gender&quot;</span><span class="token operator">:</span> <span class="token string">&quot;None (referred to as male)&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;hair&quot;</span><span class="token operator">:</span> <span class="token string">&quot;None&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;alias&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Specimen E - 351&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Little Buddy&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;origin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Outer space&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;abilities&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Hovering&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Firing Laser Beams&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Planetary Destruction&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;img_url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://finalspaceapi.com/api/character/avatar/mooncake.jpg&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above implementation of <code>axios.get()</code> is the default and most popular way to make a <code>GET</code> request in the codebase.</p><p>Axios also provides shorthand methods for performing different requests, like so:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">axios</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></span>
<span class="line">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>config<span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, you pass a <code>request config</code> object with the necessary configuration of the request as the argument to the <code>axios.get()</code> method. While there are several options that you can pass to this <code>request config</code> object, here are the most common and popular ones:</p><ul><li><code>URL</code>: The server URL that will be used for the request</li><li><code>baseUrl</code>: When specified, this <code>baseUrl</code> is prepended to <code>url</code> unless the <code>url</code> is absolute</li><li><code>method</code>: Is the request method to be used when making the request</li><li><code>headers</code>: An object with custom headers to be sent with the requestor, like <code>headers: {&#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;}</code></li><li><code>params</code>: An object whose key/value pairs are appended to the <code>url</code> as query strings</li><li><code>auth</code>: An object with a <code>username</code> and <code>password</code> to authenticate an HTTP Basic auth request</li></ul><p>The above Axios request can be rewritten as the following:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Using the Request Config</span></span>
<span class="line"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;https://finalspaceapi.com/api/v0/character/?&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">2</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This object must include the <code>url</code> property to fetch the data. Requests default to the <code>GET</code> request when the <code>method</code> property is not specified.</p><p>When working with Axios, you may need to create custom instances with specific configurations. To create a custom Axios instance, use the <code>axios.create</code> method and pass a configuration object:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> customAxios <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&#39;https://finalspaceapi.com/api/v0/&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, a custom Axios instance was created called <code>customAxios</code> with a base URL, and a timeout of five seconds.</p><p>You can now use the <code>customAxios</code> instance to make requests:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">customAxios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;character/?limit=2&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Requests made with <code>customAxios</code> will inherit its base URL, timeout, headers, and other configurations. This allows you to encapsulate common settings and reuse them across your application.</p><p>You can also pass a <code>responseType</code> option, which indicates the type of data that will be returned by the server to the request config object (set to <code>json</code> by default). For example, you can rewrite the above code like so:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Using the Request Config</span></span>
<span class="line">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://finalspaceapi.com/api/v0/character/?limit=2&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>responseType</code> option can be set to <code>arraybuffer</code>, <code>document</code>, <code>blob</code>, <code>text</code>, or <code>stream</code>. It is essential to set the <code>responseType</code> option when the returned response or data is not in JSON format.</p>`,22)),s("p",null,[n[104]||(n[104]=a("For example, the following code fetches a ")),s("a",U,[e(t,{icon:"fas fa-globe"}),n[103]||(n[103]=a("nature image"))]),n[105]||(n[105]=a(" from Unsplash as a Node stream. You can then use the ")),n[106]||(n[106]=s("code",null,"createWriteStream()",-1)),n[107]||(n[107]=a(" of the inbuilt ")),n[108]||(n[108]=s("code",null,"fs",-1)),n[109]||(n[109]=a(" module and write the fetched stream in a file."))]),n[175]||(n[175]=o(`<p>The following code creates a file named <code>nature.jpg</code> in your project folder:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Axios with responseType - stream</span></span>
<span class="line"><span class="token comment">// GET request for remote image in node.js</span></span>
<span class="line"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;https://images.unsplash.com/photo-1642291555390-6a149527b1fa&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">&#39;stream&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// console.log(response.data.pipe);</span></span>
<span class="line">      response<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;nature.jpg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also use the popular <code>async/await</code> instead of promises. For example, you can rewrite the above code by placing it inside an async function:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Using Asyc/Await</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;https://finalspaceapi.com/api/v0/character/?limit=2&quot;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">getCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("p",null,[n[111]||(n[111]=a("Finally, you can get the data from the response body using ")),s("a",D,[e(t,{icon:"fa-brands fa-firefox"}),n[110]||(n[110]=a("destructuring assignments"))]),n[112]||(n[112]=a(":"))]),n[176]||(n[176]=o(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;https://finalspaceapi.com/api/v0/character/?limit=2&quot;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">getCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="how-to-make-axios-get-requests-with-query-parameters" tabindex="-1"><a class="header-anchor" href="#how-to-make-axios-get-requests-with-query-parameters"><span>How to make Axios <code>GET</code> requests with query parameters</span></a></h2><p>In this section, we will learn how to make Axios <code>GET</code> requests with query parameters.</p>`,4)),s("p",null,[n[113]||(n[113]=a("First, add the following code to the ")),e(t,{icon:"fa-brands fa-js"}),n[114]||(n[114]=s("code",null,"index.js",-1)),n[115]||(n[115]=a(" file:"))]),n[177]||(n[177]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="index.js"><span>index.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Axios GET Query Parameters</span></span>
<span class="line"><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> queryParams <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token string">&quot;desc&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">url<span class="token punctuation">.</span>URLSearchParams</span><span class="token punctuation">(</span>queryParams<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">axios</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://finalspaceapi.com/api/v0/character/?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>params<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In the code above, we use the <code>URLSearchParams</code> method from the <code>url</code> module to convert an object with query parameters as key/value pairs in the required URL query format.</p><p>Here is what the <code>params</code> will look like:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">URLSearchParams <span class="token punctuation">{</span> <span class="token string">&#39;limit&#39;</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sort&#39;</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;desc&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And here is what the returned data looks like:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">47</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Zargon Tukalishi&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Deceased&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;species&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;gender&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Male&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;hair&quot;</span><span class="token operator">:</span> <span class="token string">&quot;None&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;alias&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;origin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Yarno&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;abilities&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;img_url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://finalspaceapi.com/api/character/avatar/zargon_tukalishi.jpg&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="how-to-make-axios-get-requests-with-an-api-key" tabindex="-1"><a class="header-anchor" href="#how-to-make-axios-get-requests-with-an-api-key"><span>How to make Axios <code>GET</code> requests with an API key</span></a></h2>`,8)),s("p",null,[n[117]||(n[117]=a("It is often necessary to authenticate requests by passing an API key along with the request. In this section, we will learn how to use an API key with Axios to make requests. We will use the ")),s("a",F,[e(t,{icon:"fas fa-globe"}),n[116]||(n[116]=a("NASA API"))]),n[118]||(n[118]=a(" as an example."))]),n[178]||(n[178]=s("p",null,[a("First, navigate to "),s("code",null,"https://api.nasa.gov/"),a(" in the browser and fill in the required fields to generate an API key:")],-1)),n[179]||(n[179]=s("figure",null,[s("img",{src:j,alt:"Generate API key page in the NASA API",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Generate API key page in the NASA API")],-1)),n[180]||(n[180]=s("p",null,[a("Click on the "),s("strong",null,"Signup"),a(" button. On the next page, your API key will be shown to you:")],-1)),n[181]||(n[181]=s("figure",null,[s("img",{src:A,alt:"generated key from the NASA API",tabindex:"0",loading:"lazy"}),s("figcaption",null,"generated key from the NASA API")],-1)),s("p",null,[n[120]||(n[120]=a("The API keys should be kept hidden from the public and stored as environment variables inside a ")),e(t,{icon:"fas fa-file-line"}),n[121]||(n[121]=s("code",null,".env",-1)),n[122]||(n[122]=a(" file. ")),s("a",M,[e(t,{icon:"fa-brands fa-npm"}),n[119]||(n[119]=s("code",null,"dotenv",-1))]),n[123]||(n[123]=a(" is a popular npm library used to load environment variables from the ")),e(t,{icon:"fas fa-file-line"}),n[124]||(n[124]=s("code",null,".env",-1)),n[125]||(n[125]=a(" file."))]),n[182]||(n[182]=o(`<p>Run the following command to install the dotenv package:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> <span class="token function">install</span> dotenv</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,2)),s("p",null,[n[126]||(n[126]=a("Next, create a new file named ")),e(t,{icon:"fas fa-file-line"}),n[127]||(n[127]=s("code",null,".env",-1)),n[128]||(n[128]=a(" by running the following command:"))]),n[183]||(n[183]=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">touch</span> .env</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),s("p",null,[n[129]||(n[129]=a("Paste the NASA API key into the ")),e(t,{icon:"fas fa-file-line"}),n[130]||(n[130]=s("code",null,".env",-1)),n[131]||(n[131]=a(" file as shown below:"))]),n[184]||(n[184]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title=".env"><span>.env</span></div><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties"><pre><code class="language-properties"><span class="line"><span class="token key attr-name">NASA_API_KEY</span> <span class="token punctuation">=</span> <span class="token value attr-value">IqIxEkPjdl1Dnl9mjTKU6zTZD0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[132]||(n[132]=a("Now, add the following code to the ")),e(t,{icon:"fa-brands fa-js"}),n[133]||(n[133]=s("code",null,"index.js",-1)),n[134]||(n[134]=a(" file to fetch data from the NASA API:"))]),n[185]||(n[185]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="index.js"><span>index.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Using with API Key</span></span>
<span class="line"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;dotenv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">axios</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://api.nasa.gov/planetary/apod?api_key=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NASA_API_KEY</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In the above code, we import the <code>dotenv</code> package and use the API key in the URL as a query parameter.</p><p>You will need to restart your application, so hit <kbd>Ctrl</kbd>+<kbd>C</kbd> in the terminal and run the command <code>npm run dev</code> to start the Node application.</p><p>You will see a response similar to this from the NASA API:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output.json"><span>output.json</span></div><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;copyright&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Steve Crouch&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2024-02-15&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;explanation&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Shiny NGC 253 is one of the brightest spiral galaxies visible, and also one of the dustiest.  Some call it the Silver Coin Galaxy for its appearance in small telescopes, or just the Sculptor Galaxy for its location within the boundaries of the southern constellation Sculptor.  Discovered in 1783 by mathematician and astronomer Caroline Herschel, the dusty island universe lies a mere 10 million light-years away. About 70 thousand light-years across, NGC 253 is the largest member of the Sculptor Group of Galaxies, the nearest to our own Local Group of Galaxies.  In addition to its spiral dust lanes, tendrils of dust seem to be rising from its galactic disk laced with young star clusters and star forming regions in this colorful galaxy portrait. The high dust content accompanies frantic star formation, earning NGC 253 the designation of a starburst galaxy. NGC 253 is also known to be a strong source of high-energy x-rays and gamma rays, likely due to massive black holes near the galaxy&#39;s center.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;hdurl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://apod.nasa.gov/apod/image/2402/ngc253_STXL6303_RC14_LHaRGB_2023.jpg&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;media_type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;image&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;service_version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;v1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;NGC 253: Dusty Island Universe&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://apod.nasa.gov/apod/image/2402/ngc253_STXL6303_RC14_LHaRGB_2023_1024.jpg&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>You can also use the <code>params</code> option of the request config to make the same request:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// With API Key and params option</span></span>
<span class="line"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;dotenv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://api.nasa.gov/planetary/apod</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">api_key</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NASA_API_KEY</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also authenticate requests with other HTTP authentication methods like Bearer authentication by passing the Bearer Token in the <code>Authorization</code> header. For example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Using Authorization Header</span></span>
<span class="line"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;&lt;ENDPOINT&gt;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">Authorization</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TOKEN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="how-to-make-concurrent-requests-with-axios" tabindex="-1"><a class="header-anchor" href="#how-to-make-concurrent-requests-with-axios"><span>How to make concurrent requests with Axios</span></a></h2><p>You may need to make concurrent requests to multiple endpoints. In this section, we will learn how you can use the <code>axios.all()</code> method to make multiple requests.</p>`,12)),s("p",null,[n[135]||(n[135]=a("To begin, add the following code to the ")),e(t,{icon:"fa-brands fa-js"}),n[136]||(n[136]=s("code",null,"index.js",-1)),n[137]||(n[137]=a(" file:"))]),n[186]||(n[186]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="index.js"><span>index.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Axios.all()</span></span>
<span class="line"><span class="token keyword">const</span> endpoints <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string">&quot;https://rickandmortyapi.com/api/character&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;https://www.breakingbadapi.com/api/characters&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;https://www.breakingbadapi.com/api/episodes&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;https://www.breakingbadapi.com/api/quotes&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>endpoints<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">endpoint</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">allResponses</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    allResponses<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here, we pass an array of <code>axios.get()</code> requests in the <code>axios.all()</code> method, then map over the <code>endpoints</code> array to create an array of <code>axios.get()</code> requests, which are then resolved by the <code>axios.all()</code> method.</p><p>The response order is the same as the order of the requests in the <code>axios.all()</code> method:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">{info: Object, results: Array(20)}</span>
<span class="line">(62) [Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, …]</span>
<span class="line"> (102) [Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, …]</span>
<span class="line">[Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, …]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="axios-interceptors-for-request-and-response-manipulation" tabindex="-1"><a class="header-anchor" href="#axios-interceptors-for-request-and-response-manipulation"><span>Axios interceptors for request and response manipulation</span></a></h2><p>Axios interceptors are functions that Axios allows you to define globally or on a per-request basis to manipulate requests or responses before they are handled by <code>then</code> or <code>catch</code>. This is useful for various purposes, such as adding authentication headers, logging requests, or transforming responses.</p><h3 id="request-interceptors" tabindex="-1"><a class="header-anchor" href="#request-interceptors"><span>Request interceptors</span></a></h3><p>Request interceptors can be used to modify requests before they are sent. This is often used for tasks like adding authentication tokens to requests.</p><p>Here’s an example of a request interceptor:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    config<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token string">&quot;desc&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> config<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;https://finalspaceapi.com/api/v0/character/?&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token string">&quot;desc&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the request interceptor modifies the <code>params</code> object’s <code>limit</code> property to set the limit of the number of results to be returned to <code>1</code> before the GET request is sent.</p><p>Despite explicitly setting <code>limit: 3</code> in the request’s params, the interceptor ensures that only <code>limit: 1</code> is sent to the server. As a result, only <code>1</code> character will be returned:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">47</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Zargon Tukalishi&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Deceased&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;species&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;gender&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Male&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;hair&quot;</span><span class="token operator">:</span> <span class="token string">&quot;None&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;alias&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;origin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Yarno&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;abilities&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;img_url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://finalspaceapi.com/api/character/avatar/zargon_tukalishi.jpg&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here’s an example of adding a Bearer Token to every request using a request interceptor for authentication purposes:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> config<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the request interceptor modifies the <code>config</code> object to include the Bearer Token in the Authorization header before the request is sent.</p><h3 id="response-interceptors" tabindex="-1"><a class="header-anchor" href="#response-interceptors"><span>Response interceptors</span></a></h3><p>Response interceptors allow you to modify responses before they are passed to the <code>then</code> or <code>catch</code> callbacks. This can be useful for tasks like transforming responses into a standardized format.</p><p>Here’s an example of destructuring response bodies using a response interceptor:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> response</span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">return</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;https://finalspaceapi.com/api/v0/character/?&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;First character name: &#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> response<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">getCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the response interceptor uses destructuring to extract the name of the first character stored in the response body.</p><p>After running the code, you should see the following output in the terminal:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">First character name:  Gary Goodspeed</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><h3 id="removing-interceptors" tabindex="-1"><a class="header-anchor" href="#removing-interceptors"><span>Removing interceptors</span></a></h3><p>To remove a request or response interceptor, you need to store the interceptor number and then call the <code>request.eject()</code> or <code>response.eject()</code> method.</p><p>Here’s how to remove a request interceptor:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> myInterceptor <span class="token operator">=</span> axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">eject</span><span class="token punctuation">(</span>myInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Here’s how to remove a response interceptor:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> myInterceptor <span class="token operator">=</span> axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">eject</span><span class="token punctuation">(</span>myInterceptor<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="error-handling-in-axios" tabindex="-1"><a class="header-anchor" href="#error-handling-in-axios"><span>Error handling in Axios</span></a></h2><p>In this section, we will discuss how to handle errors with Axios, which includes catching errors and retrying requests.</p><h3 id="catching-errors" tabindex="-1"><a class="header-anchor" href="#catching-errors"><span>Catching errors</span></a></h3><p>The most common way to catch errors is to chain a <code>.catch()</code> method with the <code>axios.get()</code> to catch any errors that may occur.</p>`,35)),s("p",null,[n[138]||(n[138]=a("Add the following code to the ")),e(t,{icon:"fa-brands fa-js"}),n[139]||(n[139]=s("code",null,"index.js",-1)),n[140]||(n[140]=a(" file:"))]),n[187]||(n[187]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="index.js"><span>index.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">axios</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://rickandmortyapi.com/api/character/-1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In the code above, we are trying to fetch a character from The Rick and Morty API whose <code>id</code> is <code>-1</code>, and because there is no such character with a negative <code>id</code>, this request will result in an error.</p><p>The above <code>catch</code> block consoles any error that may occur. This error object is quite large, and you may not always display everything, so you can be selective about what to log to the error message.</p>`,3)),s("p",null,[n[141]||(n[141]=a("You can also handle errors based on their types. Add the following code to the ")),e(t,{icon:"fa-brands fa-js"}),n[142]||(n[142]=s("code",null,"index.js",-1)),n[143]||(n[143]=a(" file:"))]),n[188]||(n[188]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="index.js"><span>index.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Error Handling - Error Specific</span></span>
<span class="line">axios</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://rickandmortyapi.com/api/character/-1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>If the error occurred on the server side, then the <code>error</code> object will contain a <code>response</code> property that can be used to access the error’s <code>status</code>, <code>headers</code>, and other details.</p><p>If the request was made and no response was received, then the <code>error</code> object will contain the <code>request</code> property <code>XMLHttpRequest</code> in the browser, and an instance of <code>http.ClientRequest</code> in Node.</p><p>If an error occurred while making the request, then <code>error.message</code> will indicate such errors.</p><p>Because the error in the above code occurred on the server side, the <code>error</code> object will have a <code>response</code> property, and the following message will be seen in the terminal:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">{ error: &#39;Character not found&#39; }</span>
<span class="line">404</span>
<span class="line">Object [AxiosHeaders] {</span>
<span class="line">  &#39;access-control-allow-origin&#39;: &#39;*&#39;,</span>
<span class="line">  age: &#39;0&#39;,</span>
<span class="line">  &#39;cache-status&#39;: &#39;&quot;Netlify Edge&quot;; fwd=miss&#39;,</span>
<span class="line">  &#39;content-length&#39;: &#39;31&#39;,</span>
<span class="line">  &#39;content-type&#39;: &#39;application/json; charset=utf-8&#39;,</span>
<span class="line">  date: &#39;Thu, 15 Feb 2024 16:52:23 GMT&#39;,</span>
<span class="line">  etag: &#39;W/&quot;1f-t9l5xVmJZaPHJIukjZQ7Mw4gpG8&quot;&#39;,</span>
<span class="line">  &#39;netlify-vary&#39;: &#39;query&#39;,</span>
<span class="line">  server: &#39;Netlify&#39;,</span>
<span class="line">  &#39;strict-transport-security&#39;: &#39;max-age=31536000&#39;,</span>
<span class="line">  &#39;x-nf-request-id&#39;: &#39;01HPPTXZK9TK016KN52NQ2XNNX&#39;,</span>
<span class="line">  &#39;x-powered-by&#39;: &#39;Express&#39;,</span>
<span class="line">  connection: &#39;close&#39;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>You can also throw an error by using the <code>validateStatus</code> request config option. For example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Error Handling with validateStatus option</span></span>
<span class="line">axios</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://rickandmortyapi.com/api/character/-1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">validateStatus</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> status <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span> <span class="token comment">// Reject only if the status code is less than 500</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This option will throw an error when the response’s <code>status</code> satisfies the condition in it. You will see a message similar to this in the terminal:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token punctuation">{</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&#39;Character not found&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="retrying-failed-requests-with-the-axios-retryplugin" tabindex="-1"><a class="header-anchor" href="#retrying-failed-requests-with-the-axios-retryplugin"><span>Retrying failed requests with the <code>axios-retry</code>plugin</span></a></h3>`,11)),s("p",null,[n[145]||(n[145]=a("In some cases, it’s useful to automatically retry failed requests. The ")),s("a",L,[e(t,{icon:"fa-brands fa-npm"}),n[144]||(n[144]=s("code",null,"axios-retry",-1))]),n[146]||(n[146]=a(" plugin provides an easy way to do this with Axios. Here’s how you can use it:"))]),s("p",null,[n[148]||(n[148]=a("First, install the ")),s("a",Y,[e(t,{icon:"fa-brands fa-npm"}),n[147]||(n[147]=s("code",null,"axios-retry",-1))]),n[149]||(n[149]=a(" package from npm:"))]),n[189]||(n[189]=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> <span class="token function">install</span> axios-retry</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Restart your application, press <kbd>Ctrl</kbd>+<kbd>C</kbd> in the terminal to stop the current process, and then run the command <code>npm run dev</code> to start the Node application.</p><p>Next, import Axios and axios-retry in your file:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;axios&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> axiosRetry <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;axios-retry&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, you can configure Axios to use the retry plugin:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">axiosRetry</span><span class="token punctuation">(</span>axios<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">retries</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">onRetry</span><span class="token operator">:</span> onRetry <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Here, you pass an Axios instance as the first parameter and an Axios retry config options object as the second. The <code>retries</code> property in the config object sets the number of retries to three and the <code>onRetry</code> property sets a callback function to be called when a retry occurs.</p><p>Now, when you make a request with Axios, it will automatically retry the request if it fails. For example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com/data&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Request failed:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">onRetry</span><span class="token punctuation">(</span><span class="token parameter">retryCount<span class="token punctuation">,</span> error<span class="token punctuation">,</span> requestConfig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>retryCount<span class="token punctuation">,</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If the request fails, <code>axios-retry</code> will automatically retry it up to the specified number of times (three, in this case), and each time, it will print the retry count and the error message to the console.</p><p>After running the code above, you should see the following output:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">1 getaddrinfo ENOTFOUND api.example.com</span>
<span class="line">2 getaddrinfo ENOTFOUND api.example.com</span>
<span class="line">3 getaddrinfo ENOTFOUND api.example.com</span>
<span class="line">Request failed: getaddrinfo ENOTFOUND api.example.com</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>You can also define a custom retry strategy. For example, to retry only on specific status codes:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">axiosRetry</span><span class="token punctuation">(</span>axios<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">retryCondition</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> axiosRetry<span class="token punctuation">.</span><span class="token function">isNetworkError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">||</span> axiosRetry<span class="token punctuation">.</span><span class="token function">isRetryableError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">429</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the request will be retried if there is a network error, a retryable error, or if the response status code is 429 (Too Many Requests).</p><p><code>axios-retry</code> also supports exponential backoff, which means it will wait longer between retries. To enable exponential backoff, simply set the <code>retryDelay</code> config option:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">axiosRetry</span><span class="token punctuation">(</span>axios<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">retryDelay</span><span class="token operator">:</span> axiosRetry<span class="token punctuation">.</span>exponentialDelay</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will use an exponential backoff strategy with a default factor of two (each retry will wait twice as long as the previous one).</p><hr><h2 id="how-to-cancel-requests-with-axios-signal" tabindex="-1"><a class="header-anchor" href="#how-to-cancel-requests-with-axios-signal"><span>How to cancel requests with Axios <code>signal</code></span></a></h2><p>Axios provides a convenient feature called <code>signal</code> for canceling requests. This functionality proves invaluable in scenarios where a user navigates away from a page, a component is unmounted before a request completes, or the network connection becomes unavailable.</p>`,21)),s("p",null,[n[151]||(n[151]=a("To use Axios ")),n[152]||(n[152]=s("code",null,"signal",-1)),n[153]||(n[153]=a(" for canceling requests, you first need to create an instance of the ")),e(c,{to:"/blog.logrocket.com/complete-guide-abortcontroller-node-js.html"},{default:p(()=>n[150]||(n[150]=[s("strong",null,[s("code",null,"AbortController")],-1)])),_:1,__:[150]}),n[154]||(n[154]=a(" interface. This controller enables you to signal that an operation should be aborted. Here’s how you can integrate it with Axios:"))]),n[190]||(n[190]=o(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">newAbortSignal</span><span class="token punctuation">(</span><span class="token parameter">timeoutMs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> abortController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    abortController<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;request cancelled&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> timeoutMs <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> abortController<span class="token punctuation">.</span>signal<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://finalspaceapi.com/api/v0/character/?limit=2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">signal</span><span class="token operator">:</span> <span class="token function">newAbortSignal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;response&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>status<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the example above, a function named <code>newAbortSignal()</code> was defined. Inside this function, an <code>AbortController</code> is created to manage the cancellation of the request. A <code>setTimeout()</code> function is used to call abort on the <code>AbortController</code> after the specified timeout. The function then returns the signal from the <code>AbortController</code>, which will be used to cancel the request.</p><p>Next, an Axios GET request is made to the Final Space API endpoint, and the custom abort signal created by <code>newAbortSignal(100)</code> is passed to the request configuration using the signal option. As a result, if the Final Space API server takes longer than 100 milliseconds to send a response, the request will be canceled and an error message will be logged to the console.</p><p>You should see an output similar to the following on your console after running this code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">request cancelled</span>
<span class="line">canceled</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="how-to-make-head-requests-with-axios" tabindex="-1"><a class="header-anchor" href="#how-to-make-head-requests-with-axios"><span>How to make <code>HEAD</code> requests with Axios</span></a></h2><p>A <code>HEAD</code> request is a <code>GET</code> request without a message body. You can create a <code>HEAD</code> request with the <code>axios.head</code> method. The <code>data</code> property in the <code>response</code> object will be empty with such requests.</p><p>For example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Axios Head Request</span></span>
<span class="line">axios<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token string">&quot;https://rickandmortyapi.com/api/character/1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Status: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - Server: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>server<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - Data: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>response<span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here is the message you will see in the terminal:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">Status: 200 - Server: Netlify - Data: </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, we discussed what Axios is and how can you use it to make <code>GET</code> requests, exploring how to efficiently fetch data, handle errors, and enhance request performance. Axio’s flexibility and strength in handling API communication make it an extremely important tool in modern web development.</p><p>I hope you’re able to use this guide as your first step toward becoming proficient in API integration.</p>`,16)),q(" TODO: add ARTICLE CARD "),e(d,m(v({title:"Understanding Axios GET requests",desc:"Make Axios GET requests, explore how to efficiently fetch data, handle errors, and enhance request performance.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/understanding-axios-get-requests.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const V=h(T,[["render",B]]),K=JSON.parse('{"path":"/blog.logrocket.com/understanding-axios-get-requests.html","title":"Understanding Axios GET requests","lang":"en-US","frontmatter":{"lang":"en-US","title":"Understanding Axios GET requests","description":"Article(s) > Understanding Axios GET requests","icon":"iconfont icon-axios","category":["Node.js","Axios","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","axios"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Understanding Axios GET requests\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-axios-get-requests/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-axios-get-requests/Generate-NASA-API-key.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-axios-get-requests/Generated-NASA-API-key.png\\"],\\"datePublished\\":\\"2024-02-09T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ashutosh Singh\\",\\"url\\":\\"https://blog.logrocket.com/author/ashutoshsingh/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/understanding-axios-get-requests.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Understanding Axios GET requests"}],["meta",{"property":"og:description","content":"Article(s) > Understanding Axios GET requests"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-axios-get-requests/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/understanding-axios-get-requests/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Understanding Axios GET requests"}],["meta",{"property":"article:author","content":"Ashutosh Singh"}],["meta",{"property":"article:tag","content":"axios"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-02-09T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Understanding Axios GET requests"},{"property":"og:description","content":"Understanding Axios GET requests"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/understanding-axios-get-requests.html"}]],"prev":"/programming/js-axios/articles/README.md","date":"2024-02-09T00:00:00.000Z","isOriginal":false,"author":[{"name":"Ashutosh Singh","url":"https://blog.logrocket.com/author/ashutoshsingh/"}],"cover":"/assets/image/blog.logrocket.com/understanding-axios-get-requests/banner.png"},"git":{},"readingTime":{"minutes":15.92,"words":4775},"filePathRelative":"blog.logrocket.com/understanding-axios-get-requests.md","copyright":{"author":"Ashutosh Singh"}}');export{V as comp,K as data};
