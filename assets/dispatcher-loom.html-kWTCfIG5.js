import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as a,f as s,b as u,a as d,t as m,n as t,g as o,r as i,o as k}from"./app-BVguHYKu.js";const g={},h={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"};function b(c,n){const e=i("VPCard"),p=i("SiteInfo");return k(),r("div",null,[a("h1",h,[a("a",v,[a("span",null,m(c.$frontmatter.title)+" 관련",1)])]),s(e,t(o({title:"Java > Article(s)",desc:"Article(s)",link:"/programming/java/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n[0]||(n[0]=a("nav",{class:"table-of-contents"},[a("ul")],-1)),n[1]||(n[1]=a("hr",null,null,-1)),s(p,{name:"Running Kotlin coroutines on Project Loom's virtual threads",desc:"How to use Project Loom to improve Coroutines performance.",url:"https://kt.academy/article/dispatcher-loom",logo:"https://kt.academy/logo.png",preview:"https://marcinmoskala.com/kt-academy-articles/promotion/dispatcher-loom.png"}),n[2]||(n[2]=u(`<p>If you want to run asynchronous or non-blocking code in Kotlin, you have to run it inside a <code>CoroutineScope</code>. If you’re dealing with callbacks, you have to convert it to a suspending function with <code>suspendCancellableCoroutine</code> so that you can call it inside a <code>CoroutineScope</code>:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@ExperimentalCoroutinesApi</span></span>
<span class="line"><span class="token keyword">suspend</span> <span class="token keyword">fun</span> Blah<span class="token punctuation">.</span><span class="token function">doSomethingSuspending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> suspendCancellableCoroutine <span class="token punctuation">{</span> continuation <span class="token operator">-&gt;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onSuccess</span> <span class="token punctuation">{</span></span>
<span class="line">    continuation<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span></span>
<span class="line">      value <span class="token operator">=</span> it<span class="token punctuation">,</span></span>
<span class="line">      onCancellation <span class="token operator">=</span> continuation<span class="token operator">::</span>cancel</span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onError</span> <span class="token punctuation">{</span></span>
<span class="line">    continuation<span class="token punctuation">.</span><span class="token function">resumeWithException</span><span class="token punctuation">(</span>exception <span class="token operator">=</span> it<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onCancel</span> <span class="token punctuation">{</span></span>
<span class="line">    continuation<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span>cause <span class="token operator">=</span> it<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For blocking code, unfortunately, you are stuck with <code>Dispatchers.IO</code>, which is a giant thread pool where each dispatch is still blocking a thread:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">blockingFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What if instead of blocking a regular thread, we run it on one of Project Loom’s virtual threads, effectively turning the blocking code into something non-blocking while still being Coroutine compatible?</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>LOOM<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">blockingFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For this to work, let’s first enable JDK19’s preview features with some VM options so that we can make use of virtual threads:</p><p>Next, we need to define our custom Dispatcher. If you want to customize how the Dispatcher works, you can extend ExecutorCoroutineDispatcher …</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> Dispatchers<span class="token punctuation">.</span>LOOM<span class="token operator">:</span> CoroutineDispatcher</span>
<span class="line">  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">ExecutorCoroutineDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Executor <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">val</span> executor<span class="token operator">:</span> Executor</span>
<span class="line">      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">error</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Cannot be invoked on Dispatchers.LOOM&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">,</span> block<span class="token operator">:</span> Runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      Thread<span class="token punctuation">.</span><span class="token function">startVirtualThread</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">     </span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">execute</span><span class="token punctuation">(</span>command<span class="token operator">:</span> Runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      Thread<span class="token punctuation">.</span><span class="token function">startVirtualThread</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">     </span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Dispatchers.LOOM&quot;</span></span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>or we can create an ExecutorService and convert it to a Dispatcher:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> Dispatchers<span class="token punctuation">.</span>LOOM<span class="token operator">:</span> CoroutineDispatcher</span>
<span class="line">  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newVirtualThreadPerTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asCoroutineDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>We’ll use <code>Thread.sleep</code> as a placeholder for blocking functions:</p><figure><img src="https://marcinmoskala.com/kt-academy-articles/images/loom/image7.png&amp;w=3840&amp;q=75" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>IntelliJ warns us that <code>Thread.sleep</code> is a blocking function inside a non-blocking context, even though our goal is to run blocking code inside this context. Let’s get rid of this warning.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> Dispatchers<span class="token punctuation">.</span>LOOM<span class="token operator">:</span> <span class="token annotation builtin">@BlockingExecutor</span> CoroutineDispatcher</span>
<span class="line">  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newVirtualThreadPerTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asCoroutineDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>If we include JetBrains Java Annotations (org.jetbrains:annotations) as a dependency, we get access to @BlockingExecutor, which marks our CoroutinesDispatcher as blocking-compatible.</p><figure><img src="https://marcinmoskala.com/kt-academy-articles/images/loom/image9.png&amp;w=3840&amp;q=75" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Let’s launch a million blocking calls and see how long it takes! We’ll be using supervisory scope so that we can wait for all 1 million launches to finish before capturing the duration.</p><p>If we’re using <code>Dispatchers.IO</code>, we’re expecting the total duration to be 1 million x 1000 ms / 64 actual threads, which should be roughly 4 hours and 20 minutes (assuming <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-i-o_-p-a-r-a-l-l-e-l-i-s-m_-p-r-o-p-e-r-t-y_-n-a-m-e.html" target="_blank" rel="noopener noreferrer"><code>IO_PARALLELISM_PROPERTY_NAME</code></a> was left untouched at its default of 64)</p><figure><img src="https://marcinmoskala.com/kt-academy-articles/images/loom/image10.png&amp;w=3840&amp;q=75" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Nothing stops you from doing <code>Dispatchers.IO.limitedParallelism(1_000_000)</code>, but let me know how long your computer runs before it becomes completely unresponsive.</p><p>If we use something more realistic like 5_000, we can expect the total duration to be 1 million x 1000ms / 5000 actual threads, which should be roughly 3 minutes and 20 seconds</p><figure><img src="https://marcinmoskala.com/kt-academy-articles/images/loom/image3.png&amp;w=3840&amp;q=75" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>If I push for 10_000 threads, my computer just becomes completely unresponsive, so that seems to be bordering on how fast we can go using <code>Dispatchers.IO</code>.</p><p>Launching the same number of blocking calls inside our LOOM Dispatcher, we’re expecting the total duration to be 1 million x 1000 ms / 1 million virtual threads, and we should finish in roughly 1 second, assuming JVM warmup and no overheads.</p><figure><img src="https://marcinmoskala.com/kt-academy-articles/images/loom/image5.png&amp;w=3840&amp;q=75" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>In the real world, however, we have some overhead, and not warming up the JVM will penalize us too, so we end up with ~6 seconds instead of the predicted 1 second. Still, that is +30x faster than what we could achieve with <code>Dispatchers.IO</code>.</p><p>If we compare this with launching 1 million non-blocking calls in a <code>CoroutineScope</code>, we’re expecting a duration in the same ballpark.</p><figure><img src="https://marcinmoskala.com/kt-academy-articles/images/loom/image6.png&amp;w=3840&amp;q=75" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Let’s compare some under-the-hood stats!</p><p>If we launch a million <code>Thread.sleeps</code> inside <code>Dispatchers.IO</code> with parallelism set to 5000, notice how the CPU consumption is almost zero most of the time and the number of threads being 5556. Threads context switching seems to be our limiting factor here rather than CPU / Memory.</p><figure><img src="https://marcinmoskala.com/kt-academy-articles/images/loom/image1.png&amp;w=3840&amp;q=75" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>If we launch a million <code>Thread.sleeps</code> inside <code>Dispatchers.LOOM</code>, you can see the thread count stays relatively low peaking at 30, but it maximizes CPU usage.</p><figure><img src="https://marcinmoskala.com/kt-academy-articles/images/loom/image4.png&amp;w=3840&amp;q=75" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Of those 30 threads, 12 are worker threads that are there by default when using Coroutines (equivalent to the number of CPU cores) and 1 thread is marked “VirtualThread-unparker” while the rest are related to IntelliJ and / or VisualVM.</p><figure><img src="https://marcinmoskala.com/kt-academy-articles/images/loom/image2.png&amp;w=3840&amp;q=75" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>In conclusion: with our custom LOOM Dispatcher, we are now able to convert blocking code into non-blocking coroutine-compatible code instead of being limited by <code>Dispatchers.IO</code>.</p>`,37)),d(" TODO: add ARTICLE CARD "),s(e,t(o({title:"Running Kotlin coroutines on Project Loom's virtual threads",desc:"How to use Project Loom to improve Coroutines performance.",link:"https://chanhi2000.github.io/bookshelf/kt.academy/dispatcher-loom.html",logo:"https://kt.academy/logo.png",background:"rgba(243,139,49,0.2)"})),null,16)])}const w=l(g,[["render",b]]),x=JSON.parse(`{"path":"/kt.academy/dispatcher-loom.html","title":"Running Kotlin coroutines on Project Loom's virtual threads","lang":"en-US","frontmatter":{"lang":"en-US","title":"Running Kotlin coroutines on Project Loom's virtual threads","description":"Article(s) > Running Kotlin coroutines on Project Loom's virtual threads","icon":"iconfont icon-kotlin","category":["Java","Kotlin","Article(s)"],"tag":["blog","kt.academy","java","kotlin"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Running Kotlin coroutines on Project Loom's virtual threads\\",\\"image\\":[\\"https://marcinmoskala.com/kt-academy-articles/images/loom/image7.png&w=3840&q=75\\",\\"https://marcinmoskala.com/kt-academy-articles/images/loom/image9.png&w=3840&q=75\\",\\"https://marcinmoskala.com/kt-academy-articles/images/loom/image10.png&w=3840&q=75\\",\\"https://marcinmoskala.com/kt-academy-articles/images/loom/image3.png&w=3840&q=75\\",\\"https://marcinmoskala.com/kt-academy-articles/images/loom/image5.png&w=3840&q=75\\",\\"https://marcinmoskala.com/kt-academy-articles/images/loom/image6.png&w=3840&q=75\\",\\"https://marcinmoskala.com/kt-academy-articles/images/loom/image1.png&w=3840&q=75\\",\\"https://marcinmoskala.com/kt-academy-articles/images/loom/image4.png&w=3840&q=75\\",\\"https://marcinmoskala.com/kt-academy-articles/images/loom/image2.png&w=3840&q=75\\"],\\"datePublished\\":\\"2023-01-09T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jan Vladimir Mostert\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/kt.academy/dispatcher-loom.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Running Kotlin coroutines on Project Loom's virtual threads"}],["meta",{"property":"og:description","content":"Article(s) > Running Kotlin coroutines on Project Loom's virtual threads"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://marcinmoskala.com/kt-academy-articles/promotion/dispatcher-loom.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://marcinmoskala.com/kt-academy-articles/promotion/dispatcher-loom.png"}],["meta",{"name":"twitter:image:alt","content":"Running Kotlin coroutines on Project Loom's virtual threads"}],["meta",{"property":"article:author","content":"Jan Vladimir Mostert"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"kt.academy"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-01-09T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Running Kotlin coroutines on Project Loom's virtual threads"},{"property":"og:description","content":"Running Kotlin coroutines on Project Loom's virtual threads"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/kt.academy/dispatcher-loom.html"}]],"prev":"/programming/java/articles/README.md","date":"2023-01-09T00:00:00.000Z","isOriginal":false,"author":"Jan Vladimir Mostert","cover":"https://marcinmoskala.com/kt-academy-articles/promotion/dispatcher-loom.png"},"git":{},"readingTime":{"minutes":3.41,"words":1024},"filePathRelative":"kt.academy/dispatcher-loom.md","copyright":{"author":"Jan Vladimir Mostert"}}`);export{w as comp,x as data};
