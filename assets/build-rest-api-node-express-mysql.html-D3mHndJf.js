import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as e,b as p,e as a,a as b,t as f,n as r,g as d,w as o,r as c,o as y}from"./app-BVguHYKu.js";const h="/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/banner.png",w="/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/db4free-signup-page.png",j="/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/db3free-registration-options.png",x="/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/creating-programming-languages-table.png",T="/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/adding-rows-programming-languages-table.png",q="/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/node-project-folder-structure-layout.png",E="/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/GET-endpint-node-index-output.png",L="/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/code-output.png",S={},P={id:"frontmatter-title-관련",tabindex:"-1"},R={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"},I={class:"hint-container note"},M={href:"https://blog.logrocket.com/author/ikehakinyemi/",target:"_blank",rel:"noopener noreferrer"},N={class:"hint-container note"},C={href:"https://github.com/atharvadeosthale/rest-api-mysql-article",target:"_blank",rel:"noopener noreferrer"},O={href:"https://survey.stackoverflow.co/2023/#databases:~:text=in%20that%20row.",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://mysql.com/products/community/",target:"_blank",rel:"noopener noreferrer"},U={href:"https://db4free.net/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://db4free.net/signup.php",target:"_blank",rel:"noopener noreferrer"},W={href:"https://madnight.github.io/githut/#/pull_requests/2020/4",target:"_blank",rel:"noopener noreferrer"},F={href:"https://pypl.github.io/PYPL.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://tiobe.com/tiobe-index/",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/helmetjs/helmet",target:"_blank",rel:"noopener noreferrer"},B={href:"https://quora.com/How-can-I-convert-cURL-code-to-Postman",target:"_blank",rel:"noopener noreferrer"},$={href:"https://github.com/sideway/joi",target:"_blank",rel:"noopener noreferrer"},V={href:"https://codesandbox.io/p/sandbox/vibrant-germain-vys3gz?file=%2Fsrc%2Findex.js%3A1%2C1",target:"_blank",rel:"noopener noreferrer"};function z(k,n){const u=c("VPCard"),l=c("router-link"),g=c("SiteInfo"),t=c("VPIcon"),i=c("RouteLink");return y(),v("div",null,[s("h1",P,[s("a",R,[s("span",null,f(k.$frontmatter.title)+" 관련",1)])]),e(u,r(d({title:"Express.js > Article(s)",desc:"Article(s)",link:"/programming/js-express/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(u,r(d({title:"MySQL > Article(s)",desc:"Article(s)",link:"/data-science/mysql/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",A,[s("ul",null,[s("li",null,[e(l,{to:"#what-is-mysql"},{default:o(()=>n[0]||(n[0]=[a("What is MySQL?")])),_:1,__:[0]})]),s("li",null,[e(l,{to:"#setting-up-our-mysql-database"},{default:o(()=>n[1]||(n[1]=[a("Setting up our MySQL database")])),_:1,__:[1]}),s("ul",null,[s("li",null,[e(l,{to:"#adding-demo-rows-for-programming-languages"},{default:o(()=>n[2]||(n[2]=[a("Adding demo rows for programming languages")])),_:1,__:[2]})])])]),s("li",null,[e(l,{to:"#what-is-rest-api"},{default:o(()=>n[3]||(n[3]=[a("What is REST API?")])),_:1,__:[3]})]),s("li",null,[e(l,{to:"#setting-up-express-js-for-our-rest-api"},{default:o(()=>n[4]||(n[4]=[a("Setting up Express.js for our REST API")])),_:1,__:[4]})]),s("li",null,[e(l,{to:"#rest-api-project-structure"},{default:o(()=>n[5]||(n[5]=[a("REST API project structure")])),_:1,__:[5]})]),s("li",null,[e(l,{to:"#get-popular-programming-languages"},{default:o(()=>n[6]||(n[6]=[a("GET popular programming languages")])),_:1,__:[6]})]),s("li",null,[e(l,{to:"#post-a-new-programming-language"},{default:o(()=>n[7]||(n[7]=[a("POST a new programming language")])),_:1,__:[7]})]),s("li",null,[e(l,{to:"#put-to-update-an-existing-programming-language"},{default:o(()=>n[8]||(n[8]=[a("PUT to update an existing programming language")])),_:1,__:[8]})]),s("li",null,[e(l,{to:"#delete-a-programming-language"},{default:o(()=>n[9]||(n[9]=[a("DELETE a programming language")])),_:1,__:[9]})]),s("li",null,[e(l,{to:"#testing-our-apis"},{default:o(()=>n[10]||(n[10]=[a("Testing our APIs")])),_:1,__:[10]})]),s("li",null,[e(l,{to:"#advanced-example-using-store-procedures"},{default:o(()=>n[11]||(n[11]=[a("Advanced example: Using store procedures")])),_:1,__:[11]}),s("ul",null,[s("li",null,[e(l,{to:"#multi-table-joins"},{default:o(()=>n[12]||(n[12]=[a("Multi-table joins")])),_:1,__:[12]})]),s("li",null,[e(l,{to:"#full-text-search"},{default:o(()=>n[13]||(n[13]=[a("Full-text search")])),_:1,__:[13]})]),s("li",null,[e(l,{to:"#transaction-management"},{default:o(()=>n[14]||(n[14]=[a("Transaction management")])),_:1,__:[14]})])])]),s("li",null,[e(l,{to:"#why-not-just-use-an-orm"},{default:o(()=>n[15]||(n[15]=[a("Why not just use an ORM?")])),_:1,__:[15]})]),s("li",null,[e(l,{to:"#conclusion"},{default:o(()=>n[16]||(n[16]=[a("Conclusion")])),_:1,__:[16]})])])]),n[180]||(n[180]=s("hr",null,null,-1)),e(g,{name:"Build a REST API with Node.js, Express, and MySQL",desc:"Build a REST API with Node.js, Express, and MySQL. This guide covers database setup, routing, and CRUD operations for backend development.",url:"https://blog.logrocket.com/build-rest-api-node-express-mysql",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/banner.png"}),s("div",I,[n[20]||(n[20]=s("p",{class:"hint-container-title"},"Editor’s note",-1)),s("p",null,[n[18]||(n[18]=a("This article was last updated by ")),s("a",M,[e(t,{icon:"fas fa-globe"}),n[17]||(n[17]=a("Ikeh Akinyemi"))]),n[19]||(n[19]=a(" on 21 October 2024 to cover advanced MySQL query techniques like multi-table joins, full-text search, and transaction management."))])]),n[181]||(n[181]=s("figure",null,[s("img",{src:h,alt:"Build A REST API With Node.js, Express, And MySQL",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Build A REST API With Node.js, Express, And MySQL")],-1)),s("p",null,[n[21]||(n[21]=a("To use MySQL with Node.js, you need to integrate a MySQL driver into your Node.js application. The most popular and robust option is the ")),e(t,{icon:"fa-brands fa-npm"}),n[22]||(n[22]=s("code",null,"mysql2",-1)),n[23]||(n[23]=a(" package, which provides both callback-based and Promise-based interfaces for executing MySQL queries. Here’s a quick example of how to connect and query a MySQL database in Node.js:"))]),n[182]||(n[182]=p(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql2/promise&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">connectToDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;your_username&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;your_password&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;your_database&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Execute a simple query</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>rows<span class="token punctuation">,</span> fields<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&#39;SELECT * FROM users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Query results:&#39;</span><span class="token punctuation">,</span> rows<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Database connection failed:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[25]||(n[25]=a("When choosing a database for your Node.js application, you have several excellent options. While MongoDB is often associated with Node.js in the MEAN/MERN stack, relational databases like MySQL, PostgreSQL, and SQLite are equally powerful choices. MySQL stands out for its feature set, extensive community support, and excellent performance with Node.js monolithic and ")),e(i,{to:"/blog.logrocket.com/building-microservices-node-js.html"},{default:o(()=>n[24]||(n[24]=[s("strong",null,"microservice",-1)])),_:1,__:[24]}),n[26]||(n[26]=a(" applications — especially when working with structured data or building on existing MySQL infrastructure."))]),n[183]||(n[183]=s("p",null,"In this tutorial, we’ll learn how to build a complete REST API using MySQL as our database and Node.js with the Express.js framework. Our example API will track popular programming languages, demonstrating key concepts like data modeling, CRUD operations, and proper API design.",-1)),s("div",N,[n[33]||(n[33]=s("p",{class:"hint-container-title"},"Prerequisites",-1)),n[34]||(n[34]=s("p",null,"To follow along with this article, you should have the following:",-1)),s("ul",null,[n[30]||(n[30]=s("li",null,"Understanding of how MySQL and relational databases work in general",-1)),n[31]||(n[31]=s("li",null,"Basic knowledge of Node.js and Express.js",-1)),s("li",null,[n[28]||(n[28]=a("Understanding of what ")),e(i,{to:"/blog.logrocket.com/nodejs-expressjs-postgresql-crud-rest-api-example.html#whatisarestfulapi"},{default:o(()=>n[27]||(n[27]=[s("strong",null,"REST (representational state transfer) APIs",-1)])),_:1,__:[27]}),n[29]||(n[29]=a(" are and how they function"))]),n[32]||(n[32]=s("li",null,[a("Knowledge of what CRUD (create, read, update, delete) is and how it relates to the HTTP "),s("code",null,"GET"),a(", "),s("code",null,"POST"),a(", "),s("code",null,"PUT"),a(", and "),s("code",null,"DELETE"),a(" methods")],-1))])]),s("p",null,[n[39]||(n[39]=a("The code in this tutorial is performed on a Mac with Node 14 LTS installed. You can use ")),e(i,{to:"/blog.logrocket.com/node-js-docker-improve-dx.html"},{default:o(()=>n[35]||(n[35]=[s("strong",null,"Node.js, Docker, and Docker Compose",-1)])),_:1,__:[35]}),n[40]||(n[40]=a(" to improve your developer experience. You can also access the full code at this ")),s("a",C,[n[36]||(n[36]=a("GitHub repository (")),e(t,{icon:"iconfont icon-github"}),n[37]||(n[37]=s("code",null,"atharvadeosthale/rest-api-mysql-article",-1)),n[38]||(n[38]=a(")"))]),n[41]||(n[41]=a(". Now, let’s get started!"))]),n[184]||(n[184]=s("hr",null,null,-1)),n[185]||(n[185]=s("h2",{id:"what-is-mysql",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#what-is-mysql"},[s("span",null,"What is MySQL?")])],-1)),n[186]||(n[186]=s("p",null,"MySQL is a feature-packed relational database first released in 1995. It runs on all major operating systems, like Linux, Windows, and macOS.",-1)),s("p",null,[n[44]||(n[44]=a("MySQL is one of the most popular databases worldwide. Per the ")),s("a",O,[e(t,{icon:"fa-brands fa-stack-overflow"}),n[42]||(n[42]=a("2023 Stack Overflow survey"))]),n[45]||(n[45]=a(", MySQL was the most-loved database, with more than 41 percent of respondents using it. The ")),s("a",Q,[e(t,{icon:"iconfont icon-mysql"}),n[43]||(n[43]=a("community edition"))]),n[46]||(n[46]=a(" is available for free, and it is supported by a large and active community."))]),n[187]||(n[187]=s("p",null,"Because of its features and its cost-effectiveness, MySQL is used by big enterprises and new startups alike. For our example REST API, we’ll use a free MySQL service instead of setting up a local MySQL server.",-1)),n[188]||(n[188]=s("hr",null,null,-1)),n[189]||(n[189]=s("h2",{id:"setting-up-our-mysql-database",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#setting-up-our-mysql-database"},[s("span",null,"Setting up our MySQL database")])],-1)),s("p",null,[n[49]||(n[49]=a("To host our testing MySQL 8.0 database, we’ll use ")),s("a",U,[e(t,{icon:"fas fa-globe"}),n[47]||(n[47]=a("db4free.net"))]),n[50]||(n[50]=a(". First, go to the ")),s("a",D,[e(t,{icon:"fas fa-globe"}),n[48]||(n[48]=a("db4free signup page"))]),n[51]||(n[51]=a(", then fill out the required details by choosing your database name and username:"))]),n[190]||(n[190]=p('<figure><img src="'+w+'" alt="Db4free Signup Page" tabindex="0" loading="lazy"><figcaption>Db4free Signup Page</figcaption></figure><p>Click on <strong>Signup</strong>, and you should receive a confirmation email. Confirm your account via the email. Next, on the sidebar, click on <strong>phpMyAdmin.</strong> In the phpMyAdmin login, enter the username and password you chose and click <strong>Go</strong>:</p><figure><img src="'+j+'" alt="Db3free Registration Options" tabindex="0" loading="lazy"><figcaption>Db3free Registration Options</figcaption></figure><p>Now, we have an empty database. Let’s add the <code>programming_languages</code> table. First, click on the database name on the left; for me, it was <strong>restapitest123</strong>. Then, click <strong>SQL</strong> on the top menu, and put the following code for <code>CREATE TABLE</code> in the text area:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>programming_languages<span class="token punctuation">`</span></span></span>\n<span class="line"><span class="token punctuation">(</span></span>\n<span class="line">  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span>            <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">auto_increment</span> <span class="token punctuation">,</span></span>\n<span class="line">  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span>          <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span></span>\n<span class="line">  <span class="token identifier"><span class="token punctuation">`</span>released_year<span class="token punctuation">`</span></span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span></span>\n<span class="line">  <span class="token identifier"><span class="token punctuation">`</span>githut_rank<span class="token punctuation">`</span></span>   <span class="token keyword">INT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span></span>\n<span class="line">  <span class="token identifier"><span class="token punctuation">`</span>pypl_rank<span class="token punctuation">`</span></span>     <span class="token keyword">INT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span></span>\n<span class="line">  <span class="token identifier"><span class="token punctuation">`</span>tiobe_rank<span class="token punctuation">`</span></span>    <span class="token keyword">INT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span></span>\n<span class="line">  <span class="token identifier"><span class="token punctuation">`</span>created_at<span class="token punctuation">`</span></span>    <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token punctuation">,</span></span>\n<span class="line">  <span class="token identifier"><span class="token punctuation">`</span>updated_at<span class="token punctuation">`</span></span>    <span class="token keyword">DATETIME</span> <span class="token keyword">on</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token punctuation">,</span></span>\n<span class="line">  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token keyword">UNIQUE</span> <span class="token identifier"><span class="token punctuation">`</span>idx_name_unique<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">engine</span> <span class="token operator">=</span> <span class="token keyword">innodb</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci<span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Click the <strong>Go</strong> button, as shown below:</p><figure><img src="'+x+'" alt="Creating A Programming Languages Table" tabindex="0" loading="lazy"><figcaption>Creating A Programming Languages Table</figcaption></figure><p>The code will return with a green check box and a message along the lines of <code>MySQL returned an empty result set (i.e. zero rows)</code>. With that, we’ve created a table called <code>programming_languages</code> with eight columns and a primary key called <code>id</code>, which is an internet and auto-incremented.</p><p>The <code>name</code> column is unique, and we also added <code>released_year</code> for the programming language. We have three columns to input the rank of the programming language, sourced from the following resources:</p>',9)),s("ul",null,[s("li",null,[s("a",W,[e(t,{icon:"fas fa-globe"}),n[52]||(n[52]=a("GitHut"))]),n[53]||(n[53]=a(": GitHub language stats for Q4 2020"))]),s("li",null,[s("a",F,[e(t,{icon:"fas fa-globe"}),n[54]||(n[54]=a("PYPL"))]),n[55]||(n[55]=a(": The Popularity of Programming Language Index"))]),s("li",null,[s("a",G,[e(t,{icon:"fas fa-globe"}),n[56]||(n[56]=a("TIOBE index"))])])]),n[191]||(n[191]=p(`<p>The <code>created_at</code> and <code>updated_at</code> columns store dates to keep track of when the rows were created and updated.</p><h3 id="adding-demo-rows-for-programming-languages" tabindex="-1"><a class="header-anchor" href="#adding-demo-rows-for-programming-languages"><span>Adding demo rows for programming languages</span></a></h3><p>Next, we’ll add 16 popular programming languages to our <code>programming_languages</code> table. Click the same <strong>SQL</strong> link on the top of the page and copy and paste the code below:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> programming_languages<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>released_year<span class="token punctuation">,</span>githut_rank<span class="token punctuation">,</span>pypl_rank<span class="token punctuation">,</span>tiobe_rank<span class="token punctuation">)</span> </span>
<span class="line"><span class="token keyword">VALUES</span> </span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">,</span><span class="token number">1995</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span><span class="token number">1991</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span><span class="token number">1995</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;TypeScript&#39;</span><span class="token punctuation">,</span><span class="token number">2012</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;C#&#39;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&#39;PHP&#39;</span><span class="token punctuation">,</span><span class="token number">1995</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">&#39;C++&#39;</span><span class="token punctuation">,</span><span class="token number">1985</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span><span class="token number">1972</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">&#39;Ruby&#39;</span><span class="token punctuation">,</span><span class="token number">1995</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;R&#39;</span><span class="token punctuation">,</span><span class="token number">1993</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">&#39;Objective-C&#39;</span><span class="token punctuation">,</span><span class="token number">1984</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">&#39;Swift&#39;</span><span class="token punctuation">,</span><span class="token number">2015</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">,</span><span class="token number">2011</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">&#39;Go&#39;</span><span class="token punctuation">,</span><span class="token number">2009</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">&#39;Rust&#39;</span><span class="token punctuation">,</span><span class="token number">2010</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">&#39;Scala&#39;</span><span class="token punctuation">,</span><span class="token number">2004</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You should receive a message like “16 rows inserted.” Then, the data from our three sources is collected and added to the table in bulk by the <code>INSERT</code> statement, creating 16 rows, one for each programming language. We’ll return to this when we fetch data for the <code>GET</code> API endpoint.<br> If we click on the <strong>programming_languages</strong> table, visible on the left, we’ll see the rows that we just added:</p><figure><img src="`+T+`" alt="Programming Languages Table With Rows Added" tabindex="0" loading="lazy"><figcaption>Programming Languages Table With Rows Added</figcaption></figure><p>Next, we’ll set up Express.js for our REST API with Node.js and MySQL.</p><hr><h2 id="what-is-rest-api" tabindex="-1"><a class="header-anchor" href="#what-is-rest-api"><span>What is REST API?</span></a></h2><p>REST API, short for Representational State Transfer API, is a popular architectural style for designing web services and APIs. REST API allows communication between the client and server through standard HTTP methods like GET, POST, PUT, and DELETE, using the principles of statelessness and resource-based interactions.</p><p>Some of the important guidelines of REST API include:</p><ul><li><strong>Client-server architecture</strong>: REST API is divided into client and server components, allowing them to evolve independently</li><li><strong>Statelessness</strong>: Client requests contain all the necessary information to understand and fulfill the request. The server doesn’t store any client state between requests</li><li><strong>Cacheability</strong>: REST API can utilize caching mechanisms to improve performance and reduce the load on the server</li><li><strong>Uniform interface</strong>: REST API has a consistent and uniform interface, including using standard HTTP methods (GET, POST, PUT, DELETE) to perform operations on resources</li></ul><hr><h2 id="setting-up-express-js-for-our-rest-api" tabindex="-1"><a class="header-anchor" href="#setting-up-express-js-for-our-rest-api"><span>Setting up Express.js for our REST API</span></a></h2><p>To set up a Node.js app with an Express.js server, we’ll first create a directory for our project to reside in:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">mkdir</span> programming-languages-api <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> programming-languages-api</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,16)),s("p",null,[n[57]||(n[57]=a("Then, we can create a ")),e(t,{icon:"iconfont icon-json"}),n[58]||(n[58]=s("code",null,"package.json",-1)),n[59]||(n[59]=a(" file with ")),n[60]||(n[60]=s("code",null,"npm init -y",-1)),n[61]||(n[61]=a(" as follows:"))]),n[192]||(n[192]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="package.json"><span>package.json</span></div><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;programming-languages-api&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[62]||(n[62]=a("To install Express, we’ll run ")),n[63]||(n[63]=s("code",null,"npm i express",-1)),n[64]||(n[64]=a(", adding Express as a dependency in the ")),e(t,{icon:"iconfont icon-json"}),n[65]||(n[65]=s("code",null,"package.json",-1)),n[66]||(n[66]=a(" file. Next, we’ll create a slim server in the ")),e(t,{icon:"fa-brands fa-js"}),n[67]||(n[67]=s("code",null,"index.js",-1)),n[68]||(n[68]=a(" file. It will print an ")),n[69]||(n[69]=s("code",null,"ok",-1)),n[70]||(n[70]=a(" message on the main path ")),n[71]||(n[71]=s("code",null,"/",-1)),n[72]||(n[72]=a(":"))]),n[193]||(n[193]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="index.js"><span>index.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span></span>
<span class="line">  express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;ok&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Example app listening at http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>There are a few important things to note in the code above. For one, we’ll use the built-in Express JSON parser middleware to parse JSON in the next steps. We’ll also use the <code>express.urlencoded()</code> middleware to parse the URL-encoded body.</p><p>If <code>PORT</code> is not provided as an environment variable, our app will run on port number 3000. We can run the server with <code>node index.js</code> and hit <code>http://localhost:3000</code> to see <code>{message: &quot;ok&quot;}</code> as the output.</p><hr><h2 id="rest-api-project-structure" tabindex="-1"><a class="header-anchor" href="#rest-api-project-structure"><span>REST API project structure</span></a></h2><p>We’ll structure our project in the following manner to arrange our files logically in folders:</p><figure><img src="`+q+'" alt="Node Project Folder Structure Layout" tabindex="0" loading="lazy"><figcaption>Node Project Folder Structure Layout</figcaption></figure>',7)),e(t,{icon:"fa-brands fa-js"}),n[194]||(n[194]=s("code",null,"config.js",-1)),n[195]||(n[195]=a(" will contain configuration for information like the database credentials and the rows we want to show per page when we paginate results. ")),e(t,{icon:"fa-brands fa-js"}),n[196]||(n[196]=s("code",null,"helper.js",-1)),n[197]||(n[197]=a(" is the home for any helper functions, like calculating offset for pagination.")),s("p",null,[n[73]||(n[73]=a("The ")),e(t,{icon:"fas fa-folder-open"}),n[74]||(n[74]=s("code",null,"routes/",-1)),e(t,{icon:"fa-brands fa-js"}),n[75]||(n[75]=s("code",null,"programmingLanguages.js",-1)),n[76]||(n[76]=a(" file will be the glue between the URI and the corresponding function in the ")),e(t,{icon:"fas fa-folder-open"}),n[77]||(n[77]=s("code",null,"services/",-1)),e(t,{icon:"fa-brands fa-js"}),n[78]||(n[78]=s("code",null,"programmingLanguages.js",-1)),n[79]||(n[79]=a(" service. The ")),e(t,{icon:"fas fa-folder-open"}),n[80]||(n[80]=s("code",null,"services",-1)),n[81]||(n[81]=a(" folder will house all our services. One of them is ")),e(t,{icon:"fa-brands fa-js"}),n[82]||(n[82]=s("code",null,"db.js",-1)),n[83]||(n[83]=a(", which we use to talk with the MySQL database."))]),s("p",null,[n[84]||(n[84]=a("Another service is ")),e(t,{icon:"fa-brands fa-js"}),n[85]||(n[85]=s("code",null,"programmingLanguages.js",-1)),n[86]||(n[86]=a(", which will have methods like ")),n[87]||(n[87]=s("code",null,"getMultiple",-1)),n[88]||(n[88]=a(", ")),n[89]||(n[89]=s("code",null,"create",-1)),n[90]||(n[90]=a(", etc., to get and create the programming language resource. Basic mapping of the URI and the related service function will look like the code below:"))]),n[198]||(n[198]=p(`<div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">GET /programming-languages → getMultiple()</span>
<span class="line">POST /programming-languages → create()</span>
<span class="line">PUT /programming-languages/:id → update()</span>
<span class="line">DELETE /programming-languages/:id → remove()</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, let’s code our <code>GET</code> programming languages API with pagination.</p><hr><h2 id="get-popular-programming-languages" tabindex="-1"><a class="header-anchor" href="#get-popular-programming-languages"><span><code>GET</code> popular programming languages</span></a></h2><p>We will need to link our Node.js server with MySQL to create our GET programming languages API. We’ll use the <code>mysql2</code> package to interact with the MySQL database.</p><p>First, we need to install <code>mysql2</code> using the command below at the project root directory:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> i mysql2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Next, we’ll create the <code>config</code> file on the root of the project with the following contents:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="config.js"><span>config.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">db</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* don&#39;t expose password or any sensitive info, done only for demo */</span></span>
<span class="line">    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;db4free.net&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&quot;restapitest123&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;restapitest123&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&quot;restapitest123&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">connectTimeout</span><span class="token operator">:</span> <span class="token number">60000</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">listPerPage</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,9)),s("p",null,[n[91]||(n[91]=a("It is worth noting that we set the ")),n[92]||(n[92]=s("code",null,"connectTimeout",-1)),n[93]||(n[93]=a(" to 60 seconds. The default is ten seconds, which may not be enough. Consequently, we’ll create the ")),e(t,{icon:"fa-brands fa-js"}),n[94]||(n[94]=s("code",null,"helper.js",-1)),n[95]||(n[95]=a(" file with the code below:"))]),n[199]||(n[199]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="helper.js"><span>helper.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">getOffset</span><span class="token punctuation">(</span><span class="token parameter">currentPage <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> listPerPage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>currentPage <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">[</span>listPerPage<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">emptyOrRows</span><span class="token punctuation">(</span><span class="token parameter">rows</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rows<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> rows<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  getOffset<span class="token punctuation">,</span></span>
<span class="line">  emptyOrRows</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[96]||(n[96]=a("For the fun part, we’ll add the route and link it to the services. First, we’ll connect to the database and enable running queries on the database in the ")),e(t,{icon:"fas fa-folder-open"}),n[97]||(n[97]=s("code",null,"services/",-1)),e(t,{icon:"fa-brands fa-js"}),n[98]||(n[98]=s("code",null,"db.js",-1)),n[99]||(n[99]=a(" file:"))]),n[200]||(n[200]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="services/db.js"><span>services/db.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql2/promise&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">sql<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>results<span class="token punctuation">,</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> results<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  query</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[100]||(n[100]=a("Now, we’ll write up the ")),e(t,{icon:"fas fa-folder-open"}),n[101]||(n[101]=s("code",null,"services/",-1)),e(t,{icon:"fa-brands fa-js"}),n[102]||(n[102]=s("code",null,"programmingLanguages.js",-1)),n[103]||(n[103]=a(" file that acts as the bridge between the route and the database:"))]),n[201]||(n[201]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="services/programmingLanguages.js"><span>services/programmingLanguages.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./db&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> helper <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../helper&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getMultiple</span><span class="token punctuation">(</span><span class="token parameter">page <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> offset <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getOffset</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> config<span class="token punctuation">.</span>listPerPage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> rows <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">SELECT id, name, released_year, githut_rank, pypl_rank, tiobe_rank </span>
<span class="line">    FROM programming_languages LIMIT </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>offset<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>listPerPage<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">emptyOrRows</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> meta <span class="token operator">=</span> <span class="token punctuation">{</span>page<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    data<span class="token punctuation">,</span></span>
<span class="line">    meta</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  getMultiple</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[104]||(n[104]=a("After that, we’ll create the ")),n[105]||(n[105]=s("code",null,"routes",-1)),n[106]||(n[106]=a(" file in ")),e(t,{icon:"fas fa-folder-open"}),n[107]||(n[107]=s("code",null,"routes/",-1)),e(t,{icon:"fa-brands fa-js"}),n[108]||(n[108]=s("code",null,"programmingLanguages.js",-1)),n[109]||(n[109]=a(", which looks like the following:"))]),n[202]||(n[202]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="routes/programmingLanguages.js"><span>routes/programmingLanguages.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> programmingLanguages <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../services/programmingLanguages&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* GET programming languages. */</span></span>
<span class="line">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token keyword">await</span> programmingLanguages<span class="token punctuation">.</span><span class="token function">getMultiple</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Error while getting programming languages </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>For the final piece of our <code>GET</code> endpoint, we need to wire up the route in the <code>index.js</code> file as follows:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="index.js"><span>index.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> programmingLanguagesRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./routes/programmingLanguages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span></span>
<span class="line">  express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;ok&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/programming-languages&quot;</span><span class="token punctuation">,</span> programmingLanguagesRouter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">/* Error handler middleware */</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> statusCode <span class="token operator">=</span> err<span class="token punctuation">.</span>statusCode <span class="token operator">||</span> <span class="token number">500</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">,</span> err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> err<span class="token punctuation">.</span>message <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Example app listening at http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),s("p",null,[n[110]||(n[110]=a("We made two important changes to our entry point ")),e(t,{icon:"fa-brands fa-js"}),n[111]||(n[111]=s("code",null,"index.js",-1)),n[112]||(n[112]=a(" file. First, we added the code below:"))]),n[203]||(n[203]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="index.js"><span>index.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> programmingLanguagesRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./routes/programmingLanguages&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>Then, we linked up the <code>/programming-languages</code> route to the router we just created:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="index.js"><span>index.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/programming-languages&#39;</span><span class="token punctuation">,</span> programmingLanguagesRouter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>We also added an error handler middleware to handle errors and provide a proper status code and message. After adding the <code>GET</code> endpoint, when we run our app again with <code>node index.js</code> and hit the browser with <code>http://localhost:3000/programming-languages</code>, we’ll see an output like this:</p><figure><img src="`+E+'" alt="GET Endpoint Node Index Output" tabindex="0" loading="lazy"><figcaption>GET Endpoint Node Index Output</figcaption></figure>',5)),s("p",null,[n[113]||(n[113]=a("Depending on the extensions you have installed on your browser, your output might look a bit different. Note that we’ve already implemented pagination for our ")),n[114]||(n[114]=s("code",null,"GET",-1)),n[115]||(n[115]=a(" API, which is possible because of the ")),n[116]||(n[116]=s("code",null,"getOffset",-1)),n[117]||(n[117]=a(" function in ")),n[118]||(n[118]=s("code",null,"helper.js",-1)),n[119]||(n[119]=a(" and how we run the ")),n[120]||(n[120]=s("code",null,"SELECT",-1)),n[121]||(n[121]=a(" query in ")),e(t,{icon:"fas fa-folder-open"}),n[122]||(n[122]=s("code",null,"services/",-1)),e(t,{icon:"fa-brands fa-js"}),n[123]||(n[123]=s("code",null,"programmingLanguage.js",-1)),n[124]||(n[124]=a(". Try ")),n[125]||(n[125]=s("code",null,"http://localhost:3000/programming-languages?page=2",-1)),n[126]||(n[126]=a(" to see languages 11-16. ---"))]),n[204]||(n[204]=p('<h2 id="post-a-new-programming-language" tabindex="-1"><a class="header-anchor" href="#post-a-new-programming-language"><span><code>POST</code> a new programming language</span></a></h2><p>Our <code>POST</code> API will allow us to create a new programming language in our table. To create a <code>POST</code> programming language API in the <code>/programming-languages</code> endpoint, we’ll add code to the <code>service</code> and the <code>routes</code> files. In the service method, we’ll get the name, the release year, and other ranks from the request body, then insert them into the <code>programming_languages</code> table.</p>',2)),s("p",null,[n[127]||(n[127]=a("Append the following code to the ")),e(t,{icon:"fas fa-folder-open"}),n[128]||(n[128]=s("code",null,"services/",-1)),e(t,{icon:"fa-brands fa-js"}),n[129]||(n[129]=s("code",null,"programmingLanguages.js",-1)),n[130]||(n[130]=a(" file:"))]),n[205]||(n[205]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="services/programmingLanguages.js"><span>services/programmingLanguages.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">programmingLanguage</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">INSERT INTO programming_languages </span>
<span class="line">    (name, released_year, githut_rank, pypl_rank, tiobe_rank) </span>
<span class="line">    VALUES </span>
<span class="line">    (&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>programmingLanguage<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>programmingLanguage<span class="token punctuation">.</span>released_year<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>programmingLanguage<span class="token punctuation">.</span>githut_rank<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>programmingLanguage<span class="token punctuation">.</span>pypl_rank<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>programmingLanguage<span class="token punctuation">.</span>tiobe_rank<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;Error in creating programming language&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>affectedRows<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    message <span class="token operator">=</span> <span class="token string">&#39;Programming language created successfully&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Make sure you also export the following function:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  getMultiple<span class="token punctuation">,</span></span>
<span class="line">  create</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[131]||(n[131]=a("For the function above to be accessible, we need to add a route to link it up in the ")),e(t,{icon:"fas fa-folder-open"}),n[132]||(n[132]=s("code",null,"routes/",-1)),e(t,{icon:"fa-brands fa-js"}),n[133]||(n[133]=s("code",null,"programmingLanguages.js",-1)),n[134]||(n[134]=a(" file:"))]),n[206]||(n[206]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="routes/programmingLanguages.js"><span>routes/programmingLanguages.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">/* POST programming language */</span></span>
<span class="line">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token keyword">await</span> programmingLanguages<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Error while creating programming language</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="put-to-update-an-existing-programming-language" tabindex="-1"><a class="header-anchor" href="#put-to-update-an-existing-programming-language"><span><code>PUT</code> to update an existing programming language</span></a></h2><p>We’ll use the <code>/programming-languages/:id</code> endpoint to update an existing programming language, where we’ll get the data to update the language. To update a programming language, we’ll run the <code>UPDATE</code> query based on the data we got in the request.</p><p><code>PUT</code> is an idempotent action, meaning that if the same call is made again and again, it will produce the same results. To enable updating existing records, we’ll add the following code to the programming language service:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> programmingLanguage</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">UPDATE programming_languages </span>
<span class="line">    SET name=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>programmingLanguage<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;, released_year=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>programmingLanguage<span class="token punctuation">.</span>released_year<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, githut_rank=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>programmingLanguage<span class="token punctuation">.</span>githut_rank<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span>
<span class="line">    pypl_rank=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>programmingLanguage<span class="token punctuation">.</span>pypl_rank<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, tiobe_rank=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>programmingLanguage<span class="token punctuation">.</span>tiobe_rank<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span>
<span class="line">    WHERE id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> </span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;Error in updating programming language&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>affectedRows<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    message <span class="token operator">=</span> <span class="token string">&#39;Programming language updated successfully&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Make sure you also export this function, as we did before:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  getMultiple<span class="token punctuation">,</span></span>
<span class="line">  create<span class="token punctuation">,</span></span>
<span class="line">  update<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To wire up the code with the <code>PUT</code> endpoint, we’ll add the code below to the programming languages route file, just above <code>module.exports = router;</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">/* PUT programming language */</span></span>
<span class="line">router<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&#39;/:id&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token keyword">await</span> programmingLanguages<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Error while updating programming language</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, we can update any existing programming language. For instance, we can update a language’s name if we see a typo.</p><hr><h2 id="delete-a-programming-language" tabindex="-1"><a class="header-anchor" href="#delete-a-programming-language"><span><code>DELETE</code> a programming language</span></a></h2><p>We’ll use the <code>/programming-languages/:id</code> path with the HTTP <code>DELETE</code> method to add the functionality to delete a programming language. Go ahead and run the code below:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">DELETE FROM programming_languages WHERE id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;Error in deleting programming language&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>affectedRows<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    message <span class="token operator">=</span> <span class="token string">&#39;Programming language deleted successfully&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15)),s("p",null,[n[135]||(n[135]=a("Don’t forget to export this function as well. Once again, to link up the service with the route, we’ll add the following code to the ")),e(t,{icon:"fas fa-folder-open"}),n[136]||(n[136]=s("code",null,"routes/",-1)),e(t,{icon:"fa-brands fa-js"}),n[137]||(n[137]=s("code",null,"programmingLanguages.js",-1)),n[138]||(n[138]=a(" file:"))]),n[207]||(n[207]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="routes/programmingLanguages.js"><span>routes/programmingLanguages.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">/* DELETE programming language */</span></span>
<span class="line">router<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;/:id&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token keyword">await</span> programmingLanguages<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Error while deleting programming language</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="testing-our-apis" tabindex="-1"><a class="header-anchor" href="#testing-our-apis"><span>Testing our APIs</span></a></h2><p>After running the Node.js Express server with <code>node index.js</code>, you can test all the API endpoints. To create a new programming language, let’s go with Dart, and run the following cURL command. Alternatively, you can use Postman or any other HTTP client:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-H</span> <span class="token string">&#39;Accept: application/json&#39;</span> <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-H</span> <span class="token string">&#39;Content-type: application/json&#39;</span> http://localhost:3000/programming-languages <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--data</span> <span class="token string">&#39;{&quot;name&quot;:&quot;dart&quot;, &quot;released_year&quot;: 2011, &quot;githut_rank&quot;: 13, &quot;pypl_rank&quot;: 20, &quot;tiobe_rank&quot;: 25}&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The code above will result in the following output:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">HTTP/1.1 200 OK</span>
<span class="line">X-Powered-By: Express</span>
<span class="line">Content-Type: application/json; charset=utf-8</span>
<span class="line">Content-Length: 55</span>
<span class="line">ETag: W/&quot;37-3mETlnRrtfrms6wlAjdgAXKq9GE&quot;</span>
<span class="line">Date: Mon, 01 Feb 2021 11:20:07 GMT</span>
<span class="line">Connection: keep-alive</span>
<span class="line"></span>
<span class="line">{&quot;message&quot;:&quot;Programming language created successfully&quot;}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,7)),s("p",null,[n[142]||(n[142]=a("You can remove the ")),n[143]||(n[143]=s("code",null,"X-Powered-By",-1)),n[144]||(n[144]=a(" header and add other security response headers using ")),s("a",H,[n[139]||(n[139]=a("Express.js Helmet (")),e(t,{icon:"iconfont icon-github"}),n[140]||(n[140]=s("code",null,"helmetjs/helmet",-1)),n[141]||(n[141]=a(")"))]),n[145]||(n[145]=a(", which will greatly improve the API’s security. For now, let’s update the GitHut rank of ")),n[146]||(n[146]=s("code",null,"Dart",-1)),n[147]||(n[147]=a(" from 13 to 12:"))]),n[208]||(n[208]=p(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-X</span> PUT <span class="token parameter variable">-H</span> <span class="token string">&#39;Accept: application/json&#39;</span> <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-H</span> <span class="token string">&#39;Content-type: application/json&#39;</span> http://localhost:3000/programming-languages/17 <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--data</span> <span class="token string">&#39;{&quot;name&quot;:&quot;dart&quot;, &quot;released_year&quot;: 2011, &quot;githut_rank&quot;: 12, &quot;pypl_rank&quot;: 20, &quot;tiobe_rank&quot;: 25}&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The code above will generate an output like the one below:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">HTTP/1.1 200 OK</span>
<span class="line">X-Powered-By: Express</span>
<span class="line">Content-Type: application/json; charset=utf-8</span>
<span class="line">Content-Length: 55</span>
<span class="line">ETag: W/&quot;37-0QPAQsRHsm23S9CNV3rPa+AFuXo&quot;</span>
<span class="line">Date: Mon, 01 Feb 2021 11:40:03 GMT</span>
<span class="line">Connection: keep-alive</span>
<span class="line"></span>
<span class="line">{&quot;message&quot;:&quot;Programming language updated successfully&quot;}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>To test out the <code>DELETE</code> API, you can use the following cURL to delete Dart with <code>ID 17</code>:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-X</span> DELETE <span class="token parameter variable">-H</span> <span class="token string">&#39;Accept: application/json&#39;</span> <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-H</span> <span class="token string">&#39;Content-type: application/json&#39;</span> http://localhost:3000/programming-languages/17</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The code above will result in the following output:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">HTTP/1.1 200 OK</span>
<span class="line">X-Powered-By: Express</span>
<span class="line">Content-Type: application/json; charset=utf-8</span>
<span class="line">Content-Length: 55</span>
<span class="line">ETag: W/&quot;37-aMzd+8NpWQ09igvHbNLorsXxGFo&quot;</span>
<span class="line">Date: Mon, 01 Feb 2021 11:50:17 GMT</span>
<span class="line">Connection: keep-alive</span>
<span class="line"></span>
<span class="line">{&quot;message&quot;:&quot;Programming language deleted successfully&quot;}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,7)),s("p",null,[n[149]||(n[149]=a("If you’re more used to a visual interface for testing, such as Postman, you can ")),s("a",B,[e(t,{icon:"fa-brands fa-quora"}),n[148]||(n[148]=a("import the cURL commands"))]),n[150]||(n[150]=a(" into Postman."))]),n[209]||(n[209]=s("p",null,"In this tutorial, we kept our example fairly simple. However, if this were a real-life API and not a demo, I’d highly recommend the following:",-1)),s("ul",null,[s("li",null,[n[152]||(n[152]=a("Use a robust validation library like ")),s("a",$,[e(t,{icon:"iconfont icon-github"}),n[151]||(n[151]=s("code",null,"sideway/joi",-1))]),n[153]||(n[153]=a(" to validate the input precisely, for example, to ensure the programming language’s name is required. It doesn’t already exist in the database"))]),n[157]||(n[157]=s("li",null,"Improve security by adding Helmet.js to Express.js",-1)),s("li",null,[n[155]||(n[155]=a("Streamline logs in a more manageable way using a ")),e(i,{to:"/blog.logrocket.com/node-js-logging-best-practices.html"},{default:o(()=>n[154]||(n[154]=[s("strong",null,"Node.js logging library",-1)])),_:1,__:[154]}),n[156]||(n[156]=a(" like Winston"))]),n[158]||(n[158]=s("li",null,"Use Docker for the Node.js application",-1))]),n[210]||(n[210]=p(`<hr><h2 id="advanced-example-using-store-procedures" tabindex="-1"><a class="header-anchor" href="#advanced-example-using-store-procedures"><span>Advanced example: Using store procedures</span></a></h2><p>In this tutorial, we use inline SQL statements for simplicity. We should consider using store procedures in real-world projects. Using store procedures instead of inline SQL has several advantages: improved performance, easier maintainability, and, more importantly, better security.</p><p>Let’s add a new route <code>GET</code> <code>/programming-languages/:id</code> in our app to use a store procedure. First, we need to create it in the database. Run the following SQL script to create a store procedure for searching the programming language by ID:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">DELIMITER</span> $$</span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> <span class="token identifier"><span class="token punctuation">\`</span>sp_search_programming_languages_by_id<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token operator">in</span> langid <span class="token keyword">int</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> githut_rank<span class="token punctuation">,</span> pypl_rank<span class="token punctuation">,</span> tiobe_rank<span class="token punctuation">,</span> created_at</span>
<span class="line">    <span class="token keyword">FROM</span> programming_languages</span>
<span class="line">    <span class="token keyword">where</span> id <span class="token operator">=</span> langid<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span> $$</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),s("p",null,[n[159]||(n[159]=a("To use the newly created store procedure, we need to add this setting to the ")),e(t,{icon:"fa-brands fa-js"}),n[160]||(n[160]=s("code",null,"config.js",-1)),n[161]||(n[161]=a(":"))]),n[211]||(n[211]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="config.js"><span>config.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">db</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      <span class="token literal-property property">multipleStatements</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[162]||(n[162]=a("Then, we can add a new helper function to ")),e(t,{icon:"fa-brands fa-js"}),n[163]||(n[163]=s("code",null,"db.js",-1)),n[164]||(n[164]=a(":"))]),n[212]||(n[212]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="db.js"><span>db.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">callSpSearch</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>results<span class="token punctuation">,</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;CALL sp_search_programming_languages_by_id(&#39;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> results<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The new function needs to be exported as well:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  query<span class="token punctuation">,</span></span>
<span class="line">  callSpSearch</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[165]||(n[165]=a("Next, add this function to the ")),e(t,{icon:"fas fa-folder-open"}),n[166]||(n[166]=s("code",null,"services/",-1)),e(t,{icon:"fa-brands fa-js"}),n[167]||(n[167]=s("code",null,"programmingLanguages.js",-1)),n[168]||(n[168]=a(" and add it to the exports:"))]),n[213]||(n[213]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="services/programmingLanguages.js"><span>services/programmingLanguages.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> rows <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">callSpSearch</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">emptyOrRows</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    data</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  getMultiple<span class="token punctuation">,</span></span>
<span class="line">  create<span class="token punctuation">,</span></span>
<span class="line">  update<span class="token punctuation">,</span></span>
<span class="line">  remove<span class="token punctuation">,</span></span>
<span class="line">  search</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[169]||(n[169]=a("The last step is to add a new route into ")),e(t,{icon:"fas fa-folder-open"}),n[170]||(n[170]=s("code",null,"routes/",-1)),e(t,{icon:"fa-brands fa-js"}),n[171]||(n[171]=s("code",null,"programmingLanguages.js",-1)),n[172]||(n[172]=a(":"))]),n[214]||(n[214]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="routes/programmingLanguages.js"><span>routes/programmingLanguages.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">  router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/:id&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token keyword">await</span> programmingLanguages<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Error while searching programming languages </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>That’s it! Now, we can restart the server and give it a go. Enter the browser with <code>http://localhost:3000/programming-languages/1</code>, and we should see an output similar to the one below:</p><figure><img src="`+L+'" alt="Localhost Code Ouput" tabindex="0" loading="lazy"><figcaption>Localhost Code Ouput</figcaption></figure>',3)),s("p",null,[n[176]||(n[176]=a("Check out the full source code in ")),s("a",V,[n[173]||(n[173]=a("this CodeSandbox editor (")),e(t,{icon:"iconfont icon-codesandbox"}),n[174]||(n[174]=s("code",null,"sandbox",-1)),n[175]||(n[175]=a(")"))]),n[177]||(n[177]=a("."))]),n[215]||(n[215]=p(`<p>Let’s discuss more advanced MySQL query techniques you should consider when expanding your Node.js application.</p><h3 id="multi-table-joins" tabindex="-1"><a class="header-anchor" href="#multi-table-joins"><span>Multi-table joins</span></a></h3><p>Let’s say we want to track programming language frameworks. We could create a related table and use JOIN operations:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getLanguageWithFrameworks</span><span class="token punctuation">(</span><span class="token parameter">languageId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>\`</span>
<span class="line">    <span class="token constant">SELECT</span> l<span class="token punctuation">.</span>name <span class="token keyword">as</span> language<span class="token punctuation">,</span> l<span class="token punctuation">.</span>released_year<span class="token punctuation">,</span> </span>
<span class="line">           f<span class="token punctuation">.</span>name <span class="token keyword">as</span> framework<span class="token punctuation">,</span> f<span class="token punctuation">.</span>release_date</span>
<span class="line">    <span class="token constant">FROM</span> programming_languages l</span>
<span class="line">    <span class="token constant">LEFT</span> <span class="token constant">JOIN</span> frameworks f <span class="token constant">ON</span> l<span class="token punctuation">.</span>id <span class="token operator">=</span> f<span class="token punctuation">.</span>language_id</span>
<span class="line">    <span class="token constant">WHERE</span> l<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">*</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>languageId<span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="full-text-search" tabindex="-1"><a class="header-anchor" href="#full-text-search"><span>Full-text search</span></a></h3><p>Full-text search is essential when implementing search functionality that goes beyond simple <code>WHERE</code> clauses. While basic <code>LIKE</code> queries might work for small datasets, full-text search provides better performance and more relevant results for text-based searches. MySQL’s full-text search supports natural language mode and Boolean mode, allowing for sophisticated search patterns including phrase matching and word exclusion:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// First, add a FULLTEXT index</span></span>
<span class="line"><span class="token comment">// ALTER TABLE programming_languages ADD FULLTEXT(name, description);</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">searchLanguages</span><span class="token punctuation">(</span><span class="token parameter">searchTerm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    SELECT name, description,</span>
<span class="line">           MATCH(name, description) AGAINST(?) as relevance</span>
<span class="line">    FROM programming_languages</span>
<span class="line">    WHERE MATCH(name, description) AGAINST(?)</span>
<span class="line">    ORDER BY relevance DESC</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>searchTerm<span class="token punctuation">,</span> searchTerm<span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transaction-management" tabindex="-1"><a class="header-anchor" href="#transaction-management"><span>Transaction management</span></a></h3><p>Transactions are crucial for maintaining data integrity when performing multiple related database operations. They ensure that a series of queries either all succeed or all fail together, preventing partial updates that could leave your database in an inconsistent state. This is particularly important when you’re dealing with related tables or when implementing operations that require multiple steps to complete.</p><p>For example, when adding a new programming language along with its associated frameworks, we want to ensure that either</p><ol><li>both the language and its frameworks are added successfully, or</li><li>neither is added at all. Here’s how we can implement this using transactions:</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">addLanguageWithFrameworks</span><span class="token punctuation">(</span><span class="token parameter">language<span class="token punctuation">,</span> frameworks</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>languageResult<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token string">&#39;INSERT INTO programming_languages (name, released_year) VALUES (?, ?)&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">[</span>language<span class="token punctuation">.</span>name<span class="token punctuation">,</span> language<span class="token punctuation">.</span>released_year<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> languageId <span class="token operator">=</span> languageResult<span class="token punctuation">.</span>insertId<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> framework <span class="token keyword">of</span> frameworks<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&#39;INSERT INTO frameworks (language_id, name, release_date) VALUES (?, ?, ?)&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">[</span>languageId<span class="token punctuation">,</span> framework<span class="token punctuation">.</span>name<span class="token punctuation">,</span> framework<span class="token punctuation">.</span>release_date<span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> languageId <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">throw</span> error<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="why-not-just-use-an-orm" tabindex="-1"><a class="header-anchor" href="#why-not-just-use-an-orm"><span>Why not just use an ORM?</span></a></h2>`,14)),s("p",null,[e(i,{to:"/blog.logrocket.com/node-js-orms-why-shouldnt-use.html"},{default:o(()=>n[178]||(n[178]=[s("strong",null,"An ORM (Object-Relational Mapping)",-1)])),_:1,__:[178]}),n[179]||(n[179]=a(" is a library connecting object-oriented code with relational databases. It lets developers interact with the database using programming language concepts instead of writing raw SQL queries."))]),n[216]||(n[216]=p('<p>While using an ORM has its advantages, it also has limitations and disadvantages compared to the vanilla approach:</p><ul><li>ORMs add an additional layer of abstraction between the app and the database. It could lead to suboptimal performance in some use cases</li><li>Using an ORM can introduce significant complexity to the app and may need a fair bit of a learning curve for developers to understand the framework and its conventions. For a small project, those overheads might outweigh the benefits</li><li>ORMs are designed to be database agnostic, providing a consistent interface across several different databases. This abstraction can lead to limitations to certain database-specific features. If our app depends on some database-specific features unsupported by the ORM, the vanilla approach will be a better option</li></ul><p>In summary, whether to use an ORM depends on many factors, including application requirements, performance considerations, project size, complexity, and team skillset.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>We’ve built a fully functional REST API that demonstrates the powerful combination of Node.js and MySQL. Starting from basic database setup and CRUD operations, we’ve progressed through advanced concepts like store procedures, transaction management, and sophisticated querying techniques. This integration showcases why MySQL remains a robust choice for Node.js applications, particularly when working with structured data and complex relationships.</p><p>While our example API focused on programming languages, the patterns and practices demonstrated here form a solid foundation for building production-ready REST APIs. Whether you’re working with simple CRUD operations or implementing advanced features like full-text search and multi-table transactions, the principles remain the same.</p><p>Remember that the choice between raw SQL queries, stored procedures, and ORMs should be based on your specific use case, team expertise, and performance requirements. The flexibility of Node.js with MySQL allows you to choose the approach that best fits your needs.</p><p>I hope you enjoyed this article. Happy coding!</p>',9)),b(" TODO: add ARTICLE CARD "),e(u,r(d({title:"Build a REST API with Node.js, Express, and MySQL",desc:"Build a REST API with Node.js, Express, and MySQL. This guide covers database setup, routing, and CRUD operations for backend development.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-rest-api-node-express-mysql.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const K=m(S,[["render",z]]),J=JSON.parse('{"path":"/blog.logrocket.com/build-rest-api-node-express-mysql.html","title":"Build a REST API with Node.js, Express, and MySQL","lang":"en-US","frontmatter":{"lang":"en-US","title":"Build a REST API with Node.js, Express, and MySQL","description":"Article(s) > Build a REST API with Node.js, Express, and MySQL","icon":"iconfont icon-expressjs","category":["Node.js","Express.js","Data Science","MySQL","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","express","expressjs","express-js","data-science","mysql"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Build a REST API with Node.js, Express, and MySQL\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/db4free-signup-page.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/db3free-registration-options.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/creating-programming-languages-table.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/adding-rows-programming-languages-table.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/node-project-folder-structure-layout.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/GET-endpint-node-index-output.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/code-output.png\\"],\\"datePublished\\":\\"2024-10-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Geshan Manandhar\\",\\"url\\":\\"https://blog.logrocket.com/author/geshanmanandhar/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-rest-api-node-express-mysql.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Build a REST API with Node.js, Express, and MySQL"}],["meta",{"property":"og:description","content":"Article(s) > Build a REST API with Node.js, Express, and MySQL"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Build a REST API with Node.js, Express, and MySQL"}],["meta",{"property":"article:author","content":"Geshan Manandhar"}],["meta",{"property":"article:tag","content":"mysql"}],["meta",{"property":"article:tag","content":"data-science"}],["meta",{"property":"article:tag","content":"express-js"}],["meta",{"property":"article:tag","content":"expressjs"}],["meta",{"property":"article:tag","content":"express"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-10-21T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Build a REST API with Node.js, Express, and MySQL"},{"property":"og:description","content":"Build a REST API with Node.js, Express, and MySQL"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-rest-api-node-express-mysql.html"}]],"prev":"/programming/js-express/articles/README.md","date":"2024-10-21T00:00:00.000Z","isOriginal":false,"author":[{"name":"Geshan Manandhar","url":"https://blog.logrocket.com/author/geshanmanandhar/"}],"cover":"/assets/image/blog.logrocket.com/build-rest-api-node-express-mysql/banner.png"},"git":{},"readingTime":{"minutes":16.26,"words":4878},"filePathRelative":"blog.logrocket.com/build-rest-api-node-express-mysql.md","copyright":{"author":"Geshan Manandhar"}}');export{K as comp,J as data};
