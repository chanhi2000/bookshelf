import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as t,b as k,a as v,t as b,n as r,g as c,w as i,e as n,r as a,o as f}from"./app-BVguHYKu.js";const y={},S={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},C={class:"table-of-contents"},A={href:"https://frontendmasters.com/blog/wp-admin/post.php?post=6397&action=edit",target:"_blank",rel:"noopener noreferrer"},x={href:"https://caniuse.com/mdn-css_at-rules_container_scroll-state_queries",target:"_blank",rel:"noopener noreferrer"},T={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_conditional_rules/Container_scroll-state_queries",target:"_blank",rel:"noopener noreferrer"};function q(u,e){const p=a("VPCard"),o=a("router-link"),d=a("SiteInfo"),l=a("VPIcon"),m=a("VidStack");return f(),g("div",null,[s("h1",S,[s("a",w,[s("span",null,b(u.$frontmatter.title)+" 관련",1)])]),t(p,r(c({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",C,[s("ul",null,[s("li",null,[t(o,{to:"#layout-the-layout"},{default:i(()=>e[0]||(e[0]=[n("-layout)The Layout")])),_:1,__:[0]})]),s("li",null,[t(o,{to:"#the-scroll-state-conditional-rule"},{default:i(()=>e[1]||(e[1]=[n("The Scroll-State Conditional Rule")])),_:1,__:[1]})]),s("li",null,[t(o,{to:"#the-alerts"},{default:i(()=>e[2]||(e[2]=[n("The Alerts")])),_:1,__:[2]})])])]),e[14]||(e[14]=s("hr",null,null,-1)),t(d,{name:"Adaptive Alerts (a CSS scroll-state Use Case)",desc:"A single button, but it has two different behaviors in JavaScript depending on how far you’ve scrolled in an element (as determined by CSS!)",url:"https://frontendmasters.com/blog/adaptive-alerts-a-css-scroll-state-use-case/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6397"}),e[15]||(e[15]=s("p",null,[n("Sometimes it’s useful to adapt the controls available to users based on whether they’ve "),s("strong",null,"scrolled through key position"),n("s on a page.")],-1)),e[16]||(e[16]=s("p",null,[n("Here’s an example: a user scrolls through a Terms & Conditions page. If they click “agree” "),s("em",null,"without"),n(" having scrolled down until the end, we could prompt them with a “please confirm you’ve read these terms” before continuing. Whereas if they "),s("em",null,"have"),n(" scrolled down the whole way, that could imply they have read the terms, so we don’t need the additional prompt.")],-1)),s("p",null,[e[4]||(e[4]=n("Implementing something like this is relatively easy with the recent CSS scroll-state queries (")),s("a",A,[t(l,{icon:"fas fa-globe"}),e[3]||(e[3]=n("browser support"))]),e[5]||(e[5]=n(")."))]),e[17]||(e[17]=s("p",null,"The following is an example of exactly as described above. If you click the “Sign Up” button without having scrolled down until the end, you’ll see an additional prompt reminding that you might not have read the terms yet and if you’d still like to sign up. And if the “Sign Up” is clicked after the text has been scrolled to the end, the sign-up acknowledgement pops up without any confirmation prompt first.",-1)),t(m,{src:"https://videopress.com/embed/KZkpkHaK"}),s("p",null,[e[7]||(e[7]=n("This is a video version of the demo, because ")),s("a",x,[t(l,{icon:"iconfont icon-caniuse"}),e[6]||(e[6]=n("browser support is Chrome-only"))]),e[8]||(e[8]=n(" as this article is published."))]),e[18]||(e[18]=k(`<p>Here’s a live demo:</p><p>CodePen Embed Fallback https://codepen.io/rpsthecoder/pen/zxGyQNe Scroll-adaptive alerts</p><hr><h2 id="layout-the-layout" tabindex="-1"><a class="header-anchor" href="#layout-the-layout"><span>-layout)The Layout</span></a></h2><p>We’ll start with this basic layout:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token comment">&lt;!-- many paragraphs of ToS text goes here --&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>control<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>Sign Up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">article</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">overflow</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">container-type</span><span class="token punctuation">:</span> scroll-state<span class="token punctuation">;</span></span>
<span class="line">  <span class="token selector">.control</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">position</span><span class="token punctuation">:</span> sticky<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">bottom</span><span class="token punctuation">:</span> -20px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The sign up button’s container (<code>.control</code>) is a <em>sticky</em> element that sticks to the bottom of its scrollable container (<code>&lt;article&gt;</code>). This is so the user always has access to the sign up button, in case they prefer to drop reading the terms and sign up right away.</p><p>The scrollable container (<code>&lt;article&gt;</code>) has <code>container-type: scroll-state.</code> This makes it possible to make changes to its descendants based on their scroll positions.</p><hr><h2 id="the-scroll-state-conditional-rule" tabindex="-1"><a class="header-anchor" href="#the-scroll-state-conditional-rule"><span>The Scroll-State Conditional Rule</span></a></h2><p>This is where we code in how the button control’s action adapts to its scroll position inside the<code>article</code>.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@container</span> <span class="token keyword">not</span> <span class="token function">scroll-state</span><span class="token punctuation">(</span><span class="token property">scrollable</span><span class="token punctuation">:</span> bottom<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">button</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">appearance</span><span class="token punctuation">:</span> button<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the container (<code>&lt;article&gt;</code> in our example) can no longer be scrolled further down, i.e. the container has already been scrolled until its bottom edge, we make a subtle change to the button in CSS that won’t visually modify it. In the example above, the button’s appearance is set to button from its default auto, keeping the button’s look the same.</p><hr><h2 id="the-alerts" tabindex="-1"><a class="header-anchor" href="#the-alerts"><span>The Alerts</span></a></h2><p>When the button is clicked, depending on the value of its <code>appearance</code> property, show the relevant alert.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span>appearance <span class="token operator">==</span> <span class="token string">&quot;auto&quot;</span> </span>
<span class="line">      <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&quot;Hope you&#39;ve read the terms. Do you wish to complete the sign up?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Sign up complete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If the <code>&lt;article&gt;</code> has not been scrolled down until the end, the button’s <code>appearance</code> value remains its default auto (<code>getComputedStyle(e.target).appearance == &quot;auto&quot;</code>). The click handler executes a <code>confirm()</code> prompt reminding the user they might not have read the terms fully yet, and if they’d like to continue with the sign up. If the user clicks “OK”, the <code>alert(&quot;Sign up complete&quot;)</code> message shows up next.</p><p>If the article has been scrolled down to the end, the button will have an <code>appearance</code> value other than <code>auto</code>, and so the click handler executes the <code>alert()</code> <em>only</em>.</p><hr>`,21)),s("p",null,[e[10]||(e[10]=n("Learn aboutscroll-state queries(")),s("a",T,[t(l,{icon:"fa-brands fa-firefox"}),e[9]||(e[9]=n("here"))]),e[11]||(e[11]=n(" and/or ")),e[12]||(e[12]=s("a",{href:"https://developer.chrome.com/blog/css-scroll-state-queries",target:"_blank",rel:"noopener noreferrer"},"here",-1)),e[13]||(e[13]=n(") to know the different kinds of scrolling scenarios that you can work with. Based on scroll states and positions, you’ll be able to change the appearance, content, or even functionality (as seen in this article) of an element or module."))]),v(" TODO: add ARTICLE CARD "),t(p,r(c({title:"Adaptive Alerts (a CSS scroll-state Use Case)",desc:"A single button, but it has two different behaviors in JavaScript depending on how far you’ve scrolled in an element (as determined by CSS!)",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/adaptive-alerts-a-css-scroll-state-use-case.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const P=h(y,[["render",q]]),j=JSON.parse('{"path":"/frontendmasters.com/adaptive-alerts-a-css-scroll-state-use-case.html","title":"Adaptive Alerts (a CSS scroll-state Use Case)","lang":"en-US","frontmatter":{"lang":"en-US","title":"Adaptive Alerts (a CSS scroll-state Use Case)","description":"Article(s) > Adaptive Alerts (a CSS scroll-state Use Case)","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","frontendmasters.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Adaptive Alerts (a CSS scroll-state Use Case)\\",\\"image\\":[\\"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6397\\"],\\"datePublished\\":\\"2025-07-16T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Preethi Sam\\",\\"url\\":\\"https://frontendmasters.com/blog/author/preethisam/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/adaptive-alerts-a-css-scroll-state-use-case.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Adaptive Alerts (a CSS scroll-state Use Case)"}],["meta",{"property":"og:description","content":"Article(s) > Adaptive Alerts (a CSS scroll-state Use Case)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6397"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6397"}],["meta",{"name":"twitter:image:alt","content":"Adaptive Alerts (a CSS scroll-state Use Case)"}],["meta",{"property":"article:author","content":"Preethi Sam"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-07-16T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Adaptive Alerts (a CSS scroll-state Use Case)"},{"property":"og:description","content":"Adaptive Alerts (a CSS scroll-state Use Case)"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/adaptive-alerts-a-css-scroll-state-use-case.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-07-16T00:00:00.000Z","isOriginal":false,"author":[{"name":"Preethi Sam","url":"https://frontendmasters.com/blog/author/preethisam/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6397"},"git":{},"readingTime":{"minutes":3.01,"words":904},"filePathRelative":"frontendmasters.com/adaptive-alerts-a-css-scroll-state-use-case.md","copyright":{"author":"Preethi Sam"}}');export{P as comp,j as data};
