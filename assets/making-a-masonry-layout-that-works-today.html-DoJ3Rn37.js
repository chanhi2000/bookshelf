import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as t,b as c,a as v,t as y,n as u,g as d,w as e,e as a,r as l,o as b}from"./app-BVguHYKu.js";const w={},f={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},j={href:"https://webkit.org/blog/16587/item-flow-part-1-a-new-unified-concept-for-layout/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://developer.chrome.com/blog/masonry-syntax",target:"_blank",rel:"noopener noreferrer"},z={href:"https://developer.chrome.com/blog/masonry-update?hl=en",target:"_blank",rel:"noopener noreferrer"},C={class:"hint-container tip"},M={href:"https://splendidlabz.com/docs/layouts/macro-layouts/masonry/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://splendidlabz.com/docs/layouts/macro-layouts/masonry/",target:"_blank",rel:"noopener noreferrer"},A={class:"hint-container note"},L={href:"https://splendidlabz.com/",target:"_blank",rel:"noopener noreferrer"},W={href:"https://splendidlabz.com/docs/layouts/",target:"_blank",rel:"noopener noreferrer"};function E(m,n){const r=l("VPCard"),o=l("router-link"),k=l("SiteInfo"),i=l("RouteLink"),p=l("VPIcon");return b(),g("div",null,[s("h1",f,[s("a",x,[s("span",null,y(m.$frontmatter.title)+" 관련",1)])]),t(r,u(d({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t(r,u(d({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[t(o,{to:"#what-in-the-magic-is-this"},{default:e(()=>n[0]||(n[0]=[a("What in the magic is this?!")])),_:1,__:[0]})]),s("li",null,[t(o,{to:"#let-s-start-with-a-polyfill"},{default:e(()=>n[1]||(n[1]=[a("Let’s start with a polyfill")])),_:1,__:[1]})]),s("li",null,[t(o,{to:"#masonry-layout-made-simple"},{default:e(()=>n[2]||(n[2]=[a("Masonry layout made simple")])),_:1,__:[2]})]),s("li",null,[t(o,{to:"#step-by-step"},{default:e(()=>n[3]||(n[3]=[a("Step by step")])),_:1,__:[3]})]),s("li",null,[t(o,{to:"#waiting-for-media-to-load"},{default:e(()=>n[4]||(n[4]=[a("Waiting for media to load")])),_:1,__:[4]})]),s("li",null,[t(o,{to:"#making-it-responsive"},{default:e(()=>n[5]||(n[5]=[a("Making it responsive")])),_:1,__:[5]})]),s("li",null,[t(o,{to:"#masonry-grid-with-splendid-labz"},{default:e(()=>n[6]||(n[6]=[a("Masonry grid with Splendid Labz")])),_:1,__:[6]})])])]),n[49]||(n[49]=s("hr",null,null,-1)),t(k,{name:"Making a Masonry Layout That Works Today",desc:"I went on to figure out how make masonry work today with other browsers. I'm happy to report I've found a way — and, bonus! — that support can be provided with only 66 lines of JavaScript.",url:"https://css-tricks.com/making-a-masonry-layout-that-works-today",logo:"https://css-tricks/favicon.svg",preview:"https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/11/masonry.jpg"}),s("p",null,[n[9]||(n[9]=a("Many CSS experts have weighed heavily on possible syntaxes for a new masonry layout feature last year. There were ")),t(i,{to:"/css-tricks.com/css-masonry-css-grid.html"},{default:e(()=>n[7]||(n[7]=[s("strong",null,"two main camps",-1)])),_:1,__:[7]}),n[10]||(n[10]=a(" and a ")),s("a",j,[t(p,{icon:"iconfont icon-webkit"}),n[8]||(n[8]=a("third camp"))]),n[11]||(n[11]=a(" that strikes a balance between the two:"))]),n[50]||(n[50]=s("ol",null,[s("li",null,[a("Use "),s("code",null,"display: masonry")]),s("li",null,[a("Use "),s("code",null,"grid-template-rows: masonry")]),s("li",null,[a("Use "),s("code",null,"item-pack: collapse")])],-1)),s("p",null,[n[15]||(n[15]=a("I don’t think they’ve came up with a resolution ")),s("a",T,[t(p,{icon:"fa-brands fa-chrome"}),n[12]||(n[12]=a("yet"))]),n[16]||(n[16]=a(". But you might want to know that ")),t(i,{to:"/css-tricks.com/native-css-masonry-layout-in-css-grid.html"},{default:e(()=>n[13]||(n[13]=[s("strong",null,"Firefox already supports the masonry layout",-1)])),_:1,__:[13]}),n[17]||(n[17]=a(" with the second syntax. And ")),s("a",z,[t(p,{icon:"fa-brands fa-chrome"}),n[14]||(n[14]=a("Chrome is testing it"))]),n[18]||(n[18]=a(" with the first syntax. While it’s cool to see native support for CSS Masonry evolving, we can’t really use it in production if other browsers don’t support the same implementation…"))]),n[51]||(n[51]=c('<p>So, instead of adding my voice to one of those camps, I went on to figure out <strong>how make masonry work today with other browsers</strong>. I’m happy to report I’ve found a way — and, bonus! — that support can be provided <strong>with only 66 lines of JavaScript</strong>.</p><p>In this article, I’m gonna show you how it works. But first, here’s a demo for you to play with, just to prove that I’m not spewing nonsense. Note that there’s gonna be a slight delay since we’re waiting for an image to load first. If you’re placing a masonry at the top fold, consider skipping including images because of this!</p><p>Anyway, here’s the demo:</p><p>CodePen Embed Fallback https://codepen.io/zellwk/pen/QWoQwEy Masonry Layout with CSS Grid</p><hr><h2 id="what-in-the-magic-is-this" tabindex="-1"><a class="header-anchor" href="#what-in-the-magic-is-this"><span>What in the magic is this?!</span></a></h2><p>Now, there are <strong>a ton of things</strong> I’ve included in this demo, even though there are only 66 lines of JavaScript:</p>',7)),s("ul",null,[n[22]||(n[22]=s("li",null,"You can define the masonry with any number of columns.",-1)),n[23]||(n[23]=s("li",null,"Each item can span multiple columns.",-1)),n[24]||(n[24]=s("li",null,"We wait for media to load before calculating the size of each item.",-1)),s("li",null,[n[20]||(n[20]=a("We made it responsive by listening to changes with the ")),t(i,{to:"/css-tricks.com/a-better-api-for-the-resize-observer.html"},{default:e(()=>n[19]||(n[19]=[s("strong",null,[s("code",null,"ResizeObserver")],-1)])),_:1,__:[19]}),n[21]||(n[21]=a("."))])]),s("p",null,[n[26]||(n[26]=a("These make my implementation incredibly robust and ready for production use, while also way more flexible than many ")),t(i,{to:"/css-tricks.com/piecing-together-approaches-for-a-css-masonry-layout.html"},{default:e(()=>n[25]||(n[25]=[s("strong",null,"Flexbox masonry knockoffs",-1)])),_:1,__:[25]}),n[27]||(n[27]=a(" out there on the interwebs."))]),s("div",C,[n[31]||(n[31]=s("p",{class:"hint-container-title"},"Now, a hot tip",-1)),s("p",null,[n[29]||(n[29]=a("If you combine this with Tailwind’s responsive variants and arbitrary values, you can include ")),s("a",M,[t(p,{icon:"fas fa-globe"}),n[28]||(n[28]=a("even more flexibility"))]),n[30]||(n[30]=a(" into this masonry grid without writing more CSS."))])]),n[52]||(n[52]=c(`<p>Okay, before you get hyped up any further, let’s come back to the main question: How the heck does this work?</p><hr><h2 id="let-s-start-with-a-polyfill" tabindex="-1"><a class="header-anchor" href="#let-s-start-with-a-polyfill"><span>Let’s start with a polyfill</span></a></h2><p>Firefox already supports masonry layouts via the second camp’s syntax. Here’s the CSS you need to create a CSS masonry grid layout in Firefox.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.masonry</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span></span>
<span class="line">    auto-fit<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">minmax</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--item-width<span class="token punctuation">,</span> 200px<span class="token punctuation">)</span><span class="token punctuation">,</span> 100%<span class="token punctuation">)</span><span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> masonry<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">grid-auto-flow</span><span class="token punctuation">:</span> dense<span class="token punctuation">;</span> <span class="token comment">/* Optional, but recommended */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Since Firefox already has native masonry support, naturally we shouldn’t mess around with it. The best way to check if masonry is supported by default is to check if <code>grid-template-rows</code> can hold the <code>masonry</code> value.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">isMasonrySupported</span><span class="token punctuation">(</span><span class="token parameter">container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">.</span>gridTemplateRows <span class="token operator">===</span> <span class="token string">&#39;masonry&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If masonry is supported, we’ll skip our implementation. Otherwise, we’ll do something about it.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> containers <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.masonry&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">containers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">container</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMasonrySupported</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="masonry-layout-made-simple" tabindex="-1"><a class="header-anchor" href="#masonry-layout-made-simple"><span>Masonry layout made simple</span></a></h2><p>Now, I want to preface this segment that I’m not the one who invented this technique.</p><p>I figured out this technique when I was digging through the web, searching for possible ways to implement a masonry grid today. So kudos goes to the unknown developer who developed the idea first — and perhaps me for understanding, converting, and using it.</p><p>The technique goes like this:</p><ol><li>We set <code>grid-auto-rows</code> to <code>0px</code>.</li><li>Then we set <code>row-gap</code> to <code>1px</code>.</li><li>Then we get the item’s height through <code>getBoundingClientRect</code>.</li><li>We then size the item’s “row allocation” by adding the <code>height</code> the <code>column-gap</code> value together.</li></ol><p>This is <em>really</em> unintuitive if you’ve been using CSS Grid the standard way. But once you get this, you can also grasp how this works!</p><p>Now, because this is so unintuitive, we’re gonna take things step-by-step so you see how this whole thing evolves into the final output.</p><hr><h2 id="step-by-step" tabindex="-1"><a class="header-anchor" href="#step-by-step"><span>Step by step</span></a></h2><p>First, we set <code>grid-auto-rows</code> to <code>0px</code>. This is whacky because every grid item will effectively have “zero height”. Yet, at the same time, CSS Grid maintains the order of the columns and rows!</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">containers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">container</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>gridAutoRows <span class="token operator">=</span> <span class="token string">&#39;0px&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/sbs-1.webp?resize=1508%2C796&amp;ssl=1" alt="Three columns over overlapping stacked cards with white backgrounds, black rounded borders and randomly generated placeholder text." tabindex="0" loading="lazy"><figcaption>Three columns over overlapping stacked cards with white backgrounds, black rounded borders and randomly generated placeholder text.</figcaption></figure><p>Second, we set <code>row-gap</code> to <code>1px</code>. Once we do this, you begin to notice an initial stacking of the rows, each one one pixel below the previous one.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">containers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">container</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>gridAutoRows <span class="token operator">=</span> <span class="token string">&#39;0px&#39;</span></span>
<span class="line">  container<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;row-gap&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1px&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;important&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/sbs-2.webp?resize=750%2C398" alt="Cards are still stacked and in three columns, but now they are more directly stacked on top of one another." tabindex="0" loading="lazy"><figcaption>Cards are still stacked and in three columns, but now they are more directly stacked on top of one another.</figcaption></figure><p>Third, assuming there are no images or other media elements in the grid items, we can easily get the height of each grid item with <code>getBoundingClientRect</code>.</p><p>We can then restore the “height” of the grid item in CSS Grid by substituting <code>grow-row-end</code> with the <code>height</code> value. This works because each <code>row-gap</code> is now <code>1px</code> tall.</p><p>When we do this, you can see the grid beginning to take shape. Each item is now (kinda) back at their respective positions:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">containers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">container</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token keyword">let</span> items <span class="token operator">=</span> container<span class="token punctuation">.</span>children</span>
<span class="line">  <span class="token function">layout</span><span class="token punctuation">(</span><span class="token punctuation">{</span> items <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">layout</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> items <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> ib <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>gridRowEnd <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">span </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>ib<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/sbs-3.webp?resize=528%2C397" alt="A masonry layout of cards that alternates between one and two columns." tabindex="0" loading="lazy"><figcaption>A masonry layout of cards that alternates between one and two columns.</figcaption></figure><p>We now need to restore the row gap between items. Thankfully, since masonry grids usually have the same <code>column-gap</code> and <code>row-gap</code> values, we can grab the desired row gap by reading <code>column-gap</code> values.</p><p>Once we do that, we add it to <code>grid-row-end</code> to expand the number of rows (the “height”) taken up by the item in the grid:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">containers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">container</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token keyword">const</span> items <span class="token operator">=</span> container<span class="token punctuation">.</span>children</span>
<span class="line">  <span class="token keyword">const</span> colGap <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">.</span>columnGap<span class="token punctuation">)</span></span>
<span class="line">  <span class="token function">layout</span><span class="token punctuation">(</span><span class="token punctuation">{</span> items<span class="token punctuation">,</span> colGap <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">layout</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> items<span class="token punctuation">,</span> colGap <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> ib <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>gridRowEnd <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">span </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>ib<span class="token punctuation">.</span>height <span class="token operator">+</span> colGap<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/sbs-4.webp?resize=749%2C384" alt="A three-column masonry layout. Most items occupy one column but two elements stretch to take up two columns. the order flows from left to right." tabindex="0" loading="lazy"><figcaption>A three-column masonry layout. Most items occupy one column but two elements stretch to take up two columns. the order flows from left to right.</figcaption></figure><p>And, just like that, we’ve made the masonry grid! Everything from here on is simply to make this ready for production.</p><hr><h2 id="waiting-for-media-to-load" tabindex="-1"><a class="header-anchor" href="#waiting-for-media-to-load"><span>Waiting for media to load</span></a></h2><p>Try adding an image to any grid item and you’ll notice that the grid breaks. That’s because the item’s height will be “wrong”.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/sbs-5.webp?resize=752%2C424" alt="The first item in the masonry layout contains an image with text and sits behind other items in the first two columns." tabindex="0" loading="lazy"><figcaption>The first item in the masonry layout contains an image with text and sits behind other items in the first two columns.</figcaption></figure><p>It’s wrong because we took the <code>height</code> value before the image was properly loaded. The DOM doesn’t know the dimensions of the image yet. To fix this, we need to wait for the media to load before running the <code>layout</code> function.</p><p>We can do this with the following code (which I shall not explain since this is not much of a CSS trick 😅):</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">containers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">container</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">areImagesLoaded</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">areVideosLoaded</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Run the layout function after images are loaded</span></span>
<span class="line">  <span class="token function">layout</span><span class="token punctuation">(</span><span class="token punctuation">{</span> items<span class="token punctuation">,</span> colGap <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Checks if images are loaded</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">areImagesLoaded</span><span class="token punctuation">(</span><span class="token parameter">container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> images <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> promises <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">img</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>img<span class="token punctuation">.</span>complete<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      img<span class="token punctuation">.</span>onload <span class="token operator">=</span> resolve</span>
<span class="line">      img<span class="token punctuation">.</span>onerror <span class="token operator">=</span> reject</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Checks if videos are loaded</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">areVideosLoaded</span><span class="token punctuation">(</span><span class="token parameter">container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> videos <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;video&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> promises <span class="token operator">=</span> videos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">video</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>video<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      video<span class="token punctuation">.</span>onloadedmetadata <span class="token operator">=</span> resolve</span>
<span class="line">      video<span class="token punctuation">.</span>onerror <span class="token operator">=</span> reject</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Voilà</em>, we have a CSS masnory grid that works with images and videos!</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/sbs-6.webp?resize=752%2C515" alt="A complete masonry layout with six items. The first and third items occupy the first two columns and items 2, 4, 5, and 6 flow into the third column,." tabindex="0" loading="lazy"><figcaption>A complete masonry layout with six items. The first and third items occupy the first two columns and items 2, 4, 5, and 6 flow into the third column,.</figcaption></figure><hr><h2 id="making-it-responsive" tabindex="-1"><a class="header-anchor" href="#making-it-responsive"><span>Making it responsive</span></a></h2><p>This is a simple step. We only need to use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver" target="_blank" rel="noopener noreferrer">ResizeObserver API</a> to listen for any change in dimensions of the masonry grid container.</p><p>When there’s a change, we run the <code>layout</code> function again:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">containers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">container</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span>observerFn<span class="token punctuation">)</span></span>
<span class="line">observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">observerFn</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entry <span class="token keyword">of</span> entries<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">layout</span><span class="token punctuation">(</span><span class="token punctuation">{</span>colGap<span class="token punctuation">,</span> items<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49)),s("p",null,[n[33]||(n[33]=a("This demo uses the standard Resize Observer API. But you can make it simpler by using the refined ")),n[34]||(n[34]=s("code",null,"resizeObserver",-1)),n[35]||(n[35]=a(" function we built ")),t(i,{to:"/css-tricks.com/a-better-api-for-the-resize-observer.html"},{default:e(()=>n[32]||(n[32]=[s("strong",null,"the other day",-1)])),_:1,__:[32]}),n[36]||(n[36]=a("."))]),n[53]||(n[53]=c(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">containers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">container</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token function">resizeObserver</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">callback</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">layout</span><span class="token punctuation">(</span><span class="token punctuation">{</span>colGap<span class="token punctuation">,</span> items<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s pretty much it! You now have a robust masonry grid that you can use in every working browser that supports CSS Grid!</p><p>Exciting, isn’t it? This implementation is so simple to use!</p><hr><h2 id="masonry-grid-with-splendid-labz" tabindex="-1"><a class="header-anchor" href="#masonry-grid-with-splendid-labz"><span>Masonry grid with Splendid Labz</span></a></h2>`,5)),s("p",null,[n[38]||(n[38]=a("If you’re not adverse to using code built by others, maybe you might want to consider ")),s("a",I,[t(p,{icon:"fas fa-globe"}),n[37]||(n[37]=a("grabbing the one I’ve built for you"))]),n[39]||(n[39]=a(" in Splendid Labz."))]),n[54]||(n[54]=c(`<p>To do that, install the helper library and add the necessary code:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment"># Installing the library</span></span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> @splendidlabz/styles</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token comment">/* Import all layouts code */</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@import</span> <span class="token string">&#39;@splendidlabz/layouts&#39;</span><span class="token punctuation">;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Use the masonry script</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> masonry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@splendidlabz/styles/scripts&#39;</span></span>
<span class="line"><span class="token function">masonry</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("div",A,[n[45]||(n[45]=s("p",{class:"hint-container-title"},"One last thing",-1)),s("p",null,[n[41]||(n[41]=a("I’ve been building a ton of tools to help ")),n[42]||(n[42]=s("strong",null,"make web development much easier for you and me",-1)),n[43]||(n[43]=a(". I’ve parked them all under the ")),s("a",L,[t(p,{icon:"fas fa-globe"}),n[40]||(n[40]=a("Splendid Labz"))]),n[44]||(n[44]=a(" brand — and one of these examples is this masonry grid I showed you today."))])]),s("p",null,[n[47]||(n[47]=a("If you love this, you might be interested in other ")),s("a",W,[t(p,{icon:"fas fa-globe"}),n[46]||(n[46]=a("layout utilities"))]),n[48]||(n[48]=a(" that makes layout super simple to build."))]),n[55]||(n[55]=s("p",null,"Now, I hope you have enjoyed this article today. Go unleash your new CSS masonry grid if you wish to, and all the best!",-1)),v(" TODO: add ARTICLE CARD "),t(r,u(d({title:"Making a Masonry Layout That Works Today",desc:"I went on to figure out how make masonry work today with other browsers. I'm happy to report I've found a way — and, bonus! — that support can be provided with only 66 lines of JavaScript.",link:"https://chanhi2000.github.io/bookshelf/css-tricks.com/making-a-masonry-layout-that-works-today.html",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16)])}const O=h(w,[["render",E]]),G=JSON.parse('{"path":"/css-tricks.com/making-a-masonry-layout-that-works-today.html","title":"Making a Masonry Layout That Works Today","lang":"en-US","frontmatter":{"lang":"en-US","title":"Making a Masonry Layout That Works Today","description":"Article(s) > Making a Masonry Layout That Works Today","icon":"fa-brands fa-css3-alt","category":["CSS","JavaScript","Article(s)"],"tag":["blog","css-tricks.com","css","js","javascript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Making a Masonry Layout That Works Today\\",\\"image\\":[\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/sbs-1.webp?resize=1508%2C796&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/sbs-2.webp?resize=750%2C398\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/sbs-3.webp?resize=528%2C397\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/sbs-4.webp?resize=749%2C384\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/sbs-5.webp?resize=752%2C424\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/sbs-6.webp?resize=752%2C515\\"],\\"datePublished\\":\\"2025-07-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zell Liew\\",\\"url\\":\\"https://css-tricks.com/author/zellwk/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/making-a-masonry-layout-that-works-today.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Making a Masonry Layout That Works Today"}],["meta",{"property":"og:description","content":"Article(s) > Making a Masonry Layout That Works Today"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/11/masonry.jpg"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/11/masonry.jpg"}],["meta",{"name":"twitter:image:alt","content":"Making a Masonry Layout That Works Today"}],["meta",{"property":"article:author","content":"Zell Liew"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"css-tricks.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-07-28T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Making a Masonry Layout That Works Today"},{"property":"og:description","content":"Making a Masonry Layout That Works Today"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/making-a-masonry-layout-that-works-today.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-07-28T00:00:00.000Z","isOriginal":false,"author":[{"name":"Zell Liew","url":"https://css-tricks.com/author/zellwk/"}],"cover":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/11/masonry.jpg"},"git":{},"readingTime":{"minutes":6.99,"words":2096},"filePathRelative":"css-tricks.com/making-a-masonry-layout-that-works-today.md","copyright":{"author":"Zell Liew"}}');export{O as comp,G as data};
