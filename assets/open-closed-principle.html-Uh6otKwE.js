import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as a,b as h,a as b,t as g,n as t,g as o,w as l,e,r as i,o as y}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/code-maze.com/open-closed-principle/02-OCP-first-example-result.png",f="/bookshelf/assets/image/code-maze.com/open-closed-principle/03-OCP-second-example-result-1.png",S={},C={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},P={class:"table-of-contents"},D={class:"hint-container info"},M={class:"hint-container info"},L={href:"https://github.com/CodeMazeBlog/solid-principles-csharp/tree/open-closed-principle",target:"_blank",rel:"noopener noreferrer"};function O(u,n){const p=i("VPCard"),c=i("router-link"),r=i("SiteInfo"),d=i("VPIcon"),k=i("RouteLink");return y(),v("div",null,[s("h1",C,[s("a",x,[s("span",null,g(u.$frontmatter.title)+" 관련",1)])]),a(p,t(o({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",P,[s("ul",null,[s("li",null,[a(c,{to:"#salary-calculator-example"},{default:l(()=>n[0]||(n[0]=[e("Salary Calculator Example")])),_:1,__:[0]})]),s("li",null,[a(c,{to:"#better-salary-calculator-example-–-ocp-implemented"},{default:l(()=>n[1]||(n[1]=[e("Better Salary Calculator Example – OCP implemented")])),_:1,__:[1]})]),s("li",null,[a(c,{to:"#filtering-computer-monitors-example"},{default:l(()=>n[2]||(n[2]=[e("Filtering Computer Monitors Example")])),_:1,__:[2]})]),s("li",null,[a(c,{to:"#additional-filter-requests"},{default:l(()=>n[3]||(n[3]=[e("Additional Filter Requests")])),_:1,__:[3]})]),s("li",null,[a(c,{to:"#why-should-we-implement-the-open-closed-principle"},{default:l(()=>n[4]||(n[4]=[e("Why Should We Implement the Open Closed Principle")])),_:1,__:[4]})]),s("li",null,[a(c,{to:"#conclusion"},{default:l(()=>n[5]||(n[5]=[e("Conclusion")])),_:1,__:[5]})])])]),n[16]||(n[16]=s("hr",null,null,-1)),a(r,{name:"SOLID Principles in C# – Open Closed Principle",desc:"In this article you will learn about Open Closed Principle, how to implement it step by step and why it is important while developing a project.",url:"https://code-maze.com/open-closed-principle/",logo:"/assets/image/code-maze.com/favicon.png",preview:"/assets/image/open-closed-principle/banner.png"}),n[17]||(n[17]=s("p",null,[e("The Open Closed Principle ("),s("strong",null,"OCP"),e(") is the SOLID principle which states that the software entities (classes or methods) should be open for extension but closed for modification.")],-1)),n[18]||(n[18]=s("p",null,"But what does this really mean?",-1)),n[19]||(n[19]=s("p",null,"Basically, we should strive to write a code that doesn’t require modification every time a customer changes its request. Providing such a solution where we can extend the behavior of a class (with that additional customer’s request) and not modify that class, should be our goal most of the time.",-1)),s("div",D,[n[6]||(n[6]=s("p",{class:"hint-container-title"},"Series",-1)),a(p,t(o({title:"SOLID Principles in C# – Single Responsibility Principle",desc:"In this article you will learn how to implement Single Responsibility Principle (SRP) in your code thus making it better, readable and maintainable as well.",link:"/code-maze.com/single-responsibility-principle.md",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16),a(p,t(o({title:"SOLID Principles in C# – Open Closed Principle",desc:"In this article you will learn about Open Closed Principle, how to implement it step by step and why it is important while developing a project.",link:"/code-maze.com/open-closed-principle.md",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16),a(p,t(o({title:"SOLID Principles in C# – Liskov Substitution Principle",desc:"In this article you will learn more about Liskov Substitution Principle, how to achieve it in your code and why should we use it.",link:"/code-maze.com/liskov-substitution-principle.md",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16),a(p,t(o({title:"SOLID Principles in C# – Interface Segregation Principle",desc:"In this article you are going to learn about Interface Segregation Principle, how to implement it and what are the benefits of its implementation.",link:"/code-maze.com/interface-segregation-principle.md",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16),a(p,t(o({title:"SOLID Principles in C# – Dependency Inversion Principle",desc:"In this article you are going to learn about Dependency Inversion Principle, how to implement this principle and what are the benefits of implementation.",link:"/code-maze.com/dependency-inversion-principle.md",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16)]),n[20]||(n[20]=s("p",null,"In this article, we will show you how to write the code by following the Open Closed Principle with two different examples. Initially, none of the examples will obey the OCP rules, but right after the initial development, we are going to refactor the code using the OCP.",-1)),s("div",M,[n[12]||(n[12]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[10]||(n[10]=e("To download the source code for this project, check out ")),s("a",L,[n[7]||(n[7]=e("the Open Closed Principle Project Source Code (")),a(d,{icon:"iconfont icon-github"}),n[8]||(n[8]=s("code",null,"CodeMazeBlog/solid-principles-csharp",-1)),n[9]||(n[9]=e(")"))]),n[11]||(n[11]=e("."))]),a(r,{name:"CodeMazeBlog/solid-principles-csharp at open-closed-principle",desc:"This repository contains source code for the SOLID principles in C# on Code Maze blog - CodeMazeBlog/solid-principles-csharp at open-closed-principle",url:"https://github.com/CodeMazeBlog/solid-principles-csharp/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/ea17b32ee72d286321112ce49503fb8ba1f177691cc01f5cf36da56bafc48bec/CodeMazeBlog/solid-principles-csharp"})]),s("p",null,[n[14]||(n[14]=e("To read about other SOLID principles, check out our ")),a(k,{to:"/code-maze.com/solid-principles.html"},{default:l(()=>n[13]||(n[13]=[s("strong",null,"SOLID Principles page",-1)])),_:1,__:[13]}),n[15]||(n[15]=e("."))]),n[21]||(n[21]=h(`<p>So, let’s jump right into it.</p><hr><h2 id="salary-calculator-example" tabindex="-1"><a class="header-anchor" href="#salary-calculator-example"><span>Salary Calculator Example</span></a></h2><p>Let’s imagine that we have a task where we need to calculate the total cost of all the developer salaries in a single company. Of course, we are going to make this example simple and focus on the required topic.</p><p>To get started, we are going to create the model class first:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeveloperReport</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Level <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> WorkingHours <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> HourlyRate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once we’ve created our model, we can transition to the salary calculation feature:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SalaryCalculator</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>DeveloperReport<span class="token punctuation">&gt;</span></span> _developerReports<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">SalaryCalculator</span><span class="token punctuation">(</span><span class="token class-name">List <span class="token punctuation">&lt;</span>DeveloperReport<span class="token punctuation">&gt;</span></span> developerReports<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _developerReports <span class="token operator">=</span> developerReports<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">CalculateTotalSalaries</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">double</span></span> totalSalaries <span class="token operator">=</span> <span class="token number">0D</span> <span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> devReport <span class="token keyword">in</span> _developerReports<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            totalSalaries <span class="token operator">+=</span> devReport<span class="token punctuation">.</span>HourlyRate <span class="token operator">*</span> devReport<span class="token punctuation">.</span>WorkingHours<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> totalSalaries<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, all we have to do is to provide some data for this class and we are going to have our total costs calculated:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> devReports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>DeveloperReport<span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeveloperReport</span> <span class="token punctuation">{</span>Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;Dev1&quot;</span><span class="token punctuation">,</span> Level <span class="token operator">=</span> <span class="token string">&quot;Senior developer&quot;</span><span class="token punctuation">,</span> HourlyRate  <span class="token operator">=</span> <span class="token number">30.5</span><span class="token punctuation">,</span> WorkingHours <span class="token operator">=</span> <span class="token number">160</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeveloperReport</span> <span class="token punctuation">{</span>Id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;Dev2&quot;</span><span class="token punctuation">,</span> Level <span class="token operator">=</span> <span class="token string">&quot;Junior developer&quot;</span><span class="token punctuation">,</span> HourlyRate  <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> WorkingHours <span class="token operator">=</span> <span class="token number">150</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeveloperReport</span> <span class="token punctuation">{</span>Id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;Dev3&quot;</span><span class="token punctuation">,</span> Level <span class="token operator">=</span> <span class="token string">&quot;Senior developer&quot;</span><span class="token punctuation">,</span> HourlyRate  <span class="token operator">=</span> <span class="token number">30.5</span><span class="token punctuation">,</span> WorkingHours <span class="token operator">=</span> <span class="token number">180</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SalaryCalculator</span><span class="token punctuation">(</span>devReports<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Sum of all the developer salaries is </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">calculator<span class="token punctuation">.</span><span class="token function">CalculateTotalSalaries</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> dollars&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our result should be:</p><figure><img src="`+w+`" alt="Open Closed Principle first example" tabindex="0" loading="lazy"><figcaption>Open Closed Principle first example</figcaption></figure><p>So, all of this is working great, but now our boss comes to our office and says that we need a different calculation for the senior and junior developers. The senior developers should have a bonus of 20% on a salary.</p><p>Of course, to satisfy this requirement, we are going to modify our <code>CalculateTotalSalaries</code> method like this:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">CalculateTotalSalaries</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">double</span></span> totalSalaries <span class="token operator">=</span> <span class="token number">0D</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> devReport <span class="token keyword">in</span> _developerReports<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>devReport<span class="token punctuation">.</span>Level <span class="token operator">==</span> <span class="token string">&quot;Senior developer&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            totalSalaries <span class="token operator">+=</span> devReport<span class="token punctuation">.</span>HourRate <span class="token operator">*</span> devReport<span class="token punctuation">.</span>WorkingHours <span class="token operator">*</span> <span class="token number">1.2</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            totalSalaries <span class="token operator">+=</span> devReport<span class="token punctuation">.</span>HourRate <span class="token operator">*</span> devReport<span class="token punctuation">.</span>WorkingHours<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> totalSalaries<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Even though this solution is going to give us the correct result, this is not an optimal solution.</p><p>Why is that?</p><p>Mainly, because we had to modify our existing class behavior which worked perfectly. Another thing is that if our boss comes again and ask us to modify calculation for the junior dev’s as well, we would have to change our class again. This is totally against of what OCP stands for.</p><p>It is obvious that we need to change something in our solution, so, let’s do it.</p><hr><h2 id="better-salary-calculator-example-–-ocp-implemented" tabindex="-1"><a class="header-anchor" href="#better-salary-calculator-example-–-ocp-implemented"><span>Better Salary Calculator Example – OCP implemented</span></a></h2><p>To create a code that abides by the Open Closed Principle, we are going to create an abstract class first:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseSalaryCalculator</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token return-type class-name">DeveloperReport</span> DeveloperReport <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">BaseSalaryCalculator</span><span class="token punctuation">(</span><span class="token class-name">DeveloperReport</span> developerReport<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        DeveloperReport <span class="token operator">=</span> developerReport<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">CalculateSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As a continuation, we are going to create two classes which will inherit from the BaseSalaryCalculator class. Because it is obvious that our calculation depends on the developer’s level, we are going to create our new classes in that manner:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeniorDevSalaryCalculator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseSalaryCalculator</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">SeniorDevSalaryCalculator</span><span class="token punctuation">(</span><span class="token class-name">DeveloperReport</span> report<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">:</span><span class="token keyword">base</span><span class="token punctuation">(</span>report<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">CalculateSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> DeveloperReport<span class="token punctuation">.</span>HourlyRate <span class="token operator">*</span> DeveloperReport<span class="token punctuation">.</span>WorkingHours <span class="token operator">*</span> <span class="token number">1.2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JuniorDevSalaryCalculator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseSalaryCalculator</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">JuniorDevSalaryCalculator</span><span class="token punctuation">(</span><span class="token class-name">DeveloperReport</span> developerReport<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">:</span><span class="token keyword">base</span><span class="token punctuation">(</span>developerReport<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">CalculateSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> DeveloperReport<span class="token punctuation">.</span>HourlyRate <span class="token operator">*</span> DeveloperReport<span class="token punctuation">.</span>WorkingHours<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Excellent. Now we can modify the <code>SalaryCalculator</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SalaryCalculator</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>BaseSalaryCalculator<span class="token punctuation">&gt;</span></span> _developerCalculation<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">SalaryCalculator</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>BaseSalaryCalculator<span class="token punctuation">&gt;</span></span> developerCalculation<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _developerCalculation <span class="token operator">=</span> developerCalculation<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">CalculateTotalSalaries</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">double</span></span> totalSalaries <span class="token operator">=</span> <span class="token number">0D</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> devCalc <span class="token keyword">in</span> _developerCalculation<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            totalSalaries <span class="token operator">+=</span> devCalc<span class="token punctuation">.</span><span class="token function">CalculateSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> totalSalaries<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This looks so much better because we won’t have to change any of our current classes if our boss comes with another request about the intern payment calculation or any other as well.</p><p>All we have to do now is to add another class with its own calculation logic. So basically, our <code>SalaryCalculator</code> class is now closed for modification and opened for an extension, which is exactly what OCP states.</p><p>To finish this example, let’s modify the <code>Program.cs</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Program</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> devCalculations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>BaseSalaryCalculator<span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SeniorDevSalaryCalculator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeveloperReport</span> <span class="token punctuation">{</span>Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;Dev1&quot;</span><span class="token punctuation">,</span> Level <span class="token operator">=</span> <span class="token string">&quot;Senior developer&quot;</span><span class="token punctuation">,</span> HourlyRate <span class="token operator">=</span> <span class="token number">30.5</span><span class="token punctuation">,</span> WorkingHours <span class="token operator">=</span> <span class="token number">160</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JuniorDevSalaryCalculator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeveloperReport</span> <span class="token punctuation">{</span>Id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;Dev2&quot;</span><span class="token punctuation">,</span> Level <span class="token operator">=</span> <span class="token string">&quot;Junior developer&quot;</span><span class="token punctuation">,</span> HourlyRate <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> WorkingHours <span class="token operator">=</span> <span class="token number">150</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SeniorDevSalaryCalculator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DeveloperReport</span> <span class="token punctuation">{</span>Id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;Dev3&quot;</span><span class="token punctuation">,</span> Level <span class="token operator">=</span> <span class="token string">&quot;Senior developer&quot;</span><span class="token punctuation">,</span> HourlyRate <span class="token operator">=</span> <span class="token number">30.5</span><span class="token punctuation">,</span> WorkingHours <span class="token operator">=</span> <span class="token number">180</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SalaryCalculator</span><span class="token punctuation">(</span>devCalculations<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Sum of all the developer salaries is </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">calculator<span class="token punctuation">.</span><span class="token function">CalculateTotalSalaries</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> dollars&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Awesome. We have finished our first example.</p><p>Let’s start with another one.</p><hr><h2 id="filtering-computer-monitors-example" tabindex="-1"><a class="header-anchor" href="#filtering-computer-monitors-example"><span>Filtering Computer Monitors Example</span></a></h2><p>Let’s imagine for a moment that we have a task to write an application which gives us all the required information about computer monitors in our shop, based on different criteria. We will introduce only two criteria here, the type of monitors and the screen size. So let’s start with that:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">MonitorType</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    OLED<span class="token punctuation">,</span></span>
<span class="line">    LCD<span class="token punctuation">,</span></span>
<span class="line">    LED</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Screen</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    WideScreen<span class="token punctuation">,</span></span>
<span class="line">    CurvedScreen</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To continue, we are going to create a simple model class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerMonitor</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">MonitorType</span> Type <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Screen</span> Screen <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, we need to implement our filtering functionality. For example, we want to filter by the monitor types:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MonitorFilter</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>ComputerMonitor<span class="token punctuation">&gt;</span></span> <span class="token function">FilterByType</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>ComputerMonitor<span class="token punctuation">&gt;</span></span> monitors<span class="token punctuation">,</span> <span class="token class-name">MonitorType</span> type<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">            monitors<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>Type <span class="token operator">==</span> type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And finally the <code>Program.cs</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Program</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> monitors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>ComputerMonitor<span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ComputerMonitor</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Samsung S345&quot;</span><span class="token punctuation">,</span> Screen <span class="token operator">=</span> Screen<span class="token punctuation">.</span>CurvedScreen<span class="token punctuation">,</span> Type <span class="token operator">=</span> MonitorType<span class="token punctuation">.</span>OLED <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ComputerMonitor</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Philips P532&quot;</span><span class="token punctuation">,</span> Screen <span class="token operator">=</span> Screen<span class="token punctuation">.</span>WideScreen<span class="token punctuation">,</span> Type <span class="token operator">=</span> MonitorType<span class="token punctuation">.</span>LCD <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ComputerMonitor</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;LG L888&quot;</span><span class="token punctuation">,</span> Screen <span class="token operator">=</span> Screen<span class="token punctuation">.</span>WideScreen<span class="token punctuation">,</span> Type <span class="token operator">=</span> MonitorType<span class="token punctuation">.</span>LED <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ComputerMonitor</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Samsung S999&quot;</span><span class="token punctuation">,</span> Screen <span class="token operator">=</span> Screen<span class="token punctuation">.</span>WideScreen<span class="token punctuation">,</span> Type <span class="token operator">=</span> MonitorType<span class="token punctuation">.</span>OLED <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ComputerMonitor</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Dell D2J47&quot;</span><span class="token punctuation">,</span> Screen <span class="token operator">=</span> Screen<span class="token punctuation">.</span>CurvedScreen<span class="token punctuation">,</span> Type <span class="token operator">=</span> MonitorType<span class="token punctuation">.</span>LCD <span class="token punctuation">}</span>        </span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MonitorFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> lcdMonitors <span class="token operator">=</span> filter<span class="token punctuation">.</span><span class="token function">FilterByType</span><span class="token punctuation">(</span>monitors<span class="token punctuation">,</span> MonitorType<span class="token punctuation">.</span>LCD<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;All LCD monitors&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> monitor <span class="token keyword">in</span> lcdMonitors<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Name: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">monitor<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">, Type: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">monitor<span class="token punctuation">.</span>Type</span><span class="token punctuation">}</span></span><span class="token string">, Screen: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">monitor<span class="token punctuation">.</span>Screen</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is going to work just fine. But, after a couple of days, we receive a request that our customers want to have the filter by Screen functionality as well.</p><p>So this should be quite simple, shouldn’t it?</p><p>Let’s just change the <code>MonitorFilter</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MonitorFilter</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>ComputerMonitor<span class="token punctuation">&gt;</span></span> <span class="token function">FilterByType</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>ComputerMonitor<span class="token punctuation">&gt;</span></span> monitors<span class="token punctuation">,</span> <span class="token class-name">MonitorType</span> type<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        monitors<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>Type <span class="token operator">==</span> type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>ComputerMonitor<span class="token punctuation">&gt;</span></span> <span class="token function">FilterByScreen</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>ComputerMonitor<span class="token punctuation">&gt;</span></span> monitors<span class="token punctuation">,</span> <span class="token class-name">Screen</span> screen<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        monitors<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>Screen <span class="token operator">==</span> screen<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Even though this is going to give us the correct result, we have a problem because we have to modify our existing class. And what if we receive another request to filter all the monitors by type and screen together? We all see where this lead us, towards breaking the OCP. We are not extending our <code>MonitorFilter</code> class but modifying it.</p><p>So, in order to avoid existing class modification, let’s try another approach.</p><p>Creating a couple of interfaces is going to be our first step:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISpecification<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">isSatisfied</span><span class="token punctuation">(</span><span class="token class-name">T</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IFilter<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token function">Filter</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> monitors<span class="token punctuation">,</span> <span class="token class-name">ISpecification<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> specification<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With the <code>ISpecification</code> interface, we can determine whether or not our criterion is satisfied and we can send it to the Filter method from the <code>IFilter</code> interface.</p><p>To continue on, we are going to create a separate class for the monitor type specification:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MonitorTypeSpecification</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ISpecification<span class="token punctuation">&lt;</span>ComputerMonitor<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">MonitorType</span> _type<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">MonitorTypeSpecification</span><span class="token punctuation">(</span><span class="token class-name">MonitorType</span> type<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _type <span class="token operator">=</span> type<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">isSatisfied</span><span class="token punctuation">(</span><span class="token class-name">ComputerMonitor</span> item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>Type <span class="token operator">==</span> _type<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After this modification, all we have to do is to write a class that implements IFilter interface. But because we already have the <code>MonitorFilter</code> class, we are just going to modify it:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MonitorFilter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IFilter<span class="token punctuation">&lt;</span>ComputerMonitor<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>ComputerMonitor<span class="token punctuation">&gt;</span></span> <span class="token function">Filter</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>ComputerMonitor<span class="token punctuation">&gt;</span></span> monitors<span class="token punctuation">,</span> <span class="token class-name">ISpecification<span class="token punctuation">&lt;</span>ComputerMonitor<span class="token punctuation">&gt;</span></span> specification<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        monitors<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> specification<span class="token punctuation">.</span><span class="token function">isSatisfied</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, let’s modify the <code>Program.cs</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MonitorFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> lcdMonitors <span class="token operator">=</span> filter<span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>monitors<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MonitorTypeSpecification</span><span class="token punctuation">(</span>MonitorType<span class="token punctuation">.</span>LCD<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;All LCD monitors&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> monitor <span class="token keyword">in</span> lcdMonitors<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Name: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">monitor<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">, Type: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">monitor<span class="token punctuation">.</span>Type</span><span class="token punctuation">}</span></span><span class="token string">, Screen: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">monitor<span class="token punctuation">.</span>Screen</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The result should be the same:</p><figure><img src="`+f+`" alt="Open Closed Principle second example" tabindex="0" loading="lazy"><figcaption>Open Closed Principle second example</figcaption></figure><hr><h2 id="additional-filter-requests" tabindex="-1"><a class="header-anchor" href="#additional-filter-requests"><span>Additional Filter Requests</span></a></h2><p>Right now, we are perfectly able to extend our <code>MonitorFilter</code> class without any further modification. So, if now we have to implement the filter by screen feature, for example only widescreen monitors, we can do it with a new class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScreenSpecification</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ISpecification<span class="token punctuation">&lt;</span>ComputerMonitor<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Screen</span> _screen<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">ScreenSpecification</span><span class="token punctuation">(</span><span class="token class-name">Screen</span> screen<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _screen <span class="token operator">=</span> screen<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">isSatisfied</span><span class="token punctuation">(</span><span class="token class-name">ComputerMonitor</span> item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>Screen <span class="token operator">==</span> _screen<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And, we can make a call towards the <code>MonitorFilter</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;All WideScreen Monitors&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> wideScreenMonitors <span class="token operator">=</span> filter<span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>monitors<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ScreenSpecification</span><span class="token punctuation">(</span>Screen<span class="token punctuation">.</span>WideScreen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> monitor <span class="token keyword">in</span> wideScreenMonitors<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">     Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Name: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">monitor<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">, Type: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">monitor<span class="token punctuation">.</span>Type</span><span class="token punctuation">}</span></span><span class="token string">, Screen: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">monitor<span class="token punctuation">.</span>Screen</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Excellent.</p><p>With this project structure, we can even extend our filtering criterion to, for example, only OLED and widescreen monitors. All we have to do is to create another specification class.</p><hr><h2 id="why-should-we-implement-the-open-closed-principle" tabindex="-1"><a class="header-anchor" href="#why-should-we-implement-the-open-closed-principle"><span>Why Should We Implement the Open Closed Principle</span></a></h2><p>By implementing the OCP we are lowering the chance of producing bugs in our project.</p><p>For example, if we have a fully working and already tested class in production, by extending it instead of changing it, we would definitely have a lesser impact on the rest of the system.</p><p>Therefore, we introduce another class to extend the behavior of the main class thus avoid the existing functionality modification that other classes may rely upon.</p><p>Another benefit is that we only have to test and deploy the new features, which wouldn’t be the case if we had to change existing functionality. Furthermore, if we decide that we don’t need this feature anymore (sometime in the future), all we have to do is to revert just newly implemented change and that’s it.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>We’ve seen how the OCP can help us create better and more maintainable code. But, as with everything else, we should be cautious when implementing this principle.</p><p>Sometimes it’s just impossible to extend our class and all we are left to do is to modify existing functionality. We shouldn’t be afraid to do it, it is quite normal, but at least we should try to make those changes as discrete as they can be.</p><p>So, we should develop our applications with the OCP in mind and we should strive to write extendable code as much as we can because it leads to the maintainable, scalable and testable codebase.</p><p>And that’s what we want, isn’t it?</p>`,83)),b(" TODO: add ARTICLE CARD "),a(p,t(o({title:"SOLID Principles in C# – Open Closed Principle",desc:"In this article you will learn about Open Closed Principle, how to implement it step by step and why it is important while developing a project.",link:"https://chanhi2000.github.io/bookshelf/code-maze.com/open-closed-principle.html",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16)])}const I=m(S,[["render",O]]),R=JSON.parse('{"path":"/code-maze.com/open-closed-principle.html","title":"SOLID Principles in C# – Open Closed Principle","lang":"en-US","frontmatter":{"lang":"en-US","title":"SOLID Principles in C# – Open Closed Principle","description":"Article(s) > SOLID Principles in C# – Open Closed Principle","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","code-maze.com","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SOLID Principles in C# – Open Closed Principle\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/open-closed-principle/02-OCP-first-example-result.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/open-closed-principle/03-OCP-second-example-result-1.png\\"],\\"datePublished\\":\\"2018-12-31T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marinko Spasojević\\",\\"url\\":\\"https://code-maze.com/author/marinko/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/open-closed-principle.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"SOLID Principles in C# – Open Closed Principle"}],["meta",{"property":"og:description","content":"Article(s) > SOLID Principles in C# – Open Closed Principle"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/open-closed-principle/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/open-closed-principle/banner.png"}],["meta",{"name":"twitter:image:alt","content":"SOLID Principles in C# – Open Closed Principle"}],["meta",{"property":"article:author","content":"Marinko Spasojević"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2018-12-31T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > SOLID Principles in C# – Open Closed Principle"},{"property":"og:description","content":"SOLID Principles in C# – Open Closed Principle"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/open-closed-principle.html"}]],"prev":"/programming/cs/articles/README.md","date":"2018-12-31T00:00:00.000Z","isOriginal":false,"author":[{"name":"Marinko Spasojević","url":"https://code-maze.com/author/marinko/"}],"cover":"/assets/image/code-maze.com/open-closed-principle/banner.png"},"git":{},"readingTime":{"minutes":8.09,"words":2427},"filePathRelative":"code-maze.com/open-closed-principle.md","copyright":{"author":"Marinko Spasojević"}}');export{I as comp,R as data};
