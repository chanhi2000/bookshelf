import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as t,b as g,a as h,t as b,n as i,g as u,w as e,e as a,r as o,o as f}from"./app-BVguHYKu.js";const w={},y={id:"frontmatter-title-관련",tabindex:"-1"},E={class:"header-anchor",href:"#frontmatter-title-관련"},C={class:"table-of-contents"},B={href:"https://unsplash.com/ko/%EC%82%AC%EC%A7%84/%EA%B2%80%EC%9D%80%EC%83%89-%EB%85%B8%ED%8A%B8%EB%B6%81-%EC%BB%B4%ED%93%A8%ED%84%B0%EA%B0%80-%EC%BC%9C%EC%A0%B8-%ED%8C%8C%EB%9E%80%EC%83%89-%ED%99%94%EB%A9%B4%EC%9D%B4-%ED%91%9C%EC%8B%9C%EB%90%A8-cY1SvvEfRwk",target:"_blank",rel:"noopener noreferrer"},_={href:"https://unsplash.com/ko/@afgprogrammer",target:"_blank",rel:"noopener noreferrer"};function A(r,n){const c=o("VPCard"),p=o("router-link"),d=o("SiteInfo"),k=o("RouteLink"),l=o("VPIcon");return f(),v("div",null,[s("h1",y,[s("a",E,[s("span",null,b(r.$frontmatter.title)+" 관련",1)])]),t(c,i(u({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",C,[s("ul",null,[s("li",null,[t(p,{to:"#클로저란"},{default:e(()=>n[0]||(n[0]=[a("클로저란?")])),_:1,__:[0]}),s("ul",null,[s("li",null,[t(p,{to:"#_1-클로저의-정의"},{default:e(()=>n[1]||(n[1]=[a("1. 클로저의 정의")])),_:1,__:[1]})]),s("li",null,[t(p,{to:"#_2-예제-코드-분석"},{default:e(()=>n[2]||(n[2]=[a("2. 예제 코드 분석")])),_:1,__:[2]})])])]),s("li",null,[t(p,{to:"#예제-코드를-통한-클로저-학습"},{default:e(()=>n[3]||(n[3]=[a("예제 코드를 통한 클로저 학습")])),_:1,__:[3]}),s("ul",null,[s("li",null,[t(p,{to:"#_1-렉시컬-스코프와-내부-슬롯"},{default:e(()=>n[4]||(n[4]=[a("1. 렉시컬 스코프와 내부 슬롯")])),_:1,__:[4]})]),s("li",null,[t(p,{to:"#_2-클로저에-대한-새로운-정의"},{default:e(()=>n[5]||(n[5]=[a("2. 클로저에 대한 새로운 정의")])),_:1,__:[5]})])])]),s("li",null,[t(p,{to:"#활용-사례"},{default:e(()=>n[6]||(n[6]=[a("활용 사례")])),_:1,__:[6]}),s("ul",null,[s("li",null,[t(p,{to:"#_1-상태-유지-함수"},{default:e(()=>n[7]||(n[7]=[a("1. 상태 유지 함수")])),_:1,__:[7]})]),s("li",null,[t(p,{to:"#_2-데이터-은닉과-캡슐화"},{default:e(()=>n[8]||(n[8]=[a("2. 데이터 은닉과 캡슐화")])),_:1,__:[8]})])])]),s("li",null,[t(p,{to:"#마치며"},{default:e(()=>n[9]||(n[9]=[a("마치며")])),_:1,__:[9]})])])]),n[19]||(n[19]=s("hr",null,null,-1)),t(d,{name:"10분 만에 이해하는 자바스크립트 ‘클로저(Closure)’",desc:"클로저(Closure)는 자바스크립트의 핵심 개념 중 하나이지만, 개발자들이 흔히 어렵게 느끼는 개념이기도 합니다. 공식 문서나 책을 봐도 “클로저는 함수와 렉시컬 환경의 조합입니다”와 같은 문장이 나오는데, 바로 이해가 되지 않아 머리가 아파오기도 하죠. 하지만 사실 클로저는 이해하기 쉬운 개념 중 하나입니다. 단지 설명이 어렵게 느껴졌을 뿐이죠. 이번 글에서는 클로저(Closure)의 정확한 정의부터 예제 코드를 통한 구체적인 분석까지 하나씩 천천히 풀어서 알려드리겠습니다.",url:"https://yozm.wishket.com/magazine/detail/3072/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/3072/mohammad-rahmani-cY1SvvEfRwk-unsplash.jpg"}),n[20]||(n[20]=s("p",null,"클로저(Closure)는 자바스크립트의 핵심 개념 중 하나이지만, 개발자들이 흔히 어렵게 느끼는 개념이기도 합니다. 공식 문서나 책을 봐도 “클로저는 함수와 렉시컬 환경의 조합입니다”와 같은 문장이 나오는데, 바로 이해가 되지 않아 머리가 아파오기도 하죠. 하지만 사실 클로저는 이해하기 쉬운 개념 중 하나입니다. 단지 설명이 어렵게 느껴졌을 뿐이죠.",-1)),s("p",null,[n[11]||(n[11]=a("이번 글에서는 클로저의 정확한 정의부터 예제 코드를 통한 구체적인 분석까지 하나씩 천천히 풀어서 알려드리겠습니다. 단, 클로저를 이해하려면 실행 컨텍스트와 렉시컬 환경이라는 개념이 중요한데요. 혹시 실행 컨텍스트라는 개념이 낯설다면, 이전 글 ")),t(k,{to:"/yozm.wishket.com/3055.html"},{default:e(()=>n[10]||(n[10]=[s("strong",null,"‘자바스크립트 코드는 어떻게 실행될까?’",-1)])),_:1,__:[10]}),n[12]||(n[12]=a("를 먼저 읽고 오시면 좋습니다."))]),n[21]||(n[21]=g(`<hr><h2 id="클로저란" tabindex="-1"><a class="header-anchor" href="#클로저란"><span>클로저란?</span></a></h2><p>클로저의 정의를 인터넷에 검색해 보면, 다음과 같은 설명이 나옵니다.</p><blockquote><p>“클로저는 주변 상태에 대한 참조와 함께 묶인 함수의 조합입니다. 즉, 클로저는 내부 함수에서 외부 함수의 범위에 대한 접근을 제공합니다.”</p></blockquote><h3 id="_1-클로저의-정의" tabindex="-1"><a class="header-anchor" href="#_1-클로저의-정의"><span>1. 클로저의 정의</span></a></h3><p>사실 이런 설명을 처음 접하면 대부분 혼란스러울 것 같은데요, ‘주변 상태’, ‘참조’, ‘범위에 대한 접근’과 같은 용어들은 마치 수학이나 철학책에서 나오는 어려운 말들처럼 들리기도 합니다. 이렇게 복잡하게 느껴지는 이유는, 클로저를 한 번에 너무 많은 개념을 담아 설명하려고 하기 때문입니다.</p><p>하지만 클로저는 사실 매우 직관적이고 간단한 개념입니다. 내부 함수가 자신이 선언된 환경, 즉 외부 함수의 변수나 상태를 기억하고 있다가, 나중에 그 환경에 계속 접근하고 사용할 수 있다는 것이 핵심 개념인데요. 이 글을 끝까지 읽고 나면, 위의 복잡한 공식 같은 정의가 얼마나 쉽고 간단한 개념을 어렵게 표현한 것인지 깨닫게 될 것입니다.</p><h3 id="_2-예제-코드-분석" tabindex="-1"><a class="header-anchor" href="#_2-예제-코드-분석"><span>2. 예제 코드 분석</span></a></h3><p>그렇다면, 다음 예제 코드를 통해 클로저가 어떻게 작동하는지 하나씩 자세하게 살펴보겠습니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></span>
<span class="line"><span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>코드<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위의 코드에서 무슨 일이 일어나는지 차근차근 분석해 볼게요. 먼저 <code>outer</code>라는 외부 함수가 정의되어 있습니다. 이 함수 안에는 <code>count</code>라는 변수가 존재합니다. <code>outer</code> 함수는 익명 함수를 반환하고, 이 내부 함수에서는 외부에 정의된 변수 <code>count</code>를 사용해 값을 증가시키고, 증가된 값을 출력합니다.</p><p>이제 <code>outer()</code> 함수를 호출하면, 반환된 내부 함수를 <code>counter</code>라는 변수에 저장합니다. 이때 단순하게 생각해 보면, 이미 <code>outer</code> 함수의 실행이 종료되었기 때문에 <code>outer</code> 함수 내부의 <code>count</code> 변수 또한 사라졌다고 생각하게 되는데요. 내부 함수는 ‘클로저’의 특성 덕분에 외부 함수의 환경을 기억하고 있습니다. 즉, 내부 함수가 여전히 <code>count</code> 변수를 참조하고 있는 것입니다.</p><p>따라서 이후에 <code>counter()</code>를 호출할 때마다, 내부 함수는 여전히 살아있는 <code>count</code> 변수를 찾아 값을 증가시키고 출력할 수 있게 됩니다. 이처럼 내부 함수가 외부 함수의 환경을 기억하는 능력이 클로저의 핵심적인 원리입니다. 덕분에 외부 함수가 종료된 이후에도, 그 내부 상태(변수)에 지속적으로 접근하고 관리할 수 있습니다.</p><p>그림으로 이해하면 조금 더 쉽게 이해할 수 있는데요. <code>outer</code> 함수 실행 컨텍스트가 생성되었을 때, 콜스택 내부를 그림으로 나타내 보면 다음과 같습니다.</p><figure><img src="https://wishket.com/media/news/3072/20250317_img1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>outer</code> 함수 실행 컨텍스트 내부에서는 지역 변수인 count가 선언되고 0으로 초기화되며, 함수 내부의 익명 함수가 반환됩니다. 여기서 반환된 익명 함수는 <code>counter</code> 변수에 저장되면서, 외부의 <code>count</code> 변수(외부 렉시컬 환경)를 클로저로 유지하게 됩니다.</p><p>그다음, <code>outer</code> 함수가 종료되어 <code>outer</code> 함수 실행 컨텍스트가 종료된 이후 <code>counter()</code> 코드가 실행되면, <code>counter</code> 변수에는 아까 반환된 익명 함수가 저장되어 있기 때문에 다시 익명 함수가 호출되어, 익명 함수 실행 컨텍스트가 생성됩니다. 그림으로 나타내면 아래와 같습니다.</p><figure><img src="https://wishket.com/media/news/3072/20250317_img2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>counter</code> 함수가 호출되면, 익명 함수 실행 컨텍스트가 만들어지고, 이 함수는 자신의 내부 슬롯에 저장된 외부 렉시컬 환경을 참조합니다. 여기서 외부 렉시컬 환경은 <code>outer</code> 함수의 환경이며, 여기에는 지역 변수인 <code>count</code>가 존재하죠.</p><p>내부 함수는 바로 이 내부 슬롯을 통해, <code>outer</code> 함수의 지역 변수인 <code>count</code>를 기억하고 접근할 수 있는 것입니다. 따라서 이 함수가 실행되면서 외부 함수(<code>outer</code>)의 지역변수인 <code>count</code>를 1 증가시켜 1을 출력하게 됩니다.</p><hr><h2 id="예제-코드를-통한-클로저-학습" tabindex="-1"><a class="header-anchor" href="#예제-코드를-통한-클로저-학습"><span>예제 코드를 통한 클로저 학습</span></a></h2><p>이제 클로저를 더 자세히 알아보기 위해 구체적인 예제 코드를 분석해 보겠습니다. 클로저가 동작하는 원리를 이해하려면, 두 가지 개념을 명확하게 알아야 하는데요. 두 가지 개념이 바로 렉시컬 스코프와 내부 슬롯입니다. 위에서 간단하게 언급했지만, 중요한 개념이기 때문에 한 번 더 다뤄볼게요.</p><h3 id="_1-렉시컬-스코프와-내부-슬롯" tabindex="-1"><a class="header-anchor" href="#_1-렉시컬-스코프와-내부-슬롯"><span>1. 렉시컬 스코프와 내부 슬롯</span></a></h3><p>자바스크립트는 변수를 참조할 때, 변수가 어디에서 선언되었는지를 기준으로 그 변수를 찾는데요, 이것을 바로 렉시컬 스코프라고 부릅니다. 쉽게 말해보자면, 함수가 어디에서 선언되었는지에 따라 접근할 수 있는 변수의 범위가 결정된다는 뜻입니다.</p><p>좀 더 구체적으로 살펴볼까요? 렉시컬 스코프는 변수가 선언된 위치에 따라 스코프 체인(Scope Chain)이 만들어지는 원리입니다. 자바스크립트 엔진은 함수가 선언될 때, 그 함수가 선언된 위치를 기준으로 스코프 체인을 만듭니다. 이후 해당 함수가 실행될 때, 자바스크립트 엔진은 이 스코프 체인을 따라 변수를 찾아갑니다.</p><figure><img src="https://wishket.com/media/news/3072/20250317_img3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>여기서 중요한 역할을 하는 것이 바로 내부 슬롯(<code>[[Environment]]</code>)입니다. 내부 슬롯은 함수가 생성될 때 만들어지는 특별한 저장 공간으로, 함수가 선언된 환경의 정보를 담고 있습니다. 내부 함수는 이 내부 슬롯을 이용해, 외부 함수의 변수와 환경을 기억하고 접근할 수 있게 되는 것입니다.</p><p>다음 예제를 통해 한 번 더 자세히 살펴볼까요?</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">greetUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> greeting <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>greeting<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> greet <span class="token operator">=</span> <span class="token function">greetUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, John</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이 코드에서 내부 함수는 두 가지 변수를 기억하고 있습니다. 첫 번째는 전역 스코프에 존재하는 <code>username</code>입니다. 내부 함수가 선언될 때 이미 이 변수는 전역 환경에 있었고, 내부 함수는 이를 기억하고 접근할 수 있습니다.</p><p>두 번째는 자신을 감싸고 있는 외부함수, <code>greetUser</code> 함수의 지역 변수 <code>greeting</code>입니다. 외부 함수가 종료된 후에도 내부 함수는 이 변수에 접근할 수 있게 됩니다. 내부 함수가 이 두 변수를 계속해서 사용할 수 있는 이유는 바로 내부 슬롯 덕분이며, 이것이 바로 클로저의 핵심적인 작동 원리입니다.</p><h3 id="_2-클로저에-대한-새로운-정의" tabindex="-1"><a class="header-anchor" href="#_2-클로저에-대한-새로운-정의"><span>2. 클로저에 대한 새로운 정의</span></a></h3><p>이제 클로저를 다시 쉽게 정의해 볼게요. 클로저란, “내부 함수가 외부 함수의 변수를 기억해, 외부 함수가 종료된 이후에도 계속 접근할 수 있는 함수”입니다. 내부 함수가 외부 환경의 변수를 유지하고, 관리할 수 있는 특별한 능력을 클로저라고 생각하면 더욱 이해하기 쉽습니다. 그래서 내부 함수가 외부 함수에 선언된 변수를 기억해, 외부 함수가 종료된 이후에도 그 변수에 계속해서 접근할 수 있도록 하는 자바스크립트의 특수한 기능입니다.</p><p>외부 함수가 실행되면서 내부 함수를 반환하면, 외부 함수는 종료되지만, 내부 함수는 외부 함수에서 선언한 변수와 그 변수가 속한 환경을 기억합니다. 이러한 환경 정보가 함수의 내부 슬롯(<code>[[Environment]]</code>)에 저장되고, 이를 통해 내부 함수는 이후 실행될 때도 외부 함수의 변수를 참조할 수 있게 됩니다.</p><p>쉽게 말해, 클로저는 내부 함수가 “자신이 태어난 환경을 절대 잊지 않고 계속 기억하는 능력”이라고 할 수 있습니다. 클로저 덕분에 자바스크립트는 매우 강력한 상태 관리나 캡슐화를 구현할 수 있죠. 이제 클로저가 어떻게 활용되는지, 이어서 살펴볼게요.</p><hr><h2 id="활용-사례" tabindex="-1"><a class="header-anchor" href="#활용-사례"><span>활용 사례</span></a></h2><p>클로저는 자바스크립트에서 굉장히 유용하게 쓰이는데요. 대표적인 활용 사례를 통해 클로저에 대한 개념을 정리해 보겠습니다.</p><h3 id="_1-상태-유지-함수" tabindex="-1"><a class="header-anchor" href="#_1-상태-유지-함수"><span>1. 상태 유지 함수</span></a></h3><p>클로저가 가장 많이 활용되는 예는 바로 상태 유지입니다. 앞서 살펴본 개념을 활용한 대표적인 사례인데요, 상태를 유지하는 간단한 카운터 예제를 살펴봅시다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">clickCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> clicks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    clicks <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">클릭 횟수: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>clicks<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">clickCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 클릭 횟수: 1</span></span>
<span class="line"><span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 클릭 횟수: 2</span></span>
<span class="line"><span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 클릭 횟수: 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위 코드에서 내부 함수는 외부 함수의 <code>clicks</code> 변수를 클로저를 통해 계속 기억하고 유지할 수 있습니다. 내부 함수가 호출될 때마다 값이 증가하며 유지되는 것이 클로저 덕분입니다.</p><h3 id="_2-데이터-은닉과-캡슐화" tabindex="-1"><a class="header-anchor" href="#_2-데이터-은닉과-캡슐화"><span>2. 데이터 은닉과 캡슐화</span></a></h3><p>클로저는 데이터를 외부로부터 보호하고 안전하게 관리하는 데에도 매우 유용하게 쓰입니다. 데이터를 숨기고 접근을 제한하는 방법을 클로저로 구현할 수 있는데요, 다음 예제를 통해 살펴보겠습니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">createAccount</span><span class="token punctuation">(</span><span class="token parameter">initialBalance</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> balance <span class="token operator">=</span> initialBalance<span class="token punctuation">;</span> <span class="token comment">// 외부에서 접근 불가능한 프라이빗 변수</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token parameter">amount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      balance <span class="token operator">+=</span> amount<span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">입금 후 잔액: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>balance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token parameter">amount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>amount <span class="token operator">&gt;</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;잔액이 부족합니다.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">출금 후 잔액: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>balance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> myAccount <span class="token operator">=</span> <span class="token function">createAccount</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">myAccount<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 입금 후 잔액: 1500</span></span>
<span class="line">myAccount<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 출금 후 잔액: 1200</span></span>
<span class="line">myAccount<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">1300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 잔액이 부족합니다.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>여기서 <code>balance</code>라는 변수는 외부에서는 절대로 접근할 수 없고, 오직 반환된 메서드 <code>deposit</code>과 <code>withdraw</code>를 통해서만 수정할 수 있습니다. 이 변수를 보호할 수 있는 이유는, 내부 함수가 <code>balance</code> 변수를 클로저로 유지하고 있기 때문입니다. 이러한 방식을 통해 안전하게 데이터를 관리할 수 있게 됩니다.</p>`,47)),s("figure",null,[n[18]||(n[18]=s("img",{src:"https://wishket.com/media/news/3072/mohammad-rahmani-cY1SvvEfRwk-unsplash.jpg",alt:'<출처: <VPIcon icon="fas fa-globe"/>Unsplash - <VPIcon icon="fas fa-globe"/>Mohammad Rahmani>',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[15]||(n[15]=a("<출처: ")),s("a",B,[t(l,{icon:"fas fa-globe"}),n[13]||(n[13]=a("Unsplash"))]),n[16]||(n[16]=a(" - ")),s("a",_,[t(l,{icon:"fas fa-globe"}),n[14]||(n[14]=a("Mohammad Rahmani"))]),n[17]||(n[17]=a(">"))])]),n[22]||(n[22]=s("hr",null,null,-1)),n[23]||(n[23]=s("h2",{id:"마치며",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#마치며"},[s("span",null,"마치며")])],-1)),n[24]||(n[24]=s("p",null,"지금까지 클로저(Closure)의 개념을 정의하고, 대표적인 활용 예제까지 함께 살펴보았습니다. 이 글을 통해 클로저가 더 이상 어렵고 낯선 개념이 아니라, 여러분의 프로그래밍 작업을 든든히 도와주는 믿음직한 무기가 될 수 있길 바랍니다.",-1)),h(" TODO: add ARTICLE CARD "),t(c,i(u({title:"10분 만에 이해하는 자바스크립트 ‘클로저(Closure)’",desc:"클로저(Closure)는 자바스크립트의 핵심 개념 중 하나이지만, 개발자들이 흔히 어렵게 느끼는 개념이기도 합니다. 공식 문서나 책을 봐도 “클로저는 함수와 렉시컬 환경의 조합입니다”와 같은 문장이 나오는데, 바로 이해가 되지 않아 머리가 아파오기도 하죠. 하지만 사실 클로저는 이해하기 쉬운 개념 중 하나입니다. 단지 설명이 어렵게 느껴졌을 뿐이죠. 이번 글에서는 클로저(Closure)의 정확한 정의부터 예제 코드를 통한 구체적인 분석까지 하나씩 천천히 풀어서 알려드리겠습니다.",link:"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3072.html",logo:"https://yozm.wishket.com/favicon.ico",background:"rgba(84,7,224,0.2)"})),null,16)])}const x=m(w,[["render",A]]),D=JSON.parse('{"path":"/yozm.wishket.com/3072.html","title":"10분 만에 이해하는 자바스크립트 ‘클로저(Closure)’","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"10분 만에 이해하는 자바스크립트 ‘클로저(Closure)’","description":"Article(s) > 10분 만에 이해하는 자바스크립트 ‘클로저(Closure)’","icon":"fa-brands fa-js","category":["JavaScript","Article(s)"],"tag":["blog","yozm.wishket.com","js","javascript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"10분 만에 이해하는 자바스크립트 ‘클로저(Closure)’\\",\\"image\\":[\\"https://wishket.com/media/news/3072/20250317_img1.png\\",\\"https://wishket.com/media/news/3072/20250317_img2.png\\",\\"https://wishket.com/media/news/3072/20250317_img3.png\\",\\"https://unsplash.com/ko/%EC%82%AC%EC%A7%84/%EA%B2%80%EC%9D%80%EC%83%89-%EB%85%B8%ED%8A%B8%EB%B6%81-%EC%BB%B4%ED%93%A8%ED%84%B0%EA%B0%80-%EC%BC%9C%EC%A0%B8-%ED%8C%8C%EB%9E%80%EC%83%89-%ED%99%94%EB%A9%B4%EC%9D%B4-%ED%91%9C%EC%8B%9C%EB%90%A8-cY1SvvEfRwk\\"],\\"datePublished\\":\\"2025-04-17T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"효빈\\",\\"url\\":\\"https://yozm.wishket.com/magazine/@hbin12212/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3072.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"10분 만에 이해하는 자바스크립트 ‘클로저(Closure)’"}],["meta",{"property":"og:description","content":"Article(s) > 10분 만에 이해하는 자바스크립트 ‘클로저(Closure)’"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/3072/mohammad-rahmani-cY1SvvEfRwk-unsplash.jpg"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/3072/mohammad-rahmani-cY1SvvEfRwk-unsplash.jpg"}],["meta",{"name":"twitter:image:alt","content":"10분 만에 이해하는 자바스크립트 ‘클로저(Closure)’"}],["meta",{"property":"article:author","content":"효빈"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-04-17T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 10분 만에 이해하는 자바스크립트 ‘클로저(Closure)’"},{"property":"og:description","content":"10분 만에 이해하는 자바스크립트 ‘클로저(Closure)’"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3072.html"}]],"prev":"/programming/js/articles/README.md","date":"2025-04-17T00:00:00.000Z","isOriginal":false,"author":[{"name":"효빈","url":"https://yozm.wishket.com/magazine/@hbin12212/"}],"cover":"https://yozm.wishket.com/media/news/3072/mohammad-rahmani-cY1SvvEfRwk-unsplash.jpg"},"git":{},"readingTime":{"minutes":1.6,"words":480},"filePathRelative":"yozm.wishket.com/3072.md","copyright":{"author":"효빈"}}');export{x as comp,D as data};
