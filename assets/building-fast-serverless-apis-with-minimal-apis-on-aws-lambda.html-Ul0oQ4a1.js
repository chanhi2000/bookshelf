import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as e,b as r,a as b,t as k,n as c,g as u,w as o,e as a,r as l,o as f}from"./app-BVguHYKu.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},A={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},P={href:"https://nuget.org/packages/Amazon.Lambda.AspNetCoreServer.Hosting",target:"_blank",rel:"noopener noreferrer"},I={href:"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis",target:"_blank",rel:"noopener noreferrer"},L={href:"https://aws.amazon.com/lambda/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/aws/aws-extensions-for-dotnet-cli",target:"_blank",rel:"noopener noreferrer"},x={href:"https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html",target:"_blank",rel:"noopener noreferrer"};function T(d,n){const p=l("VPCard"),i=l("router-link"),m=l("SiteInfo"),t=l("VPIcon"),g=l("RouteLink");return f(),v("div",null,[s("h1",w,[s("a",A,[s("span",null,k(d.$frontmatter.title)+" 관련",1)])]),e(p,c(u({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[e(i,{to:"#getting-your-minimal-apis-lambda-ready"},{default:o(()=>n[0]||(n[0]=[a("Getting Your Minimal APIs Lambda-Ready")])),_:1,__:[0]})]),s("li",null,[e(i,{to:"#ship-it-to-aws"},{default:o(()=>n[1]||(n[1]=[a("Ship It to AWS")])),_:1,__:[1]})]),s("li",null,[e(i,{to:"#measuring-cold-starts"},{default:o(()=>n[2]||(n[2]=[a("Measuring Cold Starts")])),_:1,__:[2]})]),s("li",null,[e(i,{to:"#crud-operations-benchmark"},{default:o(()=>n[3]||(n[3]=[a("CRUD Operations Benchmark")])),_:1,__:[3]})]),s("li",null,[e(i,{to:"#summary"},{default:o(()=>n[4]||(n[4]=[a("Summary")])),_:1,__:[4]})])])]),n[35]||(n[35]=s("hr",null,null,-1)),e(m,{name:"Building Fast Serverless APIs With Minimal APIs on AWS Lambda",desc:"Learn how to deploy ASP.NET Core Minimal APIs to AWS Lambda with just one library and a single line of code. We'll explore the setup process, measure real-world performance including cold start times, and discuss when serverless makes sense for your APIs.",url:"https://milanjovanovic.tech/blog/building-fast-serverless-apis-with-minimal-apis-on-aws-lambda",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_163.png"}),n[36]||(n[36]=s("p",null,"Have you ever wondered if you could host a tiny .NET API without running servers 24/7? You can!",-1)),s("p",null,[n[8]||(n[8]=a("AWS Lambda lets you run code on-demand, and with the ")),s("a",P,[e(t,{icon:"fas fa-globe"}),n[5]||(n[5]=a("Amazon.Lambda.AspNetCoreServer.Hosting"))]),n[9]||(n[9]=a(" library, you can plug an ASP.NET Core ")),s("a",I,[e(t,{icon:"fa-brands fa-microsoft"}),n[6]||(n[6]=a("Minimal APIs"))]),n[10]||(n[10]=a(" straight into ")),s("a",L,[e(t,{icon:"fa-brands fa-aws"}),n[7]||(n[7]=a("AWS Lambda"))]),n[11]||(n[11]=a("."))]),n[37]||(n[37]=r(`<p>In this article we&#39;ll set up a minimal API, deploy it, and discuss how it performs.</p><p>Don&#39;t worry if you&#39;re new to serverless, I&#39;ll keep everything simple enough to follow along.</p><hr><h2 id="getting-your-minimal-apis-lambda-ready" tabindex="-1"><a class="header-anchor" href="#getting-your-minimal-apis-lambda-ready"><span>Getting Your Minimal APIs Lambda-Ready</span></a></h2><p>Let&#39;s start with the basics. You need just three things to turn your Minimal API into a Lambda function.</p><p>First, create your API:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">dotnet new webapi <span class="token parameter variable">-n</span> MyLambdaApi</span>
<span class="line"><span class="token builtin class-name">cd</span> MyLambdaApi</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Second, add Amazon&#39;s hosting package:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> Amazon<span class="token punctuation">.</span>Lambda<span class="token punctuation">.</span>AspNetCoreServer<span class="token punctuation">.</span>Hosting</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,9)),s("p",null,[n[12]||(n[12]=a("Third, add one line to your ")),e(t,{icon:"iconfont icon-csharp"}),n[13]||(n[13]=s("code",null,"Program.cs",-1)),n[14]||(n[14]=a(":"))]),n[38]||(n[38]=r(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// This line does all the Lambda magic</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddAWSLambdaHosting</span><span class="token punctuation">(</span>LambdaEventSource<span class="token punctuation">.</span>HttpApi<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Hello from Lambda!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[16]||(n[16]=a("That's it. Your API now runs both locally (for testing) and in Lambda (for production). When you run locally, it uses ")),s("a",q,[e(t,{icon:"fa-brands fa-microsoft"}),n[15]||(n[15]=a("Kestrel"))]),n[17]||(n[17]=a(" like normal. When you deploy the app to AWS, Lambda takes over."))]),n[39]||(n[39]=s("hr",null,null,-1)),n[40]||(n[40]=s("h2",{id:"ship-it-to-aws",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#ship-it-to-aws"},[s("span",null,"Ship It to AWS")])],-1)),s("p",null,[n[21]||(n[21]=a("You'll need the ")),s("a",W,[n[18]||(n[18]=a("Lambda tools (")),e(t,{icon:"iconfont icon-github"}),n[19]||(n[19]=s("code",null,"aws/aws-extensions-for-dotnet-cli",-1)),n[20]||(n[20]=a(")"))]),n[22]||(n[22]=a(" installed:"))]),n[41]||(n[41]=r(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">dotnet tool <span class="token function">install</span> <span class="token parameter variable">-g</span> Amazon.Lambda.Tools</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then deploy with one command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">dotnet lambda deploy-function</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The tool asks you a few questions (like the function name, which IAM role to use). Pick the defaults if you&#39;re just testing. In a minute or two, your API is live with a URL like: <code>https://[abc123xyz].lambda-url.[region-name].on.aws/</code>.</p><p>From the AWS Management Console, you can find your function with its URL and all the other details.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_163/aws_console_lambda_function.png?imwidth=3840" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="measuring-cold-starts" tabindex="-1"><a class="header-anchor" href="#measuring-cold-starts"><span>Measuring Cold Starts</span></a></h2><p>Here&#39;s where things become interesting (and problematic). Lambda functions &quot;go to sleep&quot; when nobody uses them. Waking them up takes time, this is the famous <strong>&quot;cold start&quot; problem</strong>.</p><p>I ran some simple tests with a basic Minimal API:</p><ul><li>First request (cold): 2,153 ms</li><li>Second request (warm): 154 ms</li><li>Third request (warm): 143 ms</li><li>After 10 minutes idle (cold again): 2,074 ms</li></ul>`,11)),s("p",null,[n[24]||(n[24]=a("As you can see, the first request is slow due to the cold start. Subsequent requests are much faster, around 150 ms. After 10 minutes of inactivity, the function goes cold again, and the next request takes over 2 seconds. There's an optimization feature called ")),s("a",x,[e(t,{icon:"fa-brands fa-aws"}),n[23]||(n[23]=a("SnapStart"))]),n[25]||(n[25]=a(" that can help reduce cold start times, but it has its own tradeoffs and isn't always suitable for every application."))]),n[42]||(n[42]=r(`<p>Another thing to note is that I&#39;m in Europe, and my Lambda function is in the US East (N. Virginia) region. This adds network latency, so your results may vary based on your location and the region you choose.</p><p>Even when warm, the latency is higher than a typical server-hosted API. This may be acceptable for low-traffic or non-critical endpoints, but it&#39;s something to consider.</p><p>Let&#39;s move beyond a &quot;Hello World&quot; example to something more realistic.</p><hr><h2 id="crud-operations-benchmark" tabindex="-1"><a class="header-anchor" href="#crud-operations-benchmark"><span>CRUD Operations Benchmark</span></a></h2><p>To see how a simple API performs in the real world, I built a tiny CRUD app that creates a record, fetches it, updates it and then deletes it. First I ran each operation once to see the raw latency. Then I used a load-testing tool with 100 virtual users (VUs) to measure average latency under a bit more stress.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// POST /products - Create new product</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapPost</span><span class="token punctuation">(</span><span class="token string">&quot;/products&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token class-name">CreateProductRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">NpgsqlDataSource</span> dataSource<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> sql <span class="token operator">=</span></span>
<span class="line">        <span class="token string">&quot;&quot;</span>&quot;</span>
<span class="line">        INSERT <span class="token return-type class-name">INTO</span> Products <span class="token return-type class-name"><span class="token punctuation">(</span>Name<span class="token punctuation">,</span> Description<span class="token punctuation">,</span> Price<span class="token punctuation">,</span> CreatedAt<span class="token punctuation">)</span></span></span>
<span class="line">        VALUES <span class="token punctuation">(</span>@Name<span class="token punctuation">,</span> @Description<span class="token punctuation">,</span> @Price<span class="token punctuation">,</span> @CreatedAt<span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">RETURNING</span> Id<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Description<span class="token punctuation">,</span> Price<span class="token punctuation">,</span> CreatedAt</span>
<span class="line">        <span class="token string">&quot;&quot;</span>&quot;<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">await</span> dataSource<span class="token punctuation">.</span><span class="token function">OpenConnectionAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> product <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">QueryFirstAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Product<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        request<span class="token punctuation">.</span>Name<span class="token punctuation">,</span></span>
<span class="line">        request<span class="token punctuation">.</span>Description<span class="token punctuation">,</span></span>
<span class="line">        request<span class="token punctuation">.</span>Price<span class="token punctuation">,</span></span>
<span class="line">        CreatedAt <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Created</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token interpolation-string"><span class="token string">$&quot;/products/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">product<span class="token punctuation">.</span>Id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProductResponse</span><span class="token punctuation">(</span></span>
<span class="line">            product<span class="token punctuation">.</span>Id<span class="token punctuation">,</span></span>
<span class="line">            product<span class="token punctuation">.</span>Name<span class="token punctuation">,</span></span>
<span class="line">            product<span class="token punctuation">.</span>Description<span class="token punctuation">,</span></span>
<span class="line">            product<span class="token punctuation">.</span>Price<span class="token punctuation">,</span></span>
<span class="line">            product<span class="token punctuation">.</span>CreatedAt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Other endpoints omitted for brevity:</span></span>
<span class="line"><span class="token comment">// - GET /products/{id} - Get product by ID</span></span>
<span class="line"><span class="token comment">// - PUT /products/{id} - Update product</span></span>
<span class="line"><span class="token comment">// - DELETE /products/{id} - Delete product</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The application uses .NET 8, <a href="https://npgsql.org/" target="_blank" rel="noopener noreferrer">Npgsql</a> and <a href="https://learndapper.com/" target="_blank" rel="noopener noreferrer">Dapper</a> to interact with a PostgreSQL database running on <a href="https://aws.amazon.com/rds/" target="_blank" rel="noopener noreferrer">Amazon RDS</a>. You can find the source code for this example (and the previous one) in <a href="https://github.com/m-jovanovic/minimal-apis-on-lambda" target="_blank" rel="noopener noreferrer">this repository</a>.</p><p>Here are the results:</p><p><strong>Single-call latency</strong></p><table><thead><tr><th style="text-align:left;">Operation</th><th style="text-align:center;">Latency (ms)</th><th style="text-align:left;">Notes</th></tr></thead><tbody><tr><td style="text-align:left;">Create</td><td style="text-align:center;">537</td><td style="text-align:left;">Cold start plus object creation</td></tr><tr><td style="text-align:left;">Read</td><td style="text-align:center;">134</td><td style="text-align:left;">Simple GET of the new record</td></tr><tr><td style="text-align:left;">Update</td><td style="text-align:center;">140</td><td style="text-align:left;">Changing one property</td></tr><tr><td style="text-align:left;">Delete</td><td style="text-align:center;">167</td><td style="text-align:left;">Removing the record</td></tr></tbody></table><p>The create call took half a second because it included a cold start and initialization overhead. Once the function was warmed up, the other operations completed in under two hundred milliseconds.</p><p><strong>Load test with 100 virtual users</strong></p><p>During the load test, I simulated 100 clients hitting the API at once. AWS automatically scaled the Lambda function to handle the traffic, and average latencies dropped because the functions were already warm. Here are the averages:</p><ul><li><strong>CREATE avg</strong>: 129 ms</li><li><strong>READ avg</strong>: 132 ms</li><li><strong>UPDATE avg</strong>: 152 ms</li><li><strong>DELETE avg</strong>: 144 ms</li></ul><p>These numbers show that once your function is up and running, Lambda can respond quite quickly even when many users are making requests. Of course, actual times will vary depending on what your API does and how it stores data.</p><p>Remember that each of these operations involves network calls to the database, which adds latency. Overall, I don&#39;t find these numbers bad for a serverless setup.</p><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Hosting minimal APIs in AWS Lambda is <strong>surprisingly straightforward</strong>. With one library and a single method call, your ASP.NET Core code can run &quot;without servers&quot;. You pay only for the compute you use. Also, the AWS Lambda free tier includes one million free requests per month, which is great for testing and light usage.</p><p>However, there are tradeoffs. Because of cold starts and the overhead of starting the .NET runtime, latency isn&#39;t as low as hosting on a dedicated server. If your API is mission-critical or requires sub-100 ms responses at all times, you may need to look at provisioned concurrency, containers, or a traditional host.</p>`,21)),s("p",null,[n[27]||(n[27]=a("Lambda shines for small, ")),e(g,{to:"/milanjovanovic.tech/event-driven-architecture-in-dotnet-with-rabbitmq.html"},{default:o(()=>n[26]||(n[26]=[s("strong",null,"event-driven",-1)])),_:1,__:[26]}),n[28]||(n[28]=a(" or intermittent workloads that don't justify a full-time server. But it's less suitable for latency-sensitive or heavy, long-running applications. For occasional or low-traffic API endpoints, though, ")),n[29]||(n[29]=s("strong",null,"Lambda",-1)),n[30]||(n[30]=a(" offers a ")),n[31]||(n[31]=s("strong",null,"cost-effective",-1)),n[32]||(n[32]=a(" and ")),n[33]||(n[33]=s("strong",null,"simple",-1)),n[34]||(n[34]=a(" option."))]),n[43]||(n[43]=s("p",null,"That's all for today.",-1)),n[44]||(n[44]=s("p",null,"See you next week.",-1)),n[45]||(n[45]=s("hr",null,null,-1)),b(" TODO: add ARTICLE CARD "),e(p,c(u({title:"Building Fast Serverless APIs With Minimal APIs on AWS Lambda",desc:"Learn how to deploy ASP.NET Core Minimal APIs to AWS Lambda with just one library and a single line of code. We'll explore the setup process, measure real-world performance including cold start times, and discuss when serverless makes sense for your APIs.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/building-fast-serverless-apis-with-minimal-apis-on-aws-lambda.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const E=h(y,[["render",T]]),j=JSON.parse('{"path":"/milanjovanovic.tech/building-fast-serverless-apis-with-minimal-apis-on-aws-lambda.html","title":"Building Fast Serverless APIs With Minimal APIs on AWS Lambda","lang":"en-US","frontmatter":{"lang":"en-US","title":"Building Fast Serverless APIs With Minimal APIs on AWS Lambda","description":"Article(s) > Building Fast Serverless APIs With Minimal APIs on AWS Lambda","icon":"fa-brands fa-aws","category":["C#","DotNet","DevOps","Amazon","AWS","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet","devops","amazon","aws","amazon-web-services"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Building Fast Serverless APIs With Minimal APIs on AWS Lambda\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_163/aws_console_lambda_function.png?imwidth=3840\\"],\\"datePublished\\":\\"2025-10-11T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/building-fast-serverless-apis-with-minimal-apis-on-aws-lambda.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Building Fast Serverless APIs With Minimal APIs on AWS Lambda"}],["meta",{"property":"og:description","content":"Article(s) > Building Fast Serverless APIs With Minimal APIs on AWS Lambda"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_163.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_163.png"}],["meta",{"name":"twitter:image:alt","content":"Building Fast Serverless APIs With Minimal APIs on AWS Lambda"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"amazon-web-services"}],["meta",{"property":"article:tag","content":"aws"}],["meta",{"property":"article:tag","content":"amazon"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-10-11T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Building Fast Serverless APIs With Minimal APIs on AWS Lambda"},{"property":"og:description","content":"Building Fast Serverless APIs With Minimal APIs on AWS Lambda"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/building-fast-serverless-apis-with-minimal-apis-on-aws-lambda.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-10-11T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_163.png"},"git":{},"readingTime":{"minutes":4.83,"words":1449},"filePathRelative":"milanjovanovic.tech/building-fast-serverless-apis-with-minimal-apis-on-aws-lambda.md","copyright":{"author":"Milan Jovanović"}}');export{E as comp,j as data};
