import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as e,b as v,a as h,t as g,n as r,g as d,w as i,e as a,r as p,o as f}from"./app-BVguHYKu.js";const b={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},T={class:"hint-container info"},C={href:"mailto:dobri.kostadinov@gmail.com",target:"_blank",rel:"noopener noreferrer"},E={href:"https://linkedin.com/in/dobrikostadinov/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://medium.com/@dobri.kostadinov",target:"_blank",rel:"noopener noreferrer"},V={class:"hint-container info"},I={href:"https://proandroiddev.com/top-5-extension-functions-every-jetpack-compose-developer-should-have-cbf2c50d557c",target:"_blank",rel:"noopener noreferrer"};function S(u,n){const l=p("VPCard"),t=p("router-link"),c=p("SiteInfo"),o=p("VPIcon");return f(),m("div",null,[s("h1",y,[s("a",w,[s("span",null,g(u.$frontmatter.title)+" 관련",1)])]),e(l,r(d({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[e(t,{to:"#introduction"},{default:i(()=>n[0]||(n[0]=[a("Introduction")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#top-5-extension-functions-for-jetpack-compose"},{default:i(()=>n[1]||(n[1]=[a("Top 5 Extension Functions for Jetpack Compose")])),_:1,__:[1]}),s("ul",null,[s("li",null,[e(t,{to:"#_1-modifier-clickablewithripple"},{default:i(()=>n[2]||(n[2]=[a("1. Modifier.clickableWithRipple")])),_:1,__:[2]})]),s("li",null,[e(t,{to:"#_2-lazycolumn-scrolltotop"},{default:i(()=>n[3]||(n[3]=[a("2. LazyColumn.scrollToTop")])),_:1,__:[3]})]),s("li",null,[e(t,{to:"#_3-modifier-roundedbackgroundwithpadding"},{default:i(()=>n[4]||(n[4]=[a("3. Modifier.roundedBackgroundWithPadding")])),_:1,__:[4]})]),s("li",null,[e(t,{to:"#_4-modifier-showif"},{default:i(()=>n[5]||(n[5]=[a("4. Modifier.showIf")])),_:1,__:[5]})])])]),s("li",null,[e(t,{to:"#_5-modifier-animatevisibility"},{default:i(()=>n[6]||(n[6]=[a("5. Modifier.animateVisibility")])),_:1,__:[6]})]),s("li",null,[e(t,{to:"#bonus-5-essential-extension-functions-for-the-view-system"},{default:i(()=>n[7]||(n[7]=[a("Bonus: 5 Essential Extension Functions for the View System")])),_:1,__:[7]}),s("ul",null,[s("li",null,[e(t,{to:"#_1-view-visible-view-gone"},{default:i(()=>n[8]||(n[8]=[a("1. View.visible() / View.gone()")])),_:1,__:[8]})]),s("li",null,[e(t,{to:"#_2-view-showif-condition-boolean"},{default:i(()=>n[9]||(n[9]=[a("2. View.showIf(condition: Boolean)")])),_:1,__:[9]})]),s("li",null,[e(t,{to:"#_3-textview-settextcolorres-resid-int"},{default:i(()=>n[10]||(n[10]=[a("3. TextView.setTextColorRes(resId: Int)")])),_:1,__:[10]})]),s("li",null,[e(t,{to:"#_4-edittext-cleartext"},{default:i(()=>n[11]||(n[11]=[a("4. EditText.clearText()")])),_:1,__:[11]})]),s("li",null,[e(t,{to:"#_5-imageview-loadimage-url-string"},{default:i(()=>n[12]||(n[12]=[a("5. ImageView.loadImage(url: String)")])),_:1,__:[12]})])])]),s("li",null,[e(t,{to:"#conclusion"},{default:i(()=>n[13]||(n[13]=[a("Conclusion")])),_:1,__:[13]})])])]),n[30]||(n[30]=s("hr",null,null,-1)),e(c,{name:"Top 5 Extension Functions Every Jetpack Compose Developer Should Have",desc:"Writing clean, efficient code is key to being a successful Android developer, and extension functions help us achieve this by extending the capabilities of existing classes without modifying them. Jetpack Compose developers can especially benefit from extension functions to make their UIs more responsive and efficient. For those moments when you’re still working with the view system, we’ll also look at a few must-have extensions to simplify your code there too.",url:"https://droidcon.com/top-5-extension-functions-every-jetpack-compose-developer-should-have",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",preview:"https://droidcon.com/wp-content/uploads/2024/11/1_lsi-SHMe9F42JG6xkMDUCA.webp"}),n[31]||(n[31]=v(`<hr><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>Writing clean, efficient code is key to being a successful Android developer, and extension functions help us achieve this by extending the capabilities of existing classes without modifying them. Jetpack Compose developers can especially benefit from extension functions to make their UIs more responsive and efficient. For those moments when you’re still working with the view system, we’ll also look at a few must-have extensions to simplify your code there too.</p><p>In this article, we’ll explore the top five extension functions that every Jetpack Compose developer should have in their toolkit, plus a bonus five extension functions for working with the view system.</p><h2 id="top-5-extension-functions-for-jetpack-compose" tabindex="-1"><a class="header-anchor" href="#top-5-extension-functions-for-jetpack-compose"><span>Top 5 Extension Functions for Jetpack Compose</span></a></h2><h3 id="_1-modifier-clickablewithripple" tabindex="-1"><a class="header-anchor" href="#_1-modifier-clickablewithripple"><span>1. <code>Modifier.clickableWithRipple</code></span></a></h3><p>The ripple effect is a key aspect of Material Design, signaling to users that an item is clickable. While Jetpack Compose’s <code>Modifier.clickable</code> offers a basic clickable effect, adding a ripple effect can improve UI feedback. This extension function simplifies adding a ripple effect to any clickable component.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> Modifier<span class="token punctuation">.</span><span class="token function">clickableWithRipple</span><span class="token punctuation">(</span>onClick<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span><span class="token operator">:</span> Modifier <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clickable</span><span class="token punctuation">(</span></span>
<span class="line">        indication <span class="token operator">=</span> <span class="token function">rememberRipple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// Ripple indication</span></span>
<span class="line">        interactionSource <span class="token operator">=</span> remember <span class="token punctuation">{</span> <span class="token function">MutableInteractionSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// Handles multiple interactions</span></span>
<span class="line">        onClick <span class="token operator">=</span> onClick</span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Usage Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token function">Text</span><span class="token punctuation">(</span></span>
<span class="line">    text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Click Me&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">clickableWithRipple</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Text clicked!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_2-lazycolumn-scrolltotop" tabindex="-1"><a class="header-anchor" href="#_2-lazycolumn-scrolltotop"><span>2. <code>LazyColumn.scrollToTop</code></span></a></h3><p>In Jetpack Compose, the <code>LazyColumn</code> is commonly used for displaying lists. However, scrolling back to the top of a list isn’t straightforward. This extension function allows you to call <code>scrollToTop()</code> directly on a <code>LazyListState</code>.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">suspend</span> <span class="token keyword">fun</span> LazyListState<span class="token punctuation">.</span><span class="token function">scrollToTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">animateScrollToItem</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Usage Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> listState <span class="token operator">=</span> <span class="token function">rememberLazyListState</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token function">LazyColumn</span><span class="token punctuation">(</span>state <span class="token operator">=</span> listState<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">items</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> index <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Item #</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">index</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Trigger the scroll to top</span></span>
<span class="line"><span class="token function">LaunchedEffect</span><span class="token punctuation">(</span>Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    listState<span class="token punctuation">.</span><span class="token function">scrollToTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_3-modifier-roundedbackgroundwithpadding" tabindex="-1"><a class="header-anchor" href="#_3-modifier-roundedbackgroundwithpadding"><span>3. Modifier.roundedBackgroundWithPadding</span></a></h3><p>Add rounded corners and padding to any composable in a single line, simplifying repetitive code.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> Modifier<span class="token punctuation">.</span><span class="token function">roundedBackgroundWithPadding</span><span class="token punctuation">(</span></span>
<span class="line">    backgroundColor<span class="token operator">:</span> Color<span class="token punctuation">,</span></span>
<span class="line">    cornerRadius<span class="token operator">:</span> Dp<span class="token punctuation">,</span></span>
<span class="line">    padding<span class="token operator">:</span> Dp</span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> Modifier <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">,</span> shape <span class="token operator">=</span> <span class="token function">RoundedCornerShape</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Usage Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token function">Text</span><span class="token punctuation">(</span></span>
<span class="line">    text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Rounded Background with Padding&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">roundedBackgroundWithPadding</span><span class="token punctuation">(</span></span>
<span class="line">        backgroundColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>LightGray<span class="token punctuation">,</span></span>
<span class="line">        cornerRadius <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">.</span>dp<span class="token punctuation">,</span></span>
<span class="line">        padding <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">.</span>dp</span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_4-modifier-showif" tabindex="-1"><a class="header-anchor" href="#_4-modifier-showif"><span>4. Modifier.showIf</span></a></h3><p>Toggle visibility using a Boolean condition with <code>showIf</code>. This extension keeps the modifier chain clean and avoids using <code>if</code> conditions directly within the composable.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> Modifier<span class="token punctuation">.</span><span class="token function">showIf</span><span class="token punctuation">(</span>condition<span class="token operator">:</span> Boolean<span class="token punctuation">)</span><span class="token operator">:</span> Modifier <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token keyword">this</span> <span class="token keyword">else</span> Modifier<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Usage Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token function">Text</span><span class="token punctuation">(</span></span>
<span class="line">    text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Conditionally Visible&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">showIf</span><span class="token punctuation">(</span>isVisible<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>If <code>isVisible</code> is false, the <code>Text</code> composable effectively becomes hidden.</p><hr><h2 id="_5-modifier-animatevisibility" tabindex="-1"><a class="header-anchor" href="#_5-modifier-animatevisibility"><span>5. Modifier.animateVisibility</span></a></h2><p>To achieve a fade-in and fade-out effect based on a visibility condition, use this <code>animateVisibility</code> extension. It uses <code>alpha</code> to gradually display or hide the component.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> Modifier<span class="token punctuation">.</span><span class="token function">animateVisibility</span><span class="token punctuation">(</span>isVisible<span class="token operator">:</span> Boolean<span class="token punctuation">)</span><span class="token operator">:</span> Modifier <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isVisible<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">alpha</span><span class="token punctuation">(</span><span class="token number">1f</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">alpha</span><span class="token punctuation">(</span><span class="token number">0f</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Usage Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token function">Text</span><span class="token punctuation">(</span></span>
<span class="line">    text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Animated Visibility&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">animateVisibility</span><span class="token punctuation">(</span>isVisible<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="bonus-5-essential-extension-functions-for-the-view-system" tabindex="-1"><a class="header-anchor" href="#bonus-5-essential-extension-functions-for-the-view-system"><span>Bonus: 5 Essential Extension Functions for the View System</span></a></h2><h3 id="_1-view-visible-view-gone" tabindex="-1"><a class="header-anchor" href="#_1-view-visible-view-gone"><span>1. <code>View.visible()</code> / <code>View.gone()</code></span></a></h3><p>Switching between <code>VISIBLE</code> and <code>GONE</code> is a common task. These extension functions make it easier to handle visibility changes directly on a <code>View</code>.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> View<span class="token punctuation">.</span><span class="token function">visible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fun</span> View<span class="token punctuation">.</span><span class="token function">gone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Usage Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">myView<span class="token punctuation">.</span><span class="token function">visible</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// Make the view visible</span></span>
<span class="line">myView<span class="token punctuation">.</span><span class="token function">gone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// Hide the view by setting it to GONE</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_2-view-showif-condition-boolean" tabindex="-1"><a class="header-anchor" href="#_2-view-showif-condition-boolean"><span>2. <code>View.showIf(condition: Boolean)</code></span></a></h3><p>Similar to the <code>showIf</code> modifier in Jetpack Compose, this extension toggles the visibility of a <code>View</code> based on a Boolean condition.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> View<span class="token punctuation">.</span><span class="token function">showIf</span><span class="token punctuation">(</span>condition<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> View<span class="token punctuation">.</span>VISIBLE <span class="token keyword">else</span> View<span class="token punctuation">.</span>GONE</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Usage Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">myView<span class="token punctuation">.</span><span class="token function">showIf</span><span class="token punctuation">(</span>isDataAvailable<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><h3 id="_3-textview-settextcolorres-resid-int" tabindex="-1"><a class="header-anchor" href="#_3-textview-settextcolorres-resid-int"><span>3. <code>TextView.setTextColorRes(resId: Int)</code></span></a></h3><p>Setting colors using resource IDs helps maintain consistency. This function allows setting a color resource directly on a <code>TextView</code>, improving readability.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> TextView<span class="token punctuation">.</span><span class="token function">setTextColorRes</span><span class="token punctuation">(</span><span class="token annotation builtin">@ColorRes</span> resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span>ContextCompat<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resId<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Usage Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">myTextView<span class="token punctuation">.</span><span class="token function">setTextColorRes</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>primaryColor<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><h3 id="_4-edittext-cleartext" tabindex="-1"><a class="header-anchor" href="#_4-edittext-cleartext"><span>4. <code>EditText.clearText()</code></span></a></h3><p>Clearing an <code>EditText</code> is a frequent task, often done by setting an empty string. This <code>clearText</code> extension keeps code clean and expressive.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> EditText<span class="token punctuation">.</span><span class="token function">clearText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Usage Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">myEditText<span class="token punctuation">.</span><span class="token function">clearText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Clears the text in the EditText</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><h3 id="_5-imageview-loadimage-url-string" tabindex="-1"><a class="header-anchor" href="#_5-imageview-loadimage-url-string"><span>5. <code>ImageView.loadImage(url: String)</code></span></a></h3><p>Loading images is streamlined with libraries like Glide or Coil. This extension function integrates Glide, allowing you to load images directly with a URL.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> ImageView<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span>url<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Usage Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">myImageView<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;https://example.com/image.jpg&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Extension functions are a powerful tool in Android development, enabling you to write cleaner, more expressive code. By incorporating these functions, you can simplify your development process, making it easier to work with Jetpack Compose as well as the traditional view system.</p>`,52)),s("div",T,[n[25]||(n[25]=s("p",{class:"hint-container-title"},"Dobri Kostadinov",-1)),n[26]||(n[26]=s("p",null,"Android Consultant | Trainer",-1)),s("p",null,[s("a",C,[e(o,{icon:"fas fa-envelope"}),n[14]||(n[14]=a("Email me"))]),n[21]||(n[21]=a("|")),s("a",E,[n[15]||(n[15]=a("Follow me on LinkedIn (")),e(o,{icon:"fa-brands fa-linkedin"}),n[16]||(n[16]=s("code",null,"dobrikostadinov",-1)),n[17]||(n[17]=a(")"))]),n[22]||(n[22]=a("|")),s("a",_,[n[18]||(n[18]=a("Follow me on Medium (")),e(o,{icon:"fa-brands fa-medium"}),n[19]||(n[19]=s("code",null,"dobri.kostadinov",-1)),n[20]||(n[20]=a(")"))]),n[23]||(n[23]=a("|")),n[24]||(n[24]=s("a",{href:"https://buymeacoffee.com/dobri.kostadinov",target:"_blank",rel:"noopener noreferrer"},"Buy me a coffee",-1))])]),s("div",V,[n[29]||(n[29]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[28]||(n[28]=a("This article is previously published on ")),s("a",I,[e(o,{icon:"fa-brands fa-medium"}),n[27]||(n[27]=a("proandroiddev.com"))])]),e(c,{name:"Top 5 Extension Functions Every Jetpack Compose Developer Should Have",desc:"Bonus: 5 Must-Have Extensions for the View System as well",url:"https://proandroiddev.com/top-5-extension-functions-every-jetpack-compose-developer-should-have-cbf2c50d557c/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1024/1*lsi-SHMe9F42JG6xkMDUCA.png"})]),h(" TODO: add ARTICLE CARD "),e(l,r(d({title:"Top 5 Extension Functions Every Jetpack Compose Developer Should Have",desc:"Writing clean, efficient code is key to being a successful Android developer, and extension functions help us achieve this by extending the capabilities of existing classes without modifying them. Jetpack Compose developers can especially benefit from extension functions to make their UIs more responsive and efficient. For those moments when you’re still working with the view system, we’ll also look at a few must-have extensions to simplify your code there too.",link:"https://chanhi2000.github.io/bookshelf/droidcon.com/top-5-extension-functions-every-jetpack-compose-developer-should-have.html",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",background:"rgba(4,20,221,0.2)"})),null,16)])}const D=k(b,[["render",S]]),J=JSON.parse('{"path":"/droidcon.com/top-5-extension-functions-every-jetpack-compose-developer-should-have.html","title":"Top 5 Extension Functions Every Jetpack Compose Developer Should Have","lang":"en-US","frontmatter":{"lang":"en-US","title":"Top 5 Extension Functions Every Jetpack Compose Developer Should Have","description":"Article(s) > Top 5 Extension Functions Every Jetpack Compose Developer Should Have","icon":"iconfont icon-jetpack-compose","category":["Java","Kotlin","Android","Jetpack Compose","Article(s)"],"tag":["blog","droidcon.com","java","kotlin","android","jetpack-compse"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Top 5 Extension Functions Every Jetpack Compose Developer Should Have\\",\\"image\\":[\\"https://droidcon.com/wp-content/uploads/2024/11/1_lsi-SHMe9F42JG6xkMDUCA.webp\\"],\\"datePublished\\":\\"2024-11-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dobri Kostadinov\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/top-5-extension-functions-every-jetpack-compose-developer-should-have.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Top 5 Extension Functions Every Jetpack Compose Developer Should Have"}],["meta",{"property":"og:description","content":"Article(s) > Top 5 Extension Functions Every Jetpack Compose Developer Should Have"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://droidcon.com/wp-content/uploads/2024/11/1_lsi-SHMe9F42JG6xkMDUCA.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://droidcon.com/wp-content/uploads/2024/11/1_lsi-SHMe9F42JG6xkMDUCA.webp"}],["meta",{"name":"twitter:image:alt","content":"Top 5 Extension Functions Every Jetpack Compose Developer Should Have"}],["meta",{"property":"article:author","content":"Dobri Kostadinov"}],["meta",{"property":"article:tag","content":"jetpack-compse"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"droidcon.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-25T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Top 5 Extension Functions Every Jetpack Compose Developer Should Have"},{"property":"og:description","content":"Top 5 Extension Functions Every Jetpack Compose Developer Should Have"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/top-5-extension-functions-every-jetpack-compose-developer-should-have.html"}]],"prev":"/programming/java-android/articles/README.md","date":"2024-11-25T00:00:00.000Z","isOriginal":false,"author":"Dobri Kostadinov","cover":"https://droidcon.com/wp-content/uploads/2024/11/1_lsi-SHMe9F42JG6xkMDUCA.webp"},"git":{},"readingTime":{"minutes":4.03,"words":1208},"filePathRelative":"droidcon.com/top-5-extension-functions-every-jetpack-compose-developer-should-have.md","copyright":{"author":"Dobri Kostadinov"}}');export{D as comp,J as data};
