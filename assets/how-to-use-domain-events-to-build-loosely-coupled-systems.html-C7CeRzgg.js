import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as e,b as l,t as h,n as g,g as b,w as t,e as a,r as i,o as y}from"./app-BVguHYKu.js";const w={},f={id:"frontmatter-title-관련",tabindex:"-1"},E={class:"header-anchor",href:"#frontmatter-title-관련"},D={class:"table-of-contents"},C={class:"hint-container important"},T={href:"https://youtu.be/AHzWJ_SMqLo",target:"_blank",rel:"noopener noreferrer"};function I(c,n){const r=i("VPCard"),o=i("router-link"),u=i("SiteInfo"),p=i("RouteLink"),d=i("VPIcon"),m=i("VidStack");return y(),k("div",null,[s("h1",f,[s("a",E,[s("span",null,h(c.$frontmatter.title)+" 관련",1)])]),e(r,g(b({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",D,[s("ul",null,[s("li",null,[e(o,{to:"#what-are-domain-events"},{default:t(()=>n[0]||(n[0]=[a("What Are Domain Events?")])),_:1,__:[0]})]),s("li",null,[e(o,{to:"#domain-events-versus-integration-events"},{default:t(()=>n[1]||(n[1]=[a("Domain Events Versus Integration Events")])),_:1,__:[1]})]),s("li",null,[e(o,{to:"#implementing-domain-events"},{default:t(()=>n[2]||(n[2]=[a("Implementing Domain Events")])),_:1,__:[2]})]),s("li",null,[e(o,{to:"#raising-domain-events"},{default:t(()=>n[3]||(n[3]=[a("Raising Domain Events")])),_:1,__:[3]})]),s("li",null,[e(o,{to:"#how-to-publish-domain-events-with-ef-core"},{default:t(()=>n[4]||(n[4]=[a("How To Publish Domain Events With EF Core")])),_:1,__:[4]})]),s("li",null,[e(o,{to:"#how-to-handle-domain-events"},{default:t(()=>n[5]||(n[5]=[a("How To Handle Domain Events")])),_:1,__:[5]})]),s("li",null,[e(o,{to:"#in-summary"},{default:t(()=>n[6]||(n[6]=[a("In Summary")])),_:1,__:[6]})])])]),n[21]||(n[21]=s("hr",null,null,-1)),e(u,{name:"How To Use Domain Events To Build Loosely Coupled Systems",desc:"In software engineering, coupling means how much different parts of a software system depend on each other. If they are tightly coupled, changes to one part can affect many others. But if they are loosely coupled, changes to one part won't cause big problems in the rest of the system. Domain events are a Domain-Driven Design (DDD) tactical pattern that we can use to build loosely coupled systems. You can raise a domain event from the domain, which represents a fact that has occurred. And other components in the system can subscribe subscribe to this event, and handle it accordingly.",url:"https://milanjovanovic.tech/blog/how-to-use-domain-events-to-build-loosely-coupled-systems/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_047.png"}),n[22]||(n[22]=l(`<p>In software engineering, &quot;coupling&quot; means how much different parts of a software system depend on each other. If they are <strong>tightly coupled</strong>, changes to one part can affect many others. But if they are <strong>loosely coupled</strong>, changes to one part won&#39;t cause big problems in the rest of the system.</p><p><strong>Domain events</strong> are a <strong>Domain-Driven Design (DDD)</strong> tactical pattern that we can use to build <strong>loosely coupled</strong> systems.</p><p>You can raise a <strong>domain event</strong> from the domain, which represents a fact that has occurred. And other components in the system can subscribe to this event and handle it accordingly.</p><p>We have a lot to cover, so let&#39;s dive in!</p><hr><h2 id="what-are-domain-events" tabindex="-1"><a class="header-anchor" href="#what-are-domain-events"><span>What Are Domain Events?</span></a></h2><p>An <strong>event</strong> is something that has happened in the past.</p><p>It is a fact.</p><p>Unchangeable.</p><p>A <strong>domain event</strong> is something that happened in the domain, and other parts of the domain should be aware of it.</p><p><strong>Domain events</strong> allow you to express side effects explicitly, and provide a better separation of concerns in the domain. They&#39;re an ideal way to trigger side effects across multiple aggregates inside the domain.</p><p>It&#39;s your responsibility to ensure that publishing a <strong>domain event</strong> is transactional. You&#39;ll see why this is easier said than done.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_047/domain_events.png?imwidth=3840" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="domain-events-versus-integration-events" tabindex="-1"><a class="header-anchor" href="#domain-events-versus-integration-events"><span>Domain Events Versus Integration Events</span></a></h2><p>You may have heard of <strong>integration events</strong>, and you&#39;re now wondering what&#39;s the difference between them and <strong>domain events</strong>.</p><p>Semantically, they&#39;re the same thing: a representation of something that occurred in the past.</p><p>However, their <strong>intent is different</strong> and this is important to understand.</p><p>Domain events:</p><ul><li>Published and consumed within a single domain</li><li>Sent using an in-memory message bus</li><li>Can be processed synchronously or asynchronously</li></ul><p>Integration events:</p><ul><li>Consumed by other subsystems (microservices, Bounded Contexts)</li><li>Sent with a message broker over a queue</li><li>Processed completely asynchronously</li></ul><p>So if you&#39;re wondering what type of event you should publish, think about the intent and who should be handling the event.</p><p><strong>Domain events</strong> can also be used to <strong>generate integration events</strong>, which leave the domain boundary.</p><hr><h2 id="implementing-domain-events" tabindex="-1"><a class="header-anchor" href="#implementing-domain-events"><span>Implementing Domain Events</span></a></h2><p>My preferred approach to implement <strong>domain events</strong> is creating an <code>IDomainEvent</code> abstraction and implementing MediatR <code>INotification</code>.</p><p>The benefit is you can use <strong>MediatR&#39;s publish-subscribe</strong> support to publish a notification to one or multiple handlers.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">using</span> <span class="token namespace">MediatR</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDomainEvent</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INotification</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you can implement a concrete domain event.</p><p>Here are a few <strong>constraints</strong> to consider when <strong>designing domain events</strong>:</p><ul><li>Immutability - domain events are facts, and should be immutable</li><li>Fat vs Thin domain events - how much information do you need?</li><li>Use past tense for event naming</li></ul><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CourseCompletedDomainEvent</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDomainEvent</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> CourseId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="raising-domain-events" tabindex="-1"><a class="header-anchor" href="#raising-domain-events"><span>Raising Domain Events</span></a></h2><p>After you create your domain events, you want to raise them from the domain.</p><p>My approach is creating an <code>Entity</code> base class, because only entities are allowed to raise domain events. You can further encapsulate raising domain events by making the <code>RaiseDomainEvent</code> method <code>protected</code>.</p><p>We&#39;re storing domain events in an internal collection, to prevent anyone else from accessing it. The <code>GetDomainEvents</code> method is there to get a snapshot of the collection, and the <code>ClearDomainEvents</code> method to clear the internal collection.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Entity</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEntity</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>IDomainEvent<span class="token punctuation">&gt;</span></span> _domainEvents <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">IReadOnlyList<span class="token punctuation">&lt;</span>IDomainEvent<span class="token punctuation">&gt;</span></span> <span class="token function">GetDomainEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> _domainEvents<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ClearDomainEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _domainEvents<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RaiseDomainEvent</span><span class="token punctuation">(</span><span class="token class-name">IDomainEvent</span> domainEvent<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _domainEvents<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>domainEvent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you&#39;re entities can inherit from the <code>Entity</code> base class and raise domain events:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Course</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Entity</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">CourseStatus</span> Status <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime<span class="token punctuation">?</span></span> CompletedOnUtc <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Status <span class="token operator">=</span> CourseStatus<span class="token punctuation">.</span>Completed<span class="token punctuation">;</span></span>
<span class="line">        CompletedOnUtc <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">RaiseDomainEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CourseCompletedDomainEvent</span> <span class="token punctuation">{</span> CourseId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And all that&#39;s left to do is <strong>publish</strong> the <strong>domain events</strong>.</p><hr><h2 id="how-to-publish-domain-events-with-ef-core" tabindex="-1"><a class="header-anchor" href="#how-to-publish-domain-events-with-ef-core"><span>How To Publish Domain Events With EF Core</span></a></h2><p>An elegant solution for publishing domain events is using <strong>EF Core</strong>.</p><p>Since EF Core acts as a <strong>Unit of Work</strong>, you can use it to gather all <strong>domain events</strong> in the current transaction and publish them.</p><p>I don&#39;t like to complicate things, and simply override the <code>SaveChangesAsync</code> method to publish the domain events after persisting the changes in the database. But you could also use an interceptor.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationDbContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DbContext</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// When should you publish domain events?</span></span>
<span class="line">        <span class="token comment">//</span></span>
<span class="line">        <span class="token comment">// 1. BEFORE calling SaveChangesAsync</span></span>
<span class="line">        <span class="token comment">//     - domain events are part of the same transaction</span></span>
<span class="line">        <span class="token comment">//     - immediate consistency</span></span>
<span class="line">        <span class="token comment">// 2. AFTER calling SaveChangesAsync</span></span>
<span class="line">        <span class="token comment">//     - domain events are a separate transaction</span></span>
<span class="line">        <span class="token comment">//     - eventual consistency</span></span>
<span class="line">        <span class="token comment">//     - handlers can fail</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> <span class="token function">PublishDomainEventsAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The most <strong>important decision</strong> you will have to make here is <strong>when to publish the domain events</strong>.</p><p>I think it makes the most sense to publish after calling <code>SaveChangesAsync</code>. In other words, after saving changes to the database.</p><p>This comes with a few tradeoffs:</p><ul><li>Eventual consistency - because messages are processed after the original transactions</li><li>Database inconsistency risk - because handling domain events can fail</li></ul><p>Eventual consistency is something I can live with, so I choose to make this tradeoff.</p><p>However, introducing a risk of database inconsistency is a big concern.</p>`,54)),s("p",null,[n[8]||(n[8]=a("You can solve this with the ")),e(p,{to:"/milanjovanovic.tech/outbox-pattern-for-reliable-microservices-messaging.html"},{default:t(()=>n[7]||(n[7]=[s("strong",null,"Outbox pattern,",-1)])),_:1,__:[7]}),n[9]||(n[9]=a(" where you persist your changes to the database and the domain events (as outbox messages) in a single transaction. Now you have a guaranteed atomic transaction, and the domain events are processed asynchronously using a background job."))]),n[23]||(n[23]=l(`<p>If you&#39;re wondering what&#39;s inside the <code>PublishDomainEventsAsync</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">PublishDomainEventsAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> domainEvents <span class="token operator">=</span> ChangeTracker</span>
<span class="line">        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entries</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Entity<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>entry <span class="token operator">=&gt;</span> entry<span class="token punctuation">.</span>Entity<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>entity <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> domainEvents <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">GetDomainEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            entity<span class="token punctuation">.</span><span class="token function">ClearDomainEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">return</span> domainEvents<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> domainEvent <span class="token keyword">in</span> domainEvents<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> _publisher<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>domainEvent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="how-to-handle-domain-events" tabindex="-1"><a class="header-anchor" href="#how-to-handle-domain-events"><span>How To Handle Domain Events</span></a></h2><p>With all of the plumbing we created so far, we&#39;re ready to implement a handler for the domain events. Luckily, this is the simplest step in the process.</p><p>All you have to do is define a class implementing <code>INotificationHandler&lt;T&gt;</code> and specify your domain event type as the generic argument.</p><p>Here&#39;s a handler for the <code>CourseCompletedDomainEvent</code>, which takes the domain event and publishes a <code>CourseCompletedIntegrationEvent</code> to notify other systems.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CourseCompletedDomainEventHandler</span></span>
<span class="line">    <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INotificationHandler<span class="token punctuation">&lt;</span>CourseCompletedDomainEvent<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IBus</span> _bus<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">CourseCompletedDomainEventHandler</span><span class="token punctuation">(</span><span class="token class-name">IBus</span> bus<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _bus <span class="token operator">=</span> bus<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">CourseCompletedDomainEvent</span> domainEvent<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> _bus<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CourseCompletedIntegrationEvent</span><span class="token punctuation">(</span>domainEvent<span class="token punctuation">.</span>CourseId<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="in-summary" tabindex="-1"><a class="header-anchor" href="#in-summary"><span>In Summary</span></a></h2><p><strong>Domain events</strong> can help you build a loosely coupled system. You can use them to separate the core domain logic from the side effects, which can be handled asynchronously.</p><p>There&#39;s no need to reinvent the wheel for implementing domain events, and you can use the <strong>EF Core</strong> and <strong>MediatR</strong> libraries to build this.</p><p>You will have to make the decision when you want to publish domain events. Publishing before or after saving changes to the database both have their set of <strong>tradeoffs</strong>.</p>`,13)),s("p",null,[n[11]||(n[11]=a("I prefer ")),n[12]||(n[12]=s("strong",null,"publishing",-1)),n[13]||(n[13]=a(" domain events ")),n[14]||(n[14]=s("strong",null,"after saving changes",-1)),n[15]||(n[15]=a(" to the database, and I use the ")),e(p,{to:"/milanjovanovic.tech/outbox-pattern-for-reliable-microservices-messaging.html"},{default:t(()=>n[10]||(n[10]=[s("strong",null,"Outbox pattern",-1)])),_:1,__:[10]}),n[16]||(n[16]=a(" to add transactional guarantees. This approach introduces eventual consistency, but it's also more reliable."))]),n[24]||(n[24]=s("p",null,"Hope this was helpful.",-1)),n[25]||(n[25]=s("p",null,"See you next week!",-1)),s("div",C,[n[20]||(n[20]=s("p",{class:"hint-container-title"},"Today's action step",-1)),s("p",null,[n[18]||(n[18]=a("Take a look at ")),s("a",T,[e(d,{icon:"fa-brands fa-youtube"}),n[17]||(n[17]=s("strong",null,"this video",-1))]),n[19]||(n[19]=a(", where I explain how to implement domain events to build a decoupled system that scales."))]),e(m,{src:"youtube/AHzWJ_SMqLo"})])])}const A=v(w,[["render",I]]),_=JSON.parse('{"path":"/milanjovanovic.tech/how-to-use-domain-events-to-build-loosely-coupled-systems.html","title":"How To Use Domain Events To Build Loosely Coupled Systems","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How To Use Domain Events To Build Loosely Coupled Systems","description":"Article(s) > How To Use Domain Events To Build Loosely Coupled Systems","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How To Use Domain Events To Build Loosely Coupled Systems\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_047/domain_events.png?imwidth=3840\\"],\\"datePublished\\":\\"2023-07-22T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-to-use-domain-events-to-build-loosely-coupled-systems.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How To Use Domain Events To Build Loosely Coupled Systems"}],["meta",{"property":"og:description","content":"Article(s) > How To Use Domain Events To Build Loosely Coupled Systems"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_047.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_047.png"}],["meta",{"name":"twitter:image:alt","content":"How To Use Domain Events To Build Loosely Coupled Systems"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-07-22T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How To Use Domain Events To Build Loosely Coupled Systems"},{"property":"og:description","content":"How To Use Domain Events To Build Loosely Coupled Systems"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-to-use-domain-events-to-build-loosely-coupled-systems.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-07-22T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_047.png"},"git":{},"readingTime":{"minutes":4.97,"words":1491},"filePathRelative":"milanjovanovic.tech/how-to-use-domain-events-to-build-loosely-coupled-systems.md","copyright":{"author":"Milan Jovanović"}}');export{A as comp,_ as data};
