import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as e,b as l,a as g,t as h,n as r,g as u,w as t,e as a,r as p,o as b}from"./app-BVguHYKu.js";const y={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"};function C(d,n){const c=p("VPCard"),i=p("router-link"),m=p("SiteInfo"),o=p("RouteLink");return b(),v("div",null,[s("h1",f,[s("a",w,[s("span",null,h(d.$frontmatter.title)+" 관련",1)])]),e(c,r(u({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(c,r(u({title:"System Design > Article(s)",desc:"Article(s)",link:"/academics/system-design/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[e(i,{to:"#identifying-an-overgrown-context"},{default:t(()=>n[0]||(n[0]=[a("Identifying an Overgrown Context")])),_:1,__:[0]})]),s("li",null,[e(i,{to:"#step-1-identify-logical-subdomains"},{default:t(()=>n[1]||(n[1]=[a("Step 1: Identify Logical Subdomains")])),_:1,__:[1]})]),s("li",null,[e(i,{to:"#step-2-extract-one-context-at-a-time"},{default:t(()=>n[2]||(n[2]=[a("Step 2: Extract One Context at a Time")])),_:1,__:[2]})]),s("li",null,[e(i,{to:"#step-3-migrate-data-if-needed"},{default:t(()=>n[3]||(n[3]=[a("Step 3: Migrate Data (If Needed)")])),_:1,__:[3]})]),s("li",null,[e(i,{to:"#step-4-repeat-for-other-areas"},{default:t(()=>n[4]||(n[4]=[a("Step 4: Repeat for Other Areas")])),_:1,__:[4]})]),s("li",null,[e(i,{to:"#takeaway"},{default:t(()=>n[5]||(n[5]=[a("Takeaway")])),_:1,__:[5]})])])]),n[33]||(n[33]=s("hr",null,null,-1)),e(m,{name:"Refactoring Overgrown Bounded Contexts in Modular Monoliths",desc:"Learn how to untangle bloated services and split them into clean, modular bounded contexts in a .NET modular monolith - one practical refactor at a time.",url:"https://milanjovanovic.tech/blog/refactoring-overgrown-bounded-contexts-in-modular-monoliths",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_139.png"}),s("p",null,[n[7]||(n[7]=a("When you're building a ")),e(o,{to:"/milanjovanovic.tech/what-is-a-modular-monolith.html"},{default:t(()=>n[6]||(n[6]=[s("strong",null,"modular monolith",-1)])),_:1,__:[6]}),n[8]||(n[8]=a(", it's easy to let bounded contexts grow too large over time. What started as a clean domain boundary slowly turns into a dumping ground for unrelated logic. Before you know it, you have a massive context responsible for users, payments, notifications, and reporting - all tangled together."))]),n[34]||(n[34]=l(`<p>This article is about tackling that mess. We&#39;ll walk through how to identify an overgrown bounded context, and refactor it step-by-step into smaller, well-defined contexts. You&#39;ll see practical techniques in action, with real .NET code and without theoretical fluff.</p><hr><h2 id="identifying-an-overgrown-context" tabindex="-1"><a class="header-anchor" href="#identifying-an-overgrown-context"><span>Identifying an Overgrown Context</span></a></h2><p>You know you have a problem when:</p><ul><li>You&#39;re afraid to touch code because everything is interconnected</li><li>The same entity is used for 4 unrelated use cases</li><li>You see classes with 1000+ lines or services that do too much</li><li>Business logic from different subdomains bleeds into each other</li></ul><p>Here&#39;s a classic example.</p><p>We start with a <code>BillingContext</code> that now handles everything from notifications to reporting:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BillingService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ChargeCustomer</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> customerId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">decimal</span></span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SendInvoice</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> invoiceId<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">NotifyCustomer</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> customerId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GenerateMonthlyReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DeactivateUserAccount</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This service has no clear boundaries. It mixes <strong>Billing</strong>, <strong>Notifications</strong>, <strong>Reporting</strong>, and <strong>User Management</strong> into a single, bloated class. Changing one feature could easily break another.</p><hr><h2 id="step-1-identify-logical-subdomains" tabindex="-1"><a class="header-anchor" href="#step-1-identify-logical-subdomains"><span>Step 1: Identify Logical Subdomains</span></a></h2><p>We start by breaking this apart logically. Think like a product owner.</p><p>Just ask: &quot;What domains are we really working with?&quot;</p><p>Group the methods:</p><ul><li><strong>Billing</strong>: <code>ChargeCustomer</code>, <code>SendInvoice</code></li><li><strong>Notifications</strong>: <code>NotifyCustomer</code></li><li><strong>Reporting</strong>: <code>GenerateMonthlyReport</code></li><li><strong>User Management</strong>: <code>DeactivateUserAccount</code></li></ul>`,15)),s("p",null,[n[10]||(n[10]=a("Code within a ")),e(o,{to:"/milanjovanovic.tech/monolith-to-microservices-how-a-modular-monolith-helps.html"},{default:t(()=>n[9]||(n[9]=[s("strong",null,"bounded context",-1)])),_:1,__:[9]}),n[11]||(n[11]=a(" should model a coherent domain. When multiple domains are jammed into the same context, your architecture becomes misleading."))]),n[35]||(n[35]=l(`<p>You can validate these groupings by checking:</p><ul><li>Which parts of the system change together?</li><li>Do teams use different vocabulary for each area?</li><li>Would you give each domain to a different team?</li></ul><p>If yes, it&#39;s a sign you&#39;re dealing with distinct contexts.</p><hr><h2 id="step-2-extract-one-context-at-a-time" tabindex="-1"><a class="header-anchor" href="#step-2-extract-one-context-at-a-time"><span>Step 2: Extract One Context at a Time</span></a></h2><p>Don&#39;t try to do it all at once. Start with something low-risk.</p><p>Let&#39;s begin by extracting <strong>Notifications</strong>.</p><p>Why <strong>Notifications</strong>? Because it&#39;s a pure side-effect. It doesn&#39;t impact business state, so it&#39;s easier to decouple safely.</p><p>Create a new module and move the logic there:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// New module: Notifications</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotificationService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Send</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> customerId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then simplify the original <code>BillingService</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BillingService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">NotificationService</span> _notificationService<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">BillingService</span><span class="token punctuation">(</span><span class="token class-name">NotificationService</span> notificationService<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _notificationService <span class="token operator">=</span> notificationService<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ChargeCustomer</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> customerId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">decimal</span></span> amount<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Charge logic...</span></span>
<span class="line">        _notificationService<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>customerId<span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;You were charged $</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">amount</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This works. But now <strong>Billing</strong> <em>depends on</em> <strong>Notifications</strong>. That&#39;s a coupling we want to avoid long-term.</p><p>Why? Because a failure in <strong>Notifications</strong> could block a billing operation. It also means <strong>Billing</strong> can&#39;t evolve independently.</p>`,14)),s("p",null,[n[13]||(n[13]=a("Let's decouple with ")),e(o,{to:"/milanjovanovic.tech/how-to-use-domain-events-to-build-loosely-coupled-systems.html"},{default:t(()=>n[12]||(n[12]=[s("strong",null,"domain events",-1)])),_:1,__:[12]}),n[14]||(n[14]=a(":"))]),n[36]||(n[36]=l(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerChargedEvent</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> CustomerId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Amount <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Module: Billing</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BillingService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IDomainEventDispatcher</span> _dispatcher<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">BillingService</span><span class="token punctuation">(</span><span class="token class-name">IDomainEventDispatcher</span> dispatcher<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _dispatcher <span class="token operator">=</span> dispatcher<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ChargeCustomer</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> customerId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">decimal</span></span> amount<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Charge logic...</span></span>
<span class="line">        _dispatcher<span class="token punctuation">.</span><span class="token function">Dispatch</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomerChargedEvent</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            CustomerId <span class="token operator">=</span> customerId<span class="token punctuation">,</span></span>
<span class="line">            Amount <span class="token operator">=</span> amount</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Module: Notifications</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerChargedEventnHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDomainEventHandler<span class="token punctuation">&lt;</span>CustomerChargedEvent<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">CustomerChargedEvent</span> @<span class="token keyword">event</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Send notification</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now <strong>Billing</strong> doesn&#39;t even <em>know</em> about <strong>Notifications</strong>. That&#39;s real modularity. You can replace, remove, or enhance the <strong>Notifications</strong> module without touching <strong>Billing</strong>.</p><hr><h2 id="step-3-migrate-data-if-needed" tabindex="-1"><a class="header-anchor" href="#step-3-migrate-data-if-needed"><span>Step 3: Migrate Data (If Needed)</span></a></h2>`,4)),s("p",null,[n[16]||(n[16]=a("Most monoliths start with a single database. That's fine. But real modularity comes when each module controls its own ")),e(o,{to:"/milanjovanovic.tech/modular-monolith-data-isolation.html"},{default:t(()=>n[15]||(n[15]=[s("strong",null,"schema",-1)])),_:1,__:[15]}),n[17]||(n[17]=a("."))]),n[37]||(n[37]=s("p",null,"Why? Because the database structure reflects ownership. If everything touches the same tables, it's hard to enforce boundaries.",-1)),n[38]||(n[38]=s("p",null,"You don't have to do it all at once. Start with:",-1)),s("ul",null,[s("li",null,[n[19]||(n[19]=a("Creating a ")),e(o,{to:"/milanjovanovic.tech/using-multiple-ef-core-dbcontext-in-single-application.html"},{default:t(()=>n[18]||(n[18]=[s("strong",null,[a("separate "),s("code",null,"DbContext"),a(" per module")],-1)])),_:1,__:[18]})]),n[20]||(n[20]=s("li",null,"Gradually migrate the tables to their own schemas",-1)),n[21]||(n[21]=s("li",null,"Read-only projections or database views for cross-context reads",-1))]),n[39]||(n[39]=l(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Module: Billing</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BillingDbContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DbContext</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>Invoice<span class="token punctuation">&gt;</span></span> Invoices <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Module: Notifications</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotificationsDbContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DbContext</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>NotificationLog<span class="token punctuation">&gt;</span></span> Logs <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[23]||(n[23]=a("This separation enables independent schema evolution. It also makes ")),e(o,{to:"/milanjovanovic.tech/testing-modular-monoliths-system-integration-testing.html"},{default:t(()=>n[22]||(n[22]=[s("strong",null,"testing",-1)])),_:1,__:[22]}),n[24]||(n[24]=a(" faster and safer."))]),n[40]||(n[40]=l(`<p>When migrating, use a transitional phase where both contexts read from the same underlying data. Only switch write paths when confidence is high.</p><hr><h2 id="step-4-repeat-for-other-areas" tabindex="-1"><a class="header-anchor" href="#step-4-repeat-for-other-areas"><span>Step 4: Repeat for Other Areas</span></a></h2><p>Apply the same playbook. Target a clean split per subdomain.</p><p>Next up: <strong>Reporting</strong> and <strong>User Management</strong>.</p><p>Before:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">billingService<span class="token punctuation">.</span><span class="token function">GenerateMonthlyReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">billingService<span class="token punctuation">.</span><span class="token function">DeactivateUserAccount</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>After:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">reportingService<span class="token punctuation">.</span><span class="token function">GenerateMonthlyReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userService<span class="token punctuation">.</span><span class="token function">DeactivateUser</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Or via events:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">_dispatcher<span class="token punctuation">.</span><span class="token function">Dispatch</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MonthEndedEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">_dispatcher<span class="token punctuation">.</span><span class="token function">Dispatch</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInactiveEvent</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The goal here isn&#39;t just technical cleanliness - it&#39;s clarity. Anyone looking at your solution should know what each module is responsible for.</p>`,12)),s("p",null,[n[27]||(n[27]=a("And remember: boundaries should be enforced by code, not just by folder structure. Different projects, separate EF models, and ")),e(o,{to:"/milanjovanovic.tech/internal-vs-public-apis-in-modular-monoliths.html"},{default:t(()=>n[25]||(n[25]=[s("strong",null,"explicit interfaces",-1)])),_:1,__:[25]}),n[28]||(n[28]=a(" help enforce the split. ")),e(o,{to:"/milanjovanovic.tech/enforcing-software-architecture-with-architecture-tests.html"},{default:t(()=>n[26]||(n[26]=[s("strong",null,"Architecture tests",-1)])),_:1,__:[26]}),n[29]||(n[29]=a(" can also help ensure that modules don't break their boundaries."))]),n[41]||(n[41]=l('<hr><h2 id="takeaway" tabindex="-1"><a class="header-anchor" href="#takeaway"><span>Takeaway</span></a></h2><p>Once you&#39;ve finished the refactor, you&#39;ll have:</p><ul><li><strong>Smaller services</strong> focused on one job</li><li><strong>Decoupled modules</strong> that evolve independently</li><li><strong>Better tests</strong> and easier debugging</li><li><strong>Bounded contexts</strong> that actually match the domain</li></ul><p>This is more than structure, it&#39;s design that supports change. You get loose coupling, testability, and clearer mental models.</p><p>You don&#39;t need microservices to get modularity. You need to treat your monolith like a set of cooperating, isolated parts.</p><p>Start with one module. Ship the change. Repeat.</p>',7)),s("p",null,[n[31]||(n[31]=a("Want to go deeper into modular monolith design? My full video course, ")),e(o,{to:"/milanjovanovic.tech/modular-monolith-architecture/"},{default:t(()=>n[30]||(n[30]=[s("strong",null,"Modular Monolith Architecture",-1)])),_:1,__:[30]}),n[32]||(n[32]=a(", walks you through building a real-world system from scratch - with clear boundaries, isolated modules, and practical patterns that scale. Join 1,800+ students and start building better systems today."))]),n[42]||(n[42]=s("hr",null,null,-1)),g(" TODO: add ARTICLE CARD "),e(c,r(u({title:"Refactoring Overgrown Bounded Contexts in Modular Monoliths",desc:"Learn how to untangle bloated services and split them into clean, modular bounded contexts in a .NET modular monolith - one practical refactor at a time.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/refactoring-overgrown-bounded-contexts-in-modular-monoliths.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const B=k(y,[["render",C]]),j=JSON.parse('{"path":"/milanjovanovic.tech/refactoring-overgrown-bounded-contexts-in-modular-monoliths.html","title":"Refactoring Overgrown Bounded Contexts in Modular Monoliths","lang":"en-US","frontmatter":{"lang":"en-US","title":"Refactoring Overgrown Bounded Contexts in Modular Monoliths","description":"Article(s) > Refactoring Overgrown Bounded Contexts in Modular Monoliths","icon":"iconfont icon-csharp","category":["C#","DotNet","Design","System","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","csharp","c#","dotnet","design","system"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Refactoring Overgrown Bounded Contexts in Modular Monoliths\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_139.png\\"],\\"datePublished\\":\\"2025-04-26T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/refactoring-overgrown-bounded-contexts-in-modular-monoliths.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Refactoring Overgrown Bounded Contexts in Modular Monoliths"}],["meta",{"property":"og:description","content":"Article(s) > Refactoring Overgrown Bounded Contexts in Modular Monoliths"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_139.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_139.png"}],["meta",{"name":"twitter:image:alt","content":"Refactoring Overgrown Bounded Contexts in Modular Monoliths"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"system"}],["meta",{"property":"article:tag","content":"design"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-04-26T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Refactoring Overgrown Bounded Contexts in Modular Monoliths"},{"property":"og:description","content":"Refactoring Overgrown Bounded Contexts in Modular Monoliths"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/refactoring-overgrown-bounded-contexts-in-modular-monoliths.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-04-26T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_139.png"},"git":{},"readingTime":{"minutes":4.22,"words":1266},"filePathRelative":"milanjovanovic.tech/refactoring-overgrown-bounded-contexts-in-modular-monoliths.md","copyright":{"author":"Milan Jovanović"}}');export{B as comp,j as data};
