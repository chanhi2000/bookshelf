import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as n,f as e,a as u,b as i,t as y,n as m,g as h,w as t,e as a,r,o as w}from"./app-BVguHYKu.js";const x={},S={id:"frontmatter-title-관련",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-관련"},T={class:"table-of-contents"},I={href:"https://codepen.io/chriscoyier/full/pMRgwW",target:"_blank",rel:"noopener noreferrer"},P={class:"hint-container info"},j={href:"http://caniuse.com/#feat=css-snappoints",target:"_blank",rel:"noopener noreferrer"},z={href:"https://w3.org/TR/css-scroll-snap-1/#scroll-snap-type",target:"_blank",rel:"noopener noreferrer"},A={href:"https://w3.org/TR/css-scroll-snap-1/#scroll-snap-align",target:"_blank",rel:"noopener noreferrer"},E={href:"https://w3.org/TR/2015/WD-css-snappoints-1-20150326/#scroll-snap-points",target:"_blank",rel:"noopener noreferrer"},D={href:"https://npmjs.com/package/css-scroll-snap-polyfill",target:"_blank",rel:"noopener noreferrer"},V={class:"hint-container note"},M={href:"https://bundle.run/css-scroll-snap-polyfill@0.1.2",target:"_blank",rel:"noopener noreferrer"},R={href:"https://bugs.chromium.org/p/chromium/issues/detail?id=823998",target:"_blank",rel:"noopener noreferrer"},q={href:"https://robinrendle.com/notes/scrolljacking/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/w3c/csswg-drafts/issues/156",target:"_blank",rel:"noopener noreferrer"};function B(p,s){const d=r("VPCard"),l=r("router-link"),g=r("SiteInfo"),o=r("VPIcon"),k=r("RouteLink"),c=r("CodePen"),f=r("VidStack");return w(),b("div",null,[n("h1",S,[n("a",C,[n("span",null,y(p.$frontmatter.title)+" 관련",1)])]),e(d,m(h({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",T,[n("ul",null,[n("li",null,[e(l,{to:"#browser-support-and-basic-usage"},{default:t(()=>s[0]||(s[0]=[a("Browser support and basic usage")])),_:1,__:[0]})]),n("li",null,[e(l,{to:"#parent-container-properties"},{default:t(()=>s[1]||(s[1]=[a("Parent container properties")])),_:1,__:[1]}),n("ul",null,[n("li",null,[e(l,{to:"#scroll-snap-type-mandatory-vs-proximity"},{default:t(()=>s[2]||(s[2]=[a("scroll-snap-type “mandatory” vs. “proximity”")])),_:1,__:[2]})]),n("li",null,[e(l,{to:"#scroll-padding"},{default:t(()=>s[3]||(s[3]=[a("scroll-padding")])),_:1,__:[3]})])])]),n("li",null,[e(l,{to:"#properties-on-the-children"},{default:t(()=>s[4]||(s[4]=[a("Properties on the children")])),_:1,__:[4]}),n("ul",null,[n("li",null,[e(l,{to:"#scroll-snap-align"},{default:t(()=>s[5]||(s[5]=[a("scroll-snap-align")])),_:1,__:[5]})]),n("li",null,[e(l,{to:"#scroll-snap-stop-normal-vs-always"},{default:t(()=>s[6]||(s[6]=[a("scroll-snap-stop “normal” vs. “always”")])),_:1,__:[6]})])])]),n("li",null,[e(l,{to:"#example-1-vertical-list"},{default:t(()=>s[7]||(s[7]=[a("Example 1: Vertical list")])),_:1,__:[7]})]),n("li",null,[e(l,{to:"#example-2-horizontal-slider"},{default:t(()=>s[8]||(s[8]=[a("Example 2: Horizontal slider")])),_:1,__:[8]})]),n("li",null,[e(l,{to:"#example-3-vertical-full-screen"},{default:t(()=>s[9]||(s[9]=[a("Example 3: Vertical full screen")])),_:1,__:[9]})]),n("li",null,[e(l,{to:"#example-4-horizontal-full-screen"},{default:t(()=>s[10]||(s[10]=[a("Example 4: Horizontal full screen")])),_:1,__:[10]})]),n("li",null,[e(l,{to:"#example-5-2d-image-grid"},{default:t(()=>s[11]||(s[11]=[a("Example 5: 2D image grid")])),_:1,__:[11]})]),n("li",null,[e(l,{to:"#some-thoughts-on-user-experience"},{default:t(()=>s[12]||(s[12]=[a("Some thoughts on user experience")])),_:1,__:[12]})]),n("li",null,[e(l,{to:"#conclusion"},{default:t(()=>s[13]||(s[13]=[a("Conclusion")])),_:1,__:[13]})])])]),s[65]||(s[65]=n("hr",null,null,-1)),e(g,{name:"Practical CSS Scroll Snapping",desc:"CSS scroll snapping allows you to lock the viewport to certain elements or locations after a user has finished scrolling. It’s great for building interactions",url:"https://css-tricks.com/practical-css-scroll-snapping",logo:"https://css-tricks/favicon.svg",preview:"https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/07/scroll-snap-featured.gif"}),s[66]||(s[66]=n("p",null,"CSS scroll snapping allows you to lock the viewport to certain elements or locations after a user has finished scrolling. It’s great for building interactions like this one:",-1)),n("figure",null,[s[17]||(s[17]=n("img",{src:"https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/03/scroll-snap-demo.gif?fit=1024%2C686&ssl=1",alt:'Live Demo (<VPIcon icon="fa-brands fa-codepen"/>)',tabindex:"0",loading:"lazy"},null,-1)),n("figcaption",null,[n("a",I,[s[14]||(s[14]=a("Live Demo (")),e(o,{icon:"fa-brands fa-codepen"}),s[15]||(s[15]=n("code",null,"chriscoyier",-1)),s[16]||(s[16]=a(")"))])])]),s[67]||(s[67]=n("hr",null,null,-1)),s[68]||(s[68]=n("h2",{id:"browser-support-and-basic-usage",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#browser-support-and-basic-usage"},[n("span",null,"Browser support and basic usage")])],-1)),n("p",null,[s[19]||(s[19]=a("Browser support for CSS scroll snapping has improved significantly since it was ")),e(k,{to:"/css-tricks.com/introducing-css-scroll-snap-points.html"},{default:t(()=>s[18]||(s[18]=[n("strong",null,"introduced in 2016",-1)])),_:1,__:[18]}),s[20]||(s[20]=a(", with Google Chrome (69+), Firefox, Edge, and Safari all supporting some version of it."))]),n("div",P,[s[24]||(s[24]=n("p",{class:"hint-container-title"},"Info",-1)),n("p",null,[s[22]||(s[22]=a("This browser support data is from ")),n("a",j,[e(o,{icon:"iconfont icon-caniuse"}),s[21]||(s[21]=a("Caniuse"))]),s[23]||(s[23]=a(", which has more detail. A number indicates that browser supports the feature at that version and up."))]),s[25]||(s[25]=i('<h3 id="desktop" tabindex="-1"><a class="header-anchor" href="#desktop"><span>Desktop</span></a></h3><table><thead><tr><th>Chrome</th><th>Firefox</th><th>IE</th><th>Edge</th><th>Safari</th></tr></thead><tbody><tr><td>69</td><td>68</td><td>11*</td><td>79</td><td>11</td></tr></tbody></table><h3 id="mobile-tablet" tabindex="-1"><a class="header-anchor" href="#mobile-tablet"><span>Mobile / Tablet</span></a></h3><table><thead><tr><th>Android Chrome</th><th>Android Firefox</th><th>Android</th><th>iOS Safari</th></tr></thead><tbody><tr><td>138</td><td>140</td><td>138</td><td>11.0-11.2</td></tr></tbody></table>',4))]),u(" TODO: caniuse 컴포넌트 "),n("p",null,[s[28]||(s[28]=a("Scroll snapping is used by setting the ")),n("a",z,[e(o,{icon:"iconfont icon-w3c"}),s[26]||(s[26]=n("code",null,"scroll-snap-type",-1))]),s[29]||(s[29]=a(" property on a container element and the ")),n("a",A,[e(o,{icon:"iconfont icon-w3c"}),s[27]||(s[27]=n("code",null,"scroll-snap-align",-1))]),s[30]||(s[30]=a(" property on elements inside it. When the container element is scrolled, it will snap to the child elements you’ve defined. In its most basic form, it looks like this:"))]),s[69]||(s[69]=i(`<div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.container</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">scroll-snap-type</span><span class="token punctuation">:</span> y mandatory<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.child</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">scroll-snap-align</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),n("p",null,[s[32]||(s[32]=a("This is different to the ")),n("a",E,[e(o,{icon:"iconfont icon-w3c"}),s[31]||(s[31]=a("first version of the spec"))]),s[33]||(s[33]=a(", which allowed you to set snap-points manually using the ")),s[34]||(s[34]=n("code",null,"repeat",-1)),s[35]||(s[35]=a(" keyword:"))]),s[70]||(s[70]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.container</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* OLD */</span></span>
<span class="line">  <span class="token property">scroll-snap-points-y</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>300px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This method is pretty limited. Since it only allows evenly-spaced snap points, you can’t really build an interface that snaps to different-sized elements. If elements change their shape across different screen sizes, you’re also bound to run into issues.</p><p>At the time of this writing, Firefox, Internet Explorer, and Edge support the older version of the spec, while Chrome (69+) and Safari support the newer, element-based method.</p><p>You <em>can</em> use both methods alongside each other (if your layout allows it) to support both groups of browsers:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.container</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">scroll-snap-type</span><span class="token punctuation">:</span> mandatory<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">scroll-snap-points-y</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>300px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">scroll-snap-type</span><span class="token punctuation">:</span> y mandatory<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.child</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">scroll-snap-align</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),n("p",null,[s[39]||(s[39]=a("I’d argue a more flexible option is to use the element-based syntax exclusively and loading a ")),n("a",D,[s[36]||(s[36]=a("polyfill (")),e(o,{icon:"fa-brands fa-npm"}),s[37]||(s[37]=n("code",null,"css-scroll-snap-polyfill",-1)),s[38]||(s[38]=a(")"))]),s[40]||(s[40]=a(" to support browsers that don’t yet support it. This is the method I’m using in the examples below."))]),n("div",V,[s[50]||(s[50]=n("p",{class:"hint-container-title"},"Note",-1)),n("p",null,[s[42]||(s[42]=a("Unfortunately, the polyfill doesn’t come with a browser bundle, so it’s a bit tricky to use if you’re not using a build process. The easiest way around this I’ve found is to link to the script on ")),n("a",M,[e(o,{icon:"fas fa-globe"}),s[41]||(s[41]=a("bundle.run"))]),s[43]||(s[43]=a(" and initializing it using ")),s[44]||(s[44]=n("code",null,"cssScrollSnapPolyfill()",-1)),s[45]||(s[45]=a(" once the DOM is loaded. It’s also worth pointing out that this polyfill ")),s[46]||(s[46]=n("em",null,"only",-1)),s[47]||(s[47]=a(" supports the element-based syntax, not the ")),s[48]||(s[48]=n("code",null,"repeat",-1)),s[49]||(s[49]=a("-method."))])]),s[71]||(s[71]=i('<hr><h2 id="parent-container-properties" tabindex="-1"><a class="header-anchor" href="#parent-container-properties"><span>Parent container properties</span></a></h2><p>As with any property, it’s a good idea to get familiar with the values they accept. Scroll snap properties are applied to both parent and child elements, with specific values for each. Sort of the same way flexbox and grid do, where the parent becomes a “flex” or “grid” container. In this case, the parent becomes a snap container, if you will.</p><p>Here are the properties and values for the parent container and how they work.</p><h3 id="scroll-snap-type-mandatory-vs-proximity" tabindex="-1"><a class="header-anchor" href="#scroll-snap-type-mandatory-vs-proximity"><span>scroll-snap-type “mandatory” vs. “proximity”</span></a></h3><p>The <code>mandatory</code> value means the browser <em>has</em> to snap to a snap point whenever the user stops scrolling. The <code>proximity</code> property is less strict—it means the browser <em>may</em> snap to a snap point if it seems appropriate. In my experience, this tends to kick in when you stop scrolling within a few hundred pixels of a snap point.</p>',6)),e(c,{user:"maxakohler","slug-hash":"ZjrOpx",title:"Scroll-snap-type “Mandatory” vs “Proximity”","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[72]||(s[72]=i('<p>In my own work, I’ve found that <code>mandatory</code> makes for a more consistent user experience, but it can also be dangerous, as <a href="https://w3.org/TR/css-scroll-snap-1/#valdef-scroll-snap-type-mandatory" target="_blank" rel="noopener noreferrer">the spec points out</a>. Picture a scenario where an element inside a scrolling container is taller than the viewport:</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/07/scroll-snap-overflow.jpg?ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>If that container is set to <code>scroll-snap-type: mandatory</code>, it will always snap either to the top of the element or the top of the one below, making the middle part of the tall element impossible to scroll to.</p><h3 id="scroll-padding" tabindex="-1"><a class="header-anchor" href="#scroll-padding"><span>scroll-padding</span></a></h3><p>By default, content will snap to the very edges of the container. You can change that by setting the <code>scroll-padding</code> property on the container. It follows the same syntax as the regular <code>padding</code> property.</p><p>This can be useful if your layout has elements that could get in the way of the content, like a fixed header.</p><hr><h2 id="properties-on-the-children" tabindex="-1"><a class="header-anchor" href="#properties-on-the-children"><span>Properties on the children</span></a></h2><p>Now let’s move on over to the properties for child elements.</p><h3 id="scroll-snap-align" tabindex="-1"><a class="header-anchor" href="#scroll-snap-align"><span>scroll-snap-align</span></a></h3><p>This lets you specify which part of the element is supposed to snap to the container. It has three possible values: <code>start</code>, <code>center</code>, and <code>end</code>.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/07/scroll-snap-align.jpg?ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>These are relative to the scroll direction. If you’re scrolling vertically, <code>start</code> refers to the top edge of the element. If you’re scrolling horizontally, it refers to the left edge. <code>center</code> and <code>end</code> follow the same principle. You can set a different value for each scroll direction separated by a space.</p><h3 id="scroll-snap-stop-normal-vs-always" tabindex="-1"><a class="header-anchor" href="#scroll-snap-stop-normal-vs-always"><span>scroll-snap-stop “normal” vs. “always”</span></a></h3><p>By default, scroll snapping only kicks in when the user stops scrolling, meaning they can skip over several snap points before coming to a stop.</p><p>You can change this by setting <code>scroll-snap-stop: always</code> on any child element. This forces the scroll container to stop on that element before the user can continue to scroll.</p>',16)),n("p",null,[s[52]||(s[52]=a("At the time of this writing, no browser supports ")),s[53]||(s[53]=n("code",null,"scroll-snap-stop",-1)),s[54]||(s[54]=a(" natively, though there is a ")),n("a",R,[e(o,{icon:"fa-brands fa-chrome"}),s[51]||(s[51]=a("tracking bug"))]),s[55]||(s[55]=a(" for Chrome."))]),s[73]||(s[73]=i(`<p>Let’s look at some examples of scroll snap in use.</p><hr><h2 id="example-1-vertical-list" tabindex="-1"><a class="header-anchor" href="#example-1-vertical-list"><span>Example 1: Vertical list</span></a></h2><p>To make a vertical list snap to each list element only takes a few lines of CSS. First, we tell the container to snap along its vertical axis:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.container</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">scroll-snap-type</span><span class="token punctuation">:</span> y mandatory<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, we define the snap points. Here, we’re specifying that the <strong>top</strong> of each list element is going to be a snap point:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.child</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">scroll-snap-align</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)),e(c,{user:"maxakohler","slug-hash":"JBjROd",title:"Vertical List","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[74]||(s[74]=i(`<hr><h2 id="example-2-horizontal-slider" tabindex="-1"><a class="header-anchor" href="#example-2-horizontal-slider"><span>Example 2: Horizontal slider</span></a></h2><p>To make a horizontal slider, we tell the container to snap along its x-axis. We’re also using <code>scroll-padding</code> to make sure the child elements snap to the center of the container.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.container</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">scroll-snap-type</span><span class="token punctuation">:</span> x mandatory<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">scroll-padding</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, we tell the container which points to snap to. To center the gallery, we define the center point of each element as a snap point.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.child</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">scroll-snap-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),e(c,{user:"maxakohler","slug-hash":"Yjzpzr",title:"Horizontal, different sized images","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[75]||(s[75]=i(`<hr><h2 id="example-3-vertical-full-screen" tabindex="-1"><a class="header-anchor" href="#example-3-vertical-full-screen"><span>Example 3: Vertical full screen</span></a></h2><p>We can set the snap points directly on the element:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">html</span> <span class="token punctuation">{</span> <span class="token comment">/* body won&#39;t work ¯_(ツ)_/¯ */</span></span>
<span class="line">  <span class="token property">scroll-snap-type</span><span class="token punctuation">:</span> y mandatory<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* Although I&#39;m told that html doesn&#39;t work in Safari </span>
<span class="line">   and body does, so maybe use both? */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, we make each section the size of the viewport and define the top edge as a snap point:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">section</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">scroll-snap-align</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),e(c,{user:"team","slug-hash":"tricks/pen/yLLqqgP",title:"Vertical Full-Screen","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[76]||(s[76]=i(`<hr><h2 id="example-4-horizontal-full-screen" tabindex="-1"><a class="header-anchor" href="#example-4-horizontal-full-screen"><span>Example 4: Horizontal full screen</span></a></h2><p>This is the same sort of concept as the vertical version, but with the snap point on the x-axis instead.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">body</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">scroll-snap-type</span><span class="token punctuation">:</span> x mandatory<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">section</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">scroll-snap-align</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),e(c,{user:"chriscoyier","slug-hash":"pMRgwW",title:"Horizontal Full-Screen","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[77]||(s[77]=i(`<hr><h2 id="example-5-2d-image-grid" tabindex="-1"><a class="header-anchor" href="#example-5-2d-image-grid"><span>Example 5: 2D image grid</span></a></h2><p>Scroll snapping can work in two directions at the same time. Again, we can set <code>scroll-snap-type</code> directly on the element:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.container</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">scroll-snap-type</span><span class="token punctuation">:</span> both mandatory<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, we define the top-left corner of each tile as a snap point:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.tile</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">scroll-snap-align</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),e(c,{user:"maxakohler","slug-hash":"MBWJKm",title:"2d Snapping","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),s[78]||(s[78]=n("hr",null,null,-1)),s[79]||(s[79]=n("h2",{id:"some-thoughts-on-user-experience",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#some-thoughts-on-user-experience"},[n("span",null,"Some thoughts on user experience")])],-1)),n("p",null,[s[57]||(s[57]=n("em",null,"Messing with scrolling",-1)),s[58]||(s[58]=a(" is risky business. Since it’s such a fundamental part of interacting with the web, changing it in any way can feel jarring—the term ")),n("a",q,[e(o,{icon:"fas fa-globe"}),s[56]||(s[56]=a("scrolljacking"))]),s[59]||(s[59]=a(" used to get thrown around to describe that sort of experience."))]),s[80]||(s[80]=n("p",null,[a("The great thing about CSS-based scroll snapping is that you’re "),n("em",null,"not"),a(" taking direct control over the scroll position. Instead, you’re just giving the browser a list of positions to snap in a way that is appropriate to the platform, input method, and user preferences. This means a scrolling interface you build is going to feel just like the native interface (i.e using the same animations, etc.) on whatever platform it’s viewed on.")],-1)),s[81]||(s[81]=n("p",null,"To me, this is the key advantage of CSS scroll snapping over JavaScript libraries that offer similar functionality.",-1)),s[82]||(s[82]=n("p",null,"This works fairly well in my experience, especially on mobile. Maybe this is because scroll snapping is already part of the native UI on mobile platforms. (Picture the home screens on iOS and Android—they’re essentially horizontal sliders with snap points.) The interaction on Chrome on Android is particularly nice because it feels like regular scrolling, but the viewport always happens to come to a stop at a snap point:",-1)),e(f,{src:"https://css-tricks.com/wp-content/uploads/2018/07/scroll-snap-example.mp4"}),s[83]||(s[83]=n("p",null,"There’s definitely some fancy maths going on to make this happen. Thanks to CSS scroll snapping, we’re getting it for free.",-1)),s[84]||(s[84]=n("p",null,"Of course, we shouldn’t start throwing snap points onto everything. Things like article pages do just fine without them. But I think they can be a nice enhancement in the right situation—image galleries, slideshows seem like good candidates, but maybe there’s potential beyond that.",-1)),s[85]||(s[85]=n("hr",null,null,-1)),s[86]||(s[86]=n("h2",{id:"conclusion",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#conclusion"},[n("span",null,"Conclusion")])],-1)),n("p",null,[s[63]||(s[63]=a("If done thoughtfully, scroll snapping can be a useful design tool. CSS snap points allow you to hook into the browser’s native scrolling interaction, so your interface feel seamless and smooth. With a JavaScript API ")),n("a",O,[s[60]||(s[60]=a("potentially on the horizon (")),e(o,{icon:"iconfont icon-github"}),s[61]||(s[61]=n("code",null,"w3c/csswg-drafts",-1)),s[62]||(s[62]=a(")"))]),s[64]||(s[64]=a(", these are going to become even more powerful. Still, a light touch is probably the way to go."))]),u(" TODO: add ARTICLE CARD "),e(d,m(h({title:"Practical CSS Scroll Snapping",desc:"CSS scroll snapping allows you to lock the viewport to certain elements or locations after a user has finished scrolling. It’s great for building interactions",link:"https://chanhi2000.github.io/bookshelf/css-tricks.com/practical-css-scroll-snapping.html",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16)])}const H=v(x,[["render",B]]),N=JSON.parse('{"path":"/css-tricks.com/practical-css-scroll-snapping.html","title":"Practical CSS Scroll Snapping","lang":"en-US","frontmatter":{"lang":"en-US","title":"Practical CSS Scroll Snapping","description":"Article(s) > Practical CSS Scroll Snapping","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","css-tricks.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Practical CSS Scroll Snapping\\",\\"image\\":[\\"https://codepen.io/chriscoyier/full/pMRgwW\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/07/scroll-snap-overflow.jpg?ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/07/scroll-snap-align.jpg?ssl=1\\"],\\"datePublished\\":\\"2020-06-18T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Max Kohler\\",\\"url\\":\\"https://css-tricks.com/author/maxkoehler/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/practical-css-scroll-snapping.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Practical CSS Scroll Snapping"}],["meta",{"property":"og:description","content":"Article(s) > Practical CSS Scroll Snapping"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/07/scroll-snap-featured.gif"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/07/scroll-snap-featured.gif"}],["meta",{"name":"twitter:image:alt","content":"Practical CSS Scroll Snapping"}],["meta",{"property":"article:author","content":"Max Kohler"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"css-tricks.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2020-06-18T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Practical CSS Scroll Snapping"},{"property":"og:description","content":"Practical CSS Scroll Snapping"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/practical-css-scroll-snapping.html"}]],"prev":"/programming/css/articles/README.md","date":"2020-06-18T00:00:00.000Z","isOriginal":false,"author":[{"name":"Max Kohler","url":"https://css-tricks.com/author/maxkoehler/"}],"cover":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/07/scroll-snap-featured.gif"},"git":{},"readingTime":{"minutes":7,"words":2100},"filePathRelative":"css-tricks.com/practical-css-scroll-snapping.md","copyright":{"author":"Max Kohler"}}');export{H as comp,N as data};
