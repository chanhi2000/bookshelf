import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as t,b as k,a as h,t as b,n as c,g as l,w as e,e as a,r as i,o as y}from"./app-BVguHYKu.js";const w={},f={id:"frontmatter-title-관련",tabindex:"-1"},S={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},I={href:"https://masstransit.io/documentation/patterns/saga/state-machine",target:"_blank",rel:"noopener noreferrer"},P={class:"hint-container note"},M={href:"https://github.com/m-jovanovic/saga-pattern-masstransit",target:"_blank",rel:"noopener noreferrer"};function T(m,n){const o=i("VPCard"),p=i("router-link"),u=i("SiteInfo"),r=i("RouteLink"),d=i("VPIcon");return y(),g("div",null,[s("h1",f,[s("a",S,[s("span",null,b(m.$frontmatter.title)+" 관련",1)])]),t(o,c(l({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t(o,c(l({title:"PostgreSQL > Article(s)",desc:"Article(s)",link:"/data-science/postgres/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[t(p,{to:"#understanding-the-saga-pattern"},{default:e(()=>n[0]||(n[0]=[a("Understanding the Saga Pattern")])),_:1,__:[0]})]),s("li",null,[t(p,{to:"#implementing-sagas-with-masstransit"},{default:e(()=>n[1]||(n[1]=[a("Implementing Sagas with MassTransit")])),_:1,__:[1]}),s("ul",null,[s("li",null,[t(p,{to:"#state-machine-fundamentals"},{default:e(()=>n[2]||(n[2]=[a("State Machine Fundamentals")])),_:1,__:[2]})]),s("li",null,[t(p,{to:"#defining-the-saga-instance"},{default:e(()=>n[3]||(n[3]=[a("Defining the Saga Instance")])),_:1,__:[3]})]),s("li",null,[t(p,{to:"#defining-events"},{default:e(()=>n[4]||(n[4]=[a("Defining Events")])),_:1,__:[4]})]),s("li",null,[t(p,{to:"#building-the-state-machine"},{default:e(()=>n[5]||(n[5]=[a("Building the State Machine")])),_:1,__:[5]})]),s("li",null,[t(p,{to:"#implementing-message-consumers"},{default:e(()=>n[6]||(n[6]=[a("Implementing Message Consumers")])),_:1,__:[6]})])])]),s("li",null,[t(p,{to:"#configuring-masstransit-with-postgresql-persistence"},{default:e(()=>n[7]||(n[7]=[a("Configuring MassTransit with PostgreSQL Persistence")])),_:1,__:[7]})]),s("li",null,[t(p,{to:"#benefits-of-this-approach"},{default:e(()=>n[8]||(n[8]=[a("Benefits of This Approach")])),_:1,__:[8]})]),s("li",null,[t(p,{to:"#takeaway"},{default:e(()=>n[9]||(n[9]=[a("Takeaway")])),_:1,__:[9]})])])]),n[24]||(n[24]=s("hr",null,null,-1)),t(u,{name:"Implementing the Saga Pattern With MassTransit",desc:"Long-running business processes often require multiple services working together, but traditional distributed transactions can be problematic at scale. Learn how to implement the Saga pattern using MassTransit to break complex workflows into manageable steps with proper error handling and state management.",url:"https://milanjovanovic.tech/blog/implementing-the-saga-pattern-with-masstransit",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_118.png"}),n[25]||(n[25]=k('<p>Long-running business processes often involve multiple services working together. Think about an e-commerce order: you need to process the payment, update inventory, and notify shipping. Traditional distributed transactions using two-phase commit (2PC) seem like a solution, but they come with significant drawbacks.</p><p>The main issue? Services can&#39;t make assumptions about how other services operate or how long they&#39;ll take. What if the payment service needs manual approval? What if the inventory check is delayed? Holding database locks across multiple services for extended periods isn&#39;t practical and can lead to system-wide issues.</p><p>Let&#39;s look at how the Saga pattern solves these problems and implement it using MassTransit.</p><hr><h2 id="understanding-the-saga-pattern" tabindex="-1"><a class="header-anchor" href="#understanding-the-saga-pattern"><span>Understanding the Saga Pattern</span></a></h2><p>A Saga is a sequence of related local transactions where each step has a defined action and a compensating action if something goes wrong. Instead of one big atomic transaction, we break the process into manageable steps that can be coordinated.</p><p>Here&#39;s a simple order processing flow:</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_118/order_flow.png?imwidth=1200" alt="Sequence diagram showing an order processing flow with multiple services." tabindex="0" loading="lazy"><figcaption>Sequence diagram showing an order processing flow with multiple services.</figcaption></figure><p>Each step is independent and can be compensated if needed. If the inventory service reports items are out of stock, we can refund the payment. This approach gives us flexibility and reliability without tight coupling.</p><hr><h2 id="implementing-sagas-with-masstransit" tabindex="-1"><a class="header-anchor" href="#implementing-sagas-with-masstransit"><span>Implementing Sagas with MassTransit</span></a></h2>',11)),s("p",null,[t(r,{to:"/milanjovanovic.tech/using-masstransit-with-rabbitmq-and-azure-service-bus.html"},{default:e(()=>n[10]||(n[10]=[a("MassTransit")])),_:1,__:[10]}),n[11]||(n[11]=a(" provides a state machine-based approach to implementing Sagas through its integration with Automatonymous. Understanding how state machines work is crucial for implementing effective sagas."))]),n[26]||(n[26]=s("h3",{id:"state-machine-fundamentals",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#state-machine-fundamentals"},[s("span",null,"State Machine Fundamentals")])],-1)),s("p",null,[n[13]||(n[13]=a("A ")),s("a",I,[t(d,{icon:"fas fa-globe"}),n[12]||(n[12]=a("state machine"))]),n[14]||(n[14]=a(" consists of several key components:"))]),n[27]||(n[27]=k(`<ol><li><strong>States</strong>: Represent the possible conditions of your saga instance</li><li><strong>Events</strong>: Messages that can trigger state transitions</li><li><strong>Behaviors</strong>: Actions that occur when events are received in specific states</li><li><strong>Instance</strong>: Contains the data and current state for a specific saga</li></ol><p>Here&#39;s the state machine diagram for our order processing saga:</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_118/order_saga_state_machine.png?imwidth=1200" alt="State diagram showing an order saga state machine." tabindex="0" loading="lazy"><figcaption>State diagram showing an order saga state machine.</figcaption></figure><p>Every state machine automatically includes <code>Initial</code> and <code>Final</code> states. The <code>Initial</code> state is where new saga instances begin, and the <code>Final</code> state marks the end of a saga&#39;s lifecycle.</p><h3 id="defining-the-saga-instance" tabindex="-1"><a class="header-anchor" href="#defining-the-saga-instance"><span>Defining the Saga Instance</span></a></h3><p>The saga instance holds the data for a specific process:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderState</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SagaStateMachineInstance</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> CorrelationId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> CurrentState <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Business data</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> OrderTotal <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> PaymentIntentId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime<span class="token punctuation">?</span></span> OrderDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> CustomerEmail <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>CorrelationId</code> uniquely identifies the saga instance, while <code>CurrentState</code> tracks its current state. Any additional properties store business data needed for the process.</p><h3 id="defining-events" tabindex="-1"><a class="header-anchor" href="#defining-events"><span>Defining Events</span></a></h3><p>Events are messages that can trigger state transitions. They must be correlated to a specific saga instance:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">OrderSubmitted</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Total <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Email <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">PaymentProcessed</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> PaymentIntentId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">InventoryReserved</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">OrderFailed</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Reason <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="building-the-state-machine" tabindex="-1"><a class="header-anchor" href="#building-the-state-machine"><span>Building the State Machine</span></a></h3><p>Let&#39;s implement the order processing flow as a state machine:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderStateMachine</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MassTransitStateMachine<span class="token punctuation">&lt;</span>OrderState<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">OrderStateMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">Event</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> OrderSubmitted<span class="token punctuation">,</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">CorrelateById</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>OrderId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">Event</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> PaymentProcessed<span class="token punctuation">,</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">CorrelateById</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>OrderId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">Event</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> InventoryReserved<span class="token punctuation">,</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">CorrelateById</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>OrderId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">Event</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> OrderFailed<span class="token punctuation">,</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">CorrelateById</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>OrderId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">InstanceState</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>CurrentState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">Initially</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token function">When</span><span class="token punctuation">(</span>OrderSubmitted<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">Then</span><span class="token punctuation">(</span>context <span class="token operator">=&gt;</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    context<span class="token punctuation">.</span>Saga<span class="token punctuation">.</span>OrderTotal <span class="token operator">=</span> context<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>Total<span class="token punctuation">;</span></span>
<span class="line">                    context<span class="token punctuation">.</span>Saga<span class="token punctuation">.</span>CustomerEmail <span class="token operator">=</span> context<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>Email<span class="token punctuation">;</span></span>
<span class="line">                    context<span class="token punctuation">.</span>Saga<span class="token punctuation">.</span>OrderDate <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">PublishAsync</span><span class="token punctuation">(</span>context <span class="token operator">=&gt;</span> context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Init</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ProcessPayment<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    OrderId <span class="token operator">=</span> context<span class="token punctuation">.</span>Saga<span class="token punctuation">.</span>CorrelationId<span class="token punctuation">,</span></span>
<span class="line">                    Amount <span class="token operator">=</span> context<span class="token punctuation">.</span>Saga<span class="token punctuation">.</span>OrderTotal</span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">TransitionTo</span><span class="token punctuation">(</span>ProcessingPayment<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">During</span><span class="token punctuation">(</span>ProcessingPayment<span class="token punctuation">,</span></span>
<span class="line">            <span class="token function">When</span><span class="token punctuation">(</span>PaymentProcessed<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">PublishAsync</span><span class="token punctuation">(</span>context <span class="token operator">=&gt;</span> context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Init</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ReserveInventory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    OrderId <span class="token operator">=</span> context<span class="token punctuation">.</span>Saga<span class="token punctuation">.</span>CorrelationId</span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">TransitionTo</span><span class="token punctuation">(</span>ReservingInventory<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token function">When</span><span class="token punctuation">(</span>OrderFailed<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">TransitionTo</span><span class="token punctuation">(</span>Failed<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">During</span><span class="token punctuation">(</span>ReservingInventory<span class="token punctuation">,</span></span>
<span class="line">            <span class="token function">When</span><span class="token punctuation">(</span>InventoryReserved<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">PublishAsync</span><span class="token punctuation">(</span>context <span class="token operator">=&gt;</span> context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Init</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrderConfirmed<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    OrderId <span class="token operator">=</span> context<span class="token punctuation">.</span>Saga<span class="token punctuation">.</span>CorrelationId</span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">TransitionTo</span><span class="token punctuation">(</span>Completed<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token function">When</span><span class="token punctuation">(</span>OrderFailed<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">PublishAsync</span><span class="token punctuation">(</span>context <span class="token operator">=&gt;</span> context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Init</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RefundPayment<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    OrderId <span class="token operator">=</span> context<span class="token punctuation">.</span>Saga<span class="token punctuation">.</span>CorrelationId<span class="token punctuation">,</span></span>
<span class="line">                    Amount <span class="token operator">=</span> context<span class="token punctuation">.</span>Saga<span class="token punctuation">.</span>OrderTotal</span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">TransitionTo</span><span class="token punctuation">(</span>Failed<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">Finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">SetCompletedWhenFinalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">State</span> ProcessingPayment <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">State</span> ReservingInventory <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">State</span> Completed <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">State</span> Failed <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Event<span class="token punctuation">&lt;</span>OrderSubmitted<span class="token punctuation">&gt;</span></span> OrderSubmitted <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Event<span class="token punctuation">&lt;</span>PaymentProcessed<span class="token punctuation">&gt;</span></span> PaymentProcessed <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Event<span class="token punctuation">&lt;</span>InventoryReserved<span class="token punctuation">&gt;</span></span> InventoryReserved <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Event<span class="token punctuation">&lt;</span>OrderFailed<span class="token punctuation">&gt;</span></span> OrderFailed <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The state machine defines the possible states and transitions. Each step can trigger compensating actions if needed. For example, if inventory reservation fails, we automatically trigger a payment refund.</p><h3 id="implementing-message-consumers" tabindex="-1"><a class="header-anchor" href="#implementing-message-consumers"><span>Implementing Message Consumers</span></a></h3><p>Services interact with the saga by consuming and publishing messages. Here&#39;s an example of a payment processing consumer:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProcessPaymentConsumer</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">IPaymentService</span> paymentService<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>ProcessPaymentConsumer<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span> <span class="token punctuation">:</span> IConsumer<span class="token operator">&lt;</span>ProcessPayment<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Consume</span><span class="token punctuation">(</span><span class="token class-name">ConsumeContext<span class="token punctuation">&lt;</span>ProcessPayment<span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> paymentResult <span class="token operator">=</span> <span class="token keyword">await</span> paymentService<span class="token punctuation">.</span><span class="token function">ProcessPaymentAsync</span><span class="token punctuation">(</span></span>
<span class="line">                context<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>OrderId<span class="token punctuation">,</span></span>
<span class="line">                context<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>Amount</span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>paymentResult<span class="token punctuation">.</span>Succeeded<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Publish</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>PaymentProcessed<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    OrderId <span class="token operator">=</span> context<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>OrderId<span class="token punctuation">,</span></span>
<span class="line">                    PaymentIntentId <span class="token operator">=</span> paymentResult<span class="token punctuation">.</span>PaymentIntentId</span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">else</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Publish</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrderFailed<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    OrderId <span class="token operator">=</span> context<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>OrderId<span class="token punctuation">,</span></span>
<span class="line">                    Reason <span class="token operator">=</span> paymentResult<span class="token punctuation">.</span>FailureReason</span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span></span>
<span class="line">                ex<span class="token punctuation">,</span></span>
<span class="line">                <span class="token string">&quot;Failed to process payment for order {OrderId}&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                context<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>OrderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Publish</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrderFailed<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                OrderId <span class="token operator">=</span> context<span class="token punctuation">.</span>Message<span class="token punctuation">.</span>OrderId<span class="token punctuation">,</span></span>
<span class="line">                Reason <span class="token operator">=</span> <span class="token string">&quot;Payment processing error&quot;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each consumer handles a specific part of the business process and communicates back to the saga through events. This separation of concerns allows each service to focus on its specific responsibility while the saga coordinates the overall process.</p><hr><h2 id="configuring-masstransit-with-postgresql-persistence" tabindex="-1"><a class="header-anchor" href="#configuring-masstransit-with-postgresql-persistence"><span>Configuring MassTransit with PostgreSQL Persistence</span></a></h2><p>To persist the saga state, we&#39;ll use PostgreSQL. First, let&#39;s install the required packages:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> MassTransit<span class="token punctuation">.</span>EntityFrameworkCore</span>
<span class="line"><span class="token function">Install-Package</span> Npgsql<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>PostgreSQL</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Create a <code>DbContext</code> for saga persistence:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderSagaDbContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SagaDbContext</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">OrderSagaDbContext</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptions</span> options<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>ISagaClassMap<span class="token punctuation">&gt;</span></span> Configurations</span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">get</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderStateMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderStateMap</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SagaClassMap<span class="token punctuation">&lt;</span>OrderState<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">EntityTypeBuilder<span class="token punctuation">&lt;</span>OrderState<span class="token punctuation">&gt;</span></span> entity<span class="token punctuation">,</span> <span class="token class-name">ModelBuilder</span> model<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        entity<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>CurrentState<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasMaxLength</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        entity<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>CustomerEmail<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasMaxLength</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        entity<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>PaymentIntentId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasMaxLength</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Configure MassTransit in your application:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrderSagaDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line">    options<span class="token punctuation">.</span><span class="token function">UseNpgsql</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;Postgres&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddMassTransit</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSagaStateMachine</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrderStateMachine<span class="token punctuation">,</span> OrderState<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">EntityFrameworkRepository</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            r<span class="token punctuation">.</span>ConcurrencyMode <span class="token operator">=</span> ConcurrencyMode<span class="token punctuation">.</span>Pessimistic<span class="token punctuation">;</span></span>
<span class="line">            r<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DbContext<span class="token punctuation">,</span> OrderSagaDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            r<span class="token punctuation">.</span><span class="token function">UsePostgres</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    x<span class="token punctuation">.</span><span class="token function">UsingRabbitMq</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        cfg<span class="token punctuation">.</span><span class="token function">Host</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;RabbitMQ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        cfg<span class="token punctuation">.</span><span class="token function">ConfigureEndpoints</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="benefits-of-this-approach" tabindex="-1"><a class="header-anchor" href="#benefits-of-this-approach"><span>Benefits of This Approach</span></a></h2><p>Using sagas with MassTransit provides several advantages:</p><ol><li><strong>Fault Tolerance</strong>: Each step can be retried independently. And we can compensate failed operation, making our system more resilient.</li><li><strong>State Visibility</strong>: The saga&#39;s state machine provides clear insight into where each process stands, making debugging and monitoring straightforward.</li><li><strong>Loose Coupling</strong>: Services communicate through messages, allowing them to evolve independently while maintaining process integrity.</li><li><strong>Maintainability</strong>: Changes can be made to individual steps without affecting others.</li></ol><p>The state machine approach also makes the business process explicit. Each state and transition is clearly defined, making it easier to understand and maintain the workflow.</p><hr><h2 id="takeaway" tabindex="-1"><a class="header-anchor" href="#takeaway"><span>Takeaway</span></a></h2><p>The Saga pattern with MassTransit provides a robust solution for managing distributed business processes. Instead of dealing with distributed transactions, you get clear state management, automatic compensation for failures, and the ability to handle long-running operations without blocking resources.</p>`,35)),s("p",null,[n[16]||(n[16]=a("Want to dive deeper into event-driven architecture and distributed systems? Check out my ")),t(r,{to:"/milanjovanovic.tech/modular-monolith-architecture/"},{default:e(()=>n[15]||(n[15]=[a("Modular Monolith Architecture")])),_:1,__:[15]}),n[17]||(n[17]=a(" course, where we explore sagas, event-driven patterns, and other essential techniques for building maintainable systems."))]),n[28]||(n[28]=s("p",null,"Good luck out there, and see you next week.",-1)),s("div",P,[n[23]||(n[23]=s("p",{class:"hint-container-title"},"P.S.",-1)),s("p",null,[n[21]||(n[21]=a("You can find the code for the saga pattern implementation with MassTransit in ")),s("a",M,[n[18]||(n[18]=a("this repository (")),t(d,{icon:"iconfont icon-github"}),n[19]||(n[19]=s("code",null,"m-jovanovic/saga-pattern-masstransit",-1)),n[20]||(n[20]=a(")"))]),n[22]||(n[22]=a("."))]),t(u,{name:"m-jovanovic/saga-pattern-masstransit",desc:"Saga pattern implementation using MassTransit state machine approach. RabbitMQ. PostgreSQL.",url:"https://github.com/m-jovanovic/saga-pattern-masstransit/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/368e71bc46a93e72416231cc7f474318a3679ee7c1b9797b1cd43fc085bf99b2/m-jovanovic/saga-pattern-masstransit"})]),n[29]||(n[29]=s("hr",null,null,-1)),h(" TODO: add ARTICLE CARD "),t(o,c(l({title:"Implementing the Saga Pattern With MassTransit",desc:"Long-running business processes often require multiple services working together, but traditional distributed transactions can be problematic at scale. Learn how to implement the Saga pattern using MassTransit to break complex workflows into manageable steps with proper error handling and state management.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/implementing-the-saga-pattern-with-masstransit.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const E=v(w,[["render",T]]),A=JSON.parse('{"path":"/milanjovanovic.tech/implementing-the-saga-pattern-with-masstransit.html","title":"Implementing the Saga Pattern With MassTransit","lang":"en-US","frontmatter":{"lang":"en-US","title":"Implementing the Saga Pattern With MassTransit","description":"Article(s) > Implementing the Saga Pattern With MassTransit","icon":"iconfont icon-csharp","category":["C#","DotNet","PostgreSQL","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet","postgres","postgresql"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Implementing the Saga Pattern With MassTransit\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_118/order_flow.png?imwidth=1200\\",\\"https://milanjovanovic.tech/blogs/mnw_118/order_saga_state_machine.png?imwidth=1200\\"],\\"datePublished\\":\\"2024-11-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/implementing-the-saga-pattern-with-masstransit.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Implementing the Saga Pattern With MassTransit"}],["meta",{"property":"og:description","content":"Article(s) > Implementing the Saga Pattern With MassTransit"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_118.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_118.png"}],["meta",{"name":"twitter:image:alt","content":"Implementing the Saga Pattern With MassTransit"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"postgresql"}],["meta",{"property":"article:tag","content":"postgres"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-30T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Implementing the Saga Pattern With MassTransit"},{"property":"og:description","content":"Implementing the Saga Pattern With MassTransit"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/implementing-the-saga-pattern-with-masstransit.html"}]],"prev":"/programming/cs/articles/README.md","date":"2024-11-30T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_118.png"},"git":{},"readingTime":{"minutes":4.98,"words":1495},"filePathRelative":"milanjovanovic.tech/implementing-the-saga-pattern-with-masstransit.md","copyright":{"author":"Milan Jovanović"}}');export{E as comp,A as data};
