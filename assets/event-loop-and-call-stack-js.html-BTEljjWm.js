import{_ as f}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as w,d as n,f as t,b as p,a as u,t as y,n as g,g as h,w as e,e as a,r as c,o as x}from"./app-BVguHYKu.js";const T="/bookshelf/assets/image/blog.logrocket.com/event-loop-and-call-stack-js/banner.png",j="/bookshelf/assets/image/blog.logrocket.com/event-loop-and-call-stack-js/1_call-stack-LIFO.jpeg",A="/bookshelf/assets/image/blog.logrocket.com/event-loop-and-call-stack-js/2_non-blocking-execution.png",S="/bookshelf/assets/image/blog.logrocket.com/event-loop-and-call-stack-js/3_prioritizing-microtask-queue.png",q={},I={id:"frontmatter-title-관련",tabindex:"-1"},P={class:"header-anchor",href:"#frontmatter-title-관련"},W={class:"table-of-contents"},J={href:"https://developer.mozilla.org/en-US/docs/Web/API",target:"_blank",rel:"noopener noreferrer"},E={href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers",target:"_blank",rel:"noopener noreferrer"};function O(v,s){const d=c("VPCard"),i=c("router-link"),b=c("SiteInfo"),r=c("RouteLink"),k=c("Tabs"),m=c("VPIcon");return x(),w("div",null,[n("h1",I,[n("a",P,[n("span",null,y(v.$frontmatter.title)+" 관련",1)])]),t(d,g(h({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",W,[n("ul",null,[n("li",null,[t(i,{to:"#the-call-stack-javascript-s-execution-coordinator"},{default:e(()=>s[0]||(s[0]=[a("The call stack: JavaScript’s execution coordinator")])),_:1,__:[0]}),n("ul",null,[n("li",null,[t(i,{to:"#what-is-the-call-stack"},{default:e(()=>s[1]||(s[1]=[a("What is the call stack?")])),_:1,__:[1]})]),n("li",null,[t(i,{to:"#the-single-threaded-dilemma"},{default:e(()=>s[2]||(s[2]=[a("The single-threaded dilemma")])),_:1,__:[2]})])])]),n("li",null,[t(i,{to:"#web-apis-task-queue-extending-javascript-s-capabilities"},{default:e(()=>s[3]||(s[3]=[a("Web APIs & task queue: Extending JavaScript’s capabilities")])),_:1,__:[3]}),n("ul",null,[n("li",null,[t(i,{to:"#the-role-of-web-apis"},{default:e(()=>s[4]||(s[4]=[a("The role of Web APIs")])),_:1,__:[4]})]),n("li",null,[t(i,{to:"#how-web-apis-and-the-task-queue-work-together"},{default:e(()=>s[5]||(s[5]=[a("How Web APIs and the task queue work together")])),_:1,__:[5]})])])]),n("li",null,[t(i,{to:"#microtask-queue-and-event-loop-prioritizing-promises"},{default:e(()=>s[6]||(s[6]=[a("Microtask queue and event loop: Prioritizing promises")])),_:1,__:[6]}),n("ul",null,[n("li",null,[t(i,{to:"#what-is-the-microtask-queue"},{default:e(()=>s[7]||(s[7]=[a("What is the microtask queue?")])),_:1,__:[7]})]),n("li",null,[t(i,{to:"#a-common-caveat-with-microtasks"},{default:e(()=>s[8]||(s[8]=[a("A common caveat with microtasks")])),_:1,__:[8]})]),n("li",null,[t(i,{to:"#async-awaitand-microtasks"},{default:e(()=>s[9]||(s[9]=[a("async/awaitand microtasks")])),_:1,__:[9]})])])]),n("li",null,[t(i,{to:"#web-workers-offloading-heavy-tasks"},{default:e(()=>s[10]||(s[10]=[a("Web Workers: Offloading heavy tasks")])),_:1,__:[10]}),n("ul",null,[n("li",null,[t(i,{to:"#how-web-workers-operate"},{default:e(()=>s[11]||(s[11]=[a("How Web Workers operate")])),_:1,__:[11]})])])]),n("li",null,[t(i,{to:"#conclusion"},{default:e(()=>s[12]||(s[12]=[a("Conclusion")])),_:1,__:[12]})])])]),s[53]||(s[53]=n("hr",null,null,-1)),t(b,{name:"What are the event loop and call stack in JavaScript?",desc:"Explore the inner workings of the event loop and call stack in JavaScript, which help JS handle asynchronous operations.",url:"https://blog.logrocket.com/event-loop-and-call-stack-js",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/event-loop-and-call-stack-js/banner.png"}),s[54]||(s[54]=n("p",null,"JavaScript’s reputation as a single-threaded language often raises eyebrows. How can it handle asynchronous operations like network requests or timers without freezing the application?",-1)),s[55]||(s[55]=n("figure",null,[n("img",{src:T,alt:"what are the event loop and call stack in JavaScript",tabindex:"0",loading:"lazy"}),n("figcaption",null,"what are the event loop and call stack in JavaScript")],-1)),s[56]||(s[56]=n("p",null,"The answer lies in its runtime architecture, which includes the call stack, Web APIs, task queues (including the microtask queue), and the event loop.",-1)),n("p",null,[s[14]||(s[14]=a("This article will discuss how ")),t(r,{to:"/blog.logrocket.com/six-things-you-may-not-know-about-javascript.html"},{default:e(()=>s[13]||(s[13]=[n("strong",null,"JavaScript",-1)])),_:1,__:[13]}),s[15]||(s[15]=a(" achieves this seemingly paradoxical feat. We’ll explore the interworking between the call stack, event loop, and various queues that make it all possible while maintaining its single-threaded nature."))]),s[57]||(s[57]=p(`<hr><h2 id="the-call-stack-javascript-s-execution-coordinator" tabindex="-1"><a class="header-anchor" href="#the-call-stack-javascript-s-execution-coordinator"><span>The call stack: JavaScript’s execution coordinator</span></a></h2><p>JavaScript’s single-threaded nature means it can only execute one task at a time. But how does it keep track of what’s running, what’s next, and where to resume after an interruption? This is where the call stack comes into play.</p><h3 id="what-is-the-call-stack" tabindex="-1"><a class="header-anchor" href="#what-is-the-call-stack"><span>What is the call stack?</span></a></h3><p>The call stack is a data structure that records the execution context of your program. Think of it as a to-do list for JavaScript’s engine.</p><p>Here’s how it operates:</p><ul><li><strong>Last-In-First-Out (LIFO)</strong> — Functions are added to the top of the stack and removed from the top once completed</li><li><strong>Execution context</strong> — Each function call creates a new context (e.g., variables, arguments) that’s pushed onto the stack</li></ul><p>Let’s see how the call stack works by dissecting and following the execution path of the simple script below:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">logThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>‘Three’<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">Function <span class="token function">logThreeAndFour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">logThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// step 3</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>‘Four’<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// step 4</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>‘One’<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// step 1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>‘Two’<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// step 2</span></span>
<span class="line"><span class="token function">logThreeAndFour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// step 3-4</span></span>
<span class="line"><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this walkthrough:</p><ul><li><strong>Stack</strong> — Represents the current functions waiting to be executed, with the most recently added function at the top</li><li><strong>Action</strong> — Describes what the JavaScript engine actually does at each step, including executing functions and removing them from the stack</li></ul><p>Here’s how the call stack processes the above script:</p>`,12)),t(k,{data:[{id:"Step 1"},{id:"Step 2"},{id:"Step 3"},{id:"Step 4"}],active:0},{title0:e(({value:o,isActive:l})=>s[16]||(s[16]=[a("Step 1")])),title1:e(({value:o,isActive:l})=>s[17]||(s[17]=[a("Step 2")])),title2:e(({value:o,isActive:l})=>s[18]||(s[18]=[a("Step 3")])),title3:e(({value:o,isActive:l})=>s[19]||(s[19]=[a("Step 4")])),tab0:e(({value:o,isActive:l})=>s[20]||(s[20]=[n("p",null,[n("code",null,"console.log('One')"),a(" is pushed onto the stack:")],-1),n("ul",null,[n("li",null,[n("strong",null,"Stack"),a(" — "),n("code",null,"[main(), console.log('One')]")]),n("li",null,[n("strong",null,"Action"),a(" — Executes — "),n("code",null,"'One'"),a(", pops off the stack")])],-1)])),tab1:e(({value:o,isActive:l})=>s[21]||(s[21]=[n("p",null,[n("code",null,"console.log('Two')"),a(" is pushed:")],-1),n("ul",null,[n("li",null,[n("strong",null,"Stack"),a(" — "),n("code",null,"[main(), console.log('Two')]")]),n("li",null,[n("strong",null,"Action"),a(" — Executes "),n("code",null,"'Two'"),a(", pops off")])],-1)])),tab2:e(({value:o,isActive:l})=>s[22]||(s[22]=[n("p",null,[n("code",null,"logThreeAndFour()"),a(" is invoked:")],-1),n("ul",null,[n("li",null,[n("strong",null,"Stack"),a(" — "),n("code",null,"[main(), logThreeAndFour()]")]),n("li",null,[n("strong",null,"Action"),a(" — Inside "),n("code",null,"logThreeAndFour(), logThree()"),a(" is called "),n("ul",null,[n("li",null,[n("strong",null,"Stack"),a(" — "),n("code",null,"[main(), logThreeAndFour(), logThree()]")]),n("li",null,[n("strong",null,"Action"),a(" — "),n("code",null,"logThree()"),a(" calls "),n("code",null,"console.log('Three')"),n("ul",null,[n("li",null,[n("strong",null,"Stack"),a(" — "),n("code",null,"[main(), logThreeAndFour(), logThree(), console.log('Three')]")]),n("li",null,[n("strong",null,"Action"),a(" — Executes "),n("code",null,"'Three'"),a(", pops off")])])]),n("li",null,[n("strong",null,"Stack"),a(" — "),n("code",null,"[main(), logThreeAndFour(), logThree()]"),a(" → "),n("code",null,"logThree()"),a(" pops off")])])])],-1)])),tab3:e(({value:o,isActive:l})=>s[23]||(s[23]=[n("p",null,[n("code",null,"console.log('Four')"),a(" is pushed")],-1),n("ul",null,[n("li",null,[n("strong",null,"Stack"),a(" — "),n("code",null,"[main(), logThreeAndFour(), console.log('Four')]")]),n("li",null,[n("strong",null,"Action"),a(" — Executes "),n("code",null,"'Four'"),a(", pops off")]),n("li",null,[n("strong",null,"Stack"),a(" —"),n("code",null,"[main(), logThreeAndFour()]"),a(" → "),n("code",null,"logThreeAndFour()"),a(" pops off")])],-1)])),_:1}),s[58]||(s[58]=n("p",null,"Finally, the stack is empty, and the program exits:",-1)),s[59]||(s[59]=n("figure",null,[n("img",{src:j,alt:"call stack’s LIFO structure ensures nested functions resolve before outer ones",tabindex:"0",loading:"lazy"}),n("figcaption",null,"call stack’s LIFO structure ensures nested functions resolve before outer ones")],-1)),u(" TODO: mermaid로 작성 "),s[60]||(s[60]=p(`<h3 id="the-single-threaded-dilemma" tabindex="-1"><a class="header-anchor" href="#the-single-threaded-dilemma"><span>The single-threaded dilemma</span></a></h3><p>Since JavaScript has only one call stack, blocking operations (e.g., CPU-heavy loops) freeze the entire application:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">longRunningTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Simulate a 3-second delay</span></span>
<span class="line">  <span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;</span> <span class="token number">3000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// Blocks the stack</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Task done!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">longRunningTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Freezes the UI for 3 seconds</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;This waits...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Executes after the loop</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This limitation is why JavaScript relies on asynchronous operations (e.g., <code>setTimeout</code>, <code>fetch</code>) handled by browser APIs outside the call stack.</p><hr><h2 id="web-apis-task-queue-extending-javascript-s-capabilities" tabindex="-1"><a class="header-anchor" href="#web-apis-task-queue-extending-javascript-s-capabilities"><span>Web APIs &amp; task queue: Extending JavaScript’s capabilities</span></a></h2><p>While the call stack manages synchronous execution, JavaScript’s true power lies in its ability to handle asynchronous operations without blocking the main thread. This is made possible by Web APIs and the task queue, which work in tandem with the event loop to offload and schedule non-blocking tasks.</p><h3 id="the-role-of-web-apis" tabindex="-1"><a class="header-anchor" href="#the-role-of-web-apis"><span>The role of Web APIs</span></a></h3>`,8)),n("p",null,[n("a",J,[t(m,{icon:"fa-brands fa-firefox"}),s[24]||(s[24]=a("Web APIs"))]),s[25]||(s[25]=a(" are browser-provided interfaces that handle tasks outside JavaScript’s core runtime. They include:"))]),s[61]||(s[61]=p(`<ul><li><strong>Timers</strong> — <code>setTimeout</code>, <code>setInterval</code></li><li><strong>Network requests</strong>— <code>fetch</code>, <code>XMLHttpRequest</code></li><li><strong>DOM manipulation</strong> — <code>addEventListener</code>, <code>click</code>, <code>scroll</code></li><li><strong>Device APIs</strong> — Geolocation, Camera, Notifications</li></ul><p>These APIs allow JavaScript to delegate time-consuming operations to the browser’s multi-threaded environment, freeing the call stack to process other tasks.</p><h3 id="how-web-apis-and-the-task-queue-work-together" tabindex="-1"><a class="header-anchor" href="#how-web-apis-and-the-task-queue-work-together"><span>How Web APIs and the task queue work together</span></a></h3><p>Let’s break down a <code>setTimeout</code> example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Timeout callback&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;End&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here’s the execution flow of the above snippet:</p>`,6)),t(k,{data:[{id:"1. Call stack"},{id:"2. Browser background"},{id:"3. Task queue"},{id:"4. Event loop"}],active:0},{title0:e(({value:o,isActive:l})=>s[26]||(s[26]=[a("1. Call stack")])),title1:e(({value:o,isActive:l})=>s[27]||(s[27]=[a("2. Browser background")])),title2:e(({value:o,isActive:l})=>s[28]||(s[28]=[a("3. Task queue")])),title3:e(({value:o,isActive:l})=>s[29]||(s[29]=[a("4. Event loop")])),tab0:e(({value:o,isActive:l})=>s[30]||(s[30]=[n("ul",null,[n("li",null,[n("code",null,"console.log('Start')"),a(" executes and pops off")]),n("li",null,[n("code",null,"setTimeout()"),a(" registers the callback with the browser’s timer API and pops off")]),n("li",null,[n("code",null,"console.log('End')"),a(" executes and pops off")])],-1)])),tab1:e(({value:o,isActive:l})=>s[31]||(s[31]=[n("ul",null,[n("li",null,"The timer API counts 1,000ms")],-1)])),tab2:e(({value:o,isActive:l})=>s[32]||(s[32]=[n("ul",null,[n("li",null,[a("After the timer expires, the callback "),n("code",null,"() => { console.log(...) }"),a(" is added to the task queue")])],-1)])),tab3:e(({value:o,isActive:l})=>[s[33]||(s[33]=n("ul",null,[n("li",null,"Once the call stack is empty, the event loop moves the callback from the task queue to the stack"),n("li",null,[n("code",null,"console.log('Timeout callback')"),a(" executes:")])],-1)),s[34]||(s[34]=n("div",{class:"language-plaintext line-numbers-mode","data-highlighter":"prismjs","data-ext":"plaintext"},[n("pre",null,[n("code",{class:"language-plaintext"},[n("span",{class:"line"},"Start"),a(`
`),n("span",{class:"line"},"End"),a(`
`),n("span",{class:"line"},"Timeout callback"),a(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)),s[35]||(s[35]=n("figure",null,[n("img",{src:A,alt:"non-blocking execution using Web APIs and the task queue",tabindex:"0",loading:"lazy"}),n("figcaption",null,"non-blocking execution using Web APIs and the task queue")],-1)),u(" TODO: mermaid로 작성 ")]),_:1}),s[62]||(s[62]=n("p",null,[a("Note that timer delays are minimum guarantees, meaning a "),n("code",null,"setTimeout(callback, 1000)"),a(" callback might execute "),n("em",null,"after"),a(" 1,000ms, but never before. If the call stack is busy (e.g., with a long-running loop), the callback waits in the task queue.")],-1)),n("p",null,[s[37]||(s[37]=a("Let’s see another example using the ")),t(r,{to:"/blog.logrocket.com/what-you-need-know-while-using-geolocation-api.html"},{default:e(()=>s[36]||(s[36]=[n("strong",null,"Geolocation API",-1)])),_:1,__:[36]}),s[38]||(s[38]=a(":"))]),s[63]||(s[63]=p(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Requesting location...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">navigator<span class="token punctuation">.</span>geolocation<span class="token punctuation">.</span><span class="token function">getCurrentPosition</span><span class="token punctuation">(</span>  </span>
<span class="line">  <span class="token punctuation">(</span><span class="token parameter">position</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// Success callback  </span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>     <span class="token comment">// Error callback  </span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Waiting for user permission...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above snippet, <code>getCurrentPosition</code> registers the callbacks with the browser’s geolocation API. Then the browser handles permission prompts and GPS data fetching. Once the user responds, the relevant callback joins the task queue. This allows the event loop to transfer it to the call stack when idle:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">Requesting location...  </span>
<span class="line">Waiting for user permission...  </span>
<span class="line">{ coords: ... } // After user grants permission  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Without Web APIs and the task queue, the call stack would freeze during network requests, timers, or user interactions.</p><hr><h2 id="microtask-queue-and-event-loop-prioritizing-promises" tabindex="-1"><a class="header-anchor" href="#microtask-queue-and-event-loop-prioritizing-promises"><span>Microtask queue and event loop: Prioritizing promises</span></a></h2>`,6)),n("p",null,[s[40]||(s[40]=a("While the task queue handles callback-based APIs like ")),t(r,{to:"/blog.logrocket.com/using-settimeout-timer-apis-node-js.html"},{default:e(()=>s[39]||(s[39]=[n("code",null,"setTimeout",-1)])),_:1,__:[39]}),s[41]||(s[41]=a(", JavaScript’s modern asynchronous features (promises, ")),s[42]||(s[42]=n("code",null,"async/await",-1)),s[43]||(s[43]=a(") rely on the microtask queue. Understanding how the event loop prioritizes this queue is key to mastering JavaScript’s execution order."))]),s[64]||(s[64]=p(`<h3 id="what-is-the-microtask-queue" tabindex="-1"><a class="header-anchor" href="#what-is-the-microtask-queue"><span>What is the microtask queue?</span></a></h3><p>The microtask queue is a dedicated queue for:</p><ul><li><strong>Promise reactions</strong> — <code>.then()</code>, <code>.catch()</code>, <code>.finally()</code> handlers</li><li><code>queueMicrotask()</code> — Explicitly adds a function to the microtask queue</li><li><code>**async/await**</code> — A function call after <code>await</code> is queued as a microtask</li><li><strong>MutationObserver callbacks</strong> — Used to track DOM changes</li></ul><p>Unlike the task queue, the microtask queue has higher priority. The event loop processes all microtasks before moving to tasks.</p><p>The event loop follows a strict sequence of workflow. It executes all tasks in the call stack, drains the microtask queue completely, renders UI updates (if any), and then processes one task from the task queue before repeating the entire process again, continuously. This ensures promise-based code runs as soon as possible, even if tasks are scheduled earlier.</p><p>Let’s see an example of microtasks vs tasks queues:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Task (setTimeout)</span></span>
<span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Timeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Microtask (Promise)</span></span>
<span class="line">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Promise&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;End&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This produces the following output:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">Start  </span>
<span class="line">End  </span>
<span class="line">Promise  </span>
<span class="line">Timeout  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+S+'" alt="Event loop prioritizes the microtask queue entirely before touching the task queue" tabindex="0" loading="lazy"><figcaption>Event loop prioritizes the microtask queue entirely before touching the task queue</figcaption></figure>',10)),u(" TODO: mermaid로 작성 "),s[65]||(s[65]=p(`<p>The breakdown execution follows the following sequence:</p><ol><li><code>console.log(&#39;Start&#39;)</code> executes</li><li><code>setTimeout</code> schedules its callback in the task queue</li><li><code>Promise.resolve().then()</code> schedules its callback in the microtask queue</li><li><code>console.log(&#39;End&#39;)</code> executes</li><li>Event Loop: <ul><li>Call stack is empty → process microtasks</li><li><code>Promise</code> logs</li><li>Microtask queue is empty → process next task</li><li><code>Timeout</code> logs</li></ul></li></ol><h3 id="a-common-caveat-with-microtasks" tabindex="-1"><a class="header-anchor" href="#a-common-caveat-with-microtasks"><span>A common caveat with microtasks</span></a></h3><p>Before continuing, it is worth mentioning a caveat that exists with microtasks. This has to do with nested microtasks; microtasks can schedule more microtasks, potentially blocking the event loop like below:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">recursiveMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Microtask!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">recursiveMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Infinite loop</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">recursiveMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above script will hang as the microtask queue is never empty, and the approach to fix this issue is to use <code>setTimeout</code> to defer work to the task queue.</p><h3 id="async-awaitand-microtasks" tabindex="-1"><a class="header-anchor" href="#async-awaitand-microtasks"><span><code>async/await</code>and microtasks</span></a></h3>`,7)),n("p",null,[t(r,{to:"/blog.logrocket.com/async-await-typescript.html"},{default:e(()=>s[44]||(s[44]=[n("strong",null,[n("code",null,"async/await")],-1)])),_:1,__:[44]}),s[45]||(s[45]=a(" syntax is syntactic sugar for promises. Code after ")),s[46]||(s[46]=n("code",null,"await",-1)),s[47]||(s[47]=a(" is wrapped in a microtask:"))]),s[66]||(s[66]=p(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Fetching...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Pauses here</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Data received&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Queued as microtask</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Script continues&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The output is as follows:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">Fetching<span class="token operator">...</span>  </span>
<span class="line">Script continues  </span>
<span class="line">Data received </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="web-workers-offloading-heavy-tasks" tabindex="-1"><a class="header-anchor" href="#web-workers-offloading-heavy-tasks"><span>Web Workers: Offloading heavy tasks</span></a></h2>`,5)),n("p",null,[s[50]||(s[50]=a("JavaScript’s single-threaded model ensures simplicity but struggles with CPU-heavy tasks like image processing, and complex or large dataset calculations. These tasks can freeze the UI, creating a poor user experience. ")),n("a",E,[t(m,{icon:"fa-brands fa-firefox"}),s[48]||(s[48]=a("Web Workers"))]),s[51]||(s[51]=a(" solve this by executing scripts in separate background threads, freeing the main thread to handle ")),t(r,{to:"/blog.logrocket.com/exploring-essential-dom-methods-frontend-development.html"},{default:e(()=>s[49]||(s[49]=[n("strong",null,"the DOM",-1)])),_:1,__:[49]}),s[52]||(s[52]=a(" and user interactions."))]),s[67]||(s[67]=p(`<h3 id="how-web-workers-operate" tabindex="-1"><a class="header-anchor" href="#how-web-workers-operate"><span>How Web Workers operate</span></a></h3><p>Workers run in an isolated environment with their own memory space. They cannot access the DOM or <code>window</code> object, ensuring thread safety. Communication between the main thread and workers happens via message passing, where data is copied (via structured cloning) or transferred (using <code>Transferable</code> objects) to avoid shared memory conflicts.</p><p>The below code block shows a sample of delegating a complex work of processing an image that’s assumed in this scenario to take a lot of computational time to complete. <code>worker.postMessage</code> method sends a message to the worker. It then utilizes the <code>worker.onmessage</code> and <code>worker.onerror</code> to handle the success and error of the background work.</p><p>Here’s the main thread:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Create a worker and send data</span></span>
<span class="line"><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;worker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">task</span><span class="token operator">:</span> <span class="token string">&#39;processImage&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">imageData</span><span class="token operator">:</span> rawPixels <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment">// Listen for results or errors</span></span>
<span class="line">worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">displayProcessedImage</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Handle result</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">worker<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Worker error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Handle failures</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the below code snippet, we utilize the <code>onmessage</code> method to receive the notification to start processing the image. The <code>rawPixel</code> passed down can be accessed on the <code>event</code> object through the <code>data</code> field as below.</p><p>And now we see it from the worker.js viewpoint:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Receive and process data</span></span>
<span class="line">self<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> processedData <span class="token operator">=</span> <span class="token function">heavyComputation</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>imageData<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">  self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>processedData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Return result</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Workers operate in a separate global scope, hence the use of <code>self</code>. Use <code>Transferable</code> objects (e.g., <code>ArrayBuffer</code>) for large data to avoid costly copying, and spawning too many workers can bloat memory; reuse them for recurring tasks.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>JavaScript’s asynchronous prowess lies in its elegant orchestration of the call stack, Web APIs, and the event loop—a system that enables non-blocking execution despite its single-threaded nature. By leveraging the task queue for callback-based operations and prioritizing the microtask queue for promises, JavaScript ensures efficient handling of asynchronous workflows.</p><p>By mastering these concepts, you’ll write code that’s not just functional but predictable and performant, whether you’re handling user interactions, fetching data, or optimizing rendering.</p><p>Experiment with DevTools, embrace asynchronous patterns, and let JavaScript’s event loop work for you—not against you.</p>`,14)),u(" TODO: add ARTICLE CARD "),t(d,g(h({title:"What are the event loop and call stack in JavaScript?",desc:"Explore the inner workings of the event loop and call stack in JavaScript, which help JS handle asynchronous operations.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/event-loop-and-call-stack-js.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const D=f(q,[["render",O]]),C=JSON.parse('{"path":"/blog.logrocket.com/event-loop-and-call-stack-js.html","title":"What are the event loop and call stack in JavaScript?","lang":"en-US","frontmatter":{"lang":"en-US","title":"What are the event loop and call stack in JavaScript?","description":"Article(s) > What are the event loop and call stack in JavaScript?","icon":"fa-brands fa-js","category":["JavaScript","Article(s)"],"tag":["blog","blog.logrocket.com","js","javascript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What are the event loop and call stack in JavaScript?\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/event-loop-and-call-stack-js/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/event-loop-and-call-stack-js/1_call-stack-LIFO.jpeg\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/event-loop-and-call-stack-js/2_non-blocking-execution.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/event-loop-and-call-stack-js/3_prioritizing-microtask-queue.png\\"],\\"datePublished\\":\\"2025-02-18T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ikeh Akinyemi\\",\\"url\\":\\"https://blog.logrocket.com/author/ikehakinyemi/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/event-loop-and-call-stack-js.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"What are the event loop and call stack in JavaScript?"}],["meta",{"property":"og:description","content":"Article(s) > What are the event loop and call stack in JavaScript?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/event-loop-and-call-stack-js/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/event-loop-and-call-stack-js/banner.png"}],["meta",{"name":"twitter:image:alt","content":"What are the event loop and call stack in JavaScript?"}],["meta",{"property":"article:author","content":"Ikeh Akinyemi"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-02-18T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > What are the event loop and call stack in JavaScript?"},{"property":"og:description","content":"What are the event loop and call stack in JavaScript?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/event-loop-and-call-stack-js.html"}]],"prev":"/programming/js/articles/README.md","date":"2025-02-18T00:00:00.000Z","isOriginal":false,"author":[{"name":"Ikeh Akinyemi","url":"https://blog.logrocket.com/author/ikehakinyemi/"}],"cover":"/assets/image/blog.logrocket.com/event-loop-and-call-stack-js/banner.png"},"git":{},"readingTime":{"minutes":6.94,"words":2082},"filePathRelative":"blog.logrocket.com/event-loop-and-call-stack-js.md","copyright":{"author":"Ikeh Akinyemi"}}');export{D as comp,C as data};
