import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as n,f as s,b as u,a as b,t as f,n as i,g as l,w as p,e as t,r,o as y}from"./app-BVguHYKu.js";const w={},k={id:"frontmatter-title-관련",tabindex:"-1"},S={class:"header-anchor",href:"#frontmatter-title-관련"},P={class:"table-of-contents"},q={class:"hint-container info"},D={href:"https://github.com/arackaf/svelte-snippets",target:"_blank",rel:"noopener noreferrer"},x={href:"https://svelte.dev/docs/special-elements#slot",target:"_blank",rel:"noopener noreferrer"},j={class:"hint-container info"};function T(v,e){const a=r("VPCard"),o=r("router-link"),d=r("SiteInfo"),m=r("RouteLink"),c=r("VPIcon");return y(),h("div",null,[n("h1",k,[n("a",S,[n("span",null,f(v.$frontmatter.title)+" 관련",1)])]),s(a,i(l({title:"Svelte.js > Article(s)",desc:"Article(s)",link:"/programming/js-svelte/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",P,[n("ul",null,[n("li",null,[s(o,{to:"#what-are-snippets"},{default:p(()=>e[0]||(e[0]=[t("What are snippets?")])),_:1,__:[0]})]),n("li",null,[s(o,{to:"#defining-snippets"},{default:p(()=>e[1]||(e[1]=[t("Defining snippets")])),_:1,__:[1]}),n("ul",null,[n("li",null,[s(o,{to:"#snippets-can-render-other-snippets"},{default:p(()=>e[2]||(e[2]=[t("Snippets can render other snippets")])),_:1,__:[2]})])])]),n("li",null,[s(o,{to:"#passing-snippets-to-components"},{default:p(()=>e[3]||(e[3]=[t("Passing snippets to components")])),_:1,__:[3]})]),n("li",null,[s(o,{to:"#default-content-with-snippets"},{default:p(()=>e[4]||(e[4]=[t("Default Content with Snippets")])),_:1,__:[4]})]),n("li",null,[s(o,{to:"#parting-thoughts"},{default:p(()=>e[5]||(e[5]=[t("Parting thoughts")])),_:1,__:[5]})])])]),e[21]||(e[21]=n("hr",null,null,-1)),s(d,{name:"Snippets in Svelte 5",desc:"Out with slots, in with snippets.",url:"https://frontendmasters.com/blog/snippets-in-svelte-5",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3341"}),n("p",null,[e[7]||(e[7]=t("This post is the second in a 3-part series on Svelte 5.")),s(m,{to:"/frontendmasters.com/introducing-svelte-5.html"},{default:p(()=>e[6]||(e[6]=[t("Part one")])),_:1,__:[6]}),e[8]||(e[8]=t("was a basic introduction, covering nuts and bolts features like state, props, and effects. This post is all about snippets, an exciting new feature that allows for content reuse, and more importantly, injecting content into components you render."))]),n("div",q,[e[9]||(e[9]=n("p",{class:"hint-container-title"},"Article Series",-1)),s(a,i(l({title:"Introducing Svelte 5",desc:"Svelte 5 introduces significant improvements in reactivity, state management, and prop handling, maintaining its user-friendly Developer Experience (DX). ",link:"/frontendmasters.com/introducing-svelte-5.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),s(a,i(l({title:"Snippets in Svelte 5",desc:"Out with slots, in with snippets.",link:"/frontendmasters.com/snippets-in-svelte-5.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),s(a,i(l({title:"Fine-Grained Reactivity in Svelte 5",desc:"Svelte is already quite lightweight and fast, but Svelte 5 still overs big improvements in fine-grained reactivity, meaning re-rendering as absolutely little as possible. ",link:"/frontendmasters.com/fine-grained-reactivity-in-svelte-5.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)]),n("p",null,[e[13]||(e[13]=t("If you’d like to see and experiment with the code in this post, ")),n("a",D,[e[10]||(e[10]=t("see the GitHub repo (")),s(c,{icon:"iconfont icon-github"}),e[11]||(e[11]=n("code",null,"arackaf/svelte-snippets",-1)),e[12]||(e[12]=t(")"))]),e[14]||(e[14]=t("."))]),s(d,{name:"arackaf/svelte-snippets",desc:"",url:"https://github.com/arackaf/svelte-snippets/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/0b2a9f75163ac2a41051c63d728d55cd9ffd915b09d79cc9e38afbdf96e3445f/arackaf/svelte-snippets"}),e[22]||(e[22]=u(`<hr><h2 id="what-are-snippets" tabindex="-1"><a class="header-anchor" href="#what-are-snippets"><span>What are snippets?</span></a></h2><p>Snippets are a new feature in Svelte 5. They allow you to define, well… snippets of content. They’re<em>almost</em>lightweight components that you can find inside of a component file. Before you get too excited: they do not, as of now, allow you to define multiple components in one file. Snippets cannot be exported from anywhere, and even if they could, they do not allow you to define state. They are limited to props.</p><p>They seem initially similar to React’s minimally useful Stateless Functional Components from back before hooks were a thing. But snippets also have a second use: they allow you to inject content into other components, and in so doing replace one of Svelte’s most awkward features: slots.</p><p>Let’s see how.</p><hr><h2 id="defining-snippets" tabindex="-1"><a class="header-anchor" href="#defining-snippets"><span>Defining snippets</span></a></h2><p>We define snippets with the <code>#snippet</code> directive. The simplest snippet imaginable looks like this:</p><div class="language-svelte line-numbers-mode" data-highlighter="prismjs" data-ext="svelte"><pre><code class="language-svelte"><span class="line">{#snippet helloWorld()}</span>
<span class="line">  &lt;span&gt;Hello World&lt;/span&gt;</span>
<span class="line">{/snippet}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That defines the snippet. To render the snippet, we use the<code>@render</code>directive, like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token punctuation">{</span>@render <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>As you might have guessed, snippets can also receive props, or really, parameters, since snippets are more of a function, than a component. Parameters are listed in the parens, with types if you’re using TypeScript.</p><div class="language-svelte line-numbers-mode" data-highlighter="prismjs" data-ext="svelte"><pre><code class="language-svelte"><span class="line">{#snippet productDisplay(p: Product)}</span>
<span class="line">&lt;div&gt;</span>
<span class="line">  &lt;img src=&quot;{p.url}&quot; alt=&quot;product url&quot; /&gt;</span>
<span class="line">  &lt;div&gt;</span>
<span class="line">    &lt;h2&gt;{p.name}&lt;/h2&gt;</span>
<span class="line">    &lt;span&gt;\${p.price.toFixed(2)}&lt;/span&gt;</span>
<span class="line">  &lt;/div&gt;</span>
<span class="line">&lt;/div&gt;</span>
<span class="line">{/snippet}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="snippets-can-render-other-snippets" tabindex="-1"><a class="header-anchor" href="#snippets-can-render-other-snippets"><span>Snippets can render other snippets</span></a></h3><p>For example, this simple snippet…</p><div class="language-svelte line-numbers-mode" data-highlighter="prismjs" data-ext="svelte"><pre><code class="language-svelte"><span class="line">{#snippet productReview(review: Review)}</span>
<span class="line">&lt;div&gt;</span>
<span class="line">  &lt;span&gt;{review.date}&lt;/span&gt;</span>
<span class="line">  &lt;span&gt;{review.content}&lt;/span&gt;</span>
<span class="line">&lt;/div&gt;</span>
<span class="line">{/snippet}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>… can be used in this bigger snippet:</p><div class="language-svelte line-numbers-mode" data-highlighter="prismjs" data-ext="svelte"><pre><code class="language-svelte"><span class="line">{#snippet productDisplay(p: Product)}</span>
<span class="line">&lt;div&gt;</span>
<span class="line">  &lt;div&gt;</span>
<span class="line">    &lt;img src=&quot;{p.url}&quot; alt=&quot;product url&quot;&gt;</span>
<span class="line">    &lt;div&gt;</span>
<span class="line">      &lt;h2&gt;{p.name}&lt;/h2&gt;</span>
<span class="line">      &lt;span&gt;\${p.price.toFixed(2)}&lt;/span&gt;</span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  &lt;/div&gt;</span>
<span class="line">  &lt;h3&gt;Reviews:&lt;/h3&gt;</span>
<span class="line">  &lt;div&gt;</span>
<span class="line">    {#each p.reviews ?? [] as review}</span>
<span class="line">      {@render productReview(review)}</span>
<span class="line">    {/each}</span>
<span class="line">  &lt;/div&gt;</span>
<span class="line">&lt;/div&gt;</span>
<span class="line">{/snippet}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then you can reuse that <code>productDisplay</code> snippet with different products in your component. Let’s see a minimal, full example:</p><div class="language-svelte line-numbers-mode" data-highlighter="prismjs" data-ext="svelte"><pre><code class="language-svelte"><span class="line">&lt;script lang=&quot;ts&quot;&gt; type Review = {</span>
<span class="line">    date: string;</span>
<span class="line">    content: string;</span>
<span class="line">  };</span>
<span class="line">  type Product = {</span>
<span class="line">    name: string;</span>
<span class="line">    url: string;</span>
<span class="line">    price: number;</span>
<span class="line">    reviews?: Review[];</span>
<span class="line">  };</span>
<span class="line"></span>
<span class="line">  let searchedBook = $state&lt;Product&gt;({</span>
<span class="line">    name: &quot;Effective TypeScript: 83 Specific Ways to Improve Your TypeScript, 2nd Edition&quot;,</span>
<span class="line">    url: &quot;https://m.media-amazon.com/images/I/71eWL4AqPqL._SL1500_.jpg&quot;,</span>
<span class="line">    price: 44.99,</span>
<span class="line">    reviews: [</span>
<span class="line">      { date: &quot;2/14/2024&quot;, content: &quot;Absolutely loved this book&quot; },</span>
<span class="line">      { date: &quot;6/2/2024&quot;, content: &quot;Even better than the first edition&quot; },</span>
<span class="line">    ],</span>
<span class="line">  });</span>
<span class="line">  let relatedProduct = $state&lt;Product&gt;({</span>
<span class="line">    name: &quot;Modern C++ Design: Generic Programming and Design Patterns Applied&quot;,</span>
<span class="line">    url: &quot;https://m.media-amazon.com/images/I/914ncVx1hxL._SL1413_.jpg&quot;,</span>
<span class="line">    price: 55.49,</span>
<span class="line">  });</span>
<span class="line">&lt;/script&gt;</span>
<span class="line"></span>
<span class="line">{#snippet productReview(review: Review)}</span>
<span class="line">&lt;div&gt;</span>
<span class="line">  &lt;span&gt;{review.date}&lt;/span&gt;</span>
<span class="line">  &lt;span&gt;{review.content}&lt;/span&gt;</span>
<span class="line">&lt;/div&gt;</span>
<span class="line">{/snippet}</span>
<span class="line"></span>
<span class="line">{#snippet productDisplay(p: Product)}</span>
<span class="line">&lt;div&gt;</span>
<span class="line">  &lt;div&gt;</span>
<span class="line">    &lt;img src=&quot;{p.url}&quot; alt=&quot;product url&quot; /&gt;</span>
<span class="line">    &lt;div&gt;</span>
<span class="line">      &lt;h2&gt;{p.name}&lt;/h2&gt;</span>
<span class="line">      &lt;span&gt;\${p.price.toFixed(2)}&lt;/span&gt;</span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  &lt;/div&gt;</span>
<span class="line">  &lt;h3&gt;Reviews:&lt;/h3&gt;</span>
<span class="line">  &lt;div&gt;{#each p.reviews ?? [] as review} {@render productReview(review)} {/each}&lt;/div&gt;</span>
<span class="line">&lt;/div&gt;</span>
<span class="line">{/snippet}</span>
<span class="line"></span>
<span class="line">&lt;section&gt;</span>
<span class="line">  &lt;h1&gt;Product Display Page&lt;/h1&gt;</span>
<span class="line"></span>
<span class="line">  {@render productDisplay(searchedBook)}</span>
<span class="line"></span>
<span class="line">  &lt;aside&gt;You might also be interested in:&lt;/aside&gt;</span>
<span class="line"></span>
<span class="line">  {@render productDisplay(relatedProduct)}</span>
<span class="line">&lt;/section&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If that was the extent of Snippets they’d be a marginally useful convenience for re-using small bits of markup within a single component.</p>`,21)),n("p",null,[e[16]||(e[16]=t("But the main benefit of snippets is for ")),e[17]||(e[17]=n("strong",null,"injecting content into components",-1)),e[18]||(e[18]=t(". Previously, if you wanted to pass content into a component you’d use slots. Slots were always an awkward feature of Svelte, but they’re now deprecated in Svelte 5. We won’t cover them here, so check out")),n("a",x,[s(c,{icon:"iconfont icon-svelte"}),e[15]||(e[15]=t("the docs"))]),e[19]||(e[19]=t("if you’re curious."))]),e[23]||(e[23]=u(`<hr><h2 id="passing-snippets-to-components" tabindex="-1"><a class="header-anchor" href="#passing-snippets-to-components"><span>Passing snippets to components</span></a></h2><p>Snippets shine brightest when we pass them into other components. Let’s imagine a (grossly simplified)<code>DisplayProduct</code>page. It takes in a product, an optional related product, and a snippet to display a single product. This component will also render content in the header, which we’ll also pass in as a snippet.</p><div class="language-svelte line-numbers-mode" data-highlighter="prismjs" data-ext="svelte"><pre><code class="language-svelte"><span class="line">&lt;script lang=&quot;ts&quot;&gt; import type { Snippet } from &quot;svelte&quot;;</span>
<span class="line">  import type { Product } from &quot;./types&quot;;</span>
<span class="line"></span>
<span class="line">  type Props = {</span>
<span class="line">    product: Product;</span>
<span class="line">    relatedProduct?: Product;</span>
<span class="line">    productDisplay: Snippet&lt;[Product]&gt;;</span>
<span class="line">    children: Snippet;</span>
<span class="line">  };</span>
<span class="line"></span>
<span class="line">  let { product, relatedProduct, productDisplay, children }: Props = $props(); &lt;/script&gt;</span>
<span class="line"></span>
<span class="line">&lt;section&gt;</span>
<span class="line">  {@render children()}</span>
<span class="line">  {@render productDisplay(product)}</span>
<span class="line">  </span>
<span class="line">  {#if relatedProduct}</span>
<span class="line">    &lt;aside&gt;You might also be interested in:&lt;/aside&gt;</span>
<span class="line">    {@render productDisplay(relatedProduct)}</span>
<span class="line">  {/if}</span>
<span class="line">&lt;/section&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There’s a<code>Snippet</code>type that Svelte exports for us, so we can type the snippets we’re receiving. Specifying the parameters that a snippet receives is a little weird, because of how TypeScript is: we list the argumentes as a Tuple. So our <code>productDisplay</code> snippet will take a single argument that’s a <code>Product</code>.</p><p>The snippet for showing the header I decided to name “children” which has some significance as we’ll see in a moment.</p><p>Let’s put this component to use:</p><div class="language-svelte line-numbers-mode" data-highlighter="prismjs" data-ext="svelte"><pre><code class="language-svelte"><span class="line">{#snippet productDisplay(p: Product)}</span>
<span class="line">&lt;div&gt;</span>
<span class="line">  &lt;img src=&quot;{p.url}&quot; alt=&quot;Image of product&quot;&gt;</span>
<span class="line">  &lt;div&gt;</span>
<span class="line">    &lt;h2&gt;{p.name}&lt;/h2&gt;</span>
<span class="line">    &lt;span&gt;\${p.price.toFixed(2)}&lt;/span&gt;</span>
<span class="line">  &lt;/div&gt;</span>
<span class="line">&lt;/div&gt;</span>
<span class="line">{/snippet}</span>
<span class="line"></span>
<span class="line">&lt;DisplayProduct product=&quot;{searchedBook}&quot; relatedProduct=&quot;{recommendedBook}&quot; {productDisplay}&gt;</span>
<span class="line">  &lt;h1&gt;Product Display Page&lt;/h1&gt;</span>
<span class="line">&lt;/DisplayProduct&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We’re passing the<code>productDisplay</code>snippet in for the<code>productDisplay</code>prop. Little note: Svelte allows you to write <code>{a}</code> instead of <code>a={a}</code> as a convenient shortcut.</p><p>But notice the content we put directly inside of the<code>DisplayProduct</code>tags. If the component has a prop called<code>children</code>that’s a snippet, this content will be passed as that snippet. This is a special case just for props called children (similar to the children prop in React). You don’t<em>have</em>to do this; you’re free to manually pass a<code>children</code>prop, just like we did for<code>productDisplay</code>if you really want to.</p><p>Let’s take a look at one more authoring convenience Svelte 5 gives us. If we’re just defining a snippet to be passed one time, to one component, Svelte lets us clean the syntax up a bit, like so:</p><div class="language-svelte line-numbers-mode" data-highlighter="prismjs" data-ext="svelte"><pre><code class="language-svelte"><span class="line">&lt;DisplayProduct product=&quot;{searchedBook}&quot; relatedProduct=&quot;{recommendedBook}&quot;&gt;</span>
<span class="line">  &lt;h1&gt;Product Display Page&lt;/h1&gt;</span>
<span class="line">  {#snippet productDisplay(p: Product)}</span>
<span class="line">  &lt;div&gt;</span>
<span class="line">    &lt;img src=&quot;{p.url}&quot; alt=&quot;product url&quot; /&gt;</span>
<span class="line">    &lt;div&gt;</span>
<span class="line">      &lt;h2&gt;{p.name}&lt;/h2&gt;</span>
<span class="line">      &lt;span&gt;\${p.price.toFixed(2)}&lt;/span&gt;</span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  &lt;/div&gt;</span>
<span class="line">  {/snippet}</span>
<span class="line">&lt;/DisplayProduct&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As before, we have our<code>&lt;h1&gt;</code>content directly inside of the tags, as children. But we’ve also defined a snippet inside of those tags. This is a nice shorthand for passing a snippet as a prop (with the same name) to our component. Don’t worry, if the name you give this inline snippet doesn’t match a prop, TypeScript will tell you.</p><hr><h2 id="default-content-with-snippets" tabindex="-1"><a class="header-anchor" href="#default-content-with-snippets"><span>Default Content with Snippets</span></a></h2><p>One nice feature with slots is that you could define default content pretty easily.</p><div class="language-svelte line-numbers-mode" data-highlighter="prismjs" data-ext="svelte"><pre><code class="language-svelte"><span class="line">&lt;slot name=&quot;header-content&quot;&gt;</span>
<span class="line">  &lt;span&gt;Default content&lt;/span&gt;</span>
<span class="line">&lt;/slot&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Snippets don’t quite have anything like this built in, but they’re a flexible enough primitive that you really don’t need it.</p><p>Let’s see how we can provide our own default content for when a Snippet is <em>not</em> passed in. As before let’s say we have our<code>DisplayProduct</code>component, except now our <code>productDisplay</code> and <code>children</code> snippets are optional</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">Props</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  product<span class="token operator">:</span> Product<span class="token punctuation">;</span></span>
<span class="line">  relatedProduct<span class="token operator">?</span><span class="token operator">:</span> Product<span class="token punctuation">;</span></span>
<span class="line">  productDisplay<span class="token operator">?</span><span class="token operator">:</span> Snippet<span class="token operator">&lt;</span><span class="token punctuation">[</span>Product<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">  children<span class="token operator">?</span><span class="token operator">:</span> Snippet<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> <span class="token punctuation">{</span> product<span class="token punctuation">,</span> relatedProduct<span class="token punctuation">,</span> productDisplay<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token operator">:</span> Props <span class="token operator">=</span> <span class="token function">$props</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We have a few straightforward options for falling back to our own default content. We can simply test if we have a value for the snippet right in our template, and render the fallback if not.</p><div class="language-svelte line-numbers-mode" data-highlighter="prismjs" data-ext="svelte"><pre><code class="language-svelte"><span class="line">{#if children}</span>
<span class="line">  {@render children()} </span>
<span class="line">{:else}</span>
<span class="line">  &lt;h1&gt;Fallback content&lt;/h1&gt;</span>
<span class="line">{/if}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or, we can set up our fallback right in our script:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">let</span> productDisplaySnippetToUse<span class="token operator">:</span> Snippet<span class="token operator">&lt;</span><span class="token punctuation">[</span>Product<span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=</span> productDisplay <span class="token operator">??</span> productDisplayFallback<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-svelte line-numbers-mode" data-highlighter="prismjs" data-ext="svelte"><pre><code class="language-svelte"><span class="line">{#snippet productDisplayFallback(p: Product)}</span>
<span class="line">&lt;div&gt;</span>
<span class="line">  &lt;img src=&quot;{p.url}&quot; alt=&quot;product url&quot; /&gt;</span>
<span class="line">  &lt;div&gt;</span>
<span class="line">    &lt;h2&gt;{p.name}&lt;/h2&gt;</span>
<span class="line">  &lt;/div&gt;</span>
<span class="line">&lt;/div&gt;</span>
<span class="line">{/snippet}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then we render that:</p><div class="language-svelte line-numbers-mode" data-highlighter="prismjs" data-ext="svelte"><pre><code class="language-svelte"><span class="line">{@render productDisplaySnippetToUse(product)}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="parting-thoughts" tabindex="-1"><a class="header-anchor" href="#parting-thoughts"><span>Parting thoughts</span></a></h2><p>Svelte 5 is an exciting release. This post turned to one of the more interesting new features: snippets, useful for injecting content into components, and for re-using small bits of content within a single component.</p><p>Out with slots, in with snippets.</p>`,31)),n("div",j,[e[20]||(e[20]=n("p",{class:"hint-container-title"},"Article Series",-1)),s(a,i(l({title:"Introducing Svelte 5",desc:"Svelte 5 introduces significant improvements in reactivity, state management, and prop handling, maintaining its user-friendly Developer Experience (DX). ",link:"/frontendmasters.com/introducing-svelte-5.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),s(a,i(l({title:"Snippets in Svelte 5",desc:"Out with slots, in with snippets.",link:"/frontendmasters.com/snippets-in-svelte-5.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),s(a,i(l({title:"Fine-Grained Reactivity in Svelte 5",desc:"Svelte is already quite lightweight and fast, but Svelte 5 still overs big improvements in fine-grained reactivity, meaning re-rendering as absolutely little as possible. ",link:"/frontendmasters.com/fine-grained-reactivity-in-svelte-5.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)]),b(" TODO: add ARTICLE CARD "),s(a,i(l({title:"Snippets in Svelte 5",desc:"Out with slots, in with snippets.",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/snippets-in-svelte-5.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const I=g(w,[["render",T]]),_=JSON.parse('{"path":"/frontendmasters.com/snippets-in-svelte-5.html","title":"Snippets in Svelte 5","lang":"en-US","frontmatter":{"lang":"en-US","title":"Snippets in Svelte 5","description":"Article(s) > Snippets in Svelte 5","icon":"iconfont icon-svelte","category":["Node.js","Svelte.js","Article(s)"],"tag":["blog","frontendmasters.com","node","nodejs","node-js","svelte","sveltejs","svelte-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Snippets in Svelte 5\\",\\"image\\":[\\"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3341\\"],\\"datePublished\\":\\"2024-08-07T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Adam Rackis\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/snippets-in-svelte-5.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Snippets in Svelte 5"}],["meta",{"property":"og:description","content":"Article(s) > Snippets in Svelte 5"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3341"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3341"}],["meta",{"name":"twitter:image:alt","content":"Snippets in Svelte 5"}],["meta",{"property":"article:author","content":"Adam Rackis"}],["meta",{"property":"article:tag","content":"svelte-js"}],["meta",{"property":"article:tag","content":"sveltejs"}],["meta",{"property":"article:tag","content":"svelte"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-08-07T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Snippets in Svelte 5"},{"property":"og:description","content":"Snippets in Svelte 5"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/snippets-in-svelte-5.html"}]],"prev":"/programming/js-svelte/articles/README.md","date":"2024-08-07T00:00:00.000Z","isOriginal":false,"author":"Adam Rackis","cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3341"},"git":{},"readingTime":{"minutes":6.03,"words":1810},"filePathRelative":"frontendmasters.com/snippets-in-svelte-5.md","copyright":{"author":"Adam Rackis"}}');export{I as comp,_ as data};
