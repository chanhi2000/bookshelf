import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as e,b as i,t as k,n as v,g as h,w as t,e as a,r as l,o as b}from"./app-BVguHYKu.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},I={class:"table-of-contents"},T={href:"https://github.com/jbogard/MediatR",target:"_blank",rel:"noopener noreferrer"},E={href:"https://en.wikipedia.org/wiki/Producer%E2%80%93consumer_problem",target:"_blank",rel:"noopener noreferrer"},M={href:"https://learn.microsoft.com/en-us/dotnet/core/extensions/channels",target:"_blank",rel:"noopener noreferrer"},C={href:"https://aws.amazon.com/what-is/dead-letter-queue/",target:"_blank",rel:"noopener noreferrer"};function B(r,n){const u=l("VPCard"),o=l("router-link"),d=l("SiteInfo"),c=l("RouteLink"),p=l("VPIcon");return b(),g("div",null,[s("h1",w,[s("a",f,[s("span",null,k(r.$frontmatter.title)+" 관련",1)])]),e(u,v(h({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",I,[s("ul",null,[s("li",null,[e(o,{to:"#when-to-use-an-in-memory-message-bus"},{default:t(()=>n[0]||(n[0]=[a("When To Use an In-Memory Message Bus")])),_:1,__:[0]})]),s("li",null,[e(o,{to:"#defining-the-messaging-abstractions"},{default:t(()=>n[1]||(n[1]=[a("Defining The Messaging Abstractions")])),_:1,__:[1]})]),s("li",null,[e(o,{to:"#simple-in-memory-queue-using-channels"},{default:t(()=>n[2]||(n[2]=[a("Simple In-Memory Queue Using Channels")])),_:1,__:[2]})]),s("li",null,[e(o,{to:"#implementing-the-event-bus"},{default:t(()=>n[3]||(n[3]=[a("Implementing The Event Bus")])),_:1,__:[3]})]),s("li",null,[e(o,{to:"#consuming-integration-events"},{default:t(()=>n[4]||(n[4]=[a("Consuming Integration Events")])),_:1,__:[4]})]),s("li",null,[e(o,{to:"#using-the-in-memory-message-bus"},{default:t(()=>n[5]||(n[5]=[a("Using The In-Memory Message Bus")])),_:1,__:[5]})]),s("li",null,[e(o,{to:"#improvement-points"},{default:t(()=>n[6]||(n[6]=[a("Improvement Points")])),_:1,__:[6]})])])]),n[51]||(n[51]=s("hr",null,null,-1)),e(d,{name:"Lightweight In-Memory Message Bus Using .NET Channels",desc:"Suppose you're building a modular monolith, a type of software architecture where different components are organized into loosely coupled modules. Or you might need to process data asynchronously. You'll need a tool or service that allows you to implement this.",url:"https://milanjovanovic.tech/blog/lightweight-in-memory-message-bus-using-dotnet-channels/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_079.png"}),n[52]||(n[52]=i('<p>Suppose you&#39;re building a modular monolith, a type of software architecture where different components are organized into loosely coupled modules. Or you might need to process data asynchronously. You&#39;ll need a tool or service that allows you to implement this.</p><p>Messaging plays a crucial role in modern software architecture, enabling communication and coordination between loosely coupled components.</p><p>An in-memory message bus is particularly useful when high performance and low latency are critical requirements.</p><p>In today&#39;s issue, we will:</p><ul><li>Create the required messaging abstractions</li><li>Build an in-memory message bus using channels</li><li>Implement an integration event processor background job</li><li>Demonstrate how to publish and consume messages asynchronously</li></ul><p>Let&#39;s dive in.</p><hr><h2 id="when-to-use-an-in-memory-message-bus" tabindex="-1"><a class="header-anchor" href="#when-to-use-an-in-memory-message-bus"><span>When To Use an In-Memory Message Bus</span></a></h2><p>I have to preface this by saying that an in-memory message bus is far from a silver bullet. There are many caveats to using it, as you will soon learn.</p><p>But first, let&#39;s start with the pros of using an in-memory message bus:</p><ul><li>Because it works in memory, you have a very low-latency messaging system</li><li>You can implement asynchronous (non-blocking) communication between components</li></ul><p>However, there are a few drawbacks to this approach:</p><ul><li>Potential for losing messages if the application process goes down</li><li>It only works inside of a single process, so it&#39;s not useful in distributed systems</li></ul>',13)),s("p",null,[n[8]||(n[8]=a("A practical use case for an in-memory message bus is when building a modular monolith. You can implement ")),e(c,{to:"/milanjovanovic.tech/modular-monolith-communication-patterns.html"},{default:t(()=>n[7]||(n[7]=[a("communication between modules")])),_:1,__:[7]}),n[9]||(n[9]=a(" using integration events. When you need to extract some modules into a separate service, you can replace the in-memory bus with a distributed one."))]),n[53]||(n[53]=i(`<hr><h2 id="defining-the-messaging-abstractions" tabindex="-1"><a class="header-anchor" href="#defining-the-messaging-abstractions"><span>Defining The Messaging Abstractions</span></a></h2><p>We will need a few abstractions to build our simple messaging system. From the client&#39;s perspective, we really only need two things. One abstraction is to publish messages, and another is to define a message handler.</p><p>The <code>IEventBus</code> interface exposes the <code>PublishAsync</code> method. This is what we will use to publish messages. There&#39;s also a generic constraint defined that only allows passing in an <code>IIntegrationEvent</code> instance.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEventBus</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task</span> <span class="token generic-method"><span class="token function">PublishAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">T</span> integrationEvent<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">IIntegrationEvent</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),s("p",null,[n[11]||(n[11]=a("I want to be practical with the ")),n[12]||(n[12]=s("code",null,"IIntegrationEvent",-1)),n[13]||(n[13]=a(" abstraction, so I'll use ")),s("a",T,[e(p,{icon:"iconfont icon-github"}),n[10]||(n[10]=s("code",null,"jbogard/MediatR",-1))]),n[14]||(n[14]=a(" for the pub-sub support. The ")),n[15]||(n[15]=s("code",null,"IIntegrationEvent",-1)),n[16]||(n[16]=a(" interface will inherit from ")),n[17]||(n[17]=s("code",null,"INotification",-1)),n[18]||(n[18]=a(". This allows us to easily define ")),n[19]||(n[19]=s("code",null,"IIntegrationEvent",-1)),n[20]||(n[20]=a(" handlers using ")),n[21]||(n[21]=s("code",null,"INotificationHandler<T>",-1)),n[22]||(n[22]=a(". Also, the ")),n[23]||(n[23]=s("code",null,"IIntegrationEvent",-1)),n[24]||(n[24]=a(" has an identifier, so we can track its execution."))]),n[54]||(n[54]=i(`<p>The abstract <code>IntegrationEvent</code> serves as a base class for concrete implementations.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">using</span> <span class="token namespace">MediatR</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IIntegrationEvent</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INotification</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Guid</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">record</span> <span class="token class-name">IntegrationEvent</span><span class="token punctuation">(</span><span class="token class-name">Guid</span> Id<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IIntegrationEvent</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="simple-in-memory-queue-using-channels" tabindex="-1"><a class="header-anchor" href="#simple-in-memory-queue-using-channels"><span>Simple In-Memory Queue Using Channels</span></a></h2>`,4)),s("p",null,[n[26]||(n[26]=a("The ")),n[27]||(n[27]=s("code",null,"System.Threading.Channels",-1)),n[28]||(n[28]=a(" namespace provides data structures for asynchronously passing messages between producers and consumers. Channels implement the ")),s("a",E,[e(p,{icon:"fa-brands fa-wikipedia-w"}),n[25]||(n[25]=a("producer/consumer pattern"))]),n[29]||(n[29]=a(". Producers asynchronously produce data, and consumers asynchronously consume that data. It's an essential pattern for building loosely coupled systems."))]),s("p",null,[n[31]||(n[31]=a("One of the primary motivations behind the adoption of ")),s("a",M,[e(p,{icon:"fa-brands fa-microsoft"}),n[30]||(n[30]=a(".NET Channels"))]),n[32]||(n[32]=a(" is their exceptional performance characteristics. Unlike traditional message queues, Channels operate entirely in memory. This has the disadvantage of the potential for message loss if the application crashes."))]),n[55]||(n[55]=i(`<p>The <code>InMemoryMessageQueue</code> creates an unbounded channel using the <code>Channel.CreateUnbounded</code> bounded. This means the channel can have any number of readers and writers. It also exposes a <code>ChannelReader</code> and <code>ChannelWriter</code>, which allow consumers to publish and consume messages.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">InMemoryMessageQueue</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Channel<span class="token punctuation">&lt;</span>IIntegrationEvent<span class="token punctuation">&gt;</span></span> _channel <span class="token operator">=</span></span>
<span class="line">        Channel<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateUnbounded</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IIntegrationEvent<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">ChannelReader<span class="token punctuation">&lt;</span>IIntegrationEvent<span class="token punctuation">&gt;</span></span> Reader <span class="token operator">=&gt;</span> _channel<span class="token punctuation">.</span>Reader<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">ChannelWriter<span class="token punctuation">&lt;</span>IIntegrationEvent<span class="token punctuation">&gt;</span></span> Writer <span class="token operator">=&gt;</span> _channel<span class="token punctuation">.</span>Writer<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You also need to register the <code>InMemoryMessageQueue</code> as a singleton with dependency injection:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>InMemoryMessageQueue<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="implementing-the-event-bus" tabindex="-1"><a class="header-anchor" href="#implementing-the-event-bus"><span>Implementing The Event Bus</span></a></h2><p>The <code>IEventBus</code> implementation is now straightforward with the use of channels. The <code>EventBus</code> class uses the <code>InMemoryMessageQueue</code> to access the <code>ChannelWriter</code> and write an event to the channel.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">EventBus</span><span class="token punctuation">(</span><span class="token class-name">InMemoryMessageQueue</span> queue<span class="token punctuation">)</span> <span class="token punctuation">:</span> IEventBus</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token generic-method"><span class="token function">PublishAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">T</span> integrationEvent<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">IIntegrationEvent</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> queue<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>integrationEvent<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We will register the <code>EventBus</code> as a singleton service with dependency injection because it&#39;s stateless:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEventBus<span class="token punctuation">,</span> EventBus<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="consuming-integration-events" tabindex="-1"><a class="header-anchor" href="#consuming-integration-events"><span>Consuming Integration Events</span></a></h2>`,12)),s("p",null,[n[34]||(n[34]=a("With the ")),n[35]||(n[35]=s("code",null,"EventBus",-1)),n[36]||(n[36]=a(" implementing the producer, we need a way to consume the published ")),n[37]||(n[37]=s("code",null,"IIntegrationEvent",-1)),n[38]||(n[38]=a(". We can implement a simple ")),e(c,{to:"/milanjovanovic.tech/running-background-tasks-in-asp-net-core.html"},{default:t(()=>n[33]||(n[33]=[a("background service")])),_:1,__:[33]}),n[39]||(n[39]=a(" using the built-in ")),n[40]||(n[40]=s("code",null,"IHostedService",-1)),n[41]||(n[41]=a(" abstraction."))]),n[56]||(n[56]=i(`<p>The <code>IntegrationEventProcessorJob</code> depends on the <code>InMemoryMessageQueue</code>, but this time for reading (consuming) messages. We&#39;ll use the <code>ChannelReader.ReadAllAsync</code> method to get back an <code>IAsyncEnumerable</code>. This allows us to consume all the messages in the <code>Channel</code> asynchronously.</p><p>The <code>IPublisher</code> from MediatR helps us connect the <code>IIntegrationEvent</code> with the respective handlers. It&#39;s important to resolve it from a custom scope if you want to inject scoped services into the event handlers.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">IntegrationEventProcessorJob</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">InMemoryMessageQueue</span> queue<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">IServiceScopeFactory</span> serviceScopeFactory<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>IntegrationEventProcessorJob<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> BackgroundService</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> stoppingToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">IIntegrationEvent</span> integrationEvent <span class="token keyword">in</span></span>
<span class="line">            queue<span class="token punctuation">.</span>Reader<span class="token punctuation">.</span><span class="token function">ReadAllAsync</span><span class="token punctuation">(</span>stoppingToken<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">try</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">using</span> <span class="token class-name">IServiceScope</span> scope <span class="token operator">=</span> serviceScopeFactory<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token class-name">IPublisher</span> publisher <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider</span>
<span class="line">                    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IPublisher<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">await</span> publisher<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>integrationEvent<span class="token punctuation">,</span> stoppingToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span></span>
<span class="line">                    ex<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token string">&quot;Something went wrong! {IntegrationEventId}&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    integrationEvent<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Don&#39;t forget to register the hosted service:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHostedService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IntegrationEventProcessorJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="using-the-in-memory-message-bus" tabindex="-1"><a class="header-anchor" href="#using-the-in-memory-message-bus"><span>Using The In-Memory Message Bus</span></a></h2><p>With all of the necessary abstractions in place, we can finally use the in-memory message bus.</p><p>The <code>IEventBus</code> service will write the message to the <code>Channel</code> and immediately return. This allows you to publish messages in a non-blocking way, which can improve performance.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">RegisterUserCommandHandler</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">IUserRepository</span> userRepository<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">IEventBus</span> eventBus<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> ICommandHandler<span class="token operator">&lt;</span>RegisterUserCommand<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">RegisterUserCommand</span> command<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// First, register the user.</span></span>
<span class="line">        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token function">CreateFromCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        userRepository<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Now we can publish the event.</span></span>
<span class="line">        <span class="token keyword">await</span> eventBus<span class="token punctuation">.</span><span class="token function">PublishAsync</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserRegisteredIntegrationEvent</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> user<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This solves the producer side, but we also need to create a consumer for the <code>UserRegisteredIntegrationEvent</code> message. This part is greatly simplified because I&#39;m using MediatR in this implementation.</p><p>We need to define an <code>INotificationHandler</code> implementation handling the integration event <code>UserRegisteredIntegrationEvent</code>. This will be the <code>UserRegisteredIntegrationEventHandler</code>.</p><p>When the background job reads the <code>UserRegisteredIntegrationEvent</code> from the <code>Channel</code>, it will publish the message and execute the handler.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">UserRegisteredIntegrationEventHandler</span></span>
<span class="line">    <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INotificationHandler<span class="token punctuation">&lt;</span>UserRegisteredIntegrationEvent<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span></span>
<span class="line">        UserRegisteredIntegrationEvent <span class="token keyword">event</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Asynchronously handle the event.</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="improvement-points" tabindex="-1"><a class="header-anchor" href="#improvement-points"><span>Improvement Points</span></a></h2><p>While our basic in-memory message bus is functional, there are several areas we can improve:</p>`,17)),s("ul",null,[n[50]||(n[50]=s("li",null,[s("strong",null,"Resilience"),a(" - We can introduce retries when we run into exceptions, which will improve the reliability of the message bus.")],-1)),s("li",null,[n[43]||(n[43]=s("strong",null,"Idempotency",-1)),n[44]||(n[44]=a(" - Ask yourself if you want to handle the same message twice. The ")),e(c,{to:"/milanjovanovic.tech/idempotent-consumer-handling-duplicate-messages.html"},{default:t(()=>n[42]||(n[42]=[a("idempotent consumer pattern")])),_:1,__:[42]}),n[45]||(n[45]=a(" elegantly solves this problem."))]),s("li",null,[n[47]||(n[47]=s("strong",null,"Dead Letter Queue",-1)),n[48]||(n[48]=a(" - Sometimes, we won't be able to handle a message correctly. It's a good idea to introduce a persistent storage for these messages. This is called a ")),s("a",C,[e(p,{icon:"fa-brands fa-aws"}),n[46]||(n[46]=a("Dead Letter Queue"))]),n[49]||(n[49]=a(", and it allows for troubleshooting at a later time."))])]),n[57]||(n[57]=s("p",null,"We've covered the key aspects of building an in-memory message bus using .NET Channels. You can extend this further by implementing the improvements for a more robust solution.",-1)),n[58]||(n[58]=s("p",null,"Remember that this implementation only works inside of one process. Consider using a real message broker if you need a more reliable solution.",-1)),n[59]||(n[59]=s("p",null,"That's all for today. I'll see you next week.",-1))])}const j=m(y,[["render",B]]),U=JSON.parse('{"path":"/milanjovanovic.tech/lightweight-in-memory-message-bus-using-dotnet-channels.html","title":"Lightweight In-Memory Message Bus Using .NET Channels","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Lightweight In-Memory Message Bus Using .NET Channels","description":"Article(s) > Lightweight In-Memory Message Bus Using .NET Channels","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lightweight In-Memory Message Bus Using .NET Channels\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_079.png\\"],\\"datePublished\\":\\"2024-03-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/lightweight-in-memory-message-bus-using-dotnet-channels.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Lightweight In-Memory Message Bus Using .NET Channels"}],["meta",{"property":"og:description","content":"Article(s) > Lightweight In-Memory Message Bus Using .NET Channels"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_079.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_079.png"}],["meta",{"name":"twitter:image:alt","content":"Lightweight In-Memory Message Bus Using .NET Channels"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-03-02T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Lightweight In-Memory Message Bus Using .NET Channels"},{"property":"og:description","content":"Lightweight In-Memory Message Bus Using .NET Channels"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/lightweight-in-memory-message-bus-using-dotnet-channels.html"}]],"prev":"/programming/cs/articles/README.md","date":"2024-03-02T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_079.png"},"git":{},"readingTime":{"minutes":4.81,"words":1443},"filePathRelative":"milanjovanovic.tech/lightweight-in-memory-message-bus-using-dotnet-channels.md","copyright":{"author":"Milan Jovanović"}}');export{j as comp,U as data};
