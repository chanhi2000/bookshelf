import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as e,b as c,t as v,n as g,g as h,w as t,e as a,r as i,o as b}from"./app-BVguHYKu.js";const y={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"},I={href:"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/overview?view=aspnetcore-8.0",target:"_blank",rel:"noopener noreferrer"};function P(r,n){const u=i("VPCard"),p=i("router-link"),o=i("SiteInfo"),d=i("VPIcon"),l=i("RouteLink");return b(),k("div",null,[s("h1",f,[s("a",w,[s("span",null,v(r.$frontmatter.title)+" 관련",1)])]),e(u,g(h({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",A,[s("ul",null,[s("li",null,[e(p,{to:"#the-endpoint-comes-first"},{default:t(()=>n[0]||(n[0]=[a("The Endpoint Comes First")])),_:1,__:[0]})]),s("li",null,[e(p,{to:"#sprinkle-some-reflection-magic"},{default:t(()=>n[1]||(n[1]=[a("Sprinkle Some Reflection Magic")])),_:1,__:[1]})]),s("li",null,[e(p,{to:"#registering-minimal-apis"},{default:t(()=>n[2]||(n[2]=[a("Registering Minimal APIs")])),_:1,__:[2]})]),s("li",null,[e(p,{to:"#putting-it-all-together"},{default:t(()=>n[3]||(n[3]=[a("Putting It All Together")])),_:1,__:[3]})]),s("li",null,[e(p,{to:"#takeaway"},{default:t(()=>n[4]||(n[4]=[a("Takeaway")])),_:1,__:[4]})])])]),n[22]||(n[22]=s("hr",null,null,-1)),e(o,{name:"Automatically Register Minimal APIs in ASP.NET Core",desc:"In ASP.NET Core applications using Minimal APIs, registering each API endpoint with app.MapGet, app.MapPost, etc. can introduce repetitive code. Today, I'll show you how to automatically register your Minimal APIs with a simple abstraction.",url:"https://milanjovanovic.tech/blog/automatically-register-minimal-apis-in-aspnetcore/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_078.png"}),s("p",null,[n[6]||(n[6]=a("In ASP.NET Core applications using ")),s("a",I,[e(d,{icon:"fa-brands fa-microsoft"}),n[5]||(n[5]=a("Minimal APIs"))]),n[7]||(n[7]=a(", registering each API endpoint with ")),n[8]||(n[8]=s("code",null,"app.MapGet",-1)),n[9]||(n[9]=a(", ")),n[10]||(n[10]=s("code",null,"app.MapPost",-1)),n[11]||(n[11]=a(", etc., can introduce repetitive code. As projects grow, this manual process becomes increasingly time-consuming and prone to maintenance headaches."))]),n[23]||(n[23]=s("p",null,[a("You can try grouping the Minimal API endpoints using extension methods so as not to clutter the "),s("code",null,"Program"),a(" file. This approach scales well as the project grows. However, it feels like reinventing controllers.")],-1)),n[24]||(n[24]=s("p",null,"I like to view each Minimal API endpoint as a standalone component.",-1)),s("p",null,[n[13]||(n[13]=a("The vision I have in my mind aligns nicely with the concept of ")),e(l,{to:"/milanjovanovic.tech/vertical-slice-architecture.html"},{default:t(()=>n[12]||(n[12]=[a("vertical slices.")])),_:1,__:[12]})]),n[25]||(n[25]=c(`<p>Today, I&#39;ll show you how to register your Minimal APIs automatically with a simple abstraction.</p><hr><h2 id="the-endpoint-comes-first" tabindex="-1"><a class="header-anchor" href="#the-endpoint-comes-first"><span>The Endpoint Comes First</span></a></h2><p>Automatically registering Minimal APIs significantly reduces boilerplate, streamlining development. It makes your codebase more concise and improves maintainability by establishing a centralized registration mechanism.</p><p>Let&#39;s create a simple <code>IEndpoint</code> abstraction to represent a single endpoint.</p><p>The <code>MapEndpoint</code> accepts an <code>IEndpointRouteBuilder</code>, which we can use to call <code>MapGet</code>, <code>MapPost</code>, etc.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEndpoint</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MapEndpoint</span><span class="token punctuation">(</span><span class="token class-name">IEndpointRouteBuilder</span> app<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each <code>IEndpoint</code> implementation should contain exactly one Minimal API endpoint definition.</p><p>Nothing prevents you from registering multiple endpoints in the <code>MapEndpoint</code> method. But you (really) shouldn&#39;t.</p>`,9)),s("p",null,[n[15]||(n[15]=a("Additionally, you could implement a code analyzer or ")),e(l,{to:"/milanjovanovic.tech/enforcing-software-architecture-with-architecture-tests.html"},{default:t(()=>n[14]||(n[14]=[a("architecture test")])),_:1,__:[14]}),n[16]||(n[16]=a(" to enforce this rule."))]),n[26]||(n[26]=c(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetFollowerStats</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEndpoint</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MapEndpoint</span><span class="token punctuation">(</span><span class="token class-name">IEndpointRouteBuilder</span> app<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;users/{userId}/followers/stats&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">            <span class="token class-name">Guid</span> userId<span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">ISender</span> sender<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetFollowerStatsQuery</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Result<span class="token punctuation">&lt;</span>FollowerStatsResponse<span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> sender<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>Results<span class="token punctuation">.</span>Ok<span class="token punctuation">,</span> CustomResults<span class="token punctuation">.</span>Problem<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">WithTags</span><span class="token punctuation">(</span>Tags<span class="token punctuation">.</span>Users<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="sprinkle-some-reflection-magic" tabindex="-1"><a class="header-anchor" href="#sprinkle-some-reflection-magic"><span>Sprinkle Some Reflection Magic</span></a></h2><p>Reflection allows us to dynamically examine code at runtime. For Minimal API registration, we&#39;ll use reflection to scan our .NET assemblies and find classes that implement <code>IEndpoint</code>. Then, we will configure them as services with dependency injection.</p><p>The <code>Assembly</code> parameter should be the assembly that contains the <code>IEndpoint</code> implementations. If you want to have endpoints in multiple assemblies (projects), you can easily extend this method to accept a collection.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IServiceCollection</span> <span class="token function">AddEndpoints</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">this</span> <span class="token class-name">IServiceCollection</span> services<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Assembly</span> assembly<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ServiceDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span></span> serviceDescriptors <span class="token operator">=</span> assembly</span>
<span class="line">        <span class="token punctuation">.</span>DefinedTypes</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>type <span class="token operator">=&gt;</span> type <span class="token keyword">is</span> <span class="token punctuation">{</span> IsAbstract<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">IsInterface</span><span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">                       type<span class="token punctuation">.</span><span class="token function">IsAssignableTo</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IEndpoint</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>type <span class="token operator">=&gt;</span> ServiceDescriptor<span class="token punctuation">.</span><span class="token function">Transient</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IEndpoint</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    services<span class="token punctuation">.</span><span class="token function">TryAddEnumerable</span><span class="token punctuation">(</span>serviceDescriptors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> services<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We only need to call this method once from the <code>Program</code> file:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddEndpoints</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="registering-minimal-apis" tabindex="-1"><a class="header-anchor" href="#registering-minimal-apis"><span>Registering Minimal APIs</span></a></h2><p>The final step in our implementation is to register the endpoints automatically. We can create an extension method on the <code>WebApplication</code>, which lets us resolve services using the <code>IServiceProvider</code>.</p><p>We&#39;re looking for all registrations of the <code>IEndpoint</code> service. These will be the endpoint classes we can now register with the application by calling <code>MapEndpoint</code>.</p>`,12)),s("p",null,[n[18]||(n[18]=a("I'm also adding an option to pass in a ")),n[19]||(n[19]=s("code",null,"RouteGroupBuilder",-1)),n[20]||(n[20]=a(" if you want to apply conventions to all endpoints. A great example is adding a route prefix, authentication, or ")),e(l,{to:"/milanjovanovic.tech/api-versioning-in-aspnetcore.html"},{default:t(()=>n[17]||(n[17]=[a("API versioning.")])),_:1,__:[17]})]),n[27]||(n[27]=c(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IApplicationBuilder</span> <span class="token function">MapEndpoints</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">this</span> <span class="token class-name">WebApplication</span> app<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">RouteGroupBuilder<span class="token punctuation">?</span></span> routeGroupBuilder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>IEndpoint<span class="token punctuation">&gt;</span></span> endpoints <span class="token operator">=</span> app<span class="token punctuation">.</span>Services</span>
<span class="line">        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEnumerable<span class="token punctuation">&lt;</span>IEndpoint<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">IEndpointRouteBuilder</span> builder <span class="token operator">=</span></span>
<span class="line">        routeGroupBuilder <span class="token keyword">is</span> <span class="token keyword">null</span> <span class="token punctuation">?</span> app <span class="token punctuation">:</span> routeGroupBuilder<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">IEndpoint</span> endpoint <span class="token keyword">in</span> endpoints<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        endpoint<span class="token punctuation">.</span><span class="token function">MapEndpoint</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> app<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="putting-it-all-together" tabindex="-1"><a class="header-anchor" href="#putting-it-all-together"><span>Putting It All Together</span></a></h2><p>Here&#39;s what the <code>Program</code> file could look like when we put it all together.</p><p>We&#39;re calling <code>AddEndpoints</code> to register the <code>IEndpoint</code> implementations.</p><p>Then, we&#39;re calling <code>MapEndpoints</code> to automatically register the Minimal APIs.</p><p>I&#39;m also configuring a route prefix and API Versioning for each endpoint using a <code>RouteGroupBuilder</code>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">WebApplicationBuilder</span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddEndpointsApiExplorer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddSwaggerGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddEndpoints</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">WebApplication</span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">ApiVersionSet</span> apiVersionSet <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">NewApiVersionSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">HasApiVersion</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiVersion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ReportApiVersions</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">RouteGroupBuilder</span> versionedGroup <span class="token operator">=</span> app</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">MapGroup</span><span class="token punctuation">(</span><span class="token string">&quot;api/v{version:apiVersion}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">WithApiVersionSet</span><span class="token punctuation">(</span>apiVersionSet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapEndpoints</span><span class="token punctuation">(</span>versionedGroup<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="takeaway" tabindex="-1"><a class="header-anchor" href="#takeaway"><span>Takeaway</span></a></h2><p>Automatic Minimal API registration with techniques like reflection can significantly improve developer efficiency and project maintainability.</p><p>While highly beneficial, it&#39;s important to acknowledge the potential <strong>performance impact of reflection</strong> on application startup.</p><p>So, an improvement point could be using source generators for pre-compiled registration logic.</p><p>A few alternatives worth exploring:</p>`,14)),s("ul",null,[s("li",null,[e(l,{to:"/milanjovanovic.tech/how-to-structure-minimal-apis.html"},{default:t(()=>n[21]||(n[21]=[a("Extension methods")])),_:1,__:[21]})])]),e(o,{name:"FastEndpoints",desc:"FastEndpoints is a developer friendly alternative to Minimal APIs & MVC",url:"https://fast-endpoints.com/",logo:"https://fast-endpoints.com/favicon-32x32.png",preview:"https://fast-endpoints.com/fe-og-image.png"}),e(o,{name:"CarterCommunity/Carter",desc:"Carter is framework that is a thin layer of extension methods and functionality over ASP.NET Core allowing code to be more explicit and most importantly more enjoyable.",url:"https://github.com/CarterCommunity/Carter",logo:"https://avatars.githubusercontent.com/u/37978301?s=200&v=4",preview:"https://opengraph.githubassets.com/10fb2db9c9fb99b99f02c6e8a8081b695e614d84caddbc9c4d0d65f1606be886/CarterCommunity/Carter"}),n[28]||(n[28]=s("p",null,"Hope this was helpful.",-1)),n[29]||(n[29]=s("p",null,"See you next week.",-1)),n[30]||(n[30]=s("p",null,"::: tips P.S.",-1)),n[31]||(n[31]=s("p",null,"Here's the complete source code for this article.",-1)),e(o,{name:"m-jovanovic/minimal-endpoints",desc:"Automatically register your Minimal API endpoints in ASP.NET Core.",url:"https://github.com/m-jovanovic/minimal-endpoints",logo:"https://avatars.githubusercontent.com/u/34191235?v=4",preview:"https://opengraph.githubassets.com/3f2a9903d4eead059f8e20a6450236d6a19784ab20649c2980fab9759bd6edd9/m-jovanovic/minimal-endpoints"}),n[32]||(n[32]=s("p",null,":::",-1))])}const S=m(y,[["render",P]]),T=JSON.parse('{"path":"/milanjovanovic.tech/automatically-register-minimal-apis-in-aspnetcore.html","title":"Automatically Register Minimal APIs in ASP.NET Core","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Automatically Register Minimal APIs in ASP.NET Core","description":"Article(s) > Automatically Register Minimal APIs in ASP.NET Core","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Automatically Register Minimal APIs in ASP.NET Core\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_078.png\\"],\\"datePublished\\":\\"2024-02-24T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/automatically-register-minimal-apis-in-aspnetcore.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Automatically Register Minimal APIs in ASP.NET Core"}],["meta",{"property":"og:description","content":"Article(s) > Automatically Register Minimal APIs in ASP.NET Core"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_078.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_078.png"}],["meta",{"name":"twitter:image:alt","content":"Automatically Register Minimal APIs in ASP.NET Core"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-02-24T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Automatically Register Minimal APIs in ASP.NET Core"},{"property":"og:description","content":"Automatically Register Minimal APIs in ASP.NET Core"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/automatically-register-minimal-apis-in-aspnetcore.html"}]],"prev":"/programming/cs/articles/README.md","date":"2024-02-24T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_078.png"},"git":{},"readingTime":{"minutes":3.27,"words":981},"filePathRelative":"milanjovanovic.tech/automatically-register-minimal-apis-in-aspnetcore.md","copyright":{"author":"Milan Jovanović"}}');export{S as comp,T as data};
