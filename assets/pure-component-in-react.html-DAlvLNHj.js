import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as t,b as c,a as h,t as f,n as u,g as d,w as e,e as a,r as i,o as b}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/blog.logrocket.com/pure-component-in-react/banner.png",y={},R={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},P={class:"table-of-contents"},C={href:"https://react.dev/reference/react/PureComponent",target:"_blank",rel:"noopener noreferrer"},j={href:"https://react.dev/reference/react/memo",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/reactjs/rfcs",target:"_blank",rel:"noopener noreferrer"},I={class:"hint-container note"},S={href:"https://blog.logrocket.com/author/emmanuelodioko/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://reactjs.org/docs/react-component.html#shouldcomponentupdate",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/acdlite/recompose",target:"_blank",rel:"noopener noreferrer"},A={href:"https://reactjs.org/docs/higher-order-components.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/acdlite/recompose/blob/master/docs/API.md#pure",target:"_blank",rel:"noopener noreferrer"};function U(m,n){const r=i("VPCard"),o=i("router-link"),k=i("SiteInfo"),p=i("VPIcon"),l=i("RouteLink");return b(),v("div",null,[s("h1",R,[s("a",x,[s("span",null,f(m.$frontmatter.title)+" 관련",1)])]),t(r,u(d({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",P,[s("ul",null,[s("li",null,[t(o,{to:"#what-are-react-components"},{default:e(()=>n[0]||(n[0]=[a("What are React components?")])),_:1,__:[0]})]),s("li",null,[t(o,{to:"#why-is-optimization-in-react-important"},{default:e(()=>n[1]||(n[1]=[a("Why is optimization in React important?")])),_:1,__:[1]})]),s("li",null,[t(o,{to:"#what-is-a-pure-component-in-react"},{default:e(()=>n[2]||(n[2]=[a("What is a pure component in React?")])),_:1,__:[2]})]),s("li",null,[t(o,{to:"#how-does-a-pure-component-work"},{default:e(()=>n[3]||(n[3]=[a("How does a pure component work?")])),_:1,__:[3]})]),s("li",null,[t(o,{to:"#are-react-functional-components-pure"},{default:e(()=>n[4]||(n[4]=[a("Are React functional components pure?")])),_:1,__:[4]})]),s("li",null,[t(o,{to:"#react-stateless-function-components"},{default:e(()=>n[5]||(n[5]=[a("React stateless function components")])),_:1,__:[5]})]),s("li",null,[t(o,{to:"#using-react-function-components"},{default:e(()=>n[6]||(n[6]=[a("Using React function components")])),_:1,__:[6]})]),s("li",null,[t(o,{to:"#using-the-pure-hoc-from-recompose"},{default:e(()=>n[7]||(n[7]=[a("Using the { pure } HOC from Recompose")])),_:1,__:[7]})]),s("li",null,[t(o,{to:"#how-to-use-react-memo"},{default:e(()=>n[8]||(n[8]=[a("How to use React.memo")])),_:1,__:[8]}),s("ul",null,[s("li",null,[t(o,{to:"#react-memo-api-implementation-details"},{default:e(()=>n[9]||(n[9]=[a("React.memo API implementation details")])),_:1,__:[9]})]),s("li",null,[t(o,{to:"#custom-bailout-condition"},{default:e(()=>n[10]||(n[10]=[a("Custom bailout condition")])),_:1,__:[10]})]),s("li",null,[t(o,{to:"#comparison-with-class-components"},{default:e(()=>n[11]||(n[11]=[a("Comparison with class components")])),_:1,__:[11]})])])]),s("li",null,[t(o,{to:"#migrating-from-a-purecomponent-class-component-to-a-function"},{default:e(()=>n[12]||(n[12]=[a("Migrating from a PureComponent class component to a function")])),_:1,__:[12]})]),s("li",null,[t(o,{to:"#important-differences-between-purecomponent-and-react-memo"},{default:e(()=>n[13]||(n[13]=[a("Important differences between PureComponent and React.Memo")])),_:1,__:[13]})]),s("li",null,[t(o,{to:"#conclusion"},{default:e(()=>n[14]||(n[14]=[a("Conclusion")])),_:1,__:[14]})])])]),n[82]||(n[82]=s("hr",null,null,-1)),t(k,{name:"Pure components in React: Using PureComponent and React.memo",desc:"Learn how to memoize components in React using React.PureComponent and the React.memo API, and cover the fundamentals of React components.",url:"https://blog.logrocket.com/pure-component-in-react",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/pure-component-in-react/banner.png"}),n[83]||(n[83]=s("p",null,[a("As React applications grow in complexity, performance optimization becomes a priority to prevent performance decline. React provides two ways to prevent unnecessary re-renders: "),s("code",null,"PureComponent"),a(" for class components, and "),s("code",null,"React.memo"),a(" for functional components.")],-1)),n[84]||(n[84]=s("figure",null,[s("img",{src:w,alt:"pure components in react using Using PureComponent and React.memo",tabindex:"0",loading:"lazy"}),s("figcaption",null,"pure components in react using Using PureComponent and React.memo")],-1)),s("p",null,[n[18]||(n[18]=a("In this tutorial, we’ll learn how to memoize components in React using ")),s("a",C,[t(p,{icon:"fa-brands fa-react"}),n[15]||(n[15]=s("code",null,"React.PureComponent",-1))]),n[19]||(n[19]=a(" and the ")),s("a",j,[t(p,{icon:"fa-brands fa-react"}),n[16]||(n[16]=s("code",null,"React.memo",-1)),n[17]||(n[17]=a("API"))]),n[20]||(n[20]=a(". We’ll cover some of the fundamentals of React components before we dive into an example."))]),s("p",null,[n[24]||(n[24]=a("You can keep up with the changes and suggestions for the React framework on the ")),s("a",T,[n[21]||(n[21]=a("React RFCs repository (")),t(p,{icon:"iconfont icon-github"}),n[22]||(n[22]=s("code",null,"reactjs/rfcs",-1)),n[23]||(n[23]=a(")"))]),n[25]||(n[25]=a("."))]),n[85]||(n[85]=s("hr",null,null,-1)),n[86]||(n[86]=s("h2",{id:"what-are-react-components",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#what-are-react-components"},[s("span",null,"What are React components?")])],-1)),n[87]||(n[87]=s("p",null,"Like most modern JavaScript frameworks, React is component-based. A component is usually defined as a function of its state and props.",-1)),s("p",null,[n[27]||(n[27]=a("React supports two types of components: class components and functional components. ")),t(l,{to:"/blog.logrocket.com/fundamentals-functional-programming-react.html"},{default:e(()=>n[26]||(n[26]=[s("strong",null,"A functional component",-1)])),_:1,__:[26]}),n[28]||(n[28]=a(" is a plain JavaScript function that returns JSX. A class component is a JavaScript class that extends ")),n[29]||(n[29]=s("code",null,"React.Component",-1)),n[30]||(n[30]=a(" and returns JSX inside a render method."))]),n[88]||(n[88]=c(`<p>The following code snippet shows a simple <code>ReactHeader</code> component defined as both a class component and a functional component:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// CLASS COMPONENT</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">ReactHeader</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        React </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>version <span class="token operator">||</span> <span class="token number">17</span><span class="token punctuation">}</span><span class="token plain-text"> Documentation</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// FUNCTIONAL COMPONENT</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">ReactHeader</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      React </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>version <span class="token operator">||</span> <span class="token number">17</span><span class="token punctuation">}</span><span class="token plain-text"> Documentation</span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("div",I,[n[38]||(n[38]=s("p",{class:"hint-container-title"},"Editor’s note",-1)),s("p",null,[n[32]||(n[32]=a("This post was updated by ")),s("a",S,[t(p,{icon:"fas fa-globe"}),n[31]||(n[31]=a("Chizaram Ken"))]),n[33]||(n[33]=a(" in March 2025 to compare and contrast the use of ")),n[34]||(n[34]=s("code",null,"PureComponent",-1)),n[35]||(n[35]=a(" and the more modern ")),n[36]||(n[36]=s("code",null,"React.memo",-1)),n[37]||(n[37]=a("."))])]),n[89]||(n[89]=c('<hr><h2 id="why-is-optimization-in-react-important" tabindex="-1"><a class="header-anchor" href="#why-is-optimization-in-react-important"><span>Why is optimization in React important?</span></a></h2><p>React components tend to re-render frequently during normal application usage. This behavior can occur when props change, state updates, or parent components re-render.</p><p>Without proper optimization, these re-renders can become unnecessary and impact performance — especially in large applications with complex component trees, and when components must handle frequent data updates.</p><hr><h2 id="what-is-a-pure-component-in-react" tabindex="-1"><a class="header-anchor" href="#what-is-a-pure-component-in-react"><span>What is a pure component in React?</span></a></h2><p>Based on the concept of purity in functional programming paradigms, a function is said to be pure if it meets the following two conditions:</p><ul><li>Its return value is only determined by its input values</li><li>Its return value is always the same for the same input values</li></ul><p>A React component is considered pure if it renders the same output for the same state and props. For this type of class component, React provides the <code>PureComponent</code> base class. Class components that extend the <code>React.PureComponent</code> class are treated as pure components.</p>',9)),s("p",null,[n[40]||(n[40]=a("Pure components have some performance improvements and render optimizations because React implements the ")),s("a",q,[t(p,{icon:"fa-brands fa-react"}),n[39]||(n[39]=s("code",null,"shouldComponentUpdate()",-1))]),n[41]||(n[41]=a(" method for them with a shallow comparison of props and state."))]),n[90]||(n[90]=s("hr",null,null,-1)),n[91]||(n[91]=s("h2",{id:"how-does-a-pure-component-work",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#how-does-a-pure-component-work"},[s("span",null,"How does a pure component work?")])],-1)),n[92]||(n[92]=s("p",null,[a("When a parent component re-renders, "),s("code",null,"PureComponent"),a(" performs two key comparisons. It compares the current props with the next props, and compares the current state with the next state.")],-1)),s("p",null,[n[43]||(n[43]=a("If neither props nor state has changed (based on shallow comparison), React skips ")),t(l,{to:"/blog.logrocket.com/how-when-to-force-react-component-re-render.html"},{default:e(()=>n[42]||(n[42]=[s("strong",null,"the re-render process",-1)])),_:1,__:[42]}),n[44]||(n[44]=a(" entirely. This automatic optimization helps prevent unnecessary renders and improves application performance. In practice, a React pure component looks like the following:"))]),n[93]||(n[93]=c(`<div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">PercentageStat</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> label<span class="token punctuation">,</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> total <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> score<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> label <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>score <span class="token operator">/</span> total <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token plain-text">%</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> PercentageStat<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="are-react-functional-components-pure" tabindex="-1"><a class="header-anchor" href="#are-react-functional-components-pure"><span>Are React functional components pure?</span></a></h2><p>Functional components are very useful in React, especially when you want to isolate state management from the component. That’s why they are often called stateless components.</p>`,4)),s("p",null,[n[46]||(n[46]=a("However, ")),t(l,{to:"/blog.logrocket.com/testing-state-changes-in-react-functional-components.html"},{default:e(()=>n[45]||(n[45]=[s("strong",null,"functional components",-1)])),_:1,__:[45]}),n[47]||(n[47]=a(" cannot leverage the performance improvements and render optimizations that come with ")),n[48]||(n[48]=s("code",null,"React.PureComponent",-1)),n[49]||(n[49]=a(" because, by definition, they are not classes."))]),n[94]||(n[94]=c(`<p>If you want React to treat a functional component as a pure component, you’ll have to convert the functional component to a class component that extends <code>React.PureComponent</code>.</p><p>Check out the simple example below:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// FUNCTIONAL COMPONENT</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">PercentageStat</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> label<span class="token punctuation">,</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> total <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> score<span class="token punctuation">)</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> label <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>score <span class="token operator">/</span> total <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token plain-text">%</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// CONVERTED TO PURE COMPONENT</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">PercentageStat</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> label<span class="token punctuation">,</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> total <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> score<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> label <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>score <span class="token operator">/</span> total <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token plain-text">%</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="react-stateless-function-components" tabindex="-1"><a class="header-anchor" href="#react-stateless-function-components"><span>React stateless function components</span></a></h2><p>React stateless function components are functions that do not manage any state. They are a simple way to define components that don’t need to manage state or lifecycle methods.</p><p>In essence, stateless function components are JavaScript functions that return React items after receiving props as input. Stateless functional components are used when a component doesn’t need to maintain its own state or lifecycle methods.</p><p>Typically, these components have consistent output based on their inputs because they have no state or side effects.</p><p>If you give a stateless function component a set of props, it will always render the same JSX. A simple example is:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Title</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> title <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>While functional components don’t have direct lifecycle methods, they still go through the same three phases as class components:</p><ol><li><strong>Mounting —</strong><code>useEffect(() =&gt; {}, [])</code>This Hook is similar to <code>componentDidMount</code> in class components. The function inside <code>useEffect</code> runs after the component is first rendered</li><li><strong>Updating —</strong><code>useEffect(() =&gt; {})</code>If you omit the dependency array (<code>[]</code>), <code>useEffect</code> will run after every render (similar to <code>componentDidUpdate</code>)</li><li><strong>Unmounting —</strong><code>useEffect(() =&gt; { return () =&gt; {} })</code>The function returned inside <code>useEffect</code> (the cleanup function) is equivalent to <code>componentWillUnmount</code> in class components and is used to clean up resources when the component unmounts or before it re-renders</li></ol><p>Note that <code>useEffect</code> is not a direct equivalent to lifecycle methods, but rather a different paradigm for handling side effects in your components.</p><hr><h2 id="using-react-function-components" tabindex="-1"><a class="header-anchor" href="#using-react-function-components"><span>Using React function components</span></a></h2><p>Function components are a simpler way to write components in React. They are JavaScript functions that accept props and return React elements as earlier said.</p><p>Here’s a basic example:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">ProductCard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name<span class="token punctuation">,</span> price<span class="token punctuation">,</span> description<span class="token punctuation">,</span> inStock <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>description<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">$</span><span class="token punctuation">{</span>price<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>inStock <span class="token operator">?</span> <span class="token string">&#39;In Stock&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;Out of Stock&#39;</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The term “stateless function components,” has been outdated since the introduction of Hooks. Modern function components can handle a lot of things, including managing state using <code>useState</code>, handling side effects using <code>useEffect</code>, accessing context, and maintaining references with <code>useRef</code>.</p><hr><h2 id="using-the-pure-hoc-from-recompose" tabindex="-1"><a class="header-anchor" href="#using-the-pure-hoc-from-recompose"><span>Using the <code>{ pure }</code> HOC from Recompose</span></a></h2><p>In the past, optimizing a functional component so that React could treat it as a pure component wasn’t going to necessarily require that you convert the component to a class component.</p>`,22)),s("p",null,[n[58]||(n[58]=a("The ")),s("a",z,[n[50]||(n[50]=a("Recompose (")),t(p,{icon:"iconfont icon-github"}),n[51]||(n[51]=s("code",null,"acdlite/recompose",-1)),n[52]||(n[52]=a(")"))]),n[59]||(n[59]=a(" package then provides a broad collection of ")),s("a",A,[t(p,{icon:"fa-brands fa-react"}),n[53]||(n[53]=a("higher-order components (HOCs)"))]),n[60]||(n[60]=a(" that are very useful for dealing with functional components. This package exports a ")),s("a",M,[n[54]||(n[54]=s("code",null,"{ pure }",-1)),n[55]||(n[55]=a(" (")),t(p,{icon:"iconfont icon-github"}),n[56]||(n[56]=s("code",null,"acdlite/recompose",-1)),n[57]||(n[57]=a(")"))]),n[61]||(n[61]=a(" HOC that tries to optimize a React component by preventing updates on the component unless a prop has changed, using ")),n[62]||(n[62]=s("code",null,"shallowEqual()",-1)),n[63]||(n[63]=a(" to test for changes."))]),n[95]||(n[95]=c(`<p>Using the pure HOC, our functional component can be wrapped as follows:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> pure <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;recompose&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">PercentageStat</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> label<span class="token punctuation">,</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> total <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> score<span class="token punctuation">)</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> label <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>score <span class="token operator">/</span> total <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token plain-text">%</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Wrap component using the \`pure\` HOC from recompose</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">pure</span><span class="token punctuation">(</span>PercentageStat<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, the <a href="/blog.logrocket.com/using-recompose-to-write-clean-higher-order-components-3019a6daf44c/" target="_blank" rel="noopener noreferrer"><strong>Recompose library</strong></a> is no longer a recommended approach to optimizing React components because it has been officially deprecated. Its functionality has been largely replaced by React Hooks, which effectively addresses the same issues.</p><p>React now provides us with <code>React.memo</code> as the official way to optimize a functional component.</p><hr><h2 id="how-to-use-react-memo" tabindex="-1"><a class="header-anchor" href="#how-to-use-react-memo"><span>How to use <code>React.memo</code></span></a></h2>`,6)),s("p",null,[n[65]||(n[65]=a("Functional components in React can now leverage similar performance optimizations as ")),n[66]||(n[66]=s("code",null,"PureComponent",-1)),n[67]||(n[67]=a(" through the use of ")),t(l,{to:"/blog.logrocket.com/react-memo.html"},{default:e(()=>n[64]||(n[64]=[s("strong",null,[s("code",null,"React.memo"),a(" Hook")],-1)])),_:1,__:[64]}),n[68]||(n[68]=a(". While functional components don’t inherently skip re-renders, they can be wrapped with ")),n[69]||(n[69]=s("code",null,"memo",-1)),n[70]||(n[70]=a(" to achieve the same optimization."))]),n[96]||(n[96]=c(`<p>With <code>React.memo</code>, you can create memoized functional components that prevent unnecessary updates. This functionality is particularly useful when dealing with components that receive the same set of props.</p><p>Using the <code>React.memo</code> API, the previous functional component can be wrapped as follows:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> memo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">PercentageStat</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> label<span class="token punctuation">,</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> total <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> score<span class="token punctuation">)</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> label <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>score <span class="token operator">/</span> total <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token plain-text">%</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Wrap component using \`React.memo()\`</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">memo</span><span class="token punctuation">(</span>PercentageStat<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is important to note that, unlike <code>PureComponent</code>, <code>memo</code> only compares props. However, in functional components, calling the state setter with the same state already prevents re-renders by default, even without <code>memo</code>.</p><h3 id="react-memo-api-implementation-details" tabindex="-1"><a class="header-anchor" href="#react-memo-api-implementation-details"><span><code>React.memo</code> API implementation details</span></a></h3>`,5)),s("p",null,[n[72]||(n[72]=a("There are a few things worth considering about the implementation of the ")),n[73]||(n[73]=s("code",null,"React.memo",-1)),n[74]||(n[74]=a(" API.")),n[75]||(n[75]=s("br",null,null,-1)),n[76]||(n[76]=a(" For one, ")),n[77]||(n[77]=s("code",null,"React.memo",-1)),n[78]||(n[78]=a(" is a ")),t(l,{to:"/blog.logrocket.com/react-higher-order-components.html"},{default:e(()=>n[71]||(n[71]=[s("strong",null,"higher-order component",-1)])),_:1,__:[71]}),n[79]||(n[79]=a(". It takes a React component as its first argument and returns a special type of React component that allows the renderer to render the component while memoizing the output. Therefore, if the component’s props are shallowly equal, the ")),n[80]||(n[80]=s("code",null,"React.memo",-1)),n[81]||(n[81]=a(" component will bail out the updates."))]),n[97]||(n[97]=c(`<p><code>React.memo</code> works with all React components. The first argument passed to <code>React.memo</code> can be any type of React component. However, for class components, you should use <code>React.PureComponent</code> instead of <code>React.memo</code>.</p><p><code>React.memo</code> also works with components rendered from the server using <code>ReactDOMServer</code>.</p><h3 id="custom-bailout-condition" tabindex="-1"><a class="header-anchor" href="#custom-bailout-condition"><span>Custom bailout condition</span></a></h3><p>The <code>React.memo</code> API can take a second argument: the <code>arePropsEqual()</code> function. The default behavior of <code>React.memo</code> is to shallowly compare the component props. However, with the <code>arePropsEqual()</code> function, you can customize the bailout condition for component updates. The <code>arePropsEqual()</code> function is defined with two parameters: <code>prevProps</code> and <code>nextProps</code>.</p><p>The <code>arePropsEqual()</code> function returns <code>true</code> when the props are compared to be equal, thereby preventing the component from re-rendering,. It returns <code>false</code> when the props are not equal.</p><p>The following code snippet uses a custom bailout condition:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> memo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">PercentageStat</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> label<span class="token punctuation">,</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> total <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> score<span class="token punctuation">)</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> label <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>score <span class="token operator">/</span> total <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token plain-text">%</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">arePropsEqual</span><span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> nextProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> prevProps<span class="token punctuation">.</span>label <span class="token operator">===</span> nextProps<span class="token punctuation">.</span>label<span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Wrap component using \`React.memo()\` and pass \`arePropsEqual\`</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">memo</span><span class="token punctuation">(</span>PercentageStat<span class="token punctuation">,</span> arePropsEqual<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We use the strict equal operator <code>===</code> because we want to check the equality between the values and their types without conversion. For example, <code>&quot;1&quot;</code> and <code>1</code> are not the same. Loose equality between them will return true, <code>&quot;1&quot; == 1 // true</code>. But, strict equality will be false, <code>&quot;1&quot;=== 1 // false</code>. So, we want to perform strict comparisons.</p><h3 id="comparison-with-class-components" tabindex="-1"><a class="header-anchor" href="#comparison-with-class-components"><span>Comparison with class components</span></a></h3><p>The <code>arePropsEqual()</code> function acts very similar to the <code>shouldComponentUpdate()</code> lifecycle method in class components. Note that <code>arePropsEqual</code> works in the opposite way:</p><ul><li><code>shouldComponentUpdate</code> — Returns <code>true</code> to trigger a re-render</li><li><code>arePropsEqual</code> — Returns <code>true</code> to prevent a re-render</li></ul><hr><h2 id="migrating-from-a-purecomponent-class-component-to-a-function" tabindex="-1"><a class="header-anchor" href="#migrating-from-a-purecomponent-class-component-to-a-function"><span>Migrating from a <code>PureComponent</code> class component to a function</span></a></h2><p>It is important to emphasize strongly that class components are no longer recommended in new code. Although React still supports class components, the recommended approach is to use functional components.</p><p>Here’s how to convert a <code>PureComponent</code> class to a modern function component using <code>React.memo</code>.</p><p><code>PureComponent</code> version:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> PureComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Greeting</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Greeting was rendered at&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;, &#39;</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Converted function component with <code>memo</code>:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> memo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> Greeting <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">Greeting</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Greeting was rendered at&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello</span><span class="token punctuation">{</span>name <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;, &#39;</span><span class="token punctuation">}</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token plain-text">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The functional component version achieves the same optimization, but it’s more concise and follows modern React practices.</p><hr><h2 id="important-differences-between-purecomponent-and-react-memo" tabindex="-1"><a class="header-anchor" href="#important-differences-between-purecomponent-and-react-memo"><span>Important differences between <code>PureComponent</code> and <code>React.Memo</code></span></a></h2><p>Below is a brief comparison of <code>pureComponent</code> and <code>React.Memo</code>:</p><table><thead><tr><th>Features</th><th><code>PureComponent</code></th><th><code>React.memo</code></th></tr></thead><tbody><tr><td>State handling</td><td>Compares both props and state</td><td>Only compares props; state changes are automatically optimized</td></tr><tr><td>Props access</td><td>Through <code>this.props</code></td><td>Directly as function parameters</td></tr><tr><td>Import statement</td><td><code>import { PureComponent } from &#39;react&#39;</code></td><td><code>import { memo } from &#39;react&#39;</code></td></tr><tr><td>Component definition</td><td><code>class MyComponent</code> extends <code>PureComponent</code></td><td><code>const MyComponent = memo(function MyComponent)</code></td></tr><tr><td>Lifecycle methods</td><td>Uses class lifecycle methods</td><td>Uses hooks for lifecycle functionality</td></tr><tr><td>Syntax</td><td>More verbose; requires class syntax</td><td>More concise; uses function syntax</td></tr><tr><td>Performance optimization</td><td>Automatic shallow comparison</td><td>Customizable comparison through second argument</td></tr><tr><td>State declaration</td><td><code>this.state = { ... }</code></td><td>Uses <code>useState</code> Hook</td></tr><tr><td>Modern React alignment</td><td>Depreacted approach</td><td>Recommended modern approach</td></tr></tbody></table><p>As developers, knowing when to use a tool is important. It either tells on your optimization or makes your code unnecessarily verbose. Having said this, I will briefly point out when to use memoization and when you really shouldn’t bother about it:</p><ul><li>You <strong>will want</strong> to memoize components that re-render frequently, and components that receive the same props often</li><li>You <strong>won’t want</strong> to memoize simple components (i.e. components that always receive different props), and components that rarely re-render</li></ul><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>With <code>React.memo</code> API, you can now enjoy the performance benefits that come from using functional components together with the optimizations that come with memoizing the components.</p><p>In this article, we covered the <code>React.memo</code> API in detail. First, we covered the differences between functional and class components in React, and then we reviewed pure components, learned how to convert a functional component to a class component, and covered how to convert a class component to a functional component.</p><p>I hope you enjoyed this article. Be sure to leave a comment if you have any questions. Happy coding!</p>`,31)),h(" TODO: add ARTICLE CARD "),t(r,u(d({title:"Pure components in React: Using PureComponent and React.memo",desc:"Learn how to memoize components in React using React.PureComponent and the React.memo API, and cover the fundamentals of React components.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/pure-component-in-react.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const O=g(y,[["render",U]]),N=JSON.parse('{"path":"/blog.logrocket.com/pure-component-in-react.html","title":"Pure components in React: Using PureComponent and React.memo","lang":"en-US","frontmatter":{"lang":"en-US","title":"Pure components in React: Using PureComponent and React.memo","description":"Article(s) > Pure components in React: Using PureComponent and React.memo","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Pure components in React: Using PureComponent and React.memo\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/pure-component-in-react/banner.png\\"],\\"datePublished\\":\\"2025-03-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Glad Chinda\\",\\"url\\":\\"https://blog.logrocket.com/author/gladchinda/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/pure-component-in-react.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Pure components in React: Using PureComponent and React.memo"}],["meta",{"property":"og:description","content":"Article(s) > Pure components in React: Using PureComponent and React.memo"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/pure-component-in-react/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/pure-component-in-react/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Pure components in React: Using PureComponent and React.memo"}],["meta",{"property":"article:author","content":"Glad Chinda"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-03-03T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Pure components in React: Using PureComponent and React.memo"},{"property":"og:description","content":"Pure components in React: Using PureComponent and React.memo"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/pure-component-in-react.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2025-03-03T00:00:00.000Z","isOriginal":false,"author":[{"name":"Glad Chinda","url":"https://blog.logrocket.com/author/gladchinda/"}],"cover":"/assets/image/blog.logrocket.com/pure-component-in-react/banner.png"},"git":{},"readingTime":{"minutes":8.23,"words":2469},"filePathRelative":"blog.logrocket.com/pure-component-in-react.md","copyright":{"author":"Glad Chinda"}}');export{O as comp,N as data};
