import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as e,b as l,t as b,n as g,g as y,w as p,e as a,r as o,o as h}from"./app-BVguHYKu.js";const f={},w={id:"frontmatter-title-관련",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},R={href:"https://learn.microsoft.com/en-us/azure/architecture/patterns/cqrs",target:"_blank",rel:"noopener noreferrer"},q={href:"https://en.wikipedia.org/wiki/Command%E2%80%93query_separation",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://en.wikipedia.org/wiki/Object-Oriented_Software_Construction",target:"_blank",rel:"noopener noreferrer"},A={href:"https://ravendb.net/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/jbogard/MediatR",target:"_blank",rel:"noopener noreferrer"},T={href:"https://refactoring.guru/design-patterns/mediator",target:"_blank",rel:"noopener noreferrer"},x={href:"https://learn.microsoft.com/en-us/ef/core/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/DapperLib/Dapper",target:"_blank",rel:"noopener noreferrer"},D={href:"https://youtu.be/vdi-p9StmG0",target:"_blank",rel:"noopener noreferrer"};function P(r,n){const u=o("VPCard"),i=o("router-link"),d=o("SiteInfo"),t=o("VPIcon"),m=o("VidStack"),c=o("RouteLink");return h(),v("div",null,[s("h1",w,[s("a",C,[s("span",null,b(r.$frontmatter.title)+" 관련",1)])]),e(u,g(y({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[e(i,{to:"#what-exactly-is-cqrs"},{default:p(()=>n[0]||(n[0]=[a("What Exactly is CQRS?")])),_:1,__:[0]})]),s("li",null,[e(i,{to:"#how-is-it-different-from-cqs"},{default:p(()=>n[1]||(n[1]=[a("How Is It Different From CQS?")])),_:1,__:[1]})]),s("li",null,[e(i,{to:"#many-flavors-of-cqrs"},{default:p(()=>n[2]||(n[2]=[a("Many Flavors of CQRS")])),_:1,__:[2]})]),s("li",null,[e(i,{to:"#logical-cqrs-architecture"},{default:p(()=>n[3]||(n[3]=[a("Logical CQRS Architecture")])),_:1,__:[3]})]),s("li",null,[e(i,{to:"#implementing-cqrs-with-mediatr"},{default:p(()=>n[4]||(n[4]=[a("Implementing CQRS With MediatR")])),_:1,__:[4]})]),s("li",null,[e(i,{to:"#closing-thoughts"},{default:p(()=>n[5]||(n[5]=[a("Closing Thoughts")])),_:1,__:[5]})])])]),n[45]||(n[45]=s("hr",null,null,-1)),e(d,{name:"CQRS Pattern With MediatR",desc:"Today I want to show you how to use the CQRS pattern to build fast and scalable applications. The CQRS pattern separates the writes and reads in the application. This separation can be logical or physical and has many benefits. I'm also going to show you how to implement CQRS in your application using MediatR.",url:"https://milanjovanovic.tech/blog/cqrs-pattern-with-mediatr/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_060.png"}),n[46]||(n[46]=l('<p>Today I want to show you how to use the <strong>CQRS</strong> pattern to build fast and scalable applications.</p><p>The CQRS pattern separates the writes and reads in the application.</p><p>This separation can be logical or physical and has many benefits:</p><ul><li>Complexity management</li><li>Improved performance</li><li>Scalability</li><li>Flexibility</li><li>Security</li></ul><p>I&#39;m also going to show you how to implement CQRS in your application using MediatR.</p><p>But first, we have to understand what CQRS is.</p><hr><h2 id="what-exactly-is-cqrs" tabindex="-1"><a class="header-anchor" href="#what-exactly-is-cqrs"><span>What Exactly is CQRS?</span></a></h2>',8)),s("p",null,[s("a",R,[e(t,{icon:"fa-brands fa-microsoft"}),n[6]||(n[6]=a("CQRS"))]),n[7]||(n[7]=a(" stands for ")),n[8]||(n[8]=s("strong",null,"Command Query Responsibility Segregation",-1)),n[9]||(n[9]=a(". The CQRS pattern uses separate models for reading and updating data. The benefits of using CQRS are complexity management, improved performance, scalability, and security."))]),n[47]||(n[47]=s("p",null,"The standard approach for working with a database is using the same model to query and update data. This is simple and works great for most CRUD operations. However, in more complex applications, it becomes difficult to maintain. On the write side, you could have complex business logic and validation in the model. On the read side, you may need to perform many different queries.",-1)),n[48]||(n[48]=s("p",null,"Also, consider how we create the data model. Applying SQL data modeling best practices will give you a normalized database. This is generally fine, but it's optimized for writing.",-1)),n[49]||(n[49]=s("p",null,"Having separate models for commands and queries allows you to scale them independently. The separation could be logical while using the same database. You could split the subsystems for commands and queries into separate services. And you can even have multiple databases optimized for writing or reading data.",-1)),n[50]||(n[50]=s("hr",null,null,-1)),n[51]||(n[51]=s("h2",{id:"how-is-it-different-from-cqs",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#how-is-it-different-from-cqs"},[s("span",null,"How Is It Different From CQS?")])],-1)),s("p",null,[s("a",q,[e(t,{icon:"fa-brands fa-wikipedia-w"}),n[10]||(n[10]=a("CQS"))]),n[12]||(n[12]=a(" stands for ")),n[13]||(n[13]=s("strong",null,"Command Query Separation",-1)),n[14]||(n[14]=a(". It's a term coined by Bertrand Meyer in his book ")),s("a",Q,[e(t,{icon:"fa-brands fa-wikipedia-w"}),n[11]||(n[11]=a("Object-Oriented Software Construction."))])]),n[52]||(n[52]=l('<p>The basic premise of CQS is splitting an object&#39;s methods into <strong>Commands</strong> and <strong>Queries</strong>.</p><ul><li><strong>Commands</strong>: Change the state of a system but don&#39;t return a value</li><li><strong>Queries</strong>: Return a value and don&#39;t change the state of the system (no side effects)</li></ul><p>This doesn&#39;t mean a command can never return a value. A typical example is popping a value from a stack. It returns a value and changes the state of the system. But the intent is what matters here.</p><p>CQS is a <em>principle.</em> You can follow this principle if it makes sense, but be pragmatic.</p><p>CQRS is the evolution of CQS. CQRS works on the architectural level. At the same time, CQS works on the method (or class) level.</p><hr><h2 id="many-flavors-of-cqrs" tabindex="-1"><a class="header-anchor" href="#many-flavors-of-cqrs"><span>Many Flavors of CQRS</span></a></h2><p>Here&#39;s a high-level overview of a CQRS system using multiple databases. Commands update the write database. Then, you need to synchronize the updates with the read database. This introduces eventual consistency to CQRS systems.</p><p>Eventual consistency significantly increases the complexity of your application. You must consider what happens if the synchronization process fails, and have a fault tolerance strategy.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_060/cqrs.png?imwidth=3840" alt="Diagram of a system using CQRS with two databases." tabindex="0" loading="lazy"><figcaption>Diagram of a system using CQRS with two databases.</figcaption></figure><p>There are many flavors of this approach:</p>',11)),s("ul",null,[s("li",null,[n[16]||(n[16]=a("SQL database on the write side and NoSQL database (for example, ")),s("a",A,[e(t,{icon:"fas fa-globe"}),n[15]||(n[15]=a("RavenDB"))]),n[17]||(n[17]=a(") on the read side"))]),n[18]||(n[18]=s("li",null,"Event sourcing on the write side and NoSQL database on the read side",-1)),n[19]||(n[19]=s("li",null,"Using Redis or some other distributed cache on the read side",-1))]),n[53]||(n[53]=s("p",null,"Separating the models for updating and reading data allows you to choose the best database for your requirements.",-1)),n[54]||(n[54]=s("hr",null,null,-1)),n[55]||(n[55]=s("h2",{id:"logical-cqrs-architecture",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#logical-cqrs-architecture"},[s("span",null,"Logical CQRS Architecture")])],-1)),s("p",null,[n[23]||(n[23]=a("How do you apply the CQRS pattern to your system? I prefer using ")),s("a",I,[n[20]||(n[20]=a("MediatR. (")),e(t,{icon:"iconfont icon-github"}),n[21]||(n[21]=s("code",null,"jbogard/MediatR",-1)),n[22]||(n[22]=a(")"))])]),s("p",null,[n[25]||(n[25]=a("MediatR implements the ")),s("a",T,[e(t,{icon:"fas fa-globe"}),n[24]||(n[24]=a("mediator pattern"))]),n[26]||(n[26]=a(" to solve a simple problem - decoupling the in-process sending of messages from handling messages."))]),n[56]||(n[56]=s("p",null,[a("You can extend MediatR's "),s("code",null,"IRequest"),a(" interface with a custom "),s("code",null,"ICommand"),a(" and "),s("code",null,"IQuery"),a(" abstraction. This allows you to define commands and queries in your system explicitly.")],-1)),s("p",null,[n[28]||(n[28]=a("On the write side, I typically use ")),s("a",x,[e(t,{icon:"fa-brands fa-microsoft"}),n[27]||(n[27]=a("EF Core"))]),n[29]||(n[29]=a(" and a rich domain model to encapsulate business logic. The command flow uses EF to load an entity into memory, execute the domain logic, and save the changes to the database."))]),s("p",null,[n[33]||(n[33]=a("On the read side, I want as little indirection as possible. Using ")),s("a",M,[n[30]||(n[30]=a("Dapper (")),e(t,{icon:"iconfont icon-github"}),n[31]||(n[31]=s("code",null,"DapperLib/Dapper",-1)),n[32]||(n[32]=a(")"))]),n[34]||(n[34]=a(" with raw SQL queries is an excellent choice. You can also create views in the database and query them. Alternatively, you could use EF Core to execute queries with projections."))]),n[57]||(n[57]=s("figure",null,[s("img",{src:"https://milanjovanovic.tech/blogs/mnw_060/cqrs_application.png?imwidth=3840",alt:"Diagram of an application using CQRS on the architectural level.",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Diagram of an application using CQRS on the architectural level.")],-1)),n[58]||(n[58]=s("hr",null,null,-1)),n[59]||(n[59]=s("h2",{id:"implementing-cqrs-with-mediatr",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#implementing-cqrs-with-mediatr"},[s("span",null,"Implementing CQRS With MediatR")])],-1)),n[60]||(n[60]=s("p",null,"Implementing CQRS with MediatR has two components:",-1)),n[61]||(n[61]=s("ul",null,[s("li",null,"Defining your command or query class"),s("li",null,"Implementing the respective command or query handler")],-1)),s("p",null,[n[36]||(n[36]=a("I made an in-depth video explaining this process, and you can ")),s("a",D,[e(t,{icon:"fa-brands fa-youtube"}),n[35]||(n[35]=a("watch it here."))])]),e(m,{src:"youtube/vdi-p9StmG0"}),n[62]||(n[62]=s("p",null,[a("You use the "),s("code",null,"ISender"),a(" interface to "),s("code",null,"Send"),a(" the command or query. MediatR takes care of routing the command or query to the respective handler.")],-1)),s("p",null,[n[38]||(n[38]=a("The request will pass through the ")),n[39]||(n[39]=s("em",null,"request pipeline",-1)),n[40]||(n[40]=a(". It's a wrapper around each request, and you can use it to solve cross-cutting concerns with ")),n[41]||(n[41]=s("code",null,"IPipelineBehavior",-1)),n[42]||(n[42]=a(". For example, you can implement ")),e(c,{to:"/milanjovanovic.tech/cqrs-validation-with-mediatr-pipeline-and-fluentvalidation.html"},{default:p(()=>n[37]||(n[37]=[a("validation for commands with FluentValidation.")])),_:1,__:[37]})]),n[63]||(n[63]=l(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;api/bookings&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookingsController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ISender</span> _sender<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">BookingsController</span><span class="token punctuation">(</span><span class="token class-name">ISender</span> sender<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _sender <span class="token operator">=</span> sender<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPut</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;{id}/confirm&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">ConfirmBooking</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">Guid</span> id<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConfirmBookingCommand</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _sender<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>IsFailure<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">BadRequest</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">NoContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here&#39;s an example of a command handler with repositories and a rich domain model:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">ConfirmBookingCommandHandler</span></span>
<span class="line">    <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICommandHandler<span class="token punctuation">&lt;</span>ConfirmBookingCommand<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IDateTimeProvider</span> _dateTimeProvider<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IBookingRepository</span> _bookingRepository<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IUnitOfWork</span> _unitOfWork<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">ConfirmBookingCommandHandler</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">IDateTimeProvider</span> dateTimeProvider<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">IBookingRepository</span> bookingRepository<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">IUnitOfWork</span> unitOfWork<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _dateTimeProvider <span class="token operator">=</span> dateTimeProvider<span class="token punctuation">;</span></span>
<span class="line">        _bookingRepository <span class="token operator">=</span> bookingRepository<span class="token punctuation">;</span></span>
<span class="line">        _unitOfWork <span class="token operator">=</span> unitOfWork<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Result<span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">ConfirmBookingCommand</span> request<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> booking <span class="token operator">=</span> <span class="token keyword">await</span> _bookingRepository<span class="token punctuation">.</span><span class="token function">GetByIdAsync</span><span class="token punctuation">(</span></span>
<span class="line">            request<span class="token punctuation">.</span>BookingId<span class="token punctuation">,</span></span>
<span class="line">            cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>booking <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Failure</span><span class="token punctuation">(</span>BookingErrors<span class="token punctuation">.</span>NotFound<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> booking<span class="token punctuation">.</span><span class="token function">Confirm</span><span class="token punctuation">(</span>_dateTimeProvider<span class="token punctuation">.</span>UtcNow<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>IsFailure<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> _unitOfWork<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here&#39;s an example of a query handler that uses Dapper and raw SQL:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">SearchApartmentsQueryHandler</span></span>
<span class="line">    <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IQueryHandler<span class="token punctuation">&lt;</span>SearchApartmentsQuery<span class="token punctuation">,</span> IReadOnlyList<span class="token punctuation">&lt;</span>ApartmentResponse<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> ActiveBookingStatuses <span class="token operator">=</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>BookingStatus<span class="token punctuation">.</span>Reserved<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>BookingStatus<span class="token punctuation">.</span>Confirmed<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>BookingStatus<span class="token punctuation">.</span>Completed</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ISqlConnectionFactory</span> _sqlConnectionFactory<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">SearchApartmentsQueryHandler</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">ISqlConnectionFactory</span> sqlConnectionFactory<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _sqlConnectionFactory <span class="token operator">=</span> sqlConnectionFactory<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Result<span class="token punctuation">&lt;</span>IReadOnlyList<span class="token punctuation">&lt;</span>ApartmentResponse<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">SearchApartmentsQuery</span> request<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>StartDate <span class="token operator">&gt;</span> request<span class="token punctuation">.</span>EndDate<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>ApartmentResponse<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> _sqlConnectionFactory<span class="token punctuation">.</span><span class="token function">CreateConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> sql <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>&quot;</span>
<span class="line">            SELECT</span>
<span class="line">                a<span class="token punctuation">.</span>id <span class="token class-name">AS</span> Id<span class="token punctuation">,</span></span>
<span class="line">                a<span class="token punctuation">.</span>name <span class="token class-name">AS</span> Name<span class="token punctuation">,</span></span>
<span class="line">                a<span class="token punctuation">.</span>description <span class="token class-name">AS</span> Description<span class="token punctuation">,</span></span>
<span class="line">                a<span class="token punctuation">.</span>price_amount <span class="token class-name">AS</span> Price<span class="token punctuation">,</span></span>
<span class="line">                a<span class="token punctuation">.</span>price_currency <span class="token class-name">AS</span> Currency<span class="token punctuation">,</span></span>
<span class="line">                a<span class="token punctuation">.</span>address_country <span class="token class-name">AS</span> Country<span class="token punctuation">,</span></span>
<span class="line">                a<span class="token punctuation">.</span>address_state <span class="token class-name">AS</span> State<span class="token punctuation">,</span></span>
<span class="line">                a<span class="token punctuation">.</span>address_zip_code <span class="token class-name">AS</span> ZipCode<span class="token punctuation">,</span></span>
<span class="line">                a<span class="token punctuation">.</span>address_city <span class="token class-name">AS</span> City<span class="token punctuation">,</span></span>
<span class="line">                a<span class="token punctuation">.</span>address_street AS Street</span>
<span class="line">            FROM apartments AS a</span>
<span class="line">            WHERE <span class="token return-type class-name">NOT</span> EXISTS</span>
<span class="line">            <span class="token punctuation">(</span></span>
<span class="line">                SELECT <span class="token number">1</span></span>
<span class="line">                FROM bookings AS b</span>
<span class="line">                WHERE</span>
<span class="line">                    b<span class="token punctuation">.</span>apartment_id <span class="token operator">=</span> a<span class="token punctuation">.</span>id AND</span>
<span class="line">                    b<span class="token punctuation">.</span>duration_start <span class="token operator">&lt;=</span> @EndDate AND</span>
<span class="line">                    b<span class="token punctuation">.</span>duration_end <span class="token operator">&gt;=</span> @StartDate AND</span>
<span class="line">                    b<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token function">ANY</span><span class="token punctuation">(</span>@ActiveBookingStatuses<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">)</span></span>
<span class="line">            <span class="token string">&quot;&quot;</span>&quot;<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> apartments <span class="token operator">=</span> <span class="token keyword">await</span> connection</span>
<span class="line">            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">QueryAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApartmentResponse<span class="token punctuation">,</span> AddressResponse<span class="token punctuation">,</span> ApartmentResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">                sql<span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">(</span>apartment<span class="token punctuation">,</span> address<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    apartment<span class="token punctuation">.</span>Address <span class="token operator">=</span> address<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                    <span class="token keyword">return</span> apartment<span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token keyword">new</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    request<span class="token punctuation">.</span>StartDate<span class="token punctuation">,</span></span>
<span class="line">                    request<span class="token punctuation">.</span>EndDate<span class="token punctuation">,</span></span>
<span class="line">                    ActiveBookingStatuses</span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token named-parameter punctuation">splitOn</span><span class="token punctuation">:</span> <span class="token string">&quot;Country&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> apartments<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="closing-thoughts" tabindex="-1"><a class="header-anchor" href="#closing-thoughts"><span>Closing Thoughts</span></a></h2><p>Separating commands and queries can improve performance and scalability in the long run. You can optimize commands and queries differently based on your requirements.</p><p>Commands encapsulate complex business logic and validation. Using EF Core and a rich domain model is an excellent solution.</p><p>Queries are all about performance, so you want to use what&#39;s fastest. This could be raw SQL queries with Dapper, EF Core projections, or Redis.</p>`,10)),s("p",null,[n[44]||(n[44]=a("If you want the system I use to build scalable applications with CQRS and MediatR, check out ")),e(c,{to:"/milanjovanovic.tech/pragmatic-clean-architecture/"},{default:p(()=>n[43]||(n[43]=[s("strong",null,"Pragmatic Clean Architecture.",-1)])),_:1,__:[43]})]),n[64]||(n[64]=s("p",null,"Stay awesome!",-1))])}const E=k(f,[["render",P]]),F=JSON.parse('{"path":"/milanjovanovic.tech/cqrs-pattern-with-mediatr.html","title":"CQRS Pattern With MediatR","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"CQRS Pattern With MediatR","description":"Article(s) > CQRS Pattern With MediatR","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CQRS Pattern With MediatR\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_060/cqrs.png?imwidth=3840\\",\\"https://milanjovanovic.tech/blogs/mnw_060/cqrs_application.png?imwidth=3840\\"],\\"datePublished\\":\\"2023-10-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/cqrs-pattern-with-mediatr.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"CQRS Pattern With MediatR"}],["meta",{"property":"og:description","content":"Article(s) > CQRS Pattern With MediatR"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_060.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_060.png"}],["meta",{"name":"twitter:image:alt","content":"CQRS Pattern With MediatR"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-10-21T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > CQRS Pattern With MediatR"},{"property":"og:description","content":"CQRS Pattern With MediatR"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/cqrs-pattern-with-mediatr.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-10-21T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_060.png"},"git":{},"readingTime":{"minutes":4.87,"words":1460},"filePathRelative":"milanjovanovic.tech/cqrs-pattern-with-mediatr.md","copyright":{"author":"Milan Jovanović"}}');export{E as comp,F as data};
