import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as e,f as t,b as i,a as y,t as k,n as d,g as c,w as a,e as s,r as l,o as b}from"./app-BVguHYKu.js";const f={},w={id:"frontmatter-title-관련",tabindex:"-1"},q={class:"header-anchor",href:"#frontmatter-title-관련"},I={class:"table-of-contents"},T={href:"https://en.wikipedia.org/wiki/REST",target:"_blank",rel:"noopener noreferrer"},A={href:"https://medium.com/good-api/api-change-management-2fe5bba32e9b",target:"_blank",rel:"noopener noreferrer"},P={href:"https://teaforwomen.com/cyberincident",target:"_blank",rel:"noopener noreferrer"},x={href:"https://letsencrypt.org/",target:"_blank",rel:"noopener noreferrer"};function E(m,n){const u=l("VPCard"),o=l("router-link"),h=l("SiteInfo"),p=l("VPIcon"),r=l("RouteLink");return b(),v("div",null,[e("h1",w,[e("a",q,[e("span",null,k(m.$frontmatter.title)+" 관련",1)])]),t(u,d(c({title:"System Desgin > Article(s)",desc:"Article(s)",link:"/academics/system-design/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",I,[e("ul",null,[e("li",null,[t(o,{to:"#_1-inconsistent-naming-and-structure"},{default:a(()=>n[0]||(n[0]=[s("1. Inconsistent Naming and Structure")])),_:1,__:[0]})]),e("li",null,[t(o,{to:"#_2-poor-versioning-strategy"},{default:a(()=>n[1]||(n[1]=[s("2. Poor Versioning Strategy")])),_:1,__:[1]})]),e("li",null,[t(o,{to:"#_3-ignoring-pagination-filtering-and-searching"},{default:a(()=>n[2]||(n[2]=[s("3. Ignoring Pagination, Filtering, and Searching")])),_:1,__:[2]})]),e("li",null,[t(o,{to:"#_4-unclear-or-inconsistent-error-handling"},{default:a(()=>n[3]||(n[3]=[s("4. Unclear or Inconsistent Error Handling")])),_:1,__:[3]})]),e("li",null,[t(o,{to:"#_5-ignoring-security-until-it-s-too-late"},{default:a(()=>n[4]||(n[4]=[s("5. Ignoring Security Until It's Too Late")])),_:1,__:[4]})]),e("li",null,[t(o,{to:"#final-thoughts"},{default:a(()=>n[5]||(n[5]=[s("Final Thoughts")])),_:1,__:[5]})])])]),n[38]||(n[38]=e("hr",null,null,-1)),t(h,{name:"The 5 Most Common REST API Design Mistakes (and How to Avoid Them)",desc:"Five REST API design mistakes I see all the time, with practical fixes. Use consistent resource naming, evolve contracts instead of bumping versions, add envelopes, pagination and filtering, return Problem Details, and bake in auth, authz, and rate limits from day one.",url:"https://milanjovanovic.tech/blog/the-5-most-common-rest-api-design-mistakes-and-how-to-avoid-them",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_154.png"}),n[39]||(n[39]=i(`<p>Bad APIs create friction for developers, increase maintenance costs, and make change risky. Good API design doesn&#39;t mean following every &quot;best practice&quot; blindly. It means choosing the right trade-offs for your context and sticking to them.</p><p>Here are 5 common mistakes I see repeatedly, why they cause problems, and how to avoid them with pragmatic, battle-tested solutions.</p><hr><h2 id="_1-inconsistent-naming-and-structure" tabindex="-1"><a class="header-anchor" href="#_1-inconsistent-naming-and-structure"><span>1. Inconsistent Naming and Structure</span></a></h2><p>Naming is the first thing consumers see. Inconsistency here leads to constant documentation lookups, broken expectations, and more bugs.</p><p>Look, we&#39;ve all been there. You successfully call <code>/users</code> and <code>/products</code>, so naturally you try <code>/orders</code>. But nope, this API uses <code>/order-list</code> for some reason. Now you&#39;re back to the docs, breaking your flow, wondering why anyone would do this. Multiply this friction by dozens of endpoints, and you&#39;ve built an API that makes developers want to flip tables.</p><p>I get it, deep URL hierarchies like <code>/users/{id}/habits/{habitId}/entries/{entryId}/comments/{commentId}</code> feel satisfying. They mirror your beautiful domain model! But here&#39;s the thing: you&#39;ve just <strong>hardcoded your entire data structure</strong> into your URLs. When business requirements change (and they will), you can&#39;t reorganize without breaking clients.</p><p>Plus, what happens when someone only has a comment ID? They need to somehow figure out the user, habit, and entry IDs just to fetch one comment. That&#39;s ridiculous.</p><p>Keep it simple with <strong>plural nouns</strong>: <code>/users</code>, <code>/habits</code>, <code>/entries</code>. No more guessing if it&#39;s <code>user</code> or <code>users</code>.</p><p><strong>Only nest when something truly belongs to something else.</strong> User settings belong to and die with the user, so <code>/users/{id}/settings</code> makes sense. Comments can exist independently, so <code>/users/{id}/posts/{postId}/comments</code> can be simplified.</p><p>Instead, flatten with filters:</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http"><pre><code class="language-http"><span class="line"># Instead of deep nesting</span>
<span class="line">GET /users/{userId}/habits/{habitId}/entries</span>
<span class="line"></span>
<span class="line"># Use filters for flexibility</span>
<span class="line">GET /entries?userId={userId}&amp;habitId={habitId}</span>
<span class="line">GET /entries?habitId={habitId}  # Now you can get entries without knowing the user</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And please, for the love of all that is holy, wrap your arrays:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;e_8YH&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;habitId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;code-review&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;at&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2025-08-08T09:17:34Z&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;unit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;reviews&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;tags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;team&quot;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;e_8Z2&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;habitId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;deep-work&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;at&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2025-08-07T07:00:00Z&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;unit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;pomodoros&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;note&quot;</span><span class="token operator">:</span> <span class="token string">&quot;EF filters optimized&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;total&quot;</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;hasMore&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;nextCursor&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cursor_01J9KaBcd&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I know it feels like pointless boilerplate now, but trust me, when you need to add pagination info six months from now, you&#39;ll thank yourself for not having to break every client that expects a raw array.</p>`,15)),e("p",null,[n[7]||(n[7]=s("Yeah, the ")),e("a",T,[t(p,{icon:"fa-brands fa-wikipedia-w"}),n[6]||(n[6]=s("REST"))]),n[8]||(n[8]=s(` purists will complain that filters aren't "RESTful enough." Let them. Your API will be flexible, maintainable, and actually pleasant to use. I'll take that over conceptual purity any day.`))]),n[40]||(n[40]=e("hr",null,null,-1)),n[41]||(n[41]=e("h2",{id:"_2-poor-versioning-strategy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-poor-versioning-strategy"},[e("span",null,"2. Poor Versioning Strategy")])],-1)),e("p",null,[n[10]||(n[10]=s("Everyone defaults to ")),t(r,{to:"/milanjovanovic.tech/api-versioning-in-aspnetcore.html"},{default:a(()=>n[9]||(n[9]=[e("strong",null,"versioning",-1)])),_:1,__:[9]}),n[11]||(n[11]=s(" (")),n[12]||(n[12]=e("code",null,"/v1/users",-1)),n[13]||(n[13]=s(") thinking they're being smart about future changes. Spoiler: they're not. They're creating a maintenance nightmare."))]),n[42]||(n[42]=i(`<p>Here&#39;s what actually happens when you have v1, v2, and v3 running:</p><ul><li>Every bug needs to be fixed three times</li><li>Every security patch needs three deployments</li><li>Your docs become a choose-your-own-adventure novel</li><li>Support has no idea which version that angry customer is using</li><li>You spend weekends maintaining code you wrote two years ago</li></ul><p>But the worst part? <strong>Versioning makes you lazy</strong>. Instead of thinking &quot;how can I evolve this without breaking clients?&quot; you just think &quot;eh, I&#39;ll bump the version.&quot; Now your clients have to rewrite their entire integration because you wanted to rename a field.</p><p>Watch this disaster unfold:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">v1: GET /users returns {id, name, email}</span>
<span class="line">v2: GET /users returns {id, fullName, emailAddress}  // &quot;looks cleaner!&quot;</span>
<span class="line">v3: GET /users returns {id, firstName, lastName, email}  // &quot;we need split names!&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Congrats, you&#39;re now maintaining three different response formats for the same damn data. That v1 client? They&#39;ll never get new features unless they rewrite everything. Found a critical bug? Hope you enjoy patching it three times!</p><p>Here&#39;s the <strong>radical idea</strong>: <strong>don&#39;t version at all</strong>. I&#39;m serious.</p><p>Add fields, don&#39;t replace them:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token comment">// What you ship first</span></span>
<span class="line"><span class="token punctuation">{</span> <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John Doe&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// What you ship later (keeping the old field)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// Still there! Mark it deprecated in docs</span></span>
<span class="line">  <span class="token property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;lastName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Doe&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Need optional features? Use query parameters:</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http"><pre><code class="language-http"><span class="line">GET /users/{id}?include=habits,entries</span>
<span class="line">GET /users/{id}?format=detailed</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>If you absolutely must make a breaking change (and really think about this), create a new resource:</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http"><pre><code class="language-http"><span class="line"># Old faithful, unchanged</span>
<span class="line">GET /users/{id}</span>
<span class="line"></span>
<span class="line"># New hotness</span>
<span class="line">GET /userProfiles/{id}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When breaking changes are truly unavoidable, at least be a decent human about it. Give people 6-12 months notice. Run both versions in parallel. Write a migration guide that doesn&#39;t suck. And for crying out loud, monitor who&#39;s still using the old stuff so you can reach out before pulling the plug.</p><p>Yes, this means you need to actually think about your API design upfront. You can&#39;t just YOLO field names and fix them later. But that constraint will make you design better APIs, and future-you will buy present-you a beer.</p>`,15)),e("p",null,[n[17]||(n[17]=s("If you want to learn more about this, I recommend reading ")),e("a",A,[n[14]||(n[14]=s("API Change Management (")),t(p,{icon:"fa-brands fa-medium"}),n[15]||(n[15]=e("code",null,"good-api",-1)),n[16]||(n[16]=s(")"))]),n[18]||(n[18]=s("."))]),n[43]||(n[43]=i(`<hr><h2 id="_3-ignoring-pagination-filtering-and-searching" tabindex="-1"><a class="header-anchor" href="#_3-ignoring-pagination-filtering-and-searching"><span>3. Ignoring Pagination, Filtering, and Searching</span></a></h2><p>That <code>GET /entries</code> endpoint works great with your 10 test records. Then you launch, get actual users, and suddenly you&#39;re returning 100,000 entries in a single response. Your API times out, your mobile users on crappy connections hate you, and your cloud bill makes you cry.</p><p>&quot;We&#39;ll add pagination later,&quot; you said. Well, now it&#39;s later, and adding pagination means breaking every client that expects an array. Nice job.</p><p>Without filtering, your clients are downloading thousands of records to find the five they actually need. It&#39;s like making someone download all of Wikipedia to read one article. Your servers are melting, serializing data nobody wants. Your users are burning through their data plans. Everyone loses.</p><p><strong>Filtering</strong> is for when you know exactly what you want:</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http"><pre><code class="language-http"><span class="line">GET /entries?habitId=123&amp;date=2025-08-01&amp;status=completed</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Searching</strong> is for when you kinda know what you want:</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http"><pre><code class="language-http"><span class="line">GET /entries/search?q=morning+run+park</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Don&#39;t try to be clever and combine them. Filtering uses your database indexes efficiently. Searching needs full-text magic. Mix them and you&#39;ll end up with something that does neither well.</p><p>For pagination, you&#39;ve got two choices, and they both kinda suck in different ways.</p><p><strong>Offset/limit</strong> is what everyone starts with:</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http"><pre><code class="language-http"><span class="line">GET /entries?offset=100&amp;limit=50</span>
<span class="line">             # or you can call them skip and take</span>
<span class="line">             # or you can call them page and pageSize</span>
<span class="line">             # use whatever you like best</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s dead simple and lets users jump to page 5, but here&#39;s the fun part: add or delete an item while someone&#39;s paginating, and they&#39;ll either skip entries or see duplicates. Plus, asking for offset=10000 makes your database cry as it counts through all those rows.</p>`,14)),e("p",null,[t(r,{to:"/milanjovanovic.tech/understanding-cursor-pagination-and-why-its-so-fast-deep-dive.html"},{default:a(()=>n[19]||(n[19]=[e("strong",null,"Cursor-based pagination",-1)])),_:1,__:[19]}),n[20]||(n[20]=s(' is the "proper" solution:'))]),n[44]||(n[44]=i(`<div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http"><pre><code class="language-http"><span class="line">GET /entries?limit=50&amp;cursor=eyJpZCI6MTIzfQ==</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Rock solid, no skipped items, consistent performance. But you can&#39;t jump to arbitrary pages and cursors can become invalid if underlying data changes significantly.</p><p>Yeah, implementing all this is a pain. You need cursor encoding, parameter validation, query optimization. But trying to add it after launch? Wouldn&#39;t recommend. Just build it right the first time.</p><hr><h2 id="_4-unclear-or-inconsistent-error-handling" tabindex="-1"><a class="header-anchor" href="#_4-unclear-or-inconsistent-error-handling"><span>4. Unclear or Inconsistent Error Handling</span></a></h2><p><code>{&quot;error&quot;: &quot;An error occurred&quot;}</code> — if you return this, I hate you.</p><p>Seriously, when your API spits out these useless errors, here&#39;s what happens: I try random stuff hoping something works. I add defensive code everywhere because I don&#39;t trust you. I flood your support channel asking what&#39;s wrong. Then I complain about your API on social media (any publicity is good publicity, eh?).</p><p>A good error tells me three things: <strong>what broke</strong>, <strong>why it broke</strong>, and <strong>how to fix it</strong>. Is that so hard?</p>`,8)),e("p",null,[n[22]||(n[22]=s("Stop inventing your own janky error format. Use ")),t(r,{to:"/milanjovanovic.tech/problem-details-for-aspnetcore-apis.html"},{default:a(()=>n[21]||(n[21]=[e("strong",null,"Problem Details",-1)])),_:1,__:[21]}),n[23]||(n[23]=s(" (RFC 9457) like a civilized developer:"))]),n[45]||(n[45]=i(`<div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://api.example.com/errors/validation-failed&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Validation Failed&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;detail&quot;</span><span class="token operator">:</span> <span class="token string">&quot;The request body contains invalid fields&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;instance&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/habits/123&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;errors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;reason&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Must be between 1 and 100 characters&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;frequency&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;reason&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Must be one of: daily, weekly, monthly&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sometimes&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>See how that actually helps me fix the problem? Revolutionary, I know.</p><p>And please use the right status codes. It&#39;s not that hard:</p><ul><li><code>400 Bad Request</code>: You sent garbage</li><li><code>401 Unauthorized</code>: Who are you?</li><li><code>403 Forbidden</code>: I know who you are, but no</li><li><code>404 Not Found</code>: That thing doesn&#39;t exist</li><li><code>409 Conflict</code>: That conflicts with something</li><li><code>422 Unprocessable Entity</code>: I understand what you want, but it&#39;s wrong<br> (<em>I don&#39;t use this personally, and prefer returning 400 for validation failures</em>)</li><li><code>429 Too Many Requests</code>: Slow down, cowboy</li><li><code>500 Internal Server Error</code>: We screwed up</li><li><code>503 Service Unavailable</code>: We&#39;re drowning, try again later</li></ul><p>Now, don&#39;t go leaking your entire stack trace in production like an amateur. Give friendly errors to users, detailed errors in dev/staging, and log the gory details server-side where you can actually use them.</p><hr><h2 id="_5-ignoring-security-until-it-s-too-late" tabindex="-1"><a class="header-anchor" href="#_5-ignoring-security-until-it-s-too-late"><span>5. Ignoring Security Until It&#39;s Too Late</span></a></h2>`,7)),e("p",null,[n[25]||(n[25]=s(`"We'll add auth in phase 2" — famous last words before your API becomes a data buffet for hackers. Ask the `)),e("a",P,[t(p,{icon:"fas fa-globe"}),n[24]||(n[24]=s("Tea app"))]),n[26]||(n[26]=s(" how that worked out for them."))]),n[46]||(n[46]=e("p",null,"Here's what happens when you try to bolt on security later: Every client breaks when you add authentication. That data you've been leaking? It's probably been scraped already. Your compliance audit? Failed. That one security incident? Your users will bring it up for years.",-1)),n[47]||(n[47]=e("p",null,[e("strong",null,"Authentication"),s(" (who are you?) and "),e("strong",null,"Authorization"),s(" (what can you do?) are different things. I've seen so many APIs that check if you're logged in but never check if you should actually access that data. Don't be that person.")],-1)),e("p",null,[t(r,{to:"/milanjovanovic.tech/advanced-rate-limiting-use-cases-in-dotnet.html"},{default:a(()=>n[27]||(n[27]=[e("strong",null,"Rate limiting",-1)])),_:1,__:[27]}),n[28]||(n[28]=s(" isn't just about stopping abuse, it's about fairness. Start simple: 1000 requests per hour per API key. When they hit the limit, return ")),n[29]||(n[29]=e("code",null,"429",-1)),n[30]||(n[30]=s(" with headers showing when they can try again. Then get fancy: different limits for different endpoints, higher limits for paying customers, lower limits for that one client who keeps doing weird stuff."))]),e("p",null,[n[32]||(n[32]=e("strong",null,"HTTPS everywhere",-1)),n[33]||(n[33]=s(`. Yes, even for your internal "no one will ever find this" API. It's 2025, not 2005. `)),e("a",x,[t(p,{icon:"fas fa-globe"}),n[31]||(n[31]=s("Let's Encrypt"))]),n[34]||(n[34]=s(" is free. You have no excuse."))]),n[48]||(n[48]=i('<p>Look, security makes things slower and more complex. Auth checks on every request, encryption overhead, state management for rate limiting, it all adds up. But you know what&#39;s worse? Explaining to your users why their data is being sold on the dark web. Build security in from the start, or prepare for a world of pain.</p><hr><h2 id="final-thoughts" tabindex="-1"><a class="header-anchor" href="#final-thoughts"><span>Final Thoughts</span></a></h2><p>Good API design isn&#39;t about perfection, it&#39;s about making intentional, informed decisions. Every choice is a tradeoff. Consistency might limit flexibility. Security will impact performance. Stability means slower innovation.</p><p>Here&#39;s what actually matters: <strong>know your tradeoffs and own them</strong>. Document why you made these choices (future you will thank you). Stay consistent even when it&#39;s tempting not to. Design for evolution, not some imaginary perfect future. And listen to your users, but don&#39;t turn your API into a frankenstein monster trying to please everyone.</p><p><strong>Your API is a promise to other developers</strong>. Every time you break that promise (with a breaking change, an inconsistent pattern, or a useless error message) you lose their trust. And trust me, developers hold grudges.</p><p>Build the API you&#39;d want to use. Your developers will thank you, your support team will thank you, and honestly, you&#39;ll thank yourself six months from now when you have to maintain this thing.</p>',7)),e("p",null,[n[36]||(n[36]=s("Want to dive deeper? Check out my ")),t(r,{to:"/milanjovanovic.tech/pragmatic-rest-apis/"},{default:a(()=>n[35]||(n[35]=[e("strong",null,"Pragmatic REST APIs",-1)])),_:1,__:[35]}),n[37]||(n[37]=s(" course where I cover all of this (and more)."))]),n[49]||(n[49]=e("hr",null,null,-1)),y(" TODO: add ARTICLE CARD "),t(u,d(c({title:"The 5 Most Common REST API Design Mistakes (and How to Avoid Them)",desc:"Five REST API design mistakes I see all the time, with practical fixes. Use consistent resource naming, evolve contracts instead of bumping versions, add envelopes, pagination and filtering, return Problem Details, and bake in auth, authz, and rate limits from day one.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/the-5-most-common-rest-api-design-mistakes-and-how-to-avoid-them.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const M=g(f,[["render",E]]),R=JSON.parse('{"path":"/milanjovanovic.tech/the-5-most-common-rest-api-design-mistakes-and-how-to-avoid-them.html","title":"The 5 Most Common REST API Design Mistakes (and How to Avoid Them)","lang":"en-US","frontmatter":{"lang":"en-US","title":"The 5 Most Common REST API Design Mistakes (and How to Avoid Them)","description":"Article(s) > The 5 Most Common REST API Design Mistakes (and How to Avoid Them)","icon":"fas fa-pen-ruler","category":["Design","System","Article(s)"],"tag":["blog","milanjovanovic.tech","design","system"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"The 5 Most Common REST API Design Mistakes (and How to Avoid Them)\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_154.png\\"],\\"datePublished\\":\\"2025-08-09T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/the-5-most-common-rest-api-design-mistakes-and-how-to-avoid-them.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"The 5 Most Common REST API Design Mistakes (and How to Avoid Them)"}],["meta",{"property":"og:description","content":"Article(s) > The 5 Most Common REST API Design Mistakes (and How to Avoid Them)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_154.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_154.png"}],["meta",{"name":"twitter:image:alt","content":"The 5 Most Common REST API Design Mistakes (and How to Avoid Them)"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"system"}],["meta",{"property":"article:tag","content":"design"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-08-09T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > The 5 Most Common REST API Design Mistakes (and How to Avoid Them)"},{"property":"og:description","content":"The 5 Most Common REST API Design Mistakes (and How to Avoid Them)"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/the-5-most-common-rest-api-design-mistakes-and-how-to-avoid-them.html"}]],"prev":"/academics/system-design/articles/README.md","date":"2025-08-09T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_154.png"},"git":{},"readingTime":{"minutes":7.92,"words":2375},"filePathRelative":"milanjovanovic.tech/the-5-most-common-rest-api-design-mistakes-and-how-to-avoid-them.md","copyright":{"author":"Milan Jovanović"}}');export{M as comp,R as data};
