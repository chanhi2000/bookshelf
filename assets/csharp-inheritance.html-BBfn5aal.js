import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as a,b as h,a as b,t as w,n as c,g as r,w as e,e as t,r as l,o as g}from"./app-BVguHYKu.js";const y="/bookshelf/assets/image/code-maze.com/csharp-inheritance/12-Hiding_implementation_warning.png",f={},W={id:"frontmatter-title-관련",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-관련"},L={class:"table-of-contents"},M={class:"hint-container details"},N={class:"hint-container info"},S={href:"https://github.com/CodeMazeBlog/csharp-intermediate-module/tree/inheritance",target:"_blank",rel:"noopener noreferrer"};function I(u,n){const o=l("VPCard"),p=l("router-link"),d=l("SiteInfo"),i=l("RouteLink"),k=l("VPIcon");return g(),v("div",null,[s("h1",W,[s("a",C,[s("span",null,w(u.$frontmatter.title)+" 관련",1)])]),a(o,c(r({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",L,[s("ul",null,[s("li",null,[a(p,{to:"#using-inheritance"},{default:e(()=>n[0]||(n[0]=[t("Using Inheritance")])),_:1,__:[0]})]),s("li",null,[a(p,{to:"#calling-constructors-from-the-base-class"},{default:e(()=>n[1]||(n[1]=[t("Calling Constructors from the Base Class")])),_:1,__:[1]})]),s("li",null,[a(p,{to:"#accessing-classes"},{default:e(()=>n[2]||(n[2]=[t("Accessing Classes")])),_:1,__:[2]})]),s("li",null,[a(p,{to:"#declaring-methods-with-the-new-keyword"},{default:e(()=>n[3]||(n[3]=[t("Declaring Methods with the New Keyword")])),_:1,__:[3]})]),s("li",null,[a(p,{to:"#using-the-new-keyword"},{default:e(()=>n[4]||(n[4]=[t("Using the New Keyword")])),_:1,__:[4]})]),s("li",null,[a(p,{to:"#declaring-methods-with-the-virtual-keyword"},{default:e(()=>n[5]||(n[5]=[t("Declaring Methods with the Virtual Keyword")])),_:1,__:[5]})]),s("li",null,[a(p,{to:"#declaring-methods-with-the-override-keyword"},{default:e(()=>n[6]||(n[6]=[t("Declaring Methods with the Override Keyword")])),_:1,__:[6]})]),s("li",null,[a(p,{to:"#rules-to-follow-while-working-with-polymorphic-methods"},{default:e(()=>n[7]||(n[7]=[t("Rules to Follow While Working With Polymorphic Methods")])),_:1,__:[7]})]),s("li",null,[a(p,{to:"#conclusion"},{default:e(()=>n[8]||(n[8]=[t("Conclusion")])),_:1,__:[8]})])])]),n[35]||(n[35]=s("hr",null,null,-1)),a(d,{name:"C# Intermediate - Inheritance",desc:"You will learn about C# Inheritance, how to use base keyword, more about polimorphism with the new, virtual and override keywords and what rules to follow.",url:"https://code-maze.com/csharp-inheritance/",logo:"/assets/image/code-maze.com/favicon.png",preview:"/assets/image/csharp-inheritance/banner.png"}),n[36]||(n[36]=s("p",null,"Inheritance is one of the three key concepts in object-oriented programming. We can use inheritance to avoid repetition when different classes have a number of features in common and are related to each other.",-1)),n[37]||(n[37]=s("p",null,"In this post, we are going to talk about C# inheritance, why is it important and what we can use it for.",-1)),s("details",M,[n[22]||(n[22]=s("summary",null,"This article is part of the series",-1)),s("ul",null,[s("li",null,[a(i,{to:"/code-maze.com/csharp-classes-constructors.html"},{default:e(()=>n[9]||(n[9]=[s("strong",null,"Classes and Constructors",-1)])),_:1,__:[9]})]),s("li",null,[a(i,{to:"/code-maze.com/csharp-properties.html"},{default:e(()=>n[10]||(n[10]=[s("strong",null,"Properties",-1)])),_:1,__:[10]})]),s("li",null,[a(i,{to:"/code-maze.com/csharp-static-members-constants-extension-methods.html"},{default:e(()=>n[11]||(n[11]=[s("strong",null,"Static Members, Constants, and Extension Methods",-1)])),_:1,__:[11]})]),s("li",null,[a(i,{to:"/code-maze.com/csharp-anonymous-nullable-types.html"},{default:e(()=>n[12]||(n[12]=[s("strong",null,"Anonymous and Nullable Types",-1)])),_:1,__:[12]})]),s("li",null,[a(i,{to:"/code-maze.com/csharp-structures.html"},{default:e(()=>n[13]||(n[13]=[s("strong",null,"Structures",-1)])),_:1,__:[13]})]),s("li",null,[a(i,{to:"/code-maze.com/csharp-enumerations.html"},{default:e(()=>n[14]||(n[14]=[s("strong",null,"Enumerations",-1)])),_:1,__:[14]})]),n[21]||(n[21]=s("li",null,"Inheritance (Current article)",-1)),s("li",null,[a(i,{to:"/code-maze.com/csharp-interfaces.html"},{default:e(()=>n[15]||(n[15]=[s("strong",null,"Interfaces",-1)])),_:1,__:[15]})]),s("li",null,[a(i,{to:"/code-maze.com/csharp-abstract-classes.html"},{default:e(()=>n[16]||(n[16]=[s("strong",null,"Abstract Classes",-1)])),_:1,__:[16]})]),s("li",null,[a(i,{to:"/code-maze.com/csharp-generics.html"},{default:e(()=>n[17]||(n[17]=[s("strong",null,"Generics",-1)])),_:1,__:[17]})]),s("li",null,[a(i,{to:"/code-maze.com/csharp-queue-stack-hashtable.html"},{default:e(()=>n[18]||(n[18]=[s("strong",null,"Queue, Stack, Hashtable",-1)])),_:1,__:[18]})]),s("li",null,[a(i,{to:"/code-maze.com/cshart-generic-list-dictionary.html"},{default:e(()=>n[19]||(n[19]=[s("strong",null,"Generic List and Dictionary",-1)])),_:1,__:[19]})]),s("li",null,[a(i,{to:"/code-maze.com/csharp-delegates.html"},{default:e(()=>n[20]||(n[20]=[s("strong",null,"Delegates",-1)])),_:1,__:[20]})])])]),s("p",null,[n[24]||(n[24]=t("If you want to see complete navigation of this tutorial, you can do that here ")),a(i,{to:"/code-maze.com/csharp-intermediate-tutorial-oop.html"},{default:e(()=>n[23]||(n[23]=[s("strong",null,"C# Intermediate Tutorial",-1)])),_:1,__:[23]}),n[25]||(n[25]=t("."))]),s("div",N,[n[31]||(n[31]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[29]||(n[29]=t("To download the source code, you can visit ")),s("a",S,[n[26]||(n[26]=t("Inheritance in C# Source Code (")),a(k,{icon:"iconfont icon-github"}),n[27]||(n[27]=s("code",null,"CodeMazeBlog/csharp-intermediate-module",-1)),n[28]||(n[28]=t(")"))]),n[30]||(n[30]=t("."))])]),n[38]||(n[38]=h(`<hr><h2 id="using-inheritance" tabindex="-1"><a class="header-anchor" href="#using-inheritance"><span>Using Inheritance</span></a></h2><p>We can define inheritance between two classes by using the following syntax:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">DerivedClass</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseClass</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">       </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">DerivedSubClass</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DerivedClass</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What this means is that <code>DerivedSubClass</code> inherits from the <code>DerivedClass</code> and from the <code>BaseClass</code> as well, because <code>DerivedClass</code> inherits from the <code>BaseClass</code>. That way, we can share the class features between multiple classes, even though <strong>the one class can inherit only from one base class</strong>.</p><p>So, let’s create some basic inheritance structure:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Writer</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Writing to a file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLWriter</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Writer</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FormatXMLFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Formating XML file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JSONWriter</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Writer</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FormatJSONFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Formating JSON file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the <code>XMLWriter</code> and <code>JSONWriter</code> classes have they own methods but both of them share the <code>Write()</code> method from the base <code>Writer</code> class.</p><p>So, if we create an object of type <code>XMLWriter</code>, we will be able to access its own method and the method from the base class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Program</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">XMLWriter</span> xmlWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XMLWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        xmlWriter<span class="token punctuation">.</span><span class="token function">FormatXMLFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        xmlWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It goes the same for the <code>JSONWriter</code> class.</p><hr><h2 id="calling-constructors-from-the-base-class" tabindex="-1"><a class="header-anchor" href="#calling-constructors-from-the-base-class"><span>Calling Constructors from the Base Class</span></a></h2><p>From the derived classes, we can access the constructor of a base class. This is used quite common, due to initialization of some properties that are shared between derived classes. We can use the <code>base</code> keyword to execute that:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Writer</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FileName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">Writer</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        FileName <span class="token operator">=</span> fileName<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Writing to a file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLWriter</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Writer</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">XMLWriter</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">:</span><span class="token keyword">base</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FormatXMLFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Formating XML file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JSONWriter</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Writer</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">JSONWriter</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">:</span><span class="token keyword">base</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FormatJSONFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Formating JSON file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Program</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">XMLWriter</span> xmlWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XMLWriter</span><span class="token punctuation">(</span><span class="token string">&quot;xmlFileName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        xmlWriter<span class="token punctuation">.</span><span class="token function">FormatXMLFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        xmlWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>xmlWriter<span class="token punctuation">.</span>FileName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">JSONWriter</span> jsonWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JSONWriter</span><span class="token punctuation">(</span><span class="token string">&quot;jsonFileName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        jsonWriter<span class="token punctuation">.</span><span class="token function">FormatJSONFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        jsonWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>jsonWriter<span class="token punctuation">.</span>FileName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As we can see, we pass a string value to the derived class’s constructors and by using the <code>base</code>keyword, we are passing that string value to the constructor of the base class. In there, we set up the value for the <code>Name</code> property.</p><hr><h2 id="accessing-classes" tabindex="-1"><a class="header-anchor" href="#accessing-classes"><span>Accessing Classes</span></a></h2><p>The inheritance hierarchy means that our <code>XMLWriter</code> (or <code>JSONWriter</code>) class is a special type of the <code>Writer</code>, it has all the Writer’s non-private members, and additional features declared inside the XML(JSON)Writer class. But there are some limitations to this hierarchy.</p><p>Let’s look at the following example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">XMLWriter</span> xml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XMLWriter</span><span class="token punctuation">(</span><span class="token string">&quot;file.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Writer</span> writer <span class="token operator">=</span> xml<span class="token punctuation">;</span></span>
<span class="line">writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ok Write is part of the Writer class</span></span>
<span class="line">writer<span class="token punctuation">.</span><span class="token function">FormatXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//error FormatXML is not part of the Writer class</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This means if we refer to the <code>XMLWriter</code> or <code>JSONWriter</code> object with the <code>Writer</code> object, we can just access the methods declared inside the Writer class.</p><p>There is one more limitation. We can’t assign a higher rank object to a lower rank object:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Writer</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Writer</span><span class="token punctuation">(</span><span class="token string">&quot;any name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">XMLWriter</span> xml <span class="token operator">=</span> writer<span class="token punctuation">;</span> <span class="token comment">//error</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>But we can solve this problem by using the “<code>as</code>” keyword:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">XMLWriter</span> xml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XMLWriter</span><span class="token punctuation">(</span><span class="token string">&quot;any name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Writer</span> writer <span class="token operator">=</span> xml<span class="token punctuation">;</span> <span class="token comment">//writer points to xml</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">XMLWriter</span> newWriter <span class="token operator">=</span> writer <span class="token keyword">as</span> <span class="token class-name">XMLWriter</span><span class="token punctuation">;</span> <span class="token comment">//this is ok now because writer was xml</span></span>
<span class="line">newWriter<span class="token punctuation">.</span><span class="token function">FormatXMLFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="declaring-methods-with-the-new-keyword" tabindex="-1"><a class="header-anchor" href="#declaring-methods-with-the-new-keyword"><span>Declaring Methods with the New Keyword</span></a></h2><p>In the real world project, we often need to have so many different functionalities, and that usually leads to the existence of many different methods, properties etc. Sometimes it is pretty hard to come up with the unique and meaningful name for our identifiers, especially if we have the inheritance hierarchy. Sooner or later we are going to try to reuse a name that is already in use by one of the classes in the higher hierarchy level. If it comes to that (we have two methods with the same name in derived and base class) we are going to receive a warning:</p><figure><img src="`+y+`" alt="Hiding implementation - C# Inheritance" tabindex="0" loading="lazy"><figcaption>Hiding implementation - C# Inheritance</figcaption></figure><hr><h2 id="using-the-new-keyword" tabindex="-1"><a class="header-anchor" href="#using-the-new-keyword"><span>Using the New Keyword</span></a></h2><p>A method in a derived class hides a method in a base class with the same signature. So, as you can see in the picture above, our method <code>SetName</code> exists in the <code>XMLWriter</code> class and <code>Writer</code> class. Since the <code>XMLWriter</code> class inherits from the <code>Writer</code> class it hides an implementation of the <code>SetName</code> method from the <code>Writer</code> class.</p><p>Although our code will compile and run, we should take this warning seriously. It can happen that another class inherits from the <code>XMLWriter</code> class and implements the <code>SetName</code> method. The developer may expect to execute the <code>SetName</code> method from the <code>Writer</code> class (because <code>XMLWriter</code> inherits from the <code>Writer</code>) but this is not a case. The <code>SetName</code> method from the <code>Writer</code> class is hidden by the <code>SetName</code> method from the <code>XMLWriter</code> class.</p><p>If we find ourselves in this kind of situation the best way is to change the method signatures. But if we are sure that we want a behavior like this, we can use the <code>new</code> keyword. The <code>new</code> keyword will simply tell the compiler that we are hundred percent sure in what we are doing and that we don’t want a warning message to appear anymore:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Writer</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FileName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">Writer</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        FileName <span class="token operator">=</span> fileName<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Writing to a file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Setting name in the base Writer class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLWriter</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Writer</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">XMLWriter</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">:</span><span class="token keyword">base</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FormatXMLFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Formating XML file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">new</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Setting name in the XMLWriter class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we don’t have a warning message anymore.</p><hr><h2 id="declaring-methods-with-the-virtual-keyword" tabindex="-1"><a class="header-anchor" href="#declaring-methods-with-the-virtual-keyword"><span>Declaring Methods with the Virtual Keyword</span></a></h2><p>Sometimes, we don’t want to hide an implementation of a method from a base class with the same signature as a method from a derived class. What we want is to provide an opportunity for a different implementation of a method with the same signature in a derived class. So, we want to override our method from a base class with the method inside a derived class.</p><p>A method that is intended to be overridden is called a virtual method. When we talk about overriding and hiding, we need to be clear with those terms. The hide means that we want completely to hide the implementation of a method from the base class, but the override means that we want a different implementation of a method from a base class.</p><p>To create a virtual method we use the <code>virtual</code> keyword:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Writer</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FileName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">Writer</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        FileName <span class="token operator">=</span> fileName<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Writing to a file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Setting name in the base Writer class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CalculateFileSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Calculating file size in a Writer class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="declaring-methods-with-the-override-keyword" tabindex="-1"><a class="header-anchor" href="#declaring-methods-with-the-override-keyword"><span>Declaring Methods with the Override Keyword</span></a></h2><p>If we declare a method as a <code>virtual</code> in our base class, we can create a method in a derived class with the keyword <code>override</code> to declare another implementation of that method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLWriter</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Writer</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">XMLWriter</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">:</span><span class="token keyword">base</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FormatXMLFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Formating XML file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">new</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Setting name in the XMLWriter class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CalculateFileSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Calculating file size in the XMLWriter class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we want, we can call an original implementation of that method in a derived class by using the <code>base</code> keyword:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLWriter</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Writer</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token range operator">..</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CalculateFileSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">CalculateFileSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Calculating file size in the XMLWriter class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All these inheritance actions and different method implementations with the mentioned keywords has its own unique name <strong>polymorphism.</strong></p><hr><h2 id="rules-to-follow-while-working-with-polymorphic-methods" tabindex="-1"><a class="header-anchor" href="#rules-to-follow-while-working-with-polymorphic-methods"><span>Rules to Follow While Working With Polymorphic Methods</span></a></h2><p>There are some important rules which we need to follow when declaring polymorphic methods by using the virtual and override keywords:</p><ul><li>We can’t declare a virtual method as private. Its purpose is to be exposed to a derived class, so making it private is meaningless. Similarly, overridden methods can’t be private because a derived class can’t change the protection level of a method that it inherits</li><li>The signatures of virtual and overridden methods must be identical</li><li>We can override only a virtual method. If we try to override a method that has no virtual keyword, we will get an error</li><li>If we don’t use the override keyword we are not overriding the method we are just hiding it. If this is the behavior we want, we should use the new keyword</li><li>An overridden method is a virtual one as well, so it can be overridden in a further derived class</li></ul><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, we have learned:</p><ul><li>What is inheritance and how to use it</li><li>How to use the new, virtual and override keywords</li><li>Rules of polymorphism in the C# language</li></ul>`,58)),s("p",null,[n[33]||(n[33]=t("In the next article, we are going to talk about ")),a(i,{to:"/code-maze.com/csharp-interfaces.html"},{default:e(()=>n[32]||(n[32]=[s("strong",null,"Interfaces in C#",-1)])),_:1,__:[32]}),n[34]||(n[34]=t("."))]),b(" TODO: add ARTICLE CARD "),a(o,c(r({title:"C# Intermediate - Inheritance",desc:"You will learn about C# Inheritance, how to use base keyword, more about polimorphism with the new, virtual and override keywords and what rules to follow.",link:"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-inheritance.html",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16)])}const X=m(f,[["render",I]]),F=JSON.parse('{"path":"/code-maze.com/csharp-inheritance.html","title":"C# Intermediate - Inheritance","lang":"en-US","frontmatter":{"lang":"en-US","title":"C# Intermediate - Inheritance","description":"Article(s) > C# Intermediate - Inheritance","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","code-maze.com","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C# Intermediate - Inheritance\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-inheritance/12-Hiding_implementation_warning.png\\"],\\"datePublished\\":\\"2018-10-10T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marinko Spasojević\\",\\"url\\":\\"https://code-maze.com/author/marinko/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-inheritance.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"C# Intermediate - Inheritance"}],["meta",{"property":"og:description","content":"Article(s) > C# Intermediate - Inheritance"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-inheritance/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-inheritance/banner.png"}],["meta",{"name":"twitter:image:alt","content":"C# Intermediate - Inheritance"}],["meta",{"property":"article:author","content":"Marinko Spasojević"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2018-10-10T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > C# Intermediate - Inheritance"},{"property":"og:description","content":"C# Intermediate - Inheritance"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-inheritance.html"}]],"prev":"/programming/cs/articles/README.md","date":"2018-10-10T00:00:00.000Z","isOriginal":false,"author":[{"name":"Marinko Spasojević","url":"https://code-maze.com/author/marinko/"}],"cover":"/assets/image/code-maze.com/csharp-inheritance/banner.png"},"git":{},"readingTime":{"minutes":6.16,"words":1847},"filePathRelative":"code-maze.com/csharp-inheritance.md","copyright":{"author":"Marinko Spasojević"}}');export{X as comp,F as data};
