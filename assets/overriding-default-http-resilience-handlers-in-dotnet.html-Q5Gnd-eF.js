import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as e,b as h,a as g,t as f,n as r,g as u,w as t,e as a,r as l,o as b}from"./app-BVguHYKu.js";const y={},T={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},H={class:"table-of-contents"},R={href:"https://github.com/App-vNext/Polly",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/dotnet/extensions/pull/5801",target:"_blank",rel:"noopener noreferrer"};function A(d,n){const p=l("VPCard"),i=l("router-link"),m=l("SiteInfo"),o=l("RouteLink"),c=l("VPIcon");return b(),v("div",null,[s("h1",T,[s("a",w,[s("span",null,f(d.$frontmatter.title)+" 관련",1)])]),e(p,r(u({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",H,[s("ul",null,[s("li",null,[e(i,{to:"#standard-resilience-configuration"},{default:t(()=>n[0]||(n[0]=[a("Standard Resilience Configuration")])),_:1,__:[0]})]),s("li",null,[e(i,{to:"#the-problem"},{default:t(()=>n[1]||(n[1]=[a("The Problem")])),_:1,__:[1]})]),s("li",null,[e(i,{to:"#the-solution"},{default:t(()=>n[2]||(n[2]=[a("The Solution")])),_:1,__:[2]})]),s("li",null,[e(i,{to:"#future-improvements"},{default:t(()=>n[3]||(n[3]=[a("Future Improvements")])),_:1,__:[3]})]),s("li",null,[e(i,{to:"#conclusion"},{default:t(()=>n[4]||(n[4]=[a("Conclusion")])),_:1,__:[4]})])])]),n[20]||(n[20]=s("hr",null,null,-1)),e(m,{name:"Overriding Default HTTP Resilience Handlers in .NET",desc:"While .NET 8's standard resilience handlers provide excellent defaults for HTTP clients, they lack built-in support for overriding these handlers for specific endpoints that require different resilience strategies. This article demonstrates how to implement a custom solution for overriding default handlers and discusses upcoming improvements planned by the .NET team.",url:"https://milanjovanovic.tech/blog/overriding-default-http-resilience-handlers-in-dotnet",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_127.png"}),s("p",null,[n[7]||(n[7]=a("Introducing ")),e(o,{to:"/milanjovanovic.tech/building-resilient-cloud-applications-with-dotnet.html"},{default:t(()=>n[5]||(n[5]=[s("strong",null,".NET 8 resilience packages",-1)])),_:1,__:[5]}),n[8]||(n[8]=a(" built on top of ")),s("a",R,[e(c,{icon:"iconfont icon-github"}),n[6]||(n[6]=s("code",null,"App-vNext/Polly",-1))]),n[9]||(n[9]=a(" has made it much easier to build robust HTTP clients. These packages provide standard resilience handlers that you can easily attach to ")),n[10]||(n[10]=s("code",null,"HttpClient",-1)),n[11]||(n[11]=a(" instances. They implement common patterns like retry, circuit breaker, and timeout policies."))]),n[21]||(n[21]=h(`<p>However, there is a significant limitation: once you configure the standard resilience handlers globally for all clients, there is no built-in way to override them for specific cases. This can be problematic when different endpoints require different resilience strategies.</p><p>In today&#39;s issue, I&#39;ll show you how to fix this and what the .NET team is doing about it.</p><hr><h2 id="standard-resilience-configuration" tabindex="-1"><a class="header-anchor" href="#standard-resilience-configuration"><span>Standard Resilience Configuration</span></a></h2><p>Let&#39;s say you&#39;ve configured default resilience handlers in your application startup. <code>ConfigureHttpClientDefaults</code> is a convenient way to add standard resilience handlers to all <code>HttpClient</code> instances:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ConfigureHttpClientDefaults</span><span class="token punctuation">(</span>http <span class="token operator">=&gt;</span> http<span class="token punctuation">.</span><span class="token function">AddStandardResilienceHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The .NET team runs many large-scale services in production, and they&#39;ve found a standard set of resilience strategies that work well for most scenarios.</p><p>The standard resilience handler combines five strategies to create a resilience pipeline:</p><ul><li>Rate limiter</li><li>Total request timeout</li><li>Retry</li><li>Circuit breaker</li><li>Attempt timeout</li></ul><p>You can customize the standard resilience pipeline by configuring the <code>HttpStandardResilienceOptions</code>.</p><p>Here&#39;s an example of how to configure it:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">ConfigureHttpClientDefaults</span><span class="token punctuation">(</span>http <span class="token operator">=&gt;</span> http<span class="token punctuation">.</span><span class="token function">AddStandardResilienceHandler</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Default is 2 seconds.</span></span>
<span class="line">    options<span class="token punctuation">.</span>Retry<span class="token punctuation">.</span>Delay <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Default is 30 seconds.</span></span>
<span class="line">    options<span class="token punctuation">.</span>TotalRequestTimeout<span class="token punctuation">.</span>Timeout <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Default is 0.1.    options.CircuitBreaker.FailureRatio = 0.2;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Okay, so we have our standard resilience pipeline set up. Now all your <code>HttpClient</code> instances will use these resilience policies.</p><p>But what if you need different retry logic for a specific API endpoint or need to turn off circuit breaking for specific calls?</p><hr><h2 id="the-problem" tabindex="-1"><a class="header-anchor" href="#the-problem"><span>The Problem</span></a></h2><p>Let&#39;s say you have a named <code>HttpClient</code> for calling the GitHub API, and you want to configure specific resilience strategies for it:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddHttpClient</span><span class="token punctuation">(</span><span class="token string">&quot;github&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ConfigureHttpClient</span><span class="token punctuation">(</span>client <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        client<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddResilienceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;custom&quot;</span><span class="token punctuation">,</span> pipeline <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        pipeline<span class="token punctuation">.</span><span class="token function">AddTimeout</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        pipeline<span class="token punctuation">.</span><span class="token function">AddRetry</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpRetryStrategyOptions</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            MaxRetryAttempts <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">            BackoffType <span class="token operator">=</span> DelayBackoffType<span class="token punctuation">.</span>Exponential<span class="token punctuation">,</span></span>
<span class="line">            UseJitter <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">            Delay <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromMilliseconds</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        pipeline<span class="token punctuation">.</span><span class="token function">AddTimeout</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>custom</code> policy won&#39;t be applied because we have a global resilience pipeline that overrides it.</p><p>This is a big oversight in the current implementation of the .NET resilience packages.</p><hr><h2 id="the-solution" tabindex="-1"><a class="header-anchor" href="#the-solution"><span>The Solution</span></a></h2><p>The solution is to create an extension method that clears all handlers from the resilience pipeline. This allows you to remove the default handlers and add your custom ones.</p><p>Here&#39;s how to implement it:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ResilienceHttpClientBuilderExtensions</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IHttpClientBuilder</span> <span class="token function">RemoveAllResilienceHandlers</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IHttpClientBuilder</span> builder<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        builder<span class="token punctuation">.</span><span class="token function">ConfigureAdditionalHttpMessageHandlers</span><span class="token punctuation">(</span><span class="token keyword">static</span> <span class="token punctuation">(</span>handlers<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> handlers<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>handlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token class-name">ResilienceHandler</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    handlers<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> builder<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you can use this extension method to implement custom resilience strategies:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddHttpClient</span><span class="token punctuation">(</span><span class="token string">&quot;github&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ConfigureHttpClient</span><span class="token punctuation">(</span>client <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        client<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">RemoveAllResilienceHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddResilienceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;custom&quot;</span><span class="token punctuation">,</span> pipeline <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Configure the custom resilience pipeline...</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Or use another standard resilience pipeline...</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddHttpClient</span><span class="token punctuation">(</span><span class="token string">&quot;github-hedged&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">RemoveAllResilienceHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddStandardHedgingHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="future-improvements" tabindex="-1"><a class="header-anchor" href="#future-improvements"><span>Future Improvements</span></a></h2>`,29)),s("p",null,[n[15]||(n[15]=a("The .NET team is aware of this limitation, and better support for overriding default resilience handlers is planned for an upcoming release. The ")),s("a",C,[n[12]||(n[12]=a("pull request for this API (")),e(c,{icon:"iconfont icon-github"}),n[13]||(n[13]=s("code",null,"dotnet/extensions",-1)),n[14]||(n[14]=a(")"))]),n[16]||(n[16]=a(" is merged and should be available in a future release."))]),n[22]||(n[22]=s("p",null,[a("Until then, this workaround using "),s("code",null,"RemoveAllResilienceHandlers"),a(" is a drop-in replacement for the missing feature.")],-1)),n[23]||(n[23]=s("hr",null,null,-1)),n[24]||(n[24]=s("h2",{id:"conclusion",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#conclusion"},[s("span",null,"Conclusion")])],-1)),n[25]||(n[25]=s("p",null,"The ability to override default resilience handlers is much needed when building robust distributed systems. While .NET's standard resilience handlers provide excellent defaults, real-world applications often require fine-tuned resilience strategies for different services. The extension method presented here bridges this gap, allowing you to maintain both global defaults and specialized configurations where needed.",-1)),s("p",null,[n[18]||(n[18]=a("Want to dive deeper into building resilient cloud applications? Check out my article about ")),e(o,{to:"/milanjovanovic.tech/building-resilient-cloud-applications-with-dotnet.html"},{default:t(()=>n[17]||(n[17]=[s("strong",null,"building resilient cloud applications with .NET",-1)])),_:1,__:[17]}),n[19]||(n[19]=a("."))]),n[26]||(n[26]=s("p",null,"Good luck out there, and see you next week.",-1)),n[27]||(n[27]=s("hr",null,null,-1)),g(" TODO: add ARTICLE CARD "),e(p,r(u({title:"Overriding Default HTTP Resilience Handlers in .NET",desc:"While .NET 8's standard resilience handlers provide excellent defaults for HTTP clients, they lack built-in support for overriding these handlers for specific endpoints that require different resilience strategies. This article demonstrates how to implement a custom solution for overriding default handlers and discusses upcoming improvements planned by the .NET team.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/overriding-default-http-resilience-handlers-in-dotnet.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const S=k(y,[["render",A]]),E=JSON.parse('{"path":"/milanjovanovic.tech/overriding-default-http-resilience-handlers-in-dotnet.html","title":"Overriding Default HTTP Resilience Handlers in .NET","lang":"en-US","frontmatter":{"lang":"en-US","title":"Overriding Default HTTP Resilience Handlers in .NET","description":"Article(s) > Overriding Default HTTP Resilience Handlers in .NET","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Overriding Default HTTP Resilience Handlers in .NET\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_127.png\\"],\\"datePublished\\":\\"2025-02-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/overriding-default-http-resilience-handlers-in-dotnet.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Overriding Default HTTP Resilience Handlers in .NET"}],["meta",{"property":"og:description","content":"Article(s) > Overriding Default HTTP Resilience Handlers in .NET"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_127.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_127.png"}],["meta",{"name":"twitter:image:alt","content":"Overriding Default HTTP Resilience Handlers in .NET"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-02-01T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Overriding Default HTTP Resilience Handlers in .NET"},{"property":"og:description","content":"Overriding Default HTTP Resilience Handlers in .NET"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/overriding-default-http-resilience-handlers-in-dotnet.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-02-01T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_127.png"},"git":{},"readingTime":{"minutes":3.11,"words":934},"filePathRelative":"milanjovanovic.tech/overriding-default-http-resilience-handlers-in-dotnet.md","copyright":{"author":"Milan Jovanović"}}');export{S as comp,E as data};
