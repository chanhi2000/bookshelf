import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as a,b as r,a as g,t as h,n as c,g as d,w as i,e,r as l,o as b}from"./app-BVguHYKu.js";const f={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},E={class:"table-of-contents"};function x(u,n){const p=l("VPCard"),t=l("router-link"),m=l("SiteInfo"),o=l("VPIcon");return b(),v("div",null,[s("h1",y,[s("a",w,[s("span",null,h(u.$frontmatter.title)+" 관련",1)])]),a(p,c(d({title:"Docker > Article(s)",desc:"Article(s)",link:"/devops/docker/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",E,[s("ul",null,[s("li",null,[a(t,{to:"#the-tooling"},{default:i(()=>n[0]||(n[0]=[e("The Tooling")])),_:1,__:[0]}),s("ul",null,[s("li",null,[a(t,{to:"#system-toolbox"},{default:i(()=>n[1]||(n[1]=[e("System toolbox")])),_:1,__:[1]})]),s("li",null,[a(t,{to:"#unit-tests"},{default:i(()=>n[2]||(n[2]=[e("Unit tests")])),_:1,__:[2]})]),s("li",null,[a(t,{to:"#integration-tests"},{default:i(()=>n[3]||(n[3]=[e("Integration tests")])),_:1,__:[3]})])])]),s("li",null,[a(t,{to:"#creating-the-dockerfile"},{default:i(()=>n[4]||(n[4]=[e("Creating the Dockerfile")])),_:1,__:[4]})]),s("li",null,[a(t,{to:"#creating-the-makefile"},{default:i(()=>n[5]||(n[5]=[e("Creating the Makefile")])),_:1,__:[5]})]),s("li",null,[a(t,{to:"#install-targets"},{default:i(()=>n[6]||(n[6]=[e("Install Targets")])),_:1,__:[6]})]),s("li",null,[a(t,{to:"#docker-targets"},{default:i(()=>n[7]||(n[7]=[e("Docker Targets")])),_:1,__:[7]})]),s("li",null,[a(t,{to:"#test-targets"},{default:i(()=>n[8]||(n[8]=[e("Test Targets")])),_:1,__:[8]})]),s("li",null,[a(t,{to:"#how-to-run-the-containerized-tests"},{default:i(()=>n[9]||(n[9]=[e("How to Run the Containerized Tests")])),_:1,__:[9]})])])]),n[27]||(n[27]=s("hr",null,null,-1)),a(m,{name:"Containerizing Test Tooling: Creating your file and Makefile",desc:"Learn from Docker experts to simplify and advance your app development and management with Docker. Stay up to date on Docker events and new version",url:"https://docker.com/blog/containerizing-test-tooling-creating-your-dockerfile-and-makefile",logo:"https://docker.com/app/uploads/2024/02/cropped-docker-logo-favicon-192x192.png",preview:"https://docker.com/app/uploads/2024/02/docker-default-meta-image-1110x583.png"}),n[28]||(n[28]=r(`<p>We hear a lot about the benefits of containerizing applications, but we do not often hear about the benefits of containerizing the tests of those applications or applications whose purpose is to test an entire system. Running an application’s tests inside containers allows us a greater sense of assurance that our applications are running as expected. Furthermore, packaging tests as a Docker image allows us to quickly run tests across multiple machines and ensure a consistent environment. In this post we’ll go through containerizing a test tooling application as well as containerizing the tooling’s unit and integration tests to demonstrate these benefits.</p><hr><h2 id="the-tooling" tabindex="-1"><a class="header-anchor" href="#the-tooling"><span>The Tooling</span></a></h2><p>The test tooling to be containerized is a set of tools used to stress test the Docker EE stack, which includes the Docker Engine, Universal Control Pane, and Docker Trusted Registry across a current matrix of five operating systems with different configurations. The tooling itself has several key properties:</p><ol><li>Written in Python 3 in its own virtual Python environment</li><li>Uses 2 external client binaries</li><li>Has 3 dependencies on external config files to run the system tests</li><li>Passes its own unit and integration tests</li><li>Collects logs on all system tests</li></ol><p>These properties exist whether the tooling is containerized or not, but we’ll see how containerizing this tooling makes development, code management, and collaboration easier. There is a lot of “test” lingo in this post, so to start from a common base I’ll explain what each type of testing represents for our purposes.</p><h3 id="system-toolbox" tabindex="-1"><a class="header-anchor" href="#system-toolbox"><span>System toolbox</span></a></h3><p>The actual application/tooling. You can think of this as the full application we are going to containerize.</p><h3 id="unit-tests" tabindex="-1"><a class="header-anchor" href="#unit-tests"><span>Unit tests</span></a></h3><p>These are the unit tests for our application. Any external dependencies are mocked; we are going to run our unit tests inside of a container.</p><h3 id="integration-tests" tabindex="-1"><a class="header-anchor" href="#integration-tests"><span>Integration tests</span></a></h3><p>These are the integration tests that rely on a live system. These tests will also be run inside of a container.</p><hr><h2 id="creating-the-dockerfile" tabindex="-1"><a class="header-anchor" href="#creating-the-dockerfile"><span>Creating the Dockerfile</span></a></h2><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> python:3.7.1</span></span>
<span class="line"> </span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./client-binaries/Linux/&lt;binary_1&gt; /usr/local/bin/&lt;binary_1&gt;</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./client-binaries/Linux/docker-18.09.4 /usr/bin/docker</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /system_toolbox</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./pip-requirements/requirements.txt ./proj/requirements.txt</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> pip install -r ./proj/requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./integration-tests ./integration-tests</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./test-cases ./test-cases</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./sut-configs ./sut-configs</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./&lt;binary_1&gt;-configs ./&lt;binary_1&gt;-configs</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./toolbox ./toolbox</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./Makefile ./Makefile</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./README.md ./README.md</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./setup.py ./setup.py</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> make install-dev</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In order to run any application in a container, it needs to be based off of an image. Since the current project we are working with is written in Python 3, we will build off of the official maintained Python image by using the <code>FROM python:3.7.1</code> directive. This is our parent, sometimes referred to as the base, image. We are using the 3.7.1 version of the image which gives us a Debian Linux — also known as stretch — OS. This is because part of our tooling relies on an SSH client which the Alpine Linux version does not include, and because we would like to have the convenience of being able to install Paramiko, the Python SSH module, via Python’s package manager pip.</p><p>As mentioned previously, our project relies on two external client binaries. We include these in our Dockerfile using the <code>COPY &lt;src&gt; &lt;dst&gt;</code> directive. This command will copy the binaries to the filesystem of the image at the specified destination path. A note here about the difference between using <code>COPY</code> and its alternative command <code>ADD</code>. Using <code>COPY</code> is the Docker best-practices approach, whereas <code>ADD</code> has some additional functionality such as moving a tar archive from the source path which will be automatically unpacked as a directory inside of the Docker image. So for our purposes of copying over files or directories and not over-engineering our Dockerfile, <code>COPY</code> is the appropriate command.</p><p>All of our commands beyond adding the client binaries are going to be inside <code>/system_toolbox</code>; therefore, we add a <code>WORKDIR</code> directive set to <code>/system_toolbox</code>. This will set the current working directory in the container to be <code>/system_toolbox</code> and it allows us to clean up some additional text in our Dockerfile. For example, we could write lines 6-16 of the Dockerfile like so:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./integration-tests /system_toolbox/integration-tests</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./test-cases /system_toolbox/test-cases</span></span>
<span class="line"> </span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./sut-configs /system_toolbox/sut-configs</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./&lt;binary_1&gt;-configs /system_toolbox/&lt;binary_1&gt;-configs</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./toolbox /system_toolbox/toolbox</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This will work; however, it’s difficult to read and if there is a change to the parent directory structure, you will have to go in and change this path in every line. Instead we can use the <code>WORKDIR</code> directive to shorten each statement like so:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /system_toolbox</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./pip-requirements/requirements.txt ./proj/requirements.txt</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> pip install -r ./proj/requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./integration-tests ./integration-tests</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./test-cases ./test-cases</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./sut-configs ./sut-configs</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./&lt;binary_1&gt;-configs ./&lt;binary_1&gt;-configs</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./toolbox ./toolbox</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Once the working directory is set, all of the following commands will be executed from that directory unless the working directory is changed. The next two lines in the Dockerfile:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./pip-requirements/requirements.txt ./proj/requirements.txt</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> pip install -r ./proj/requirements.txt</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><p>copy over the Python requirements file and install all of these requirements using the <code>RUN</code> directive. By invoking RUN in this manner, the command following <code>RUN</code> is executed in a shell, which will default to <code>/bin/sh -c</code> in a Linux container.</p><p>The following Dockerfile lines are used by our tooling to set up tests, library code, and necessary configuration files:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token comment"># integration tests to test the tool’s code accuracy</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./integration-tests ./integration-tests</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># system test cases that our tooling runs</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./test-cases ./test-cases</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># config files for our tooling</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./sut-configs ./sut-configs</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># config files for our tooling</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./&lt;binary_1&gt;-configs ./&lt;binary_1&gt;-configs</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># the tooling library</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./toolbox ./toolbox</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>And finally, the last two lines of the Dockerfile:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">COPY</span> ./setup.py ./setup.py</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> make install-dev</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><p>copy over the Python setup script to package our tooling and run <code>make install-dev</code>, the details of which will be explained in the <code>Makefile</code> section.</p><hr><h2 id="creating-the-makefile" tabindex="-1"><a class="header-anchor" href="#creating-the-makefile"><span>Creating the Makefile</span></a></h2><p>Creating a <code>Makefile</code> is often an adventure. In this section we will walk through some of the major components that allow us to run our tooling. We will also look at the unit and integration tests that test our tooling inside of containers. This portion of our <code>Makefile</code> is broken into four sections: Install targets, Docker targets, Test targets, and Utilities. The <code>Makefile</code> excerpt below is followed by an explanation of the first three sections since Utilities target does a version check.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Makefile"><span>Makefile</span></div><div class="language-makefile line-numbers-mode" data-highlighter="prismjs" data-ext="makefile"><pre><code class="language-makefile"><span class="line">MAJOR<span class="token operator">?=</span>0</span>
<span class="line">MINOR<span class="token operator">?=</span>1</span>
<span class="line"> </span>
<span class="line">VERSION<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>MAJOR<span class="token punctuation">)</span>.<span class="token variable">$</span><span class="token punctuation">(</span>MINOR<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">APP_NAME <span class="token operator">=</span> <span class="token string">&quot;system-toolbox&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Our docker Hub account name</span></span>
<span class="line"><span class="token comment"># HUB_NAMESPACE = &quot;&lt;hub_name&lt;&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># location of Dockerfiles</span></span>
<span class="line">DOCKER_FILE_DIR <span class="token operator">=</span> <span class="token string">&quot;dockerfiles&quot;</span></span>
<span class="line">DOCKERFILE <span class="token operator">=</span> <span class="token string">&quot;\${DOCKER_FILE_DIR}/Dockerfile&quot;</span></span>
<span class="line"></span>
<span class="line">IMAGE_NAME <span class="token operator">=</span> <span class="token string">&quot;\${APP_NAME}&quot;</span></span>
<span class="line">CUR_DIR <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">shell</span> echo <span class="token string">&quot;\${PWD}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># For python format checker. Default is 78</span></span>
<span class="line">PEP8_MAX_LINE_LENGTH <span class="token operator">=</span> 99</span>
<span class="line"></span>
<span class="line"><span class="token comment"># unit testing options</span></span>
<span class="line">NOSETEST_OPTS <span class="token operator">=</span> --verbosity<span class="token operator">=</span>2 -<span class="token keyword">-include</span><span class="token operator">=</span><span class="token string">&#39;.*_test.py&#39;</span> --detailed-errors --where<span class="token operator">=</span>toolbox</span>
<span class="line">COVERAGE_OPTS <span class="token operator">=</span> --with-coverage --cover-package<span class="token operator">=</span>toolbox --cover-html --cover-inclusive --cover-tests --cover-erase \\ </span>
<span class="line">--cover-html-dir<span class="token operator">=</span>../test-results/unit-test-code-coverage</span>
<span class="line"></span>
<span class="line"><span class="token comment">#################################</span></span>
<span class="line"><span class="token comment"># Install targets</span></span>
<span class="line"><span class="token comment">#################################</span></span>
<span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> install-dev</span>
<span class="line"><span class="token target symbol">install-dev</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token operator">@</span>echo <span class="token string">&quot;+ $@&quot;</span></span>
<span class="line">  <span class="token operator">@</span>pip install -e .</span>
<span class="line"></span>
<span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> pip-freeze</span>
<span class="line">  <span class="token operator">@</span>echo <span class="token string">&quot;+ $@&quot;</span></span>
<span class="line">  <span class="token operator">@</span>pip freeze <span class="token operator">|</span> grep -v system_toolbox &lt; pip-requirements/requirements.txt</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">#################################</span></span>
<span class="line"><span class="token comment"># Docker targets</span></span>
<span class="line"><span class="token comment">#################################</span></span>
<span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> clean-image</span>
<span class="line"><span class="token target symbol">clean-image</span><span class="token punctuation">:</span> version-check</span>
<span class="line">  <span class="token operator">@</span>echo <span class="token string">&quot;+ $@&quot;</span></span>
<span class="line"><span class="token target symbol">  @docker rmi <span class="token variable">$</span>{HUB_NAMESPACE}/<span class="token variable">$</span>{IMAGE_NAME}</span><span class="token punctuation">:</span>latest  <span class="token operator">|</span><span class="token operator">|</span> true</span>
<span class="line"><span class="token target symbol">  @docker rmi <span class="token variable">$</span>{HUB_NAMESPACE}/<span class="token variable">$</span>{IMAGE_NAME}</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">{</span>VERSION<span class="token punctuation">}</span>  <span class="token operator">|</span><span class="token operator">|</span> true</span>
<span class="line"></span>
<span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> image</span>
<span class="line"><span class="token target symbol">image</span><span class="token punctuation">:</span> version-check</span>
<span class="line">  <span class="token operator">@</span>echo <span class="token string">&quot;+ $@&quot;</span></span>
<span class="line"><span class="token target symbol">  @docker build -t <span class="token variable">$</span>{HUB_NAMESPACE}/<span class="token variable">$</span>{IMAGE_NAME}</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">{</span>VERSION<span class="token punctuation">}</span> -f ./<span class="token variable">$</span><span class="token punctuation">{</span>DOCKERFILE<span class="token punctuation">}</span> .</span>
<span class="line"><span class="token target symbol">  @docker tag <span class="token variable">$</span>{HUB_NAMESPACE}/<span class="token variable">$</span>{IMAGE_NAME}</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">{</span>VERSION<span class="token punctuation">}</span> <span class="token variable">$</span><span class="token punctuation">{</span>HUB_NAMESPACE<span class="token punctuation">}</span>/<span class="token variable">$</span><span class="token punctuation">{</span>IMAGE_NAME<span class="token punctuation">}</span><span class="token punctuation">:</span>latest</span>
<span class="line">  <span class="token operator">@</span>echo <span class="token string">&#39;Done.&#39;</span></span>
<span class="line">  <span class="token operator">@</span>docker images --format <span class="token string">&#39;{{.Repository}}:{{.Tag}}\\t\\t Built: {{.CreatedSince}}\\t\\tSize: {{.Size}}&#39;</span> <span class="token operator">|</span> \\ </span>
<span class="line"><span class="token target symbol">    grep <span class="token variable">$</span>{IMAGE_NAME}</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">{</span>VERSION<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> push</span>
<span class="line"><span class="token target symbol">push</span><span class="token punctuation">:</span> clean-image image</span>
<span class="line">  <span class="token operator">@</span>echo <span class="token string">&quot;+ $@&quot;</span></span>
<span class="line"><span class="token target symbol">  @docker push <span class="token variable">$</span>{HUB_NAMESPACE}/<span class="token variable">$</span>{IMAGE_NAME}</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">{</span>VERSION<span class="token punctuation">}</span></span>
<span class="line"><span class="token target symbol">  @docker push <span class="token variable">$</span>{HUB_NAMESPACE}/<span class="token variable">$</span>{IMAGE_NAME}</span><span class="token punctuation">:</span>latest</span>
<span class="line"></span>
<span class="line"><span class="token comment">#################################</span></span>
<span class="line"><span class="token comment"># test targets</span></span>
<span class="line"><span class="token comment">#################################</span></span>
<span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> test-unit</span>
<span class="line"><span class="token target symbol">test-unit</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token operator">@</span>echo <span class="token string">&quot;+ $@&quot;</span></span>
<span class="line">  nosetests <span class="token variable">$</span><span class="token punctuation">{</span>NOSETEST_OPTS<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> check-fmt</span>
<span class="line"><span class="token comment">#check-fmt: image</span></span>
<span class="line"><span class="token target symbol">check-fmt</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token operator">@</span>echo <span class="token string">&quot;+ $@&quot;</span></span>
<span class="line">  pycodestyle --filename<span class="token operator">=</span><span class="token string">&#39;*.py&#39;</span> --exclude<span class="token operator">=</span><span class="token string">&#39;*.sh,*.md,*.txt,Makefile,*.swp&#39;</span> --max-line-length<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">{</span>PEP8_MAX_LINE_LENGTH<span class="token punctuation">}</span> *</span>
<span class="line"></span>
<span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> test-static</span>
<span class="line"><span class="token target symbol">test-static</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token operator">@</span>echo <span class="token string">&quot;+ $@&quot;</span></span>
<span class="line">  pylint -d duplicate-code test-cases</span>
<span class="line">  pylint  toolbox</span>
<span class="line">  pylint integration-tests</span>
<span class="line"></span>
<span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> test-all</span>
<span class="line"><span class="token target symbol">test-all</span><span class="token punctuation">:</span> check-fmt test-static test-unit</span>
<span class="line"></span>
<span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> test-container</span>
<span class="line"><span class="token target symbol">test-container</span><span class="token punctuation">:</span> image</span>
<span class="line">  <span class="token operator">@</span>echo <span class="token string">&quot;+ $@&quot;</span></span>
<span class="line"><span class="token target symbol">  @docker run --rm --name toolbox-unit-tests <span class="token variable">$</span>{HUB_NAMESPACE}/<span class="token variable">$</span>{IMAGE_NAME}</span><span class="token punctuation">:</span>latest make test-all</span>
<span class="line"><span class="token target symbol">  @docker run --rm --name toolbox-int --volume <span class="token variable">$</span>{CUR_DIR}/results</span><span class="token punctuation">:</span>/root/logs -e REGISTRY_USERNAME<span class="token operator">=</span>foo -e REGISTRY_PASSWORD<span class="token operator">=</span>bar \\ </span>
<span class="line"><span class="token target symbol">    <span class="token variable">$</span>{HUB_NAMESPACE}/<span class="token variable">$</span>{IMAGE_NAME}</span><span class="token punctuation">:</span>latest python ./integration-tests/testbed_validation.py</span>
<span class="line"></span>
<span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> integration-static</span>
<span class="line"><span class="token target symbol">integration-static</span><span class="token punctuation">:</span> image</span>
<span class="line">  <span class="token operator">@</span>echo <span class="token string">&quot;+ $@&quot;</span></span>
<span class="line"><span class="token target symbol">  @docker run --rm --name toolbox-int --volume <span class="token variable">$</span>{CUR_DIR}/results</span><span class="token punctuation">:</span>/root/logs -e REGISTRY_USERNAME<span class="token operator">=</span>foo -e REGISTRY_PASSWORD<span class="token operator">=</span>bar \\ </span>
<span class="line"><span class="token target symbol">    <span class="token variable">$</span>{HUB_NAMESPACE}/<span class="token variable">$</span>{IMAGE_NAME}</span><span class="token punctuation">:</span>latest python ./integration-tests/testbed_validation.py</span>
<span class="line">    <span class="token comment">#@python ./integration-tests/testbed_validation.py</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> integration-testbed-survey</span>
<span class="line"><span class="token target symbol">integration-testbed-survey</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token operator">@</span>echo <span class="token string">&quot;+ $@&quot;</span></span>
<span class="line">  <span class="token operator">@</span>python ./integration-tests/testbed_validation.py --topology-filter<span class="token operator">=</span>poc_ --sut-filter<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">{</span>TESTBED_SURVEY_SUT<span class="token punctuation">}</span> \\ </span>
<span class="line">    --create-system <span class="token variable">$</span><span class="token punctuation">{</span>INTEGRATION_PERSONA<span class="token punctuation">}</span> <span class="token variable">$</span><span class="token punctuation">{</span>DRY_RUN<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">#################################</span></span>
<span class="line"><span class="token comment"># Utilities</span></span>
<span class="line"><span class="token comment">#################################</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> version-check</span>
<span class="line"><span class="token target symbol">version-check</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token operator">@</span>echo <span class="token string">&quot;+ $@&quot;</span></span>
<span class="line">  if [ -z <span class="token string">&quot;\${VERSION}&quot;</span> ]<span class="token punctuation">;</span> then \\</span>
<span class="line">    echo <span class="token string">&quot;VERSION is not set&quot;</span> <span class="token punctuation">;</span> \\</span>
<span class="line">    false <span class="token punctuation">;</span> \\</span>
<span class="line">  <span class="token keyword">else</span> \\</span>
<span class="line">    echo <span class="token string">&quot;VERSION is \${VERSION}&quot;</span><span class="token punctuation">;</span> \\</span>
<span class="line">    fi</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="install-targets" tabindex="-1"><a class="header-anchor" href="#install-targets"><span>Install Targets</span></a></h2><p>The install target has two components. The first, <code>install-dev</code>, is executed from the Dockerfile. When <code>RUN make install-dev</code> is executed in the Dockerfile it runs <code>pip install -e .</code> inside of the container. This is a fun command, and it took me some digging to really grasp the details.</p>`,36)),s("p",null,[n[10]||(n[10]=e("We will take a little aside into Python virtual environments here in order to grasp the convenience of this command. When you’re creating a Python application, it’s common to have a ")),a(o,{icon:"fa-brands fa-python"}),n[11]||(n[11]=s("code",null,"setup.py",-1)),n[12]||(n[12]=e(" file that provides a description of your application that can be consumed by Distutils, which is a mechanism to distribute Python packages and extensions. More specifically from the Python docs “The setup script is the centre of all activity in building, distributing, and installing modules using the Distutils. The main purpose of the setup script is to describe your module distribution to the Distutils, so that the various commands that operate on your modules do the right thing.”"))]),s("p",null,[n[13]||(n[13]=e("But often when using Python, you want to set everything up to run in a virtual environment. It can be a bit cumbersome to have to repeat ")),n[14]||(n[14]=s("code",null,"python setup.py install",-1)),n[15]||(n[15]=e(" after every code change to link your working directory back to your virtual environment, so you can run ")),n[16]||(n[16]=s("code",null,"pip install -e .",-1)),n[17]||(n[17]=e(" in the directory where ")),a(o,{icon:"fa-brands fa-python"}),n[18]||(n[18]=s("code",null,"setup.py",-1)),n[19]||(n[19]=e(" lives. This creates a sudo-symlink between the files where you are making changes and the package in the virtual environment so you have the up-to-date version of your Python application to run."))]),s("p",null,[n[20]||(n[20]=e("The second portion of the Install target, ")),n[21]||(n[21]=s("code",null,"pip-freeze",-1)),n[22]||(n[22]=e(", is fun and slightly easier to grasp. Not necessary to run tests inside of a container, but a handy command to know when developing in Python. When your application accumulates a decent number of packages, it can sometimes be difficult to manage all of the versions on your own in ")),a(o,{icon:"fas fa-file-lines"}),n[23]||(n[23]=s("code",null,"requirements.txt",-1)),n[24]||(n[24]=e(". This command is a great way to obtain all of the package versions that are compatible with your application and automatically update the ")),a(o,{icon:"fas fa-file-lines"}),n[25]||(n[25]=s("code",null,"requirements.txt",-1)),n[26]||(n[26]=e(" for your application."))]),n[29]||(n[29]=r('<hr><h2 id="docker-targets" tabindex="-1"><a class="header-anchor" href="#docker-targets"><span>Docker Targets</span></a></h2><p>The Docker targets will walk through creating and maintaining your image. The first <code>clean-image</code> will run the <code>version-check</code> as a prerequisite and then remove both the latest and chosen version. Getting an error that the image does not exists when we try to remove it should not result in our test tooling shutting down here; therefore, we use the <code>command || true</code> syntax. This boolean function will always return true, which protects against our script from unnecessarily aborting.</p><p>For building and tagging our image we use the <code>image</code> target. This will also perform a prerequisite version check then build the image with the specified <code>HUB_NAMESPACE</code>, <code>IMAGE_NAME</code>, and <code>VERSION</code> from the Dockerfile we created earlier. Then the image is tagged and then <code>docker images</code> is run to confirm that the image was built and tagged correctly.</p><p>And finally, for pushing our image, both <code>clean-image</code> and <code>image</code> are prerequisites. Then both the most recent version as well as the latest tagged images are pushed to Docker Hub. If you are logged into Docker Hub then the push will complete automatically, otherwise you will have to enter your login credentials during this step.</p><hr><h2 id="test-targets" tabindex="-1"><a class="header-anchor" href="#test-targets"><span>Test Targets</span></a></h2><p>The test targets section covers the targets for unit tests, integration tests, and the system tooling for running the application locally and running it in a container.</p><p>The first target <code>test-unit</code> runs our unit tests against our system test code using the Nose testing package for Python, <code>check-fmt</code> uses the Python format-checking package Pycodestyle to check our toolbox code for style conventions, and <code>test-static</code> will run a run the Python linter, Pylint, against our system test cases, our system toolbox code, and our integration tests.</p><p>The last two targets are the ones that will run our tests in a container using the image we created earlier with our Dockerfile. The target <code>test-container</code> will run our unit tests followed by our integration tests. The command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">--name</span> toolbox-unit-tests <span class="token variable">${HUB_NAMESPACE}</span>/<span class="token variable">${IMAGE_NAME}</span>:latest <span class="token function">make</span> test-all</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>uses <code>docker run</code> with the <code>--rm</code> flag to remove the container once the process completes, the <code>--name</code> flag to provide the container with a specific name, <code>:latest</code> to select the latest version of our image <code>${HUB_NAMESPACE}/${IMAGE_NAME}</code>, and sends the command <code>make test-all</code>, which from our <code>Makefile</code> will run <code>check-fmt</code>, <code>test-static</code>, and <code>test-unit</code>.</p><p>The integration tests are run by calling:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">--name</span> toolbox-int <span class="token parameter variable">--volume</span> <span class="token variable">${CUR_DIR}</span>/results:/root/logs <span class="token parameter variable">-e</span> <span class="token assign-left variable">REGISTRY_USERNAME</span><span class="token operator">=</span>foo <span class="token parameter variable">-e</span> <span class="token assign-left variable">REGISTRY_PASSWORD</span><span class="token operator">=</span>bar <span class="token punctuation">\\</span></span>\n<span class="line"><span class="token variable">${HUB_NAMESPACE}</span>/<span class="token variable">${IMAGE_NAME}</span>:latest python ./integration-tests/testbed_validation.py</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This will run the integration tests against the system toolbox. It will also create a Docker volume to transfer any log files created from our application to our local machine to be viewed once the container is removed. Lastly, running <code>integration-static</code> will run solely the static integration tests inside of a container while <code>integration-testbed-survey</code> will run the integration tests with a live system.</p><hr><h2 id="how-to-run-the-containerized-tests" tabindex="-1"><a class="header-anchor" href="#how-to-run-the-containerized-tests"><span>How to Run the Containerized Tests</span></a></h2><p>After this setup we are now able to reap the rewards of our work. We’ll walk through how to run all of our tests inside containers. Let’s say we want to run some system tests against our toolbox. If someone happened to make some toolbox library changes during this time as well, maybe a version of a package changed or they added some library functionality that unknowingly conflicts with another PR in the pipeline, this could lead to the always-fun “…. well it works on my machine” response.</p><p>In order to mitigate this, we can run <code>make test-container</code> which will first run the unit tests from an image that we are confident is fully functioning since it is pushed to our Docker Hub repository. Secondly it will run our integration tests also against a reliable image. This ensures that our tests are run in the same environment across machines which generally leads to faster development and a more enjoyable coding experience. We can also access all of the log files produced by the application while it was running in a container since we have created a volume to link the <code>/root/logs</code> directory to <code>${CUR_DIR}/results</code>.</p><p>Going forward, the ability to run different tests in containers gives us a lot of flexibility. In addition to being able to run tests in consistent environments across different machines and avoid potential conflicts, it fits well into setting up an automatic Jenkins job to run these tests routinely while maintaining consistency in the source code as well as the test code.</p>',20)),g(" TODO: add ARTICLE CARD "),a(p,c(d({title:"Containerizing Test Tooling: Creating your file and Makefile",desc:"Learn from Docker experts to simplify and advance your app development and management with Docker. Stay up to date on Docker events and new version",link:"https://chanhi2000.github.io/bookshelf/docker.com/containerizing-test-tooling-creating-your-dockerfile-and-makefile.html",logo:"https://docker.com/app/uploads/2024/02/cropped-docker-logo-favicon-192x192.png",background:"rgba(29,99,237,0.2)"})),null,16)])}const T=k(f,[["render",x]]),C=JSON.parse('{"path":"/docker.com/containerizing-test-tooling-creating-your-dockerfile-and-makefile.html","title":"Containerizing Test Tooling: Creating your file and Makefile","lang":"en-US","frontmatter":{"lang":"en-US","title":"Containerizing Test Tooling: Creating your file and Makefile","description":"Article(s) > Containerizing Test Tooling: Creating your file and Makefile","icon":"fa-brands fa-docker","category":["DevOps","Docker","Article(s)"],"tag":["blog","docker.com","devops","docker"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Containerizing Test Tooling: Creating your file and Makefile\\",\\"image\\":[\\"https://docker.com/app/uploads/2024/02/docker-default-meta-image-1110x583.png\\"],\\"datePublished\\":\\"2019-06-05T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Veronika Alex\\",\\"url\\":\\"https://docker.com/author/veronika-alex/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/docker.com/containerizing-test-tooling-creating-your-dockerfile-and-makefile.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Containerizing Test Tooling: Creating your file and Makefile"}],["meta",{"property":"og:description","content":"Article(s) > Containerizing Test Tooling: Creating your file and Makefile"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://docker.com/app/uploads/2024/02/docker-default-meta-image-1110x583.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://docker.com/app/uploads/2024/02/docker-default-meta-image-1110x583.png"}],["meta",{"name":"twitter:image:alt","content":"Containerizing Test Tooling: Creating your file and Makefile"}],["meta",{"property":"article:author","content":"Veronika Alex"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"docker.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2019-06-05T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Containerizing Test Tooling: Creating your file and Makefile"},{"property":"og:description","content":"Containerizing Test Tooling: Creating your file and Makefile"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/docker.com/containerizing-test-tooling-creating-your-dockerfile-and-makefile.html"}]],"prev":"/devops/docker/articles/README.md","date":"2019-06-05T00:00:00.000Z","isOriginal":false,"author":[{"name":"Veronika Alex","url":"https://docker.com/author/veronika-alex/"}],"cover":"https://docker.com/app/uploads/2024/02/docker-default-meta-image-1110x583.png"},"git":{},"readingTime":{"minutes":9.55,"words":2866},"filePathRelative":"docker.com/containerizing-test-tooling-creating-your-dockerfile-and-makefile.md","copyright":{"author":"Veronika Alex"}}');export{T as comp,C as data};
