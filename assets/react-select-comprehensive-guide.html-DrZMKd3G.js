import{_ as f}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as y,d as s,f as t,b as l,a as w,t as x,n as d,g as v,w as p,e as a,r as c,o as S}from"./app-BVguHYKu.js";const q="/bookshelf/assets/image/blog.logrocket.com/react-select-comprehensive-guide/banner.png",O={},C={id:"frontmatter-title-관련",tabindex:"-1"},R={class:"header-anchor",href:"#frontmatter-title-관련"},j={class:"table-of-contents"},A={href:"https://react-select.com/upgrade#upgrade-guide",target:"_blank",rel:"noopener noreferrer"},M={href:"https://youtu.be/n02t9wvd6hs",target:"_blank",rel:"noopener noreferrer"},T={class:"hint-container note"},F={href:"https://blog.logrocket.com/author/nelsonmichael/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://react-select.com/props",target:"_blank",rel:"noopener noreferrer"},z={href:"https://react-select.com/home#fixed-options",target:"_blank",rel:"noopener noreferrer"},N={href:"https://react-select.com/styles#inner-components",target:"_blank",rel:"noopener noreferrer"},P={href:"https://react-select.com/components",target:"_blank",rel:"noopener noreferrer"},I={href:"https://react-select.com/styles#cx-and-custom-components",target:"_blank",rel:"noopener noreferrer"},E={href:"https://react-select.com/home",target:"_blank",rel:"noopener noreferrer"};function B(m,n){const k=c("VPCard"),e=c("router-link"),g=c("SiteInfo"),o=c("VPIcon"),b=c("VidStack"),h=c("CodeTabs"),i=c("RouteLink");return S(),y("div",null,[s("h1",C,[s("a",R,[s("span",null,x(m.$frontmatter.title)+" 관련",1)])]),t(k,d(v({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",j,[s("ul",null,[s("li",null,[t(e,{to:"#why-choose-react-select"},{default:p(()=>n[0]||(n[0]=[a("Why choose React Select?")])),_:1,__:[0]})]),s("li",null,[t(e,{to:"#how-to-install-and-set-up-react-select-in-your-react-project"},{default:p(()=>n[1]||(n[1]=[a("How to install and set up React Select in your React project")])),_:1,__:[1]})]),s("li",null,[t(e,{to:"#how-to-enable-multi-select-dropdowns-in-react-select"},{default:p(()=>n[2]||(n[2]=[a("How to enable multi-select dropdowns in React Select")])),_:1,__:[2]})]),s("li",null,[t(e,{to:"#multi-select-with-custom-styling"},{default:p(()=>n[3]||(n[3]=[a("Multi-select with custom styling")])),_:1,__:[3]})]),s("li",null,[t(e,{to:"#handling-async-data-in-react-select"},{default:p(()=>n[4]||(n[4]=[a("Handling async data in React Select")])),_:1,__:[4]})]),s("li",null,[t(e,{to:"#fixed-options"},{default:p(()=>n[5]||(n[5]=[a("Fixed Options")])),_:1,__:[5]})]),s("li",null,[t(e,{to:"#creating-new-options-in-react-select-with-the-creatable-component"},{default:p(()=>n[6]||(n[6]=[a("Creating new options in React Select with the Creatable component")])),_:1,__:[6]})]),s("li",null,[t(e,{to:"#form-integration-with-react-select"},{default:p(()=>n[7]||(n[7]=[a("Form integration with React Select")])),_:1,__:[7]})]),s("li",null,[t(e,{to:"#performance-optimization"},{default:p(()=>n[8]||(n[8]=[a("Performance optimization")])),_:1,__:[8]})]),s("li",null,[t(e,{to:"#react-select-events"},{default:p(()=>n[9]||(n[9]=[a("React Select events")])),_:1,__:[9]})]),s("li",null,[t(e,{to:"#styling-react-select-components"},{default:p(()=>n[10]||(n[10]=[a("Styling React Select components")])),_:1,__:[10]}),s("ul",null,[s("li",null,[t(e,{to:"#the-styles-prop"},{default:p(()=>n[11]||(n[11]=[a("The styles prop")])),_:1,__:[11]})]),s("li",null,[t(e,{to:"#the-classnames-prop"},{default:p(()=>n[12]||(n[12]=[a("The classNames prop")])),_:1,__:[12]})]),s("li",null,[t(e,{to:"#the-classnameprefix-prop"},{default:p(()=>n[13]||(n[13]=[a("The classNamePrefix prop")])),_:1,__:[13]})]),s("li",null,[t(e,{to:"#the-unstyled-prop"},{default:p(()=>n[14]||(n[14]=[a("The unstyled prop")])),_:1,__:[14]})])])]),s("li",null,[t(e,{to:"#conclusion"},{default:p(()=>n[15]||(n[15]=[a("Conclusion")])),_:1,__:[15]})])])]),n[67]||(n[67]=s("hr",null,null,-1)),t(g,{name:"React Select: A comprehensive guide",desc:"React Select offers customization, styling, async data loading, accessibility, and more to build powerful, user-friendly dropdowns in React.",url:"https://blog.logrocket.com/react-select-comprehensive-guide",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/react-select-comprehensive-guide/banner.png"}),n[68]||(n[68]=l('<p>React Select is an open source select control created by Jed Watson with and for React. It was inspired by the shortcomings of the native HTML select control. It offers well-designed and battle-tested components and APIs that help you build powerful yet customizable select components. Some of its features include:</p><ul><li><strong>Autocomplete</strong>: Search as you type</li><li><strong>Single and multi-select</strong>: Select one or multiple options</li><li><strong>Keyboard and touch support</strong>: Navigate with the keyboard or touch to operate</li><li><strong>Asynchronous options</strong>: Load dynamic options on demand</li></ul><figure><img src="'+q+'" alt="React Select: A Comprehensive Guide" tabindex="0" loading="lazy"><figcaption>React Select: A Comprehensive Guide</figcaption></figure><p>In this tutorial, we’ll walk through how to install, use, and customize React Select for modern React projects. We’ll also dive into various configuration options to tailor the component to our specific needs.</p>',4)),s("p",null,[n[18]||(n[18]=a("If you’re using an older version, you should upgrade using the ")),s("a",A,[t(o,{icon:"fa-brands fa-react"}),n[16]||(n[16]=a("upgrade guide"))]),n[19]||(n[19]=a(". You can also check out ")),s("a",M,[t(o,{icon:"fa-brands fa-youtube"}),n[17]||(n[17]=a("our video tutorial on React Select"))]),n[20]||(n[20]=a("."))]),t(b,{src:"youtube/n02t9wvd6hs"}),s("div",T,[n[24]||(n[24]=s("p",{class:"hint-container-title"},"Editor’s note",-1)),s("p",null,[n[22]||(n[22]=a("This article was last updated by ")),s("a",F,[t(o,{icon:"fas fa-globe"}),n[21]||(n[21]=a("Nelson Michael"))]),n[23]||(n[23]=a(" in March 2025."))])]),n[69]||(n[69]=l('<hr><h2 id="why-choose-react-select" tabindex="-1"><a class="header-anchor" href="#why-choose-react-select"><span>Why choose React Select?</span></a></h2><p>The native HTML <code>&lt;select&gt;</code> element has several limitations:</p><ul><li>Limited styling options: The native element is difficult to style consistently across browsers</li><li>No built-in search functionality</li><li>Basic keyboard navigation: While the native <code>&lt;select&gt;</code> does support keyboard navigation, its functionality is basic and less customizable.</li><li>No support for asynchronous options</li></ul><p>React Select addresses these limitations while providing:</p><ul><li>Rich searching and filtering</li><li>Customizable styling and theming</li><li>Advanced keyboard navigation</li><li>Async data loading</li><li>Accessible by default</li><li>Typescript support</li></ul><hr><h2 id="how-to-install-and-set-up-react-select-in-your-react-project" tabindex="-1"><a class="header-anchor" href="#how-to-install-and-set-up-react-select-in-your-react-project"><span>How to install and set up React Select in your React project</span></a></h2><p>React Select works with any React framework. To install the <code>react-select</code> package, run either one of the following commands in your terminal:</p>',9)),t(h,{data:[{id:'<VPIcon icon="fa-brands fa-yarn"/>'},{id:'<VPIcon icon="fa-brands fa-npm"/>'}],active:0,"tab-id":"sh"},{title0:p(({value:u,isActive:r})=>[t(o,{icon:"fa-brands fa-yarn"})]),title1:p(({value:u,isActive:r})=>[t(o,{icon:"fa-brands fa-npm"})]),tab0:p(({value:u,isActive:r})=>n[25]||(n[25]=[s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[s("pre",null,[s("code",{class:"language-bash"},[s("span",{class:"line"},[s("span",{class:"token function"},"yarn"),a(),s("span",{class:"token function"},"add"),a(" react-select")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),tab1:p(({value:u,isActive:r})=>n[26]||(n[26]=[s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[s("pre",null,[s("code",{class:"language-bash"},[s("span",{class:"line"},[s("span",{class:"token function"},"npm"),a(" i react-select")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# OR")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"pnpm"),a(),s("span",{class:"token function"},"install"),a(" react-select")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),n[70]||(n[70]=l(`<p>Using React Select is as easy as adding the canonical <code>Select</code> component and passing it some vital props such as <code>options</code>, <code>onChange</code>, and <code>defaultValue</code>:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> Select <span class="token keyword">from</span> <span class="token string">&#39;react-select&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Option</span> <span class="token punctuation">{</span></span>
<span class="line">  value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  label<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> options<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Option<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;blues&#39;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&#39;Blues&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;rock&#39;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&#39;Rock&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;jazz&#39;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&#39;Jazz&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;orchestra&#39;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&#39;Orchestra&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MusicGenreSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>selectedOption<span class="token punctuation">,</span> setSelectedOption<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>Option <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>Select<span class="token operator">&lt;</span>Option<span class="token operator">&gt;</span></span>
<span class="line">      value<span class="token operator">=</span><span class="token punctuation">{</span>selectedOption<span class="token punctuation">}</span></span>
<span class="line">      onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setSelectedOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">      options<span class="token operator">=</span><span class="token punctuation">{</span>options<span class="token punctuation">}</span></span>
<span class="line">      isClearable</span>
<span class="line">      isSearchable</span>
<span class="line">      placeholder<span class="token operator">=</span><span class="token string">&quot;Select a music genre...&quot;</span></span>
<span class="line">      aria<span class="token operator">-</span>label<span class="token operator">=</span><span class="token string">&quot;Music genre selector&quot;</span></span>
<span class="line">    <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the code snippet above, the select options are defined as music genres and passed into the <code>Select</code> component as props. <code>defaultValue</code> and <code>onChange</code> are wired to the stateful value <code>selectedOption</code> and its updater function, <code>setSelectedOption</code>. The result is a simple <code>Select</code> component:</p><figure><img src="https://blog.logrocket.com/wp-content/uploads/2022/12/react-select-element-music-genre-example.webp" alt="React Select Element Music Genre Example" tabindex="0" loading="lazy"><figcaption>React Select Element Music Genre Example</figcaption></figure>`,4)),s("p",null,[s("a",V,[t(o,{icon:"fas fa-globe"}),n[27]||(n[27]=a("Props are essential to how React Select works"))]),n[28]||(n[28]=a(". They are also essential to customizing it. Apart from the props we passed in our first example, here are some common props you can pass to the ")),n[29]||(n[29]=s("code",null,"Select",-1)),n[30]||(n[30]=a(" component:"))]),n[71]||(n[71]=l(`<div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token comment">/**</span>
<span class="line"> * @props placeholder: Defines the text displayed in the text input</span>
<span class="line"> * @props className: Sets a className attribute on the outer or root component</span>
<span class="line"> * @props classNamePrefix: If provided, all inner components will be given a prefixed className attribute</span>
<span class="line"> * @props autoFocus: Focuses the control when it is mounted</span>
<span class="line"> * @props isMulti: Supports multiple selected options</span>
<span class="line"> * @props noOptionsMessage: Text to display when there are no options found</span>
<span class="line"> * @props menuIsOpen: Opens the dropdown menu by default</span>
<span class="line"> * @props isLoading: Useful for async operations. For example, to indicate a loading state during a search</span>
<span class="line">*/</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Select</span></span></span>
<span class="line">  <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span></span>
<span class="line">  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Select music genre<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>adebiyi<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name">classNamePrefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logrocket<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name">autoFocus</span></span>
<span class="line">  <span class="token attr-name">isMulti</span></span>
<span class="line">  <span class="token attr-name">noOptionsMessage</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> inputValue <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">No result found for &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>inputValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span></span></span>
<span class="line"><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="how-to-enable-multi-select-dropdowns-in-react-select" tabindex="-1"><a class="header-anchor" href="#how-to-enable-multi-select-dropdowns-in-react-select"><span>How to enable multi-select dropdowns in React Select</span></a></h2><p>React Select can be configured to allow multiple options to be selected in a single <code>Select</code> component. This can be achieved by toggling on the <code>isMulti</code> prop on the <code>Select</code> component:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.tsx"><span>App.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> Select<span class="token punctuation">,</span> <span class="token punctuation">{</span> MultiValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-select&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;blues&quot;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;Blues&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;rock&quot;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;Rock&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;jazz&quot;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;Jazz&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;orchestra&quot;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;Orchestra&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// We now have multiple options. Basically, an array of options.</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>selectedOptions<span class="token punctuation">,</span> setSelectedOptions<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>MultiValue<span class="token operator">&lt;</span><span class="token punctuation">{</span></span>
<span class="line">    value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    label<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Select</span></span></span>
<span class="line">        <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>selectedOptions<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>setSelectedOptions<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>options<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">isMulti</span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><figure><img src="https://blog.logrocket.com/wp-content/uploads/2022/12/react-select-multi-option.webp" alt="React Select Multi Option" tabindex="0" loading="lazy"><figcaption>React Select Multi Option</figcaption></figure><hr><h2 id="multi-select-with-custom-styling" tabindex="-1"><a class="header-anchor" href="#multi-select-with-custom-styling"><span>Multi-select with custom styling</span></a></h2><p>You can also do some styling customization on the multi-select dropdown. Here’s how:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> Select <span class="token keyword">from</span> <span class="token string">&#39;react-select&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Tag</span> <span class="token punctuation">{</span></span>
<span class="line">  value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  label<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> customStyles <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">control</span><span class="token operator">:</span> <span class="token punctuation">(</span>base<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> state<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span>base<span class="token punctuation">,</span></span>
<span class="line">    borderColor<span class="token operator">:</span> state<span class="token punctuation">.</span>isFocused <span class="token operator">?</span> <span class="token string">&#39;#2684FF&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;#ced4da&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    boxShadow<span class="token operator">:</span> state<span class="token punctuation">.</span>isFocused <span class="token operator">?</span> <span class="token string">&#39;0 0 0 1px #2684FF&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-property property">&#39;&amp;:hover&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      borderColor<span class="token operator">:</span> state<span class="token punctuation">.</span>isFocused <span class="token operator">?</span> <span class="token string">&#39;#2684FF&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;#a1a7ae&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">multiValue</span><span class="token operator">:</span> <span class="token punctuation">(</span>base<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span>base<span class="token punctuation">,</span></span>
<span class="line">    backgroundColor<span class="token operator">:</span> data<span class="token punctuation">.</span>color<span class="token punctuation">,</span></span>
<span class="line">    color<span class="token operator">:</span> <span class="token string">&#39;#fff&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">multiValueLabel</span><span class="token operator">:</span> <span class="token punctuation">(</span>base<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span>base<span class="token punctuation">,</span></span>
<span class="line">    color<span class="token operator">:</span> <span class="token string">&#39;inherit&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">TagSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>selectedTags<span class="token punctuation">,</span> setSelectedTags<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>Tag<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> options<span class="token operator">:</span> Tag<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&#39;React&#39;</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&#39;#61dafb&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;typescript&#39;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&#39;TypeScript&#39;</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&#39;#3178c6&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;javascript&#39;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&#39;#f7df1e&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>Select<span class="token operator">&lt;</span>Tag<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">&gt;</span></span>
<span class="line">      isMulti</span>
<span class="line">      options<span class="token operator">=</span><span class="token punctuation">{</span>options<span class="token punctuation">}</span></span>
<span class="line">      value<span class="token operator">=</span><span class="token punctuation">{</span>selectedTags<span class="token punctuation">}</span></span>
<span class="line">      onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setSelectedTags</span><span class="token punctuation">(</span>newValue <span class="token keyword">as</span> Tag<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">      styles<span class="token operator">=</span><span class="token punctuation">{</span>customStyles<span class="token punctuation">}</span></span>
<span class="line">      placeholder<span class="token operator">=</span><span class="token string">&quot;Select tags...&quot;</span></span>
<span class="line">      closeMenuOnSelect<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="handling-async-data-in-react-select" tabindex="-1"><a class="header-anchor" href="#handling-async-data-in-react-select"><span>Handling async data in React Select</span></a></h2><p>React Select’s <code>options</code> props can be static and preselected, as shown in previous examples. They can also be dynamic and asynchronous; that is, generated on demand from an API or a database query. For this use case, React Select offers the <code>Async</code> component from <code>react-select/async</code>:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="UserSelect.tsx"><span>UserSelect.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> AsyncSelect <span class="token keyword">from</span> <span class="token string">&#39;react-select/async&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  label<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">UserSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>selectedUser<span class="token punctuation">,</span> setSelectedUser<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>User <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">loadOptions</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>inputValue<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://api.example.com/users?search=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>inputValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>user<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        value<span class="token operator">:</span> user<span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">        label<span class="token operator">:</span> user<span class="token punctuation">.</span>name</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error loading options:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>AsyncSelect<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span>
<span class="line">      value<span class="token operator">=</span><span class="token punctuation">{</span>selectedUser<span class="token punctuation">}</span></span>
<span class="line">      loadOptions<span class="token operator">=</span><span class="token punctuation">{</span>loadOptions<span class="token punctuation">}</span></span>
<span class="line">      onChange<span class="token operator">=</span><span class="token punctuation">{</span>setSelectedUser<span class="token punctuation">}</span></span>
<span class="line">      isSearchable</span>
<span class="line">      placeholder<span class="token operator">=</span><span class="token string">&quot;Search users...&quot;</span></span>
<span class="line">      loadingMessage<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Searching...&quot;</span><span class="token punctuation">}</span></span>
<span class="line">      noOptionsMessage<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> inputValue <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> </span>
<span class="line">        inputValue <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">No users found for &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>inputValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&quot;Start typing to search...&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The <code>Async</code> component extends the <code>Select</code> component with asynchronous features like loading state.</p><p>The <code>loadOptions</code> prop is an async function or a promise that exposes the search text (input value) and a callback that is automatically called once the input value changes.</p><p>The <code>Async</code> component includes provision for helpful props like:</p><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">cacheOptions: Caching fetched options</span>
<span class="line">defaultOptions: Set default options before the remote options are loaded</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,18)),s("p",null,[n[32]||(n[32]=a("Another component that may come in handy is the ")),s("a",z,[t(o,{icon:"fas fa-globe"}),n[31]||(n[31]=a("Fixed Options"))]),n[33]||(n[33]=a(" component, which makes it possible to have fixed options."))]),n[72]||(n[72]=l(`<hr><h2 id="fixed-options" tabindex="-1"><a class="header-anchor" href="#fixed-options"><span>Fixed Options</span></a></h2><p>In some scenarios, you might want certain selections to remain permanent in a multi-select dropdown — these are “fixed” options that users should not be able to remove.</p><p>In this example, we use React Select’s customization capabilities to style these fixed options distinctively and enforce their permanence through our change handler logic. Here’s an example from the docs:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="FixedOptionsExample.tsx"><span>FixedOptionsExample.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Select<span class="token punctuation">,</span> <span class="token punctuation">{</span> ActionMeta<span class="token punctuation">,</span> OnChangeValue<span class="token punctuation">,</span> StylesConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-select&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ColourOption<span class="token punctuation">,</span> colourOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../data&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Custom styles to visually differentiate fixed options</span></span>
<span class="line"><span class="token keyword">const</span> customStyles<span class="token operator">:</span> StylesConfig<span class="token operator">&lt;</span>ColourOption<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">multiValue</span><span class="token operator">:</span> <span class="token punctuation">(</span>base<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    state<span class="token punctuation">.</span>data<span class="token punctuation">.</span>isFixed <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token operator">...</span>base<span class="token punctuation">,</span> backgroundColor<span class="token operator">:</span> <span class="token string">&#39;gray&#39;</span> <span class="token punctuation">}</span> <span class="token operator">:</span> base<span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">multiValueLabel</span><span class="token operator">:</span> <span class="token punctuation">(</span>base<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    state<span class="token punctuation">.</span>data<span class="token punctuation">.</span>isFixed</span>
<span class="line">      <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token operator">...</span>base<span class="token punctuation">,</span> fontWeight<span class="token operator">:</span> <span class="token string">&#39;bold&#39;</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&#39;white&#39;</span><span class="token punctuation">,</span> paddingRight<span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">:</span> base<span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">multiValueRemove</span><span class="token operator">:</span> <span class="token punctuation">(</span>base<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    state<span class="token punctuation">.</span>data<span class="token punctuation">.</span>isFixed <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token operator">...</span>base<span class="token punctuation">,</span> display<span class="token operator">:</span> <span class="token string">&#39;none&#39;</span> <span class="token punctuation">}</span> <span class="token operator">:</span> base<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Helper function to always position fixed options before non-fixed ones</span></span>
<span class="line"><span class="token keyword">const</span> orderOptions <span class="token operator">=</span> <span class="token punctuation">(</span>values<span class="token operator">:</span> <span class="token keyword">readonly</span> ColourOption<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">readonly</span> ColourOption<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> values<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span>isFixed<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">=&gt;</span> <span class="token operator">!</span>v<span class="token punctuation">.</span>isFixed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">FixedOptionsExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Initialize with a set of fixed and non-fixed options</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>selectedOptions<span class="token punctuation">,</span> setSelectedOptions<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">readonly</span> ColourOption<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token function">orderOptions</span><span class="token punctuation">(</span><span class="token punctuation">[</span>colourOptions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> colourOptions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> colourOptions<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Custom change handler to prevent removal of fixed options</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">    newValue<span class="token operator">:</span> OnChangeValue<span class="token operator">&lt;</span>ColourOption<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">    actionMeta<span class="token operator">:</span> ActionMeta<span class="token operator">&lt;</span>ColourOption<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span>actionMeta<span class="token punctuation">.</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">case</span> <span class="token string">&#39;remove-value&#39;</span><span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">case</span> <span class="token string">&#39;pop-value&#39;</span><span class="token operator">:</span></span>
<span class="line">        <span class="token comment">// Prevent removal if the option is fixed</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMeta<span class="token punctuation">.</span>removedValue<span class="token punctuation">.</span>isFixed<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">case</span> <span class="token string">&#39;clear&#39;</span><span class="token operator">:</span></span>
<span class="line">        <span class="token comment">// When clearing the selection, preserve only fixed options</span></span>
<span class="line">        newValue <span class="token operator">=</span> colourOptions<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span>isFixed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Reorder options to always show fixed ones first</span></span>
<span class="line">    <span class="token function">setSelectedOptions</span><span class="token punctuation">(</span><span class="token function">orderOptions</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Select</span></span></span>
<span class="line">      <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>selectedOptions<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token attr-name">isMulti</span></span>
<span class="line">      <span class="token attr-name">styles</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>customStyles<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token attr-name">isClearable</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>selectedOptions<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>v<span class="token punctuation">.</span>isFixed<span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>colors<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>basic-multi-select<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name">classNamePrefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>select<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>colourOptions<span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="creating-new-options-in-react-select-with-the-creatable-component" tabindex="-1"><a class="header-anchor" href="#creating-new-options-in-react-select-with-the-creatable-component"><span>Creating new options in React Select with the <code>Creatable</code> component</span></a></h2><p>Typically, there is a dead end when there are no options after a search. However, you can choose to let users create a new option. For this use case, React Select offers the <code>Creatable</code> component for static options and <code>AsyncCreatable</code> components for dynamic options.</p><p>Using <code>Creatable</code> is the same as using <code>Select</code>:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.tsx"><span>App.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> Creatable <span class="token keyword">from</span> <span class="token string">&quot;react-select/creatable&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> musicGenres <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;blues&quot;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;Blues&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;rock&quot;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;Rock&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;jazz&quot;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;Jazz&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;orchestra&quot;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;Orchestra&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>selectedOption<span class="token punctuation">,</span> setSelectedOption<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginBlockEnd</span><span class="token operator">:</span> <span class="token string">&quot;1rem&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">&quot;flex&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Selected option:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> </span><span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>selectedOption<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Creatable</span></span> <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>musicGenres<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>setSelectedOption<span class="token punctuation">}</span></span> <span class="token attr-name">isMulti</span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><figure><img src="https://blog.logrocket.com/wp-content/uploads/2025/03/selecting-music-genre.webp" alt="Form For Selecting Music Genre" tabindex="0" loading="lazy"><figcaption>Form For Selecting Music Genre</figcaption></figure><p>And using <code>AsyncCreatable</code> is the same as using <code>Async</code>:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.tsx"><span>App.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> AsyncCreatable <span class="token keyword">from</span> <span class="token string">&quot;react-select/async-creatable&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> musicGenres <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;blues&quot;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;Blues&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;rock&quot;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;Rock&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;jazz&quot;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;Jazz&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;orchestra&quot;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;Orchestra&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">filterMusicGenre</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> musicGenres<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>musicGenre<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">,</span> <span class="token string">&quot;gi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> musicGenre<span class="token punctuation">.</span>label<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>selectedOption<span class="token punctuation">,</span> setSelectedOption<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AsyncCreatable</span></span></span>
<span class="line">        <span class="token attr-name">loadOptions</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">inputValue<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token function">filterMusicGenre</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>setSelectedOption<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">isMulti</span></span>
<span class="line">        <span class="token attr-name">isClearable</span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="form-integration-with-react-select" tabindex="-1"><a class="header-anchor" href="#form-integration-with-react-select"><span>Form integration with React Select</span></a></h2>`,15)),s("p",null,[n[35]||(n[35]=a("Integrating React Select with ")),t(i,{to:"/blog.logrocket.com/react-hook-form-complete-guide.html"},{default:p(()=>n[34]||(n[34]=[s("strong",null,"React Hook Form",-1)])),_:1,__:[34]}),n[36]||(n[36]=a(" simplifies managing form state and validation. The example below shows how to use the ")),n[37]||(n[37]=s("code",null,"Controller",-1)),n[38]||(n[38]=a(" component from React Hook Form to integrate a React Select component seamlessly into your form:"))]),n[73]||(n[73]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="FormSelect.tsx"><span>FormSelect.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useForm<span class="token punctuation">,</span> Controller <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-hook-form&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Select <span class="token keyword">from</span> <span class="token string">&#39;react-select&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Option</span> <span class="token punctuation">{</span></span>
<span class="line">  value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  label<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">FormData</span> <span class="token punctuation">{</span></span>
<span class="line">  category<span class="token operator">:</span> Option <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> options<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;news&#39;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&#39;News&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;sports&#39;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&#39;Sports&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;entertainment&#39;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&#39;Entertainment&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">FormSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> control<span class="token punctuation">,</span> handleSubmit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useForm</span><span class="token generic class-name"><span class="token operator">&lt;</span>FormData<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">onSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> FormData<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">handleSubmit</span><span class="token punctuation">(</span>onSubmit<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Controller</span></span></span>
<span class="line">        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>category<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">control</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>control<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">rules</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token string">&#39;Please select a category&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> field<span class="token punctuation">,</span> <span class="token literal-property property">fieldState</span><span class="token operator">:</span> <span class="token punctuation">{</span> error <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Select</span></span></span>
<span class="line">              <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>field<span class="token punctuation">}</span></span></span>
<span class="line">              <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>options<span class="token punctuation">}</span></span></span>
<span class="line">              <span class="token attr-name">isClearable</span></span>
<span class="line">              <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Select a category...<span class="token punctuation">&quot;</span></span></span>
<span class="line">            <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token punctuation">{</span>error <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>error<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>error<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Submit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="performance-optimization" tabindex="-1"><a class="header-anchor" href="#performance-optimization"><span>Performance optimization</span></a></h2>`,3)),s("p",null,[n[40]||(n[40]=a("For large datasets or frequent updates, optimizing React Select’s performance is crucial. This example demonstrates how to use memoization with ")),t(i,{to:"/blog.logrocket.com/react-usememo-vs-usecallback.html"},{default:p(()=>n[39]||(n[39]=[s("strong",null,[s("code",null,"useMemo"),a(" and "),s("code",null,"useCallback")],-1)])),_:1,__:[39]}),n[41]||(n[41]=a(" to ensure that expensive operations and custom filtering are executed efficiently:"))]),n[74]||(n[74]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="OptimizedSelect.tsx"><span>OptimizedSelect.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useMemo<span class="token punctuation">,</span> useCallback <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Select <span class="token keyword">from</span> <span class="token string">&#39;react-select&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">generateLargeOptionsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Example: generate a list of options dynamically</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    value<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">option-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">    label<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Option </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">CustomOption</span><span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Custom option component logic</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">.</span>innerProps<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>data<span class="token punctuation">.</span>label<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">CustomMultiValue</span><span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Custom multi-value component logic</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">.</span>innerProps<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>data<span class="token punctuation">.</span>label<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">OptimizedSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">generateLargeOptionsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> filterOptions <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>inputValue<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> options<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>option <span class="token operator">=&gt;</span></span>
<span class="line">      option<span class="token punctuation">.</span>label<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> customComponents <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    Option<span class="token operator">:</span> CustomOption<span class="token punctuation">,</span></span>
<span class="line">    MultiValue<span class="token operator">:</span> CustomMultiValue</span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Select</span></span></span>
<span class="line">      <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>options<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token attr-name">filterOption</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>filterOptions<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token attr-name">components</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>customComponents<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token attr-name">isSearchable</span></span>
<span class="line">      <span class="token attr-name">isClearable</span></span>
<span class="line">    <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="react-select-events" tabindex="-1"><a class="header-anchor" href="#react-select-events"><span>React Select events</span></a></h2><p>React Select also exposes several events to manage your select components (<code>Select</code>, <code>Async</code>, etc.). You’ve seen <code>onChange</code> and <code>autoFocus</code>. Some others include:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line">onBlur</span>
<span class="line">onMenuOpen</span>
<span class="line">onMenuClose</span>
<span class="line">onInputChange</span>
<span class="line">onMenuScrollToBottom</span>
<span class="line">onMenuScrollToTop</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These events are describable by name and are fairly straightforward to understand. For example, you could use <code>onBlur</code> to validate the select component. Additionally, if you have a long list of options, you can detect when the menu is scrolled to the bottom or top using <code>onMenuScrollToBottom</code> and <code>onMenuScrollToTop</code>.</p><p>Each of these events will expose the event to the callback function as in the case of <code>onBlur</code> in the code snippet below:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Select</span></span></span>
<span class="line">  <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span></span>
<span class="line">  <span class="token attr-name">onMenuOpen</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Menu is open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">  <span class="token attr-name">onMenuClose</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Menu is close&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">  <span class="token attr-name">onBlur</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">  <span class="token attr-name">onMenuScrollToBottom</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Menu was scrolled to the bottom.&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span></span>
<span class="line"><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="styling-react-select-components" tabindex="-1"><a class="header-anchor" href="#styling-react-select-components"><span>Styling React Select components</span></a></h2>`,10)),s("p",null,[n[43]||(n[43]=a("The ")),n[44]||(n[44]=s("code",null,"Select",-1)),n[45]||(n[45]=a(" component is composed of other child components, each with base styles that can be extended or overridden distinctly. These are ")),s("a",N,[t(o,{icon:"fas fa-globe"}),n[42]||(n[42]=a("components"))]),n[46]||(n[46]=a(" like ")),n[47]||(n[47]=s("code",null,"control",-1)),n[48]||(n[48]=a(", ")),n[49]||(n[49]=s("code",null,"placeholder",-1)),n[50]||(n[50]=a(", ")),n[51]||(n[51]=s("code",null,"options",-1)),n[52]||(n[52]=a(", ")),n[53]||(n[53]=s("code",null,"noOptionsMessage",-1)),n[54]||(n[54]=a(", etc:"))]),n[75]||(n[75]=l(`<figure><img src="https://blog.logrocket.com/wp-content/uploads/2025/03/add-custom-styles-react-select.png" alt="Add Custom Styles React Select" tabindex="0" loading="lazy"><figcaption>Add Custom Styles React Select</figcaption></figure><p>There are three APIs for styling these components: the <code>styles</code> prop, the <code>classNames</code> prop, and the <code>classNamePrefix</code> prop.</p><h3 id="the-styles-prop" tabindex="-1"><a class="header-anchor" href="#the-styles-prop"><span>The <code>styles</code> prop</span></a></h3><p>You can pass an object of callback functions to the <code>styles</code> prop. Each callback function represents a child component of <code>Select</code>, and automatically exposes the corresponding base or default styling and state.</p><div class="hint-container note"><p class="hint-container-title">N.B.</p><p>you don’t have to expressly name the function arguments <code>defaultStyles</code> and <code>state</code>.</p></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.tsx"><span>App.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> Select <span class="token keyword">from</span> <span class="token string">&quot;react-select&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;blues&quot;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;Blues&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;rock&quot;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;Rock&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;jazz&quot;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;Jazz&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&quot;orchestra&quot;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;Orchestra&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> customStyles <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">option</span><span class="token operator">:</span> <span class="token punctuation">(</span>defaultStyles<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// You can log the defaultStyles and state for inspection</span></span>
<span class="line">    <span class="token comment">// You don&#39;t need to spread the defaultStyles</span></span>
<span class="line">    <span class="token operator">...</span>defaultStyles<span class="token punctuation">,</span></span>
<span class="line">    color<span class="token operator">:</span> state<span class="token punctuation">.</span>isSelected <span class="token operator">?</span> <span class="token string">&quot;#212529&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;#fff&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    backgroundColor<span class="token operator">:</span> state<span class="token punctuation">.</span>isSelected <span class="token operator">?</span> <span class="token string">&quot;#a0a0a0&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;#212529&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">control</span><span class="token operator">:</span> <span class="token punctuation">(</span>defaultStyles<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span>defaultStyles<span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// Notice how these are all CSS properties</span></span>
<span class="line">    backgroundColor<span class="token operator">:</span> <span class="token string">&quot;#212529&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    padding<span class="token operator">:</span> <span class="token string">&quot;10px&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    border<span class="token operator">:</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    boxShadow<span class="token operator">:</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">singleValue</span><span class="token operator">:</span> <span class="token punctuation">(</span>defaultStyles<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>defaultStyles<span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&quot;#fff&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>selectedOption<span class="token punctuation">,</span> setSelectedOption<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Select</span></span></span>
<span class="line">        <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>selectedOption<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>setSelectedOption<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>options<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">styles</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>customStyles<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In the code below, the <code>Select</code> component has been styled to have a dark appearance using the <code>control</code>, <code>option</code>, and <code>singleValue</code> child components. Here is the result:</p><figure><img src="https://blog.logrocket.com/wp-content/uploads/2022/12/select-component-dark-mode.png" alt="Select Component Dark Mode" tabindex="0" loading="lazy"><figcaption>Select Component Dark Mode</figcaption></figure><h3 id="the-classnames-prop" tabindex="-1"><a class="header-anchor" href="#the-classnames-prop"><span>The <code>classNames</code> prop</span></a></h3><p>With the <code>classNames</code> props, you can add class names to each child component like so:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Select</span></span></span>
<span class="line">  <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span></span>
<span class="line">  <span class="token attr-name">classNames</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">control</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">border </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token punctuation">.</span>isFocused <span class="token operator">?</span> <span class="token string">&quot;border-red-800&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;border-red-400&quot;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">option</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;menu-item&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line"><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the code snippet above, the <code>control</code> component’s border is styled with respective class names based on the <code>isFocused</code> state of the <code>Select</code> component. This is typically how you’d use Tailwind CSS with React Select.</p><h3 id="the-classnameprefix-prop" tabindex="-1"><a class="header-anchor" href="#the-classnameprefix-prop"><span>The <code>classNamePrefix</code> prop</span></a></h3><p>While the <code>className</code> prop is used to apply a class name on the root element of the <code>Select</code> component, the <code>classNamePrefix</code> is used to namespace every child component:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Select</span></span></span>
<span class="line">  <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>selectedOption<span class="token punctuation">}</span></span></span>
<span class="line">  <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>setSelectedOption<span class="token punctuation">}</span></span></span>
<span class="line">  <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>options<span class="token punctuation">}</span></span></span>
<span class="line">  <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>for-root-component<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name">classNamePrefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>for-child-components<span class="token punctuation">&quot;</span></span></span>
<span class="line"><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The code snippet above, with <code>className</code> and <code>classNamePrefix</code>, will generate a DOM structure similar to this:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>for-root-component react-select-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>for-child-components__control<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>for-child-components__value-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>for-child-components__indicators<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>for-child-components__menu<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>for-child-components__menu-list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>for-child-components__option<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can then target each distinct class name property for styling, for example, in a <code>.css</code> file.</p><h3 id="the-unstyled-prop" tabindex="-1"><a class="header-anchor" href="#the-unstyled-prop"><span>The <code>unstyled</code> prop</span></a></h3><p>If you need to completely restyle the <code>Select</code> component, you can apply the <code>unstyled</code> prop to strip it clean to only the essentials, like so:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Select</span></span></span>
<span class="line">  <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span></span>
<span class="line">  <span class="token attr-name">unstyled</span></span>
<span class="line"><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then you can use one of the three styling APIs mentioned above to restyle <code>Select</code>:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token operator">&lt;</span>Select props</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you use either one of the <code>styles</code> or <code>classNames</code> APIs, you can get access to any custom prop you pass to the <code>Select</code> component through the <code>state</code> argument, like so:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token operator">&lt;</span>Select</span>
<span class="line">  <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span>
<span class="line">  customProps<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token comment">// You can pass a custom prop...</span></span>
<span class="line">  styles<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">control</span><span class="token operator">:</span> <span class="token punctuation">(</span>defaultStyles<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// ...then access the props through \`selectProps\`</span></span>
<span class="line">      <span class="token comment">// You can use it to style the component</span></span>
<span class="line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>selectProps<span class="token punctuation">[</span><span class="token string">&quot;customProps&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">...</span>defaultStyles<span class="token punctuation">,</span></span>
<span class="line">        color<span class="token operator">:</span> state<span class="token punctuation">.</span>isSelected <span class="token operator">?</span> <span class="token string">&quot;#212529&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;#fff&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        backgroundColor<span class="token operator">:</span> state<span class="token punctuation">.</span>isSelected <span class="token operator">?</span> <span class="token string">&quot;#a0a0a0&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;#212529&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25)),s("p",null,[n[57]||(n[57]=a("Effectively styling the ")),n[58]||(n[58]=s("code",null,"Select",-1)),n[59]||(n[59]=a(" requires that you know the ")),s("a",P,[t(o,{icon:"fas fa-globe"}),n[55]||(n[55]=a("component(s)"))]),n[60]||(n[60]=a(" you intend to style and choose one of the styling APIs above to achieve your goal. If you break a component down for your bare metal needs, let ")),s("a",I,[t(o,{icon:"fas fa-globe"}),n[56]||(n[56]=a("cx and custom components"))]),n[61]||(n[61]=a(" be your styling guide."))]),n[76]||(n[76]=s("hr",null,null,-1)),n[77]||(n[77]=s("h2",{id:"conclusion",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#conclusion"},[s("span",null,"Conclusion")])],-1)),n[78]||(n[78]=s("p",null,"React Select is a powerful component that can significantly enhance your application’s user experience. By following this guide and implementing the examples above, you can create accessible, performant, and feature-rich select components that meet modern web application requirements.",-1)),s("p",null,[n[64]||(n[64]=a("For more advanced use cases and detailed API documentation, visit the ")),s("a",E,[t(o,{icon:"fas fa-globe"}),n[62]||(n[62]=a("official React Select documentation"))]),n[65]||(n[65]=a(". If you’re evaluating different select libraries for your project, check out our guide to the ")),t(i,{to:"/blog.logrocket.com/best-react-select-component-libraries.html"},{default:p(()=>n[63]||(n[63]=[s("strong",null,"best React Select component libraries",-1)])),_:1,__:[63]}),n[66]||(n[66]=a("."))]),w(" TODO: add ARTICLE CARD "),t(k,d(v({title:"React Select: A comprehensive guide",desc:"React Select offers customization, styling, async data loading, accessibility, and more to build powerful, user-friendly dropdowns in React.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-select-comprehensive-guide.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const U=f(O,[["render",B]]),H=JSON.parse('{"path":"/blog.logrocket.com/react-select-comprehensive-guide.html","title":"React Select: A comprehensive guide","lang":"en-US","frontmatter":{"lang":"en-US","title":"React Select: A comprehensive guide","description":"Article(s) > React Select: A comprehensive guide","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React Select: A comprehensive guide\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-select-comprehensive-guide/banner.png\\",\\"https://blog.logrocket.com/wp-content/uploads/2022/12/react-select-element-music-genre-example.webp\\",\\"https://blog.logrocket.com/wp-content/uploads/2022/12/react-select-multi-option.webp\\",\\"https://blog.logrocket.com/wp-content/uploads/2025/03/selecting-music-genre.webp\\",\\"https://blog.logrocket.com/wp-content/uploads/2025/03/add-custom-styles-react-select.png\\",\\"https://blog.logrocket.com/wp-content/uploads/2022/12/select-component-dark-mode.png\\"],\\"datePublished\\":\\"2025-03-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Stephen Afam-Osemene\\",\\"url\\":\\"https://blog.logrocket.com/author/stephenafamosemene/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-select-comprehensive-guide.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"React Select: A comprehensive guide"}],["meta",{"property":"og:description","content":"Article(s) > React Select: A comprehensive guide"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-select-comprehensive-guide/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-select-comprehensive-guide/banner.png"}],["meta",{"name":"twitter:image:alt","content":"React Select: A comprehensive guide"}],["meta",{"property":"article:author","content":"Stephen Afam-Osemene"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-03-03T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > React Select: A comprehensive guide"},{"property":"og:description","content":"React Select: A comprehensive guide"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-select-comprehensive-guide.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2025-03-03T00:00:00.000Z","isOriginal":false,"author":[{"name":"Stephen Afam-Osemene","url":"https://blog.logrocket.com/author/stephenafamosemene/"}],"cover":"/assets/image/blog.logrocket.com/react-select-comprehensive-guide/banner.png"},"git":{},"readingTime":{"minutes":10.15,"words":3046},"filePathRelative":"blog.logrocket.com/react-select-comprehensive-guide.md","copyright":{"author":"Stephen Afam-Osemene"}}');export{U as comp,H as data};
