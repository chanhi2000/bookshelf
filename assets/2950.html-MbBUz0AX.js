import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,d as i,f as n,b as s,a as f,t as w,n as g,g as m,w as a,e,r as l,o as C}from"./app-BVguHYKu.js";const b={},k={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"},E={href:"https://ant.design/docs/react/customize-theme",target:"_blank",rel:"noopener noreferrer"},v={class:"hint-container info"},z={href:"https://dev.to/srmagura/why-were-breaking-up-wiht-css-in-js-4g9b",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/aniftyco/awesome-tailwindcss",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/orgs/adobe/projects/19/views/4",target:"_blank",rel:"noopener noreferrer"},S={class:"hint-container info"};function T(h,t){const p=l("VPCard"),o=l("router-link"),d=l("SiteInfo"),r=l("VPIcon");return C(),u("div",null,[i("h1",k,[i("a",y,[i("span",null,w(h.$frontmatter.title)+" 관련",1)])]),n(p,g(m({title:"System Design > Article(s)",desc:"Article(s)",link:"/academics/system-design/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n(p,g(m({title:"TailwindCSS > Article(s)",desc:"Article(s)",link:"/programming/css-tailwind/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),i("nav",A,[i("ul",null,[i("li",null,[n(o,{to:"#디자인-시스템도-하나의-제품이다"},{default:a(()=>t[0]||(t[0]=[e("디자인 시스템도 하나의 제품이다")])),_:1,__:[0]})]),i("li",null,[n(o,{to:"#서비스-특성에-맞춘-전략적-도입"},{default:a(()=>t[1]||(t[1]=[e("서비스 특성에 맞춘 전략적 도입")])),_:1,__:[1]}),i("ul",null,[i("li",null,[n(o,{to:"#어드민-서비스-antd-custom-theme"},{default:a(()=>t[2]||(t[2]=[e("어드민 서비스: ANTD + Custom Theme")])),_:1,__:[2]})]),i("li",null,[n(o,{to:"#대고객-서비스-ruler-tailwindcss-tailwind-variants"},{default:a(()=>t[3]||(t[3]=[e("대고객 서비스: Ruler + TailwindCSS + tailwind-variants")])),_:1,__:[3]})])])]),i("li",null,[n(o,{to:"#시행착오와-개선-과정"},{default:a(()=>t[4]||(t[4]=[e("시행착오와 개선 과정")])),_:1,__:[4]}),i("ul",null,[i("li",null,[n(o,{to:"#시행착오-1-완벽한-컴포넌트를-구현하기는-어렵다"},{default:a(()=>t[5]||(t[5]=[e("시행착오 1. 완벽한 컴포넌트를 구현하기는 어렵다")])),_:1,__:[5]})]),i("li",null,[n(o,{to:"#배운-점"},{default:a(()=>t[6]||(t[6]=[e("배운 점")])),_:1,__:[6]})]),i("li",null,[n(o,{to:"#시행착오-2-컴포넌트-스펙은-변화한다"},{default:a(()=>t[7]||(t[7]=[e("시행착오 2. 컴포넌트 스펙은 변화한다.")])),_:1,__:[7]})]),i("li",null,[n(o,{to:"#배운-점-1"},{default:a(()=>t[8]||(t[8]=[e("배운 점")])),_:1,__:[8]})])])]),i("li",null,[n(o,{to:"#실행-가능한-가이드"},{default:a(()=>t[9]||(t[9]=[e("실행 가능한 가이드")])),_:1,__:[9]}),i("ul",null,[i("li",null,[n(o,{to:"#_1-디자인-시스템이-처음이라면-작은-것부터-시작하기-—-mvp-접근"},{default:a(()=>t[10]||(t[10]=[e("1. 디자인 시스템이 처음이라면? (작은 것부터 시작하기 — MVP 접근)")])),_:1,__:[10]})]),i("li",null,[n(o,{to:"#_2-리소스가-부족하다면-효율적인-협업-구조-만들기"},{default:a(()=>t[11]||(t[11]=[e("2. 리소스가 부족하다면? (효율적인 협업 구조 만들기)")])),_:1,__:[11]})])])]),i("li",null,[n(o,{to:"#마치며-빠르게-만들고-꾸준히-개선하기"},{default:a(()=>t[12]||(t[12]=[e("마치며: 빠르게 만들고 꾸준히 개선하기")])),_:1,__:[12]})])])]),t[30]||(t[30]=i("hr",null,null,-1)),n(d,{name:"FE 0.5인 리소스로 디자인 시스템 구축한 방법",desc:"빠르게 성장하는 회사에서는 많은 태스크가 동시다발적으로 생기기도 합니다. 그러다 보면 특정 업무에만 집중하기는 어려워요. 29CM에서도 디자인 시스템이 필요하지만, 여기에 모든 리소스를 투입할 수 없는 상황이었는데요. 이런 상황에서는 어떤 대안이 있을까요? 처음부터 끝까지 디자인 시스템을 만들 수 있는 여력이 없다면, 이미 잘 만들어진 디자인 시스템을 도입해 보면 어떨까요? 제한된 리소스 안에서 어떻게 디자인 시스템을 생산적이고 효율적으로 관리할 수 있을지 끊임없이 고민했고, 그 과정에서 얻은 실무적인 경험과 인사이트를 이 글에서 공유하고자 합니다.",url:"https://yozm.wishket.com/magazine/detail/2950/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/2950/1_6xhfliz6-Prt4ap_NoKucQ.gif"}),t[31]||(t[31]=s('<p>2025년 설 연휴, 여러분은 어떻게 보내고 있나요? 새로운 시작을 위해 준비하는 분도, 다시 달리기 위해 푹 쉬는 분도 있을 텐데요. 요즘IT에서 설 연휴를 맞아 국내 주요 기업의 특색 있고 유익한 블로그 콘텐츠를 소개하는 시리즈를 준비했습니다. 이들은 어떻게 사고하고, 어떤 방식으로 일하는 걸까요?</p><p>이번 글에서는 패션 플랫폼 29CM의 프론트엔드 플랫폼팀에서 ‘효율적인 디자인 시스템’을 구축하고 활용한 경험에 대해 소개합니다.</p><figure><img src="https://wishket.com/media/news/2950/1_6xhfliz6-Prt4ap_NoKucQ.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>안녕하세요! 29CM에서 일관된 UI/UX 제공을 위해 디자인 시스템을 개발 및 유지보수하고 있는 프론트엔드 플랫폼 팀의 신다혜입니다. 저는 현재 기존에 운영되던<strong>Ruler 디자인 시스템</strong>을 인수인계받아 관리하고 있어요. 다만 본래 진행하던 업무가 있었기 때문에 디자인 시스템은 0.5인의 리소스로 운영해야 했습니다.</p><p>이러한 제한된 리소스 안에서 어떻게 디자인 시스템을<strong>생산적이고 효율적으로 관리</strong>할 수 있을지 끊임없이 고민했고, 그 과정에서 얻은<strong>실무적인 경험과 인사이트</strong>를 이 글에서 공유하고자 합니다.</p><p>빠르게 성장하는 회사에서는 많은 태스크가 동시다발적으로 생기기도 합니다. 그러다 보면 특정 업무에만 집중하기는 어려워요. 29CM에서도 디자인 시스템이 필요하지만, 여기에 모든 리소스를 투입할 수 없는 상황이었는데요. 이런 상황에서는 어떤 대안이 있을까요?</p><p>처음부터 끝까지 디자인 시스템을 만들 수 있는 여력이 없다면, 이미 잘 만들어진 디자인 시스템을 도입해 보면 어떨까요? 디자인된 토큰에 대한 유틸리티를 만들어야 한다면요? 그 과정은 지금부터 소개해 드릴게요!</p><hr><h2 id="디자인-시스템도-하나의-제품이다" tabindex="-1"><a class="header-anchor" href="#디자인-시스템도-하나의-제품이다"><span>디자인 시스템도 하나의 제품이다</span></a></h2><div class="hint-container info"><p class="hint-container-title">도널드 노먼의 &lt;사용자 중심 디자인&gt;</p><blockquote><p>“사람들이 사지 않는다면 최고의 제품을 생산하는 것이 무슨 의미가 있겠는가?”</p></blockquote><figure><img src="https://wishket.com/media/news/2950/3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div><p>디자인 시스템에는 어떤 식으로 접근하면 좋을까요? 디자인 시스템도 하나의 지속 가능한 제품이라는 관점에서 도널드 노먼의 말이 마음에 깊이 와닿았어요. 아무리 뛰어난 컴포넌트를 만들어도, 개발자와 유저가 사용하지 않는다면 가치가 사라지고 결국 폐기되죠. 29CM의 디자인 시스템도 마찬가지입니다.</p><p>디자인 시스템은**대고객(사용자)**에게 일관된 UI/UX를 제공하고,<strong>개발자</strong>에게는 효율적인 개발 환경을 지원해야 합니다. 디자인 시스템의 구독자는 대고객과 개발자라고 생각해요. 대고객과 개발자에게 VOC를 빠르게 듣고, 피드백을 반영하면 더 잘 쓰이게 되죠.</p><p>그래서 저는 디자인 시스템도<strong>MVP</strong>로 빠르게 구축하고,<strong>짧은 iteration</strong>을 통해 가치를 검증하고 발전시켜야 한다고 생각해요.</p><hr><h2 id="서비스-특성에-맞춘-전략적-도입" tabindex="-1"><a class="header-anchor" href="#서비스-특성에-맞춘-전략적-도입"><span>서비스 특성에 맞춘 전략적 도입</span></a></h2><h3 id="어드민-서비스-antd-custom-theme" tabindex="-1"><a class="header-anchor" href="#어드민-서비스-antd-custom-theme"><span>어드민 서비스: ANTD + Custom Theme</span></a></h3><figure><img src="https://wishket.com/media/news/2950/2.png" alt="Ant Design(ANTD)" tabindex="0" loading="lazy"><figcaption>Ant Design(ANTD)</figcaption></figure><p>어드민 디자인 시스템을 구축할 때는<strong>Ant Design(ANTD)<strong>을 도입했어요. 이유는 간단한데요. 바로</strong>기회비용</strong>측면에서 ANTD를 사용하는 것이 더 이득이었기 때문입니다.</p><p>어드민 서비스는 다음과 같은 특징을 가지고 있어요.</p><ul><li>내부 관리자 및 파트너사가 대부분</li><li>어드민 서비스는 유려한 UI/UX보다 기능적으로 치중해야 하는 요소가 많음</li><li>예측 가능하고, 올바른 기능이 구현되는 것이 중요</li></ul><p>ANTD, MUI 등과 같은 라이브러리들은 어드민에 사용하기 풍부한 기능을 가진 컴포넌트들을 제공해요.</p><p>원래 Table과 같은 컴포넌트의 경우, 구현에 있어서 복잡도가 상당해요. 페이지네이션, 필터링, 소팅의 기능을 갖춘 Table 컴포넌트를 디자이너가 설계하고, 이를 개발자가 구현하여 서빙하기까지는 많은 시간과 리소스가 드는 일입니다. 자체적으로 완성도 높은 Table 컴포넌트를 만들기 위해서 제작에만 몇 달을 소요할 수도 있어요. ANTD와 같이 풍부한 기능을 내재하고 있는 라이브러리 사용은 FE 개발자들에게 학습 비용도 굉장히 짧으며, 어드민 페이지의<strong>디자인과 개발 생산성을 크게 향상</strong>시킬 수 있어요.</p><p>ANTD 디자인 시스템을 적용한 후, 실제로 어떤 효과를 볼 수 있었을까요?</p><figure><img src="https://wishket.com/media/news/2950/1_3dBiMVpKmj0-cBcVGR_XZA.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>한 화면 기준<strong>디자인 작업 시간은 최대 75%</strong>,**개발 작업 시간은 약 87%**단축되었습니다.</p><figure><img src="https://wishket.com/media/news/2950/1_X3hpZR471CDexfRplmzD-A.png" alt="작업이 진행된 어드민 디자인" tabindex="0" loading="lazy"><figcaption>작업이 진행된 어드민 디자인</figcaption></figure><p>상단 이미지 디자인 시안 작업에 걸리는 시간을 기준으로 측정했는데요.<strong>디자이너 리소스를 1/4, FE 리소스를 1/8 절감</strong>할 수 있게 되었죠. 퍼블리싱 등에 집중하는 시간을 비즈니스 로직이나 더 중요한 문제를 푸는데 투자할 수 있게 되었어요.</p>',27)),i("p",null,[t[14]||(t[14]=e("어드민의 톤앤매너가 걱정되시나요? 걱정하실 필요 없어요! 대부분의 라이브러리들에서 이미 Token 기반의")),i("a",E,[n(r,{icon:"fas fa-globe"}),t[13]||(t[13]=e("Customize Theme"))]),t[15]||(t[15]=e("를 만드는 기능을 제공하고 있어요."))]),t[32]||(t[32]=s('<p>29CM에서도 Antd를 도입할 때 기존 어드민 페이지와 톤앤매너가 이질적으로 느껴지지 않도록 기존 어드민 페이지의 Theme와 유사한 토큰(색상 및 간격)들을 추출해서<a href="https://ant.design/docs/react/customize-theme" target="_blank" rel="noopener noreferrer">Customize Theme</a>를 적용했어요.</p><h3 id="대고객-서비스-ruler-tailwindcss-tailwind-variants" tabindex="-1"><a class="header-anchor" href="#대고객-서비스-ruler-tailwindcss-tailwind-variants"><span>대고객 서비스: Ruler + TailwindCSS + tailwind-variants</span></a></h3><figure><img src="https://wishket.com/media/news/2950/0_xEUpaPFGRWHj9kZo.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>대고객 서비스의 상황은 어드민과는 다른데요. 바로 29CM에 알맞은 감도를 제공할 수 있는 UI/UX가 서빙되어야 하기 때문입니다.</p><p>이를 충족 시키기 위해서는 일부 커스텀만 허용하는 UI 라이브러리는 한계를 가지고 있어요. 이런 한계 때문에 별도로 스타일을 입힌 컴포넌트를 제작할 수밖에 없어요.</p><p>기존 Ruler는 emotion(css-in-js)으로 제작되었어요. 초기 디자인 시스템으로도 atomic한 단위의 컴포넌트(Badge, Button 등)가 제작될 때는 큰 문제가 되지 않았습니다. 다만 패턴 컴포넌트가 제작되면서부터 성능 이슈가 발생했어요. 현재 Ruler 디자인 시스템에서 서빙되고 있는 컴포넌트 중 가장 활용도가 높은 컴포넌트는 바로 ProductCard인데요. 다음과 같이 내부에 다양한 컴포넌트의 조합이 사용되고 있습니다.</p><figure><img src="https://wishket.com/media/news/2950/4.png" alt="Ruler ProductCard 컴포넌트" tabindex="0" loading="lazy"><figcaption>Ruler ProductCard 컴포넌트</figcaption></figure><p>PC 화면의 경우 ProductCard가 50개씩 노출되어야 하는데요. css-in-js를 사용하는 경우, 런타임 성능 이슈가 사용자 경험(UX)을 저하시키는 수준으로 발생했습니다. css-in-js의 성능 이슈 관련하여 유명한 글이 있으니 해당 글을 읽어보는 것을 추천해 드려요!</p>',8)),i("div",v,[t[20]||(t[20]=i("p",{class:"hint-container-title"},"Info",-1)),i("p",null,[t[19]||(t[19]=e("참고 글:")),i("a",z,[t[16]||(t[16]=e("CSS-in-JS와 결별하는 이유 Blog (")),n(r,{icon:"fa-brands fa-dev"}),t[17]||(t[17]=i("code",null,"srmagura",-1)),t[18]||(t[18]=e(")"))])]),n(d,{name:"Why We're Breaking Up with CSS-in-JS",desc:"Hi, I'm Sam — software engineer at Spot and the 2nd most active maintainer of Emotion, a...",url:"https://dev.to/srmagura/why-were-breaking-up-wiht-css-in-js-4g9b/",logo:"https://media2.dev.to/dynamic/image/width=128,height=,fit=scale-down,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8j7kvp660rqzt99zui8e.png",preview:"https://media2.dev.to/dynamic/image/width=1000,height=500,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fcur8epdr8pkzebm7vutz.png"})]),t[33]||(t[33]=s("<p>이를 위해 스타일링 라이브러리 교체 작업이 이루어졌고, 주로 고민했던 포인트는 다음과 같습니다.</p><ol><li>JavaScript Bundle, Runtime Overhead를 줄일 수 있을 것</li><li>일반적인 스타일링을 할 때, DX 경험을 감소시키지 않을 것</li></ol><p>팀에서는 <strong>TailwindCSS + tailwind-variants</strong>/<strong>vanilla-extract + sprinkle</strong>와 같은 대응안이 논의되었어요. 최종적으로는<strong>TailwindCSS + tailwind-variants</strong>를 채택했는데요. 앞서 언급한 1+2가 모두 충족되었기 때문이에요.</p><ol><li>TailwindCSS는 PostCSS를 이용해 컴파일 타임에 스타일을 전처리 <ul><li>JavaScript Bundle 사이즈에 영향을 주지 않음</li><li>스타일 생성을 위한 Runtime Overhead가 없음</li></ul></li><li>tailwind-variants 조합을 통해 개발자 경험 유지 <ul><li>class conflict 방지</li><li>Variant API 기반의 스타일링 경험 제공</li><li>자동 완성과 타입 세이프티 지원</li></ul></li></ol><p>추가적으로 아래와 같은 이유로 디자인 시스템을 서빙하는 데 효율적이라는 이유도 있었습니다.</p><ul><li>Theme Configuration 기반의 간편한 class utility 제작 (color palette, type scale, fonts, breakpoints, border radius values 등)</li><li>풍부한 커뮤니티 및 플러그인 (tailwind-prettier, IDE intellisense 등등)</li></ul>",6)),i("p",null,[t[22]||(t[22]=e("TailwindCSS의 생태계가 궁금하다면 ")),i("a",_,[n(r,{icon:"iconfont icon-github"}),t[21]||(t[21]=i("code",null,"aniftyco/awesome-tailwindcss",-1))]),t[23]||(t[23]=e("를 확인해 보세요!"))]),t[34]||(t[34]=s('<hr><h2 id="시행착오와-개선-과정" tabindex="-1"><a class="header-anchor" href="#시행착오와-개선-과정"><span>시행착오와 개선 과정</span></a></h2><p>그렇게 현재 디자인된 37개 컴포넌트 중 약 30개를 제작했고, 서비스에 반영했는데요. 이 과정이 마냥 순탄하지는 않았습니다. 디자인 시스템을 관리하며 겪었던 문제 상황들과 이를 통해 얻은 인사이트도 함께 공유해 보려고 해요.</p><h3 id="시행착오-1-완벽한-컴포넌트를-구현하기는-어렵다" tabindex="-1"><a class="header-anchor" href="#시행착오-1-완벽한-컴포넌트를-구현하기는-어렵다"><span>시행착오 1. 완벽한 컴포넌트를 구현하기는 어렵다</span></a></h3><p>디자인 시스템 컴포넌트를 개발하면서 알게 된 사실은 ‘완벽하게 한 번에 잘 쓰이는 컴포넌트를 구현하기가 굉장히 어렵다’는 점이에요. 다음은 제가 컴포넌트를 만들면서 만든 버그들이에요.</p><ul><li><strong>Dialog</strong>: 긴 제목이 있을 때<strong>닫기(X) 버튼</strong>과 겹침</li><li><strong>Tabs</strong>: underline 스펙 누락</li><li>**ProductCard:**클릭커블한 요소 중, 포인터 커서가 반영되지 않은 부분이 있음</li></ul><p>29CM에서 함께 일하는 동료 FE 개발자분들이 컴포넌트를 사용하면서 리포트 해준 부분인데요. 서빙되는 컴포넌트의 안정성을 높이기 위한 조치가 필요하다고 생각했어요.</p><h3 id="배운-점" tabindex="-1"><a class="header-anchor" href="#배운-점"><span>배운 점</span></a></h3><p>컴포넌트를 완벽하게 만들려고 시간을 많이 투자한다고 해서 모든 실수를 방지할 수는 없습니다.</p><p>1.<strong>빠르게 만들어 피드백을 받고 개선</strong>하는 것이 더 효과적이었습니다. 2. 대응 가능한 리소스가 없는 상황에서 버그가 있다면,<strong>디자인 시스템이 자생할 수 있는 가이드라인과 프로세스 구축</strong>이 필요하다고 생각했어요.</p><h4 id="action1-피드백-프로세스-—-chromatic-storybook" tabindex="-1"><a class="header-anchor" href="#action1-피드백-프로세스-—-chromatic-storybook"><span>Action1: 피드백 프로세스 — Chromatic + Storybook</span></a></h4><ul><li>Chromatic을 사용하면, 디자이너에게 컴포넌트 단위로 좀 더 정확한 피드백을 받을 수 있어요.</li><li>간단한<a href="https://chromatic.com/docs/github-actions/" target="_blank" rel="noopener noreferrer">chromatic.yaml</a>세팅만으로 Storybook CI/CD를 구축해서 QA 가능한 프로세스를 만들 수 있어요.</li></ul><figure><img src="https://wishket.com/media/news/2950/0_M6zEAAhfU6Druj_l.png" alt="Chromatic Review" tabindex="0" loading="lazy"><figcaption>Chromatic Review</figcaption></figure><h4 id="action2-ruler-오픈-소스-—-기여-제도-도입" tabindex="-1"><a class="header-anchor" href="#action2-ruler-오픈-소스-—-기여-제도-도입"><span>Action2: Ruler 오픈 소스 — 기여 제도 도입</span></a></h4><ul><li>Wiki 내 Ruler에 작업할 수 있는 가이드 문서를 작성해 두었어요</li><li>누구나 디자인 시스템을 관리하는 데 기여할 수 있게 함으로써 트럭 팩터 1인 상황을 방지할 수 있게 했어요.</li></ul><figure><img src="https://wishket.com/media/news/2950/5.png" alt="Ruler Wiki와 기여받은 PR" tabindex="0" loading="lazy"><figcaption>Ruler Wiki와 기여받은 PR</figcaption></figure><h3 id="시행착오-2-컴포넌트-스펙은-변화한다" tabindex="-1"><a class="header-anchor" href="#시행착오-2-컴포넌트-스펙은-변화한다"><span>시행착오 2. 컴포넌트 스펙은 변화한다.</span></a></h3><p>디자인 시스템은 살아있는 제품이라서 유기적으로 변화한다는 사실을 깨달았어요. 컴포넌트는 제작되었다고 끝나는 것이 아니고, 지속적인 업그레이드가 필요하더라고요. ProductCard는 제작된 이후에도 스펙이 약 3번 정도 추가되었습니다.</p><ol><li>이미지 Preview에 Badge를 노출할 수 있는 extraBadge 추가</li><li>하단 Badge 그룹에 icon을 표기하는 스펙 추가</li><li>브랜드명을 별도 클릭할 수 있는 스펙 추가</li></ol><p>주로 스펙이 추가되는 케이스는 다음과 같은 이유가 있었어요.</p><ol><li>ProductCard를 활용하여 A/B 테스트가 진행된 이후, 실험에 성공하여 롤아웃</li><li>전사 서비스 방향성 반영</li></ol><p>특정 스펙이 변화할 때마다 Design/AOS/IOS/FE 모두 디자인 시스템 컴포넌트를 업데이트를 해야 했는데요. 각자 작업이 가능한 시기가 달라 Cross Platform 환경에서 디자인 시스템 스펙을 일관성 있게 유지하는 것이 아주 어려웠어요.</p><h3 id="배운-점-1" tabindex="-1"><a class="header-anchor" href="#배운-점-1"><span>배운 점</span></a></h3><p>디자인 시스템은<strong>끊임없는 유지 보수</strong>가 필요한 제품이라는 사실을 알게 되었어요. 유지 보수에 필요한<strong>히스토리를 명확히</strong>하지 않으면, 스펙에 대한 파편화가 일어나기 아주 쉽다는 사실도 알게 되었죠.</p><h4 id="action-깃허브-프로젝트로-컴포넌트-트래킹" tabindex="-1"><a class="header-anchor" href="#action-깃허브-프로젝트로-컴포넌트-트래킹"><span>Action: 깃허브 프로젝트로 컴포넌트 트래킹</span></a></h4>',25)),i("p",null,[t[27]||(t[27]=e("깃허브 프로젝트를 통해서 컴포넌트 단위로 히스토리를 관리할 수 있도록 세팅을 추가했습니다. 초기 스펙에서 어떠한 이유로 변화했는지 히스토리를 트래킹하기 위해서였어요. 디자인 시스템은 AOS/IOS/FE 세 플랫폼에서 모두 관리되어야 하기 때문에 각각 플랫폼마다의 진행 상황과 스펙을 확인하기에 용이했어요. 플랫폼 디자이너분과 Adobe의 ")),i("a",x,[t[24]||(t[24]=e("깃허브 프로젝트 (")),n(r,{icon:"iconfont icon-github"}),t[25]||(t[25]=i("code",null,"orgs/adobe",-1)),t[26]||(t[26]=e(")"))]),t[28]||(t[28]=e("를 참고하여 만들었어요."))]),t[35]||(t[35]=s('<figure><img src="https://wishket.com/media/news/2950/6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="실행-가능한-가이드" tabindex="-1"><a class="header-anchor" href="#실행-가능한-가이드"><span>실행 가능한 가이드</span></a></h2><h3 id="_1-디자인-시스템이-처음이라면-작은-것부터-시작하기-—-mvp-접근" tabindex="-1"><a class="header-anchor" href="#_1-디자인-시스템이-처음이라면-작은-것부터-시작하기-—-mvp-접근"><span>1. 디자인 시스템이 처음이라면? (작은 것부터 시작하기 — MVP 접근)</span></a></h3><p>파편화된 UI 중 어떤 것이 UX/DX에 가장 큰 문제가 되고 있나요? 만약 처음 디자인 시스템을 개발하는 단계라면 다음과 같은 액션을 해보는 것을 추천해 드려요.</p><ul><li><strong>버튼</strong>,<strong>입력창</strong>,<strong>내비게이션 바</strong>와 같은<strong>핵심 컴포넌트</strong>부터 구축</li><li>빠르게 적용하고<strong>짧은 피드백 주기</strong>로 개선</li></ul><h3 id="_2-리소스가-부족하다면-효율적인-협업-구조-만들기" tabindex="-1"><a class="header-anchor" href="#_2-리소스가-부족하다면-효율적인-협업-구조-만들기"><span>2. 리소스가 부족하다면? (효율적인 협업 구조 만들기)</span></a></h3><p>디자인 시스템의 개발/유지보수에 어려움을 겪고 있다면, 다른 사람의 도움을 받아 팀 오픈 소스 방식으로 운영하는 것을 고려해 보면 어떨까요? 자동화로 개선할 수 있는 부분이 있다면 자동화 도구를 충분히 활용해도 좋을 거예요.</p><ul><li><strong>기여 가이드라인</strong>작성 → 개발자 누구나 디자인 시스템에 쉽게 참여하도록 유도</li><li>**자동화 도구(Chromatic)**활용 → 품질 유지와 리뷰 시간 절감</li></ul><hr><h2 id="마치며-빠르게-만들고-꾸준히-개선하기" tabindex="-1"><a class="header-anchor" href="#마치며-빠르게-만들고-꾸준히-개선하기"><span>마치며: 빠르게 만들고 꾸준히 개선하기</span></a></h2><p>디자인 시스템을 제품 관점에서 볼 때 가장 중요한 것은 무엇일까요? 고객의 불편함을 해결해주는 것이라고 생각해요. 하지만, 빠르게 서비스가 서빙되지 못하면 무엇이 문제인지조차 알기 어려운 경우들이 많은 것 같아요. 제가 컴포넌트를 제작하고 서빙한 후에 알게 된 문제들이 있듯 말이에요.</p><p>앞으로도 디자인 시스템 구독자인**고객(사용자, 개발자)**이 계속 필요로 할 수 있도록 가치를 제공할 디자인 시스템을 만들고 싶어요. 여러분이 필요한 디자인 시스템은 어떤 디자인 시스템인가요? 정답이 없는 문제이지만, 제 경험이 도움이 되었기를 바랍니다. 그럼 저는 Ruler를 통해 Guide To Better Choice에 기여하러 가보겠습니다. 여기까지 읽어주셔서 감사합니다.</p>',13)),i("div",S,[t[29]||(t[29]=i("p",{class:"hint-container-title"},"원문",-1)),n(d,{name:"당신2 9하던 디자인 시스템? 0.5인 리소스로 효율적으로 구축하기",desc:"29CM의 프론트엔드 플랫폼 팀에서 0.5인 리소스로 효율적으로 디자인 시스템을 관리하는 방법을 공유합니다. TailwindCSS와 ANTD를 활용한 사례를 포함해 실제 경험을 바탕으로 한 인사이트를 제공합니다.",url:"https://medium.com/29cm/%EB%8B%B9%EC%8B%A02-9%ED%95%98%EB%8D%98-%EB%94%94%EC%9E%90%EC%9D%B8-%EC%8B%9C%EC%8A%A4%ED%85%9C-0-5%EC%9D%B8-%EB%A6%AC%EC%86%8C%EC%8A%A4%EB%A1%9C-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-a32b6b868c62/",logo:"https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",preview:"https://miro.medium.com/v2/da:true/resize:fit:1152/1*6xhfliz6-Prt4ap_NoKucQ.gif"})]),f(" TODO: add ARTICLE CARD "),n(p,g(m({title:"FE 0.5인 리소스로 디자인 시스템 구축한 방법",desc:"빠르게 성장하는 회사에서는 많은 태스크가 동시다발적으로 생기기도 합니다. 그러다 보면 특정 업무에만 집중하기는 어려워요. 29CM에서도 디자인 시스템이 필요하지만, 여기에 모든 리소스를 투입할 수 없는 상황이었는데요. 이런 상황에서는 어떤 대안이 있을까요? 처음부터 끝까지 디자인 시스템을 만들 수 있는 여력이 없다면, 이미 잘 만들어진 디자인 시스템을 도입해 보면 어떨까요? 제한된 리소스 안에서 어떻게 디자인 시스템을 생산적이고 효율적으로 관리할 수 있을지 끊임없이 고민했고, 그 과정에서 얻은 실무적인 경험과 인사이트를 이 글에서 공유하고자 합니다.",link:"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2950.html",logo:"https://yozm.wishket.com/favicon.ico",background:"rgba(84,7,224,0.2)"})),null,16)])}const R=c(b,[["render",T]]),P=JSON.parse('{"path":"/yozm.wishket.com/2950.html","title":"FE 0.5인 리소스로 디자인 시스템 구축한 방법","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"FE 0.5인 리소스로 디자인 시스템 구축한 방법","description":"Article(s) > FE 0.5인 리소스로 디자인 시스템 구축한 방법","icon":"fas fa-pen-ruler","category":["Design","System","TaliwindCSS","Article(s)"],"tag":["blog","yozm.wishket.com","design","system","tailwind","tailwindcss"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"FE 0.5인 리소스로 디자인 시스템 구축한 방법\\",\\"image\\":[\\"https://wishket.com/media/news/2950/1_6xhfliz6-Prt4ap_NoKucQ.gif\\",\\"https://wishket.com/media/news/2950/3.png\\",\\"https://wishket.com/media/news/2950/2.png\\",\\"https://wishket.com/media/news/2950/1_3dBiMVpKmj0-cBcVGR_XZA.png\\",\\"https://wishket.com/media/news/2950/1_X3hpZR471CDexfRplmzD-A.png\\",\\"https://wishket.com/media/news/2950/0_xEUpaPFGRWHj9kZo.png\\",\\"https://wishket.com/media/news/2950/4.png\\",\\"https://wishket.com/media/news/2950/0_M6zEAAhfU6Druj_l.png\\",\\"https://wishket.com/media/news/2950/5.png\\",\\"https://wishket.com/media/news/2950/6.png\\"],\\"datePublished\\":\\"2025-01-27T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"29CM TECH\\",\\"url\\":\\"https://yozm.wishket.com/magazine/@29cm_engineering/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2950.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"FE 0.5인 리소스로 디자인 시스템 구축한 방법"}],["meta",{"property":"og:description","content":"Article(s) > FE 0.5인 리소스로 디자인 시스템 구축한 방법"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/2950/1_6xhfliz6-Prt4ap_NoKucQ.gif"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/2950/1_6xhfliz6-Prt4ap_NoKucQ.gif"}],["meta",{"name":"twitter:image:alt","content":"FE 0.5인 리소스로 디자인 시스템 구축한 방법"}],["meta",{"property":"article:author","content":"29CM TECH"}],["meta",{"property":"article:tag","content":"tailwindcss"}],["meta",{"property":"article:tag","content":"tailwind"}],["meta",{"property":"article:tag","content":"system"}],["meta",{"property":"article:tag","content":"design"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-01-27T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > FE 0.5인 리소스로 디자인 시스템 구축한 방법"},{"property":"og:description","content":"FE 0.5인 리소스로 디자인 시스템 구축한 방법"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2950.html"}]],"prev":"/academics/system-design/articles/README.md","date":"2025-01-27T00:00:00.000Z","isOriginal":false,"author":[{"name":"29CM TECH","url":"https://yozm.wishket.com/magazine/@29cm_engineering/"}],"cover":"https://yozm.wishket.com/media/news/2950/1_6xhfliz6-Prt4ap_NoKucQ.gif"},"git":{},"readingTime":{"minutes":2.34,"words":702},"filePathRelative":"yozm.wishket.com/2950.md","copyright":{"author":"29CM TECH"}}');export{R as comp,P as data};
