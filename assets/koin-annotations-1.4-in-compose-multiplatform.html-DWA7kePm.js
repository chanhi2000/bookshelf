import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as t,b as r,a as v,t as f,n as c,g as u,w as i,e as a,r as l,o as b}from"./app-BVguHYKu.js";const h={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},M={href:"https://jetbrains.com/compose-multiplatform/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://insert-koin.io/docs/reference/koin-annotations/start",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/InsertKoinIO/KMP-App-Template/?tab=readme-ov-file#using-koin-annotations",target:"_blank",rel:"noopener noreferrer"},K={href:"https://metmuseum.github.io/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://insert-koin.io/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://mvnrepository.com/artifact/com.google.devtools.ksp/symbol-processing-api/1.9.24-1.0.20",target:"_blank",rel:"noopener noreferrer"},P={href:"https://insert-koin.io/",target:"_blank",rel:"noopener noreferrer"};function z(d,n){const p=l("VPCard"),e=l("router-link"),m=l("SiteInfo"),o=l("VPIcon");return b(),g("div",null,[s("h1",y,[s("a",w,[s("span",null,f(d.$frontmatter.title)+" 관련",1)])]),t(p,c(u({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[t(e,{to:"#project-overview"},{default:i(()=>n[0]||(n[0]=[a("Project Overview")])),_:1,__:[0]})]),s("li",null,[t(e,{to:"#setting-up-dependencies"},{default:i(()=>n[1]||(n[1]=[a("Setting Up Dependencies")])),_:1,__:[1]})]),s("li",null,[t(e,{to:"#project-structure"},{default:i(()=>n[2]||(n[2]=[a("Project Structure")])),_:1,__:[2]})]),s("li",null,[t(e,{to:"#migrating-to-koin-annotations"},{default:i(()=>n[3]||(n[3]=[a("Migrating to Koin Annotations")])),_:1,__:[3]}),s("ul",null,[s("li",null,[t(e,{to:"#step-1-view-model-migration"},{default:i(()=>n[4]||(n[4]=[a("Step 1: View Model Migration")])),_:1,__:[4]})]),s("li",null,[t(e,{to:"#step-2-data-layer-migration"},{default:i(()=>n[5]||(n[5]=[a("Step 2: Data Layer Migration")])),_:1,__:[5]})]),s("li",null,[t(e,{to:"#step-3-complex-initializations"},{default:i(()=>n[6]||(n[6]=[a("Step 3: Complex Initializations")])),_:1,__:[6]})])])]),s("li",null,[t(e,{to:"#platform-specific-components"},{default:i(()=>n[7]||(n[7]=[a("Platform-Specific Components")])),_:1,__:[7]})]),s("li",null,[t(e,{to:"#benefits-of-using-koin-annotations"},{default:i(()=>n[8]||(n[8]=[a("Benefits of Using Koin Annotations")])),_:1,__:[8]})]),s("li",null,[t(e,{to:"#wrapping-up"},{default:i(()=>n[9]||(n[9]=[a("Wrapping Up")])),_:1,__:[9]})])])]),n[29]||(n[29]=s("hr",null,null,-1)),t(m,{name:"Getting Started with Koin Annotations 1.4 in Compose Multiplatform",desc:"Streamline your Compose Multiplatform project by migrating from Koin DSL to Koin Annotations 1.4. Learn dependency setup, component migration, and platform implementations.",url:"https://blog.kotzilla.io/koin-annotations-1.4-in-compose-multiplatform",logo:"https://blog.kotzilla.io/hubfs/favicon.png",preview:"https://blog.kotzilla.io/hubfs/Screenshot%202024-10-24%20at%2012.03.30.png"}),s("p",null,[n[12]||(n[12]=a("If you've been using Koin's DSL for dependency injection in your Kotlin Multiplatform projects, you might be interested in exploring a more annotation-driven approach. In this guide, Arnaud walks you through migrating a simple ")),s("a",M,[t(o,{icon:"iconfont icon-jetbrains"}),n[10]||(n[10]=a("Compose Multiplatform"))]),n[13]||(n[13]=a(" application from Koin DSL to the new ")),s("a",A,[t(o,{icon:"fas fa-globe"}),n[11]||(n[11]=a("Koin Annotations 1.4."))])]),n[30]||(n[30]=s("hr",null,null,-1)),n[31]||(n[31]=s("h2",{id:"project-overview",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#project-overview"},[s("span",null,"Project Overview")])],-1)),s("p",null,[n[19]||(n[19]=a("We'll be working with the ")),s("a",C,[n[14]||(n[14]=a("KMP App Template (")),t(o,{icon:"iconfont icon-github"}),n[15]||(n[15]=s("code",null,"InsertKoinIO/KMP-App-Template",-1)),n[16]||(n[16]=a(")"))]),n[20]||(n[20]=a(" from JetBrains, which provides a great starting point for our exploration. The data displayed by the app is from ")),s("a",K,[t(o,{icon:"fas fa-globe"}),n[17]||(n[17]=a("The Metropolitan Museum of Art Collection API"))]),n[21]||(n[21]=a(". This app already uses ")),s("a",x,[t(o,{icon:"fas fa-globe"}),n[18]||(n[18]=a("Koin"))]),n[22]||(n[22]=a(" for dependency injection. This template implements this simple art gallery application that displays a list of paintings and their details. While the functionality is straightforward, it serves as an excellent example to demonstrate Koin's annotation-based dependency injection. And bonus : it's beautiful to look at."))]),n[32]||(n[32]=r(`<hr><h2 id="setting-up-dependencies" tabindex="-1"><a class="header-anchor" href="#setting-up-dependencies"><span>Setting Up Dependencies</span></a></h2><p>Before diving into the migration, let&#39;s ensure we have all the necessary dependencies:</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy"><pre><code class="language-groovy"><span class="line">dependencies <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;io.insert-koin:koin-core:3.6.0-beta5&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;io.insert-koin:koin-compose:1.2.0-beta5&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;io.insert-koin:koin-annotations:1.4.0&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;io.insert-koin:koin-ksp-compiler:1.4.0&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("p",null,[n[24]||(n[24]=a("Don't forget to set up ")),s("a",j,[t(o,{icon:"fas fa-globe"}),n[23]||(n[23]=a("KSP (Kotlin Symbol Processing)"))]),n[25]||(n[25]=a(" in your project, as it's essential for annotation processing."))]),n[33]||(n[33]=r(`<hr><h2 id="project-structure" tabindex="-1"><a class="header-anchor" href="#project-structure"><span>Project Structure</span></a></h2><p>Our sample application follows a clean architecture approach with the following key components:</p><ul><li>Data Layer: <ul><li><code>MuseumAPI</code>: Handles remote data fetching</li><li><code>MuseumRepository</code>: Manages data operations</li><li><code>MuseumStorage</code>: Handles local data persistence</li></ul></li><li>UI Layer: <ul><li>List Screen: Displays paintings grid</li><li>Detail Screen: Shows painting details</li><li>ViewModels: Manages UI state and business logic</li></ul></li></ul><hr><h2 id="migrating-to-koin-annotations" tabindex="-1"><a class="header-anchor" href="#migrating-to-koin-annotations"><span>Migrating to Koin Annotations</span></a></h2><h3 id="step-1-view-model-migration" tabindex="-1"><a class="header-anchor" href="#step-1-view-model-migration"><span>Step 1: View Model Migration</span></a></h3><p>Let&#39;s start by migrating our view models from DSL to annotations. Replace the existing DSL module definition:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Module</span></span>
<span class="line"><span class="token annotation builtin">@ComponentScan</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.package.screens&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> ViewModelModule</span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@ViewModel</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token function">PaintingViewModel</span><span class="token punctuation">(</span><span class="token keyword">val</span> repository<span class="token operator">:</span> MuseumRepository<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token comment">// Implementation</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step-2-data-layer-migration" tabindex="-1"><a class="header-anchor" href="#step-2-data-layer-migration"><span>Step 2: Data Layer Migration</span></a></h3><p>Next, let&#39;s tackle the data layer components:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Module</span></span>
<span class="line"><span class="token annotation builtin">@ComponentScan</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.package.data&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> DataModule</span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@Singleton</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token function">MuseumRepository</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">val</span> api<span class="token operator">:</span> MuseumAPI<span class="token punctuation">,</span> </span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">val</span> storage<span class="token operator">:</span> MuseumStorage</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@Singleton</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token function">MuseumAPI</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> httpClient<span class="token operator">:</span> HttpClient<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step-3-complex-initializations" tabindex="-1"><a class="header-anchor" href="#step-3-complex-initializations"><span>Step 3: Complex Initializations</span></a></h3><p>For more complex scenarios where you need custom initialization logic, you can use separate functions with the <code>@Single</code> annotation:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Module</span></span>
<span class="line"><span class="token keyword">class</span> NetworkModule <span class="token punctuation">{</span></span>
<span class="line">  <span class="token annotation builtin">@Single</span> <span class="token keyword">fun</span> <span class="token function">provideHttpClient</span><span class="token punctuation">(</span>json<span class="token operator">:</span> Json<span class="token punctuation">)</span><span class="token operator">:</span> HttpClient <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> HttpClient <span class="token punctuation">{</span> </span>
<span class="line">      <span class="token comment">// Configuration </span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="platform-specific-components" tabindex="-1"><a class="header-anchor" href="#platform-specific-components"><span>Platform-Specific Components</span></a></h2><p>One of the powerful features of Koin Annotations is its support for platform-specific implementations. Here&#39;s how to set it up:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">// Common Native </span></span>
<span class="line"><span class="token annotation builtin">@Module</span> <span class="token keyword">expect</span> <span class="token keyword">class</span> NativeModule </span>
<span class="line"></span>
<span class="line"><span class="token keyword">expect</span> <span class="token keyword">class</span> PlatformComponent <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token keyword">fun</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String</span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment">// Native Implementation in Android </span></span>
<span class="line"><span class="token annotation builtin">@Module</span></span>
<span class="line"><span class="token annotation builtin">@ComponentScan</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.jetbrains.kmpapp.native&quot;</span></span><span class="token punctuation">)</span> </span>
<span class="line"><span class="token keyword">actual</span> <span class="token keyword">class</span> NativeModule</span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@Single</span></span>
<span class="line"><span class="token keyword">actual</span> <span class="token keyword">class</span> <span class="token function">PlatformComponent</span> <span class="token punctuation">(</span><span class="token keyword">val</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token keyword">actual</span> <span class="token keyword">fun</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;I&#39;m Android </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">context</span></span><span class="token string">&quot;</span></span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Native Implementation in iOS</span></span>
<span class="line"><span class="token annotation builtin">@Module</span></span>
<span class="line"><span class="token annotation builtin">@ComponentScan</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.jetbrains.kmpapp.native&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">actual</span> <span class="token keyword">class</span> NativeModule </span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@Single</span></span>
<span class="line"><span class="token keyword">actual</span> <span class="token keyword">class</span> PlatformComponent <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">actual</span> <span class="token keyword">fun</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;I&#39;m iOS&quot;</span></span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="benefits-of-using-koin-annotations" tabindex="-1"><a class="header-anchor" href="#benefits-of-using-koin-annotations"><span>Benefits of Using Koin Annotations</span></a></h2><ul><li>🔸 <strong>Cleaner Code</strong>: Annotations provide a more declarative and concise way to define dependencies</li><li>🔸 <strong>Better IDE Support</strong>: Enhanced code navigation and refactoring capabilities</li><li>🔸 <strong>Compile-Time Validation</strong>: Earlier detection of dependency injection issues</li><li>🔸 <strong>Reduced Boilerplate</strong>: KSP generates necessary extension functions automatically</li><li>🔸 <strong>Platform-Specific Support</strong>: Seamless handling of platform-specific dependencies</li></ul><hr><h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="#wrapping-up"><span>Wrapping Up</span></a></h2><p>Migrating from Koin DSL to Annotations might require some initial setup, but the benefits in terms of code clarity and maintainability are well worth it. The annotation-based approach provides a more familiar paradigm for developers coming from other dependency injection frameworks while maintaining Koin&#39;s lightweight and Kotlin-first philosophy.</p>`,25)),s("p",null,[n[27]||(n[27]=a("Remember to check out the ")),s("a",P,[t(o,{icon:"fas fa-globe"}),n[26]||(n[26]=a("official Koin documentation"))]),n[28]||(n[28]=a(" for more detailed information and advanced usage scenarios. Tell us what you think!"))]),v(" TODO: add ARTICLE CARD "),t(p,c(u({title:"Getting Started with Koin Annotations 1.4 in Compose Multiplatform",desc:"Streamline your Compose Multiplatform project by migrating from Koin DSL to Koin Annotations 1.4. Learn dependency setup, component migration, and platform implementations.",link:"https://chanhi2000.github.io/bookshelf/blog.kotzilla.io/koin-annotations-1.4-in-compose-multiplatform.html",logo:"https://blog.kotzilla.io/hubfs/favicon.png",background:"rgba(238,181,80,0.2)"})),null,16)])}const D=k(h,[["render",z]]),q=JSON.parse('{"path":"/blog.kotzilla.io/koin-annotations-1.4-in-compose-multiplatform.html","title":"Getting Started with Koin Annotations 1.4 in Compose Multiplatform","lang":"en-US","frontmatter":{"lang":"en-US","title":"Getting Started with Koin Annotations 1.4 in Compose Multiplatform","description":"Article(s) > Getting Started with Koin Annotations 1.4 in Compose Multiplatform","icon":"fa-brands fa-android","category":["Java","Kotlin","Android","Article(s)"],"tag":["blog","blog.kotzilla.io","java","kotlin","android"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Getting Started with Koin Annotations 1.4 in Compose Multiplatform\\",\\"image\\":[\\"https://blog.kotzilla.io/hubfs/Screenshot%202024-10-24%20at%2012.03.30.png\\"],\\"datePublished\\":\\"2024-10-17T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"The Kotzilla Team\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.kotzilla.io/koin-annotations-1.4-in-compose-multiplatform.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Getting Started with Koin Annotations 1.4 in Compose Multiplatform"}],["meta",{"property":"og:description","content":"Article(s) > Getting Started with Koin Annotations 1.4 in Compose Multiplatform"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://blog.kotzilla.io/hubfs/Screenshot%202024-10-24%20at%2012.03.30.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://blog.kotzilla.io/hubfs/Screenshot%202024-10-24%20at%2012.03.30.png"}],["meta",{"name":"twitter:image:alt","content":"Getting Started with Koin Annotations 1.4 in Compose Multiplatform"}],["meta",{"property":"article:author","content":"The Kotzilla Team"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"blog.kotzilla.io"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-10-17T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Getting Started with Koin Annotations 1.4 in Compose Multiplatform"},{"property":"og:description","content":"Getting Started with Koin Annotations 1.4 in Compose Multiplatform"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.kotzilla.io/koin-annotations-1.4-in-compose-multiplatform.html"}]],"prev":"/programming/java-android/articles/README.md","date":"2024-10-17T00:00:00.000Z","isOriginal":false,"author":"The Kotzilla Team","cover":"https://blog.kotzilla.io/hubfs/Screenshot%202024-10-24%20at%2012.03.30.png"},"git":{},"readingTime":{"minutes":3,"words":899},"filePathRelative":"blog.kotzilla.io/koin-annotations-1.4-in-compose-multiplatform.md","copyright":{"author":"The Kotzilla Team"}}');export{D as comp,q as data};
