import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as s,f as t,b as p,a as f,t as y,n as d,g,w as e,e as a,r,o as h}from"./app-BVguHYKu.js";const w={},j={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},S={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},A={class:"table-of-contents"},T={href:"https://youtu.be/QRgtcbxJlo0",target:"_blank",rel:"noopener noreferrer"};function N(k,n){const c=r("VPCard"),l=r("router-link"),u=r("SiteInfo"),o=r("VPIcon"),i=r("RouteLink"),m=r("VidStack");return h(),b("div",null,[s("h1",j,[s("a",S,[s("span",null,y(k.$frontmatter.title)+" ê´€ë ¨",1)])]),t(c,d(g({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",A,[s("ul",null,[s("li",null,[t(l,{to:"#_1-enforce-a-consistent-code-style"},{default:e(()=>n[0]||(n[0]=[a("1. Enforce a Consistent Code Style")])),_:1,__:[0]})]),s("li",null,[t(l,{to:"#_2-centralize-build-configuration"},{default:e(()=>n[1]||(n[1]=[a("2. Centralize Build Configuration")])),_:1,__:[1]})]),s("li",null,[t(l,{to:"#_3-centralize-package-management"},{default:e(()=>n[2]||(n[2]=[a("3. Centralize Package Management")])),_:1,__:[2]})]),s("li",null,[t(l,{to:"#_4-add-static-code-analysis"},{default:e(()=>n[3]||(n[3]=[a("4. Add Static Code Analysis")])),_:1,__:[3]})]),s("li",null,[t(l,{to:"#_5-set-up-local-orchestration"},{default:e(()=>n[4]||(n[4]=[a("5. Set Up Local Orchestration")])),_:1,__:[4]}),s("ul",null,[s("li",null,[t(l,{to:"#option-1-docker-compose"},{default:e(()=>n[5]||(n[5]=[a("Option 1: Docker Compose")])),_:1,__:[5]})]),s("li",null,[t(l,{to:"#option-2-net-aspire"},{default:e(()=>n[6]||(n[6]=[a("Option 2: .NET Aspire")])),_:1,__:[6]})])])]),s("li",null,[t(l,{to:"#_6-automate-builds-with-ci"},{default:e(()=>n[7]||(n[7]=[a("6. Automate Builds with CI")])),_:1,__:[7]})]),s("li",null,[t(l,{to:"#wrapping-up"},{default:e(()=>n[8]||(n[8]=[a("Wrapping Up")])),_:1,__:[8]})])])]),n[73]||(n[73]=s("hr",null,null,-1)),t(u,{name:"6 Steps for Setting Up a New .NET Project the Right Way",desc:"Learn how to properly set up a new .NET project with EditorConfig for code consistency, Directory.Build.props for centralized configuration, central package management, static code analysis, Docker Compose or .NET Aspire for local orchestration, and GitHub Actions for CI/CD.",url:"https://milanjovanovic.tech/blog/6-steps-for-setting-up-a-new-dotnet-project-the-right-way",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_164.png"}),n[74]||(n[74]=s("p",null,"Starting a new .NET project is always exciting. But it's also easy to skip the groundwork that makes a project scalable and maintainable.",-1)),n[75]||(n[75]=s("p",null,"Before you write your first line of business logic, there are a few key setup steps that make your life (and your teammates) much easier later on.",-1)),n[76]||(n[76]=s("p",null,[a("Here's how I usually set up a new .NET project in "),s("strong",null,"six simple steps"),a(".")],-1)),n[77]||(n[77]=s("hr",null,null,-1)),n[78]||(n[78]=s("h2",{id:"_1-enforce-a-consistent-code-style",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-enforce-a-consistent-code-style"},[s("span",null,"1. Enforce a Consistent Code Style")])],-1)),s("p",null,[n[9]||(n[9]=a("The first thing I add is an ")),t(o,{icon:"fas fa-file-lines"}),n[10]||(n[10]=s("code",null,".editorconfig",-1)),n[11]||(n[11]=a(" file."))]),n[79]||(n[79]=s("p",null,"This file ensures everyone on your team uses the same formatting and naming conventions, reducing inconsistent indents or random naming rules.",-1)),n[80]||(n[80]=s("p",null,"You can create one directly in Visual Studio:",-1)),n[81]||(n[81]=s("figure",null,[s("img",{src:"https://milanjovanovic.tech/blogs/mnw_164/add_editorconfig.png?imwidth=1920",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),n[82]||(n[82]=s("p",null,"The default configuration is a great start. But you can customize it further to fit your team's preferences.",-1)),s("p",null,[n[12]||(n[12]=a("Place it at the ")),n[13]||(n[13]=s("strong",null,"solution root",-1)),n[14]||(n[14]=a(" so all projects follow the same rules. You can still override specific settings in subfolders if needed by placing an ")),t(o,{icon:"fas fa-file-lines"}),n[15]||(n[15]=s("code",null,".editorconfig",-1)),n[16]||(n[16]=a(" file there."))]),s("p",null,[n[17]||(n[17]=a("Here are two sample ")),t(o,{icon:"fas fa-file-lines"}),n[18]||(n[18]=s("code",null,".editorconfig",-1)),n[19]||(n[19]=a(" files you can use:"))]),t(u,{name:"runtime/.editorconfig at main Â· dotnet/runtime",desc:".NET is a cross-platform runtime for cloud, mobile, desktop, and IoT apps. - dotnet/runtime",url:"https://github.com/dotnet/runtime/blob/main/.editorconfig/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/226fac2efe6bbe04bcdf030b5d1736fae92b92f4d7616e0b345c545dd5c6e0ec/dotnet/runtime"}),t(u,{name:"Sample editor config with a bunch of rules turned off ðŸ˜…",desc:"Sample editor config with a bunch of rules turned off ðŸ˜… - .editorconfig",url:"https://gist.github.com/m-jovanovic/417b7d0a641d7dd7d1972550fba298db/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://github.githubassets.com/assets/gist-og-image-54fd7dc0713e.png"}),n[83]||(n[83]=s("hr",null,null,-1)),n[84]||(n[84]=s("h2",{id:"_2-centralize-build-configuration",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-centralize-build-configuration"},[s("span",null,"2. Centralize Build Configuration")])],-1)),s("p",null,[n[20]||(n[20]=a("Next, I add a ")),t(o,{icon:"iconfont icon-code"}),n[21]||(n[21]=s("code",null,"Directory.Build.props",-1)),n[22]||(n[22]=a(" file to the solution root. This file lets you define build settings that apply to every project in the solution."))]),n[85]||(n[85]=p(`<p>Here&#39;s an example:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Directory.Build.props"><span>Directory.Build.props</span></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Project</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>net10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TargetFramework</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImplicitUsings</span><span class="token punctuation">&gt;</span></span>enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ImplicitUsings</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Nullable</span><span class="token punctuation">&gt;</span></span>enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Nullable</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TreatWarningsAsErrors</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TreatWarningsAsErrors</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Project</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),s("p",null,[n[23]||(n[23]=a("This keeps your ")),t(o,{icon:"iconfont icon-code"}),n[24]||(n[24]=s("code",null,".csproj",-1)),n[25]||(n[25]=a(" files clean and consistent, since there's no need to repeat these properties in every project."))]),n[86]||(n[86]=s("p",null,"If you later want to enable static analyzers or tweak build options, you can do it once here.",-1)),s("p",null,[n[26]||(n[26]=a("What's cool about this is your ")),t(o,{icon:"iconfont icon-code"}),n[27]||(n[27]=s("code",null,".csproj",-1)),n[28]||(n[28]=a(" files become basically empty, with only NuGet package references most of the time."))]),n[87]||(n[87]=s("hr",null,null,-1)),n[88]||(n[88]=s("h2",{id:"_3-centralize-package-management",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3-centralize-package-management"},[s("span",null,"3. Centralize Package Management")])],-1)),n[89]||(n[89]=s("p",null,"As your solution grows, managing NuGet package versions across multiple projects gets painful.",-1)),s("p",null,[n[30]||(n[30]=a("That's where ")),t(i,{to:"/milanjovanovic.tech/central-package-management-in-net-simplify-nuget-dependencies.html"},{default:e(()=>n[29]||(n[29]=[s("strong",null,"central package management",-1)])),_:1,__:[29]}),n[31]||(n[31]=a(" helps."))]),s("p",null,[n[32]||(n[32]=a("Create a file named ")),t(o,{icon:"iconfont icon-code"}),n[33]||(n[33]=s("code",null,"Directory.Packages.props",-1)),n[34]||(n[34]=a(" at the root:"))]),n[90]||(n[90]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="Directory.Packages.props"><span>Directory.Packages.props</span></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Project</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ManagePackageVersionsCentrally</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ManagePackageVersionsCentrally</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ItemGroup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageVersion</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Microsoft.AspNetCore.OpenApi<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10.0.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageVersion</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SonarAnalyzer.CSharp<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10.15.0.120848<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ItemGroup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Project</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now, when you reference a NuGet package in your project, you don&#39;t specify the version. You can only use the package name like this:</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Microsoft.AspNetCore.OpenApi<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>All versioning is handled centrally. This makes dependency upgrades trivial and avoids version drift between projects.</p><p>You can still override versions in individual projects if needed.</p><hr><h2 id="_4-add-static-code-analysis" tabindex="-1"><a class="header-anchor" href="#_4-add-static-code-analysis"><span>4. Add Static Code Analysis</span></a></h2>`,7)),s("p",null,[t(i,{to:"/milanjovanovic.tech/improving-code-quality-in-csharp-with-static-code-analysis.html"},{default:e(()=>n[35]||(n[35]=[s("strong",null,"Static code analysis",-1)])),_:1,__:[35]}),n[36]||(n[36]=a(" helps catch potential bugs and maintain code quality. .NET has a set of built-in analyzers, but I like to add ")),n[37]||(n[37]=s("strong",null,"SonarAnalyzer.CSharp",-1)),n[38]||(n[38]=a(" for more comprehensive checks."))]),n[91]||(n[91]=p(`<p>Let&#39;s install <strong>SonarAnalyzer.CSharp</strong> to catch potential code issues early:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> SonarAnalyzer<span class="token punctuation">.</span>CSharp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,2)),s("p",null,[n[39]||(n[39]=a("Add it as a global package reference inside your ")),t(o,{icon:"iconfont icon-code"}),n[40]||(n[40]=s("code",null,"Directory.Build.props",-1)),n[41]||(n[41]=a(":"))]),n[92]||(n[92]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="Directory.Build.props"><span>Directory.Build.props</span></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ItemGroup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SonarAnalyzer.CSharp<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ItemGroup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Combine this with:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Directory.Build.props"><span>Directory.Build.props</span></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Project</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TreatWarningsAsErrors</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TreatWarningsAsErrors</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AnalysisLevel</span><span class="token punctuation">&gt;</span></span>latest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AnalysisLevel</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AnalysisMode</span><span class="token punctuation">&gt;</span></span>All<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AnalysisMode</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeAnalysisTreatWarningsAsErrors</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CodeAnalysisTreatWarningsAsErrors</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EnforceCodeStyleInBuild</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EnforceCodeStyleInBuild</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Project</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>â€¦and your build will fail on serious code quality issues. This can be a great safety net.</p>`,4)),s("p",null,[n[42]||(n[42]=a("But it can also be noisy at first. If some rules don't fit your context, you can adjust or suppress them in ")),t(o,{icon:"fas fa-file-lines"}),n[43]||(n[43]=s("code",null,".editorconfig",-1)),n[44]||(n[44]=a(" by setting the rule severity to ")),n[45]||(n[45]=s("code",null,"none",-1)),n[46]||(n[46]=a("."))]),n[93]||(n[93]=s("hr",null,null,-1)),n[94]||(n[94]=s("h2",{id:"_5-set-up-local-orchestration",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_5-set-up-local-orchestration"},[s("span",null,"5. Set Up Local Orchestration")])],-1)),n[95]||(n[95]=s("p",null,"For a consistent local environment across your team, you'll want container orchestration.",-1)),n[96]||(n[96]=s("p",null,"You have two main options:",-1)),n[97]||(n[97]=s("h3",{id:"option-1-docker-compose",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#option-1-docker-compose"},[s("span",null,"Option 1: Docker Compose")])],-1)),s("p",null,[n[47]||(n[47]=a("Add ")),n[48]||(n[48]=s("strong",null,"Docker Compose support",-1)),n[49]||(n[49]=a(" in Visual Studio. It will scaffold a ")),t(o,{icon:"iconfont icon-yaml"}),n[50]||(n[50]=s("code",null,"docker-compose.yml",-1)),n[51]||(n[51]=a(" file where you can define services like:"))]),n[98]||(n[98]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="docker-compose.yml"><span>docker-compose.yml</span></div><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">webapi</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">build</span><span class="token punctuation">:</span> .</span>
<span class="line">  <span class="token key atrule">postgres</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres<span class="token punctuation">:</span><span class="token number">18</span></span>
<span class="line">    <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">POSTGRES_PASSWORD</span><span class="token punctuation">:</span> password</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This lets every developer spin up the same stack locally with one command.</p><h3 id="option-2-net-aspire" tabindex="-1"><a class="header-anchor" href="#option-2-net-aspire"><span>Option 2: .NET Aspire</span></a></h3>`,3)),s("p",null,[t(i,{to:"/milanjovanovic.tech/dotnet-aspire-a-game-changer-for-cloud-native-development.html"},{default:e(()=>n[52]||(n[52]=[s("strong",null,".NET Aspire",-1)])),_:1,__:[52]}),n[55]||(n[55]=a(" takes orchestration a step further. It provides ")),t(i,{to:"/milanjovanovic.tech/how-dotnet-aspire-simplifies-service-discovery.html"},{default:e(()=>n[53]||(n[53]=[s("strong",null,"service discovery",-1)])),_:1,__:[53]}),n[56]||(n[56]=a(", ")),t(i,{to:"/milanjovanovic.tech/introduction-to-distributed-tracing-with-opentelemetry-in-dotnet.html"},{default:e(()=>n[54]||(n[54]=[s("strong",null,"telemetry",-1)])),_:1,__:[54]}),n[57]||(n[57]=a(", and streamlined configuration, all integrated with your .NET projects. It's become a ")),n[58]||(n[58]=s("strong",null,"personal favorite of mine",-1)),n[59]||(n[59]=a("."))]),n[99]||(n[99]=p(`<p>You can add a .NET project and a Postgres resource with a few lines of code:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> postgres <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">AddPostgres</span><span class="token punctuation">(</span><span class="token string">&quot;demo-db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddProject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>WebApi<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;webapi&quot;</span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token punctuation">.</span><span class="token function">WithReference</span><span class="token punctuation">(</span>postgres<span class="token punctuation">)</span></span>
<span class="line">       <span class="token punctuation">.</span><span class="token function">WaitFor</span><span class="token punctuation">(</span>postgres<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Aspire still uses Docker under the hood but provides a richer developer experience.</p><p>Whether you pick Docker Compose or Aspire, the goal is the same: a repeatable, reliable local setup that works the same on every machine.</p><hr><h2 id="_6-automate-builds-with-ci" tabindex="-1"><a class="header-anchor" href="#_6-automate-builds-with-ci"><span>6. Automate Builds with CI</span></a></h2>`,6)),s("p",null,[n[61]||(n[61]=a("Finally, I set up a simple ")),t(i,{to:"/milanjovanovic.tech/how-to-build-ci-cd-pipeline-with-github-actions-and-dotnet.html"},{default:e(()=>n[60]||(n[60]=[s("strong",null,"GitHub Actions",-1)])),_:1,__:[60]}),n[62]||(n[62]=a(" workflow to validate each commit."))]),n[100]||(n[100]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title=".github/workflows/build.yml"><span>.github/workflows/build.yml</span></div><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">name</span><span class="token punctuation">:</span> Build</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">on</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">push</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># Filter to only run on main branch</span></span>
<span class="line">    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">jobs</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">build</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest</span>
<span class="line">    <span class="token key atrule">steps</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v4</span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>dotnet@v5</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">dotnet-version</span><span class="token punctuation">:</span> 10.0.x</span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> dotnet restore</span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> dotnet build <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>restore <span class="token punctuation">-</span><span class="token punctuation">-</span>configuration Release</span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> dotnet test <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>build <span class="token punctuation">-</span><span class="token punctuation">-</span>configuration Release</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This ensures your project always builds and passes tests, and it catches issues before they reach production. If the CI build fails, you know something&#39;s wrong right away.</p><p>When it comes to testing, I highly recommend exploring:</p>`,3)),s("ul",null,[s("li",null,[t(i,{to:"/milanjovanovic.tech/shift-left-with-architecture-testing-in-dotnet.html"},{default:e(()=>n[63]||(n[63]=[s("strong",null,"Architecture testing",-1)])),_:1,__:[63]}),n[64]||(n[64]=a(" to enforce architectural rules in your codebase"))]),s("li",null,[t(i,{to:"/milanjovanovic.tech/testcontainers-integration-testing-using-docker-in-dotnet.html"},{default:e(()=>n[65]||(n[65]=[s("strong",null,"Integration testing with Testcontainers",-1)])),_:1,__:[65]}),n[66]||(n[66]=a(" to spin up real dependencies in Docker during tests (you can run this locally and in CI)"))])]),n[101]||(n[101]=p('<p>This will give you confidence that your code works as expected in an (as close as possible) production-like environment.</p><hr><h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="#wrapping-up"><span>Wrapping Up</span></a></h2><p>That&#39;s a wrap. Your <strong>new .NET project</strong> is now set up with:</p><ul><li>consistent code style</li><li>centralized build and package management</li><li>code quality enforcement</li><li>reproducible local orchestration</li><li>continuous integration</li></ul><p>These small setup steps save countless hours down the road and keep your codebase clean, predictable, and ready to scale.</p>',6)),s("p",null,[n[68]||(n[68]=a("Once your project setup is solid, the next step is designing scalable boundaries. In my ")),t(i,{to:"/milanjovanovic.tech/modular-monolith-architecture/"},{default:e(()=>n[67]||(n[67]=[s("strong",null,"Modular Monolith Architecture",-1)])),_:1,__:[67]}),n[69]||(n[69]=a(" course, I show how to grow a .NET application without turning it into a tangled mess, through clear module boundaries, messaging, and domain isolation."))]),s("p",null,[n[71]||(n[71]=a("If you're looking for a practical walkthrough of these steps, check out ")),s("a",T,[t(o,{icon:"fa-brands fa-youtube"}),n[70]||(n[70]=a("this video"))]),n[72]||(n[72]=a("."))]),t(m,{src:"youtube/QRgtcbxJlo0"}),n[102]||(n[102]=s("hr",null,null,-1)),f(" TODO: add ARTICLE CARD "),t(c,d(g({title:"6 Steps for Setting Up a New .NET Project the Right Way",desc:"Learn how to properly set up a new .NET project with EditorConfig for code consistency, Directory.Build.props for centralized configuration, central package management, static code analysis, Docker Compose or .NET Aspire for local orchestration, and GitHub Actions for CI/CD.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/6-steps-for-setting-up-a-new-dotnet-project-the-right-way.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const P=v(w,[["render",N]]),E=JSON.parse('{"path":"/milanjovanovic.tech/6-steps-for-setting-up-a-new-dotnet-project-the-right-way.html","title":"6 Steps for Setting Up a New .NET Project the Right Way","lang":"en-US","frontmatter":{"lang":"en-US","title":"6 Steps for Setting Up a New .NET Project the Right Way","description":"Article(s) > 6 Steps for Setting Up a New .NET Project the Right Way","icon":"iconfont icon-csharp","category":["C#","DotNet","DevOps","Docker","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet","devops","docker"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6 Steps for Setting Up a New .NET Project the Right Way\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_164/add_editorconfig.png?imwidth=1920\\"],\\"datePublished\\":\\"2025-10-18T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan JovanoviÄ‡\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/6-steps-for-setting-up-a-new-dotnet-project-the-right-way.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"6 Steps for Setting Up a New .NET Project the Right Way"}],["meta",{"property":"og:description","content":"Article(s) > 6 Steps for Setting Up a New .NET Project the Right Way"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_164.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_164.png"}],["meta",{"name":"twitter:image:alt","content":"6 Steps for Setting Up a New .NET Project the Right Way"}],["meta",{"property":"article:author","content":"Milan JovanoviÄ‡"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-10-18T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 6 Steps for Setting Up a New .NET Project the Right Way"},{"property":"og:description","content":"6 Steps for Setting Up a New .NET Project the Right Way"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/6-steps-for-setting-up-a-new-dotnet-project-the-right-way.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-10-18T00:00:00.000Z","isOriginal":false,"author":"Milan JovanoviÄ‡","cover":"https://milanjovanovic.tech/blog-covers/mnw_164.png"},"git":{},"readingTime":{"minutes":4.97,"words":1490},"filePathRelative":"milanjovanovic.tech/6-steps-for-setting-up-a-new-dotnet-project-the-right-way.md","copyright":{"author":"Milan JovanoviÄ‡"}}');export{P as comp,E as data};
