import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as t,b as i,a as h,t as g,n as r,g as u,w as p,e as a,r as l,o as b}from"./app-BVguHYKu.js";const f="/bookshelf/assets/image/blog.logrocket.com/comparing-schema-validation-libraries-zod-vs-yup/banner.png",y={},w={id:"frontmatter-title-관련",tabindex:"-1"},j={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},x={href:"https://github.com/jquense/yup",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/vriad/zod",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/vriad/zod#unions",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://github.com/colinhacks/zod#intersections:~:text=5%20items%20exactly-,Intersections,-Intersections%20are%20useful",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://typescriptlang.org/docs/handbook/advanced-types.html#type-aliases",target:"_blank",rel:"noopener noreferrer"},I={href:"https://formik.org/docs/tutorial#schema-validation-with-yup",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/react-hook-form/resolvers#zod",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/hapijs/joi",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/ajv-validator/ajv",target:"_blank",rel:"noopener noreferrer"},J={href:"https://json-schema.org/",target:"_blank",rel:"noopener noreferrer"};function P(d,n){const c=l("VPCard"),e=l("router-link"),k=l("SiteInfo"),o=l("VPIcon");return b(),v("div",null,[s("h1",w,[s("a",j,[s("span",null,g(d.$frontmatter.title)+" 관련",1)])]),t(c,r(u({title:"Node.js > Article(s)",desc:"Article(s)",link:"/programming/js-node/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[t(e,{to:"#javascript-schemas"},{default:p(()=>n[0]||(n[0]=[a("JavaScript schemas")])),_:1,__:[0]})]),s("li",null,[t(e,{to:"#an-introduction-to-zod"},{default:p(()=>n[1]||(n[1]=[a("An introduction to Zod")])),_:1,__:[1]})]),s("li",null,[t(e,{to:"#schema-validation-with-zod"},{default:p(()=>n[2]||(n[2]=[a("Schema validation with Zod")])),_:1,__:[2]}),s("ul",null,[s("li",null,[t(e,{to:"#primitive-data-types"},{default:p(()=>n[3]||(n[3]=[a("Primitive data types")])),_:1,__:[3]})]),s("li",null,[t(e,{to:"#basic-object-validations"},{default:p(()=>n[4]||(n[4]=[a("Basic object validations")])),_:1,__:[4]})]),s("li",null,[t(e,{to:"#array-data-types"},{default:p(()=>n[5]||(n[5]=[a("Array data types")])),_:1,__:[5]})]),s("li",null,[t(e,{to:"#function-validation"},{default:p(()=>n[6]||(n[6]=[a("Function validation")])),_:1,__:[6]})]),s("li",null,[t(e,{to:"#zod-s-union-function"},{default:p(()=>n[7]||(n[7]=[a("Zod’s union function")])),_:1,__:[7]})]),s("li",null,[t(e,{to:"#zod-s-intersection-function"},{default:p(()=>n[8]||(n[8]=[a("Zod’s intersection function")])),_:1,__:[8]})])])]),s("li",null,[t(e,{to:"#an-introduction-to-yup"},{default:p(()=>n[9]||(n[9]=[a("An Introduction to Yup")])),_:1,__:[9]})]),s("li",null,[t(e,{to:"#schema-validation-with-yup"},{default:p(()=>n[10]||(n[10]=[a("Schema validation with Yup")])),_:1,__:[10]}),s("ul",null,[s("li",null,[t(e,{to:"#array-validation"},{default:p(()=>n[11]||(n[11]=[a("Array validation")])),_:1,__:[11]})])])]),s("li",null,[t(e,{to:"#zod-vs-yup"},{default:p(()=>n[12]||(n[12]=[a("Zod vs. Yup")])),_:1,__:[12]}),s("ul",null,[s("li",null,[t(e,{to:"#typescript-support"},{default:p(()=>n[13]||(n[13]=[a("TypeScript support")])),_:1,__:[13]})]),s("li",null,[t(e,{to:"#comparing-performance-metrics"},{default:p(()=>n[14]||(n[14]=[a("Comparing performance metrics")])),_:1,__:[14]})]),s("li",null,[t(e,{to:"#ease-of-use"},{default:p(()=>n[15]||(n[15]=[a("Ease of use")])),_:1,__:[15]})]),s("li",null,[t(e,{to:"#ecosystem"},{default:p(()=>n[16]||(n[16]=[a("Ecosystem")])),_:1,__:[16]})]),s("li",null,[t(e,{to:"#integrations"},{default:p(()=>n[17]||(n[17]=[a("Integrations")])),_:1,__:[17]})])])]),s("li",null,[t(e,{to:"#other-libraries-for-schema-validation"},{default:p(()=>n[18]||(n[18]=[a("Other libraries for schema validation")])),_:1,__:[18]})]),s("li",null,[t(e,{to:"#conclusion"},{default:p(()=>n[19]||(n[19]=[a("Conclusion")])),_:1,__:[19]})])])]),n[54]||(n[54]=s("hr",null,null,-1)),t(k,{name:"Comparing schema validation libraries: Zod vs. Yup",desc:"Compare schema validation libraries, Zod and Yup, in terms of validating common data patterns such as primitives, objects, and arrays.",url:"https://blog.logrocket.com/comparing-schema-validation-libraries-zod-vs-yup",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/comparing-schema-validation-libraries-zod-vs-yup/banner.png"}),n[55]||(n[55]=i('<div class="hint-container note"><p class="hint-container-title">Editor’s note:</p><p>This article was last updated on 5 September 2023 to provide a comparison of Zod and Yup based on ease of use, ecosystems, and integrations.</p></div><figure><img src="'+f+`" alt="Comparing Schema Validation Libraries: Zod Vs. Yup" tabindex="0" loading="lazy"><figcaption>Comparing Schema Validation Libraries: Zod Vs. Yup</figcaption></figure><p>Web developers have to deal with a lot of complex data exchanges in their applications. It’s important for apps to validate any data they send or receive because any wrong data type can cause an error. Unexpected data types or values can also crash the application processing it and lead to other undesirable outcomes.</p><p>Schema validation is the process of verifying data by creating a schema. The definition of a schema can vary depending on the implementation, but in JavaScript, a schema is usually an object data type that is used to validate the data in question.</p><p>In this guide, I’ll compare two popular schema validation libraries, Zod and Yup, to see how they perform in terms of validating common data patterns such as primitives, objects, and arrays. I will also compare their performance metrics, learning curve, ecosystem and integrations.</p><hr><h2 id="javascript-schemas" tabindex="-1"><a class="header-anchor" href="#javascript-schemas"><span>JavaScript schemas</span></a></h2><p>Below is a simple example of a schema in JavaScript:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userDataSchema <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> userData <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Peter&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&quot;15&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">validateSchema</span><span class="token punctuation">(</span><span class="token parameter">schema<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> property <span class="token keyword">in</span> schema<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>property <span class="token operator">+</span> <span class="token string">&quot; is required.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">!==</span> schema<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span></span>
<span class="line">        property <span class="token operator">+</span></span>
<span class="line">          <span class="token string">&quot; must be of type &quot;</span> <span class="token operator">+</span></span>
<span class="line">          schema<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">+</span></span>
<span class="line">          <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span></span>
<span class="line">          <span class="token keyword">typeof</span> data<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">+</span></span>
<span class="line">          <span class="token string">&quot; found.&quot;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>property <span class="token operator">+</span> <span class="token string">&quot; is validated!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">validateSchema</span><span class="token punctuation">(</span>userDataSchema<span class="token punctuation">,</span> userData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the code above, the <code>userDataSchema</code> object acts as a schema, validating that the <code>userData</code> object has properties of <code>name</code> and <code>age</code>. It also validates the type of these values: <code>name</code> must be a <code>string</code> while <code>age</code> must be a <code>number</code>.</p><p>Of course, the <code>validateSchema</code> function is not enough for any serious application. To validate a complex data structure and ensure that it doesn’t cause unwanted behavior, you’ll need something more powerful. This is where a schema validation library comes in.</p>`,11)),s("p",null,[n[22]||(n[22]=a("Fortunately, generous JavaScript developers around the world have shared myriad open source schema validation libraries on npm. ")),s("a",x,[t(o,{icon:"iconfont icon-github"}),n[20]||(n[20]=s("code",null,"jquense/yup",-1))]),n[23]||(n[23]=a(" has been one of the most popular schema validation libraries for JavaScript, before ")),s("a",z,[t(o,{icon:"iconfont icon-github"}),n[21]||(n[21]=s("code",null,"vriad/zod",-1))]),n[24]||(n[24]=a(" came onto the scene and stole some of Yup’s spotlight."))]),n[56]||(n[56]=i(`<hr><h2 id="an-introduction-to-zod" tabindex="-1"><a class="header-anchor" href="#an-introduction-to-zod"><span>An introduction to Zod</span></a></h2><p>Zod is a zero-dependency TypeScript-first data validation library that provides a simple and intuitive way to define and validate data in both TypeScript and JavaScript applications. Zod is designed to be self-contained and lightweight with a simple syntax, making it easy to use in various TypeScript and JavaScript environments.</p><p>Some notable features of Zod include:</p><ul><li><strong>Type safety</strong>: Zod is TypeScript-first, which means it provides strong type safety out of the box</li><li><strong>Concise syntax</strong>: Zod offers a simple syntax for defining data schemas. You can define complex validation rules with just a few lines of code</li><li><strong>Asynchronous validation</strong>: With Zod, you can easily perform asynchronous operations during validation</li><li><strong>Custom error messages</strong>: Zod allows you customize error messages, making it user-friendly for developers and end users alike</li><li><strong>Extensibility</strong>: You can easily integrate form validation libraries with Zod. Also, Zod allows for custom validation logic</li><li><strong>Strict by default</strong>: Unlike Yup, Zod provides strict validation rules by default</li><li><strong>Validation short-circuiting</strong>: Zod’s validation process short-circuits upon encountering the first validation error</li></ul><hr><h2 id="schema-validation-with-zod" tabindex="-1"><a class="header-anchor" href="#schema-validation-with-zod"><span>Schema validation with Zod</span></a></h2><p>In this section, we will take a look at some of the common data validation APIs you’ll use.</p><h3 id="primitive-data-types" tabindex="-1"><a class="header-anchor" href="#primitive-data-types"><span>Primitive data types</span></a></h3><p>Primitive values for Zod includes string, number, BigInt, Boolean, date, symbol, etc. Zod also provides APIs for specifying schema for empty values as well as schema for catching any type like <code>any</code> and <code>unknown</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> zod <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;zod&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// or import { zod } from &#39;zod&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> schema <span class="token operator">=</span> zod<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">schema<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The example above shows a simple string schema validation. Zod provides extensive methods for validation:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> passwordSchema <span class="token operator">=</span> zod<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">passwordSchema<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;3same33&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also use other extensive methods for validating a number:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> ageSchema <span class="token operator">=</span> zod<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">ageSchema<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// throws error: Number must be greater than or equal to 18</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You wouldn’t want to send error messages like the one above to end users, as it wouldn’t provide the best experience. This is where custom error messages can be useful:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> ageSchema <span class="token operator">=</span> zod</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;too young to play&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;too old to play&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">ageSchema<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment">// throws error: too young to play</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Apart from validation methods, Zod also provides transformation methods that help format your string values:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> usernameSchema <span class="token operator">=</span> zod<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> emailSchema <span class="token operator">=</span> zod<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>usernameSchema<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;John_Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs john_doe</span></span>
<span class="line">emailSchema<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot; doe@mail.com &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the code above, the <code>usernameSchema</code> converts the returned value of the parsed string to lower case strings. The <code>emailSchema</code> uses the <code>trim</code> transformation method to trim all whitespaces around the string before validating if it’s a valid email or not.</p><p>Ideally, creating a schema of “user” from the examples above would require an object. So let’s see how we can integrate all the examples above into an object schema.</p><h3 id="basic-object-validations" tabindex="-1"><a class="header-anchor" href="#basic-object-validations"><span>Basic object validations</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userSchema <span class="token operator">=</span> zod<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">username</span><span class="token operator">:</span> zod<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">email</span><span class="token operator">:</span> zod<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> zod<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">positive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">password</span><span class="token operator">:</span> zod<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">userSchema<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;john_doe&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&quot;doe@gmail.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">24</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;not-my-favorite&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this case, Zod throws all validation errors in the order that they occur. So if both <code>username</code> and <code>age</code> are invalid, you’ll get an array containing error information for both schemas.</p><p>By default, all properties in an object are required. But if you want to have an optional property, you’d make use of the <code>optional</code> method:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userSchema <span class="token operator">=</span> zod<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">username</span><span class="token operator">:</span> zod<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">email</span><span class="token operator">:</span> zod<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> zod<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">positive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">password</span><span class="token operator">:</span> zod<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">familySecret</span><span class="token operator">:</span> zod<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-data-types" tabindex="-1"><a class="header-anchor" href="#array-data-types"><span>Array data types</span></a></h3><p>Zod provides an <code>array</code> method for validating the values of an array. For example, you can validate the minimum or maximum length of the array with the <code>.min</code> and <code>.max</code> functions:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> fruitsSchema <span class="token operator">=</span> zod<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span>zod<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">fruitsSchema<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can pass in already created schemas to the <code>array</code> method as well. Let’s re-use the <code>userSchema</code> example from the previous section:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> usersSchema <span class="token operator">=</span> zod<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span>userSchema<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;john_doe&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&quot;doe@gmail.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">24</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;not-my-favorite&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">usersSchema<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Number must be greater than 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A <code>tuple</code> is another special Zod API that creates an array with a fixed number of elements and various data types:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> athleteSchema <span class="token operator">=</span> zod<span class="token punctuation">.</span><span class="token function">tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">  <span class="token comment">// takes an array of schemas</span></span>
<span class="line">  zod<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// a string for name</span></span>
<span class="line">  zod<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// a number for jersey</span></span>
<span class="line">  zod<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">pointsScored</span><span class="token operator">:</span> zod<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// an object with property pointsScored that has number value</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">athleteSchema<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;James&quot;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">pointsScored</span><span class="token operator">:</span> <span class="token number">7</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The data parsed into the tuple must be an array that exactly matches the schema structure.</p><h3 id="function-validation" tabindex="-1"><a class="header-anchor" href="#function-validation"><span>Function validation</span></a></h3><p>Zod can validate a function and make sure the data passed into the function and data returned from the function are correct. The function schema uses two APIs (<code>args</code> and <code>returns</code>) to validate the input and output of the function:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> sumOfNumsSchema <span class="token operator">=</span> zod</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">args</span><span class="token punctuation">(</span>zod<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> zod<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span>zod<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> sumOfNums <span class="token operator">=</span> sumOfNumsSchema<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val1<span class="token punctuation">,</span> val2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> val1 <span class="token operator">+</span> val2<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sumOfNums</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Expected number, received string</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Unlike other validations we’ve seen so far, function validation in Zod doesn’t use the same <code>.parse</code> to validate the function. Function validation is unique to Zod; Yup doesn’t have an equivalent API to perform this task.</p><h3 id="zod-s-union-function" tabindex="-1"><a class="header-anchor" href="#zod-s-union-function"><span>Zod’s union function</span></a></h3>`,39)),s("p",null,[n[28]||(n[28]=a("Zod also has some unique APIs to define optional schema. For example, the ")),s("a",q,[n[25]||(n[25]=a("union method (")),t(o,{icon:"iconfont icon-github"}),n[26]||(n[26]=s("code",null,"vriad/zod",-1)),n[27]||(n[27]=a(")"))]),n[29]||(n[29]=a(" can be used to compose “OR” types. For example, to create a schema where the data is a string “OR” a number:"))]),n[57]||(n[57]=i(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> productId <span class="token operator">=</span> zod<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token punctuation">[</span>zod<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> zod<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">productId<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">productId<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;I9290JEI&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">productId<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Invalid input</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="zod-s-intersection-function" tabindex="-1"><a class="header-anchor" href="#zod-s-intersection-function"><span>Zod’s intersection function</span></a></h3>`,2)),s("p",null,[n[33]||(n[33]=a("Another one of Zod’s unique APIs is the ")),s("a",Z,[n[30]||(n[30]=a("intersection method (")),t(o,{icon:"iconfont icon-github"}),n[31]||(n[31]=s("code",null,"colinhacks/zod",-1)),n[32]||(n[32]=a(")"))]),n[34]||(n[34]=a(", which is particularly useful for combining two schemas, creating logical “AND” types. For example:"))]),n[58]||(n[58]=i(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userId <span class="token operator">=</span> zod<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">id</span><span class="token operator">:</span> zod<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> baseTeacher <span class="token operator">=</span> zod<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> zod<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> teacher <span class="token operator">=</span> zod<span class="token punctuation">.</span><span class="token function">intersection</span><span class="token punctuation">(</span>baseTeacher<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">teacher<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Mr Doe&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: id is required</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="an-introduction-to-yup" tabindex="-1"><a class="header-anchor" href="#an-introduction-to-yup"><span>An Introduction to Yup</span></a></h2><p>Yup is one of the most popular JavaScript validation libraries for validating data schemas, particularly in forms and data processing. Some of its core features include:</p><ul><li><strong>Chaining and fluent API</strong>: Yup provides a fluent and chainable API for defining validation rules</li><li><strong>Asynchronous validation</strong>: Just like with Zod, you can perform asynchronous operations during validations with Yup</li><li><strong>Conditional validation</strong>: Yup allows you define validation rules that depend on the values of other fields</li><li><strong>Custom error messages</strong>: Yup allows you to customize error messages for specific validation rules, making it developer-friendly and user-friendly</li><li><strong>Type safety</strong>: Yup, which was rewritten in TypeScript, provides a TypeScript-first support, offering a higher level of type safety</li><li><strong>Immutable</strong>: Just like with Zod, the validation schema in Yup is immutable, so you can safely reuse and share schemas across your codebase</li><li><strong>Locale and internationalization support</strong>: Yup provides support for localization, allowing you to translate error messages and validation rules to different languages</li></ul><hr><h2 id="schema-validation-with-yup" tabindex="-1"><a class="header-anchor" href="#schema-validation-with-yup"><span>Schema validation with Yup</span></a></h2><p>Schema validation with Yup is similar to Zod, but the syntax is different. In terms of general use and extensibility, the two libraries perform the same operations in different ways.</p><p>For example, this is how you would validate a string in Yup:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> yup <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;yup&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// or import * as yup from yup</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> schema <span class="token operator">=</span> yup<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">schema<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns 333</span></span>
<span class="line">schema<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>validate</code> function is similar to Zod’s <code>parse</code> function. Both functions actually parse the object instead of validating it. This means that both functions take the given data and try to return it back. If the parser encounters an error, it will terminate the runtime and throw an error.</p><p>Meanwhile, the <code>isValid</code> function only validates the data and leaves error handling to you. So you may consider catching the errors when using the <code>validate</code> function of Yup and the <code>parse</code> function of Zod.</p><p>From the example above, you may probably be wondering why the schema that we specified as <code>string</code> doesn’t throw any error when a number is passed as the value. This is because Yup isn’t strict by default. A number can easily be coerced into a string, and as such no error is thrown. But you can override this default behavior with the <code>strict</code> API:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> schema <span class="token operator">=</span> yup<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">strict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">schema<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: this must be a \`string\` type, but the final value was: \`333\`</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Just like Zod, Yup also provides extensive APIs for validation and transformation:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userSchema <span class="token operator">=</span> yup</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">username</span><span class="token operator">:</span> yup<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">email</span><span class="token operator">:</span> yup<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> yup<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">positive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">password</span><span class="token operator">:</span> yup<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">familySecret</span><span class="token operator">:</span> yup<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">strict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">userSchema</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;John_Doe&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&quot;doe@gmail.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;not-my-favorite&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: age is a required field</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-validation" tabindex="-1"><a class="header-anchor" href="#array-validation"><span>Array validation</span></a></h3><p>For array type, Yup has several useful extensions to validate its values. For example, you can validate the minimum or maximum length of the array with the <code>.min</code> and <code>.max</code> functions. You can also check the type of its value with the <code>.of</code> function:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// validate that the data is an array with number as its value. </span></span>
<span class="line"><span class="token comment">// The minimum value of the array is two</span></span>
<span class="line"><span class="token comment">// The minimum length of the array is four</span></span>
<span class="line"><span class="token keyword">const</span> schema <span class="token operator">=</span> yup<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>yup<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">schema<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// typerror: this field must have at least 4 items</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="zod-vs-yup" tabindex="-1"><a class="header-anchor" href="#zod-vs-yup"><span>Zod vs. Yup</span></a></h2><h3 id="typescript-support" tabindex="-1"><a class="header-anchor" href="#typescript-support"><span>TypeScript support</span></a></h3><p>Both Zod and Yup support TypeScript. Zod offers TypeScript first-class support. These libraries enable you to infer TypeScript type aliases that you can use to validate the data.</p>`,23)),s("p",null,[n[37]||(n[37]=a("In simple terms, you can validate whether a variable is the correct type of data by creating a ")),s("a",Y,[t(o,{icon:"iconfont icon-typescript"}),n[35]||(n[35]=s("code",null,"type",-1)),n[36]||(n[36]=a(" alias"))]),n[38]||(n[38]=a(" from Yup or Zod’s schema:"))]),n[59]||(n[59]=i(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> yup <span class="token keyword">from</span> <span class="token string">&quot;yup&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> zod <span class="token keyword">from</span> <span class="token string">&quot;zod&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> yupSchema <span class="token operator">=</span> yup<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">type <span class="token constant">A</span> <span class="token operator">=</span> yup<span class="token punctuation">.</span>InferType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> yupSchema<span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token number">12</span> <span class="token comment">// wrong, but nothing happens</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> zodSchema <span class="token operator">=</span> zod<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">type <span class="token constant">B</span> <span class="token operator">=</span> zod<span class="token punctuation">.</span>infer<span class="token operator">&lt;</span><span class="token keyword">typeof</span> zodSchema<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// string</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can run the script above using TypeScript. Notice that Zod actually throws an error while Yup does nothing, even though the value of <code>x</code> should be a string instead of a number.</p><h3 id="comparing-performance-metrics" tabindex="-1"><a class="header-anchor" href="#comparing-performance-metrics"><span>Comparing performance metrics</span></a></h3><p>Comparing the performance of both libraries depends heavily on the specific use case, the complexity of your validation schemas, and the size of the data being validated.</p><p>For simple validation rules and small datasets, the performance difference between Zod and Yup may not be tangible. However, for very complex schemas or large datasets, the performance characteristics may differ. So consider benchmarking the specific validation scenarios that are critical to your application.</p><h3 id="ease-of-use" tabindex="-1"><a class="header-anchor" href="#ease-of-use"><span>Ease of use</span></a></h3><p>Both Yup and Zod are very simple to learn and easy to use. Their syntaxes are so similar that you can easily switch your entire codebase from one to the other.</p><h3 id="ecosystem" tabindex="-1"><a class="header-anchor" href="#ecosystem"><span>Ecosystem</span></a></h3><p>Zod is designed with TypeScript as a primary consideration, which means it integrates seamlessly with TypeScript projects, unlike Yup, which was built to support TypeScript.</p><p>So if you already have a TypeScript project, consider using Zod. Zod is also known for its zero dependency, making it lightweight and easy to integrate into your projects without worrying about extra dependencies.</p><p>Both Zod and Yup have comprehensive documentation, which makes learning easier and faster. Both libraries have a large community adoption, ensuring robust community support so you won’t be stuck on a bug for too long.</p><h3 id="integrations" tabindex="-1"><a class="header-anchor" href="#integrations"><span>Integrations</span></a></h3>`,12)),s("p",null,[n[43]||(n[43]=a("Though Yup is very popular for its easy integration with popular form libraries like ")),s("a",I,[t(o,{icon:"fas fa-globe"}),n[39]||(n[39]=a("Formik"))]),n[44]||(n[44]=a(", Zod also integrates well with other form libraries like ")),s("a",T,[n[40]||(n[40]=a("React Hook Form (")),t(o,{icon:"iconfont icon-github"}),n[41]||(n[41]=s("code",null,"react-hook-form/resolvers",-1)),n[42]||(n[42]=a(")"))]),n[45]||(n[45]=a(". Sometimes it may require additional third-party libraries to make integrating Zod with these form libraries seamless."))]),n[60]||(n[60]=s("hr",null,null,-1)),n[61]||(n[61]=s("h2",{id:"other-libraries-for-schema-validation",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#other-libraries-for-schema-validation"},[s("span",null,"Other libraries for schema validation")])],-1)),s("p",null,[n[48]||(n[48]=a("Zod and Yup are not the only JavaScript and TypeScript libraries for schema validation. In fact, they are not as popular as libraries like ")),s("a",A,[t(o,{icon:"iconfont icon-github"}),n[46]||(n[46]=s("code",null,"hapijs/joi",-1))]),n[49]||(n[49]=a(" and ")),s("a",C,[t(o,{icon:"iconfont icon-github"}),n[47]||(n[47]=s("code",null,"ajv-validator/ajv",-1))]),n[50]||(n[50]=a("."))]),n[62]||(n[62]=s("p",null,"joi is a popular JavaScript validation library used primarily for defining and enforcing data validation rules. It’s widely used in both server-side and client-side applications. It has its own schema definition syntax similar to what we’ve seen in Yup and Zod.",-1)),s("p",null,[n[52]||(n[52]=a("It’s safe to say that AJV is the most popular schema validation library. Unlike joi, which focuses on schema-based validation, AJV is specifically designed for JSON schema validation. It adheres to the ")),s("a",J,[t(o,{icon:"fas fa-globe"}),n[51]||(n[51]=a("JSON Schema standard"))]),n[53]||(n[53]=a(" and provides efficient validation of JSON data against JSON schemas. AJV is often used in APIs and data processing pipelines."))]),n[63]||(n[63]=s("p",null,"joi and AJV are more focused on complex validation scenarios and are suitable for handling large and intricate validation rules. Yup and Zod are often preferred for simpler use cases and form validation.",-1)),n[64]||(n[64]=s("hr",null,null,-1)),n[65]||(n[65]=s("h2",{id:"conclusion",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#conclusion"},[s("span",null,"Conclusion")])],-1)),n[66]||(n[66]=s("p",null,"As you can see from the comparisons above, Zod and Yup both have simple APIs to validate data using schema. Yup has some functions outside of validating data, such as the number schema’s truncate and round methods, which may come in handy in a specific situation.",-1)),n[67]||(n[67]=s("p",null,"Zod is capable of validating a function’s input and output to make sure it has all the right data. It also has great TypeScript support, which terminates the runtime in case of errors, while Yup simply does nothing when the inferred type is wrong. What’s more, Zod has some unique features to define optional schemas like union and intersection.",-1)),n[68]||(n[68]=s("p",null,"So which schema validation library should you use for your next project? It depends on your application requirements. I recommend using Yup if you do a lot of form validation because its extensive functions cover many patterns that are used in forms, even situational ones where you have to do a rounding.",-1)),n[69]||(n[69]=s("p",null,"But if you have lots of API data exchange and you need to validate all data that passes between client and server, Zod might be your best bet — especially if you’re using TypeScript.",-1)),h(" TODO: add ARTICLE CARD "),t(c,r(u({title:"Comparing schema validation libraries: Zod vs. Yup",desc:"Compare schema validation libraries, Zod and Yup, in terms of validating common data patterns such as primitives, objects, and arrays.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/comparing-schema-validation-libraries-zod-vs-yup.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const E=m(y,[["render",P]]),B=JSON.parse('{"path":"/blog.logrocket.com/comparing-schema-validation-libraries-zod-vs-yup.html","title":"Comparing schema validation libraries: Zod vs. Yup","lang":"en-US","frontmatter":{"lang":"en-US","title":"Comparing schema validation libraries: Zod vs. Yup","description":"Article(s) > Comparing schema validation libraries: Zod vs. Yup","icon":"fa-brands fa-node","category":["Node.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Comparing schema validation libraries: Zod vs. Yup\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/comparing-schema-validation-libraries-zod-vs-yup/banner.png\\"],\\"datePublished\\":\\"2023-09-05T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Nathan Sebhastian\\",\\"url\\":\\"https://blog.logrocket.com/author/nathansebhastian/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/comparing-schema-validation-libraries-zod-vs-yup.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Comparing schema validation libraries: Zod vs. Yup"}],["meta",{"property":"og:description","content":"Article(s) > Comparing schema validation libraries: Zod vs. Yup"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/comparing-schema-validation-libraries-zod-vs-yup/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/comparing-schema-validation-libraries-zod-vs-yup/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Comparing schema validation libraries: Zod vs. Yup"}],["meta",{"property":"article:author","content":"Nathan Sebhastian"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-09-05T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Comparing schema validation libraries: Zod vs. Yup"},{"property":"og:description","content":"Comparing schema validation libraries: Zod vs. Yup"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/comparing-schema-validation-libraries-zod-vs-yup.html"}]],"prev":"/programming/js-node/articles/README.md","date":"2023-09-05T00:00:00.000Z","isOriginal":false,"author":[{"name":"Nathan Sebhastian","url":"https://blog.logrocket.com/author/nathansebhastian/"}],"cover":"/assets/image/blog.logrocket.com/comparing-schema-validation-libraries-zod-vs-yup/banner.png"},"git":{},"readingTime":{"minutes":10.1,"words":3029},"filePathRelative":"blog.logrocket.com/comparing-schema-validation-libraries-zod-vs-yup.md","copyright":{"author":"Nathan Sebhastian"}}');export{E as comp,B as data};
