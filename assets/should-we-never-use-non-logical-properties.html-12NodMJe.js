import{_ as f}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as t,f as o,b as l,a as w,t as k,n as d,g as u,w as a,e as n,r as i,o as y}from"./app-BVguHYKu.js";const v={},S={id:"frontmatter-title-관련",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-관련"},E={class:"table-of-contents"},x={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_logical_properties_and_values",target:"_blank",rel:"noopener noreferrer"},j={href:"https://nerdy.dev/is-it-time-to-throw-out-physical-properties#:~:text=I%20don%27t%20write%20websites%20that%20are%20translated%20into%20different%20languages",target:"_blank",rel:"noopener noreferrer"},z={href:"https://chromewebstore.google.com/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb",target:"_blank",rel:"noopener noreferrer"},A={href:"https://front-end.social/@chriscoyier/114501050997950209",target:"_blank",rel:"noopener noreferrer"},R={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-inline",target:"_blank",rel:"noopener noreferrer"},N={href:"https://adactio.com/journal/19457",target:"_blank",rel:"noopener noreferrer"},T={class:"hint-container info"},V={class:"hint-container-title"},I={href:"https://blog.kizu.dev/logical-props/",target:"_blank",rel:"noopener noreferrer"},P={class:"hint-container info"},W={class:"hint-container-title"};function M(c,e){const p=i("VPCard"),r=i("router-link"),h=i("SiteInfo"),s=i("VPIcon"),g=i("RouteLink"),m=i("CodePen");return y(),b("div",null,[t("h1",S,[t("a",C,[t("span",null,k(c.$frontmatter.title)+" 관련",1)])]),o(p,d(u({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t("nav",E,[t("ul",null,[t("li",null,[o(r,{to:"#so-when-should-you-not-use-logical-properties"},{default:a(()=>e[0]||(e[0]=[n("So, when should you not use logical properties?")])),_:1,__:[0]}),t("ul",null,[t("li",null,[o(r,{to:"#when-you-can-t"},{default:a(()=>e[1]||(e[1]=[n("When you can’t")])),_:1,__:[1]})]),t("li",null,[o(r,{to:"#when-it-doesn-t-make-sense"},{default:a(()=>e[2]||(e[2]=[n("When it doesn’t make sense")])),_:1,__:[2]})]),t("li",null,[o(r,{to:"#when-you-re-matching-the-intent"},{default:a(()=>e[3]||(e[3]=[n("When you’re matching the intent")])),_:1,__:[3]})])])]),t("li",null,[o(r,{to:"#cheat-sheet"},{default:a(()=>e[4]||(e[4]=[n("Cheat Sheet")])),_:1,__:[4]})])])]),e[38]||(e[38]=t("hr",null,null,-1)),o(h,{name:"Should we NEVER use non-logical properties?",desc:"Best bet: just always use them. More nuanced take: there is a few situations where using the physical property is still releavant.",url:"https://frontendmasters.com/blog/should-we-never-use-non-logical-properties/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6658"}),t("p",null,[e[7]||(e[7]=n("CSS has ")),t("a",x,[o(s,{icon:"fa-brands fa-firefox"}),e[5]||(e[5]=n("“logical properties”"))]),e[8]||(e[8]=n(" which have the unique ability to follow the flow of language. You might be working on an website in English, which is left-to-right and top-to-bottom, but other languages might flip either or both of those. In English, we know what ")),e[9]||(e[9]=t("code",null,"margin-right",-1)),e[10]||(e[10]=n(" does, but can quickly become the wrong choice if the direction of a web page is flipped, ")),o(g,{to:"/frontendmasters.com/to-flip-or-not-to-flip.html"},{default:a(()=>e[6]||(e[6]=[t("strong",null,"perhaps during translation",-1)])),_:1,__:[6]}),e[11]||(e[11]=n("."))]),e[39]||(e[39]=l("<p>So instead of <code>margin-right</code>, more and more CSS authors are writing <code>margin-inline-end</code>, which matches our intention better. Should the flow of the site change, our intention, and the design, holds.</p><p>You probably already knew that.</p><p>So, what, then?</p><p>Are we to absolutely never use a “physical” property again, like <code>margin-right</code>? Knowing that there is a better property available?</p><p>My take: <strong>yes, just use logical properties all the time.</strong></p><p>If you need an answer with zero nuance, there it is. You’ll be better off and make better websites for people if you just entirely switch as often as you can.</p>",6)),t("p",null,[e[13]||(e[13]=n("There is some nuance, though, and plenty of pushback. ")),t("a",j,[o(s,{icon:"fas fa-globe"}),e[12]||(e[12]=n("People say things like"))]),e[14]||(e[14]=n(":"))]),e[40]||(e[40]=t("blockquote",null,[t("p",null,"No, why should I unlearn the old ways? I don’t write websites that are translated into different languages with different reading directions.")],-1)),t("p",null,[e[18]||(e[18]=n("That’s not a reasonable opinion when you can just straight up see that ")),t("a",z,[o(s,{icon:"fa-brands fa-google"}),e[15]||(e[15]=n("Google Translate has 29 million users"))]),e[19]||(e[19]=n(", and you don’t even need it installed to translate sites as it’s just built into Chrome and other browsers. Your website ")),e[20]||(e[20]=t("em",null,"is",-1)),e[21]||(e[21]=n(" being translated. Whether flow direction is flipped during that translation is less clear (it appears that is ")),t("a",A,[o(s,{icon:"fas fa-globe"}),e[16]||(e[16]=t("em",null,"not",-1)),e[17]||(e[17]=n(" a default behavior"))]),e[22]||(e[22]=n(" of Google Translate, but sites may do it anyway, and other translators might work differently.)"))]),e[41]||(e[41]=l('<hr><h2 id="so-when-should-you-not-use-logical-properties" tabindex="-1"><a class="header-anchor" href="#so-when-should-you-not-use-logical-properties"><span>So, when should you <em>not</em> use logical properties?</span></a></h2><h3 id="when-you-can-t" tabindex="-1"><a class="header-anchor" href="#when-you-can-t"><span>When you can’t</span></a></h3><ul><li><strong>Media queries.</strong> There is <code>@media (width &lt; 30rem) { }</code> but not <code>@media (inline-size &lt; 30rem) { }</code></li><li><strong>Transform function.</strong> There is <code>translateX()</code> but not <code>translateInline()</code>. This is similar with the <code>Y</code> version, and across other functions like <code>scaleX</code> and <code>skewX</code>.</li><li><strong>Background position.</strong> There is <code>background-position-x</code> but not <code>background-position-inline</code>. (Likewise with <code>y</code>)</li><li><strong>Gradients.</strong> There is <code>linear-gradient(to top, black, white)</code> but not <code>linear-gradient(to block start, black, white);</code></li></ul>',4)),t("p",null,[e[25]||(e[25]=n("It’s just missing a few properties, as sometimes it was clearly thought of. We have ")),t("a",R,[o(s,{icon:"fa-brands fa-firefox"}),e[23]||(e[23]=t("code",null,"overflow-inline",-1))]),e[26]||(e[26]=n(", for example, as a logical replacement of ")),e[27]||(e[27]=t("code",null,"overflow-x",-1)),e[28]||(e[28]=n(". Jeremy Keith ")),t("a",N,[o(s,{icon:"fas fa-globe"}),e[24]||(e[24]=n("notes some others"))]),e[29]||(e[29]=n(", like how the JavaScript API ")),e[30]||(e[30]=t("code",null,"getBoundingClientRect",-1)),e[31]||(e[31]=n(" doesn’t return things in logical values."))]),e[42]||(e[42]=l(`<p>When you can’t, but you actually need to, you’ll need to check the directions to handle it likely.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.hero-graphic</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> </span>
<span class="line">    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>hero.jpg<span class="token punctuation">)</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to top<span class="token punctuation">,</span> black<span class="token punctuation">,</span> transparent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">place-items</span><span class="token punctuation">:</span> end start<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.vertical-writing-mode .hero-graphic</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token property">background</span><span class="token punctuation">:</span> </span>
<span class="line">    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>hero.jpg<span class="token punctuation">)</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to left<span class="token punctuation">,</span> black<span class="token punctuation">,</span> transparent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="when-it-doesn-t-make-sense" tabindex="-1"><a class="header-anchor" href="#when-it-doesn-t-make-sense"><span>When it doesn’t make sense</span></a></h3><p>I always think of images in this cateogry. Just because text starts flowing top-to-bottom in some languages, doesn’t mean we flip images 90 degrees. Like if there is an image in the middle of a blog post in Japanese, the image is still shown as-taken.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/japanese-blog-post.png?resize=1024%2C598&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>So if we’re setting the size of that image, we’d still use <code>width</code> to constrain it not <code>inline-size</code>, probably. Although it might make sense to <em>constrain</em> the maximums in <em>both</em> directions, in which case using logical properties or not is fine.</p>`,6)),t("div",T,[t("p",V,[t("a",I,[o(s,{icon:"fas fa-globe"}),e[32]||(e[32]=n("Roma Komarov says"))])]),e[33]||(e[33]=t("blockquote",null,[t("p",null,"While it might be a good idea to approach CSS with logical keywords first, there are cases where we could want to use physical properties and values. For example, when we want to match something with the positions on an image, which won’t change based on the writing mode.")],-1)),o(p,d(u({title:"Notes on Using Logical Properties and Values",desc:"Adam Argyle asked today: “is it time to forget about physical properties like margin-top and left?” I have some thoughts occasionally on this, and decided to write them down as a list: maybe I’ll update it later with other related things, we’ll see. At the bottom of this post, I’ll also list several useful resources — don’t forget to check them out!",link:"https://blog.kizu.dev/logical-props",logo:"https://blog.kizu.dev/logical-props/favicon.svg",background:"rgba(77,196,255,0.2)"})),null,16)]),e[43]||(e[43]=t("h3",{id:"when-you-re-matching-the-intent",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#when-you-re-matching-the-intent"},[t("span",null,"When you’re matching the intent")])],-1)),e[44]||(e[44]=t("p",null,"Miriam once wrote:",-1)),t("div",P,[t("p",W,[e[34]||(e[34]=n("A long-term plan for logical properties? (")),o(s,{icon:"fas fa-globe"}),e[35]||(e[35]=t("code",null,"miriamsuzanne.com",-1)),e[36]||(e[36]=n(")"))]),e[37]||(e[37]=t("blockquote",null,[t("p",null,[n("It’s not "),t("em",null,"bad"),n(" to use the physical properties sometimes, when they best express the design intent, but they shouldn’t be encouraged as the default choice.")])],-1)),o(h,{name:"A long-term plan for logical properties?",desc:"The CSS Working Group is discussing 'logical properties' today with the Internationalization Working Group -- and there's a great new article on the topic this week from Jeremy Keith. ",url:"https://miriamsuzanne.com/2022/09/16/tpac-logical",logo:"https://miriamsuzanne.com/favicon.svg",preview:"https://miriamsuzanne.com/images/headshots/GBoSaie2zL-1600.jpeg"})]),e[45]||(e[45]=l('<p>The intent could be, for example, place this chat widget on the bottom right of the page. The language perhaps doesn’t matter here, it’s adhering to where feels right in the browser and has become something of a defacto standard.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/Screenshot-2025-07-31-at-7.52.20-AM.png?resize=1024%2C738&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>When positioning that, we could set the <code>bottom</code> and <code>right</code> values, as they match the intent, rather than swapping them out for <code>inset-block-end</code> and <code>inset-inline-end</code>.</p><p>This <em>may</em> be the case when you’re doing things like anchor positioning and fallbacks, where the physical nature of the browser window might be of more consequence than the language direction.</p><hr><h2 id="cheat-sheet" tabindex="-1"><a class="header-anchor" href="#cheat-sheet"><span>Cheat Sheet</span></a></h2><p>From Adrian Roselli:</p>',7)),o(m,{user:"aardrian","slug-hash":"QXKpxG",title:"Playing with CSS Logical Properties Support","default-tab":["css","result"],theme:c.$isDarkmode?"dark":"light"},null,8,["theme"]),w(" TODO: add ARTICLE CARD "),o(p,d(u({title:"Should we NEVER use non-logical properties?",desc:"Best bet: just always use them. More nuanced take: there is a few situations where using the physical property is still releavant.",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/should-we-never-use-non-logical-properties.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const q=f(v,[["render",M]]),G=JSON.parse('{"path":"/frontendmasters.com/should-we-never-use-non-logical-properties.html","title":"Should we NEVER use non-logical properties?","lang":"en-US","frontmatter":{"lang":"en-US","title":"Should we NEVER use non-logical properties?","description":"Article(s) > Should we NEVER use non-logical properties?","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","frontendmasters.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Should we NEVER use non-logical properties?\\",\\"image\\":[\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/japanese-blog-post.png?resize=1024%2C598&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/Screenshot-2025-07-31-at-7.52.20-AM.png?resize=1024%2C738&ssl=1\\"],\\"datePublished\\":\\"2025-07-31T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chris Coyier\\",\\"url\\":\\"https://frontendmasters.com/blog/author/chriscoyier/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/should-we-never-use-non-logical-properties.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Should we NEVER use non-logical properties?"}],["meta",{"property":"og:description","content":"Article(s) > Should we NEVER use non-logical properties?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6658"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6658"}],["meta",{"name":"twitter:image:alt","content":"Should we NEVER use non-logical properties?"}],["meta",{"property":"article:author","content":"Chris Coyier"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-07-31T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Should we NEVER use non-logical properties?"},{"property":"og:description","content":"Should we NEVER use non-logical properties?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/should-we-never-use-non-logical-properties.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-07-31T00:00:00.000Z","isOriginal":false,"author":[{"name":"Chris Coyier","url":"https://frontendmasters.com/blog/author/chriscoyier/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6658"},"git":{},"readingTime":{"minutes":4.3,"words":1290},"filePathRelative":"frontendmasters.com/should-we-never-use-non-logical-properties.md","copyright":{"author":"Chris Coyier"}}');export{q as comp,G as data};
