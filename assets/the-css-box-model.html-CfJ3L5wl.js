import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,d as t,f as s,b as g,a as b,t as f,n as h,g as p,w as i,e as o,r,o as w}from"./app-BVguHYKu.js";const y={},x={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"};function C(d,e){const l=r("VPCard"),n=r("router-link"),c=r("SiteInfo"),a=r("RouteLink");return w(),u("div",null,[t("h1",x,[t("a",k,[t("span",null,f(d.$frontmatter.title)+" 관련",1)])]),s(l,h(p({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t("nav",v,[t("ul",null,[t("li",null,[s(n,{to:"#what-if-these-values-are-undeclared"},{default:i(()=>e[0]||(e[0]=[o("What if these values are undeclared?")])),_:1,__:[0]})]),t("li",null,[s(n,{to:"#the-default-width-of-block-level-boxes"},{default:i(()=>e[1]||(e[1]=[o("The Default Width of Block Level Boxes")])),_:1,__:[1]})]),t("li",null,[s(n,{to:"#absolute-boxes-with-no-width"},{default:i(()=>e[2]||(e[2]=[o("Absolute Boxes with No Width")])),_:1,__:[2]})]),t("li",null,[s(n,{to:"#floated-boxes-with-no-width"},{default:i(()=>e[3]||(e[3]=[o("Floated Boxes With No Width")])),_:1,__:[3]})]),t("li",null,[s(n,{to:"#inline-elements-are-boxes-too"},{default:i(()=>e[4]||(e[4]=[o("Inline Elements are Boxes Too")])),_:1,__:[4]})]),t("li",null,[s(n,{to:"#see-it-with-your-own-eyes"},{default:i(()=>e[5]||(e[5]=[o("See it with your own eyes")])),_:1,__:[5]})])])]),e[17]||(e[17]=t("hr",null,null,-1)),s(c,{name:"The CSS Box Model",desc:"At the risk of over-repeating myself: every element in web design is a rectangular box. This was my ah-ha moment that helped me really start to understand",url:"https://css-tricks.com/the-css-box-model",logo:"https://css-tricks/favicon.svg",preview:"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/thebox.png"}),t("p",null,[e[10]||(e[10]=o("At the risk of over-repeating myself: ")),e[11]||(e[11]=t("strong",null,"every element in web design is a rectangular box.",-1)),e[12]||(e[12]=o(" This was my ")),s(a,{to:"/css-tricks.com/the-css-ah-ha-moment.html"},{default:i(()=>e[6]||(e[6]=[t("strong",null,"ah-ha moment",-1)])),_:1,__:[6]}),e[13]||(e[13]=o(" that helped me really start to understand CSS-based web design and accomplish the layouts I wanted to accomplish. We’ve talked about the ")),s(a,{to:"/css-tricks.com/absolute-relative-fixed-positioining-how-do-they-differ.html"},{default:i(()=>e[7]||(e[7]=[t("strong",null,"positioning of these boxes",-1)])),_:1,__:[7]}),e[14]||(e[14]=o(" a ")),s(a,{to:"/css-tricks.com/absolute-positioning-inside-relative-positioning.html"},{default:i(()=>e[8]||(e[8]=[t("strong",null,"bit",-1)])),_:1,__:[8]}),e[15]||(e[15]=o(", and ")),s(a,{to:"/css-tricks.com/the-css-overflow-property.html"},{default:i(()=>e[9]||(e[9]=[t("strong",null,"about their behavior",-1)])),_:1,__:[9]}),e[16]||(e[16]=o("."))]),e[18]||(e[18]=g(`<p>What we haven’t talked about much is the box itself. How is the size of the box calculated exactly?<br> Here is a diagram:</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/thebox.png?resize=570%2C248&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>If you are a Firebug user, you might be used to the diagram like this, which does a nice job of showing you the numbers affecting any box on the page:</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/firebox.png?resize=570%2C234&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Notice in both examples the margin is in the white. Margin is unique in that it doesn’t affect the size of the box itself per se, but it affects <em>other</em> content interacting with the box, and thus an important part of the CSS box model.</p><p>The size of the box itself is calculated like this:</p><ul><li><strong>Width</strong>: width + padding-left + padding-right + border-left + border-right |</li><li><strong>Height</strong>: height + padding-top + padding-bottom + border-top + border-bottom</li></ul><hr><h2 id="what-if-these-values-are-undeclared" tabindex="-1"><a class="header-anchor" href="#what-if-these-values-are-undeclared"><span>What if these values are undeclared?</span></a></h2><p>If padding or borders are undeclared, they are either zero (likely if you are using a <a href="https://css-tricks.com/poll-results-what-css-reset-do-you-use/" target="_blank" rel="noopener noreferrer">css reset</a>) or the browser default value (probably <strong>not</strong> zero especially on form elements that are commonly not reset).</p><p>If the width of a box is undeclared (and the box is a block level element), things get a little weirder. Let’s start with that, and then move on to some other good-to-know stuff about the box model.</p><hr><h2 id="the-default-width-of-block-level-boxes" tabindex="-1"><a class="header-anchor" href="#the-default-width-of-block-level-boxes"><span>The Default Width of Block Level Boxes</span></a></h2><p>If you don’t declare a width, and the box has static or relative positioning, the width will remain 100% in width and the padding and border will push inwards instead of outward. But if you <em>explicitly set</em> the width of the box to be 100%, the padding will push the box outward as normal.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/weird-1.png?resize=570%2C360&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>The lesson here being that the default width of a box isn’t really 100% but a less tangible <em>“whatever is left”</em>. This is particularly valuable to know, since there are lots of circumstances where it is immensely useful to either <strong>set</strong> or <strong>not set</strong> a width.</p><p>The biggest ass-biter I always find with this is textarea elements, which very much need their widths set to fight the required “cols” attribute, and are unable to have children elements. So you often need the textarea to be explicitly set to 100%, yet have padding as well, pushing it too large to fit. In a static width environment, we often resort to pixel widths that fit, but no such luck in fluid width environments.</p><hr><h2 id="absolute-boxes-with-no-width" tabindex="-1"><a class="header-anchor" href="#absolute-boxes-with-no-width"><span>Absolute Boxes with No Width</span></a></h2><p>Absolutely positioned boxes that have no width set on them behave a bit strangely. Their width is only as wide as it needs to be to hold the content. So if the box contains a single word, the box is only as wide as that word renders. If it grows to two words, it’ll grow that wide.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/abs-width.png?resize=570%2C300&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>This should continue until the box is 100% of the parent’s width (the nearest parent with relative positioning, or browser window) and then begin to wrap. It feels natural and normal for boxes to expand vertically to accommodate content, but it just feels strange when it happens horizontally. That strange feeling is warranted, as there are plenty of quirks in how different browsers handle this, not to mention just the fact that text renders differently across platforms.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/text-render-abs.png?resize=570%2C200&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="floated-boxes-with-no-width" tabindex="-1"><a class="header-anchor" href="#floated-boxes-with-no-width"><span>Floated Boxes With No Width</span></a></h2><p>The same exact behavior is seen with floated elements with no widths. The box is only as wide as it needs to be to accommodate the content, up to as wide as its parent element (doesn’t need to be relatively positioned though). Because of the fragile nature of these width-less boxes, the lesson to take away here is to not rely on them in mission-critical scenarios, like in overall page layout. If you float a column to use as a sidebar and count on some element inside (like an image) to be responsible for holding its width, you are asking for trouble.</p><hr><h2 id="inline-elements-are-boxes-too" tabindex="-1"><a class="header-anchor" href="#inline-elements-are-boxes-too"><span>Inline Elements are Boxes Too</span></a></h2><p>We’ve been kind of focusing on boxes as block-level elements here. It’s easy to think of block-level elements as boxes, but inline elements are boxes too. Think of them as really really long and skinny rectangles, that just so happen to wrap at every line. They are able to have margin, padding, borders just like any other box.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/span.png?resize=570%2C193&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>The wrapping is what makes it confusing. A left margin as shown above pushes the box to the right as you would suspect, but only the first line, as that is the beginning of the box. Padding is applied above and below the text like it should be, and when it wraps it ignores the line above its padding and begins where the line-height dictates it should begin. The background was applied with transparency to see how it works more clearly.</p><hr><h2 id="see-it-with-your-own-eyes" tabindex="-1"><a class="header-anchor" href="#see-it-with-your-own-eyes"><span>See it with your own eyes</span></a></h2><p>Wanna see every single “box” that makes up a page? Try putting this in the stylesheet temporarily:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">*</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token property">outline</span><span class="token punctuation">:</span> 1px solid red <span class="token important">!important</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/all-is-a-box.jpg?resize=570%2C381&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,36)),b(" TODO: add ARTICLE CARD "),s(l,h(p({title:"The CSS Box Model",desc:"At the risk of over-repeating myself: every element in web design is a rectangular box. This was my ah-ha moment that helped me really start to understand",link:"https://chanhi2000.github.io/bookshelf/css-tricks.com/the-css-box-model.html",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16)])}const z=m(y,[["render",C]]),B=JSON.parse('{"path":"/css-tricks.com/the-css-box-model.html","title":"The CSS Box Model","lang":"en-US","frontmatter":{"lang":"en-US","title":"The CSS Box Model","description":"Article(s) > The CSS Box Model","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","css-tricks.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"The CSS Box Model\\",\\"image\\":[\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/thebox.png?resize=570%2C248&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/firebox.png?resize=570%2C234&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/weird-1.png?resize=570%2C360&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/abs-width.png?resize=570%2C300&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/text-render-abs.png?resize=570%2C200&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/span.png?resize=570%2C193&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/all-is-a-box.jpg?resize=570%2C381&ssl=1\\"],\\"datePublished\\":\\"2021-02-18T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chris Coyier\\",\\"url\\":\\"https://css-tricks.com/author/chriscoyier/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/the-css-box-model.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"The CSS Box Model"}],["meta",{"property":"og:description","content":"Article(s) > The CSS Box Model"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/thebox.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/thebox.png"}],["meta",{"name":"twitter:image:alt","content":"The CSS Box Model"}],["meta",{"property":"article:author","content":"Chris Coyier"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"css-tricks.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2021-02-18T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > The CSS Box Model"},{"property":"og:description","content":"The CSS Box Model"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/the-css-box-model.html"}]],"prev":"/programming/css/articles/README.md","date":"2021-02-18T00:00:00.000Z","isOriginal":false,"author":[{"name":"Chris Coyier","url":"https://css-tricks.com/author/chriscoyier/"}],"cover":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/02/thebox.png"},"git":{},"readingTime":{"minutes":4.02,"words":1207},"filePathRelative":"css-tricks.com/the-css-box-model.md","copyright":{"author":"Chris Coyier"}}');export{z as comp,B as data};
