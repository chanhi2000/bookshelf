import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as f,d as a,f as n,b as c,a as k,t as w,n as p,g as m,w as s,e as i,r as o,o as b}from"./app-BVguHYKu.js";const v={},y={id:"frontmatter-title-관련",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},z={class:"hint-container note"},I={href:"https://product.kyobobook.co.kr/detail/S000217402731",target:"_blank",rel:"noopener noreferrer"};function L(g,e){const l=o("VPCard"),t=o("router-link"),u=o("SiteInfo"),d=o("RouteLink"),r=o("VPIcon");return b(),f("div",null,[a("h1",y,[a("a",C,[a("span",null,w(g.$frontmatter.title)+" 관련",1)])]),n(l,p(m({title:"Claude > Article(s)",desc:"Article(s)",link:"/ai/claude/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n(l,p(m({title:"Github > Article(s)",desc:"Article(s)",link:"/devops/github/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a("nav",x,[a("ul",null,[a("li",null,[n(t,{to:"#바이브옵스-도구로의-클로드-코드-claude-code"},{default:s(()=>e[0]||(e[0]=[i("바이브옵스 도구로의 클로드 코드(Claude Code)")])),_:1,__:[0]}),a("ul",null,[a("li",null,[n(t,{to:"#claude-usage-limit-reached-your-limit-will-reset-at-4pm"},{default:s(()=>e[1]||(e[1]=[i("“Claude usage limit reached. Your limit will reset at 4pm...”")])),_:1,__:[1]})])])]),a("li",null,[n(t,{to:"#_3가지-예시로-알아보는-제미나이-cli-vs-클로드-코드"},{default:s(()=>e[2]||(e[2]=[i("3가지 예시로 알아보는 제미나이 CLI vs 클로드 코드")])),_:1,__:[2]}),a("ul",null,[a("li",null,[n(t,{to:"#깃허브-액션-ci"},{default:s(()=>e[3]||(e[3]=[i("깃허브 액션 (CI)")])),_:1,__:[3]})]),a("li",null,[n(t,{to:"#헬름-배포"},{default:s(()=>e[4]||(e[4]=[i("헬름 배포")])),_:1,__:[4]})]),a("li",null,[n(t,{to:"#스크립트-작성"},{default:s(()=>e[5]||(e[5]=[i("스크립트 작성")])),_:1,__:[5]})])])]),a("li",null,[n(t,{to:"#마치며-바이브옵스에-어떤-도구를-선택해야-하는가"},{default:s(()=>e[6]||(e[6]=[i("마치며: 바이브옵스에 어떤 도구를 선택해야 하는가?")])),_:1,__:[6]})])])]),e[21]||(e[21]=a("hr",null,null,-1)),n(u,{name:"제미나이 CLI vs 클로드 코드: 바이브옵스(VibeOps) 관점에서 비교하기",desc:"바이브옵스는 AI 도구와 함께 운영을 하므로, 제미나이 CLI 외에 다른 도구가 어떻게 동작하는지 알아둔다면 선택에 큰 도움이 될 것입니다. 특히 제미나이 CLI와 견줄 도구로 클로드 코드(Claude Code)가 있습니다. 다만 유료이기 때문에, 결제하기 전에도 충분히 효과를 이해해야만 비용 지출 여부를 결정할 수 있습니다. 따라서 지금부터는 유료 구독인 클로드 코드를 사용해 바이브옵스를 진행해 보려고 합니다. 제미나이 CLI에 입력한 프롬프트를 똑같이 사용하고 결과를 비교해, 어떤 도구를 선택하는 것이 좋을지 알아보겠습니다.",url:"https://yozm.wishket.com/magazine/detail/3334/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/3334/image13.png"}),a("p",null,[e[8]||(e[8]=i("앞선 글 ")),n(d,{to:"/yozm.wishket.com/3325.html"},{default:s(()=>e[7]||(e[7]=[a("strong",null,"바이브옵스(VibeOps)’로 운영 생산성 극대화하기",-1)])),_:1,__:[7]}),e[9]||(e[9]=i("에서는 바이브옵스를 설명하기 위해, 제미나이 CLI(Gemini CLI)를 사용했습니다."))]),e[22]||(e[22]=a("p",null,"하지만, 바이브옵스는 AI 도구와 함께 운영을 하므로, 제미나이 CLI 외에 다른 도구가 어떻게 동작하는지 알아둔다면 선택에 큰 도움이 될 것입니다.",-1)),e[23]||(e[23]=a("hr",null,null,-1)),e[24]||(e[24]=a("h2",{id:"바이브옵스-도구로의-클로드-코드-claude-code",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#바이브옵스-도구로의-클로드-코드-claude-code"},[a("span",null,"바이브옵스 도구로의 클로드 코드(Claude Code)")])],-1)),e[25]||(e[25]=a("p",null,"제미나이 CLI와 견줄 도구로 클로드 코드(Claude Code)가 있습니다. 다만 유료이기 때문에, 결제하기 전에도 충분히 효과를 이해해야만 비용 지출 여부를 결정할 수 있습니다.",-1)),e[26]||(e[26]=a("p",null,"클로드 코드는 크게 두 가지 요금제, 사용하는 만큼 비용을 지불하는 API Usage Billing과 구독제를 운영하고 있습니다. 구독제는 클로드 Pro와 Max로 구성되며, 정해진 만큼 사용량이 제한됩니다. 그렇기에 구독제를 사용하다가 제한에 도달하면, 다음과 같은 메시지가 출력됩니다.",-1)),e[27]||(e[27]=a("h3",{id:"claude-usage-limit-reached-your-limit-will-reset-at-4pm",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#claude-usage-limit-reached-your-limit-will-reset-at-4pm"},[a("span",null,"“Claude usage limit reached. Your limit will reset at 4pm...”")])],-1)),e[28]||(e[28]=a("p",null,"따라서 지금부터는 유료 구독인 클로드 코드를 사용해 바이브옵스를 진행해 보려고 합니다. 제미나이 CLI에 입력한 프롬프트를 똑같이 사용하고 결과를 비교해, 어떤 도구를 선택하는 것이 좋을지 알아보겠습니다.",-1)),a("div",z,[e[13]||(e[13]=a("p",{class:"hint-container-title"},"Note",-1)),a("p",null,[e[11]||(e[11]=i("더 자세한 테스트 과정과 결과 비교를 확인하려면, ")),n(d,{to:"/yozm.wishket.com/3325.html"},{default:s(()=>e[10]||(e[10]=[a("strong",null,"바이브옵스(VibeOps)’로 운영 생산성 극대화하기",-1)])),_:1,__:[10]}),e[12]||(e[12]=i("를 보고 오는 것을 추천합니다."))]),n(l,p(m({title:"‘바이브옵스(VibeOps)’로 운영 생산성 극대화하기",desc:"바이브 코딩(Vibe Coding)은 많이들 알고 있는 개념이지만, ‘바이브옵스(VibeOps)’라는 개념은 다소 생소할 수 있습니다. 바이브 코딩이 자연어로 설계하고 검증한 프롬프트를 입력해 코드를 생성한다면, 바이브옵스는 같은 방식으로 운영에 필요한 내용을 자연어로 입력하고, 그 결과를 받아들이거나 필요에 따라 수정하면서 운영하는 것을 의미합니다. 오늘은 주요 환경에서의 바이브옵스 예시를 소개하고, 사용을 위해 알아야 하는 것들을 정리하려고 합니다.",link:"/yozm.wishket.com/3325.md",logo:"https://yozm.wishket.com/favicon.ico",background:"rgba(84,7,224,0.2)"})),null,16)]),e[29]||(e[29]=c(`<hr><h2 id="_3가지-예시로-알아보는-제미나이-cli-vs-클로드-코드" tabindex="-1"><a class="header-anchor" href="#_3가지-예시로-알아보는-제미나이-cli-vs-클로드-코드"><span>3가지 예시로 알아보는 제미나이 CLI vs 클로드 코드</span></a></h2><h3 id="깃허브-액션-ci" tabindex="-1"><a class="header-anchor" href="#깃허브-액션-ci"><span>깃허브 액션 (CI)</span></a></h3><h4 id="배포하려고-하는-매니페스트의-보안-체크" tabindex="-1"><a class="header-anchor" href="#배포하려고-하는-매니페스트의-보안-체크"><span>배포하려고 하는 매니페스트의 보안 체크**</span></a></h4><p>테스트를 위해 도커 샘플 조직에 있는 wordsmith 저장소를 포크(fork)해 옵니다. 포크한 내용을 <code>git clone</code>으로 내려받고는, 해당 디렉터리로 이동해 <code>claude</code>를 실행합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token builtin class-name">cd</span> wordsmith</span>
<span class="line">claude</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),a("p",null,[e[14]||(e[14]=i("그런 다음 클로드에게 trivy를 이용해서 ")),n(r,{icon:"fas fa-folder-open"}),e[15]||(e[15]=a("code",null,"k8s-manifests/",-1)),n(r,{icon:"iconfont icon-yaml"}),e[16]||(e[16]=a("code",null,"api.yaml",-1)),e[17]||(e[17]=i("에 있는 파일의 보안을 체크할 깃허브 액션을 만들어 달라고 요청했습니다."))]),e[30]||(e[30]=c(`<div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token bold"><span class="token punctuation">**</span><span class="token content">Prompt |</span><span class="token punctuation">**</span></span> create github action for security check by trivy @k8s-manifests/api.yaml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://wishket.com/media/news/3334/image13.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이때 클로드 코드가 제미나이 CLI와 가장 큰 차이점을 보인 부분은, 전체 계획을 먼저 수립한 다음 이를 부분으로 나누어 실행한다는 점입니다.</p><p>클로드는 먼저 깃허브 액션(GitHub Actions)의 워크플로 디렉터리를 확인하고, 없는 것을 본 다음 새로 생성했습니다.</p><figure><img src="https://wishket.com/media/news/3334/image24.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이어 깃허브 액션 실행을 위한 매니페스트를 생성하는데, 여기서도 차이가 있었습니다. 제미나이는 보안 체크를 바로 진행한 반면, 클로드 코드는 크론(Cron) 스케줄을 이용해 하루에 한 번 자동으로 동작하도록 설정했습니다.</p><figure><img src="https://wishket.com/media/news/3334/image14.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://wishket.com/media/news/3334/image12.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>매니페스트 생성이 완료되면, 해당 내용을 요약해 알려줍니다.</p><figure><img src="https://wishket.com/media/news/3334/image25.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>깃허브 액션을 저장소에 반영하기 위해 git 명령어를 사용하도록 했습니다.</p><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token bold"><span class="token punctuation">**</span><span class="token content">Prompt |</span><span class="token punctuation">**</span></span> git add commit and push it</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>git status</code>, <code>git add</code>, <code>git commit</code>, <code>git push</code> 순으로 진행하며, 각 단계마다 확인(Yes)을 거쳤습니다. 제미나이 CLI와 다른 점은 <code>git add</code> 이후 상태를 다시 체크한다는 점이고, 그 외의 흐름은 유사합니다.</p><figure><img src="https://wishket.com/media/news/3334/image15.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://wishket.com/media/news/3334/image22.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://wishket.com/media/news/3334/image7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://wishket.com/media/news/3334/image19.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>보안 체크를 위해 클로드 코드가 설정해 준 하루를 기다리기는 힘들어, 수동으로 <strong>Run workflow</strong> 버튼을 눌러 실행을 확인했습니다. 정상적으로 결과가 출력되는 것을 확인할 수 있었습니다.</p><figure><img src="https://wishket.com/media/news/3334/image11.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://wishket.com/media/news/3334/image18.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이처럼 제미나이 CLI를 사용할 때는 가는 길을 모르지만 일단 진행하는 느낌이었다면, 클로드 코드는 전체 계획을 세우고 그에 따라 실행하는 경향이 보였습니다.</p><p>이러한 느낌이 확실한지, 헬름(Helm) 배포 과정으로 확인해 보겠습니다.</p><h3 id="헬름-배포" tabindex="-1"><a class="header-anchor" href="#헬름-배포"><span>헬름 배포</span></a></h3><h4 id="헬름-배포를-통한-옵션-지정" tabindex="-1"><a class="header-anchor" href="#헬름-배포를-통한-옵션-지정"><span>헬름 배포를 통한 옵션 지정</span></a></h4><p>이번에는 쿠버네티스 대시보드를 배포하겠습니다. 노출 방식은 로드밸런서 타입으로 요청합니다.</p><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token bold"><span class="token punctuation">**</span><span class="token content">Prompt |</span><span class="token punctuation">**</span></span> deploy k8s dashboard by helm on current aks cluster. and expose as loadlbanacer type</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>입력하고 보니 “loadlbanacer”라는 오타가 있습니다. 올바른 표현은 loadbalancer지만, 문제없이 잘 해석한 것을 알 수 있습니다. 또한, 깃허브 액션 때와 마찬가지로 클로드 코드는 전체 계획과 해야 할 작업(Todos)을 먼저 정의하고 실행한다는 특징을 다시 한번 확인할 수 있었습니다.</p><figure><img src="https://wishket.com/media/news/3334/image5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이번에는 매번 선택이 필요할 때마다 “Yes”를 누르지 않고, 해당 명령을 기억하며 다시 물어보지 않는 옵션을 선택하고 진행했습니다.</p><figure><img src="https://wishket.com/media/news/3334/image16.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://wishket.com/media/news/3334/image9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://wishket.com/media/news/3334/image3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://wishket.com/media/news/3334/image8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>명령어를 기억하고 물어보지 않는 옵션을 따르다 다시 선택을 요청해 왔습니다. 세션 단위로 더는 물어보지 않도록 답했습니다. 물론 유의해 사용할 필요가 있지만, 만약 다른 명령어가 수행될 때는 다시 물어오도록 설계되어 있어 선택했습니다.</p><p>또한 제미나이 CLI의 경우, 노출된 주소로 바로 접근할 수 없어 서비스 어카운트를 별도로 추가하는 과정을 거쳤습니다. 한편 클로드 코드는 이 과정을 포함해 모든 절차를 한 번에 자동으로 처리했습니다.</p><figure><img src="https://wishket.com/media/news/3334/image4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이와 함께, 아래처럼 종료 시점에는 작업 내용을 요약하고 사용 방법까지 안내해 주는 클로드 코드의 특성을 다시 한 번 보았습니다.</p><figure><img src="https://wishket.com/media/news/3334/image10.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>알려준 대로 노출된 주소에 접속하고 생성된 토큰을 입력하면 대시보드를 확인할 수 있었습니다. 제미나이 CLI로 만든 결과와 같은 대시보드가 정상적으로 생성된 것을 확인했습니다.</p><figure><img src="https://wishket.com/media/news/3334/image6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이 단계에서 제미나이 CLI는 일부 과정이 자동으로 진행되지 않아 실패한 단계를 다시 요청해야 했던 반면, 클로드 코드는 모든 단계를 한 번에 처리한 것을 확인할 수 있었습니다. 또한, 클로드 코드는 이번 작업에서도 계획을 세우고 나누어 진행하는 특성을 보였습니다.</p><h3 id="스크립트-작성" tabindex="-1"><a class="header-anchor" href="#스크립트-작성"><span>스크립트 작성</span></a></h3><h4 id="작업-내용을-스크립트로-만들기" tabindex="-1"><a class="header-anchor" href="#작업-내용을-스크립트로-만들기"><span>작업 내용을 스크립트로 만들기</span></a></h4><p>스크립트를 작성하는 작업에서도 클로드 코드가 계획을 세우고 실행하는 방식을 따르는지, 실제 작성 과정은 어떻게 진행되는지 확인해 보겠습니다.</p><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token bold"><span class="token punctuation">**</span><span class="token content">Prompt |</span><span class="token punctuation">**</span></span> check &quot;allocated pod | max pod &quot; per node</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>프롬프트를 입력한 다음 명령어를 기억하고 다시 묻지 않는 옵션을 선택했습니다.</p><p>제미나이 CLI와 달리, 클로드 코드는 결과를 마크다운 표 형태로 표시하려 했습니다. 다만, 실제로는 텍스트로 출력되는 것을 확인할 수 있었습니다. 여기에 요청하지 않았던 노드별, 클러스터별 전체 사용률(utilized)을 함께 보여줘 가독성을 높여줬습니다.</p><figure><img src="https://wishket.com/media/news/3334/image21.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://wishket.com/media/news/3334/image26.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>결과를 확인하고, 동일한 작업을 스크립트로 생성해 달라고 요청했습니다.</p><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token bold"><span class="token punctuation">**</span><span class="token content">Prompt |</span><span class="token punctuation">**</span></span> create script for it</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://wishket.com/media/news/3334/image27.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://wishket.com/media/news/3334/image20.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>클로드 코드는 스크립트를 생성한 다음, 모든 작업 내용을 요약하고 사용 방법까지 알려줬습니다.</p><figure><img src="https://wishket.com/media/news/3334/image23.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>생성된 스크립트를 실행한 결과, 앞선 작업과 동일한 결과를 확인할 수 있었습니다.</p><figure><img src="https://wishket.com/media/news/3334/image17.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이로써 제미나이 CLI와 클로드 코드를 비교하는 실습을 모두 마쳤습니다.</p><p>마지막 정리를 하기 전, 눈에 띄었던 차이점 하나를 추가로 언급하겠습니다.</p><p>제미나이 CLI는 서브 명령어 단위로 기억하지 않고, 순수하게 실행되는 명령어 단위로만 “다시 물어볼지 여부”를 결정합니다. 반면, 클로드 코드는 아래 로컬 JSON 설정으로 서브 명령어 단위까지 기억하고 다시 묻지 않도록 관리합니다. 이처럼 세세한 부분까지 잘 정의된 것이 클로드 코드의 특징이라 할 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">1000</span> .claude/settings.local.json</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># {</span></span>
<span class="line"><span class="token comment">#   &quot;permissions&quot;: {</span></span>
<span class="line"><span class="token comment">#     &quot;allow&quot;: [</span></span>
<span class="line"><span class="token comment">#       &quot;Bash(kubectl config:*)&quot;,</span></span>
<span class="line"><span class="token comment">#       &quot;Bash(kubectl:*)&quot;,</span></span>
<span class="line"><span class="token comment">#       &quot;Bash(helm repo add:*)&quot;,</span></span>
<span class="line"><span class="token comment">#       &quot;Bash(helm repo:*)&quot;,</span></span>
<span class="line"><span class="token comment">#       &quot;Bash(helm install:*)&quot;,</span></span>
<span class="line"><span class="token comment">#       &quot;Bash(printf:*)&quot;,</span></span>
<span class="line"><span class="token comment">#       &quot;Bash(chmod:*)&quot;,</span></span>
<span class="line"><span class="token comment">#       &quot;Bash(/private/tmp/wordsmith/check-pod-allocation.sh:*)&quot;</span></span>
<span class="line"><span class="token comment">#     ],</span></span>
<span class="line"><span class="token comment">#     &quot;deny&quot;: []</span></span>
<span class="line"><span class="token comment">#   }</span></span>
<span class="line"><span class="token comment"># }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="마치며-바이브옵스에-어떤-도구를-선택해야-하는가" tabindex="-1"><a class="header-anchor" href="#마치며-바이브옵스에-어떤-도구를-선택해야-하는가"><span>마치며: 바이브옵스에 어떤 도구를 선택해야 하는가?</span></a></h2><p>IT 분야 전반에서 그렇듯, 도구 선택에 정답은 없습니다. 다만 지금까지 실험한 결과에 비추어 보면, 현재 시점에서는 클로드 코드(Claude Code)가 더 효과적인 결과물을 보여주고 있습니다.</p><p>특히 결과를 만들어 내기 위해 계획을 수립하고 이를 나누어 진행하는 방식은 매우 효과적이며 좋은 결과를 만들어 냅니다. 또한 계획이 잘못된 방향으로 가고 있다면 실행하기 전에 수정할 수 있으며, 다른 도구와 달리 서브 명령어(예: kubectl get) 단위에서 학습하기에 선택을 다시 묻지 않을 수 있고, 세션 단위에서도 확인 없이 진행할 수 있는 등 편의성도 뛰어납니다. 무엇보다 클로드 코드는 가장 먼저 나온 터미널 기반 인공지능 에이전트이기 때문에 사용자층이 넓어, 필요한 정보를 찾고 적용하기도 쉽습니다.</p><p>하지만 단점도 분명합니다. 비용이 발생한다는 점과 컨텍스트 윈도우가 다른 도구에 비해 상대적으로 적다는 것입니다.</p><figure><img src="https://wishket.com/media/news/3334/스크린샷_2025-09-05_오후_4_26_06.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>물론 이 역시 실제로 사용해 보면, 컨텍스트 윈도우의 제한이 문제로 드러나는 경우는 드물었습니다. 오히려 그 때문에 문제를 나누어 해결하면서 더 빠른 결과를 보여주기도 했습니다.</p><p>특히 바이브옵스(VibOps) 관점에서 클로드 코드는 토큰을 많이 사용할 것으로 예상되는 로그 분석에 유용합니다. 단순히 전체 로그를 바로 조회하는 것이 아니라, 아래처럼 항상 <code>--tail</code> 옵션을 입력해 나누어 분석하려고 시도하기 때문입니다.</p><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token bold"><span class="token punctuation">**</span><span class="token content">Prompt |</span><span class="token punctuation">**</span></span> analyze k8s log on aks cluster. kube-proxy pod on kube-system</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://wishket.com/media/news/3334/image2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>결론은 이렇습니다.</p><ul><li>개인이 실험 혹은 테스트 목적으로 사용할 때는 제미나이 CLI로 시작하는 것이 좋습니다.</li><li>사용에 익숙해진 다음, 비용을 지불하는 만큼 효과적인 결과물이 필요하다면 클로드 코드를 선택하는 것이 더 낫습니다. 특히 기업 환경에서는 비용을 지불할 만한 충분한 효과를 보여줍니다.</li></ul><p>다만, 이는 어디까지나 현재 시점에서 그렇다는 것입니다. 1주일 후, 아니 당장 내일도 상황은 달라질 수 있습니다. 따라서 다양한 도구를 꾸준히 써보며 개인과 회사 환경에 가장 적합한 도구를 찾아 적용하고 개선해 나가는 것이 바람직합니다.</p>`,74)),a("p",null,[e[19]||(e[19]=i("바이브옵스를 위한 인공지능 에이전트 활용을 더 자세히 알아보고 싶은 분은 “")),a("a",I,[n(r,{icon:"fas fa-globe"}),e[18]||(e[18]=i("한 걸음 앞선 개발자가 지금 꼭 알아야 할 클로드 코드"))]),e[20]||(e[20]=i("” 책을 보아도 좋습니다. 저(조훈)와 정찬훈 개발자가 함께 썼고, 초급부터 중급까지 알 수 있도록 구성해 보았습니다. 저자가 진행하는 라이브 세미나와 Q&A 기회가 주어지는 챌린지도 계획하고 있으니 고려해 보시면 좋겠습니다."))]),k(" TODO: add ARTICLE CARD "),n(l,p(m({title:"제미나이 CLI vs 클로드 코드: 바이브옵스(VibeOps) 관점에서 비교하기",desc:"바이브옵스는 AI 도구와 함께 운영을 하므로, 제미나이 CLI 외에 다른 도구가 어떻게 동작하는지 알아둔다면 선택에 큰 도움이 될 것입니다. 특히 제미나이 CLI와 견줄 도구로 클로드 코드(Claude Code)가 있습니다. 다만 유료이기 때문에, 결제하기 전에도 충분히 효과를 이해해야만 비용 지출 여부를 결정할 수 있습니다. 따라서 지금부터는 유료 구독인 클로드 코드를 사용해 바이브옵스를 진행해 보려고 합니다. 제미나이 CLI에 입력한 프롬프트를 똑같이 사용하고 결과를 비교해, 어떤 도구를 선택하는 것이 좋을지 알아보겠습니다.",link:"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3334.html",logo:"https://yozm.wishket.com/favicon.ico",background:"rgba(84,7,224,0.2)"})),null,16)])}const q=h(v,[["render",L]]),E=JSON.parse('{"path":"/yozm.wishket.com/3334.html","title":"제미나이 CLI vs 클로드 코드: 바이브옵스(VibeOps) 관점에서 비교하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"제미나이 CLI vs 클로드 코드: 바이브옵스(VibeOps) 관점에서 비교하기","description":"Article(s) > 제미나이 CLI vs 클로드 코드: 바이브옵스(VibeOps) 관점에서 비교하기","icon":"iconfont icon-claude","category":["AI","LLM","Anthropic","Claude","DevOps","Github","Article(s)"],"tag":["blog","yozm.wishket.com","ai","artificial-intelligence","llm","large-language-models","anthropic","claude","devops","github"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"제미나이 CLI vs 클로드 코드: 바이브옵스(VibeOps) 관점에서 비교하기\\",\\"image\\":[\\"https://wishket.com/media/news/3334/image13.png\\",\\"https://wishket.com/media/news/3334/image24.png\\",\\"https://wishket.com/media/news/3334/image14.png\\",\\"https://wishket.com/media/news/3334/image12.png\\",\\"https://wishket.com/media/news/3334/image25.png\\",\\"https://wishket.com/media/news/3334/image15.png\\",\\"https://wishket.com/media/news/3334/image22.png\\",\\"https://wishket.com/media/news/3334/image7.png\\",\\"https://wishket.com/media/news/3334/image19.png\\",\\"https://wishket.com/media/news/3334/image11.png\\",\\"https://wishket.com/media/news/3334/image18.png\\",\\"https://wishket.com/media/news/3334/image5.png\\",\\"https://wishket.com/media/news/3334/image16.png\\",\\"https://wishket.com/media/news/3334/image9.png\\",\\"https://wishket.com/media/news/3334/image3.png\\",\\"https://wishket.com/media/news/3334/image8.png\\",\\"https://wishket.com/media/news/3334/image4.png\\",\\"https://wishket.com/media/news/3334/image10.png\\",\\"https://wishket.com/media/news/3334/image6.png\\",\\"https://wishket.com/media/news/3334/image21.png\\",\\"https://wishket.com/media/news/3334/image26.png\\",\\"https://wishket.com/media/news/3334/image27.png\\",\\"https://wishket.com/media/news/3334/image20.png\\",\\"https://wishket.com/media/news/3334/image23.png\\",\\"https://wishket.com/media/news/3334/image17.png\\",\\"https://wishket.com/media/news/3334/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2025-09-05_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4_26_06.png\\",\\"https://wishket.com/media/news/3334/image2.png\\"],\\"datePublished\\":\\"2025-09-09T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"조훈(Hoon Jo)\\",\\"url\\":\\"https://yozm.wishket.com/magazine/@pagaia/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3334.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"제미나이 CLI vs 클로드 코드: 바이브옵스(VibeOps) 관점에서 비교하기"}],["meta",{"property":"og:description","content":"Article(s) > 제미나이 CLI vs 클로드 코드: 바이브옵스(VibeOps) 관점에서 비교하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/3334/image13.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/3334/image13.png"}],["meta",{"name":"twitter:image:alt","content":"제미나이 CLI vs 클로드 코드: 바이브옵스(VibeOps) 관점에서 비교하기"}],["meta",{"property":"article:author","content":"조훈(Hoon Jo)"}],["meta",{"property":"article:tag","content":"github"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"claude"}],["meta",{"property":"article:tag","content":"anthropic"}],["meta",{"property":"article:tag","content":"large-language-models"}],["meta",{"property":"article:tag","content":"llm"}],["meta",{"property":"article:tag","content":"artificial-intelligence"}],["meta",{"property":"article:tag","content":"ai"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-09-09T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 제미나이 CLI vs 클로드 코드: 바이브옵스(VibeOps) 관점에서 비교하기"},{"property":"og:description","content":"제미나이 CLI vs 클로드 코드: 바이브옵스(VibeOps) 관점에서 비교하기"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3334.html"}]],"prev":"/ai/gemini/articles/README.md","date":"2025-09-09T00:00:00.000Z","isOriginal":false,"author":[{"name":"조훈(Hoon Jo)","url":"https://yozm.wishket.com/magazine/@pagaia/"}],"cover":"https://yozm.wishket.com/media/news/3334/image13.png"},"git":{},"readingTime":{"minutes":1.96,"words":589},"filePathRelative":"yozm.wishket.com/3334.md","copyright":{"author":"조훈(Hoon Jo)"}}');export{q as comp,E as data};
