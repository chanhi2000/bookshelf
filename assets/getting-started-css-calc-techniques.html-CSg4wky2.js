import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as e,b as i,a as f,t as h,n as c,g as b,w as r,e as a,r as u,o as y}from"./app-BVguHYKu.js";const w={},x={id:"frontmatter-title-관련",tabindex:"-1"},S={class:"header-anchor",href:"#frontmatter-title-관련"},$={class:"table-of-contents"},C={href:"https://css3clickchart.com",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/sass/sass/blob/a1e6302437dd967eac5288f0793e758e2b0ba5ee/lib/sass/script/value/number.rb#L470-L503",target:"_blank",rel:"noopener noreferrer"},I={href:"https://codepen.io/thebabydino/pen/hgFno",target:"_blank",rel:"noopener noreferrer"},z={href:"https://codepen.io/thebabydino/pen/JoXvyd",target:"_blank",rel:"noopener noreferrer"},V={href:"https://codepen.io/thebabydino/pen/OPNZjO",target:"_blank",rel:"noopener noreferrer"},j={href:"https://codepen.io/thebabydino/pen/WbwJyg",target:"_blank",rel:"noopener noreferrer"},A={class:"hint-container note"},P={href:"https://caniuse.com",target:"_blank",rel:"noopener noreferrer"},D={href:"https://developer.microsoft.com/en-us/microsoft-edge/platform/status/csscustompropertiesakacssvariables/",target:"_blank",rel:"noopener noreferrer"},W={href:"https://codepen.io/thebabydino/pen/VLOWaX",target:"_blank",rel:"noopener noreferrer"},O={href:"https://codepen.io/thebabydino/pen/wfraH",target:"_blank",rel:"noopener noreferrer"},G={href:"https://codepen.io/thebabydino/pen/vNNjXG",target:"_blank",rel:"noopener noreferrer"},q={href:"https://codepen.io/thebabydino/pen/BNeZQE",target:"_blank",rel:"noopener noreferrer"},E={href:"https://codepen.io/thebabydino/pen/OVYgWq",target:"_blank",rel:"noopener noreferrer"},N={href:"https://codepen.io/thebabydino/pen/BNeZWe",target:"_blank",rel:"noopener noreferrer"},F={href:"https://codepen.io/thebabydino/pen/NGGMaY",target:"_blank",rel:"noopener noreferrer"},M={href:"https://codepen.io/thebabydino/pen/YyGPJo",target:"_blank",rel:"noopener noreferrer"},L={href:"https://codepen.io/thebabydino/pen/zvKxeL",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7c230704-a18e-47e2-aad8-eb06b58ceb86/01-flag-tanzania.png",target:"_blank",rel:"noopener noreferrer"},H={href:"https://codepen.io/thebabydino/pen/YyGPJo",target:"_blank",rel:"noopener noreferrer"},B={href:"https://codepen.io/thebabydino/pen/yYYEJB",target:"_blank",rel:"noopener noreferrer"},K={href:"https://codepen.io/thebabydino/pen/wKKXzQ",target:"_blank",rel:"noopener noreferrer"},R={href:"https://codepen.io/thebabydino/pen/LpprXQ",target:"_blank",rel:"noopener noreferrer"},J={href:"https://csstriggers.com/",target:"_blank",rel:"noopener noreferrer"},U={href:"https://css-tricks.com/almanac/properties/b/background-position/",target:"_blank",rel:"noopener noreferrer"},X={href:"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2f04359-1d43-4547-9d65-b7a81425dafb/02-coord-system.png",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://codepen.io/thebabydino/pen/NqVgYP",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1765d80f-06cc-4d1d-8e7b-bbb91f8e8c21/04-prob-box-case-1.png",target:"_blank",rel:"noopener noreferrer"},_={href:"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ab55a5fe-aec7-4de1-9a90-6e008d8436d1/05-prop-box-case-2.png",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://codepen.io/thebabydino/full/IwvlL/",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://codepen.io/thebabydino/pen/MajxzY",target:"_blank",rel:"noopener noreferrer"},an={href:"https://vasilis.nl/nerd/min-aspect-ratio-mean-look-like/",target:"_blank",rel:"noopener noreferrer"},en={href:"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2a7fcd8a-87c5-418f-aab4-5b1516f93b3b/06-title-slide.png",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://codepen.io/thebabydino/pen/qObdVm",target:"_blank",rel:"noopener noreferrer"},on={href:"https://bugzilla.mozilla.org/show_bug.cgi?id=594933",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://x.com/heycam/status/709679335402135552",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://css-tricks.com/how-i-live-coded-my-most-hearted-codepen-demo/",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://codepen.io/thebabydino/pen/QbRmYN",target:"_blank",rel:"noopener noreferrer"},un={href:"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/54d4423a-2fcb-4a08-8586-2b3f1ee289b9/07-simple-cube.png",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a610d33b-4d3d-4aec-9282-b109ed465015/08-rotated-simple-cubes.png",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://codepen.io/thebabydino/pen/MaeOoa",target:"_blank",rel:"noopener noreferrer"};function bn(o,n){const d=u("VPCard"),l=u("router-link"),m=u("SiteInfo"),t=u("VPIcon"),p=u("CodePen"),k=u("VidStack");return y(),v("div",null,[s("h1",x,[s("a",S,[s("span",null,h(o.$frontmatter.title)+" 관련",1)])]),e(d,c(b({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",$,[s("ul",null,[s("li",null,[e(l,{to:"#easier-to-understand-computed-values"},{default:r(()=>n[0]||(n[0]=[a("Easier To Understand Computed Values")])),_:1,__:[0]})]),s("li",null,[e(l,{to:"#more-efficient-gradient-backgrounds-for-flexible-elements"},{default:r(()=>n[1]||(n[1]=[a("More Efficient Gradient Backgrounds For Flexible Elements")])),_:1,__:[1]})]),s("li",null,[e(l,{to:"#diagonal-gradient-stripes"},{default:r(()=>n[2]||(n[2]=[a("Diagonal Gradient Stripes")])),_:1,__:[2]})]),s("li",null,[e(l,{to:"#positioning-children-of-known-dimensions-in-the-middle"},{default:r(()=>n[3]||(n[3]=[a("Positioning Children Of Known Dimensions In The Middle")])),_:1,__:[3]})]),s("li",null,[e(l,{to:"#system-of-coordinates-and-grid-with-origin-in-the-middle"},{default:r(()=>n[4]||(n[4]=[a("System Of Coordinates And Grid With Origin In The Middle")])),_:1,__:[4]})]),s("li",null,[e(l,{to:"#maintaining-aspect-ratio-and-covering-a-viewport-dimension"},{default:r(()=>n[5]||(n[5]=[a("Maintaining Aspect Ratio And Covering A Viewport Dimension")])),_:1,__:[5]})]),s("li",null,[e(l,{to:"#short-slide-title-in-the-middle"},{default:r(()=>n[6]||(n[6]=[a("Short Slide Title In The Middle")])),_:1,__:[6]})]),s("li",null,[e(l,{to:"#fixed-point-of-view"},{default:r(()=>n[7]||(n[7]=[a("Fixed Point Of View")])),_:1,__:[7]})]),s("li",null,[e(l,{to:"#what-about-you"},{default:r(()=>n[8]||(n[8]=[a("What About You?")])),_:1,__:[8]})])])]),n[243]||(n[243]=s("hr",null,null,-1)),e(m,{name:"Getting Started With CSS calc ()",desc:"Have you used `calc()`? It’s a function that should work as a value in all places where a number value — with or without specified units — works. However, while basic support is really good, you might run into trouble depending on *where* you use it. In this article, Ana Tudor will look at a few examples of how to use `calc()` including what support problems they have (if any) and whether they’re ultimately the best solution.",url:"https://smashingmagazine.com/2015/12/getting-started-css-calc-techniques/",logo:"https://smashingmagazine.com/images/favicon/favicon.svg",preview:"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a610d33b-4d3d-4aec-9282-b109ed465015/08-rotated-simple-cubes.png"}),n[244]||(n[244]=s("p",null,[a("Have you used "),s("code",null,"calc()"),a("? It’s a function that should work as a value in all places where a number value — with or without specified units — works. However, while basic support is really good, you might run into trouble depending on "),s("em",null,"where"),a(" you use it. In this article, Ana Tudor will look at a few examples of how to use "),s("code",null,"calc()"),a(" including what support problems they have (if any) and whether they’re ultimately the best solution.")],-1)),s("p",null,[n[10]||(n[10]=a("I first discovered the ")),n[11]||(n[11]=s("code",null,"calc()",-1)),n[12]||(n[12]=a(" function more than four years ago, thanks to ")),s("a",C,[e(t,{icon:"fas fa-globe"}),n[9]||(n[9]=a("CSS3 Click Chart"))]),n[13]||(n[13]=a(", and I was absolutely delighted to see that basic mathematical computations — addition, subtraction, multiplication and division — had found their way into CSS."))]),e(d,c(b({title:"CSS Click Chart | CSS3 Browser Support and Information",desc:"CSS3 Click Chart",link:"https://css3clickchart.com/",logo:"https://css3clickchart/favicon.ico",background:"rgba(204,141,107,0.2)"})),null,16),n[245]||(n[245]=s("p",null,[a("A lot of people think preprocessors fully cover the realm of logic and computation, but the "),s("code",null,"calc()"),a(" function can do something that no preprocessor can: "),s("strong",null,"mix any kind of units"),a(". Preprocessors can only mix units with a fixed relation between them, like angular units, time units, frequency units, resolution units and certain length units.")],-1)),s("p",null,[n[17]||(n[17]=i("<code>1turn</code> is always <code>360deg</code>, <code>100grad</code> is always <code>90deg</code>, and <code>3.14rad</code> is always <code>180deg</code>. <code>1s</code> is always <code>1000ms</code>, and <code>1kHz</code> is always <code>1000Hz</code>. <code>1in</code> is always <code>2.54cm</code> or <code>25.4mm</code> or <code>96px</code>, and <code>1dppx</code> is always equivalent to <code>96dpi</code>. This is why ",32)),s("a",T,[n[14]||(n[14]=a("preprocessors are able to convert between them (")),e(t,{icon:"iconfont icon-github"}),n[15]||(n[15]=s("code",null,"sass/sass",-1)),n[16]||(n[16]=a(")"))]),n[18]||(n[18]=a(" and mix them in computations. However, preprocessors cannot resolve how much ")),n[19]||(n[19]=s("code",null,"1em",-1)),n[20]||(n[20]=a(" or ")),n[21]||(n[21]=s("code",null,"1%",-1)),n[22]||(n[22]=a(" or ")),n[23]||(n[23]=s("code",null,"1vmin",-1)),n[24]||(n[24]=a(" or ")),n[25]||(n[25]=s("code",null,"1ch",-1)),n[26]||(n[26]=a(" is in pixels because they lack context."))]),n[246]||(n[246]=i(`<p>Let’s look at a few basic examples:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">div</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>3em + 5px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>1vmax + -1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span>1turn - 32deg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>180<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span>2*25%<span class="token punctuation">)</span><span class="token punctuation">,</span> 65%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>8/3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>23vmin - 2*3rem<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On some occasions, we might want to use variables in the <code>calc()</code> function. This is totally possible with the most popular preprocessors.</p>`,3)),s("p",null,[n[30]||(n[30]=a("First, ")),s("a",I,[n[27]||(n[27]=a("with Sass (")),e(t,{icon:"fa-brands fa-codepen"}),n[28]||(n[28]=s("code",null,"thebabydino",-1)),n[29]||(n[29]=a(")"))]),n[31]||(n[31]=a(", we have variable interpolation, just as with any other native CSS function:"))]),e(p,{user:"thebabydino","slug-hash":"hgFno",title:"Using a Sass variable inside `calc()`","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[247]||(n[247]=i(`<div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token property"><span class="token variable">$a</span></span><span class="token punctuation">:</span> 4em</span>
<span class="line"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token variable">#{$a}</span> <span class="token operator">+</span> 7px<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[35]||(n[35]=a("Here ")),s("a",z,[n[32]||(n[32]=a("is LESS (")),e(t,{icon:"fa-brands fa-codepen"}),n[33]||(n[33]=s("code",null,"thebabydino",-1)),n[34]||(n[34]=a(")"))]),n[36]||(n[36]=a(":"))]),e(p,{user:"thebabydino","slug-hash":"JoXvyd",title:"Using a LESS variable inside `calc()`","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[248]||(n[248]=i(`<div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line">@<span class="token property">a</span><span class="token punctuation">:</span> 4em<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">height</span><span class="token punctuation">:</span> ~<span class="token string">&quot;calc(@{a} + 7px)&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[40]||(n[40]=a("And ")),s("a",V,[n[37]||(n[37]=a("here is Stylus (")),e(t,{icon:"fa-brands fa-codepen"}),n[38]||(n[38]=s("code",null,"OPNZjO",-1)),n[39]||(n[39]=a(")"))]),n[41]||(n[41]=a(":"))]),e(p,{user:"thebabydino","slug-hash":"OPNZjO",title:"Use a Stylus variable inside `calc()`","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[249]||(n[249]=i(`<div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line">a = 4em</span>
<span class="line"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token string">&quot;calc(%s + 7px)&quot;</span> <span class="token operator">%</span> a</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[44]||(n[44]=a("We can also use ")),s("a",j,[n[42]||(n[42]=a("native CSS variables (")),e(t,{icon:"fa-brands fa-thebabydino"}),n[43]||(n[43]=a(")"))]),n[45]||(n[45]=a(", but note that this only works in Firefox 31+ for the moment, because no other browser supports CSS variables yet."))]),e(p,{user:"thebabydino","slug-hash":"WbwJyg",title:"Using CSS variables inside `calc()`","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),s("div",A,[n[50]||(n[50]=s("p",{class:"hint-container-title"},"Update",-1)),s("p",null,[s("a",P,[e(t,{icon:"fas fa-globe"}),n[46]||(n[46]=a("Safari and Chrome/Opera now support CSS variables"))]),n[48]||(n[48]=a(" as well and they are ")),s("a",D,[e(t,{icon:"fa-brands fa-microsoft"}),n[47]||(n[47]=a("listed as “in development” for Edge"))]),n[49]||(n[49]=a("."))])]),n[250]||(n[250]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">--a</span><span class="token punctuation">:</span> 4em<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--a<span class="token punctuation">)</span> + 7px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>We need to keep a few things in mind to ensure that the <code>calc()</code> function works. First, division by zero obviously won’t work. Having a space between the function name and the parenthesis is not allowed. And the plus and minus operators must be surrounded by white space. This means that the following are not valid:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token function">calc</span><span class="token punctuation">(</span>50% / 0<span class="token punctuation">)</span></span>
<span class="line">calc <span class="token punctuation">(</span>1em + 7px<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">calc</span><span class="token punctuation">(</span>2rem+2vmin<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">calc</span><span class="token punctuation">(</span>2vw-2vh<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>calc()</code> function should work as a value in all places where a number value, with or without specified units, works. However, while basic support is really good, we might run into trouble depending on <em>where</em> we use it. Let’s look at a few examples, including what support problems they have (if any) and whether they’re ultimately the best solution.</p><hr><h2 id="easier-to-understand-computed-values" tabindex="-1"><a class="header-anchor" href="#easier-to-understand-computed-values"><span>Easier To Understand Computed Values</span></a></h2>`,6)),s("p",null,[n[54]||(n[54]=a("Let’s say we want a rainbow gradient. The CSS for this is ")),s("a",W,[n[51]||(n[51]=a("really simple (")),e(t,{icon:"fa-brands fa-codepen"}),n[52]||(n[52]=s("code",null,"thebabydino",-1)),n[53]||(n[53]=a(")"))]),n[55]||(n[55]=a(":"))]),e(p,{user:"thebabydino","slug-hash":"VLOWaX",title:"rainbow gradient","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[251]||(n[251]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>#f00<span class="token punctuation">,</span> #ff0<span class="token punctuation">,</span> #0f0<span class="token punctuation">,</span> #0ff<span class="token punctuation">,</span> #00f<span class="token punctuation">,</span> #f0f<span class="token punctuation">,</span> #f00<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>But those HEX values don’t make much sense. Using <code>hsl()</code> and <code>calc()</code>, although more verbose, makes things a lot clearer:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span>0*60<span class="token punctuation">)</span><span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                            <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span>1*60<span class="token punctuation">)</span><span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                            <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span>2*60<span class="token punctuation">)</span><span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                            <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span>3*60<span class="token punctuation">)</span><span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                            <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span>4*60<span class="token punctuation">)</span><span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                            <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span>5*60<span class="token punctuation">)</span><span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                            <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span>6*60<span class="token punctuation">)</span><span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[65]||(n[65]=a("Sadly, using ")),n[66]||(n[66]=s("code",null,"calc()",-1)),n[67]||(n[67]=a(" in ")),n[68]||(n[68]=s("code",null,"hsl()",-1)),n[69]||(n[69]=a(", ")),n[70]||(n[70]=s("code",null,"rgb()",-1)),n[71]||(n[71]=a(", ")),n[72]||(n[72]=s("code",null,"hsla()",-1)),n[73]||(n[73]=a(" or ")),n[74]||(n[74]=s("code",null,"rgba()",-1)),n[75]||(n[75]=a(" doesn’t work at the moment ")),s("a",O,[n[56]||(n[56]=a("in Firefox or Internet Explorer (")),e(t,{icon:"fa-brands fa-codepen"}),n[57]||(n[57]=s("code",null,"thebabydino",-1)),n[58]||(n[58]=a(")"))]),n[76]||(n[76]=a(" (IE), which means this version works ")),s("a",G,[n[59]||(n[59]=a("only in WebKit browsers (")),e(t,{icon:"fa-brands fa-codepen"}),n[60]||(n[60]=s("code",null,"thebabydino",-1)),n[61]||(n[61]=a(")"))]),n[77]||(n[77]=a(" for now. So, in practice, it’s still probably better to let a preprocessor handle it all at this point, including the computations. And the best thing about using a preprocessor is that it lets us ")),s("a",q,[n[62]||(n[62]=a("generate the list in a loop (")),e(t,{icon:"fa-brands fa-codepen"}),n[63]||(n[63]=s("code",null,"thebabydino",-1)),n[64]||(n[64]=a(")"))]),n[78]||(n[78]=a(":"))]),n[252]||(n[252]=i(`<div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token property"><span class="token variable">$n</span></span><span class="token punctuation">:</span> 6<span class="token punctuation">;</span></span>
<span class="line"><span class="token property"><span class="token variable">$l</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> 0 <span class="token keyword">through</span> <span class="token selector"><span class="token variable">$n</span> </span><span class="token punctuation">{</span></span>
<span class="line">   <span class="token property"><span class="token variable">$l</span></span><span class="token punctuation">:</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$l</span><span class="token punctuation">,</span> <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token variable">$i</span>*360/<span class="token variable">$n</span><span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">,</span> comma<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token variable">$l</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="more-efficient-gradient-backgrounds-for-flexible-elements" tabindex="-1"><a class="header-anchor" href="#more-efficient-gradient-backgrounds-for-flexible-elements"><span>More Efficient Gradient Backgrounds For Flexible Elements</span></a></h2>`,3)),s("p",null,[n[82]||(n[82]=a("Let’s say we want a background with a fixed ")),n[83]||(n[83]=s("code",null,"1em",-1)),n[84]||(n[84]=a(" stripe both at the top and at the bottom. The only problem is we don’t know the height of the element. One solution would be to ")),s("a",E,[n[79]||(n[79]=a("use two gradients (")),e(t,{icon:"fa-brands fa-codepen"}),n[80]||(n[80]=s("code",null,"thebabydino",-1)),n[81]||(n[81]=a(")"))]),n[85]||(n[85]=a(":"))]),e(p,{user:"thebabydino","slug-hash":"OVYgWq",title:"top and down red stripes using two gradients","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[253]||(n[253]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">background</span><span class="token punctuation">:</span></span>
<span class="line">   <span class="token function">linear-gradient</span><span class="token punctuation">(</span>#e53b2c 1em<span class="token punctuation">,</span> transparent 1em<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token function">linear-gradient</span><span class="token punctuation">(</span>0deg<span class="token punctuation">,</span> #e53b2c 1em<span class="token punctuation">,</span> #f9f9f9 1em<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[91]||(n[91]=a("But we’d need only ")),s("a",N,[n[86]||(n[86]=a("one gradient if we use ")),n[87]||(n[87]=s("code",null,"calc()",-1)),n[88]||(n[88]=a(" (")),e(t,{icon:"fa-brands fa-codepen"}),n[89]||(n[89]=s("code",null,"thebabydino",-1)),n[90]||(n[90]=a(")"))]),n[92]||(n[92]=a(":"))]),e(p,{user:"thebabydino","slug-hash":"BNeZWe",title:"top and down red stripes using calc()","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[254]||(n[254]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">background</span><span class="token punctuation">:</span></span>
<span class="line">   <span class="token function">linear-gradient</span><span class="token punctuation">(</span>#e53b2c 1em<span class="token punctuation">,</span> #f9f9f9 1em<span class="token punctuation">,</span></span>
<span class="line">                   #f9f9f9 <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1em<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                   #e53b2c <span class="token function">calc</span><span class="token punctuation">(</span>100% - 1em<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[96]||(n[96]=a("This should work fine in all browsers that support ")),n[97]||(n[97]=s("code",null,"calc()",-1)),n[98]||(n[98]=a(" and gradients, and because it involves mixing units, it isn’t something that preprocessors have an equivalent for. We can, however, make it more maintainable by ")),s("a",F,[n[93]||(n[93]=a("using variables (")),e(t,{icon:"fa-brands fa-codepen"}),n[94]||(n[94]=s("code",null,"thebabydino",-1)),n[95]||(n[95]=a(")"))]),n[99]||(n[99]=a(":"))]),e(p,{user:"thebabydino","slug-hash":"NGGMaY",title:"top and down red stripes using calc()","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[255]||(n[255]=i(`<div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token property"><span class="token variable">$s</span></span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span></span>
<span class="line"><span class="token property"><span class="token variable">$c</span></span><span class="token punctuation">:</span> #e53b2c<span class="token punctuation">;</span></span>
<span class="line"><span class="token property"><span class="token variable">$bg</span></span><span class="token punctuation">:</span> #f9f9f9<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token property">background</span><span class="token punctuation">:</span></span>
<span class="line">   <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token variable">$s</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token variable">$bg</span> <span class="token variable">$s</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token variable">$bg</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% <span class="token operator">-</span> <span class="token variable">#{$s}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                   <span class="token variable">$c</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% <span class="token operator">-</span> <span class="token variable">#{$s}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note: For some reason, one of the stripes appears to be slightly blurry and narrower than the other in Chrome and Opera.</p><hr><h2 id="diagonal-gradient-stripes" tabindex="-1"><a class="header-anchor" href="#diagonal-gradient-stripes"><span>Diagonal Gradient Stripes</span></a></h2>`,4)),s("p",null,[n[103]||(n[103]=a("Let’s say we want an element with a thick diagonal stripe extending on both sides of its actual diagonal. We could do it ")),s("a",M,[n[100]||(n[100]=a("using percentage-based stops (")),e(t,{icon:"fa-brands fa-codepen"}),n[101]||(n[101]=s("code",null,"thebabydino",-1)),n[102]||(n[102]=a(")"))]),n[104]||(n[104]=a(":"))]),e(p,{user:"thebabydino","slug-hash":"YyGPJo",title:"fixed width diagonal gradient stripe","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[256]||(n[256]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">background</span><span class="token punctuation">:</span></span>
<span class="line">   <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right bottom<span class="token punctuation">,</span></span>
<span class="line">                   transparent 42%<span class="token punctuation">,</span> #000 0<span class="token punctuation">,</span> #000 58%<span class="token punctuation">,</span></span>
<span class="line">                   transparent 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[108]||(n[108]=a("In this case, the width of the stripe would depend on the element’s dimensions. Sometimes, that’s exactly what we want. For example, this is how we’d do things if we wanted to reproduce a flag in CSS. Adding a bit of green, yellow and blue to the gradient above ")),s("a",L,[n[105]||(n[105]=a("gives us a flag (")),e(t,{icon:"fa-brands fa-codepen"}),n[106]||(n[106]=s("code",null,"thebabydino",-1)),n[107]||(n[107]=a(")"))]),n[109]||(n[109]=a(" that fine-chocolate lovers probably recognize — the flag of Tanzania."))]),e(p,{user:"thebabydino","slug-hash":"zvKxeL",title:"Flag of Tanzania (pure CSS)","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[257]||(n[257]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">background</span><span class="token punctuation">:</span></span>
<span class="line">   <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right bottom<span class="token punctuation">,</span></span>
<span class="line">                   #1eb53a 38%<span class="token punctuation">,</span> #fcd116 0<span class="token punctuation">,</span></span>
<span class="line">                   #fcd116 42%<span class="token punctuation">,</span> #000 0<span class="token punctuation">,</span></span>
<span class="line">                   #000 58%<span class="token punctuation">,</span> #fcd116 0<span class="token punctuation">,</span></span>
<span class="line">                   #fcd116 62%<span class="token punctuation">,</span> #00a3dd 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("figure",null,[n[113]||(n[113]=s("img",{src:"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/00313810-eabe-4e6d-ac6d-3b8f7206cf18/01-flag-tanzania-preview.png",alt:'Flag of Tanzania. (<VPIcon icon="fas fa-globe"/>View large version)',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[111]||(n[111]=a("Flag of Tanzania. (")),s("a",Y,[e(t,{icon:"fas fa-globe"}),n[110]||(n[110]=a("View large version"))]),n[112]||(n[112]=a(")"))])]),n[258]||(n[258]=i(`<p>But what if we want our diagonal stripe to have a fixed width that doesn’t depend on the element’s dimensions? Well, we’d use <code>calc()</code> and put the stops at <code>50%</code> minus half of the fixed stripe’s width and at <code>50%</code> plus half of the fixed stripe’s width. If we want the stripe’s width to be <code>4em</code>, then we’d have this:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">background</span><span class="token punctuation">:</span></span>
<span class="line">   <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right bottom<span class="token punctuation">,</span></span>
<span class="line">                   transparent <span class="token function">calc</span><span class="token punctuation">(</span>50% - 2em<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                   #000 0<span class="token punctuation">,</span></span>
<span class="line">                   #000 <span class="token function">calc</span><span class="token punctuation">(</span>50% + 2em<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                   transparent 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("p",null,[n[117]||(n[117]=a("You can ")),s("a",H,[n[114]||(n[114]=a("test this live (")),e(t,{icon:"fa-brands fa-codepen"}),n[115]||(n[115]=s("code",null,"thebabydino",-1)),n[116]||(n[116]=a(")"))]),n[118]||(n[118]=a(" by resizing the window. The element’s dimensions are expressed in viewport units and, therefore, change with the viewport, but the diagonal stripe always stays the same width."))]),e(p,{user:"thebabydino","slug-hash":"YyGPJo",title:"fixed width diagonal gradient stripe","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[259]||(n[259]=s("hr",null,null,-1)),n[260]||(n[260]=s("h2",{id:"positioning-children-of-known-dimensions-in-the-middle",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#positioning-children-of-known-dimensions-in-the-middle"},[s("span",null,"Positioning Children Of Known Dimensions In The Middle")])],-1)),s("p",null,[n[122]||(n[122]=a("You’ve likely seen the ")),s("a",B,[n[119]||(n[119]=a("little trick (")),e(t,{icon:"fa-brands fa-codepen"}),n[120]||(n[120]=s("code",null,"thebabydino",-1)),n[121]||(n[121]=a(")"))]),n[123]||(n[123]=a(" of absolutely positioning an element dead in the middle of its parent:"))]),e(p,{user:"thebabydino","slug-hash":"yYYEJB",title:"absolute positioning child in the middle of parent","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[261]||(n[261]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">margin</span><span class="token punctuation">:</span> -2em -2.5em<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">width</span><span class="token punctuation">:</span> 5em<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">height</span><span class="token punctuation">:</span> 4em<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[129]||(n[129]=a("With ")),n[130]||(n[130]=s("code",null,"calc()",-1)),n[131]||(n[131]=a(", we can ")),s("a",K,[n[124]||(n[124]=a("get rid of the ")),n[125]||(n[125]=s("code",null,"margin",-1)),n[126]||(n[126]=a(" rule (")),e(t,{icon:"fa-brands fa-codepen"}),n[127]||(n[127]=s("code",null,"thebabydino",-1)),n[128]||(n[128]=a(")"))]),n[132]||(n[132]=a(":"))]),e(p,{user:"thebabydino","slug-hash":"wKKXzQ",title:"absolute positioning child in the middle of parent","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[262]||(n[262]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 2em<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 2.5em<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token property">width</span><span class="token punctuation">:</span> 5em<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">height</span><span class="token punctuation">:</span> 4em<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[136]||(n[136]=a("And we can make it more maintainable using ")),s("a",R,[n[133]||(n[133]=a("variables for width and height (")),e(t,{icon:"fa-brands fa-codepen"}),n[134]||(n[134]=s("code",null,"thebabydino",-1)),n[135]||(n[135]=a(")"))]),n[137]||(n[137]=a(":"))]),e(p,{user:"thebabydino","slug-hash":"LpprXQ",title:"absolute positioning child in the middle of parent","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[263]||(n[263]=i(`<div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token property"><span class="token variable">$w</span></span><span class="token punctuation">:</span> 5em<span class="token punctuation">;</span></span>
<span class="line"><span class="token property"><span class="token variable">$h</span></span><span class="token punctuation">:</span> 4em<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="line"><span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% <span class="token operator">-</span> #<span class="token punctuation">{</span>.5*<span class="token variable">$h</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% <span class="token operator">-</span> #<span class="token punctuation">{</span>.5*<span class="token variable">$w</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$w</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">$h</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[139]||(n[139]=a("Note that, while using offsets (")),n[140]||(n[140]=s("code",null,"top",-1)),n[141]||(n[141]=a(", ")),n[142]||(n[142]=s("code",null,"left",-1)),n[143]||(n[143]=a(") for initial positioning is safe, if you plan on animating the position of the element afterwards, you should use transforms instead. This is because changing transforms ")),s("a",J,[e(t,{icon:"fas fa-globe"}),n[138]||(n[138]=a("requires only compositing"))]),n[144]||(n[144]=a(", whereas changing offsets also triggers a relayout and repaint — thus, impairing performance."))]),n[264]||(n[264]=s("hr",null,null,-1)),n[265]||(n[265]=s("h2",{id:"system-of-coordinates-and-grid-with-origin-in-the-middle",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#system-of-coordinates-and-grid-with-origin-in-the-middle"},[s("span",null,"System Of Coordinates And Grid With Origin In The Middle")])],-1)),s("p",null,[n[147]||(n[147]=a("Since discovering the ")),s("a",U,[e(t,{icon:"fas fa-globe"}),n[145]||(n[145]=a("four-value ")),n[146]||(n[146]=s("code",null,"background-position",-1))]),n[148]||(n[148]=a(", I haven’t been too keen on using ")),n[149]||(n[149]=s("code",null,"calc()",-1)),n[150]||(n[150]=a(" to position backgrounds relative to the right or bottom side of the element. But ")),n[151]||(n[151]=s("code",null,"calc()",-1)),n[152]||(n[152]=a(" turned out to be a great solution for positioning a certain point of the background relative to the middle of the element."))]),n[266]||(n[266]=s("p",null,"A couple of years ago, I found myself wanting to create a background that represents a system of coordinates with a grid behind and whose origin would be dead in the middle of the screen.",-1)),s("figure",null,[n[156]||(n[156]=s("img",{src:"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5dea162e-6029-40b3-892f-be847c1dfe9f/02-coord-system-preview.png",alt:'System of coordinates and grid. (<VPIcon icon="fas fa-globe"/>View large version)',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[154]||(n[154]=a("System of coordinates and grid. (")),s("a",X,[e(t,{icon:"fas fa-globe"}),n[153]||(n[153]=a("View large version"))]),n[155]||(n[155]=a(")"))])]),s("p",null,[n[160]||(n[160]=a("The ")),s("a",Z,[n[157]||(n[157]=a("system of coordinates and the grid part (")),e(t,{icon:"fa-brands fa-codepen"}),n[158]||(n[158]=s("code",null,"thebabydino",-1)),n[159]||(n[159]=a(")"))]),n[161]||(n[161]=a(" were easy to achieve:"))]),e(p,{user:"thebabydino","slug-hash":"NqVgYP",title:"system of coordinates + grid #1","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[267]||(n[267]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">background-image</span><span class="token punctuation">:</span></span>
<span class="line">   <span class="token function">linear-gradient</span><span class="token punctuation">(</span>#e53b2c .5em<span class="token punctuation">,</span> transparent .5em<span class="token punctuation">)</span> <span class="token comment">/* horizontal axis */</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token function">linear-gradient</span><span class="token punctuation">(</span>90deg<span class="token punctuation">,</span> #e53b2c .5em<span class="token punctuation">,</span> transparent .5em<span class="token punctuation">)</span> <span class="token comment">/* vertical axis */</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token function">linear-gradient</span><span class="token punctuation">(</span>#333 .25em<span class="token punctuation">,</span> transparent .25em<span class="token punctuation">)</span> <span class="token comment">/* major horizontal gridline */</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token function">linear-gradient</span><span class="token punctuation">(</span>90deg<span class="token punctuation">,</span> #333 .25em<span class="token punctuation">,</span> transparent .25em<span class="token punctuation">)</span> <span class="token comment">/* major vertical gridline */</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token function">linear-gradient</span><span class="token punctuation">(</span>#777 .125em<span class="token punctuation">,</span> transparent .125em<span class="token punctuation">)</span> <span class="token comment">/* minor horizontal gridline */</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token function">linear-gradient</span><span class="token punctuation">(</span>90deg<span class="token punctuation">,</span> #777 .125em<span class="token punctuation">,</span> transparent .125em<span class="token punctuation">)</span> <span class="token comment">/* minor vertical gridline */</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token property">background-size</span><span class="token punctuation">:</span></span>
<span class="line">   100vw 100vh<span class="token punctuation">,</span> 100vw 100vh<span class="token punctuation">,</span></span>
<span class="line">   10em 10em<span class="token punctuation">,</span> 10em 10em<span class="token punctuation">,</span></span>
<span class="line">   1em 1em<span class="token punctuation">,</span> 1em 1em<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But how do we make the origin of the background dead in the middle and not in the top-left corner? First, <code>background-position: 50% 50%</code> won’t work because it makes the <code>50% 50%</code> point of the gradient coincide with the <code>50% 50%</code> point of the element, but the lines are at the top and at the left of the gradients, respectively. The solution is to use <code>calc()</code> and position the gradients so that their top left is almost in the middle of the viewport, just offset to the top and left by half the axis or the grid line’s width:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">background-position</span><span class="token punctuation">:</span></span>
<span class="line">    0 <span class="token function">calc</span><span class="token punctuation">(</span>50vh - .25em<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span>50vw - .25em<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    0 <span class="token function">calc</span><span class="token punctuation">(</span>50vh - .125em<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span>50vw - .125em<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    0 <span class="token function">calc</span><span class="token punctuation">(</span>50vh - .0625em<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span>50vw - .0625em<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Again, we can make it all more maintainable by using variables:</p>`,4)),e(p,{user:"thebabydino","slug-hash":"PqvjBr",title:"system of coordinates + grid #2","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[268]||(n[268]=s("hr",null,null,-1)),n[269]||(n[269]=s("h2",{id:"maintaining-aspect-ratio-and-covering-a-viewport-dimension",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#maintaining-aspect-ratio-and-covering-a-viewport-dimension"},[s("span",null,"Maintaining Aspect Ratio And Covering A Viewport Dimension")])],-1)),n[270]||(n[270]=s("p",null,"One thing I’ve always wanted when creating HTML slides was for each slide to be a box of a certain fixed-aspect ratio that always covers at least one dimension of the viewport and that is, of course, in the middle along the other axis.",-1)),n[271]||(n[271]=s("p",null,"Proportional box animation",-1)),n[272]||(n[272]=s("p",null,"Let’s start by assuming that the desired aspect ratio for the slides is 4:3 and that I’m on a widescreen display. This means the slides cover the viewport vertically but still have some space on the left and the right.",-1)),s("figure",null,[n[165]||(n[165]=s("img",{src:"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f6129301-8612-4a07-8f00-c3c99ee66ae2/04-prob-box-case-1-preview.png",alt:'Proportional box: case 1. (<VPIcon icon="fas fa-globe"/>View large version)',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[163]||(n[163]=a("Proportional box: case 1. (")),s("a",Q,[e(t,{icon:"fas fa-globe"}),n[162]||(n[162]=a("View large version"))]),n[164]||(n[164]=a(")"))])]),n[273]||(n[273]=i(`<p>Covering the viewport vertically means a <code>height</code> of <code>100vh</code>. Knowing the height and the aspect ratio, we can get the width, which is <code>4/3*100vh</code>. And to get it in the middle, we need to offset it from the <code>left</code> by half the viewport’s width (<code>100vw/2</code>) minus half the slide’s width (<code>4/3*100vh/2</code>). This is where we need the <code>calc()</code> function because we have to mix units.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.slide</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="line">   <span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100vw/2 - 4/3*100vh/2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>4/3*100vh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Things change, however, for a display with an aspect ratio that’s less than 4:3. In this case, the slides cover the viewport horizontally, with some space left at the top and the bottom.</p>`,3)),s("figure",null,[n[169]||(n[169]=s("img",{src:"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/30d92dd1-72b3-4503-bd0b-94e5579b1345/05-prop-box-case-2-preview.png",alt:'Proportional box: case 2. (<VPIcon icon="fas fa-globe"/>View large version)',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[167]||(n[167]=a("Proportional box: case 2. (")),s("a",_,[e(t,{icon:"fas fa-globe"}),n[166]||(n[166]=a("View large version"))]),n[168]||(n[168]=a(")"))])]),n[274]||(n[274]=i(`<p>Covering the viewport horizontally means a <code>width</code> of <code>100vw</code>. Knowing this and the aspect ratio will give us the <code>height</code>, which is <code>3/4*100vw</code>. Finally, the <code>top</code> offset is half the viewport’s height minus half the slide’s height; so, <code>100vh/2 - 3/4*100vw/2</code>.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-aspect-ratio</span><span class="token punctuation">:</span> 4/3<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token selector">.slide</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100vh/2 - 3/4*100vw/2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token comment">/* Undo style set outside media query  */</span></span>
<span class="line">      <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>3/4*100vh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("p",null,[n[173]||(n[173]=a("We can, of course, make things more flexible by not hardcoding the aspect ratio and using two variables instead (one for width and one for height). Here is the Sass version, which you can also ")),s("a",nn,[n[170]||(n[170]=a("test live (")),e(t,{icon:"fa-brands fa-codepen"}),n[171]||(n[171]=s("code",null,"thebabydino",-1)),n[172]||(n[172]=a(")"))]),n[174]||(n[174]=a(" by resizing the window:"))]),e(p,{user:"thebabydino","slug-hash":"IwvlL",title:"Proportional box covering viewport","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[275]||(n[275]=i(`<div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token property"><span class="token variable">$a</span></span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span></span>
<span class="line"><span class="token property"><span class="token variable">$b</span></span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.slide </span><span class="token punctuation">{</span></span>
<span class="line">   <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="line">   <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">   <span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50vw <span class="token operator">-</span> #<span class="token punctuation">{</span><span class="token variable">$a</span>/<span class="token variable">$b</span>/2*100vh<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$a</span>/<span class="token variable">$b</span>*100vh<span class="token punctuation">;</span></span>
<span class="line">   <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-aspect-ratio</span><span class="token punctuation">:</span> <span class="token variable">#{$a}</span>/<span class="token variable">#{$b}</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50vh <span class="token operator">-</span> #<span class="token punctuation">{</span><span class="token variable">$b</span>/<span class="token variable">$a</span>/2*100vw<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">$b</span>/<span class="token variable">$a</span>*100vw<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[178]||(n[178]=a("Even better, we could ")),s("a",sn,[n[175]||(n[175]=a("turn this into a mixin (")),e(t,{icon:"fa-brands fa-codepen"}),n[176]||(n[176]=s("code",null,"thebabydino",-1)),n[177]||(n[177]=a(")"))]),n[179]||(n[179]=a(", which is generally a better practice than using global variables:"))]),e(p,{user:"thebabydino","slug-hash":"MajxzY",title:"Proportional box covering viewport (mixinized)","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[276]||(n[276]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@mixin</span> <span class="token function">proportional-box</span><span class="token punctuation">(</span>$<span class="token property">a</span><span class="token punctuation">:</span> 1<span class="token punctuation">,</span> $<span class="token property">b</span><span class="token punctuation">:</span> $a<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="line">   <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">   <span class="token selector">left: calc(50vw - #</span><span class="token punctuation">{</span>$a/$b/2*100vh<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token property">width</span><span class="token punctuation">:</span> $a/$b*100vh<span class="token punctuation">;</span></span>
<span class="line">   <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-aspect-ratio</span><span class="token punctuation">:</span> #</span><span class="token punctuation">{</span>$a<span class="token punctuation">}</span><span class="token selector">/#</span><span class="token punctuation">{</span>$b<span class="token punctuation">}</span><span class="token selector">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token selector">top: calc(50vh - #</span><span class="token punctuation">{</span>$b/$a/2*100vw<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> $b/$a*100vw<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.slide</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token atrule"><span class="token rule">@include</span> <span class="token function">proportional-box</span><span class="token punctuation">(</span>4<span class="token punctuation">,</span> 3<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[181]||(n[181]=a("Note that ")),n[182]||(n[182]=s("code",null,"$a",-1)),n[183]||(n[183]=a(" and ")),n[184]||(n[184]=s("code",null,"$b",-1)),n[185]||(n[185]=a()),s("a",an,[e(t,{icon:"fas fa-globe"}),n[180]||(n[180]=a("must be integers"))]),n[186]||(n[186]=a(" in order for the media query to work."))]),n[277]||(n[277]=i('<p>This is supported in all current versions of major browsers. However, WebKit browsers didn’t support the use of viewport units in the <code>calc()</code> function until recently. This has been fixed in Safari 8 and Chrome 34, respectively, with Opera trailing.</p><hr><h2 id="short-slide-title-in-the-middle" tabindex="-1"><a class="header-anchor" href="#short-slide-title-in-the-middle"><span>Short Slide Title In The Middle</span></a></h2><p>I wanted two more things for slide presentations.</p><p>The first was for the slides not to really cover the entire viewport because the edges might get cut off. This was an easy fix. I simply set their <code>box-sizing</code> to <code>border-box</code> and also set a border on them.</p><p>The second thing I wanted was to mark sections by starting each with a slide that had nothing but a short and memorable title right in the middle.</p>',6)),s("figure",null,[n[190]||(n[190]=s("img",{src:"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a3d1b4e0-d509-465f-8981-161e3d1177ae/06-title-slide-preview.png",alt:'Desired result. (<VPIcon icon="fas fa-globe"/>View large version)',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[188]||(n[188]=a("Desired result. (")),s("a",en,[e(t,{icon:"fas fa-globe"}),n[187]||(n[187]=a("View large version"))]),n[189]||(n[189]=a(")"))])]),n[278]||(n[278]=i(`<p>I didn’t want to use absolute positioning, so I thought I’d go with setting an appropriate <code>line-height</code>.</p><p>In case the slide’s height, including the border, covers the entire height of the viewport, I would have a <code>line-height</code> of <code>100vh</code> minus twice the slide’s <code>border-width</code>:</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token property"><span class="token variable">$slide-border-width</span></span><span class="token punctuation">:</span> 5vmin<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.slide </span><span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">/* The other styles */</span></span>
<span class="line">   <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span></span>
<span class="line">   <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token variable">$slide-border-width</span> dimgrey<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token selector">h1 </span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100vh <span class="token operator">-</span> #<span class="token punctuation">{</span>2*<span class="token variable">$slide-border-width</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In case the slide, including the borders, covers the viewport horizontally (and was vertically in the middle), its height would be <code>$b/$a*100vw</code>. So, the <code>line-height</code> for the title would be that minus twice the slide’s <code>border-width</code>:</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>#<span class="token punctuation">{</span><span class="token variable">$b</span>/<span class="token variable">$a</span>*100vw<span class="token punctuation">}</span> <span class="token operator">-</span> #<span class="token punctuation">{</span>2*<span class="token variable">$slide-border-width</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,5)),s("p",null,[n[198]||(n[198]=a("This was my initial idea, which, in theory, should work just fine. And it does ")),s("a",tn,[n[191]||(n[191]=a("in WebKit browsers and IE (")),e(t,{icon:"fa-brands fa-codepen"}),n[192]||(n[192]=s("code",null,"thebabydino",-1)),n[193]||(n[193]=a(")"))]),n[199]||(n[199]=a(". However, it turns out that ")),n[200]||(n[200]=s("code",null,"calc()",-1)),n[201]||(n[201]=a(" values ~don’t work for ")),n[202]||(n[202]=s("code",null,"line-height",-1)),n[203]||(n[203]=a(" (and some other properties) ")),s("a",on,[e(t,{icon:"fa-brands fa-firefox"}),n[194]||(n[194]=a("in Firefox"))]),n[204]||(n[204]=a("~ —")),s("a",pn,[n[195]||(n[195]=a("they work now (")),e(t,{icon:"fa-brands fa-x-twitter"}),n[196]||(n[196]=s("code",null,"heycam",-1)),n[197]||(n[197]=a(")"))]),n[205]||(n[205]=a("; so, ")),n[206]||(n[206]=s("code",null,"calc()",-1)),n[207]||(n[207]=a(" is not the best solution there. Luckily, there are a lot of other ways to solve this problem (flexbox, absolute positioning and more)."))]),e(p,{user:"thebabydino","slug-hash":"qObdVm",title:"title in middle for flexible slide (FF bug)","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[279]||(n[279]=s("hr",null,null,-1)),n[280]||(n[280]=s("h2",{id:"fixed-point-of-view",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#fixed-point-of-view"},[s("span",null,"Fixed Point Of View")])],-1)),s("p",null,[n[209]||(n[209]=a("One thing I enjoy playing with a lot is CSS 3D — creating geometric 3D shapes with CSS in particular. If I create just one shape, then I’d normally position it in the middle of the scene it’s contained in. The scene is the element on which I set the ")),n[210]||(n[210]=s("code",null,"perspective",-1)),n[211]||(n[211]=a(" and also the parent of the shape element. The shape element will have its own descendants, which are the shape faces, but we won’t go into detail about them here; if you want to learn how they are positioned, then check out my ")),s("a",ln,[e(t,{icon:"fas fa-globe"}),n[208]||(n[208]=a("guest article on CSS-Tricks"))]),n[212]||(n[212]=a("."))]),s("p",null,[n[216]||(n[216]=a("Setting a ")),n[217]||(n[217]=s("code",null,"perspective",-1)),n[218]||(n[218]=a(" on a scene ensures we’ll see everything that is closer as being bigger and everything that is further away as being smaller. The ")),n[219]||(n[219]=s("code",null,"perspective",-1)),n[220]||(n[220]=a(" property accepts length values, and the smaller these values are, the ")),s("a",rn,[n[213]||(n[213]=a("greater the contrast (")),e(t,{icon:"fa-brands fa-codepen"}),n[214]||(n[214]=s("code",null,"thebabydino",-1)),n[215]||(n[215]=a(")"))]),n[221]||(n[221]=a(" between what’s closer to us and what’s further away."))]),e(p,{user:"thebabydino","slug-hash":"QbRmYN",title:"what changing perspective on the scene does","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[281]||(n[281]=s("p",null,"Now, let’s say we have a very simple 3D shape — a cube, for example — right in the middle of our scene. It doesn’t look very 3D: It’s way too symmetrical, and if the faces are fully opaque, we can only see the front one.",-1)),s("figure",null,[n[225]||(n[225]=s("img",{src:"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/51680115-bd00-412b-83e0-6a6696e61d61/07-simple-cube-preview.png",alt:'Cube. (<VPIcon icon="fas fa-globe"/>View large version)',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[223]||(n[223]=a("Cube. (")),s("a",un,[e(t,{icon:"fas fa-globe"}),n[222]||(n[222]=a("View large version"))]),n[224]||(n[224]=a(")"))])]),n[282]||(n[282]=s("p",null,[a("We could rotate it a bit, let’s say by "),s("code",null,"30°"),a(", around its "),s("code",null,"y"),a(" axis (i.e. the vertical axis passing through the middle of the cube) or around its "),s("code",null,"x"),a(" axis. This looks better, but we can only see two faces. Plus, the cube is now visibly rotated, which was not the intention.")],-1)),s("figure",null,[n[229]||(n[229]=s("img",{src:"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d66b0ca-bc40-4c34-8ba1-3823407bc651/08-rotated-simple-cubes-preview-2.png",alt:'Rotated cube. (<VPIcon icon="fas fa-globe"/>View large version)',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[227]||(n[227]=a("Rotated cube. (")),s("a",dn,[e(t,{icon:"fas fa-globe"}),n[226]||(n[226]=a("View large version"))]),n[228]||(n[228]=a(")"))])]),s("p",null,[n[233]||(n[233]=a("Something else we could do is change our point of view. We do this via a property called ")),n[234]||(n[234]=s("code",null,"perspective-origin",-1)),n[235]||(n[235]=a(". Its initial value is ")),n[236]||(n[236]=s("code",null,"50% 50%",-1)),n[237]||(n[237]=a(". This is relative to the scene, and we know that the ")),n[238]||(n[238]=s("code",null,"50% 50%",-1)),n[239]||(n[239]=a(" point of the scene is where the central point of the shape is positioned. Now, let’s say we want to move this up and to the right. The simplest way to do this is to set ")),n[240]||(n[240]=s("code",null,"perspective-origin: 100% 0",-1)),n[241]||(n[241]=a(". But this creates a problem: How we now see the cube depends on the dimensions of the scene (you can ")),s("a",cn,[n[230]||(n[230]=a("test this live (")),e(t,{icon:"fa-brands fa-codepen"}),n[231]||(n[231]=s("code",null,"thebabydino",-1)),n[232]||(n[232]=a(")"))]),n[242]||(n[242]=a(" by resizing the viewport)."))]),e(p,{user:"thebabydino","slug-hash":"MaeOoa",title:"simple cube, top right point of view","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[283]||(n[283]=i(`<p>Changing scene dimensions changes how we see the cube.</p><p>A <code>perspective-origin</code> of <code>100% 0</code> is measured from the top right corner of the scene, while the cube is always in the middle of the scene. Because of this, changing the scene’s dimensions will change the distance between the <code>50% 50%</code> point (where the cube is positioned) and the <code>100% 0</code> point (where we have set the <code>perspective-origin</code>).</p><p>A solution for this to use <code>calc()</code> for <code>perspective-origin</code>, of course, is simply to add or subtract a fixed value from the initial <code>50%</code>:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">perspective-origin</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% + 15em<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 10em<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,4)),e(k,{src:"vimeo/140925020"}),n[284]||(n[284]=i('<hr><h2 id="what-about-you" tabindex="-1"><a class="header-anchor" href="#what-about-you"><span>What About You?</span></a></h2><p>Have you used <code>calc()</code>? If yes, what for?</p><div class="hint-container info"><p class="hint-container-title">Further Reading</p><ul><li><a href="https://smashingmagazine.com/2014/03/introduction-to-custom-elements/" target="_blank" rel="noopener noreferrer">A Detailed Introduction To Custom Elements</a></li><li><a href="https://smashingmagazine.com/2016/03/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of/" target="_blank" rel="noopener noreferrer">Houdini: Maybe The Most Exciting Development In CSS</a></li><li><a href="https://smashingmagazine.com/2017/04/start-using-css-custom-properties/" target="_blank" rel="noopener noreferrer">It’s Time To Start Using CSS Custom Properties</a></li><li><a href="https://smashingmagazine.com/2016/05/better-architecture-for-ios-apps-model-view-controller-pattern/" target="_blank" rel="noopener noreferrer">A Deep Look At The Model-View-Controller Pattern</a></li></ul></div>',4)),f(" TODO: add ARTICLE CARD "),e(d,c(b({title:"Getting Started With CSS calc ()",desc:"Have you used `calc()`? It’s a function that should work as a value in all places where a number value — with or without specified units — works. However, while basic support is really good, you might run into trouble depending on *where* you use it. In this article, Ana Tudor will look at a few examples of how to use `calc()` including what support problems they have (if any) and whether they’re ultimately the best solution.",link:"https://chanhi2000.github.io/bookshelf/smashingmagazine.com/getting-started-css-calc-techniques.html",logo:"https://smashingmagazine.com/images/favicon/favicon.svg",background:"rgba(211,58,44,0.2)"})),null,16)])}const gn=g(w,[["render",bn]]),vn=JSON.parse('{"path":"/smashingmagazine.com/getting-started-css-calc-techniques.html","title":"Getting Started With CSS calc ()","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Getting Started With CSS calc ()","description":"Article(s) > Getting Started With CSS calc ()","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","smashingmagazine.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Getting Started With CSS calc ()\\",\\"image\\":[\\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7c230704-a18e-47e2-aad8-eb06b58ceb86/01-flag-tanzania.png\\",\\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2f04359-1d43-4547-9d65-b7a81425dafb/02-coord-system.png\\",\\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1765d80f-06cc-4d1d-8e7b-bbb91f8e8c21/04-prob-box-case-1.png\\",\\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ab55a5fe-aec7-4de1-9a90-6e008d8436d1/05-prop-box-case-2.png\\",\\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2a7fcd8a-87c5-418f-aab4-5b1516f93b3b/06-title-slide.png\\",\\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/54d4423a-2fcb-4a08-8586-2b3f1ee289b9/07-simple-cube.png\\",\\"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a610d33b-4d3d-4aec-9282-b109ed465015/08-rotated-simple-cubes.png\\"],\\"datePublished\\":\\"2015-12-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ana Tudor\\",\\"url\\":\\"https://smashingmagazine.com/author/anatudor/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/smashingmagazine.com/getting-started-css-calc-techniques.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Getting Started With CSS calc ()"}],["meta",{"property":"og:description","content":"Article(s) > Getting Started With CSS calc ()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a610d33b-4d3d-4aec-9282-b109ed465015/08-rotated-simple-cubes.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a610d33b-4d3d-4aec-9282-b109ed465015/08-rotated-simple-cubes.png"}],["meta",{"name":"twitter:image:alt","content":"Getting Started With CSS calc ()"}],["meta",{"property":"article:author","content":"Ana Tudor"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"smashingmagazine.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2015-12-03T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Getting Started With CSS calc ()"},{"property":"og:description","content":"Getting Started With CSS calc ()"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/smashingmagazine.com/getting-started-css-calc-techniques.html"}]],"prev":"/programming/css/articles/README.md","date":"2015-12-03T00:00:00.000Z","isOriginal":false,"author":[{"name":"Ana Tudor","url":"https://smashingmagazine.com/author/anatudor/"}],"cover":"https://archive.smashing.media/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a610d33b-4d3d-4aec-9282-b109ed465015/08-rotated-simple-cubes.png"},"git":{},"readingTime":{"minutes":14.74,"words":4423},"filePathRelative":"smashingmagazine.com/getting-started-css-calc-techniques.md","copyright":{"author":"Ana Tudor"}}');export{gn as comp,vn as data};
