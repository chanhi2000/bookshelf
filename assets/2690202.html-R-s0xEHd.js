import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as e,e as a,b as i,t as g,n as b,g as f,w as p,r as l,o as h}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/d2.naver.com/2690202/1.png",y={},q={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},_={class:"table-of-contents"},E={href:"https://google.github.io/styleguide/go/best-practices#logging-errors",target:"_blank",rel:"noopener noreferrer"},W={id:"_1-pkg-errors-wrap",tabindex:"-1"},N={class:"header-anchor",href:"#_1-pkg-errors-wrap"},F={href:"http://github.com/pkg/errors",target:"_blank",rel:"noopener noreferrer"},G={href:"http://github.com/pkg/errors",target:"_blank",rel:"noopener noreferrer"};function P(c,n){const r=l("VPCard"),t=l("router-link"),o=l("VPIcon"),u=l("SiteInfo"),d=l("VidStack"),k=l("RouteLink");return h(),v("div",null,[s("h1",q,[s("a",x,[s("span",null,g(c.$frontmatter.title)+" 관련",1)])]),e(r,b(f({title:"Go > Article(s)",desc:"Article(s)",link:"/programming/go/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",_,[s("ul",null,[s("li",null,[e(t,{to:"#기존-문제점"},{default:p(()=>n[0]||(n[0]=[a("기존 문제점")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#사전-조사"},{default:p(()=>n[1]||(n[1]=[a("사전 조사")])),_:1,__:[1]}),s("ul",null,[s("li",null,[e(t,{to:"#_1-pkg-errors-wrap"},{default:p(()=>[n[2]||(n[2]=a("1. ")),e(o,{icon:"iconfont icon-github"}),n[3]||(n[3]=a("pkg/errors Wrap()"))]),_:1,__:[2,3]})]),s("li",null,[e(t,{to:"#_2-fmt-errorf-w-err"},{default:p(()=>n[4]||(n[4]=[a("2. fmt.Errorf(”%w”, err)")])),_:1,__:[4]})])])]),s("li",null,[e(t,{to:"#고민"},{default:p(()=>n[5]||(n[5]=[a("고민")])),_:1,__:[5]})]),s("li",null,[e(t,{to:"#개발-과정"},{default:p(()=>n[6]||(n[6]=[a("개발 과정")])),_:1,__:[6]}),s("ul",null,[s("li",null,[e(t,{to:"#위치-및-이름"},{default:p(()=>n[7]||(n[7]=[a("위치 및 이름")])),_:1,__:[7]})]),s("li",null,[e(t,{to:"#추가-message-및-이전-error-내용"},{default:p(()=>n[8]||(n[8]=[a("추가 message 및 이전 error 내용")])),_:1,__:[8]})])])]),s("li",null,[e(t,{to:"#마치며"},{default:p(()=>n[9]||(n[9]=[a("마치며")])),_:1,__:[9]})])])]),n[22]||(n[22]=s("hr",null,null,-1)),e(u,{name:"Golang, 그대들은 어떻게 할 것인가 - 3. error 래핑 | NAVER D2",desc:"Golang, 그대들은 어떻게 할 것인가 - 3. error 래핑",url:"https://d2.naver.com/helloworld/2690202",logo:"/assets/image/d2.naver.com/favicon.ico",preview:"/assets/image/d2.naver.com/2690202/banner.png"}),e(d,{src:"https://tv.naver.com/embed/49089208?autoPlay=true"}),n[23]||(n[23]=a()),s("p",null,[e(k,{to:"/d2.naver.com/6178029.html"},{default:p(()=>n[10]||(n[10]=[a("앞 글")])),_:1,__:[10]}),n[11]||(n[11]=a("에서는 각 서버에 산재해 있던 MongoDB 관련 코드를 공통화 및 추상화하고, DB error 정보를 담을 수 있는 구조를 만들었습니다. 이번에는 이러한 error를 어떻게 상위 함수에 반환했는지에 대해 이야기해보려 합니다."))]),n[24]||(n[24]=s("hr",null,null,-1)),n[25]||(n[25]=s("h2",{id:"기존-문제점",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#기존-문제점"},[s("span",null,"기존 문제점")])],-1)),n[26]||(n[26]=s("p",null,"Golang에서 error는 caller가 처리하는 것을 권장하고 있습니다.",-1)),s("blockquote",null,[n[14]||(n[14]=s("p",null,"Avoid duplication. If you return an error, it's usually better not to log it yourself but rather let the caller handle it. The caller can choose to log the error, or perhaps rate-limit logging using rate.",-1)),s("p",null,[n[13]||(n[13]=a("출처: ")),s("a",E,[e(o,{icon:"fa-brands fa-google"}),n[12]||(n[12]=a("Logging errors"))])])]),n[27]||(n[27]=i(`<p>error를 상위 함수로 올리면, 상위 함수에서 해당 error에 대해 로그를 남기거나 다른 처리를 하도록 하는 것입니다.</p><p>하지만 다음과 같이 error를 단순히 올리기만 한다면 디버깅할 때 정보가 많이 부족합니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">checkName</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">  newError <span class="token operator">:=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid Name&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">if</span> name <span class="token operator">!=</span> <span class="token string">&quot;valid name&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">    log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> newError</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">  name <span class="token operator">:=</span> <span class="token string">&quot;Hello&quot;</span></span>
<span class="line">  err <span class="token operator">:=</span> <span class="token function">checkName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">    log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Invalid Name  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>error message만 보일 뿐, 어느 함수에서 발생했는지 알기 어렵습니다. 특히, 재사용이 많은 함수에서 error가 발생하면 해당 error가 어떤 호출 스택으로 불려 발생했는지 찾기 힘들 것입니다.</p><p>그래서 기존 V1 코드에서는 error가 발생한 지점을 포함하여, 상위 함수로 올리면서 모두 로그를 남겨서 호출 스택을 찾을 수 있게 했었습니다. 하지만 이러한 방식은 <code>함수 이름</code> 정도만이 추가적인 정보일 뿐, 나머지는 모두 중복이었습니다. 또한, 매번 로그를 남겨야하는 불편함도 컸습니다.</p><hr><h2 id="사전-조사" tabindex="-1"><a class="header-anchor" href="#사전-조사"><span>사전 조사</span></a></h2><p>위와 같은 비효율을 없애면서 편하게 호출 스택을 남기는 방법을 고민했고, 두 가지 방법을 찾았습니다.</p>`,9)),s("h3",W,[s("a",N,[s("span",null,[n[16]||(n[16]=a("1. ")),s("a",F,[e(o,{icon:"iconfont icon-github"}),n[15]||(n[15]=s("code",null,"pkg/errors",-1))]),n[17]||(n[17]=a()),n[18]||(n[18]=s("code",null,"Wrap()",-1))])])]),s("p",null,[n[20]||(n[20]=a("Go 1.13 미만 버전에서는 표준 라이브러리에서 error 래핑 및 스택 기능을 제공하지 않아, 이를 제공하는 ")),s("a",G,[e(o,{icon:"iconfont icon-github"}),n[19]||(n[19]=s("code",null,"pkg/errors",-1))]),n[21]||(n[21]=a("라는 서드파티 라이브러리를 많이 사용했습니다. 현재는 추가 개발 없이 유지하는 중입니다(이 라이브러리에서 제공하는 기능이 Go 2에 포함될 예정)."))]),n[28]||(n[28]=i(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">   <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">Wrap</span><span class="token punctuation">(</span>sql<span class="token punctuation">.</span>ErrNoRows<span class="token punctuation">,</span> <span class="token string">&quot;foo failed&quot;</span><span class="token punctuation">)</span> <span class="token comment">// attach the call stack</span></span>
<span class="line">   <span class="token comment">// return errors.WithStack(sql.ErrNoRows) // attach the call stack without message</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">   <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">WithMessage</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;bar failed&quot;</span><span class="token punctuation">)</span> <span class="token comment">// without attaching call stack</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">   err <span class="token operator">:=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Cause</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">==</span> sql<span class="token punctuation">.</span>ErrNoRows <span class="token punctuation">{</span></span>
<span class="line">      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;data not found, %v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">Output:</span>
<span class="line">data not found, bar failed: foo failed: sql: no rows in result set</span>
<span class="line"></span>
<span class="line">sql: no rows in result set  </span>
<span class="line">foo failed  </span>
<span class="line">main.foo  </span>
<span class="line">    /usr/three/main.go:11</span>
<span class="line">main.bar  </span>
<span class="line">    /usr/three/main.go:15</span>
<span class="line">main.main  </span>
<span class="line">    /usr/three/main.go:19</span>
<span class="line">runtime.main  </span>
<span class="line">    ...</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>간단히 보면 다음과 같습니다.</p><ul><li><code>errors.Wrap(err, message)</code>: 호출 스택 추가</li><li><code>errors.WithMessage(err, message)</code>: 호출 스택은 추가하지 않고 message만 추가</li></ul><p>이렇게 래핑된 err는 상위 함수에서 다음과 같은 형식으로 로그를 출력할 수 있습니다.</p><ul><li><code>%v</code>: 호출 스택의 순서대로 모든 context 텍스트를 포함하는 한 줄 문자열</li><li><code>%+v</code>: 전체 호출 스택</li></ul><h3 id="_2-fmt-errorf-w-err" tabindex="-1"><a class="header-anchor" href="#_2-fmt-errorf-w-err"><span>2. <code>fmt.Errorf(”%w”, err)</code></span></a></h3><p>Go 1.13 이상 버전에서는 표준 라이브러리에 error 래핑 기능이 추가되어, 호출 스택이 필요 없는 경우에는 다음과 같이 간편하게 사용할 수 있습니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;foo error!!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;%s, %w&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    err <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;%s, %w&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;main!!&quot;</span><span class="token punctuation">,</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>string formatting 방식과 비슷하며, <code>%w</code>를 사용하여 message가 아니라 error를 직접 래핑할 수 있습니다.</p><p>그리고 마지막에 <code>%+v</code>로 err를 출력하면, 래핑된 error들이 출력됩니다.</p><div class="language-erlang line-numbers-mode" data-highlighter="prismjs" data-ext="erlang"><pre><code class="language-erlang"><span class="line"><span class="token atom">main</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">,</span> <span class="token atom">bar</span><span class="token punctuation">,</span> <span class="token atom">foo</span> <span class="token atom">error</span><span class="token operator">!</span><span class="token operator">!</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="고민" tabindex="-1"><a class="header-anchor" href="#고민"><span>고민</span></a></h2><p>Golang은 Java나 Python처럼 많은 사람들이 사용하는 언어가 아니어서, 저를 비롯하여 저희 팀에 합류하신 분들 중에서도 Golang을 처음 접하는 경우가 많았습니다. 처음 접하고 개발하다 보면 error 처리에서 어려움을 많이 겪습니다. 그래서 저는 error를 <strong>직관적</strong>이고 <strong>편하게</strong> 처리하는 방법을 만들고 싶었습니다.</p><p>1번 방식의 <code>errors.Wrap()</code>은 분명히 편했습니다. 그러나 무작정 <code>Wrap()</code>을 실행하다 보면 <strong>호출 스택이 재귀적으로 쌓이는 문제</strong>가 있었습니다.</p><details class="hint-container details"><summary>문제 코드 예</summary><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;foo Error!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">Wrap</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;bar message&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    err <span class="token operator">:=</span> errors<span class="token punctuation">.</span><span class="token function">Wrap</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">foo Error!  </span>
<span class="line">main.foo  </span>
<span class="line">    main.go:15</span>
<span class="line">main.bar  </span>
<span class="line">    main.go:18</span>
<span class="line">main.main  </span>
<span class="line">    main.go:22</span>
<span class="line">runtime.main  </span>
<span class="line">    /usr/local/go-faketime/src/runtime/proc.go:250</span>
<span class="line">runtime.goexit  </span>
<span class="line">    /usr/local/go-faketime/src/runtime/asm_amd64.s:1594</span>
<span class="line">bar message  </span>
<span class="line">main.bar  </span>
<span class="line">    main.go:18</span>
<span class="line"></span>
<span class="line">main.main  </span>
<span class="line">    main.go:22</span>
<span class="line">runtime.main  </span>
<span class="line">    /usr/local/go-faketime/src/runtime/proc.go:250</span>
<span class="line">runtime.goexit  </span>
<span class="line">    /usr/local/go-faketime/src/runtime/asm_amd64.s:1594</span>
<span class="line">main.main  </span>
<span class="line">    main.go:22</span>
<span class="line">runtime.main  </span>
<span class="line">    /usr/local/go-faketime/src/runtime/proc.go:250</span>
<span class="line">runtime.goexit  </span>
<span class="line">    /usr/local/go-faketime/src/runtime/asm_amd64.s:1594</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>이 문제를 해결하기 위해 <code>Wrap()</code>을 최하위 함수에서 1번만 사용하고 나머지에서는 <code>WithMessage()</code>를 사용하도록 규칙을 정하면 어떨지 생각해보았습니다.</p><p>여러 명이 개발하고 새로운 사람이 보더라도 <strong>직관적으로 이해할 수 있을지</strong> 고민해보았을 때, 그에 대한 대답은 &#39;<strong>아닐 것 같다</strong>&#39;였습니다. 매번 Wrap이 되었는지 하위 함수로 내려가 확인하는 데 시간이 소모되고, 추가 message를 적고 싶지 않더라도 중복 스택을 쌓지 않기 위해 <code>WithMessage()</code>에 빈 문자열(<code>&quot;&quot;</code>)이라도 넣어야 하는 불편함이 있었습니다. 결국 사용하는 사람이 라이브러리에 대한 이해가 선행되어야 했고, 이는 편하게 사용할 수 있는 방향이 아니라고 생각했습니다.</p><p>반면 2번의 방식은 <strong>호출 스택이 없다는 단점</strong>이 있었습니다. 그러나 formatting 방식으로 error가 래핑되고, message도 쉽게 추가할 수 있었고, 호출 스택을 직접 넣어볼 수도 있겠다는 생각이 들었습니다. 이렇게 개발만 된다면 1번과 같이 라이브러리에 대한 이해가 없더라도 쉽게 이해할 수 있도록 만들 수 있을 것 같았습니다.</p><p>그래서 저는 <strong>2번의 방식을 택하고, 직접 스택 트레이스를 개발</strong>해보기로 했습니다.(직접 만들어 쓰는 게 Golang이죠!)</p><hr><h2 id="개발-과정" tabindex="-1"><a class="header-anchor" href="#개발-과정"><span>개발 과정</span></a></h2><p>우선 스택 트레이스에 어떤 내용이 필요할지 생각해보았습니다.</p><ul><li>함수의 위치 및 이름</li><li>추가 message 및 이전 error 내용</li></ul><p>위 2가지가 필요하다고 판단했고 이를 직접 하나씩 구현해 나갔습니다.</p><h3 id="위치-및-이름" tabindex="-1"><a class="header-anchor" href="#위치-및-이름"><span>위치 및 이름</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token comment">// {filename:line} [func name]</span></span>
<span class="line"><span class="token keyword">var</span> funcInfoFormat <span class="token operator">=</span> <span class="token string">&quot;{%s:%d} [%s]&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">getFuncInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  </span>
<span class="line">    pc<span class="token punctuation">,</span> file<span class="token punctuation">,</span> line<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> runtime<span class="token punctuation">.</span><span class="token function">Caller</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    f <span class="token operator">:=</span> runtime<span class="token punctuation">.</span><span class="token function">FuncForPC</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> f <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>funcInfoFormat<span class="token punctuation">,</span> file<span class="token punctuation">,</span> line<span class="token punctuation">,</span> <span class="token string">&quot;unknwon&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>funcInfoFormat<span class="token punctuation">,</span> file<span class="token punctuation">,</span> line<span class="token punctuation">,</span> f<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>runtime.Caller(skip int)</code> 함수를 통하여, 현재 호출되는 곳에서 <code>skip</code>만큼 상위 호출 스택의 정보를 가져올 수 있습니다. 제공하는 값은 <code>pc</code>(프로그램 카운터), <code>file</code>(함수가 위치한 파일 이름), <code>line</code>(파일 안의 함수 위치)입니다.</p><p><code>runtime.FuncForPC(pc int)</code> 함수로, 앞에서 얻은 상위 함수의 <code>pc</code> 정보를 넘겨, 해당 함수의 정보를 획득할 수 있습니다.</p><p>그리고 마지막으로 <code>f.Name()</code> 메서드로 <code>패키지이름.함수이름</code> 형식의 정보를 가져올 수 있습니다.</p><details class="hint-container details"><summary>사용 예</summary><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">getFuncInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">{main.go:28} [main.hi]</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="추가-message-및-이전-error-내용" tabindex="-1"><a class="header-anchor" href="#추가-message-및-이전-error-내용"><span>추가 message 및 이전 error 내용</span></a></h3><p>error가 발생하면 어떤 처리가 필요할지 생각해보았습니다.</p><ul><li>단순히 error를 상위로 올린다.</li><li>기존 error에 추가 message를 담아서 상위로 올린다.</li></ul><p>위 2가지 경우가 있었고, 이에 따라 단순히 <strong>이전 error를 래핑</strong>하는 함수와 <strong>추가 message를 함께 래핑</strong>하는 함수, 두 개의 함수를 만들었습니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">var</span> wrapFormat <span class="token operator">=</span> <span class="token string">&quot;%s\\n%w&quot;</span>  <span class="token comment">// &quot;{file:line} [func name] msg \\n error&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">Wrap</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">    pc<span class="token punctuation">,</span> file<span class="token punctuation">,</span> line<span class="token punctuation">,</span> ok <span class="token operator">:=</span> runtime<span class="token punctuation">.</span><span class="token function">Caller</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>wrapFormat<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// {file:line} [funcName] msg</span></span>
<span class="line">    stack <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %s&quot;</span><span class="token punctuation">,</span> <span class="token function">getFuncInfo</span><span class="token punctuation">(</span>pc<span class="token punctuation">,</span> file<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>wrapFormat<span class="token punctuation">,</span> stack<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">WrapWithMessage</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">    pc<span class="token punctuation">,</span> file<span class="token punctuation">,</span> line<span class="token punctuation">,</span> ok <span class="token operator">:=</span> runtime<span class="token punctuation">.</span><span class="token function">Caller</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>wrapFormat<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    stack <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %s&quot;</span><span class="token punctuation">,</span> <span class="token function">getFuncInfo</span><span class="token punctuation">(</span>pc<span class="token punctuation">,</span> file<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>wrapFormat<span class="token punctuation">,</span> stack<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>runtime.Caller</code>의 skip 조정이 중요하기에 <code>getFuncInfo()</code>는 파라미터로 받도록 조정했고, <code>message \\n error</code>의 형식으로 래핑하여 로깅 시 스택의 상단에서부터 error를 출력하도록 했습니다.</p><p>작업을 마친 후 코드를 다시 확인해보니 중복되는 부분이 상당히 많았습니다. 중복 코드를 함수로 추출하고 <code>skip</code>을 한 번 더 조정하여 공통화했습니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">wrap</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">    pc<span class="token punctuation">,</span> file<span class="token punctuation">,</span> line<span class="token punctuation">,</span> ok <span class="token operator">:=</span> runtime<span class="token punctuation">.</span><span class="token function">Caller</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>wrapFormat<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// {file:line} [funcName] msg</span></span>
<span class="line">    stack <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %s&quot;</span><span class="token punctuation">,</span> <span class="token function">getFuncInfo</span><span class="token punctuation">(</span>pc<span class="token punctuation">,</span> file<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>wrapFormat<span class="token punctuation">,</span> stack<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위와 같이 skip을 조정하고 공통화할 수 있는 영역을 추출하고, 추가 message가 있는 함수와 없는 함수를 만들었습니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">WrapWithMessage</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">wrap</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> msg<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">Wrap</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">wrap</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 만든 함수는 다음과 같이 사용할 수 있습니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        err <span class="token operator">=</span> <span class="token function">Wrap</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// 추가 message가 필요 없을 때</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;%+v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// 하위 함수에서 error 발생</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">WrapWithMessage</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&quot;foo message&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 추가 message가 필요할 때</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;bar Error!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">{main.go:24} [main.main]</span>
<span class="line">{main.go:17} [main.foo] foo message</span>
<span class="line">bar Error!  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>여기까지 DB 레이어 공통화 및 error 분류, error 래핑까지 완료했습니다.</p><figure><img src="`+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>기존 V1 코드에서 error를 상위로 보낼 때마다 매번 로깅을 하던 불편함을 없애고, 단순히 <code>Wrap(err)</code>만으로 호출 스택을 추가하여 보낼 수 있게 되었습니다.</p><p>다음으로는 이렇게 쌓아올린 error를 상위에서 어떻게 처리했는지에 대해 이야기해보려 합니다.</p>',50))])}const C=m(y,[["render",P]]),R=JSON.parse('{"path":"/d2.naver.com/2690202.html","title":"Golang, 그대들은 어떻게 할 것인가 - 3. error 래핑","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Golang, 그대들은 어떻게 할 것인가 - 3. error 래핑","description":"Article(s) > Golang, 그대들은 어떻게 할 것인가 - 3. error 래핑","icon":"fa-brands fa-golang","category":["Go","Article(s)"],"tag":["blog","d2.naver.com","go","golang"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Golang, 그대들은 어떻게 할 것인가 - 3. error 래핑\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/2690202/1.png\\"],\\"datePublished\\":\\"2024-03-29T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/d2.naver.com/2690202.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Golang, 그대들은 어떻게 할 것인가 - 3. error 래핑"}],["meta",{"property":"og:description","content":"Article(s) > Golang, 그대들은 어떻게 할 것인가 - 3. error 래핑"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/2690202/banner.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/2690202/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Golang, 그대들은 어떻게 할 것인가 - 3. error 래핑"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:tag","content":"d2.naver.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-03-29T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Golang, 그대들은 어떻게 할 것인가 - 3. error 래핑"},{"property":"og:description","content":"Golang, 그대들은 어떻게 할 것인가 - 3. error 래핑"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/d2.naver.com/2690202.html"}]],"prev":"/programming/go/articles/README.md","date":"2024-03-29T00:00:00.000Z","isOriginal":false,"cover":"/assets/image/d2.naver.com/2690202/banner.png"},"git":{},"readingTime":{"minutes":2.76,"words":829},"filePathRelative":"d2.naver.com/2690202.md"}');export{C as comp,R as data};
