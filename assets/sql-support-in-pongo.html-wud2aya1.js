import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as s,f as e,a as r,b as o,t as h,n as u,g as d,w as l,e as a,r as p,o as y}from"./app-BVguHYKu.js";const f={},w={id:"frontmatter-title-관련",tabindex:"-1"},q={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},L={href:"https://github.com/event-driven-io/Pongo",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/event-driven-io/Pongo",target:"_blank",rel:"noopener noreferrer"},P={href:"https://hub.docker.com/_/postgres",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/event-driven-io/Pongo",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/event-driven-io/emmett",target:"_blank",rel:"noopener noreferrer"},A={href:"https://node-postgres.com",target:"_blank",rel:"noopener noreferrer"},O={href:"https://discord.gg/fTpqUTMmVa",target:"_blank",rel:"noopener noreferrer"};function D(k,n){const i=p("VPCard"),c=p("router-link"),g=p("SiteInfo"),t=p("VPIcon"),v=p("RouteLink");return y(),b("div",null,[s("h1",w,[s("a",q,[s("span",null,h(k.$frontmatter.title)+" 관련",1)])]),e(i,u(d({title:"TypeScript > Article(s)",desc:"Article(s)",link:"/programming/ts/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(i,u(d({title:"Postgres > Article(s)",desc:"Article(s)",link:"/data-science/postgres/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[e(c,{to:"#sql-queries"},{default:l(()=>n[0]||(n[0]=[a("SQL queries")])),_:1,__:[0]})]),s("li",null,[e(c,{to:"#sql-updates"},{default:l(()=>n[1]||(n[1]=[a("SQL updates")])),_:1,__:[1]})]),s("li",null,[e(c,{to:"#do-whatever-you-want-with-sql"},{default:l(()=>n[2]||(n[2]=[a("Do whatever you want with SQL")])),_:1,__:[2]})])])]),n[30]||(n[30]=s("hr",null,null,-1)),e(g,{name:"Running a regular SQL on Pongo documents",desc:"Event-Driven by Oskar Dudycz",url:"https://event-driven.io/en/sql_support_in_pongo",logo:"/assets/image/event-driven.io/favicon.jfif",preview:"https://event-driven.io/static/56dfce3259a234d6e422b2689bba799e/2a4de/2024-10-15-cover.png"}),n[31]||(n[31]=s("p",null,[s("strong",null,[a("Have you heard someone say: "),s("em",null,"“We’ll use this tool because it requires a long onboarding and lots of memorisation?")])],-1)),n[32]||(n[32]=s("p",null,"You could have seen the decision as such in hindsight, but that doesn’t happen too often intentionally. Or at least, I hope.",-1)),n[33]||(n[33]=s("p",null,[s("strong",null,"The Tools I built need to share a common goal: they must be accessible and enable advanced users to customise them to their needs."),a(" Users should be able to start quickly. Best if they could reuse the learnings in other areas. Users should get a learning ladder. That’s why I optimise the API and tooling for the newbies.")],-1)),n[34]||(n[34]=s("p",null,[a("That’s why I wrote "),s("a",{href:"/en/small_rant_about_software_design/",target:"_blank",rel:"noopener noreferrer"},"Small rant about Software Design"),a(", which is being triggered by yet another tool that thinks too soon about the advanced user. Too often, we forget that we won’t get advanced users if the newbies don’t pass the very first steps of the learning ladder.")],-1)),r(" TODO: /event-driven.io/small-rant-about-software-design.md "),s("p",null,[s("strong",null,[n[4]||(n[4]=a("That’s why, in ")),s("a",L,[e(t,{icon:"iconfont icon-github"}),n[3]||(n[3]=s("code",null,"event-driven-io/Pongo",-1))]),n[5]||(n[5]=a(", I’m trying to join two accessibilities: muscle memory and the Node.js community by reusing the MongoDB client API and PostgreSQL operation easiness and familiarity."))]),n[6]||(n[6]=a(" I think that enables me to ramp up quickly and deliver business value by deploying the first version of your software to production."))]),s("p",null,[n[8]||(n[8]=a("To use ")),s("a",T,[e(t,{icon:"iconfont icon-github"}),n[7]||(n[7]=s("code",null,"event-driven-io/Pongo",-1))]),n[9]||(n[9]=a(", you just need to install it:"))]),n[35]||(n[35]=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> <span class="token function">install</span> @event-driven-io/pongo</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),s("p",null,[n[13]||(n[13]=a("Have a PostgreSQL instance working somewhere (e.g. ")),s("a",P,[n[10]||(n[10]=a("with Docker (")),e(t,{icon:"fa-brands fa-docker"}),n[11]||(n[11]=s("code",null,"postgres",-1)),n[12]||(n[12]=a(")"))]),n[14]||(n[14]=a(")."))]),n[36]||(n[36]=o(`<p>Connect the client to the instance using database:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> connectionString <span class="token operator">=</span></span>
<span class="line">  <span class="token string">&#39;postgresql://postgres:postgres@localhost:5432/postgres&#39;</span><span class="token punctuation">;</span>cockroachdb</span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> pongo <span class="token operator">=</span> <span class="token function">pongoClient</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> pongoDb <span class="token operator">=</span> pongo<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Define your document type:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">History</span> <span class="token operator">=</span> <span class="token punctuation">{</span> street<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Address</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  city<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  street<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  zip<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  history<span class="token operator">?</span><span class="token operator">:</span> History<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  _id<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  address<span class="token operator">?</span><span class="token operator">:</span> Address<span class="token punctuation">;</span></span>
<span class="line">  tags<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And boom, you can access the collection with all the typing benefits:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> users <span class="token operator">=</span> pongoDb<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">collection</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,6)),s("p",null,[e(v,{to:"/event-driven.io/pongo-strongly-typed-client.html"},{default:l(()=>n[15]||(n[15]=[s("strong",null,"You can even get the typed client that will make that even smoother",-1)])),_:1,__:[15]}),n[16]||(n[16]=a("."))]),n[37]||(n[37]=o(`<p>Then you can insert some docs:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> docs <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">     name<span class="token operator">:</span> <span class="token string">&#39;Anita&#39;</span><span class="token punctuation">,</span></span>
<span class="line">     age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span></span>
<span class="line">     address<span class="token operator">:</span> <span class="token punctuation">{</span> city<span class="token operator">:</span> <span class="token string">&#39;Wonderland&#39;</span><span class="token punctuation">,</span> street<span class="token operator">:</span> <span class="token string">&#39;Main St&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">     name<span class="token operator">:</span> <span class="token string">&#39;Roger&#39;</span><span class="token punctuation">,</span></span>
<span class="line">     age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">     address<span class="token operator">:</span> <span class="token punctuation">{</span> city<span class="token operator">:</span> <span class="token string">&#39;Wonderland&#39;</span><span class="token punctuation">,</span> street<span class="token operator">:</span> <span class="token string">&#39;Elm St&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">     name<span class="token operator">:</span> <span class="token string">&#39;Cruella&#39;</span><span class="token punctuation">,</span></span>
<span class="line">     age<span class="token operator">:</span> <span class="token number">35</span><span class="token punctuation">,</span></span>
<span class="line">     address<span class="token operator">:</span> <span class="token punctuation">{</span> city<span class="token operator">:</span> <span class="token string">&#39;Dreamland&#39;</span><span class="token punctuation">,</span> street<span class="token operator">:</span> <span class="token string">&#39;Oak St&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> users<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span>docs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then you can filter them:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> docs <span class="token operator">=</span> <span class="token keyword">await</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  address<span class="token operator">:</span> <span class="token punctuation">{</span> city<span class="token operator">:</span> <span class="token string">&#39;Wonderland&#39;</span><span class="token punctuation">,</span> street<span class="token operator">:</span> <span class="token string">&#39;Elm St&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Update them:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">await</span> users<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Anita&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> $inc<span class="token operator">:</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And all that jazz. MongoDB API has its quirks, but I believe it’s flexible and familiar enough to be easy to use. But…</p><p>That may be my point of view, and other people may disagree. Some people are familiar enough with PostgreSQL JSONB syntax to just use SQL.</p><p>The other reason can be that Pongo doesn’t support some MongoDB syntax yet. I’m continuously working on Pongo to deliver decent compatibility. Still, it may take some time to be fully aligned. I might never reach full compatibility, as the API can have numerous permutations that I didn’t predict. I don’t want to block anyone waiting for the new release with the fix. <strong>I think that SQL is a decent fallback.</strong></p><p>That’s why I added a few options for using SQL in the Pongo API.</p><hr><h2 id="sql-queries" tabindex="-1"><a class="header-anchor" href="#sql-queries"><span>SQL queries</span></a></h2><p>If you want to query Pongo with SQL, you can use an SQL helper. It’ll handle the parameter formatting, allowing you to customise it. For instance:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> plainString<span class="token punctuation">,</span> <span class="token constant">SQL</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@event-driven-io/dumbo&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> wonderland <span class="token operator">=</span> <span class="token function">plainString</span><span class="token punctuation">(</span><span class="token string">&#39;Wonderland&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> docs <span class="token operator">=</span> <span class="token keyword">await</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token constant">SQL</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">data @&gt; &#39;{&quot;address&quot;:{&quot;city&quot;:&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>wonderland<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;}}&#39;</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In Pongo documents are stored as regular table, the structure looks as follows:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> users <span class="token punctuation">(</span></span>
<span class="line">    _id           <span class="token keyword">TEXT</span>           <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token keyword">data</span>          JSONB          <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> </span>
<span class="line">    metadata      JSONB          <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token string">&#39;{}&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    _version      <span class="token keyword">BIGINT</span>         <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    _partition    <span class="token keyword">TEXT</span>           <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token string">&#39;png_global&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    _archived     <span class="token keyword">BOOLEAN</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">FALSE</span><span class="token punctuation">,</span></span>
<span class="line">    _created      TIMESTAMPTZ    <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    _updated      TIMESTAMPTZ    <span class="token operator">NOT</span> <span class="token boolean">NULL</span>     <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you see, we’re querying the nested content of the JSON kept in the <em>data</em> column. Of course, you can access any other column or use data from other tables.</p><p>Your SQL will be placed in the WHERE statement.</p>`,18)),s("p",null,[n[19]||(n[19]=a("If you’re wondering what’s ")),n[20]||(n[20]=s("strong",null,"@event-driven-io/dumbo",-1)),n[21]||(n[21]=a(", then it’s a shared package between ")),s("a",E,[e(t,{icon:"iconfont icon-github"}),n[17]||(n[17]=s("code",null,"event-driven-io/Pongo",-1))]),n[22]||(n[22]=a(" and ")),s("a",I,[e(t,{icon:"iconfont icon-github"}),n[18]||(n[18]=s("code",null,"event-driven-io/emmett",-1))]),n[23]||(n[23]=a("."))]),n[38]||(n[38]=o(`<hr><h2 id="sql-updates" tabindex="-1"><a class="header-anchor" href="#sql-updates"><span>SQL updates</span></a></h2><p>In the same way, you can also do updates. So instead of using the object-oriented Mongo API, you can do the follows:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> wonderland <span class="token operator">=</span> <span class="token function">plainString</span><span class="token punctuation">(</span><span class="token string">&#39;Wonderland&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> oz <span class="token operator">=</span> <span class="token function">plainString</span><span class="token punctuation">(</span><span class="token string">&#39;Oz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> docs <span class="token operator">=</span> <span class="token keyword">await</span> users<span class="token punctuation">.</span><span class="token function">updateMany</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token constant">SQL</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">data @&gt; &#39;{&quot;address&quot;:{&quot;city&quot;:&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>wonderland<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;}}&#39;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">SQL</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">jsonb_set(data || &#39;{&quot;address&quot;:{&quot;city&quot;:&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>oz<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;}}&#39;::jsonb, &#39;{age}&#39;, to_jsonb(COALESCE((data-&gt;&gt;&#39;age&#39;)::NUMERIC, 0) + &#39;1&#39;), true)</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The first SQL will be placed in the WHERE part, and the next one will be put into the UPDATE SET pipeline.</p><p>This will do the same as:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> docs <span class="token operator">=</span> <span class="token keyword">await</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token punctuation">{</span> address<span class="token operator">:</span> <span class="token punctuation">{</span> city<span class="token operator">:</span> <span class="token string">&#39;Wonderland&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    $set<span class="token operator">:</span> <span class="token punctuation">{</span> address<span class="token operator">:</span> <span class="token punctuation">{</span> city<span class="token operator">:</span> <span class="token string">&#39;Oz&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    $inc<span class="token operator">:</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>My point is for the MongoDB syntax. But I’ll let you decide what looks simpler to you.</p><hr><h2 id="do-whatever-you-want-with-sql" tabindex="-1"><a class="header-anchor" href="#do-whatever-you-want-with-sql"><span>Do whatever you want with SQL</span></a></h2><p>You can also have the freehand mode, where you can draw anything or actually place any SQL. There you have it!</p><p>You can access it from both the Pongo db and the collection. For instance to query only document id and address you can do the following</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> pongoDb<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token constant">SQL</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">SELECT _id, data-&gt;&#39;address&#39; as address from users</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It will return:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;01928fee-d18b-711b-89d7-830ba98585e8&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;address&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;city&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Dreamland&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;street&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Oak St&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;01928fee-d18b-711b-89d7-755d49f389f6&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;address&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;city&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Oz&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;01928fee-d18b-711b-89d7-790f5373cd10&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;address&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;city&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Oz&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>As you can imagine, this means that you can also join with other tables, in general, whatever the SQL syntax allows you.</strong></p><p>You can also do any other operation that changes the data like:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> pongoDb<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">SQL</span>
<span class="line">  UPDATE users </span>
<span class="line">  SET </span>
<span class="line">    data = jsonb_set(data || &#39;{&quot;address&quot;:{&quot;city&quot;:&quot;Oz&quot;}}&#39;::jsonb, &#39;{age}&#39;, to_jsonb(COALESCE((data-&gt;&gt;&#39;age&#39;)::NUMERIC, 0) + &#39;1&#39;), true) || jsonb_build_object(&#39;_version&#39;, (_version + 1)::text),</span>
<span class="line">    _version = _version + 1</span>
<span class="line">WHERE </span>
<span class="line">    data @&gt; &#39;{&quot;address&quot;:{&quot;city&quot;: &quot;Oz&quot;}}&#39;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I think that’s pretty neat and powerful.</p><p>So, if you’re afraid of using Pongo, you’ll get a showstopper in compatibility; hey, I have you covered!</p>`,20)),s("p",null,[n[25]||(n[25]=a("It’s the same if your favourite language is SQL; you can do whatever you want. Underneath, Pongo uses ")),s("a",A,[e(t,{icon:"fas fa-globe"}),n[24]||(n[24]=a("node-postgres"))]),n[26]||(n[26]=a(" with connection pooling enabled by default, so the additional performance issue should not hit you."))]),n[39]||(n[39]=s("p",null,[a("See also the videos where "),s("a",{href:"/en/pongo_behind_the_scenes/",target:"_blank",rel:"noopener noreferrer"},[s("strong",null,"I showed all of that live")]),a(".")],-1)),r(" TODO: /event-driven.io/pongo-behind-the-scenes.md "),n[40]||(n[40]=s("p",null,"Thoughts? Yay or Nay?",-1)),s("p",null,[n[28]||(n[28]=a("If you have more questions, join our ")),s("a",O,[e(t,{icon:"fa-brands fa-discord"}),n[27]||(n[27]=a("Discord server"))]),n[29]||(n[29]=a(" and let’s tackle that together!"))]),n[41]||(n[41]=s("p",null,"Cheers!",-1)),r(" TODO: add ARTICLE CARD "),e(i,u(d({title:"Running a regular SQL on Pongo documents",desc:"Event-Driven by Oskar Dudycz",link:"https://chanhi2000.github.io/bookshelf/event-driven.io/sql_support_in_pongo.html",logo:"/assets/image/event-driven.io/favicon.jfif",background:"rgba(255,255,0,0.2)"})),null,16)])}const x=m(f,[["render",D]]),N=JSON.parse('{"path":"/event-driven.io/sql-support-in-pongo.html","title":"Running a regular SQL on Pongo documents","lang":"en-US","frontmatter":{"lang":"en-US","title":"Running a regular SQL on Pongo documents","description":"Article(s) > Running a regular SQL on Pongo documents","icon":"iconfont icon-typescript","category":["TypeScript","PostgreSQL","Article(s)"],"tag":["blog","event-driven.io","ts","typescript","sql","db","postgres","postgresql"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Running a regular SQL on Pongo documents\\",\\"image\\":[\\"https://event-driven.io/static/56dfce3259a234d6e422b2689bba799e/2a4de/2024-10-15-cover.png\\"],\\"datePublished\\":\\"2024-10-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Oskar Dudycz\\",\\"url\\":\\"https://event-driven.io/en/about/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/event-driven.io/sql-support-in-pongo.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Running a regular SQL on Pongo documents"}],["meta",{"property":"og:description","content":"Article(s) > Running a regular SQL on Pongo documents"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://event-driven.io/static/56dfce3259a234d6e422b2689bba799e/2a4de/2024-10-15-cover.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://event-driven.io/static/56dfce3259a234d6e422b2689bba799e/2a4de/2024-10-15-cover.png"}],["meta",{"name":"twitter:image:alt","content":"Running a regular SQL on Pongo documents"}],["meta",{"property":"article:author","content":"Oskar Dudycz"}],["meta",{"property":"article:tag","content":"postgresql"}],["meta",{"property":"article:tag","content":"postgres"}],["meta",{"property":"article:tag","content":"db"}],["meta",{"property":"article:tag","content":"sql"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:tag","content":"ts"}],["meta",{"property":"article:tag","content":"event-driven.io"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-10-15T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Running a regular SQL on Pongo documents"},{"property":"og:description","content":"Running a regular SQL on Pongo documents"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/event-driven.io/sql-support-in-pongo.html"}]],"prev":"/programming/ts/articles/README.md","date":"2024-10-15T00:00:00.000Z","isOriginal":false,"author":[{"name":"Oskar Dudycz","url":"https://event-driven.io/en/about/"}],"cover":"https://event-driven.io/static/56dfce3259a234d6e422b2689bba799e/2a4de/2024-10-15-cover.png"},"git":{},"readingTime":{"minutes":4.64,"words":1392},"filePathRelative":"event-driven.io/sql-support-in-pongo.md","copyright":{"author":"Oskar Dudycz"}}');export{x as comp,N as data};
