import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as t,b as l,a as b,t as f,n as u,g as r,w as p,e as a,r as i,o as h}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/blog.logrocket.com/build-powerful-react-forms-with-informed/banner.png",q="/bookshelf/assets/image/blog.logrocket.com/build-powerful-react-forms-with-informed/basic-form-example.png",y="/bookshelf/assets/image/blog.logrocket.com/build-powerful-react-forms-with-informed/logging-form-state.png",x="/bookshelf/assets/image/blog.logrocket.com/build-powerful-react-forms-with-informed/default-required-messages.png",S="/bookshelf/assets/image/blog.logrocket.com/build-powerful-react-forms-with-informed/custom-error-messages.png",I="/bookshelf/assets/image/blog.logrocket.com/build-powerful-react-forms-with-informed/custom-validator-functions.png",A="/bookshelf/assets/image/blog.logrocket.com/build-powerful-react-forms-with-informed/other-form-inputs.png",j="/bookshelf/assets/image/blog.logrocket.com/build-powerful-react-forms-with-informed/debug-component.png",z="/bookshelf/assets/image/blog.logrocket.com/build-powerful-react-forms-with-informed/showing-errors-on-mount.png",R="/bookshelf/assets/image/blog.logrocket.com/build-powerful-react-forms-with-informed/conditionally-display-input-field.png",F="/bookshelf/assets/image/blog.logrocket.com/build-powerful-react-forms-with-informed/conditionally-rendering-field-with-relevant-prop.png",T="/bookshelf/assets/image/blog.logrocket.com/build-powerful-react-forms-with-informed/conditionally-display-telephone-input.png",O={},C={id:"frontmatter-title-관련",tabindex:"-1"},E={class:"header-anchor",href:"#frontmatter-title-관련"},P={class:"table-of-contents"},N={href:"https://github.com/teslamotors/informed",target:"_blank",rel:"noopener noreferrer"},D={href:"https://stackblitz.com/edit/react-ts-jqjc8h?file=App.tsx",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://stackblitz.com/edit/react-ts-jqjc8h?file=App.tsx",target:"_blank",rel:"noopener noreferrer"},B={href:"https://stackblitz.com/edit/react-ts-pzay2d?file=App.tsx",target:"_blank",rel:"noopener noreferrer"},H={href:"https://stackblitz.com/edit/react-ts-pzsrhk?file=App.tsx",target:"_blank",rel:"noopener noreferrer"},M={href:"https://stackblitz.com/edit/react-ts-bjokq2?file=App.tsx",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/jquense/yup",target:"_blank",rel:"noopener noreferrer"},L={href:"https://stackblitz.com/edit/react-ts-9lrju6?file=App.tsx",target:"_blank",rel:"noopener noreferrer"},W={href:"https://stackblitz.com/edit/react-ts-hrzu3i?file=App.tsx",target:"_blank",rel:"noopener noreferrer"},G={href:"https://react-ts-r5ye9f.stackblitz.io",target:"_blank",rel:"noopener noreferrer"},U={href:"https://react-ts-mtfabt.stackblitz.io",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://stackblitz.com/edit/react-ts-mtfabt?file=App.tsx",target:"_blank",rel:"noopener noreferrer"},J={href:"https://stackblitz.com/edit/react-ts-79eqiu?file=App.tsx",target:"_blank",rel:"noopener noreferrer"},K={href:"https://stackblitz.com/edit/react-ts-dd2iap?file=App.tsx",target:"_blank",rel:"noopener noreferrer"},X={href:"https://stackblitz.com/edit/react-ts-p31ahp?file=App.tsx",target:"_blank",rel:"noopener noreferrer"},$={href:"https://stackblitz.com/edit/react-ts-telnoq?file=App.tsx",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://teslamotors.github.io/informed/?path=/story/formatting--formatter",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/jaredpalmer/formik",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://teslamotors.github.io/informed/?path=/story/debugging--debug",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://teslamotors.github.io/informed/?path=/story/relevance--relevant-comonent",target:"_blank",rel:"noopener noreferrer"},an={href:"https://teslamotors.github.io/informed/?path=/story/keepstate--keepstate",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://react-hook-form.com/",target:"_blank",rel:"noopener noreferrer"};function en(d,n){const c=i("VPCard"),o=i("router-link"),k=i("SiteInfo"),e=i("VPIcon"),m=i("RouteLink");return h(),g("div",null,[s("h1",C,[s("a",E,[s("span",null,f(d.$frontmatter.title)+" 관련",1)])]),t(c,u(r({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",P,[s("ul",null,[s("li",null,[t(o,{to:"#setting-up-informed"},{default:p(()=>n[0]||(n[0]=[a("Setting up Informed")])),_:1,__:[0]})]),s("li",null,[t(o,{to:"#simple-form-validation-with-messages"},{default:p(()=>n[1]||(n[1]=[a("Simple form validation (with messages)")])),_:1,__:[1]}),s("ul",null,[s("li",null,[t(o,{to:"#simple-required-inputs"},{default:p(()=>n[2]||(n[2]=[a("Simple required inputs")])),_:1,__:[2]})]),s("li",null,[t(o,{to:"#changing-the-required-input-validation-message"},{default:p(()=>n[3]||(n[3]=[a("Changing the required input validation message")])),_:1,__:[3]})])])]),s("li",null,[t(o,{to:"#going-beyond-basic-required-validation"},{default:p(()=>n[4]||(n[4]=[a("Going beyond basic, required validation")])),_:1,__:[4]})]),s("li",null,[t(o,{to:"#schema-validation-with-yup"},{default:p(()=>n[5]||(n[5]=[a("Schema validation with Yup")])),_:1,__:[5]})]),s("li",null,[t(o,{to:"#exploring-other-input-types"},{default:p(()=>n[6]||(n[6]=[a("Exploring other input types")])),_:1,__:[6]})]),s("li",null,[t(o,{to:"#the-debug-component"},{default:p(()=>n[7]||(n[7]=[a("The Debug component")])),_:1,__:[7]})]),s("li",null,[t(o,{to:"#controlling-when-validation-occurs"},{default:p(()=>n[8]||(n[8]=[a("Controlling when validation occurs")])),_:1,__:[8]})]),s("li",null,[t(o,{to:"#conditionally-render-form-fields-by-accessing-the-form-state"},{default:p(()=>n[9]||(n[9]=[a("Conditionally render form fields by accessing the form state")])),_:1,__:[9]})]),s("li",null,[t(o,{to:"#easy-conditionally-rendered-form-fields"},{default:p(()=>n[10]||(n[10]=[a("Easy, conditionally-rendered form fields")])),_:1,__:[10]})]),s("li",null,[t(o,{to:"#easier-data-organization-with-scopes"},{default:p(()=>n[11]||(n[11]=[a("Easier data organization with scopes")])),_:1,__:[11]})]),s("li",null,[t(o,{to:"#adding-input-formatters-and-masks-to-informed"},{default:p(()=>n[12]||(n[12]=[a("Adding input formatters and masks to Informed")])),_:1,__:[12]})]),s("li",null,[t(o,{to:"#why-use-informed"},{default:p(()=>n[13]||(n[13]=[a("Why use Informed?")])),_:1,__:[13]}),s("ul",null,[s("li",null,[t(o,{to:"#informed-vs-formik"},{default:p(()=>n[14]||(n[14]=[a("Informed vs. Formik")])),_:1,__:[14]})]),s("li",null,[t(o,{to:"#informed-vs-react-hook-form"},{default:p(()=>n[15]||(n[15]=[a("Informed vs. React Hook Form")])),_:1,__:[15]})])])]),s("li",null,[t(o,{to:"#conclusion"},{default:p(()=>n[16]||(n[16]=[a("Conclusion")])),_:1,__:[16]})])])]),n[85]||(n[85]=s("hr",null,null,-1)),t(k,{name:"Build powerful React forms with Informed",desc:"Learn how to build forms that are resilient and customizable with Informed, a new competitor to Formik for React form building.",url:"https://blog.logrocket.com/build-powerful-react-forms-with-informed",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/build-powerful-react-forms-with-informed/banner.png"}),n[86]||(n[86]=s("p",null,"Forms are a staple of web development. If you must collect user input on the web and process these on your server, you need a form.",-1)),n[87]||(n[87]=s("figure",null,[s("img",{src:w,alt:"Build powerful React forms with Informed",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Build powerful React forms with Informed")],-1)),s("p",null,[n[20]||(n[20]=a("While there are many libraries for working with forms in React, in this article, I’ll show you how to build powerful forms using the ")),s("a",N,[n[17]||(n[17]=a("Informed library (")),t(e,{icon:"iconfont icon-github"}),n[18]||(n[18]=s("code",null,"teslamotors/informed",-1)),n[19]||(n[19]=a(")"))]),n[21]||(n[21]=a(". Informed is a lightweight framework and utility for building powerful forms in React applications."))]),n[88]||(n[88]=s("p",null,"What sets the Informed library apart from its competitors is it has all the tools you’d expect of a framework: opinionated form UI components and state management, combined with baked-in utilities for formatting, masking, debugging and much more.",-1)),n[89]||(n[89]=s("p",null,"Let’s get started.",-1)),n[90]||(n[90]=s("hr",null,null,-1)),n[91]||(n[91]=s("h2",{id:"setting-up-informed",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#setting-up-informed"},[s("span",null,"Setting up Informed")])],-1)),s("p",null,[n[22]||(n[22]=a("To get started, install the ")),t(e,{icon:"fa-brands fa-npm"}),n[23]||(n[23]=s("code",null,"informed",-1)),n[24]||(n[24]=a(" library in your ")),t(e,{icon:"fa-brands fa-npm"}),n[25]||(n[25]=s("code",null,"react",-1)),n[26]||(n[26]=a(" project via npm:"))]),n[92]||(n[92]=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> <span class="token function">install</span> informed</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>A form, at its core, is mostly made of a parent form component and several children input fields. The input fields can take several forms, e.g., a basic text field, text area, radio input, checkbox input, select input, number input, etc. This is true regardless of the <code>react</code> form library.</p><p>Consider the following basic form:</p>`,3)),s("figure",null,[n[29]||(n[29]=s("img",{src:q,alt:'An <VPIcon icon="iconfont icon-stackblitz"/>example of a basic form',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[28]||(n[28]=a("An ")),s("a",D,[t(e,{icon:"iconfont icon-stackblitz"}),n[27]||(n[27]=a("example of a basic form"))])])]),n[93]||(n[93]=l(`<p>At its core, this is a form with three input elements: two text fields and a <strong>Submit</strong> button.</p><p>To represent this form via <code>informed</code>, we can use its inbuilt components, as shown below:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.tsx"><span>App.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Form<span class="token punctuation">,</span> Input<span class="token punctuation">,</span> Debug <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;informed&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">{</span><span class="token comment">/** 👈 look here **/</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form</span></span></span>
<span class="line">      <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">formState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formState<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Sign in </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Email:<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email@example.com<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Password:<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>**********<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> Submit </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Form</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Note how the props passed to the <code>Input</code> field are similar to standard HTML input attributes, i.e., <code>name</code> and <code>placeholder</code>.</p><p>This <code>Form</code> is relatively simple. When submitted, the form values are logged in the console. An empty object will be logged if you attempt to submit without any input entries:</p>`,5)),s("figure",null,[n[31]||(n[31]=s("img",{src:y,alt:'<VPIcon icon="iconfont icon-stackblitz"/>Logging form state',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[s("a",Y,[t(e,{icon:"iconfont icon-stackblitz"}),n[30]||(n[30]=a("Logging form state"))])])]),n[94]||(n[94]=l(`<div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token punctuation">{</span><span class="token comment">/** ... **/</span><span class="token punctuation">}</span></span>
<span class="line">onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>formState<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formState<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token comment">/** ... **/</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="simple-form-validation-with-messages" tabindex="-1"><a class="header-anchor" href="#simple-form-validation-with-messages"><span>Simple form validation (with messages)</span></a></h2><p>The reason there are so many form libraries isn’t that it’s difficult to write HTML input fields — the hardship lies in managing form state and input validation. In the basic example above, a user could submit empty inputs. This is far from production ready.</p><p>Let’s fix this.</p><h3 id="simple-required-inputs" tabindex="-1"><a class="header-anchor" href="#simple-required-inputs"><span>Simple required inputs</span></a></h3><p>The first layer of validation is to simply make the fields required. Do this by passing the <code>required</code> prop to the <code>informed</code> inputs:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token punctuation">{</span><span class="token comment">/** ... **/</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&lt;</span>Input</span>
<span class="line">  required <span class="token punctuation">{</span><span class="token comment">/** 👈 look here **/</span><span class="token punctuation">}</span></span>
<span class="line">  name<span class="token operator">=</span><span class="token string">&quot;email&quot;</span></span>
<span class="line">  label<span class="token operator">=</span><span class="token string">&quot;Email:&quot;</span></span>
<span class="line">  placeholder<span class="token operator">=</span><span class="token string">&quot;email@example.com&quot;</span></span>
<span class="line"><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span>Input</span>
<span class="line">  required <span class="token punctuation">{</span><span class="token comment">/** 👈 look here **/</span><span class="token punctuation">}</span></span>
<span class="line">  name<span class="token operator">=</span><span class="token string">&quot;password&quot;</span></span>
<span class="line">  label<span class="token operator">=</span><span class="token string">&quot;Password:&quot;</span></span>
<span class="line">  placeholder<span class="token operator">=</span><span class="token string">&quot;**********&quot;</span></span>
<span class="line"><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token comment">/** ... **/</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, when you attempt to submit the form, you’ll see the default <code>This field is required</code> error message displayed below the required input fields.</p>`,9)),s("figure",null,[n[33]||(n[33]=s("img",{src:x,alt:'<VPIcon icon="iconfont icon-stackblitz"/>Default required messages',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[s("a",B,[t(e,{icon:"iconfont icon-stackblitz"}),n[32]||(n[32]=a("Default required messages"))])])]),n[95]||(n[95]=l(`<h3 id="changing-the-required-input-validation-message" tabindex="-1"><a class="header-anchor" href="#changing-the-required-input-validation-message"><span>Changing the required input validation message</span></a></h3><p>In production applications, you’ll want full control over the message shown to your users. The default message, <code>This field is required</code>, may not suffice. You may also want to pass a localized message based on the language of the user.</p><p>To accomplish this, pass an <code>errorMessage</code> prop to the required inputs, as shown below:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token punctuation">{</span><span class="token comment">/** ... **/</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&lt;</span>Input</span>
<span class="line">  required</span>
<span class="line">  name<span class="token operator">=</span><span class="token string">&quot;email&quot;</span></span>
<span class="line">  label<span class="token operator">=</span><span class="token string">&quot;Email:&quot;</span></span>
<span class="line">  placeholder<span class="token operator">=</span><span class="token string">&quot;email@example.com&quot;</span></span>
<span class="line">  errorMessage<span class="token operator">=</span><span class="token string">&quot;Your email is required&quot;</span> <span class="token punctuation">{</span><span class="token comment">/** 👈 look here **/</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span>Input</span>
<span class="line">  required</span>
<span class="line">  name<span class="token operator">=</span><span class="token string">&quot;password&quot;</span></span>
<span class="line">  type<span class="token operator">=</span><span class="token string">&quot;password&quot;</span></span>
<span class="line">  label<span class="token operator">=</span><span class="token string">&quot;Password:&quot;</span></span>
<span class="line">  placeholder<span class="token operator">=</span><span class="token string">&quot;**********&quot;</span></span>
<span class="line">  errorMessage<span class="token operator">=</span><span class="token string">&quot;Your password is required&quot;</span> <span class="token punctuation">{</span><span class="token comment">/** 👈 look here **/</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token comment">/** ... **/</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above code produces the following:</p>`,5)),s("figure",null,[n[35]||(n[35]=s("img",{src:S,alt:'<VPIcon icon="iconfont icon-stackblitz"/>Custom error messages',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[s("a",H,[t(e,{icon:"iconfont icon-stackblitz"}),n[34]||(n[34]=a("Custom error messages"))])])]),n[96]||(n[96]=l(`<hr><h2 id="going-beyond-basic-required-validation" tabindex="-1"><a class="header-anchor" href="#going-beyond-basic-required-validation"><span>Going beyond basic, required validation</span></a></h2><p>Adding the <code>required</code> prop is a great first step. However, in real-world projects, you’ll want to go further than that.</p><p>Our sign-in form could use a bit more validation. For example, how about validating the actual email input for erroneously-entered emails? And what about validating the length of the password input?</p><p>For greater validation flexibility, you can pass a <code>validate</code> function prop to the relevant inputs, as shown below:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.tsx"><span>App.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Form<span class="token punctuation">,</span> Input<span class="token punctuation">,</span> Debug <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;informed&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">validateEmail</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;Please pass a valid email&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">validatePassword</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;Your password must be at least 7 characters long&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form</span></span></span>
<span class="line">      <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">formState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formState<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Sign in </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      &lt;Input</span>
<span class="line">        required</span>
<span class="line">        name=&quot;email&quot;</span>
<span class="line">        label=&quot;Email:&quot;</span>
<span class="line">        validate=</span><span class="token punctuation">{</span>validateEmail<span class="token punctuation">}</span><span class="token plain-text"> </span><span class="token punctuation">{</span><span class="token comment">/** 👈 look here **/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        placeholder=&quot;email@example.com&quot;</span>
<span class="line">        errorMessage=&quot;Your email is required&quot;</span>
<span class="line">      /&gt;</span>
<span class="line">      &lt;Input</span>
<span class="line">        required</span>
<span class="line">        name=&quot;password&quot;</span>
<span class="line">                type=&quot;password&quot;</span>
<span class="line">        label=&quot;Password:&quot;</span>
<span class="line">        placeholder=&quot;**********&quot;</span>
<span class="line">        validate=</span><span class="token punctuation">{</span>validatePassword<span class="token punctuation">}</span><span class="token plain-text"> </span><span class="token punctuation">{</span><span class="token comment">/** 👈 look here **/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        errorMessage=&quot;Your password is required&quot;</span>
<span class="line">      /&gt;</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> Submit </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Form</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now, the default <code>errorMessage</code> prop will always be shown when the basic <code>required</code> validation kicks in. However, once the inputs are filled and submitted, the <code>validate</code> function kicks in and the returned string is shown as the input error message:</p>`,7)),s("figure",null,[n[37]||(n[37]=s("img",{src:I,alt:'<VPIcon icon="iconfont icon-stackblitz"/>Custom validator functions',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[s("a",M,[t(e,{icon:"iconfont icon-stackblitz"}),n[36]||(n[36]=a("Custom validator functions"))])])]),n[97]||(n[97]=s("hr",null,null,-1)),n[98]||(n[98]=s("h2",{id:"schema-validation-with-yup",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#schema-validation-with-yup"},[s("span",null,"Schema validation with Yup")])],-1)),s("p",null,[n[40]||(n[40]=a("In practice, most people use robust schema validation libraries like ")),s("a",V,[t(e,{icon:"iconfont icon-github"}),n[38]||(n[38]=s("code",null,"jquense/yup",-1))]),n[41]||(n[41]=a(". Informed lets you ")),t(m,{to:"/blog.logrocket.com/comparing-schema-validation-libraries-zod-vs-yup.html"},{default:p(()=>n[39]||(n[39]=[s("strong",null,"use Yup",-1)])),_:1,__:[39]}),n[42]||(n[42]=a(" as well."))]),s("p",null,[n[44]||(n[44]=a("Let’s ")),s("a",L,[t(e,{icon:"iconfont icon-stackblitz"}),n[43]||(n[43]=a("rewrite our existing validation"))]),n[45]||(n[45]=a(" to use Yup, as shown below:"))]),n[99]||(n[99]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.tsx"><span>App.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Yup <span class="token keyword">from</span> <span class="token string">&#39;yup&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Form<span class="token punctuation">,</span> Input <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;informed&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span><span class="token comment">/** 👇 look here **/</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> validationSchema <span class="token operator">=</span> Yup<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  email<span class="token operator">:</span> Yup<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token string">&#39;Please pass a valid email&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token string">&#39;Your email is required&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  password<span class="token operator">:</span> Yup<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token string">&#39;Your password is required&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&#39;Your password must be at least 7 characters long&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>Form</span>
<span class="line">      yupSchema<span class="token operator">=</span><span class="token punctuation">{</span>validationSchema<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token comment">/** 👈 look here **/</span><span class="token punctuation">}</span></span>
<span class="line">      onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>formState<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formState<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&gt;</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Sign in </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Email:<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email@example.com<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span></span>
<span class="line">        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Password:<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>**********<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> Submit </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Form</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>What’s important about the above is that we pass the <code>yupSchema</code> prop to the <code>Form</code> component, and then define your validation schema as you normally would.</p><hr><h2 id="exploring-other-input-types" tabindex="-1"><a class="header-anchor" href="#exploring-other-input-types"><span>Exploring other input types</span></a></h2><p>How does Informed deal with other form input types such as text areas, radio inputs, and select inputs? The usage is quite similar to regular inputs: you import the associated informed component and pass it the relevant props.</p><p>Consider the example below:</p>`,6)),s("figure",null,[n[47]||(n[47]=s("img",{src:A,alt:'<VPIcon icon="iconfont icon-stackblitz"/>Other form inputs',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[s("a",W,[t(e,{icon:"iconfont icon-stackblitz"}),n[46]||(n[46]=a("Other form inputs"))])])]),n[100]||(n[100]=l(`<p>The form above leverages a text area, radio group, checkbox, and select inputs. With Informed, using these is as simple as importing the components (capitalize the names) and passing the same props you would the HTML element, with the addition of a <code>label</code> prop for accessibility.</p><p>Here’s how:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.tsx"><span>App.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span></span>
<span class="line">  Form<span class="token punctuation">,</span></span>
<span class="line">  Input<span class="token punctuation">,</span></span>
<span class="line">  TextArea<span class="token punctuation">,</span></span>
<span class="line">  Checkbox<span class="token punctuation">,</span></span>
<span class="line">  Select<span class="token punctuation">,</span></span>
<span class="line">  Option<span class="token punctuation">,</span></span>
<span class="line">  Radio<span class="token punctuation">,</span></span>
<span class="line">  RadioGroup<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;informed&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form</span></span></span>
<span class="line">      <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">formState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formState<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Sign up </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span></span>
<span class="line">        <span class="token attr-name">required</span></span>
<span class="line">        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Name:<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email@example.com<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      &lt;TextArea </span><span class="token punctuation">{</span><span class="token comment">/** 👈 look here **/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        required</span>
<span class="line">        name=&quot;bio&quot;</span>
<span class="line">        label=&quot;Bio:&quot;</span>
<span class="line">        placeholder=&quot;I am a teacher and a developer ...&quot;</span>
<span class="line">      /&gt;</span>
<span class="line"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RadioGroup</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>relationship<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> </span><span class="token punctuation">{</span><span class="token comment">/** 👈 look here **/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Radio</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>single<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Single<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Radio</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>married<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>married<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">RadioGroup</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/** 👇 look here **/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Checkbox</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>newsletter<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Subscribe to our newsletter?<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/** 👇 look here **/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Select</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Relationship status:<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Option</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          Select One...</span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Option</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Option</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>single<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Single</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Option</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Option</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>relationship<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Relationship</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Option</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Option</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>complicated<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Complicated</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Option</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Select</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> Submit </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Form</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="the-debug-component" tabindex="-1"><a class="header-anchor" href="#the-debug-component"><span>The <code>Debug</code> component</span></a></h2><p>Debugging is a vital part of building real-world software. With <code>Informed</code>, instead of manually rendering the form values or battling console logs, you can use the <code>Debug</code> component to view the current form state.</p><p>Consider the use of <code>Debug</code> in the last example:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>Debug<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;informed&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">...</span> </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Debug</span></span> <span class="token punctuation">/&gt;</span></span> </span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All you have to do is render the <code>Debug</code> component, and you get a visual representation of the current synced state of the entire form.</p>`,9)),s("figure",null,[n[51]||(n[51]=s("img",{src:j,alt:'<VPIcon icon="iconfont icon-stackblitz"/>The  component',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[s("a",G,[t(e,{icon:"iconfont icon-stackblitz"}),n[48]||(n[48]=a("The ")),n[49]||(n[49]=s("code",null,"debug",-1)),n[50]||(n[50]=a(" component"))])])]),n[101]||(n[101]=l(`<p>To view the state of a single form field, use <code>DebugField</code> with the <code>name</code> of the field in question, as shown below:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>DebugField<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;informed&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">...</span> </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DebugField</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>gender<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> </span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="controlling-when-validation-occurs" tabindex="-1"><a class="header-anchor" href="#controlling-when-validation-occurs"><span>Controlling when validation occurs</span></a></h2><p>Having control over when you trigger form validation is powerful. For example, you may want to show errors as soon as the form is mounted in order to validate the initial values received from a server, or the defaults passed when initializing an SDK.</p><p>To validate as soon as the form mounts, pass the <code>validateOnMount</code> prop to the <code>Form</code> component:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form</span></span> <span class="token attr-name">validateOnMount</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you went ahead to do this, validation will occur on mount, but the errors will not show to the user.</p><p>You can control when to show the validation error to the user with the <code>showErrorIfError</code>, <code>showErrorIfTouched</code> or <code>showErrorIfDirty</code> prop. (<code>showErrorIfTouched</code> is the default value here.)</p><p>To validate the form and show errors immediately on mount, do this:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form</span></span> <span class="token attr-name">validateOnMount</span> <span class="token attr-name">showErrorIfError</span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,11)),s("p",null,[n[53]||(n[53]=a("And now, errors will be ")),s("a",U,[t(e,{icon:"iconfont icon-stackblitz"}),n[52]||(n[52]=a("displayed as soon as the form is mounted"))]),n[54]||(n[54]=a(" (after validation):"))]),s("figure",null,[n[56]||(n[56]=s("img",{src:z,alt:'<VPIcon icon="iconfont icon-stackblitz"/>Showing errors on mount',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[s("a",Z,[t(e,{icon:"iconfont icon-stackblitz"}),n[55]||(n[55]=a("Showing errors on mount"))])])]),n[102]||(n[102]=l(`<p>By default, validation will occur when a field is blurred, but you can change this behavior. To further control when your field validation occurs, use the <code>validateOn</code> prop with any of these values:</p><ul><li><code>change</code></li><li><code>blur</code></li><li><code>change-blur</code></li><li><code>change-submit</code></li><li><code>blur-submit</code></li><li><code>submit</code></li></ul><p>You can also use the <code>change</code> value for some real-time field validation, like so:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.tsx"><span>App.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token punctuation">{</span><span class="token comment">/** ... **/</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form</span></span></span>
<span class="line">      <span class="token attr-name">showErrorIfError</span></span>
<span class="line">      <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">formState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formState<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">      &lt;TextArea</span>
<span class="line">        name=&quot;bio&quot;</span>
<span class="line">        label=&quot;Bio:&quot;</span>
<span class="line">        validateOn=&quot;change&quot; </span><span class="token punctuation">{</span><span class="token comment">/** 👈 look here **/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        placeholder=&quot;I am a teacher and a developer ...&quot;</span>
<span class="line">      /&gt;</span>
<span class="line"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Form</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Note that <code>showErrorIfError</code> is used to display the error immediately after validation — not after the input field is blurred. The <code>validateOn</code> prop is also passed to the <code>TextArea</code> component and a <code>validate</code> function is provided.</p>`,5)),s("p",null,[n[58]||(n[58]=a("This will simulate ")),s("a",J,[t(e,{icon:"iconfont icon-stackblitz"}),n[57]||(n[57]=a("real-time validation,"))]),n[59]||(n[59]=a(" with the error shown to the user as it is encountered."))]),n[103]||(n[103]=l(`<hr><h2 id="conditionally-render-form-fields-by-accessing-the-form-state" tabindex="-1"><a class="header-anchor" href="#conditionally-render-form-fields-by-accessing-the-form-state"><span>Conditionally render form fields by accessing the form state</span></a></h2><p>At first glance, conditionally rendering a form field isn’t a difficult task. You just have to follow the same principles of <code>JSX</code> you’re already familiar with, e.g.:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ConditionallyRenderThis</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>However, when the conditional render depends on the internal state of your form, you need access to the form state.</p><p>There are several ways to do this with <code>Informed</code>. Perhaps the most flexible option is to grab the state of the entire form using the <code>useFormState</code> Hook, and then conditionally render as you normally would:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.tsx"><span>App.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">SpouseName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> formState <span class="token operator">=</span> <span class="token function">useFormState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    formState<span class="token punctuation">.</span>values<span class="token operator">?.</span>relationship <span class="token operator">===</span> <span class="token string">&#39;married&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>spouse<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>🚨 Spouse Name:<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form</span></span></span>
<span class="line">      <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">formState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formState<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">     </span><span class="token punctuation">{</span><span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SpouseName</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Form</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>And now, when a user selects the <strong>Married</strong> option, we will go ahead and request their spouse’s name.</p>`,8)),s("figure",null,[n[61]||(n[61]=s("img",{src:R,alt:'<VPIcon icon="iconfont icon-stackblitz"/>Conditionally display an input field',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[s("a",K,[t(e,{icon:"iconfont icon-stackblitz"}),n[60]||(n[60]=a("Conditionally display an input field"))])])]),n[104]||(n[104]=l(`<p>It’s important to note that the <code>useFormState</code> Hook is used in a separate child component rendered within the <code>Form</code>. If you went ahead to use the <code>useFormState</code> Hook in the parent component rendering the <code>Form</code>, this will not work.</p><p><code>formState.values</code> will always be <code>undefined</code> here. You must use the Hook within the <code>Form</code> component to internally gain access to the form context:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.tsx"><span>App.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> formState <span class="token operator">=</span> <span class="token function">useFormState</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form</span></span></span>
<span class="line">      <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">formState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formState<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">     </span><span class="token punctuation">{</span><span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>formState<span class="token punctuation">.</span>values<span class="token operator">?.</span>relationship <span class="token operator">===</span> <span class="token string">&#39;married&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>spouse<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>🚨 Spouse Name:<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">      <span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">{</span><span class="token comment">/* ... */</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Form</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="easy-conditionally-rendered-form-fields" tabindex="-1"><a class="header-anchor" href="#easy-conditionally-rendered-form-fields"><span>Easy, conditionally-rendered form fields</span></a></h2><p>Informed also exports a <code>Relevant</code> component to simplify conditional renders. For example, we could rework our previous example to use the <code>Relevant</code> component, as shown below:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form</span></span></span>
<span class="line">    <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">formState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formState<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">   <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">   </span><span class="token punctuation">{</span><span class="token comment">/** ... */</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Relevant</span></span></span>
<span class="line">        <span class="token attr-name">when</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> formState <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> formState<span class="token punctuation">.</span>values<span class="token operator">?.</span>gender <span class="token operator">===</span> <span class="token string">&#39;non_binary&#39;</span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>spouse<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>🚨 Spouse Name:<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Relevant</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">   </span><span class="token punctuation">{</span><span class="token comment">/** ... */</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> Submit </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Form</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The condition for rendering the child component is passed to the <code>when</code> function prop, which receives the form state as an argument and returns a <code>boolean</code>.</p><p>If this evaluates to <code>true</code>, the children components are rendered. In this case: <code>&lt;Input name=&quot;spouse&quot; label=&quot;🚨 Spouse Name:&quot; /&gt;</code>.</p><p>Alternatively, you can also apply conditional rendering at the field level by passing a <code>relevant</code> prop to the required field. Consider the example below:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token punctuation">{</span><span class="token comment">/** ... **/</span><span class="token punctuation">}</span></span>
<span class="line"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Select</span></span></span>
<span class="line">    <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>date<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>🚨 Shall we help you set up a date?<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">relevant</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> formState <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">      formState<span class="token punctuation">.</span>values<span class="token operator">?.</span>relationship <span class="token operator">===</span> <span class="token string">&#39;single&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span></span>
<span class="line">  <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Option</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      Select a date option</span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Option</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Option</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>yes<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Yes</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Option</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Option</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>no<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">No</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Option</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Select</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span><span class="token comment">/** ... **/</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, whenever the user selects their relationship status as <code>single</code>, we’ll go ahead and render a <code>select</code> input asking whether to set them up on a date or not.</p>`,12)),s("figure",null,[n[65]||(n[65]=s("img",{src:F,alt:'<VPIcon icon="iconfont icon-stackblitz"/>Conditionally rendering a field with the  prop',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[s("a",X,[t(e,{icon:"iconfont icon-stackblitz"}),n[62]||(n[62]=a("Conditionally rendering a field with the ")),n[63]||(n[63]=s("code",null,"relevant",-1)),n[64]||(n[64]=a(" prop"))])])]),n[105]||(n[105]=l(`<p>Instead of using the <code>Relevant</code> component, we’re leveraging the <code>relevant</code> prop here. It’s got a similar API to the <code>when</code> prop passed to <code>Relevant</code>. The value of the prop is a function that receives the form state, and the expected return value is a <code>boolean</code>.</p><hr><h2 id="easier-data-organization-with-scopes" tabindex="-1"><a class="header-anchor" href="#easier-data-organization-with-scopes"><span>Easier data organization with scopes</span></a></h2><p>So far, we’ve only worked with a flat-form state structure. For example, our form, when filled out, will have a state similar to:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Amadeus Mozart&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;bio&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Senior software engineer&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;relationship&quot;</span><span class="token operator">:</span> <span class="token string">&quot;single&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;no&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;newsletter&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;single&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, with complex forms, you might want to nest related values within the form state.<br> For example, we could instead have the following state representation:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Amadeus Mozart&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;bio&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Senior software engineer&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;bond&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;relationship&quot;</span><span class="token operator">:</span> <span class="token string">&quot;single&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;single&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;no&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;marketing&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;newsletter&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note the nested <code>bond</code> and <code>marketing</code> fields. To achieve this, <code>Informed</code> exposes a <code>Scope</code> component for grouping related form fields. All we need to do is wrap the child fields in a <code>Scope</code> component, with a <code>scope</code> prop pointing to the name of the eventual nested parent.</p><p>Here’s an example:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.tsx"><span>App.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form</span></span></span>
<span class="line">      <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">formState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formState<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/** ... **/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">     </span><span class="token punctuation">{</span><span class="token comment">/** Look here 👇 **/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Scope</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bond<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RadioGroup</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>relationship<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Radio</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>single<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Single<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Radio</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>married<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>married<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">RadioGroup</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Relevant</span></span></span>
<span class="line">          <span class="token attr-name">when</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> formState <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">            formState<span class="token punctuation">.</span>values<span class="token operator">?.</span>bond<span class="token operator">?.</span>relationship <span class="token operator">===</span> <span class="token string">&#39;married&#39;</span></span>
<span class="line">          <span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>spouse<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>🚨 Spouse Name:<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Relevant</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Select</span></span></span>
<span class="line">          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>date<span class="token punctuation">&quot;</span></span></span>
<span class="line">          <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>🚨 Shall we help you set up a date?<span class="token punctuation">&quot;</span></span></span>
<span class="line">          <span class="token attr-name">relevant</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> formState <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">            formState<span class="token punctuation">.</span>values<span class="token operator">?.</span>bond<span class="token operator">?.</span>relationship <span class="token operator">===</span> <span class="token string">&#39;single&#39;</span></span>
<span class="line">          <span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Option</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            Select a date option</span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Option</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Option</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>yes<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Yes</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Option</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Option</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>no<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">No</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Option</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Select</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Select</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Relationship status:<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Option</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            Select One...</span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Option</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Option</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>single<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Single</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Option</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Option</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>relationship<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Relationship</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Option</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Option</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>complicated<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Complicated</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Option</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Select</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Scope</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/** Look here 👇 **/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Scope</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>marketing<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Checkbox</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>newsletter<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Subscribe to our newsletter?<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Scope</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> Submit </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Form</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>It’s important to note that when you use the <code>Scope</code> component, you must remember to use the new nested hierarchy wherever you access the form state.</p><p>For example, consider the <code>relevant</code> prop logic:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre class="has-diff language-tsx"><code><span class="line diff remove"><span class="token comment">// before</span></span>
<span class="line diff remove">formState<span class="token punctuation">.</span>values<span class="token operator">?.</span>relationship <span class="token operator">===</span> <span class="token string">&#39;single&#39;</span> </span>
<span class="line diff add"><span class="token comment">// now: use the nested &quot;bond&quot; scope</span></span>
<span class="line diff add">formState<span class="token punctuation">.</span>values<span class="token operator">?.</span>bond<span class="token operator">?.</span>relationship <span class="token operator">===</span> <span class="token string">&#39;single&#39;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div><hr><h2 id="adding-input-formatters-and-masks-to-informed" tabindex="-1"><a class="header-anchor" href="#adding-input-formatters-and-masks-to-informed"><span>Adding input formatters and masks to Informed</span></a></h2><p>If you’ve tried shipping production input formatters or masks without the help of a library, then you know they can get unwieldy quickly. With <code>Informed</code>, you can handle this using either character strings or good old regex.</p><p>Consider the following new requirement for our form application: if the user is single and wishes to be set up for a date, go ahead and request their phone number to make it happen.</p><p>Assuming the application is only available in the US, let’s go ahead and provide some input formatting for the user’s phone number:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token comment">/* ... */</span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span></span>
<span class="line">  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tel<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tel<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Phone number<span class="token punctuation">&quot;</span></span></span>
<span class="line">  <span class="token attr-name">relevant</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> formState <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    formState<span class="token punctuation">.</span>values<span class="token operator">?.</span>bond<span class="token operator">?.</span>relationship <span class="token operator">===</span> <span class="token string">&#39;single&#39;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">    formState<span class="token punctuation">.</span>values<span class="token operator">?.</span>bond<span class="token operator">?.</span>date <span class="token operator">===</span> <span class="token string">&#39;yes&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span></span></span>
<span class="line"><span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Using the <code>relevant</code> prop, the phone number input will be displayed when the user’s relationship status is set to <code>single</code>, and they’d like a date.</p>`,20)),s("figure",null,[n[67]||(n[67]=s("img",{src:T,alt:'<VPIcon icon="iconfont icon-stackblitz"/>Conditionally displaying a telephone input',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[s("a",$,[t(e,{icon:"iconfont icon-stackblitz"}),n[66]||(n[66]=a("Conditionally displaying a telephone input"))])])]),n[106]||(n[106]=l(`<p>Now, we may go ahead and provide a <code>formatter</code> prop to this phone number input, as shown below:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token operator">&lt;</span>Input</span>
<span class="line">  <span class="token punctuation">{</span><span class="token comment">/** ... **/</span><span class="token punctuation">}</span></span>
<span class="line">  formatter<span class="token operator">=</span><span class="token string">&quot;+1 ###-###-####&quot;</span></span>
<span class="line">  <span class="token punctuation">{</span><span class="token comment">/** ... **/</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will format the user input to <code>+1 ###-###-####</code>, where <code>#</code> represents valid digits. If you inspect the form state, you’ll see the phone number is stored in the same format.</p><p>If you’d rather store the raw user input in the form state, go ahead and provide a <code>parser</code> function prop to strip away the formatting, as shown below:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token operator">&lt;</span>Input</span>
<span class="line">  <span class="token punctuation">{</span><span class="token comment">/** ... **/</span><span class="token punctuation">}</span></span>
<span class="line">  formatter<span class="token operator">=</span><span class="token string">&quot;+1 ###-###-####&quot;</span></span>
<span class="line">  parser<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;+1 &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">{</span><span class="token comment">/** ... **/</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The provided <code>parser</code> function takes a value and replaces the telephone code (<code>+1</code>) and the dashes (<code>-</code>).</p>`,6)),s("p",null,[n[69]||(n[69]=a("There are obviously a lot of other use cases for input formatting and masking. I recommend giving the ")),s("a",Q,[t(e,{icon:"fas fa-globe"}),n[68]||(n[68]=a("official docs"))]),n[70]||(n[70]=a(" a read."))]),n[107]||(n[107]=s("hr",null,null,-1)),n[108]||(n[108]=s("h2",{id:"why-use-informed",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#why-use-informed"},[s("span",null,"Why use Informed?")])],-1)),n[109]||(n[109]=s("p",null,[a("Now that you’ve got an overview of how Informed works, let’s discuss why you should consider using "),s("code",null,"Informed"),a(" for your next project.")],-1)),n[110]||(n[110]=s("h3",{id:"informed-vs-formik",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#informed-vs-formik"},[s("span",null,"Informed vs. Formik")])],-1)),s("p",null,[s("a",_,[t(e,{icon:"iconfont icon-github"}),n[71]||(n[71]=s("code",null,"jaredpalmer/formik",-1))]),n[72]||(n[72]=a(" is arguably the most popular open source form library for React and React Native. So, how does Informed stack up against the juggernaut?"))]),n[111]||(n[111]=s("p",null,"Most of the beloved features of Formik work identically in Informed. They both have declarative APIs, so you can focus on your application business logic. They also both follow the same React mental model you’re used to — i.e., no fancy observers or subscriptions under the hood, just good ol’ React state and props. They also don’t tie you to any particular state management library out-of-the-box. As such, they are both adaptable to use with any state management library, like Redux.",-1)),n[112]||(n[112]=s("p",null,"Where Informed begins to shine is the additional utilities it provides over Formik. Informed provides:",-1)),s("ul",null,[n[82]||(n[82]=s("li",null,"Explicit provisions for formatting and masking input fields",-1)),s("li",null,[n[75]||(n[75]=a("The special ")),s("a",nn,[t(e,{icon:"fas fa-globe"}),n[73]||(n[73]=s("code",null,"Debug",-1)),n[74]||(n[74]=a(" component"))])]),s("li",null,[n[79]||(n[79]=a("More options for dynamic forms using the ")),s("a",sn,[t(e,{icon:"fas fa-globe"}),n[76]||(n[76]=s("code",null,"Relevant",-1)),n[77]||(n[77]=a(" component"))]),n[80]||(n[80]=a(" and additional utilities, such as ")),s("a",an,[t(e,{icon:"fas fa-globe"}),n[78]||(n[78]=a("KeepState"))]),n[81]||(n[81]=a(", which lets you keep the state of a field even when it gets unmounted (no longer rendered on screen)"))])]),n[113]||(n[113]=s("p",null,"Informed goes beyond the basic needs and provides utilities to solve commonly used problems you’re likely to encounter in the real world.",-1)),n[114]||(n[114]=s("p",null,[a("In my opinion, "),s("code",null,"Informed"),a(" stacks up well against Formik.")],-1)),n[115]||(n[115]=s("h3",{id:"informed-vs-react-hook-form",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#informed-vs-react-hook-form"},[s("span",null,"Informed vs. React Hook Form")])],-1)),s("p",null,[s("a",tn,[t(e,{icon:"fa-brands fa-react"}),n[83]||(n[83]=a("React Hook Form"))]),n[84]||(n[84]=a(" is an excellent alternative to building forms in React. It’s arguably the second most popular React form library. As with Formik, the provision of form utilities is what sets Informed apart here."))]),n[116]||(n[116]=s("p",null,"However, it is worth mentioning that React Hook Form’s standout feature is that it does not rely on controlled form inputs, which arguably gives it performance gains over a lot of other form libraries (Informed inclusive).",-1)),n[117]||(n[117]=s("hr",null,null,-1)),n[118]||(n[118]=s("h2",{id:"conclusion",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#conclusion"},[s("span",null,"Conclusion")])],-1)),n[119]||(n[119]=s("p",null,"Informed, while still a young library, is full of potential. If you find yourself starting a new project or wanting to tinker with a new form library, give Informed a shot.",-1)),n[120]||(n[120]=s("p",null,"A caveat I’ve encountered working with Informed is there are obvious updates to be made to the documentation and exported types, but that’s the beauty of a new project with potential. You can contribute to its development.",-1)),n[121]||(n[121]=s("p",null,"Cheers, and happy form building!",-1)),b(" TODO: add ARTICLE CARD "),t(c,u(r({title:"Build powerful React forms with Informed",desc:"Learn how to build forms that are resilient and customizable with Informed, a new competitor to Formik for React form building.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-powerful-react-forms-with-informed.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const ln=v(O,[["render",en]]),cn=JSON.parse('{"path":"/blog.logrocket.com/build-powerful-react-forms-with-informed.html","title":"Build powerful React forms with Informed","lang":"en-US","frontmatter":{"lang":"en-US","title":"Build powerful React forms with Informed","description":"Article(s) > Build powerful React forms with Informed","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Build powerful React forms with Informed\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-powerful-react-forms-with-informed/banner.png\\",\\"https://stackblitz.com/edit/react-ts-jqjc8h?file=App.tsx\\",\\"https://stackblitz.com/edit/react-ts-jqjc8h?file=App.tsx\\",\\"https://stackblitz.com/edit/react-ts-pzay2d?file=App.tsx\\",\\"https://stackblitz.com/edit/react-ts-pzsrhk?file=App.tsx\\",\\"https://stackblitz.com/edit/react-ts-bjokq2?file=App.tsx\\",\\"https://stackblitz.com/edit/react-ts-hrzu3i?file=App.tsx\\",\\"https://react-ts-r5ye9f.stackblitz.io\\",\\"https://stackblitz.com/edit/react-ts-mtfabt?file=App.tsx\\",\\"https://stackblitz.com/edit/react-ts-dd2iap?file=App.tsx\\",\\"https://stackblitz.com/edit/react-ts-p31ahp?file=App.tsx\\",\\"https://stackblitz.com/edit/react-ts-telnoq?file=App.tsx\\"],\\"datePublished\\":\\"2023-02-09T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ohans Emmanuel\\",\\"url\\":\\"https://blog.logrocket.com/author/ohansemmanuel/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-powerful-react-forms-with-informed.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Build powerful React forms with Informed"}],["meta",{"property":"og:description","content":"Article(s) > Build powerful React forms with Informed"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-powerful-react-forms-with-informed/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-powerful-react-forms-with-informed/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Build powerful React forms with Informed"}],["meta",{"property":"article:author","content":"Ohans Emmanuel"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-02-09T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Build powerful React forms with Informed"},{"property":"og:description","content":"Build powerful React forms with Informed"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-powerful-react-forms-with-informed.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2023-02-09T00:00:00.000Z","isOriginal":false,"author":[{"name":"Ohans Emmanuel","url":"https://blog.logrocket.com/author/ohansemmanuel/"}],"cover":"/assets/image/blog.logrocket.com/build-powerful-react-forms-with-informed/banner.png"},"git":{},"readingTime":{"minutes":12.66,"words":3799},"filePathRelative":"blog.logrocket.com/build-powerful-react-forms-with-informed.md","copyright":{"author":"Ohans Emmanuel"}}');export{ln as comp,cn as data};
