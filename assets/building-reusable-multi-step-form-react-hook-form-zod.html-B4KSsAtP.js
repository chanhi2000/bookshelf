import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as t,b as l,a as b,t as h,n as r,g as d,w as e,e as a,r as i,o as f}from"./app-BVguHYKu.js";const y="/bookshelf/assets/image/blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod/banner.png",w="/bookshelf/assets/image/blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod/multi-step-form-component.webp",x="/bookshelf/assets/image/blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod/demonstrating-continue-button-form.webp",S="/bookshelf/assets/image/blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod/progress-indicator-form.png",F={},j={id:"frontmatter-title-관련",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-관련"},I={class:"table-of-contents"},T={href:"https://github.com/Chinwike1/multi-step-form",target:"_blank",rel:"noopener noreferrer"},q={href:"https://stepped-form.netlify.app/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://ui.shadcn.com",target:"_blank",rel:"noopener noreferrer"},z={href:"https://mantine.dev/hooks/use-local-storage/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://motion.dev/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://ui.shadcn.com/docs/installation/vite",target:"_blank",rel:"noopener noreferrer"},B={href:"https://v0.dev/chat/community/progress-steps-vByiSdMeSVk",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/Chinwike1/multi-step-form",target:"_blank",rel:"noopener noreferrer"};function H(k,n){const u=i("VPCard"),p=i("router-link"),m=i("SiteInfo"),o=i("VPIcon"),c=i("RouteLink");return f(),g("div",null,[s("h1",j,[s("a",C,[s("span",null,h(k.$frontmatter.title)+" 관련",1)])]),t(u,r(d({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",I,[s("ul",null,[s("li",null,[t(p,{to:"#setting-up-your-development-environment"},{default:e(()=>n[0]||(n[0]=[a("Setting up your development environment")])),_:1,__:[0]}),s("ul",null,[s("li",null,[t(p,{to:"#installing-tailwind-and-shadcn"},{default:e(()=>n[1]||(n[1]=[a("Installing Tailwind and shadcn")])),_:1,__:[1]})])])]),s("li",null,[t(p,{to:"#creating-the-formstep-type-schema-and-data"},{default:e(()=>n[2]||(n[2]=[a("Creating the FormStep type, schema, and data")])),_:1,__:[2]})]),s("li",null,[t(p,{to:"#creating-the-steppedform-component"},{default:e(()=>n[3]||(n[3]=[a("Creating the SteppedForm component")])),_:1,__:[3]}),s("ul",null,[s("li",null,[t(p,{to:"#why-context"},{default:e(()=>n[4]||(n[4]=[a("Why Context?")])),_:1,__:[4]})])])]),s("li",null,[t(p,{to:"#building-the-steppedform-component"},{default:e(()=>n[5]||(n[5]=[a("Building the SteppedForm component")])),_:1,__:[5]}),s("ul",null,[s("li",null,[t(p,{to:"#_1-formprovider-and-multi-step-context"},{default:e(()=>n[6]||(n[6]=[a("1. FormProvider and multi-step context")])),_:1,__:[6]})]),s("li",null,[t(p,{to:"#_2-parent-formelement"},{default:e(()=>n[7]||(n[7]=[a("2. Parent formelement")])),_:1,__:[7]})]),s("li",null,[t(p,{to:"#_3-step-rendering-and-form-initialization"},{default:e(()=>n[8]||(n[8]=[a("3. Step rendering and form initialization")])),_:1,__:[8]})]),s("li",null,[t(p,{to:"#_4-form-submission"},{default:e(()=>n[9]||(n[9]=[a("4. Form submission")])),_:1,__:[9]})]),s("li",null,[t(p,{to:"#_5-navigation-functions"},{default:e(()=>n[10]||(n[10]=[a("5. Navigation functions")])),_:1,__:[10]})]),s("li",null,[t(p,{to:"#validating-input-in-the-nextstepfunction"},{default:e(()=>n[11]||(n[11]=[a("Validating input in the nextStepfunction")])),_:1,__:[11]})])])]),s("li",null,[t(p,{to:"#controller-buttons-previous-and-next"},{default:e(()=>n[12]||(n[12]=[a("Controller buttons: Previous and next")])),_:1,__:[12]})]),s("li",null,[t(p,{to:"#creating-individual-steps"},{default:e(()=>n[13]||(n[13]=[a("Creating individual steps")])),_:1,__:[13]})]),s("li",null,[t(p,{to:"#implementing-a-form-progress-indicator"},{default:e(()=>n[14]||(n[14]=[a("Implementing a form progress indicator")])),_:1,__:[14]})]),s("li",null,[t(p,{to:"#saving-form-state-to-localstorage"},{default:e(()=>n[15]||(n[15]=[a("Saving form state to localStorage")])),_:1,__:[15]}),s("ul",null,[s("li",null,[t(p,{to:"#initialize-localstoragestate"},{default:e(()=>n[16]||(n[16]=[a("Initialize localStoragestate")])),_:1,__:[16]})]),s("li",null,[t(p,{to:"#saving-form-state"},{default:e(()=>n[17]||(n[17]=[a("Saving form state")])),_:1,__:[17]})]),s("li",null,[t(p,{to:"#clearing-form-state"},{default:e(()=>n[18]||(n[18]=[a("Clearing form state")])),_:1,__:[18]})])])]),s("li",null,[t(p,{to:"#conclusion"},{default:e(()=>n[19]||(n[19]=[a("Conclusion")])),_:1,__:[19]})])])]),n[87]||(n[87]=s("hr",null,null,-1)),t(m,{name:"Building a reusable multi-step form with React Hook Form and Zod",desc:"Use React Hook Form and Zod to build a multi-step form component in React that handles input validation, tracks form progress, and more.",url:"https://blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod/banner.png"}),n[88]||(n[88]=s("p",null,"Long, complex forms can easily overwhelm your users, leading to frustration and potential abandonment. In the apps you build, you may continuously find yourself needing to collect a significant amount of information through forms — whether for onboarding, checkout, or survey processes.",-1)),n[89]||(n[89]=s("figure",null,[s("img",{src:y,alt:"Building Multi-Step Forms With React Hook Form And Zod",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Building Multi-Step Forms With React Hook Form And Zod")],-1)),n[90]||(n[90]=s("p",null,"After making this once, I decided to create a reusable multi-step form component that I can reuse in all my React projects.",-1)),n[91]||(n[91]=s("p",null,"In this guide, I’ll walk through the process of building a reusable multi-step form component in React using React Hook Form and Zod for validation. This component will handle input validation, track form progress, and persist the form data in storage to prevent data loss and provide a smooth user experience.",-1)),s("p",null,[n[24]||(n[24]=a("You can download the source code from the ")),s("a",T,[n[20]||(n[20]=a("project’s repository (")),t(o,{icon:"iconfont icon-github"}),n[21]||(n[21]=s("code",null,"Chinwike1/multi-step-form",-1)),n[22]||(n[22]=a(")"))]),n[25]||(n[25]=a(" or view the ")),s("a",q,[t(o,{icon:"fas fa-globe"}),n[23]||(n[23]=a("live demo here"))]),n[26]||(n[26]=a(". Here’s a look at what we’ll be creating:"))]),n[92]||(n[92]=l('<figure><img src="'+w+'" alt="Multi-Step Form Component Demo" tabindex="0" loading="lazy"><figcaption>Multi-Step Form Component Demo</figcaption></figure><div class="hint-container note"><p class="hint-container-title">Prerequisites</p><p>To follow along, you should have:</p><ul><li>An understanding of React state patterns and management, and other beginner React concepts</li><li>An understanding of <code>React.Context</code></li><li>Some experience with the React Hook Form library</li><li>Node.js installed to use the node package manager (npm). I’ll be using pnpm out of preference</li></ul></div><hr><h2 id="setting-up-your-development-environment" tabindex="-1"><a class="header-anchor" href="#setting-up-your-development-environment"><span>Setting up your development environment</span></a></h2><p>Let’s get to the meat!</p><p>Here’s a summary of the packages we’ll be using to create this application:</p>',6)),s("ul",null,[s("li",null,[t(c,{to:"/blog.logrocket.com/vite-adoption-guide.html"},{default:e(()=>n[27]||(n[27]=[s("strong",null,"Vite",-1)])),_:1,__:[27]}),n[28]||(n[28]=a(": The underlying build tool for our React.js application"))]),s("li",null,[t(c,{to:"/blog.logrocket.com/react-hook-form-complete-guide.html"},{default:e(()=>n[29]||(n[29]=[s("strong",null,"React Hook Form",-1)])),_:1,__:[29]}),n[30]||(n[30]=a(": A powerful library for managing forms in React"))]),s("li",null,[t(c,{to:"/blog.logrocket.com/schema-validation-typescript-zod.html"},{default:e(()=>n[31]||(n[31]=[s("strong",null,"Zod",-1)])),_:1,__:[31]}),n[32]||(n[32]=a(": A TypeScript-first schema validation lib with static type inference"))]),s("li",null,[s("a",R,[t(o,{icon:"iconfont icon-shadcn"}),n[33]||(n[33]=a("shadcn"))]),n[34]||(n[34]=a(": An awesome open source collection of reusable React components. Powered by Radix UI and Tailwind CSS"))]),s("li",null,[s("a",z,[t(o,{icon:"fas fa-globe"}),n[35]||(n[35]=a("Mantine Hooks"))]),n[36]||(n[36]=a(": A lightweight set of React Hooks for managing DOM and UI state. We’ll use this to save the form state to local storage"))]),s("li",null,[s("a",P,[t(o,{icon:"fas fa-globe"}),n[37]||(n[37]=a("Motion"))]),n[38]||(n[38]=a(": For adding animations"))])]),n[93]||(n[93]=l(`<p>Open up your terminal in your preferred directory and run this command to create a new React app with Vite and TypeScript:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">pnpm</span> create vite@latest multi-step-form</span>
<span class="line"><span class="token comment"># Select React + TypeScript &amp; SWC to follow along</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, move into the project folder and install the packages mentioned earlier:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token builtin class-name">cd</span> multi-step-form</span>
<span class="line"><span class="token function">pnpm</span> <span class="token function">install</span> <span class="token operator">&amp;&amp;</span> <span class="token function">pnpm</span> <span class="token function">add</span> react-hook-form react-router-dom zod @mantine/hooks framer-motion lucide-react</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This will create our foundation. Next, let’s install Tailwind and initialize shadcn in our project.</p><h3 id="installing-tailwind-and-shadcn" tabindex="-1"><a class="header-anchor" href="#installing-tailwind-and-shadcn"><span>Installing Tailwind and shadcn</span></a></h3>`,6)),s("p",null,[n[40]||(n[40]=a("As mentioned above, we’ll be using shadcn, an open source collection of components, to design the form layout. This will allow us to focus more on implementing the form’s logic. If you need help, refer to the ")),s("a",N,[t(o,{icon:"iconfont icon-shadcn"}),n[39]||(n[39]=a("official documentation"))]),n[41]||(n[41]=a(" for guidance."))]),n[94]||(n[94]=l(`<p>Install and initialize Tailwind with the following command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> tailwindcss postcss autoprefixer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,2)),s("p",null,[n[42]||(n[42]=a("Then generate the ")),t(o,{icon:"fa-brands fa-js"}),n[43]||(n[43]=s("code",null,"tailwind.config.js",-1)),n[44]||(n[44]=a(" and ")),t(o,{icon:"fa-brands fa-js"}),n[45]||(n[45]=s("code",null,"postcss.config.js",-1)),n[46]||(n[46]=a(" files with the following command:"))]),n[95]||(n[95]=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">pnpm</span> tailwindcss init <span class="token parameter variable">-p</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>With the configuration files in place, add the Tailwind directives to your main stylesheet (e.g., <code>src/index.css</code>):</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="index.css"><span>index.css</span></div><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span></span>
<span class="line"><span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span></span>
<span class="line"><span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* your custom css here */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),s("p",null,[n[47]||(n[47]=a("Next, update your ")),t(o,{icon:"fa-brands fa-js"}),n[48]||(n[48]=s("code",null,"tailwind.config.js",-1)),n[49]||(n[49]=a(" file to specify the paths to your content files. This ensures Tailwind can purge unused styles in production:"))]),n[96]||(n[96]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="tailwind.config.js"><span>tailwind.config.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;tailwindcss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./index.html&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./src/**/*.{ts,tsx,js,jsx}&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[50]||(n[50]=a("For better module resolution, configure ")),t(o,{icon:"iconfont icon-json"}),n[51]||(n[51]=s("code",null,"tsconfig.json",-1)),n[52]||(n[52]=a(" with an alias for the ")),t(o,{icon:"fas fa-folder-open"}),n[53]||(n[53]=s("code",null,"src",-1)),n[54]||(n[54]=a(" directory. This will simplify imports throughout the project:"))]),n[97]||(n[97]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="tsconfig.json"><span>tsconfig.json</span></div><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;@/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./src/*&quot;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[55]||(n[55]=a("Vite also comes with a ")),t(o,{icon:"iconfont icon-json"}),n[56]||(n[56]=s("code",null,"tsconfig.app.json",-1)),n[57]||(n[57]=a(" in which we’ll do the same thing:"))]),n[98]||(n[98]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="tsconfig.app.json"><span>tsconfig.app.json</span></div><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;@/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./src/*&quot;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[58]||(n[58]=a("Next, update your Vite configuration to recognize this alias. Open ")),t(o,{icon:"iconfont icon-typescript"}),n[59]||(n[59]=s("code",null,"vite.config.ts",-1)),n[60]||(n[60]=a(" and add the following:"))]),n[99]||(n[99]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="vite.config.ts"><span>vite.config.ts</span></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> fileURLToPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;url&#39;</span></span>
<span class="line"><span class="token keyword">import</span> react <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-react-swc&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> __dirname <span class="token operator">=</span> <span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">react</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  resolve<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    alias<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string-property property">&#39;@&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>With Tailwind configured, it’s time to set up shadcn. Initialize it by running the following:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">pnpm</span> dlx shadcn@latest init <span class="token parameter variable">-d</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>During initialization, shadcn will perform checks, validate your framework, set up Tailwind, and update your project files. Once the process is complete, you’ll see an output like this:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">✔ Preflight checks.</span>
<span class="line">✔ Verifying framework. Found Vite.</span>
<span class="line">✔ Validating Tailwind CSS.</span>
<span class="line">✔ Validating import alias.</span>
<span class="line">✔ Writing components.json.</span>
<span class="line">✔ Checking registry.</span>
<span class="line">✔ Updating tailwind.config.ts</span>
<span class="line">✔ Updating app\\app.css</span>
<span class="line">✔ Installing dependencies.</span>
<span class="line">✔ Created 1 file:</span>
<span class="line">  - app\\lib\\utils.ts</span>
<span class="line"></span>
<span class="line">Success! Project initialization completed.</span>
<span class="line">You may now add components.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Great! Now we have Tailwind and shadcn fully set up in your Vite + React + TypeScript project.</p><p>Let’s install a few components we’ll need for this project — input, button, form, toast, and label. Run the following:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">pnpm</span> dlx shadcn@latest <span class="token function">add</span> input button form label toast</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">N.B.</p><p>Installing shadcn’s form library installs the React Hook Form package.</p></div><hr><h2 id="creating-the-formstep-type-schema-and-data" tabindex="-1"><a class="header-anchor" href="#creating-the-formstep-type-schema-and-data"><span>Creating the <code>FormStep</code> type, schema, and data</span></a></h2><p>Remember that reusability is our design goal here. We’ll start by defining the <code>FormStep</code> type, which will hold the properties required in a new step. This includes the title, position, validation schema, and component amongst others — you can expand this how you creatively see fit.</p>`,12)),s("p",null,[n[61]||(n[61]=a("Start by creating the ")),n[62]||(n[62]=s("code",null,"FormStep",-1)),n[63]||(n[63]=a(" type in ")),t(o,{icon:"fas fa-folder-open"}),n[64]||(n[64]=s("code",null,"src/",-1)),t(o,{icon:"iconfont icon-typescript"}),n[65]||(n[65]=s("code",null,"types.ts",-1)),n[66]||(n[66]=a(". This represents a single step in the form:"))]),n[100]||(n[100]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="types.ts"><span>types.ts</span></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ZodType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zod&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CombinedCheckoutType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./validators/checkout-flow.validator&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> LucideIcon <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lucide-react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">FieldKeys</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> CombinedCheckoutType<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">FormStep</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  position<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  validationSchema<span class="token operator">:</span> ZodType<span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">  component<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactElement<span class="token punctuation">;</span></span>
<span class="line">  icon<span class="token operator">:</span> LucideIcon<span class="token punctuation">;</span></span>
<span class="line">  fields<span class="token operator">:</span> FieldKeys<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here’s what each property represents:</p><ul><li><code>title</code>: The title of the step</li><li><code>position</code>: The step’s order in the sequence</li><li><code>validationSchema</code>: A Zod schema for validating the form fields within the step</li><li><code>component</code>: A React component to render for the step</li><li><code>icon</code>: A Lucide icon for visual representation</li><li><code>**fields**</code>: This is an array of strings in which each element matches a key (i.e., an input field) from the provided schema, making the form strongly typed and less error-prone</li></ul><p>You’ll understand it fully when you see the implementation.</p>`,4)),s("p",null,[n[67]||(n[67]=a("Since we’re simulating a checkout process, let’s define validation schemas for each step in ")),n[68]||(n[68]=s("code",null,"src/validators/",-1)),t(o,{icon:"iconfont icon-typescript"}),n[69]||(n[69]=s("code",null,"checkout-flow.validator.ts",-1)),n[70]||(n[70]=a(":"))]),n[101]||(n[101]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="validators/checkout-flow.validator.ts"><span>validators/checkout-flow.validator.ts</span></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> z <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zod&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> step1Schema <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  email<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;Please enter a valid email address&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  firstName<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;First name must be at least 3 characters&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  lastName<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;Last name must be at least 3 characters&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> step2Schema <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  country<span class="token operator">:</span> z</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;Country must be at least 2 characters&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&#39;Country must be less than 100 characters&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  city<span class="token operator">:</span> z</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;City must be at least 2 characters&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">/* ... more fields ... */</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> step3Schema <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... cardNumber, carrdHolder, cvv ... */</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>To keep the form type-safe and make the schemas reusable, we merge the individual schemas into a single schema:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="validators/checkout-flow.validator.ts"><span>validators/checkout-flow.validator.ts</span></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">  <span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>step2Schema<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>step3Schema<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">CombinedCheckoutType</span> <span class="token operator">=</span> z<span class="token punctuation">.</span>infer<span class="token operator">&lt;</span><span class="token keyword">typeof</span> CombinedCheckoutSchema<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>By merging the schemas, we combine the field definitions from all steps into one master schema. This allows us to infer a unified <code>CombinedCheckoutSchema</code> type that includes all fields in the multi-step form — this combined schema will also come in handy when using React Hook Form.</p>`,4)),s("p",null,[n[71]||(n[71]=a("Finally, define the ")),n[72]||(n[72]=s("code",null,"checkoutSteps",-1)),n[73]||(n[73]=a(" array in ")),n[74]||(n[74]=s("code",null,"src/pages/",-1)),t(o,{icon:"fa-brands fa-react"}),n[75]||(n[75]=s("code",null,"home.tsx",-1)),n[76]||(n[76]=a(" to represent the form steps:"))]),n[102]||(n[102]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="pages/home.tsx"><span>pages/home.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> FormStep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/types&#39;</span></span>
<span class="line"><span class="token keyword">import</span> Step1 <span class="token keyword">from</span> <span class="token string">&#39;./checkout/step1&#39;</span></span>
<span class="line"><span class="token keyword">import</span> Step2 <span class="token keyword">from</span> <span class="token string">&#39;./checkout/step2&#39;</span></span>
<span class="line"><span class="token keyword">import</span> Step3 <span class="token keyword">from</span> <span class="token string">&#39;./checkout/step3&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span></span>
<span class="line">  step1Schema<span class="token punctuation">,</span></span>
<span class="line">  step2Schema<span class="token punctuation">,</span></span>
<span class="line">  step3Schema<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/validators/checkout-flow.validator&#39;</span></span>
<span class="line"><span class="token keyword">import</span> MultiStepForm <span class="token keyword">from</span> <span class="token string">&#39;@/components/stepped-form/stepped-form&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> HomeIcon<span class="token punctuation">,</span> UserIcon<span class="token punctuation">,</span> CreditCardIcon <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lucide-react&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> checkoutSteps<span class="token operator">:</span> FormStep<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    title<span class="token operator">:</span> <span class="token string">&#39;Step 1: Personal Information&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    component<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Step1</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span></span>
<span class="line">    icon<span class="token operator">:</span> UserIcon<span class="token punctuation">,</span></span>
<span class="line">    position<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    validationSchema<span class="token operator">:</span> step1Schema<span class="token punctuation">,</span></span>
<span class="line">    fields<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;firstName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lastName&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    title<span class="token operator">:</span> <span class="token string">&#39;Step 2: Address Details&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    component<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Step2</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span></span>
<span class="line">    icon<span class="token operator">:</span> HomeIcon<span class="token punctuation">,</span></span>
<span class="line">    position<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    validationSchema<span class="token operator">:</span> step2Schema<span class="token punctuation">,</span></span>
<span class="line">    fields<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;country&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;city&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shippingAddress&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    title<span class="token operator">:</span> <span class="token string">&#39;Step 3: Payment Details&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    component<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Step3</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span></span>
<span class="line">    icon<span class="token operator">:</span> CreditCardIcon<span class="token punctuation">,</span></span>
<span class="line">    position<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">    validationSchema<span class="token operator">:</span> step3Schema<span class="token punctuation">,</span></span>
<span class="line">    fields<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;cardNumber&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cardholderName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cvv&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MultiStepForm</span></span> <span class="token attr-name">steps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>checkoutSteps<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>With that done, we can now create the <code>SteppedForm</code> component to dynamically handle the form rendering, state, logic, and validation with the data in <code>checkoutSteps</code>.</p><hr><h2 id="creating-the-steppedform-component" tabindex="-1"><a class="header-anchor" href="#creating-the-steppedform-component"><span>Creating the <code>SteppedForm</code> component</span></a></h2><p>The <code>SteppedForm</code> component is the backbone of our multi-step form design. It contains the form’s logic, tracks the current step, validates inputs, and provides functions for navigation.</p><p>When making this, I asked myself a few questions:</p><ul><li>What values do I want to track?</li><li>How are those values shared and retrieved?</li><li>What does the final implementation look like?</li></ul><p>Values like <code>currentStep</code> ,<code>isFirstStep</code>, <code>isLastStep</code>, and controller functions like <code>nextStep</code> and <code>previousStep</code> came to mind, and are pieces we’d need to make the multi-step form work.</p><p>React Hook Form uses the React Context, allowing us to share form state across components by having a parent <code>&lt;FormProvider /&gt;</code> component. This allows any child component to access the form state without needing to pass props manually.</p><p>We also want to have a custom hook to manage the form state — something like this:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> isFirstStep<span class="token punctuation">,</span> isLastStep<span class="token punctuation">,</span> nextStep <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMultiStepForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The simplest way I found to do this is by leveraging two context values: one from React Hook Form’s API and another from our custom <code>useMultiStepForm</code> Hook.</p><p>This separation keeps the form logic clear while maintaining easy access to both React Hook Form’s form state and our step-based navigation.</p><h3 id="why-context" tabindex="-1"><a class="header-anchor" href="#why-context"><span>Why Context?</span></a></h3>`,14)),s("p",null,[t(c,{to:"/blog.logrocket.com/react-context-tutorial.html"},{default:e(()=>n[77]||(n[77]=[s("strong",null,"React’s Context API",-1)])),_:1,__:[77]}),n[78]||(n[78]=a(" makes it easy to share state and logic while eliminating the need to pass props through multiple layers. The context holds all essential states and methods required by the form steps, navigation buttons, and progress indicator components."))]),n[103]||(n[103]=l(`<p>Here’s what we’re currently tracking in the context:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">MultiStepFormContextProps</span> <span class="token punctuation">{</span></span>
<span class="line">  currentStep<span class="token operator">:</span> FormStep<span class="token punctuation">;</span></span>
<span class="line">  currentStepIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  isFirstStep<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">  isLastStep<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function-variable function">nextStep</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function-variable function">previousStep</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function-variable function">goToStep</span><span class="token operator">:</span> <span class="token punctuation">(</span>step<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line">  steps<span class="token operator">:</span> FormStep<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>currentStep</code>: The current form step being rendered</li><li><code>currentStepIndex</code>: The index of the current step in the <code>steps</code> array</li><li><code>isFirstStep</code> / <code>isLastStep</code>: Booleans to determine if the user is at the start or end of the form</li><li><code>nextStep</code> / <code>previousStep</code>: Functions to navigate between steps</li><li><code>goToStep</code>: A function to jump to a specific step</li><li><code>steps</code>: The full list of <code>FormStep</code> objects</li></ul><p>By exposing these properties and methods, the context makes the form highly configurable and accessible to any child component.</p><hr><h2 id="building-the-steppedform-component" tabindex="-1"><a class="header-anchor" href="#building-the-steppedform-component"><span>Building the <code>SteppedForm</code> component</span></a></h2><p>In this section, we’ll walk through the process of building the <code>SteppedForm</code> component. We’ll start by defining the context for managing the form’s state and navigation, then set up the form structure using React Hook Form.</p><p>By the end of this section, you’ll have a functional multi-step form component that’s ready to be extended with additional features like navigation buttons, progress indicators, and anything else you choose to implement.</p><p>Now, let’s move on to creating the <code>SteppedForm</code> component:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/stepped-form/stepped-form.tsx"><span>components/stepped-form/stepped-form.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> z <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zod&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createContext<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> FormProvider<span class="token punctuation">,</span> useForm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-hook-form&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> FormStep<span class="token punctuation">,</span> MultiStepFormContextProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/types&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> zodResolver <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@hookform/resolvers/zod&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CombinedCheckoutSchema <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/validators/checkout-flow.validator&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> PrevButton <span class="token keyword">from</span> <span class="token string">&#39;@/components/stepped-form/prev-button&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> ProgressIndicator <span class="token keyword">from</span> <span class="token string">&#39;./progress-indicator&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> MultiStepFormContext <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createContext</span><span class="token generic class-name"><span class="token operator">&lt;</span>MultiStepFormContextProps <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">MultiStepForm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> steps <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> steps<span class="token operator">:</span> FormStep<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> methods <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useForm</span><span class="token generic class-name"><span class="token operator">&lt;</span>z<span class="token punctuation">.</span>infer<span class="token operator">&lt;</span><span class="token keyword">typeof</span> CombinedCheckoutSchema<span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    resolver<span class="token operator">:</span> <span class="token function">zodResolver</span><span class="token punctuation">(</span>CombinedCheckoutSchema<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Form state</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>currentStepIndex<span class="token punctuation">,</span> setCurrentStepIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> currentStep <span class="token operator">=</span> steps<span class="token punctuation">[</span>currentStepIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Navigation functions</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">nextStep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentStepIndex <span class="token operator">&lt;</span> steps<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setCurrentStepIndex</span><span class="token punctuation">(</span>currentStepIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">previousStep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentStepIndex <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setCurrentStepIndex</span><span class="token punctuation">(</span>currentStepIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">const</span> <span class="token function-variable function">goToStep</span> <span class="token operator">=</span> <span class="token punctuation">(</span>position<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> position <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> steps<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setCurrentStepIndex</span><span class="token punctuation">(</span>position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">saveFormState</span><span class="token punctuation">(</span>position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/* Form submission function */</span></span>
<span class="line">  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">submitSteppedForm</span><span class="token punctuation">(</span>data<span class="token operator">:</span> z<span class="token punctuation">.</span>infer<span class="token operator">&lt;</span><span class="token keyword">typeof</span> CombinedCheckoutSchema<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Perform your form submission logic here</span></span>
<span class="line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Form submission error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Context value</span></span>
<span class="line">  <span class="token keyword">const</span> value<span class="token operator">:</span> MultiStepFormContextProps <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    currentStep<span class="token operator">:</span> steps<span class="token punctuation">[</span>currentStepIndex<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    currentStepIndex<span class="token punctuation">,</span></span>
<span class="line">    isFirstStep<span class="token operator">:</span> currentStepIndex <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    isLastStep<span class="token operator">:</span> currentStepIndex <span class="token operator">===</span> steps<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    goToStep<span class="token punctuation">,</span></span>
<span class="line">    nextStep<span class="token punctuation">,</span></span>
<span class="line">    previousStep<span class="token punctuation">,</span></span>
<span class="line">    steps<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MultiStepFormContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FormProvider</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>methods<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>w-[550px] mx-auto<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ProgressIndicator</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>methods<span class="token punctuation">.</span><span class="token function">handleSubmit</span><span class="token punctuation">(</span>submitSteppedForm<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>py-5 text-3xl font-bold<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>currentStep<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token punctuation">{</span>currentStep<span class="token punctuation">.</span>component<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">PrevButton</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FormProvider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MultiStepFormContext.Provider</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> MultiStepForm<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>A lot is going on here so let’s go over the important details one after the other:</p><h3 id="_1-formprovider-and-multi-step-context" tabindex="-1"><a class="header-anchor" href="#_1-formprovider-and-multi-step-context"><span>1. <code>FormProvider</code> and multi-step context</span></a></h3><p>As mentioned earlier, React Hook Form’s <code>FormProvider</code> is used to provide form methods to all child components. This allows us to manage form state and validation across multiple steps by using the <code>useFormContext</code> Hook in place of <code>useForm</code>.</p><p>The <code>MultiStepFormContext</code> provides the necessary state and navigation functions we discussed to all child components, ensuring that buttons and progress indicators can interact with the form’s state.</p><h3 id="_2-parent-formelement" tabindex="-1"><a class="header-anchor" href="#_2-parent-formelement"><span>2. Parent <code>form</code>element</span></a></h3><p>The <code>form</code> element should wrap up all the steps of your multi-step form. This is crucial because nesting separate <code>form</code> elements inside individual steps can cause issues.</p><p>Any <code>&lt;button&gt;</code> inside the form with <code>type=&quot;submit&quot;</code> (which is the default) will trigger form submission. To prevent premature submissions, only the button in the final step should have this attribute. More on this soon.</p><h3 id="_3-step-rendering-and-form-initialization" tabindex="-1"><a class="header-anchor" href="#_3-step-rendering-and-form-initialization"><span>3. Step rendering and form initialization</span></a></h3><p>The appropriate step is rendered through the <code>currentStep.component</code> component value.</p><p>We also initialize the form using <code>useForm</code> from React Hook Form and pass it the schema (<code>CombinedCheckoutSchema</code>) for validation. The <code>zodResolver</code> ensures the form data is validated against the schema before submission.</p><h3 id="_4-form-submission" tabindex="-1"><a class="header-anchor" href="#_4-form-submission"><span>4. Form submission</span></a></h3><p>The <code>submitSteppedForm</code> function handles the form submission. For now, it simply logs the form data to the console, but you can replace this with your actual submission logic (e.g., sending data to an API).</p><h3 id="_5-navigation-functions" tabindex="-1"><a class="header-anchor" href="#_5-navigation-functions"><span>5. Navigation functions</span></a></h3><p>The <code>nextStep</code>, <code>previousStep</code>, and <code>goToStep</code> functions allow users to navigate between steps. These functions are provided to the context, making them accessible to components like <code>PrevButton</code>, <code>NextButton</code>, and <code>ProgressIndicator</code>.</p><p>With this base structure, we’re confident that our <code>SteppedForm</code> component is reusable and well encapsulated, only sharing state with the components that need it. Now, we can define and export a <code>useMultiStep</code> function for use within child components:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> MultiStepFormContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/components/stepped-form/stepped-form&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useMultiStepForm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>MultiStepFormContext<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token string">&#39;useMultiStepForm must be used within MultiStepForm.Provider&#39;</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> context</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="validating-input-in-the-nextstepfunction" tabindex="-1"><a class="header-anchor" href="#validating-input-in-the-nextstepfunction"><span>Validating input in the <code>nextStep</code>function</span></a></h3><p>The <code>nextStep</code> function will handle step transitions. However, we’re going to modify this function further as we want to trigger validation on every step before transitioning to the next one:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">nextStep</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> isValid <span class="token operator">=</span> <span class="token keyword">await</span> methods<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span>currentStep<span class="token punctuation">.</span>fields<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// Stop progression if validation fails</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// grab values in current step and transform array to object</span></span>
<span class="line">  <span class="token keyword">const</span> currentStepValues <span class="token operator">=</span> methods<span class="token punctuation">.</span><span class="token function">getValues</span><span class="token punctuation">(</span>currentStep<span class="token punctuation">.</span>fields<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> formValues <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span></span>
<span class="line">    currentStep<span class="token punctuation">.</span>fields<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span></span>
<span class="line">      field<span class="token punctuation">,</span></span>
<span class="line">      currentStepValues<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Validate the form state against the current step&#39;s schema</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>currentStep<span class="token punctuation">.</span>validationSchema<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> validationResult <span class="token operator">=</span> currentStep<span class="token punctuation">.</span>validationSchema<span class="token punctuation">.</span><span class="token function">safeParse</span><span class="token punctuation">(</span>formValues<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>validationResult<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      validationResult<span class="token punctuation">.</span>error<span class="token punctuation">.</span>errors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        methods<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">keyof</span> SteppedFlowType<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">          type<span class="token operator">:</span> <span class="token string">&#39;manual&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          message<span class="token operator">:</span> err<span class="token punctuation">.</span>message<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// Stop progression if schema validation fails</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Move to the next step if not at the last step</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>currentStepIndex <span class="token operator">&lt;</span> steps<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setCurrentStepIndex</span><span class="token punctuation">(</span>currentStepIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here’s a breakdown of its flow:</p><h4 id="_1-trigger-field-validation" tabindex="-1"><a class="header-anchor" href="#_1-trigger-field-validation"><span>1. Trigger field validation</span></a></h4><p>The first step in this function is to validate the input fields related to the current step. This is done using React Hook Form’s <code>methods.trigger</code> function.</p><h4 id="_2-grab-current-step-values-and-transform-into-an-object" tabindex="-1"><a class="header-anchor" href="#_2-grab-current-step-values-and-transform-into-an-object"><span>2. Grab current step values and transform into an object</span></a></h4><p>Next, we retrieve the values of the fields in the current step and transform them into an array for further validation. Because <code>methods.getValues(currentStep.fields)</code> returns the values as an array — <code>[&#39;test@test.com&#39;, &#39;John&#39;, &#39;Doe&#39;]</code> — we use <code>Object.fromEntries</code> to transform this array into an object where the keys are the field names and the values are the corresponding input values (e.g., <code>{ email: &#39;test@test.com&#39;, firstName: &#39;John&#39;, lastName: &#39;Doe&#39; }</code>).</p><h4 id="_3-schema-validation" tabindex="-1"><a class="header-anchor" href="#_3-schema-validation"><span>3. Schema validation</span></a></h4><p>Once the values are in the correct format, we validate them against the schema defined at <code>currentStep.validationSchem</code>. Errors are reported using <code>methods.setError</code>.</p><h4 id="_4-lastly-if-all-validations-pass-we-move-on-to-the-next-step" tabindex="-1"><a class="header-anchor" href="#_4-lastly-if-all-validations-pass-we-move-on-to-the-next-step"><span>4. Lastly, if all validations pass, we move on to the next step.</span></a></h4><hr><h2 id="controller-buttons-previous-and-next" tabindex="-1"><a class="header-anchor" href="#controller-buttons-previous-and-next"><span>Controller buttons: Previous and next</span></a></h2><p>Now that we’ve set up <code>SteppedForm</code> with the correct navigation functions, we can start to use them in custom buttons like a <code>NextButton</code> and <code>PreviousButton</code> or the progress indicator component. Let’s start with <code>PrevButton</code>:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/PrevButton.tsx"><span>components/PrevButton.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useMultiStepForm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/hooks/use-stepped-form&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../ui/button&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">PrevButton</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> isFirstStep<span class="token punctuation">,</span> previousStep <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMultiStepForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span></span>
<span class="line">      <span class="token attr-name">variant</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>outline<span class="token punctuation">&#39;</span></span></span>
<span class="line">      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>button<span class="token punctuation">&#39;</span></span></span>
<span class="line">      <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>mt-5<span class="token punctuation">&#39;</span></span></span>
<span class="line">      <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>previousStep<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>isFirstStep<span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      Previous</span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> PrevButton</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now for <code>NextButton</code>:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/NextButton.tsx"><span>components/NextButton.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">NextButton</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  onClick<span class="token punctuation">,</span></span>
<span class="line">  type<span class="token punctuation">,</span></span>
<span class="line">  <span class="token operator">...</span>rest</span>
<span class="line"><span class="token punctuation">}</span><span class="token operator">:</span> React<span class="token punctuation">.</span>ButtonHTMLAttributes<span class="token operator">&lt;</span>HTMLButtonElement<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> isLastStep <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMultiStepForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span></span>
<span class="line">      <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-white bg-black hover:bg-slate-950 transition-colors w-full py-6<span class="token punctuation">&quot;</span></span></span>
<span class="line">      <span class="token attr-name">type</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>type <span class="token operator">??</span> <span class="token string">&#39;button&#39;</span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>isLastStep <span class="token operator">?</span> <span class="token string">&#39;Submit&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;Continue&#39;</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><figure><img src="`+x+`" alt="Demonstrating The Continue Button In Our Form" tabindex="0" loading="lazy"><figcaption>Demonstrating The Continue Button In Our Form</figcaption></figure><p>Remember that our form layout design enforces us to have only one button with the <code>type=&quot;submit&quot;</code> attribute. <code>NextButton</code> above acts plays two roles here — acting as <code>type=&#39;button&#39;</code> that says <code>Continue</code> for all steps up until the last where it says <code>Submit</code> and triggers a form submit.</p><hr><h2 id="creating-individual-steps" tabindex="-1"><a class="header-anchor" href="#creating-individual-steps"><span>Creating individual steps</span></a></h2><p>Each step in our form is a standalone component that follows a consistent pattern:</p><ol><li>Validate the input against the specified schema</li><li>Optionally perform additional operations with the data, such as verifying an email address in the database, before proceeding</li><li>Call <code>nextStep</code> from <code>useMultiStepForm</code> to move to the next step</li></ol><p>Let’s take a look at <code>Step1</code>:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Step1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    register<span class="token punctuation">,</span></span>
<span class="line">    getValues<span class="token punctuation">,</span></span>
<span class="line">    setError<span class="token punctuation">,</span></span>
<span class="line">    formState<span class="token operator">:</span> <span class="token punctuation">{</span> errors <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useFormContext</span><span class="token generic class-name"><span class="token operator">&lt;</span>z<span class="token punctuation">.</span>infer<span class="token operator">&lt;</span><span class="token keyword">typeof</span> SteppedFlowSchema<span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> nextStep <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMultiStepForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleStepSubmit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> email <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Simulate check for existing email in the database</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>email <span class="token operator">===</span> <span class="token string">&#39;test@test.com&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        type<span class="token operator">:</span> <span class="token string">&#39;manual&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        message<span class="token operator">:</span> <span class="token string">&#39;Email already exists in the database. Please use a different email.&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// move to the next step</span></span>
<span class="line">    <span class="token function">nextStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex flex-col gap-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Email<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorMessage</span></span> <span class="token attr-name">message</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>errors<span class="token punctuation">.</span>email<span class="token operator">?.</span>message<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NextButton</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleStepSubmit<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, we decide to make a (mock) query to the database before calling <code>nextStep</code>. This would be the same pattern up until your last step, in this case, <code>Step3</code>, where you explicitly assign a <code>submit</code> type to the navigation button:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Step3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... */</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleStepSubmit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex flex-col gap-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/* Form fields here */</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NextButton</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleStepSubmit<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="implementing-a-form-progress-indicator" tabindex="-1"><a class="header-anchor" href="#implementing-a-form-progress-indicator"><span>Implementing a form progress indicator</span></a></h2><figure><img src="`+S+'" alt="Progress Indicator In Our Form" tabindex="0" loading="lazy"><figcaption>Progress Indicator In Our Form</figcaption></figure>',56)),s("p",null,[n[80]||(n[80]=a("It is generally good practice to give visual feedback to your users on their progress so they don’t feel lost or overwhelmed. We will achieve this with the progress indicator component below — generated by ")),s("a",B,[t(o,{icon:"fas fa-globe"}),n[79]||(n[79]=a("v0"))]),n[81]||(n[81]=a("!"))]),n[104]||(n[104]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="components/ProgressIndicator.tsx"><span>components/ProgressIndicator.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ProgressIndicator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> currentStep<span class="token punctuation">,</span> goToStep<span class="token punctuation">,</span> currentStepIndex <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMultiStepForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex items-center w-full justify-center p-4 mb-10<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>w-full space-y-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>relative flex justify-between<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token punctuation">{</span><span class="token comment">/* Progress Line */</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>absolute left-0 top-1/2 h-0.5 w-full -translate-y-1/2 bg-gray-200<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>motion.div</span></span>
<span class="line">              <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>h-full bg-black<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">initial</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">&#39;0%&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">              <span class="token attr-name">animate</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token punctuation">(</span>currentStepIndex <span class="token operator">/</span> <span class="token punctuation">(</span>checkoutSteps<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">              <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">              <span class="token attr-name">transition</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token literal-property property">ease</span><span class="token operator">:</span> <span class="token string">&#39;easeInOut&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">            <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token punctuation">{</span><span class="token comment">/* Steps */</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">          </span><span class="token punctuation">{</span>checkoutSteps<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> isCompleted <span class="token operator">=</span> currentStepIndex <span class="token operator">&gt;</span> step<span class="token punctuation">.</span>position <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line">            <span class="token keyword">const</span> isCurrent <span class="token operator">=</span> currentStepIndex <span class="token operator">===</span> step<span class="token punctuation">.</span>position <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>step<span class="token punctuation">.</span>position<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>relative z-10<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>motion.button</span></span>
<span class="line">                  <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">goToStep</span><span class="token punctuation">(</span>step<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">                  <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">flex size-14 items-center justify-center rounded-full border-2 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span></span>
<span class="line">                    isCompleted <span class="token operator">||</span> isCurrent</span>
<span class="line">                      <span class="token operator">?</span> <span class="token string">&#39;border-primary bg-black text-white&#39;</span></span>
<span class="line">                      <span class="token operator">:</span> <span class="token string">&#39;border-gray-200 bg-white text-gray-400&#39;</span></span>
<span class="line">                  <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span></span></span>
<span class="line">                  <span class="token attr-name">animate</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span></span>
<span class="line">                    <span class="token literal-property property">scale</span><span class="token operator">:</span> isCurrent <span class="token operator">?</span> <span class="token number">1.1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">                  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">                <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">                  </span><span class="token punctuation">{</span>isCompleted <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Check</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>h-6 w-6<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">                  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>step.icon</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>h-6 w-6<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">                  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>motion.button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The component uses <code>currentStepIndex</code> to calculate the width of the progress line and highlight the current step.</p><hr><h2 id="saving-form-state-to-localstorage" tabindex="-1"><a class="header-anchor" href="#saving-form-state-to-localstorage"><span>Saving form state to <code>localStorage</code></span></a></h2><p>One of the most frustrating experiences in web forms is losing your progress. It’s annoying enough to make a user abandon the process — this often translates to leaving money on the table. Let’s address this by persisting the form state to <code>localStorage</code>.</p><p>First, what does the structure of the data we’re storing look like?</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">  currentStepIndex<span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line">  formValues<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition to saving the form state, we also want to save the current step (or step index) to ensure they continue exactly where they left off.</p><h3 id="initialize-localstoragestate" tabindex="-1"><a class="header-anchor" href="#initialize-localstoragestate"><span>Initialize <code>localStorage</code>state</span></a></h3><p>We start by initializing the stored form state from <code>localStorage</code> in <code>MultiStepForm</code>. To ensure reusability, we’ll require our component to collect the <code>localStorageKey</code> prop. This prevents conflicts when multiple multi-step forms exist in the same application.</p><p>Using Mantine’s <code>useLocalStorage</code> Hook, we create a stateful local storage item that holds the form’s progress:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>savedFormState<span class="token punctuation">,</span> setSavedFormState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useLocalStorage</span><span class="token generic class-name"><span class="token operator">&lt;</span>SavedFormState <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  key<span class="token operator">:</span> localStorageKey<span class="token punctuation">,</span></span>
<span class="line">  defaultValue<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If there’s an existing saved form state, we restore it when <code>MultiStepForm</code> mounts using React Hook Form’s <code>methods.reset()</code>:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>savedFormState<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setCurrentStepIndex</span><span class="token punctuation">(</span>savedFormState<span class="token punctuation">.</span>currentStepIndex<span class="token punctuation">)</span></span>
<span class="line">    methods<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>savedFormState<span class="token punctuation">.</span>formValues<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>methods<span class="token punctuation">,</span> savedFormState<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This ensures that if a user refreshes the page or revisits the form, they pick up exactly where they left off.</p><h3 id="saving-form-state" tabindex="-1"><a class="header-anchor" href="#saving-form-state"><span>Saving form state</span></a></h3><p>Next, we define a function to save the form state to <code>localStorage</code>:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">saveFormState</span> <span class="token operator">=</span> <span class="token punctuation">(</span>stepIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setSavedFormState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    currentStepIndex<span class="token operator">:</span> stepIndex <span class="token operator">??</span> currentStepIndex<span class="token punctuation">,</span></span>
<span class="line">    formValues<span class="token operator">:</span> methods<span class="token punctuation">.</span><span class="token function">getValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In React, state updates are asynchronous. When a user navigates to a new step, <code>currentStepIndex</code> is updated after the navigation occurs. If we save the form state using the old <code>currentStepIndex</code>, we will store the wrong step index.</p><div class="hint-container tip"><p class="hint-container-title">For example</p><ul><li>Suppose the user is on Step 1 (<code>currentStepIndex = 0</code>)</li><li>They click <code>Next</code> to move to Step 2</li><li>During navigation, <code>currentStepIndex</code> is still <code>0</code> until the state update completes</li><li>If we save at this point, we would incorrectly store the state for Step 1 instead of Step 2</li></ul></div><p>To avoid this, we explicitly pass the next step’s index when saving.</p><h3 id="clearing-form-state" tabindex="-1"><a class="header-anchor" href="#clearing-form-state"><span>Clearing form state</span></a></h3><p>When the form is successfully submitted, or the user wants to start over, we should clear <code>localStorage</code>:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line">  methods<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">setCurrentStepIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">setSavedFormState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>localStorageKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pretty straightforward. We also delete the local storage item entirely.</p><p>Now we can use these functions in the navigation functions, right before the navigation takes place:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">nextStep</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... */</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>currentStepIndex <span class="token operator">&lt;</span> steps<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">saveFormState</span><span class="token punctuation">(</span>currentStepIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">setCurrentStepIndex</span><span class="token punctuation">(</span>currentStepIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">previousStep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... */</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>currentStepIndex <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">saveFormState</span><span class="token punctuation">(</span>currentStepIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">setCurrentStepIndex</span><span class="token punctuation">(</span>currentStepIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">goToStep</span> <span class="token operator">=</span> <span class="token punctuation">(</span>position<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> position <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> steps<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">saveFormState</span><span class="token punctuation">(</span>position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">setCurrentStepIndex</span><span class="token punctuation">(</span>position <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This guarantees that whenever the user moves between steps, their progress is saved immediately.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>And there you have it! We’ve built a reusable, type-safe multi-step form component that handles validation, and persistent form data prevents data loss and provides a smooth user experience. The component’s architecture makes it easy to add new steps or modify existing ones without touching the core logic.</p><p>I’ve needed a component like this a few times, so I decided to make a reusable one. Personally, I’d say a multi-step component should exist in a component library like shadcn! 🙂</p>`,32)),s("p",null,[n[85]||(n[85]=a("The complete source code is available in the ")),s("a",M,[n[82]||(n[82]=a("repository (")),t(o,{icon:"iconfont icon-github"}),n[83]||(n[83]=s("code",null,"Chinwike1/multi-step-form",-1)),n[84]||(n[84]=a(")"))]),n[86]||(n[86]=a(". Contributions are welcome and feel free to adapt it to your needs or use it as inspiration for your own form implementations."))]),b(" TODO: add ARTICLE CARD "),t(u,r(d({title:"Building a reusable multi-step form with React Hook Form and Zod",desc:"Use React Hook Form and Zod to build a multi-step form component in React that handles input validation, tracks form progress, and more.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const L=v(F,[["render",H]]),W=JSON.parse('{"path":"/blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod.html","title":"Building a reusable multi-step form with React Hook Form and Zod","lang":"en-US","frontmatter":{"lang":"en-US","title":"Building a reusable multi-step form with React Hook Form and Zod","description":"Article(s) > Building a reusable multi-step form with React Hook Form and Zod","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Building a reusable multi-step form with React Hook Form and Zod\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod/multi-step-form-component.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod/demonstrating-continue-button-form.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod/progress-indicator-form.png\\"],\\"datePublished\\":\\"2025-02-26T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chinwike Maduabuchi\\",\\"url\\":\\"https://blog.logrocket.com/author/chinwikemaduabuchi/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Building a reusable multi-step form with React Hook Form and Zod"}],["meta",{"property":"og:description","content":"Article(s) > Building a reusable multi-step form with React Hook Form and Zod"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Building a reusable multi-step form with React Hook Form and Zod"}],["meta",{"property":"article:author","content":"Chinwike Maduabuchi"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-02-26T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Building a reusable multi-step form with React Hook Form and Zod"},{"property":"og:description","content":"Building a reusable multi-step form with React Hook Form and Zod"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2025-02-26T00:00:00.000Z","isOriginal":false,"author":[{"name":"Chinwike Maduabuchi","url":"https://blog.logrocket.com/author/chinwikemaduabuchi/"}],"cover":"/assets/image/blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod/banner.png"},"git":{},"readingTime":{"minutes":14.47,"words":4340},"filePathRelative":"blog.logrocket.com/building-reusable-multi-step-form-react-hook-form-zod.md","copyright":{"author":"Chinwike Maduabuchi"}}');export{L as comp,W as data};
