import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as a,b as o,a as h,t as b,n as d,g as k,w as i,e,r as p,o as f}from"./app-BVguHYKu.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},C={class:"table-of-contents"},q={class:"hint-container tip"},j={href:"https://linkedin.com/in/raystatic/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://x.com/raystatic_",target:"_blank",rel:"noopener noreferrer"},S={class:"hint-container info"},U={href:"https://proandroiddev.com/understanding-the-coroutine-lifecycle-in-kotlin-378d619908ac",target:"_blank",rel:"noopener noreferrer"};function E(m,n){const u=p("VPCard"),t=p("router-link"),r=p("SiteInfo"),c=p("VPIcon"),l=p("KotlinPlayground");return f(),g("div",null,[s("h1",w,[s("a",x,[s("span",null,b(m.$frontmatter.title)+" 관련",1)])]),a(u,d(k({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",C,[s("ul",null,[s("li",null,[a(t,{to:"#what-is-a-coroutine"},{default:i(()=>n[0]||(n[0]=[e("What is a Coroutine?")])),_:1,__:[0]})]),s("li",null,[a(t,{to:"#what-is-a-job"},{default:i(()=>n[1]||(n[1]=[e("What is a Job?")])),_:1,__:[1]})]),s("li",null,[a(t,{to:"#coroutine-job-lifecycle-states"},{default:i(()=>n[2]||(n[2]=[e("Coroutine Job Lifecycle States")])),_:1,__:[2]})]),s("li",null,[a(t,{to:"#job-lifecycle-flow-diagram"},{default:i(()=>n[3]||(n[3]=[e("Job Lifecycle Flow Diagram")])),_:1,__:[3]})]),s("li",null,[a(t,{to:"#state-transitions-explained"},{default:i(()=>n[4]||(n[4]=[e("State Transitions Explained")])),_:1,__:[4]}),s("ul",null,[s("li",null,[a(t,{to:"#_1-new"},{default:i(()=>n[5]||(n[5]=[e("1. New")])),_:1,__:[5]})]),s("li",null,[a(t,{to:"#_2-active"},{default:i(()=>n[6]||(n[6]=[e("2. Active")])),_:1,__:[6]})]),s("li",null,[a(t,{to:"#_3-completing"},{default:i(()=>n[7]||(n[7]=[e("3. Completing")])),_:1,__:[7]})]),s("li",null,[a(t,{to:"#_4-completed"},{default:i(()=>n[8]||(n[8]=[e("4. Completed")])),_:1,__:[8]})]),s("li",null,[a(t,{to:"#_5-cancelling"},{default:i(()=>n[9]||(n[9]=[e("5. Cancelling")])),_:1,__:[9]})]),s("li",null,[a(t,{to:"#_6-cancelled"},{default:i(()=>n[10]||(n[10]=[e("6. Cancelled")])),_:1,__:[10]})])])]),s("li",null,[a(t,{to:"#coroutine-scopes"},{default:i(()=>n[11]||(n[11]=[e("Coroutine Scopes")])),_:1,__:[11]})]),s("li",null,[a(t,{to:"#dispatchers"},{default:i(()=>n[12]||(n[12]=[e("Dispatchers")])),_:1,__:[12]})]),s("li",null,[a(t,{to:"#handling-failures-and-exceptions-in-coroutines"},{default:i(()=>n[13]||(n[13]=[e("Handling Failures and Exceptions in Coroutines")])),_:1,__:[13]}),s("ul",null,[s("li",null,[a(t,{to:"#_1-exception-propagation"},{default:i(()=>n[14]||(n[14]=[e("1. Exception Propagation")])),_:1,__:[14]})]),s("li",null,[a(t,{to:"#_2-usingsupervisorscope"},{default:i(()=>n[15]||(n[15]=[e("2. UsingsupervisorScope")])),_:1,__:[15]})]),s("li",null,[a(t,{to:"#_3-coroutineexceptionhandler"},{default:i(()=>n[16]||(n[16]=[e("3.CoroutineExceptionHandler")])),_:1,__:[16]})]),s("li",null,[a(t,{to:"#_4-cleaning-up-resources"},{default:i(()=>n[17]||(n[17]=[e("4. Cleaning Up Resources")])),_:1,__:[17]})])])]),s("li",null,[a(t,{to:"#effects-of-launching-nested-coroutines"},{default:i(()=>n[18]||(n[18]=[e("Effects of Launching Nested Coroutines")])),_:1,__:[18]}),s("ul",null,[s("li",null,[a(t,{to:"#example-of-nested-coroutines"},{default:i(()=>n[19]||(n[19]=[e("Example of Nested Coroutines")])),_:1,__:[19]})]),s("li",null,[a(t,{to:"#does-a-job-go-into-completed-state-after-cancelling"},{default:i(()=>n[20]||(n[20]=[e("Does a Job Go into Completed State After Cancelling?")])),_:1,__:[20]})])])]),s("li",null,[a(t,{to:"#best-practices-and-suggestions"},{default:i(()=>n[21]||(n[21]=[e("Best Practices and Suggestions")])),_:1,__:[21]}),s("ul",null,[s("li",null,[a(t,{to:"#_1-use-structured-concurrency"},{default:i(()=>n[22]||(n[22]=[e("1. Use Structured Concurrency")])),_:1,__:[22]})]),s("li",null,[a(t,{to:"#_2-prefer-coroutinescope-over-globalscope"},{default:i(()=>n[23]||(n[23]=[e("2. Prefer CoroutineScope Over GlobalScope")])),_:1,__:[23]})]),s("li",null,[a(t,{to:"#_3-handle-exceptions"},{default:i(()=>n[24]||(n[24]=[e("3. Handle Exceptions")])),_:1,__:[24]})]),s("li",null,[a(t,{to:"#_4-use-supervisorscope-when-necessary"},{default:i(()=>n[25]||(n[25]=[e("4. Use SupervisorScope When Necessary")])),_:1,__:[25]})]),s("li",null,[a(t,{to:"#_5-monitor-coroutine-states"},{default:i(()=>n[26]||(n[26]=[e("5. Monitor Coroutine States")])),_:1,__:[26]})]),s("li",null,[a(t,{to:"#_6-avoid-blocking-calls"},{default:i(()=>n[27]||(n[27]=[e("6. Avoid Blocking Calls")])),_:1,__:[27]})])])]),s("li",null,[a(t,{to:"#conclusion"},{default:i(()=>n[28]||(n[28]=[e("Conclusion")])),_:1,__:[28]})])])]),n[44]||(n[44]=s("hr",null,null,-1)),a(r,{name:"Understanding the Coroutine Lifecycle in Kotlin",desc:"Kotlin’s coroutines offer a powerful way to manage concurrency and asynchronous programming. However, to use them effectively, it’s crucial to understand the lifecycle of a coroutine. In this blog post, we’ll explore the coroutine lifecycle, focusing on the states of a coroutine’s Job, how they transition between states, and practical examples to illustrate each state, including the effects of launching nested coroutines. Additionally, we’ll discuss best practices and modifications.",url:"https://droidcon.com/understanding-the-coroutine-lifecycle-in-kotlin",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",preview:"https://droidcon.com/wp-content/uploads/2024/10/1_sdb3Y6ckQGLcuekR8RD4Ew-600x300.webp"}),s("figure",null,[n[31]||(n[31]=s("img",{src:"https://droidcon.com/wp-content/uploads/2024/10/1_sdb3Y6ckQGLcuekR8RD4Ew-600x300.webp",alt:'Diagram from <VPIcon icon="fas fa-globe"/>',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[29]||(n[29]=e("Diagram from ")),a(c,{icon:"fas fa-globe"}),n[30]||(n[30]=s("code",null,"kotlinlang.org",-1))])]),n[45]||(n[45]=o(`<p>Kotlin’s coroutines offer a powerful way to manage concurrency and asynchronous programming. However, to use them effectively, it’s crucial to understand the lifecycle of a coroutine. In this blog post, we’ll explore the coroutine lifecycle, focusing on the states of a coroutine’s Job, how they transition between states, and practical examples to illustrate each state, including the effects of launching nested coroutines. Additionally, we’ll discuss best practices and modifications.</p><hr><h2 id="what-is-a-coroutine" tabindex="-1"><a class="header-anchor" href="#what-is-a-coroutine"><span>What is a Coroutine?</span></a></h2><p>Coroutines are lightweight threads that allow you to perform asynchronous tasks without blocking the main thread. They provide a way to write non-blocking code that is easy to read and maintain. In Kotlin, coroutines are structured around the concept of jobs.</p><hr><h2 id="what-is-a-job" tabindex="-1"><a class="header-anchor" href="#what-is-a-job"><span>What is a Job?</span></a></h2><p>A Job is a handle to a coroutine. It represents its lifecycle and allows you to manage its execution, including starting, cancelling, and checking its status. The Job provides several states that a coroutine can be in during its lifecycle.</p><hr><h2 id="coroutine-job-lifecycle-states" tabindex="-1"><a class="header-anchor" href="#coroutine-job-lifecycle-states"><span>Coroutine Job Lifecycle States</span></a></h2><p>The lifecycle of a coroutine’s Job includes the following states:</p><ul><li><strong>New</strong>: The coroutine is created but not yet started.</li><li><strong>Active</strong>: The coroutine is currently running.</li><li><strong>Completing</strong>: The coroutine is finishing its work.</li><li><strong>Completed</strong>: The coroutine has finished its execution successfully.</li><li><strong>Cancelling</strong>: The coroutine is in the process of being cancelled.</li><li><strong>Cancelled</strong>: The coroutine has been cancelled and will not complete.</li></ul><hr><h2 id="job-lifecycle-flow-diagram" tabindex="-1"><a class="header-anchor" href="#job-lifecycle-flow-diagram"><span>Job Lifecycle Flow Diagram</span></a></h2><p>To visualize the transitions between these states, consider the following flow diagram:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line"> wait children</span>
<span class="line"> +-----+ start  +--------+ complete   +-------------+  finish  +-----------+</span>
<span class="line"> | New | -----&gt; | Active | --------&gt; | Completing  | -------&gt; | Completed |</span>
<span class="line"> +-----+        +--------+            +-------------+          +-----------+</span>
<span class="line">                   |  cancel / fail     |</span>
<span class="line">                   |   +----------------+</span>
<span class="line">                   |   |</span>
<span class="line">                   V   V</span>
<span class="line">             +------------+                           finish  +-----------+</span>
<span class="line">             | Cancelling | --------------------------------&gt; | Cancelled |</span>
<span class="line">             +------------+                                   +-----------+</span>
<span class="line"></span>
<span class="line">                      (Diagram from kotlinlang.org)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="state-transitions-explained" tabindex="-1"><a class="header-anchor" href="#state-transitions-explained"><span>State Transitions Explained</span></a></h2><h3 id="_1-new" tabindex="-1"><a class="header-anchor" href="#_1-new"><span>1. New</span></a></h3><p>The New state is where a coroutine starts its lifecycle. A coroutine is created but not yet running.</p><div class="hint-container tip"><p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> job <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine is starting...&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Job state (New): </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">job<span class="token punctuation">.</span>isActive</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// OUTPUT:</span></span>
<span class="line"><span class="token comment">// Job state (New): false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,20)),a(l,{title:"1.%20New",key:"36b2c638",settings:"%7B%7D",files:"eJxFjTEOwjAMRa9iRQwtgw+AxIAYkBhYGAlDiAIYUrtK3IJU9e4Eqoq/2MN7/58MNa0khadoJH6jlySdEoeMS8uWrx1D44irGgbLUNK7CA+5wBp2US4uHr20AaPr2N9n5ps2EWvkyprt3AmUIatL5b8hojX1hI/T+Rv70l9ADVAdwqtewWIok0h545X6MP7MYpnzB+g/QIA="}),n[46]||(n[46]=o(`<h3 id="_2-active" tabindex="-1"><a class="header-anchor" href="#_2-active"><span>2. Active</span></a></h3><p>When the coroutine begins its execution, it transitions to the Active state. In this state, the coroutine can perform its designated tasks.</p><div class="hint-container tip"><p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> job <span class="token operator">=</span> launch <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine is active now!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// Simulating work</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Job state (Active): </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">job<span class="token punctuation">.</span>isActive</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// OUTPUT:</span></span>
<span class="line"><span class="token comment">// Coroutine is active now!</span></span>
<span class="line"><span class="token comment">// Job state (Active): true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),a(l,{title:"2.%20Active",key:"cfee2b40",settings:"%7B%7D",files:"eJxFT7EOgkAM/ZVKHMABcDVxUDdXR8/hRMTC0ZLjDjSEf/fwgryhTV5fX1+vAdYNawMVG4X0jjPWbA1S3sYbQYKelqCWSGEEe9CWjoqzCqmAQRA4dFJByXc3VNJS9pr5CY1GMopCEZxmV8AWZGawy4G4X4kgWuSPXMlPuE3TNIIkgQvWVkm3VEDPuvK60TdfF/+zS9AaaXIIDz/3aAfrweWKsfXE+D81sSVPHwlydsHtC7hAU9Y="}),n[47]||(n[47]=o(`<h3 id="_3-completing" tabindex="-1"><a class="header-anchor" href="#_3-completing"><span>3. Completing</span></a></h3><p>As the coroutine finishes its tasks, it enters the Completing state. This state indicates that the coroutine is about to finish its execution.</p><div class="hint-container tip"><p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> job <span class="token operator">=</span> launch <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine is working...&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// Simulating work</span></span>
<span class="line">        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine is completing...&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Register callback</span></span>
<span class="line">    job<span class="token punctuation">.</span><span class="token function">invokeOnCompletion</span> <span class="token punctuation">{</span> </span>
<span class="line">        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Job completed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token string-literal singleline"><span class="token string">&quot;successfully&quot;</span></span> <span class="token keyword">else</span> <span class="token string-literal singleline"><span class="token string">&quot;failed or cancelled&quot;</span></span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// OUTPUT:</span></span>
<span class="line"><span class="token comment">// Coroutine is working...</span></span>
<span class="line"><span class="token comment">// Coroutine is completing...</span></span>
<span class="line"><span class="token comment">// Job completed: successfully</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),a(l,{title:"3.%20Completing",key:"4f3ec118",settings:"%7B%7D",files:"eJyFkD9PwzAQxb/KyWJIGNKyImWhGwsSjJjBdZxwzeUu8p9CFfW7Y0MqEELiFuue737v2c8Kp1l8hFEiIb83VrykiOxCc61Zc58YJoNc1dCCT3xHYkfkARbNkOtoCA6yz5dkEtvXi15q9siRuNJqd6ECBngTXwhN02hVf093jsyputlutzVsNvCEUyKTd4bPhX+pVqaZXJn/CT5/HZn36AYM0Xmwhmhv7ErM2Rvko4zugXcrQhgW+MvwPj909XHdLVwt2EOFEdoWOBHVoFVI1roQ+tyetAJHwWW1N0iuAynubB3lRqvz75Qly0HKX2vOknr5AHz5hi0="}),n[48]||(n[48]=o(`<h3 id="_4-completed" tabindex="-1"><a class="header-anchor" href="#_4-completed"><span>4. Completed</span></a></h3><p>Once the coroutine finishes its execution, it transitions to the Completed state. The coroutine has successfully executed its tasks.</p><div class="hint-container tip"><p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> job <span class="token operator">=</span> launch <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Task started...&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// Simulating work</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Job state (Completed): </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">job<span class="token punctuation">.</span>isCompleted</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// OUTPUT:</span></span>
<span class="line"><span class="token comment">// Task started...</span></span>
<span class="line"><span class="token comment">// Job state (Completed): true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),a(l,{title:"4.%20Completed",key:"6eee8af4",settings:"%7B%7D",files:"eJxFTrsOwjAM/BWrYmgZ0rIiscDGChthCG0oaVO7ShMeqvrvuIqgHmz5fL67S2K6npyHlrw1+BYlOQreoB7EWqLEe0DolME0gx24gHtLZWuwhlEicD2VhYZufLQqYPn44XP1zqC3mMrkrIYWBq+c15UQQibZwqq0VZ90UxRFBnkOJ9MFqzhBDS9ybeRNccTOdqKhOVLcF5sjB2EXryE9UNdbzXbZFlbj/GKGPzZxABZj1eT6BXTuUsc="}),n[49]||(n[49]=o(`<h3 id="_5-cancelling" tabindex="-1"><a class="header-anchor" href="#_5-cancelling"><span>5. Cancelling</span></a></h3><p>If a coroutine is cancelled, it enters the Cancelling state. In this state, the coroutine is in the process of being stopped, and any ongoing work should be cleaned up.</p><div class="hint-container tip"><p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> job <span class="token operator">=</span> launch <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span></span>
<span class="line">                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine is working... </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">// Simulating work</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine is cancelled&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Register callback</span></span>
<span class="line">    job<span class="token punctuation">.</span><span class="token function">invokeOnCompletion</span> <span class="token punctuation">{</span> cause <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token function">println</span><span class="token punctuation">(</span>&quot;Job completed<span class="token operator">:</span> $<span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token string-literal singleline"><span class="token string">&quot;successfully&quot;</span></span> <span class="token keyword">else</span> <span class="token string-literal singleline"><span class="token string">&quot;failed or cancelled: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">cause<span class="token punctuation">.</span>message</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">}</span>&quot;<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// Let the coroutine run for a bit</span></span>
<span class="line">    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Cancelling the coroutine...&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    job<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Cancelling the coroutine</span></span>
<span class="line">    job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Wait for the coroutine to ensure we see the invokeOnCompletion output</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// OUTPUT:</span></span>
<span class="line"><span class="token comment">// Coroutine is working... 0</span></span>
<span class="line"><span class="token comment">// Coroutine is working... 1</span></span>
<span class="line"><span class="token comment">// Cancelling the coroutine...</span></span>
<span class="line"><span class="token comment">// Coroutine is cancelled</span></span>
<span class="line"><span class="token comment">// Job completed: failed or cancelled: CancellationException</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),a(l,{title:"5.%20Cancelling",key:"37449f4b",settings:"%7B%7D",files:"eJx1Us1O8zAQfJVVxCH5pC+UAxekcoAbQkKCAwfMwXU3ZelmHfkHqKq+O5smpUTAKlJk74xnPN6ngtrOhwRrn5jko3Y++JxIMNb/jBhpskBrScoK5hCyXLF3a5IVbI2A1ptlePULbbLN4l4O+32lsPm+7CtghzaV5xVsgeD/5bTbVxdIEktpiuuDFaAI7z70snVdwwmZovpJXCLbTXk+m1VwegoP1Ga2yl7tqVP47rjcQUNimX84/cOHs+KQGZcTD+OB40/l73FFMWFQPPPCutGAJlWTvPk13sm1bzvGRF40C2dzxEkeR/0bjdcNYFxewMmWGigHwnwOkpkrMEXMzmGMjS43pgBkbZuisaRewfdGRuP9CXt23SrernBnCv3G24xXGMI8m41p3mKC9IJq4xCFjgI0eqyFBaWB8y2xQasPf8LS1/sS6qMYPOloqcRfnCP61e/HULGPltJefeopeUCJOSC8I0TUDW3/ErfCu6ym9a7F8ycI6vH1"}),n[50]||(n[50]=s("h3",{id:"_6-cancelled",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_6-cancelled"},[s("span",null,"6. Cancelled")])],-1)),n[51]||(n[51]=s("p",null,"After the cancellation is complete, the coroutine reaches the Cancelled state. At this point, the coroutine has stopped its execution and will not complete its tasks.",-1)),s("div",q,[n[32]||(n[32]=o(`<p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> job <span class="token operator">=</span> launch <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Starting coroutine...&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token comment">// Simulating a long task</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Register callback</span></span>
<span class="line">    job<span class="token punctuation">.</span><span class="token function">invokeOnCompletion</span> <span class="token punctuation">{</span> </span>
<span class="line">        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Job completed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token string-literal singleline"><span class="token string">&quot;successfully&quot;</span></span> <span class="token keyword">else</span> <span class="token string-literal singleline"><span class="token string">&quot;failed or cancelled&quot;</span></span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">// Let it run for a bit</span></span>
<span class="line">    job<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Cancelling the coroutine</span></span>
<span class="line">    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Job state (Cancelled): </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">job<span class="token punctuation">.</span>isCancelled</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// Should be true</span></span>
<span class="line">    job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Wait for the coroutine to ensure we see the invokeOnCompletion output</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// OUTPUT:</span></span>
<span class="line"><span class="token comment">// Starting coroutine...</span></span>
<span class="line"><span class="token comment">// Job state (Cancelled): true</span></span>
<span class="line"><span class="token comment">// Job completed: failed or cancelled: CancellationException</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::A CoroutineScope defines</p>`,3)),a(l,{title:"6.%20Cancelled",key:"0829710a",settings:"%7B%7D",files:"eJxtUctqwzAQ/JXF9GD34IZCL4VcmlspFJpDD1UPsrxOFK9XRo+0IeTfu340IRBdhHZnZ2dGX5nteucjtC6S5d/SOO9StIyhvFesuEkMnbacF7AEn/iFnGktb+CoGOTsNcHOVdIkndhs/+vD6b3lSJyrbB21F9INnOnLslRZccHWSPqQPy4WiwIeHmBtu0R6HNFATq6oQzvBT9MlqA/c2BDRg9FElTYzQPSUlveuxXdeua4njNYxHOGWtFcRbyYQ1s9wd7QN5DbCcgmciApQWUjGYAiNPA8qA6SAUm20JazBDdvZIMlDZaezqVnl5OtptvWGEYRbcoRGBjVUNl40TzyStCBXE+cQQNziJbcJfS0/RB0R8nkE62KwMYYQzrVB2Bjs1iWqoUKIPs1sA3Tnxj8WxKcWhYO6q70QHSCH5BF+EAJKQdo3UhZ4n8SU+M++/wB8ocfi"})]),n[52]||(n[52]=o(`<hr><h2 id="coroutine-scopes" tabindex="-1"><a class="header-anchor" href="#coroutine-scopes"><span>Coroutine Scopes</span></a></h2><p>A <code>CoroutineScope</code> defines the scope within which coroutines can be launched. It helps manage the lifecycle of coroutines and enforces structured concurrency. When a scope is cancelled, all coroutines launched within that scope are also cancelled. The most common coroutine scopes are:</p><ul><li><code>GlobalScope</code>: Launches coroutines that live for the entire lifetime of the application.</li><li><code>CoroutineScope</code>: A user-defined scope that can be tied to specific components (like activities or fragments in Android).</li></ul><hr><h2 id="dispatchers" tabindex="-1"><a class="header-anchor" href="#dispatchers"><span>Dispatchers</span></a></h2><p>Dispatchers define the thread or thread pool that the coroutine will run on. Common dispatchers include:</p><ul><li><code>Dispatchers.Main</code>: Used for UI operations and runs on the main thread.</li><li><code>Dispatchers.IO</code>: Optimized for I/O operations, like network calls or reading files.</li><li><code>Dispatchers.Default</code>: Used for CPU-intensive tasks.</li></ul><p>The choice of dispatcher affects how coroutines execute and interact with the rest of the application, impacting their lifecycle and performance.</p><hr><h2 id="handling-failures-and-exceptions-in-coroutines" tabindex="-1"><a class="header-anchor" href="#handling-failures-and-exceptions-in-coroutines"><span>Handling Failures and Exceptions in Coroutines</span></a></h2><p>Managing failures and exceptions is crucial for building robust applications. Coroutines provide structured mechanisms for handling exceptions that may arise during asynchronous operations. Here are some important concepts and practices for managing exceptions in coroutines:</p><h3 id="_1-exception-propagation" tabindex="-1"><a class="header-anchor" href="#_1-exception-propagation"><span>1. Exception Propagation</span></a></h3><p>By default, exceptions thrown in a coroutine are propagated to the parent coroutine. If a parent coroutine catches an exception, the child coroutine will be cancelled, and the exception will be passed up the coroutine hierarchy.</p><div class="hint-container tip"><p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> parentJob <span class="token operator">=</span> launch <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            launch <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token function">Exception</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Child coroutine failed&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Caught exception in parent: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">e<span class="token punctuation">.</span>message</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    parentJob<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// OUTPUT:</span></span>
<span class="line"><span class="token comment">// Caught exception in parent: Child coroutine failed</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,15)),a(l,{title:"1.%20Exception%20Propagation",key:"eb8dd506",settings:"%7B%7D",files:"eJxlUMsOgkAM/JWGeAAPfICJF40Xf8H1sK4VqktLlq6PGP5dMIivuTRNpzPtbBKqagkKJ1FPfM2dBIlKjE0+NWz4EBkqS5xmMIcQeeHFnYgLuBuGDmfrobYBWdey6yjeRnbla9pDw+2z7fFPGsllkAusrg5rJeHUJMuS/B7Gs+BgyePeJNn3cvtuW3BWO/kUZ2+l7NetDsTqnw42FqUCvqhAPLw0g8kd8wqbxhbYfnkOfkMZE8iP0mdluBsk2wehr2r/"}),n[53]||(n[53]=o(`<h3 id="_2-usingsupervisorscope" tabindex="-1"><a class="header-anchor" href="#_2-usingsupervisorscope"><span>2. Using<code>supervisorScope</code></span></a></h3><p>When using<code>supervisorScope</code>, you can handle failures of child coroutines independently. If one child coroutine fails, it does not cancel the other child coroutines or the parent coroutine.</p><div class="hint-container tip"><p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span></span>
<span class="line">    supervisorScope <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">val</span> child1 <span class="token operator">=</span> launch <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Child 1 started&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Child 1 completed&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">val</span> child2 <span class="token operator">=</span> launch <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Child 2 started&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token function">Exception</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Child 2 failed&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">val</span> child3 <span class="token operator">=</span> launch <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Child 3 started&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Child 3 completed&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Parent coroutine continues...&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// OUTPUT:</span></span>
<span class="line"><span class="token comment">// Child 1 started</span></span>
<span class="line"><span class="token comment">// Child 2 started</span></span>
<span class="line"><span class="token comment">// Child 3 started</span></span>
<span class="line"><span class="token comment">// Child 1 completed</span></span>
<span class="line"><span class="token comment">// Child 3 completed</span></span>
<span class="line"><span class="token comment">// Parent coroutine continues...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),a(l,{title:"2.%20UsingsupervisorScope",key:"2e83ec42",settings:"%7B%7D",files:"eJylkk9rwzAMxb+KyCndISTNeZeN3Qc7zjsYx11EHckoctcx9t3njI71P4G+i4yl9/gh9FrgEFkU1qwBaVs5Fk6K5MfqzpChVSIYLFK5gHuQRA+B3RrpHb4MQdaYopcNjiwvjqP/+560sQFcj6FrsjXYRK7fb0+KgqSBSlM8ToPQwKhW1HemWBxOdj7Yz7Kp6/qocRrheIjBH4d8nwFbzgZbXgTTXvgDnrbOR0Xed6wshhkQ7WyI9vbttNe3syv/rmcrnjSbdleRX5RryudRVb8J2VK8/QAEFqq7"}),n[54]||(n[54]=o(`<h3 id="_3-coroutineexceptionhandler" tabindex="-1"><a class="header-anchor" href="#_3-coroutineexceptionhandler"><span>3.<code>CoroutineExceptionHandler</code></span></a></h3><p>You can use<code>CoroutineExceptionHandler</code>to handle uncaught exceptions at the coroutine level. This handler can be passed as part of the coroutine context to manage exceptions that are not caught within the coroutine.</p><div class="hint-container tip"><p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> exceptionHandler <span class="token operator">=</span> CoroutineExceptionHandler <span class="token punctuation">{</span> _<span class="token punctuation">,</span> exception <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Caught exception: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">exception<span class="token punctuation">.</span>message</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">val</span> job <span class="token operator">=</span> <span class="token function">launch</span><span class="token punctuation">(</span>exceptionHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token function">Exception</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine failed&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// OUTPUT:</span></span>
<span class="line"><span class="token comment">// Caught exception: Coroutine failed</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),a(l,{title:"3.CoroutineExceptionHandler",key:"98c48ee4",settings:"%7B%7D",files:"eJxdkN0KgkAQhV9lkC40ygcI6iIJeoc2YtNVV9cZWXdLEN+9XUQNz80wf2c+5hHIpiVtoCajJPZxSpqskSi6eM+QYW4RGi4xjOAM2uJVUVpLLGBgCE4frkD0qWiNJLxzzJTQbjKZbW7b3gCvw7oBx8vk49VqiUZhyIKE26I069gJdsOSxI3oOl6IkQXRtDx60pmmorcDUNxiWoZbtGjm9jKlpi8shP7ujA05l0pk/xd8cN5xRf4bDF0peP4APPVtRQ=="}),n[55]||(n[55]=o(`<h3 id="_4-cleaning-up-resources" tabindex="-1"><a class="header-anchor" href="#_4-cleaning-up-resources"><span>4. Cleaning Up Resources</span></a></h3><p>When a coroutine fails or is cancelled, it is important to clean up any resources (like closing files or releasing locks). Use the<code>finally</code>block to ensure that cleanup code runs regardless of whether an exception occurs.</p><div class="hint-container tip"><p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> job <span class="token operator">=</span> launch <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine started...&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token function">Exception</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Something went wrong&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Cleaning up resources...&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Wait for the coroutine to finish</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// OUTPUT:</span></span>
<span class="line"><span class="token comment">// Coroutine started...</span></span>
<span class="line"><span class="token comment">// Cleaning up resources...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),a(l,{title:"4.%20Cleaning%20Up%20Resources",key:"4f7de433",settings:"%7B%7D",files:"eJx9UEtSwzAMvYomq5SFGw7ABoYTsGCBWRjXadQqUkaRSTtM744NlKFd8Da2fk9P76XBcRI12IsR8sFFUcmGnGZ349lznxnGgNyu4A408z1J3CNv4cMzFLwHgp28lSKFzHE45ytMj3/DikmRjbj1zcN5EcwW1NLGOeeb1WX7JlE4trdd110VbFBZ4PEQ02Qole9JxmRDVbYkNlhUeHvBd4IeORD9p4lS4EqRJ9A0S9ZYfLjSdfr+/jzldreTL3/Wa3gOaNCLFn0Jfq0Ek7ob58FzGWtePwHWzXLT"}),n[56]||(n[56]=o(`<hr><h2 id="effects-of-launching-nested-coroutines" tabindex="-1"><a class="header-anchor" href="#effects-of-launching-nested-coroutines"><span>Effects of Launching Nested Coroutines</span></a></h2><p>Nested coroutines can affect the lifecycle and behavior of parent coroutines, especially in terms of cancellation and completion. When you launch a coroutine inside another coroutine (nested coroutine), it inherits the lifecycle of its parent. This means that if the parent coroutine is cancelled, the nested coroutine will also be cancelled unless it is launched in a different context or scope.</p><h3 id="example-of-nested-coroutines" tabindex="-1"><a class="header-anchor" href="#example-of-nested-coroutines"><span>Example of Nested Coroutines</span></a></h3><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> parentJob <span class="token operator">=</span> launch <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Parent coroutine started on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">val</span> childJob <span class="token operator">=</span> <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Child coroutine started on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token comment">// Simulating work</span></span>
<span class="line">            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Child coroutine completed&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// Let the child coroutine run for a bit</span></span>
<span class="line">        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Cancelling the parent coroutine...&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Cancelling the parent coroutine</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// Register callback</span></span>
<span class="line">    parentJob<span class="token punctuation">.</span><span class="token function">invokeOnCompletion</span> <span class="token punctuation">{</span> cause <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token function">println</span><span class="token punctuation">(</span>&quot;Parent job completed<span class="token operator">:</span> $<span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token string-literal singleline"><span class="token string">&quot;successfully&quot;</span></span> <span class="token keyword">else</span> <span class="token string-literal singleline"><span class="token string">&quot;failed or cancelled: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">cause<span class="token punctuation">.</span>message</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">}</span>&quot;<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    parentJob<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Wait for the parent coroutine to finish</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// OUTPUT:</span></span>
<span class="line"><span class="token comment">// Parent coroutine started on main</span></span>
<span class="line"><span class="token comment">// Child coroutine started on DefaultDispatcher-worker-1</span></span>
<span class="line"><span class="token comment">// Cancelling the parent coroutine...</span></span>
<span class="line"><span class="token comment">// Parent job completed: failed or cancelled: CancellationException</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p>`,6)),a(l,{title:"Example%20of%20Nested%20Coroutines",key:"8fb3bdb4",settings:"%7B%7D",files:"eJylU0tr20AQ/iuD6EEqdOP2WHAPdU6l0NIGcsjmsF6vpIlHs2IfeWDy3zOSHCsOIQlkTlp2vsfMt7oosOt9SLD1iZBvlfXB54TsovqsWXOdGTqDXFawhJD5J3m7RW5gpxmkrg1Bb4Lj9MuvpYVMZts+3g7VB+REXOri79gHBwmIyYTkNuAZPu3O2uDMRtkchq7pVFaKTefudVHNhIOkbZE2TxXLU4y9SbZ1IapTV5tMqXpq49jKasB/2MlQG0fmrvy2WCwqODmB/9hlMsLZwI0P2/fqW9/15MTBEf/9/DnJfH2U+e0SpFZwz3gkIah9AANrTC9lsDJsHUnUzYifopsJlFJHDuzYLuGL5hvQCbS3LO3/XIMxuSAcRGtj97s4PBaFfO237g+vptlRdr+T5hwdfPnxyvu5ktgP+/oueWEN5YRbLoEzUQW6iNlaF2MtxztdgCO51kVtkIaYB1fjNBPDiFad9JtmyHiOeT/P7PrKjz+DDHhuMI3LfmkbkDzUyBhbzcJRXD4AsC4ekA=="}),n[57]||(n[57]=o(`<p>In this example, when the parent coroutine is cancelled, the child coroutine is also cancelled, demonstrating the inherited lifecycle behavior of nested coroutines.</p><h3 id="does-a-job-go-into-completed-state-after-cancelling" tabindex="-1"><a class="header-anchor" href="#does-a-job-go-into-completed-state-after-cancelling"><span>Does a Job Go into Completed State After Cancelling?</span></a></h3><p>Yes, a Job transitions to the Completed state after being cancelled. Here’s how you can verify that:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> job <span class="token operator">=</span> launch <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine is working...&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// Simulating work</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    job<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line">    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Job completed state: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">job<span class="token punctuation">.</span>isCompleted</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// OUTPUT:</span></span>
<span class="line"><span class="token comment">// Coroutine is working...</span></span>
<span class="line"><span class="token comment">// Job completed state: true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),a(l,{title:"Does%20a%20Job%20Go%20into%20Completed%20State%20After%20Cancelling%3F",key:"07683348",settings:"%7B%7D",files:"eJxFTr0OgjAQfpULcQCHiquJi26ujtah1qqnxx0prT8xvLsFJNxyyfd/yLCqxQd4SCDkt7LiJQZk16i5Zs2XyFAZ5LyANfjIGxL7QL7CVzOkexqCu5wSSSayvY14d7VHDsS5zrZjKmADL/FdglJKZ8WkPjsyn3xZlmUBiwXssYpkkufaGwZdO7xUqKxh6yj/B3TIXfqZAzB179I6K1VNLrgzNMEEt4LZt3Ngsx2Jtt+S8rPjDwcQWeE="}),n[58]||(n[58]=o('<hr><h2 id="best-practices-and-suggestions" tabindex="-1"><a class="header-anchor" href="#best-practices-and-suggestions"><span>Best Practices and Suggestions</span></a></h2><h3 id="_1-use-structured-concurrency" tabindex="-1"><a class="header-anchor" href="#_1-use-structured-concurrency"><span>1. Use Structured Concurrency</span></a></h3><p>Always launch coroutines within a specific scope, ensuring that they are tied to the lifecycle of the component that creates them. This prevents memory leaks and ensures proper cancellation.</p><h3 id="_2-prefer-coroutinescope-over-globalscope" tabindex="-1"><a class="header-anchor" href="#_2-prefer-coroutinescope-over-globalscope"><span>2. Prefer CoroutineScope Over GlobalScope</span></a></h3><p>Use<code>CoroutineScope</code>for managing coroutines tied to specific components (e.g., activities, fragments) instead of<code>GlobalScope</code>, which can lead to uncontrolled coroutine lifetimes.</p><h3 id="_3-handle-exceptions" tabindex="-1"><a class="header-anchor" href="#_3-handle-exceptions"><span>3. Handle Exceptions</span></a></h3><p>Implement exception handling within coroutines to manage failures gracefully. Use<code>try-catch</code>blocks or coroutine exception handlers to catch and handle exceptions effectively.</p><h3 id="_4-use-supervisorscope-when-necessary" tabindex="-1"><a class="header-anchor" href="#_4-use-supervisorscope-when-necessary"><span>4. Use SupervisorScope When Necessary</span></a></h3><p>When dealing with nested coroutines, consider using<code>supervisorScope</code>to prevent failures in one child coroutine from affecting others.</p><h3 id="_5-monitor-coroutine-states" tabindex="-1"><a class="header-anchor" href="#_5-monitor-coroutine-states"><span>5. Monitor Coroutine States</span></a></h3><p>Utilize<code>invokeOnCompletion</code>and check the states of jobs to manage the lifecycle and handle any necessary cleanup or state checks.</p><h3 id="_6-avoid-blocking-calls" tabindex="-1"><a class="header-anchor" href="#_6-avoid-blocking-calls"><span>6. Avoid Blocking Calls</span></a></h3><p>Make sure not to block the coroutine dispatcher with long-running tasks. Use<code>withContext</code>to switch contexts if needed.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Understanding the lifecycle of coroutines, including the effects of nested coroutines and the role of<code>supervisorScope</code>, is essential for writing robust asynchronous code in Kotlin. By managing parent-child relationships and handling cancellations and failures effectively, you can create efficient and reliable applications.</p><p>Whether you’re using<code>invokeOnCompletion</code>for cleanup, managing nested coroutines, or utilizing structured concurrency, Kotlin’s coroutines provide powerful tools for handling concurrency with ease.</p>',18)),s("p",null,[n[39]||(n[39]=e("That’s it for this blog. Let’s connect on")),s("a",j,[s("strong",null,[n[33]||(n[33]=e("LinkedIn (")),a(c,{icon:"fa-brands fa-linkedin"}),n[34]||(n[34]=s("code",null,"raystatic",-1)),n[35]||(n[35]=e(")"))])]),n[40]||(n[40]=e("and")),s("a",A,[s("strong",null,[n[36]||(n[36]=e("X (")),a(c,{icon:"fa-brands fa-x-twitter"}),n[37]||(n[37]=s("code",null,"raystatic_",-1)),n[38]||(n[38]=e(")"))])])]),s("div",S,[n[43]||(n[43]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[42]||(n[42]=e("This article is previously published on ")),s("a",U,[a(c,{icon:"fa-brands fa-medium"}),n[41]||(n[41]=e("proandroiddev.com"))])]),a(r,{name:"Understanding the Coroutine Lifecycle in Kotlin",desc:"Kotlin’s coroutines offer a powerful way to manage concurrency and asynchronous programming. However, to use them effectively, it’s crucial…",url:"https://proandroiddev.com/understanding-the-coroutine-lifecycle-in-kotlin-378d619908ac/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1200/1*sdb3Y6ckQGLcuekR8RD4Ew.png"})]),h(" TODO: add ARTICLE CARD "),a(u,d(k({title:"Understanding the Coroutine Lifecycle in Kotlin",desc:"Kotlin’s coroutines offer a powerful way to manage concurrency and asynchronous programming. However, to use them effectively, it’s crucial to understand the lifecycle of a coroutine. In this blog post, we’ll explore the coroutine lifecycle, focusing on the states of a coroutine’s Job, how they transition between states, and practical examples to illustrate each state, including the effects of launching nested coroutines. Additionally, we’ll discuss best practices and modifications.",link:"https://chanhi2000.github.io/bookshelf/droidcon.com/understanding-the-coroutine-lifecycle-in-kotlin.html",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",background:"rgba(4,20,221,0.2)"})),null,16)])}const B=v(y,[["render",E]]),P=JSON.parse('{"path":"/droidcon.com/understanding-the-coroutine-lifecycle-in-kotlin.html","title":"Understanding the Coroutine Lifecycle in Kotlin","lang":"en-US","frontmatter":{"lang":"en-US","title":"Understanding the Coroutine Lifecycle in Kotlin","description":"Article(s) > Understanding the Coroutine Lifecycle in Kotlin","icon":"iconfont icon-kotlin","category":["Java","Kotlin","Article(s)"],"tag":["blog","droidcon.com","java","kotlin"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Understanding the Coroutine Lifecycle in Kotlin\\",\\"image\\":[\\"https://droidcon.com/wp-content/uploads/2024/10/1_sdb3Y6ckQGLcuekR8RD4Ew-600x300.webp\\"],\\"datePublished\\":\\"2024-10-31T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Rahul Ray\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/understanding-the-coroutine-lifecycle-in-kotlin.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Understanding the Coroutine Lifecycle in Kotlin"}],["meta",{"property":"og:description","content":"Article(s) > Understanding the Coroutine Lifecycle in Kotlin"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://droidcon.com/wp-content/uploads/2024/10/1_sdb3Y6ckQGLcuekR8RD4Ew-600x300.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://droidcon.com/wp-content/uploads/2024/10/1_sdb3Y6ckQGLcuekR8RD4Ew-600x300.webp"}],["meta",{"name":"twitter:image:alt","content":"Understanding the Coroutine Lifecycle in Kotlin"}],["meta",{"property":"article:author","content":"Rahul Ray"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"droidcon.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-10-31T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Understanding the Coroutine Lifecycle in Kotlin"},{"property":"og:description","content":"Understanding the Coroutine Lifecycle in Kotlin"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/understanding-the-coroutine-lifecycle-in-kotlin.html"}]],"prev":"/programming/java/articles/README.md","date":"2024-10-31T00:00:00.000Z","isOriginal":false,"author":"Rahul Ray","cover":"https://droidcon.com/wp-content/uploads/2024/10/1_sdb3Y6ckQGLcuekR8RD4Ew-600x300.webp"},"git":{},"readingTime":{"minutes":9.32,"words":2795},"filePathRelative":"droidcon.com/understanding-the-coroutine-lifecycle-in-kotlin.md","copyright":{"author":"Rahul Ray"}}');export{B as comp,P as data};
