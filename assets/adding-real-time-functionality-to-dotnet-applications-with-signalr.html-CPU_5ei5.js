import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as e,b as p,t as g,n as h,g as k,w as i,e as a,r as o,o as v}from"./app-BVguHYKu.js";const b={},y={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},S={href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.signalr.hub?view=aspnetcore-7.0",target:"_blank",rel:"noopener noreferrer"};function T(l,n){const c=o("VPCard"),t=o("router-link"),r=o("SiteInfo"),u=o("VPIcon");return v(),m("div",null,[s("h1",y,[s("a",f,[s("span",null,g(l.$frontmatter.title)+" 관련",1)])]),e(c,h(k({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",w,[s("ul",null,[s("li",null,[e(t,{to:"#installing-and-configuring-signalr"},{default:i(()=>n[0]||(n[0]=[a("Installing And Configuring SignalR")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#connecting-to-signalr-hub-from-postman"},{default:i(()=>n[1]||(n[1]=[a("Connecting To SignalR Hub From Postman")])),_:1,__:[1]})]),s("li",null,[e(t,{to:"#strongly-typed-hubs"},{default:i(()=>n[2]||(n[2]=[a("Strongly Typed Hubs")])),_:1,__:[2]})]),s("li",null,[e(t,{to:"#sending-server-side-messages-with-hubcontext"},{default:i(()=>n[3]||(n[3]=[a("Sending Server-Side Messages With HubContext")])),_:1,__:[3]})]),s("li",null,[e(t,{to:"#sending-messages-to-a-specific-user"},{default:i(()=>n[4]||(n[4]=[a("Sending Messages To a Specific User")])),_:1,__:[4]})]),s("li",null,[e(t,{to:"#in-summary"},{default:i(()=>n[5]||(n[5]=[a("In Summary")])),_:1,__:[5]})])])]),n[11]||(n[11]=s("hr",null,null,-1)),e(r,{name:"Adding Real-Time Functionality To .NET Applications With SignalR",desc:"Today's modern applications must deliver the latest information without refreshing the user interface. If you need to introduce real-time functionality to your application in .NET, there's one library you will most likely reach for - SignalR. SignalR allows you to push content from your server-side code to any connected clients as changes happen in real-time.",url:"https://milanjovanovic.tech/blog/adding-real-time-functionality-to-dotnet-applications-with-signalr/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_043.png"}),n[12]||(n[12]=p(`<p>Today&#39;s modern applications must deliver the latest information without refreshing the user interface.</p><p>If you need to introduce <strong>real-time</strong> functionality to your application in .NET, there&#39;s one library you will most likely reach for - <strong>SignalR</strong>.</p><p><strong>SignalR</strong> allows you to push content from your server-side code to any connected clients as changes happen in real-time.</p><p>Here&#39;s what I&#39;ll teach you in this week&#39;s newsletter:</p><ul><li>Creating your first <strong>SignalR</strong> <code>Hub</code></li><li>Testing <strong>SignalR</strong> from <strong>Postman</strong></li><li>Creating strongly typed hubs</li><li>Sending messages to a specific user</li></ul><p>Let&#39;s see why <strong>SignalR</strong> is so powerful and how easy it is to build <strong>real-time</strong> applications with it.</p><hr><h2 id="installing-and-configuring-signalr" tabindex="-1"><a class="header-anchor" href="#installing-and-configuring-signalr"><span>Installing And Configuring SignalR</span></a></h2><p>To start using <strong>SignalR</strong> you&#39;ll need to:</p><ul><li>Install the NuGet package</li><li>Create the <code>Hub</code> class</li><li>Register the SignalR services</li><li>Map and expose the hub endpoint so clients can connect to it</li></ul><p>Let&#39;s start by installing the <code>Microsoft.AspNetCore.SignalR.Client</code> NuGet package:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>SignalR<span class="token punctuation">.</span>Client</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then you need a SignalR <code>Hub</code>, which is the central component in your application responsible for managing clients and sending messages.</p><p>Let&#39;s create a <code>NotificationsHub</code> by inheriting from the base <code>Hub</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">NotificationsHub</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Hub</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">SendNotification</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> content<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> Clients<span class="token punctuation">.</span>All<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span><span class="token string">&quot;ReceiveNotification&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The SignalR <code>Hub</code> exposes a few useful properties:</p><ul><li><code>Clients</code> - used to invoke methods on the clients connected to this hub</li><li><code>Groups</code> - an abstraction for adding and removing connections from groups</li><li><code>Context</code> - used for accessing information about the hub caller connection</li></ul>`,17)),s("p",null,[n[7]||(n[7]=a("You can learn more about the ")),n[8]||(n[8]=s("code",null,"Hub",-1)),n[9]||(n[9]=a(" class ")),s("a",S,[e(u,{icon:"fa-brands fa-microsoft"}),n[6]||(n[6]=a("here"))]),n[10]||(n[10]=a("."))]),n[13]||(n[13]=p(`<p>Lastly, you need to register the SignalR services by calling the <code>AddSignalR</code> method. You also need to call the <code>MapHub&lt;T&gt;</code> method, where you specify the <code>NotificationsHub</code> class and the path clients will use to connect to the hub.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddSignalR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">MapHub</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NotificationsHub<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;notifications-hub&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now let&#39;s see how we can test the <code>NotificationsHub</code>.</p><hr><h2 id="connecting-to-signalr-hub-from-postman" tabindex="-1"><a class="header-anchor" href="#connecting-to-signalr-hub-from-postman"><span>Connecting To SignalR Hub From Postman</span></a></h2><p>To test SignalR, you need a client that will connect to the <code>Hub</code> instance. You could create a simple application with Blazor or JavaScript, but I will show you a different approach.</p><p>We will use Postman&#39;s <strong>WebSocket Request</strong> to connect to the <code>NotificationsHub</code>.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_043/postman_websocket_request.png?imwidth=2048" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Here&#39;s what we need to do:</p><ul><li>Connect to the <code>NotificationsHub</code></li><li>Set the communication protocol to JSON</li><li>Send messages to call the <code>NotificationsHub</code> methods</li></ul><p>All messages need to end with a null termination character, which is just the ASCII character <code>0x1E</code>.</p><p>Let&#39;s start off by sending this message to set the communication protocol to JSON:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;protocol&quot;</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span>?</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You&#39;ll receive this response from the hub.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_043/postman_websocket_request.png?imwidth=2048" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>We need a slightly different message format to call a message on the <code>Hub</code>. The key is specifying the <code>arguments</code> and <code>target</code>, which is the actual hub method we want to call.</p><p>Let&#39;s say we want to call the <code>SendNotification</code> method on the <code>NotificationsHub</code>:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;arguments&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;This is the notification message.&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;SendNotification&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span>?</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will be the response we get back from the <code>NotificationsHub</code>:</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_043/postman_send_notification_request.png?imwidth=3840" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="strongly-typed-hubs" tabindex="-1"><a class="header-anchor" href="#strongly-typed-hubs"><span>Strongly Typed Hubs</span></a></h2><p>The base <code>Hub</code> class uses the <code>SendAsync</code> method to send messages to connected clients. Unfortunately, we have to use strings to specify client-side methods to invoke, and it&#39;s easy to make a mistake. There&#39;s also nothing enforcing which parameters are used.</p><p>SignalR supports <strong>strongly typed hubs</strong> that aim to solve this.</p><p>First, you need to define a client interface, so let&#39;s create a simple <code>INotificationsClient</code> abstraction:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">INotificationsClient</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task</span> <span class="token function">ReceiveNotification</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The arguments don&#39;t have to be primitive types and can also be objects. SignalR will take care of serialization on the client side.</p><p>After that, you need to update the <code>NotificationsHub</code> class to inherit from the <code>Hub&lt;T&gt;</code> class to make it strongly typed:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">NotificationsHub</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Hub<span class="token punctuation">&lt;</span>INotificationsClient<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">SendNotification</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> content<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> Clients<span class="token punctuation">.</span>All<span class="token punctuation">.</span><span class="token function">ReceiveNotification</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You will lose access to the <code>SendAsync</code> method, and only the methods defined in your client interface will be available.</p><hr><h2 id="sending-server-side-messages-with-hubcontext" tabindex="-1"><a class="header-anchor" href="#sending-server-side-messages-with-hubcontext"><span>Sending Server-Side Messages With <code>HubContext</code></span></a></h2><p>What good is a <code>NotificationsHub</code> if we can&#39;t send notifications from the backend to connected clients? Not much.</p><p>You can use the <code>IHubContext&lt;THub&gt;</code> interface access to the <code>Hub</code> instance in your backend code.</p><p>And you can use <code>IHubContext&lt;THub, TClient&gt;</code> for a strongly typed hub.</p><p>Here&#39;s a simple Minimal API endpoint that injects an <code>IHubContext&lt;NotificationsHub, INotificationsClient&gt;</code> for our strongly typed hub and uses it to send a notification to all connected clients:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token function">MapPost</span><span class="token punctuation">(</span><span class="token string">&quot;notifications/all&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> content<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">IHubContext<span class="token punctuation">&lt;</span>NotificationsHub<span class="token punctuation">,</span> INotificationsClient<span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> context<span class="token punctuation">.</span>Clients<span class="token punctuation">.</span>All<span class="token punctuation">.</span><span class="token function">ReceiveNotification</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">NoContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="sending-messages-to-a-specific-user" tabindex="-1"><a class="header-anchor" href="#sending-messages-to-a-specific-user"><span>Sending Messages To a Specific User</span></a></h2><p>The real value of SignalR is being able to <strong>send messages</strong>, or notifications in this example, to a <strong>specific user</strong>.</p><p>I&#39;ve seen some complicated implementations that manage a dictionary with a user identifier and a map of active connections. Why would you do that when SignalR already supports this functionality?</p><p>You can call the <code>User</code> method and pass it the <code>userId</code> to scope the <code>ReceiveNotification</code> message to that specific user.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token function">MapPost</span><span class="token punctuation">(</span><span class="token string">&quot;notifications/user&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> userId<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> content<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">IHubContext<span class="token punctuation">&lt;</span>NotificationsHub<span class="token punctuation">,</span> INotificationsClient<span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> context<span class="token punctuation">.</span>Clients<span class="token punctuation">.</span><span class="token function">User</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ReceiveNotification</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">NoContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>How does <strong>SignalR</strong> know which user to send the message to?</p><p>It uses the <code>DefaultUserIdProvider</code> internally to extract the user identifier from the claims. To be specific, it&#39;s using the <code>ClaimTypes.NameIdentifier</code> claim. This also implies that you should be authenticated when connecting to the <code>Hub</code>, for example, by passing a JWT.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultUserIdProvider</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserIdProvider</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> <span class="token function">GetUserId</span><span class="token punctuation">(</span><span class="token class-name">HubConnectionContext</span> connection<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> connection<span class="token punctuation">.</span>User<span class="token punctuation">?.</span><span class="token function">FindFirst</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">)</span><span class="token punctuation">?.</span>Value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By default, all the methods in a hub can be called by unauthenticated users. So you need to decorate it with an <code>Authorize</code> attribute to only allow authenticated clients to access the hub.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">NotificationsHub</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Hub<span class="token punctuation">&lt;</span>INotificationsClient<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">SendNotification</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> content<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> Clients<span class="token punctuation">.</span>All<span class="token punctuation">.</span><span class="token function">ReceiveNotification</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="in-summary" tabindex="-1"><a class="header-anchor" href="#in-summary"><span>In Summary</span></a></h2><p>Adding <strong>real-time functionality</strong> to your application creates room for innovation and adds value to your users.</p><p>With <strong>SignalR</strong>, you can start building real-time apps in .NET in minutes.</p><p>You need to grasp one concept - the <code>Hub</code> class. SignalR abstracts away the message transport mechanism, so you don&#39;t have to worry about it.</p><p>Make sure to send authenticated requests to <strong>SignalR</strong> hubs and turn on authentication on the <code>Hub</code>. SignalR will internally track the users connecting to your hubs, allowing you to send them messages based on the user identifier.</p><p>That&#39;s all for today.</p><p>Thanks for reading, and have an awesome Saturday.</p><p>::: tips Today&#39;s action step</p><p>Look at your project and try to find an opportunity to add real-time functionality. Commit 30 min. to build a simple proof of concept with SignalR and see if it can improve your project.</p><p>:::</p>`,59))])}const H=d(b,[["render",T]]),A=JSON.parse('{"path":"/milanjovanovic.tech/adding-real-time-functionality-to-dotnet-applications-with-signalr.html","title":"Adding Real-Time Functionality To .NET Applications With SignalR","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Adding Real-Time Functionality To .NET Applications With SignalR","description":"Article(s) > Adding Real-Time Functionality To .NET Applications With SignalR","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Adding Real-Time Functionality To .NET Applications With SignalR\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_043/postman_websocket_request.png?imwidth=2048\\",\\"https://milanjovanovic.tech/blogs/mnw_043/postman_websocket_request.png?imwidth=2048\\",\\"https://milanjovanovic.tech/blogs/mnw_043/postman_send_notification_request.png?imwidth=3840\\"],\\"datePublished\\":\\"2023-06-24T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/adding-real-time-functionality-to-dotnet-applications-with-signalr.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Adding Real-Time Functionality To .NET Applications With SignalR"}],["meta",{"property":"og:description","content":"Article(s) > Adding Real-Time Functionality To .NET Applications With SignalR"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_043.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_043.png"}],["meta",{"name":"twitter:image:alt","content":"Adding Real-Time Functionality To .NET Applications With SignalR"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-06-24T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Adding Real-Time Functionality To .NET Applications With SignalR"},{"property":"og:description","content":"Adding Real-Time Functionality To .NET Applications With SignalR"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/adding-real-time-functionality-to-dotnet-applications-with-signalr.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-06-24T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_043.png"},"git":{},"readingTime":{"minutes":4.59,"words":1378},"filePathRelative":"milanjovanovic.tech/adding-real-time-functionality-to-dotnet-applications-with-signalr.md","copyright":{"author":"Milan Jovanović"}}');export{H as comp,A as data};
