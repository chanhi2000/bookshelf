import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as e,b as c,a as b,t as h,n as r,g as u,w as t,e as a,r as o,o as y}from"./app-BVguHYKu.js";const f="/bookshelf/assets/image/blog.logrocket.com/javascript-dictionary/banner.png",j={},w={id:"frontmatter-title-관련",tabindex:"-1"},I={class:"header-anchor",href:"#frontmatter-title-관련"},q={class:"table-of-contents"},x={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",target:"_blank",rel:"noopener noreferrer"};function J(d,n){const i=o("VPCard"),p=o("router-link"),k=o("SiteInfo"),l=o("RouteLink"),m=o("VPIcon");return y(),g("div",null,[s("h1",w,[s("a",I,[s("span",null,h(d.$frontmatter.title)+" 관련",1)])]),e(i,r(u({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",q,[s("ul",null,[s("li",null,[e(p,{to:"#objects"},{default:t(()=>n[0]||(n[0]=[a("Objects")])),_:1,__:[0]}),s("ul",null,[s("li",null,[e(p,{to:"#creating-objects"},{default:t(()=>n[1]||(n[1]=[a("Creating objects")])),_:1,__:[1]})]),s("li",null,[e(p,{to:"#accessing-objects"},{default:t(()=>n[2]||(n[2]=[a("Accessing objects")])),_:1,__:[2]})]),s("li",null,[e(p,{to:"#accessing-each-item"},{default:t(()=>n[3]||(n[3]=[a("Accessing each item")])),_:1,__:[3]})]),s("li",null,[e(p,{to:"#looping-through-an-object"},{default:t(()=>n[4]||(n[4]=[a("Looping through an object")])),_:1,__:[4]})]),s("li",null,[e(p,{to:"#accessing-keys-and-values-in-an-object"},{default:t(()=>n[5]||(n[5]=[a("Accessing keys and values in an object")])),_:1,__:[5]})]),s("li",null,[e(p,{to:"#updating-objects"},{default:t(()=>n[6]||(n[6]=[a("Updating objects")])),_:1,__:[6]})]),s("li",null,[e(p,{to:"#deleting-objects"},{default:t(()=>n[7]||(n[7]=[a("Deleting objects")])),_:1,__:[7]})]),s("li",null,[e(p,{to:"#null-prototype-objects"},{default:t(()=>n[8]||(n[8]=[a("Null-prototype objects")])),_:1,__:[8]})])])]),s("li",null,[e(p,{to:"#maps"},{default:t(()=>n[9]||(n[9]=[a("Maps")])),_:1,__:[9]}),s("ul",null,[s("li",null,[e(p,{to:"#creating-maps"},{default:t(()=>n[10]||(n[10]=[a("Creating maps")])),_:1,__:[10]})]),s("li",null,[e(p,{to:"#accessing-maps"},{default:t(()=>n[11]||(n[11]=[a("Accessing maps")])),_:1,__:[11]})]),s("li",null,[e(p,{to:"#looping-through-a-map"},{default:t(()=>n[12]||(n[12]=[a("Looping through a map")])),_:1,__:[12]})]),s("li",null,[e(p,{to:"#accessing-keys-and-values-in-a-map"},{default:t(()=>n[13]||(n[13]=[a("Accessing keys and values in a map")])),_:1,__:[13]})]),s("li",null,[e(p,{to:"#updating-maps"},{default:t(()=>n[14]||(n[14]=[a("Updating maps")])),_:1,__:[14]})]),s("li",null,[e(p,{to:"#deleting-maps"},{default:t(()=>n[15]||(n[15]=[a("Deleting maps")])),_:1,__:[15]})])])]),s("li",null,[e(p,{to:"#key-differences-between-objects-and-maps"},{default:t(()=>n[16]||(n[16]=[a("Key differences between objects and maps")])),_:1,__:[16]})]),s("li",null,[e(p,{to:"#choosing-the-best-dictionary"},{default:t(()=>n[17]||(n[17]=[a("Choosing the best dictionary")])),_:1,__:[17]}),s("ul",null,[s("li",null,[e(p,{to:"#shape-of-data"},{default:t(()=>n[18]||(n[18]=[a("Shape of data")])),_:1,__:[18]})]),s("li",null,[e(p,{to:"#managing-data"},{default:t(()=>n[19]||(n[19]=[a("Managing data")])),_:1,__:[19]})])])]),s("li",null,[e(p,{to:"#conclusion"},{default:t(()=>n[20]||(n[20]=[a("Conclusion")])),_:1,__:[20]})])])]),n[39]||(n[39]=s("hr",null,null,-1)),e(k,{name:"JavaScript dictionary: How to use objects and maps for key-value pairs",desc:"Learn how to use JavaScript dictionaries with Objects and Maps. Discover key differences, performance insights, and use cases with examples.",url:"https://blog.logrocket.com/javascript-dictionary",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/javascript-dictionary/banner.png"}),n[40]||(n[40]=s("p",null,"When working with JavaScript, you may wonder whether it has a built-in dictionary type similar to Python. The short answer is no — JavaScript does not have a dedicated dictionary structure. However, it provides two powerful alternatives for handling key-value pairs: Objects and Maps.",-1)),n[41]||(n[41]=s("figure",null,[s("img",{src:f,alt:"JavaScript Dictionary",tabindex:"0",loading:"lazy"}),s("figcaption",null,"JavaScript Dictionary")],-1)),s("p",null,[n[22]||(n[22]=a("Objects have long been JavaScript’s primary way of storing structured data, while ")),e(l,{to:"/blog.logrocket.com/es6-keyed-collections-maps-and-sets.html"},{default:t(()=>n[21]||(n[21]=[s("strong",null,"Maps were introduced in ES6",-1)])),_:1,__:[21]}),n[23]||(n[23]=a(" to offer more flexibility and efficiency for specific use cases. Understanding when to use an Object versus a Map is crucial for writing clean, optimized, and maintainable JavaScript code."))]),n[42]||(n[42]=c(`<p>In this guide, we’ll break down how to use Objects and Maps, explore their differences, and help you choose the best one for your needs.</p><hr><h2 id="objects" tabindex="-1"><a class="header-anchor" href="#objects"><span>Objects</span></a></h2><p>An object is a JavaScript data type used to store key-value data. If we need to store a user’s information, we can use an object:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">&#39;Boulevard avenue&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Without objects or a key-value data type, we’d have to store each datum of John Doe separately, which would make the app tedious to maintain. From the code sample, you’ll notice we were able to store both a string and a number in the same variable. This is why objects (and key-value pairs in general) are quite important and useful.</p><p>You can store any data type in a JavaScript object, even a function or other objects:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">&quot;Boulevard avenue&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">printName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">favoriteColors</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Blue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="creating-objects" tabindex="-1"><a class="header-anchor" href="#creating-objects"><span>Creating objects</span></a></h3><h4 id="_1-object-literals" tabindex="-1"><a class="header-anchor" href="#_1-object-literals"><span>1. Object literals</span></a></h4><p>The examples we’ve seen so far are object literals:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-object-constructor" tabindex="-1"><a class="header-anchor" href="#_2-object-constructor"><span>2. Object constructor</span></a></h4><p>JavaScript provides an <code>Object</code> constructor that can be used to manage objects:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">;</span> </span>
<span class="line">userInfo<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>Object</code> constructor is first called before values are assigned to keys. This is useful when creating an object from an existing object:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userAppInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">lastLoggedIn</span><span class="token operator">:</span> <span class="token string">&quot;2024-12-10 19:54:23&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span> </span>
<span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">;</span> </span>
<span class="line">userInfo<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> userAppInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line"> userInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> userAppInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;John Doe&#39;, age: 25, lastLoggedIn: &quot;2024-12-10 19:54:23&quot;, todos: 10 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17)),s("p",null,[n[25]||(n[25]=a("Don’t worry if you’re not sure how we accessed the object values; we‘ll tackle that later. In the meantime, just keep in mind that ")),e(l,{to:"/blog.logrocket.com/copy-objects-in-javascript-complete-guide.html"},{default:t(()=>n[24]||(n[24]=[s("strong",null,"an object can be can be “copied” from another",-1)])),_:1,__:[24]}),n[26]||(n[26]=a(". There are easier ways of doing this that we’ll go over in a bit."))]),n[43]||(n[43]=c(`<h4 id="_3-object-create" tabindex="-1"><a class="header-anchor" href="#_3-object-create"><span>3. <code>Object.create()</code></span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userAppInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">lastLoggedIn</span><span class="token operator">:</span> <span class="token string">&quot;2024-12-10 19:54:23&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>userAppInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">;</span> </span>
<span class="line">userInfo<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;John Doe&#39;, age: 25 }</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// { lastLoggedIn: &quot;2024-12-10 19:54:23&quot;, todos: 10 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("p",null,[n[28]||(n[28]=a("With ")),n[29]||(n[29]=s("code",null,"Object.create()",-1)),n[30]||(n[30]=a(", we can pass a custom prototype like we just did above. By default, all objects inherit from ")),s("a",x,[e(m,{icon:"fa-brands fa-firefox"}),n[27]||(n[27]=s("code",null,"Object.prototype",-1))]),n[31]||(n[31]=a(". In this case, we’ve overridden the default prototype of ")),n[32]||(n[32]=s("code",null,"userInfo",-1)),n[33]||(n[33]=a(" with a custom one. You can always access the properties of the prototype in the created object:"))]),n[44]||(n[44]=c(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userAppInfo <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">lastLoggedIn</span><span class="token operator">:</span> <span class="token string">&quot;2024-12-10 19:54:23&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">convertLastLoggedInToDate</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastLoggedIn<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>userAppInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">convertLastLoggedInToDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2024-12-10T18:54:23.000Z</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you pass <code>null</code> into <code>Object.create</code>, it doesn’t come with any prototype. This is called a null-prototype object.</p><h4 id="_4-object-assign" tabindex="-1"><a class="header-anchor" href="#_4-object-assign"><span>4. <code>Object.assign()</code></span></a></h4><p><code>Object.assign</code> is another way of copying an object — or, rather, creating another object from an existing one:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userAppInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">lastLoggedIn</span><span class="token operator">:</span> <span class="token string">&quot;2024-12-10 19:54:23&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> userAppInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span> <span class="token comment">// { name: &#39;John Doe&#39;, age: 25, lastLoggedIn: &#39;2024-12-10 19:54:23&#39;, todos: 10 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>userAppInfo</code> object in this case is the source object while <code>{ name: &#39;John Doe&#39;, age: 25 }</code> is the target object. Similar properties/keys in both the target and source objects are overwritten by the source object:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userAppInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">lastLoggedIn</span><span class="token operator">:</span> <span class="token string">&quot;2024-12-10 19:54:23&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> userAppInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span> <span class="token comment">// { name: &#39;John Doe&#39;, age: 25, todos: 10, lastLoggedIn: &#39;2024-12-10 19:54:23&#39; }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-spread-operator" tabindex="-1"><a class="header-anchor" href="#_5-spread-operator"><span>5. Spread operator</span></a></h4><p>The spread operator is the most common way of creating a new object from an existing one:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userAppInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">lastLoggedIn</span><span class="token operator">:</span> <span class="token string">&quot;2024-12-10 19:54:23&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>userAppInfo<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span> <span class="token comment">// { lastLoggedIn: &quot;2024-12-10 19:54:23&quot;, todos: 10, name: &quot;John Doe&quot;, age: 25 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Similar keys are overwritten by the latest item to the object:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userAppInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">lastLoggedIn</span><span class="token operator">:</span> <span class="token string">&quot;2024-12-10 19:54:23&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>userAppInfo<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span> <span class="token comment">// { lastLoggedIn: &quot;2024-12-10 19:54:23&quot;, todos: 9, name: &quot;John Doe&quot;, age: 25 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this case, the new <code>todos</code> will overwrite that of the <code>userAppInfo</code>. We can simply turn that around like so:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userAppInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">lastLoggedIn</span><span class="token operator">:</span> <span class="token string">&quot;2024-12-10 19:54:23&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">...</span>userAppInfo <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span> <span class="token comment">// { name: &quot;John Doe&quot;, age: 25, lastLoggedIn: &quot;2024-12-10 19:54:23&quot;, todos: 10,  }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="accessing-objects" tabindex="-1"><a class="header-anchor" href="#accessing-objects"><span>Accessing objects</span></a></h3><p>The examples show how objects are accessed as a group:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span> <span class="token comment">// { name: &#39;John Doe&#39;, age: 25 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>There is no special order in which it will be logged; it is simply based on the order of the properties in the object.</p><h3 id="accessing-each-item" tabindex="-1"><a class="header-anchor" href="#accessing-each-item"><span>Accessing each item</span></a></h3><p>Though items in an object may contain related pieces of data, you’d most often need them individually:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// &#39;John Doe&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>createdAt<span class="token punctuation">)</span> <span class="token comment">// undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are cases where the key cannot be used like we did above. For example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;date-of-birth&#39;</span><span class="token operator">:</span> <span class="token number">2000</span> <span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>date<span class="token operator">-</span><span class="token keyword">of</span><span class="token operator">-</span>birth<span class="token punctuation">)</span> <span class="token comment">// will throw an error</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Instead, we use the square brackets with the key as a string:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">[</span><span class="token string">&#39;date-of-birth&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 2000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Another use case for square brackets is for dynamic keys.</p><h3 id="looping-through-an-object" tabindex="-1"><a class="header-anchor" href="#looping-through-an-object"><span>Looping through an object</span></a></h3><p>There are times when you need to perform actions on each item. In this case, you’d need to go through each item. That’s where loops come in:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> userInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// John Doe</span></span>
<span class="line"><span class="token comment">// 25</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29)),s("p",null,[n[35]||(n[35]=a("Unlike ")),e(l,{to:"/blog.logrocket.com/javascript-array-methods.html"},{default:t(()=>n[34]||(n[34]=[s("strong",null,"arrays",-1)])),_:1,__:[34]}),n[36]||(n[36]=a(" and maps in JavaScript, there is no default way of getting the size of an object. We can do that with the ")),n[37]||(n[37]=s("code",null,"for…in",-1)),n[38]||(n[38]=a(" loop:"))]),n[45]||(n[45]=c(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;date-of-birth&quot;</span><span class="token operator">:</span> <span class="token number">2000</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">getSizeOfObject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    length<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> length<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSizeOfObject</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="accessing-keys-and-values-in-an-object" tabindex="-1"><a class="header-anchor" href="#accessing-keys-and-values-in-an-object"><span>Accessing keys and values in an object</span></a></h3><p>With the <code>for…in</code> loop, we can access both the keys and values of an object separately:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> userInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  values<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span> <span class="token comment">// [&#39;name&#39;, &#39;age&#39;]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token comment">// [&#39;John Doe&#39;, 25];</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JavaScript provides an easier way to access the keys and values of an object separately:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> values <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span> <span class="token comment">// [&#39;name&#39;, &#39;age&#39;]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token comment">// [&#39;John Doe&#39;, 25];</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="updating-objects" tabindex="-1"><a class="header-anchor" href="#updating-objects"><span>Updating objects</span></a></h3><p>Created objects are easy to update. You can update an existing property:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">userInfo<span class="token punctuation">.</span>todos <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span> <span class="token comment">// { name: &#39;John Doe&#39;, age: 25, todos: 11 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Also, new properties can be added to the objects:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">userInfo<span class="token punctuation">.</span>lastLoggedIn <span class="token operator">=</span> <span class="token string">&quot;2024-12-10 19:54:23&quot;</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span> <span class="token comment">// { name: &#39;John Doe&#39;, age: 25, todos: 9, lastLoggedIn: &quot;2024-12-10 19:54:23&quot; }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="deleting-objects" tabindex="-1"><a class="header-anchor" href="#deleting-objects"><span>Deleting objects</span></a></h3><p>In JavaScript, it is possible to either delete items of an object or the object entirely:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">delete</span> userInfo<span class="token punctuation">.</span>todos<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>todos<span class="token punctuation">)</span> <span class="token comment">// undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>delete</code> is used to remove a property from an object. To delete an entire object, we’d have to pass <code>null</code> or <code>undefined</code> as the value:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">userInfo <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span> <span class="token comment">// undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="null-prototype-objects" tabindex="-1"><a class="header-anchor" href="#null-prototype-objects"><span>Null-prototype objects</span></a></h3><p>Almost all objects inherit the Object.prototype except a custom prototype is passed. Passing <code>null</code> or <code>undefined</code> as a prototype for an object doesn’t throw an error. Instead, it simply has no prototype whatsoever:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When debugging, this can be confusing as the common methods and properties from the Object.prototype would not be available, for example converting an object to a string:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userAppInfo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">lastLoggedIn</span><span class="token operator">:</span> <span class="token string">&quot;2024-12-10 19:54:23&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userAppInfo<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">;</span></span>
<span class="line">userAppInfo<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userAppInfo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token comment">// [object Object]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userInfo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Cannot convert object to primitive value</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also set <code>null</code> on object literals using the <code>__proto__</code> key:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">__proto__</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userInfo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Cannot convert object to primitive value</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>One good use of setting <code>null</code> as your prototype is that it is immune to prototype pollution attacks. If there is a malicious script added to Object.prototype, all of your objects inheriting that prototype will have access to that script except null-prototype objects.</p><hr><h2 id="maps" tabindex="-1"><a class="header-anchor" href="#maps"><span>Maps</span></a></h2><p>JavaScript maps provide a unique way to store data in key-value pairs. Each item is unique and remembers the order of insertion. One other edge that Maps have over objects is that any data type can be used as both the key or value:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">ageFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">userInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">ageFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">ageFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 25</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="creating-maps" tabindex="-1"><a class="header-anchor" href="#creating-maps"><span>Creating maps</span></a></h3><p>Unlike objects, creating maps is limited to the <code>Map</code> constructor. But it can be also created from objects:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> userMapInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userMapInfo<span class="token punctuation">)</span> <span class="token comment">// Map { &#39;name&#39; =&gt; &#39;John Doe&#39;, &#39;age&#39; =&gt; 25 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>set</code> method as we’ve seen earlier is used to assign properties and values to a map:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">userInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jonathan Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map { &#39;name&#39; =&gt; &#39;Jonathan Doe&#39;, &#39;age&#39; =&gt; 25 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As seen in the example above, duplicate keys are overwritten by the latest addition to the map. So when you think of representing key-value pairs where each key has to be unique, then <code>Map</code> is what you need.</p><h3 id="accessing-maps" tabindex="-1"><a class="header-anchor" href="#accessing-maps"><span>Accessing maps</span></a></h3><p>We use the <code>get</code> method to access an item in Map:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">userInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> userName <span class="token operator">=</span> userInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John Doe</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>size</code> property gives us access to the size of the map; we don’t need to create a custom function for that:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">userInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="looping-through-a-map" tabindex="-1"><a class="header-anchor" href="#looping-through-a-map"><span>Looping through a map</span></a></h3><p>The <code>for…of</code> loop can be used to loop through each item of a map. Each iteration returns an array of the <code>key</code> and <code>value</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> userInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  values<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;name&#39;, &#39;age&#39;]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;John Doe&#39;, 25]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatively, we can use the <code>forEach</code> method to loop through each item of a map:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">userInfo<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  values<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;name&#39;, &#39;age&#39;]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;John Doe&#39;, 25]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The order of each iteration will always be based on the order in which they were inserted.</p><h3 id="accessing-keys-and-values-in-a-map" tabindex="-1"><a class="header-anchor" href="#accessing-keys-and-values-in-a-map"><span>Accessing keys and values in a map</span></a></h3><p>Though, as we’ve seen, you can access the keys and values of a map using loops, JavaScript does provide a custom way of accessing the keys and values:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> keysIterator <span class="token operator">=</span> userInfo<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keysIterator<span class="token punctuation">)</span> <span class="token comment">// MapIterator { &#39;name&#39;, &#39;age&#39; }</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> valuesIterator <span class="token operator">=</span> userInfo<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>valuesIterator<span class="token punctuation">)</span> <span class="token comment">// MapIterator { &#39;John Doe&#39;, 25 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can access each item of both the keys and values by iterating on them:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> valuesIterator<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  values<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token comment">// [&#39;John Doe&#39;, 25]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> keysIterator<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span> <span class="token comment">// [&#39;name&#39;, &#39;age&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or, you can simply access them with the <code>next()</code> function:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keysIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// &#39;name&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keysIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// &#39;age&#39;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>valuesIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// &#39;John Doe&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>valuesIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 25</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="updating-maps" tabindex="-1"><a class="header-anchor" href="#updating-maps"><span>Updating maps</span></a></h3><p>Because keys in maps can only occur once, we can use the <code>set</code> method for updating existing items in the map:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> userMapInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userMapInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Jonathan Doe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userMapInfo<span class="token punctuation">)</span> <span class="token comment">// Map { &#39;name&#39; =&gt; &#39;Jonathan Doe&#39;, &#39;age&#39; =&gt; 25 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Also, as we’ve seen, the <code>set</code> method is used for adding new items:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> userMapInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userMapInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Jonathan Doe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userMapInfo<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userMapInfo<span class="token punctuation">)</span> <span class="token comment">// Map { &#39;name&#39; =&gt; &#39;Jonathan Doe&#39;, &#39;age&#39; =&gt; 25, &#39;todos&#39; =&gt; 12 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="deleting-maps" tabindex="-1"><a class="header-anchor" href="#deleting-maps"><span>Deleting maps</span></a></h3><p>We use the <code>delete</code> method to delete an item of a map with its key:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> userMapInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">userMapInfo<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userMapInfo<span class="token punctuation">)</span> <span class="token comment">// Map { &#39;name&#39; =&gt; &#39;Jonathan Doe&#39;, &#39;age&#39; =&gt; 25 }</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userMapInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JavaScript also offers a <code>clear</code> method to clear out all properties in a map:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> userMapInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userMapInfo<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userMapInfo<span class="token punctuation">)</span> <span class="token comment">// Map {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="key-differences-between-objects-and-maps" tabindex="-1"><a class="header-anchor" href="#key-differences-between-objects-and-maps"><span>Key differences between objects and maps</span></a></h2><table><thead><tr><th style="text-align:right;">Feature</th><th>Objects</th><th>Maps</th></tr></thead><tbody><tr><td style="text-align:right;"><strong>Key types</strong></td><td>Strings &amp; Symbols only</td><td>Any data type (e.g., objects, functions, numbers)</td></tr><tr><td style="text-align:right;"><strong>Iteration order</strong></td><td>Not guaranteed (keys follow insertion order in modern browsers, but older implementations differ)</td><td>Guaranteed (keys maintain insertion order)</td></tr><tr><td style="text-align:right;"><strong>Performance</strong></td><td>Faster for small datasets</td><td>Optimized for frequent additions and deletions</td></tr><tr><td style="text-align:right;"><strong>Size retrieval</strong></td><td>Requires <code>Object.keys(obj).length</code></td><td>Uses <code>map.size</code> property</td></tr><tr><td style="text-align:right;"><strong>Prototype inheritance</strong></td><td>Objects inherit from <code>Object.prototype</code>, which may cause unintended behavior</td><td>Maps do not inherit properties from <code>Object.prototype</code></td></tr><tr><td style="text-align:right;"><strong>Key existence check</strong></td><td>Uses <code>&quot;key&quot; in obj</code> or <code>obj.hasOwnProperty(&quot;key&quot;)</code></td><td>Uses <code>map.has(key)</code></td></tr><tr><td style="text-align:right;"><strong>Serialization</strong></td><td>Supports <code>JSON.stringify()</code></td><td>Needs manual conversion to an Object first</td></tr><tr><td style="text-align:right;"><strong>Use case</strong></td><td>Best for structured, static data (e.g., API responses, user profiles)</td><td>Best for dynamic, frequently updated data (e.g., caching, lookup tables)</td></tr></tbody></table><hr><h2 id="choosing-the-best-dictionary" tabindex="-1"><a class="header-anchor" href="#choosing-the-best-dictionary"><span>Choosing the best dictionary</span></a></h2><p>When it comes to choosing the best dictionary-like structure for your use case, the shape of the data and how you want it to be handled is paramount.</p><h3 id="shape-of-data" tabindex="-1"><a class="header-anchor" href="#shape-of-data"><span>Shape of data</span></a></h3><p>The shape of your data determines whether an Object or a Map is more appropriate.</p><ul><li><strong>Objects</strong> are ideal for structured, fixed-key data where you have predefined properties</li><li><strong>Maps</strong> are better suited for dynamic key-value pairs where keys may change frequently or need to support different data types</li></ul><h3 id="managing-data" tabindex="-1"><a class="header-anchor" href="#managing-data"><span>Managing data</span></a></h3><p>How you manage data (insertion, lookup, deletion) also plays a key role.</p><h4 id="performance-considerations" tabindex="-1"><a class="header-anchor" href="#performance-considerations"><span>Performance considerations</span></a></h4><ul><li>Objects provide fast lookups but suffer from key collision risks</li><li>Maps are optimized for frequent insertions and deletions</li></ul><h4 id="memory-usage" tabindex="-1"><a class="header-anchor" href="#memory-usage"><span>Memory usage</span></a></h4><ul><li>Maps can be more memory-efficient for large datasets</li><li>Objects have a higher memory footprint due to their default prototype chain</li></ul><p>Use objects when you need simple, structured data with string keys. Use maps when you need efficient insertions, deletions and complex keys.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>While JavaScript does not have a dedicated dictionary type, Objects and Maps provide robust solutions for handling key-value pairs. The choice between them depends on your specific needs:</p><ul><li>Use <strong>Objects</strong> when dealing with <strong>structured data with predefined keys</strong>, such as API responses or configuration settings</li><li>Use <strong>Maps</strong> when working with <strong>dynamic key-value pairs</strong>, especially if keys are not always strings or performance is a concern</li></ul><p>Understanding the strengths and weaknesses of Objects and Maps in JavaScropt will help you write more efficient and maintainable JavaScript code. Whether you’re storing user preferences, managing application state, or implementing a caching mechanism, choosing the right structure will improve your application’s performance and readability.</p>`,83)),b(" TODO: add ARTICLE CARD "),e(i,r(u({title:"JavaScript dictionary: How to use objects and maps for key-value pairs",desc:"Learn how to use JavaScript dictionaries with Objects and Maps. Discover key differences, performance insights, and use cases with examples.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/javascript-dictionary.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const M=v(j,[["render",J]]),A=JSON.parse('{"path":"/blog.logrocket.com/javascript-dictionary.html","title":"JavaScript dictionary: How to use objects and maps for key-value pairs","lang":"en-US","frontmatter":{"lang":"en-US","title":"JavaScript dictionary: How to use objects and maps for key-value pairs","description":"Article(s) > JavaScript dictionary: How to use objects and maps for key-value pairs","icon":"fa-brands fa-js","category":["JavaScript","Article(s)"],"tag":["blog","blog.logrocket.com","js","javascript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript dictionary: How to use objects and maps for key-value pairs\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/javascript-dictionary/banner.png\\"],\\"datePublished\\":\\"2025-02-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Elijah Agbonze\\",\\"url\\":\\"https://blog.logrocket.com/author/elijahtrillionz/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/javascript-dictionary.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"JavaScript dictionary: How to use objects and maps for key-value pairs"}],["meta",{"property":"og:description","content":"Article(s) > JavaScript dictionary: How to use objects and maps for key-value pairs"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/javascript-dictionary/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/javascript-dictionary/banner.png"}],["meta",{"name":"twitter:image:alt","content":"JavaScript dictionary: How to use objects and maps for key-value pairs"}],["meta",{"property":"article:author","content":"Elijah Agbonze"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-02-25T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > JavaScript dictionary: How to use objects and maps for key-value pairs"},{"property":"og:description","content":"JavaScript dictionary: How to use objects and maps for key-value pairs"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/javascript-dictionary.html"}]],"prev":"/programming/js/articles/README.md","date":"2025-02-25T00:00:00.000Z","isOriginal":false,"author":[{"name":"Elijah Agbonze","url":"https://blog.logrocket.com/author/elijahtrillionz/"}],"cover":"/assets/image/blog.logrocket.com/javascript-dictionary/banner.png"},"git":{},"readingTime":{"minutes":9.89,"words":2967},"filePathRelative":"blog.logrocket.com/javascript-dictionary.md","copyright":{"author":"Elijah Agbonze"}}');export{M as comp,A as data};
