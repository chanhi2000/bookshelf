import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,d as s,f as t,b as p,t as m,n as h,g as k,w as i,e as a,r as l,o as v}from"./app-BVguHYKu.js";const f={},b={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},w={href:"https://serilog.net/",target:"_blank",rel:"noopener noreferrer"},q={id:"configuring-serilog-with-appsettings-json",tabindex:"-1"},I={class:"header-anchor",href:"#configuring-serilog-with-appsettings-json"},x={href:"https://github.com/serilog/serilog-settings-configuration",target:"_blank",rel:"noopener noreferrer"};function T(c,n){const u=l("VPCard"),e=l("router-link"),o=l("VPIcon"),r=l("SiteInfo");return v(),d("div",null,[s("h1",b,[s("a",y,[s("span",null,m(c.$frontmatter.title)+" 관련",1)])]),t(u,h(k({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[t(e,{to:"#installing-serilog"},{default:i(()=>n[0]||(n[0]=[a("Installing Serilog")])),_:1,__:[0]})]),s("li",null,[t(e,{to:"#configuring-serilog-with-appsettings-json"},{default:i(()=>[n[1]||(n[1]=a("Configuring Serilog With ")),t(o,{icon:"iconfont icon-json"}),n[2]||(n[2]=a("appsettings.json"))]),_:1,__:[1,2]})]),s("li",null,[t(e,{to:"#using-serilog-in-asp-net-core"},{default:i(()=>n[3]||(n[3]=[a("Using Serilog In ASP.NET Core")])),_:1,__:[3]})]),s("li",null,[t(e,{to:"#structured-logging-syntax"},{default:i(()=>n[4]||(n[4]=[a("Structured Logging Syntax")])),_:1,__:[4]})]),s("li",null,[t(e,{to:"#benefits-of-structured-logging"},{default:i(()=>n[5]||(n[5]=[a("Benefits Of Structured Logging")])),_:1,__:[5]})])])]),n[22]||(n[22]=s("hr",null,null,-1)),t(r,{name:"Structured Logging In ASP.NET Core With Serilog",desc:"Structured logging is a practice where you apply the same message format to all of your application logs. The end result is that all your logs will have a similar structure, allowing them to be easily searched and analyzed. Serilog is a popular logging library in .NET, packed with many features. It provides logging to files, logging to the console, and elsewhere. However, why Serilog is unique is because it comes with support for structured logging out of the box.",url:"https://milanjovanovic.tech/blog/structured-logging-in-asp-net-core-with-serilog/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_025.png"}),n[23]||(n[23]=s("p",null,[s("strong",null,"Structured logging"),a(" is a practice where you apply the same message format to all of your application logs. The end result is that all your logs will have a similar structure, allowing them to be easily searched and analyzed.")],-1)),s("p",null,[s("a",w,[t(o,{icon:"fas fa-globe"}),n[6]||(n[6]=a("Serilog"))]),n[7]||(n[7]=a(" is a popular logging library in .NET, packed with many features. It provides logging to files, logging to the console, and elsewhere."))]),n[24]||(n[24]=p(`<p>However, <strong>Serilog</strong> is unique because it comes with support for <strong>structured logging</strong> out of the box.</p><p>Let&#39;s see how we can install <strong>Serilog</strong> and configure it an <strong>ASP.NET Core</strong> application.</p><hr><h2 id="installing-serilog" tabindex="-1"><a class="header-anchor" href="#installing-serilog"><span>Installing Serilog</span></a></h2><p>To install <strong>Serilog</strong> in <strong>ASP.NET Core</strong> you can add the following NuGet package:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> Serilog<span class="token punctuation">.</span>AspNetCore</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This NuGet packages comes with a simple API to integrate <strong>Serilog</strong> into your application. You can call the <code>UseSerilog</code> method on the <code>HostBuilder</code> instance to provide a lambda method to configure <strong>Serilog</strong>.</p><p>I think the most flexible way to configure Serilog is through application settings, which is achieved by calling <code>ReadFrom.Configuration()</code>.</p><p>You can also call the <code>UseSerilogRequestLogging()</code> method to introduce automatic HTTP request logging in your API.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Host<span class="token punctuation">.</span><span class="token function">UseSerilog</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> configuration<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    configuration<span class="token punctuation">.</span>ReadFrom<span class="token punctuation">.</span><span class="token function">Configuration</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Configuration<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">UseSerilogRequestLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The next question is how do you provide the actual configuration values to <strong>Serilog</strong>?</p><hr>`,12)),s("h2",q,[s("a",I,[s("span",null,[n[8]||(n[8]=a("Configuring Serilog With ")),t(o,{icon:"iconfont icon-json"}),n[9]||(n[9]=s("code",null,"appsettings.json",-1))])])]),s("p",null,[n[10]||(n[10]=a("You need to add a ")),n[11]||(n[11]=s("code",null,"Serilog",-1)),n[12]||(n[12]=a(" section in your ")),t(o,{icon:"iconfont icon-json"}),n[13]||(n[13]=s("code",null,"appsettings.json",-1)),n[14]||(n[14]=a(" file."))]),n[25]||(n[25]=p(`<p>Here you can configure, among other things:</p><ul><li>Which <strong>sinks</strong> to use with <strong>Serilog</strong></li><li>Override default and minimum log levels</li><li>Configure file logging arguments</li></ul><p>In this example, we&#39;re adding the <code>Console</code> and <code>File</code> sinks to <strong>Serilog</strong>. And we&#39;re adding some additional configuration for the <code>File</code> sink in the <code>Serilog.WriteTo</code> configuration section. We can configure the output path for the log files, the naming format, which formatter to use for the logs and so on.</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token property">&quot;Serilog&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;Using&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;Serilog.Sinks.Console&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Serilog.Sinks.File&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;MinimumLevel&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;Default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Information&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;Override&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;Microsoft&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Warning&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;System&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Warning&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;WriteTo&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Console&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;File&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;Args&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/logs/log-.txt&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;rollingInterval&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Day&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;rollOnFileSizeLimit&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;formatter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Serilog.Formatting.Compact.CompactJsonFormatter, Serilog.Formatting.Compact&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;Enrich&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;FromLogContext&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;WithMachineName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;WithThreadId&quot;</span> <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("p",null,[n[18]||(n[18]=a("You can get a more detailed overview of what's supported with the ")),n[19]||(n[19]=s("code",null,"Serilog.Configuration",-1)),n[20]||(n[20]=a(" library in the ")),s("a",x,[n[15]||(n[15]=a("documentation (")),t(o,{icon:"iconfont icon-github"}),n[16]||(n[16]=s("code",null,"serilog/serilog-settings-configuration",-1)),n[17]||(n[17]=a(")"))]),n[21]||(n[21]=a("."))]),t(r,{name:"serilog/serilog-settings-configuration",desc:"A Serilog configuration provider that reads from Microsoft.Extensions.Configuration",url:"https://github.com/serilog/serilog-settings-configuration",logo:"https://avatars.githubusercontent.com/u/5691010?s=88&v=4",preview:"https://opengraph.githubassets.com/373bfe5a0337d2ec44960c172d4d9e523fbd6bbece03a5f09f61bada75ee10d0/serilog/serilog-settings-configuration"}),n[26]||(n[26]=p(`<hr><h2 id="using-serilog-in-asp-net-core" tabindex="-1"><a class="header-anchor" href="#using-serilog-in-asp-net-core"><span>Using Serilog In ASP.NET Core</span></a></h2><p>We managed to successfully install and configure <strong>Serilog</strong>. But how do we actually use it?</p><p><strong>Serilog</strong> integrates with the <code>ILogger</code> interaface coming from the <code>Microsoft.Extensions.Logging</code> namespace. If you&#39;re already using <code>ILogger</code> for logging, everything will continue working correctly.</p><p>Here&#39;s a simple example of logging inside of a Minimal API endpoint:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/serilog-is-cool&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">ILogger</span> logger<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;This is a log inside of the Minimal API endpoint.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">{</span> Message <span class="token operator">=</span> <span class="token string">&quot;success&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You just inject an <code>ILogger</code> or <code>ILogger&lt;T&gt;</code> instance and Serilog will provide its own implementation at runtime.</p><hr><h2 id="structured-logging-syntax" tabindex="-1"><a class="header-anchor" href="#structured-logging-syntax"><span>Structured Logging Syntax</span></a></h2><p>The idea behind <strong>structured logging</strong> is that you can introduce additional contextual information inside of your logs. <strong>Serilog</strong> does this using a message template syntax, where you can specify named parameters and then pass in their values separately.</p><p>Here&#39;s an example of what this message template would look like. You specify parameters inside of curly bracers and provide a name, for example <code>{NamedParameter}</code>. The value provided for the parameter will be serialized as a property inside of the corresponding structured log.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Author <span class="token operator">=</span> <span class="token string">&quot;Domain-Driven Design&quot;</span><span class="token punctuation">,</span> Title <span class="token operator">=</span> <span class="token string">&quot;Eric Evans&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> orderNumber <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">log<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;Processing book {@Book}, order number = {@OrderNumber}&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    book<span class="token punctuation">,</span></span>
<span class="line">    orderNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are a few things to unpack here:</p><ul><li><code>{@Book}</code> parameter which accepts an object</li><li><code>{OrderNumber}</code> parameter which accepts a scalar value</li></ul><p>The <code>@</code> operator in front of <code>Book</code> tells Serilog to serialize the object passed in, instead of converting it using <code>ToString()</code>.</p><hr><h2 id="benefits-of-structured-logging" tabindex="-1"><a class="header-anchor" href="#benefits-of-structured-logging"><span>Benefits Of Structured Logging</span></a></h2><p>Lastly, I want to highlight what are some of the benefits of <strong>structured logging</strong> and why you should be using it.</p><p>As I said at the beginning, the main idea with <strong>structured logging</strong> is that all log message follow the same structure. This structure can be a JSON document for example, or a row in a relational table. Since structured logs are in a machine-readable format, it&#39;s much easier to search through them for specific information.</p><p>When an error occurs, structured logs can provide more context and details about the error, making it easier to identify the root cause and fix the problem.</p><p>It&#39;s very easy to start doing structured logging with <strong>Serilog</strong>, and I hope you&#39;ll give it a try.</p><p>See you next week, and have an excellent Saturday.</p>`,22))])}const A=g(f,[["render",T]]),N=JSON.parse('{"path":"/milanjovanovic.tech/structured-logging-in-asp-net-core-with-serilog.html","title":"Structured Logging In ASP.NET Core With Serilog","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Structured Logging In ASP.NET Core With Serilog","description":"Article(s) > Structured Logging In ASP.NET Core With Serilog","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Structured Logging In ASP.NET Core With Serilog\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_025.png\\"],\\"datePublished\\":\\"2023-02-18T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/structured-logging-in-asp-net-core-with-serilog.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Structured Logging In ASP.NET Core With Serilog"}],["meta",{"property":"og:description","content":"Article(s) > Structured Logging In ASP.NET Core With Serilog"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_025.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_025.png"}],["meta",{"name":"twitter:image:alt","content":"Structured Logging In ASP.NET Core With Serilog"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-02-18T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Structured Logging In ASP.NET Core With Serilog"},{"property":"og:description","content":"Structured Logging In ASP.NET Core With Serilog"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/structured-logging-in-asp-net-core-with-serilog.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-02-18T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_025.png"},"git":{},"readingTime":{"minutes":3.43,"words":1029},"filePathRelative":"milanjovanovic.tech/structured-logging-in-asp-net-core-with-serilog.md","copyright":{"author":"Milan Jovanović"}}');export{A as comp,N as data};
