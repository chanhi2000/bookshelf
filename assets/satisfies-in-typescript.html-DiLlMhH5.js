import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as a,b as k,a as v,t as h,n as l,g as c,w as t,r as i,o as y,e as p}from"./app-BVguHYKu.js";const g={},b={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"};function T(r,n){const o=i("VPCard"),e=i("router-link"),u=i("SiteInfo");return y(),m("div",null,[s("h1",b,[s("a",f,[s("span",null,h(r.$frontmatter.title)+" 관련",1)])]),a(o,l(c({title:"TypeScript > Article(s)",desc:"Article(s)",link:"/programming/ts/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",w,[s("ul",null,[s("li",null,[a(e,{to:"#a-quick-intro-on-structural-typing"},{default:t(()=>n[0]||(n[0]=[p("A quick intro on structural typing")])),_:1,__:[0]})]),s("li",null,[a(e,{to:"#the-satisfies-keyword"},{default:t(()=>n[1]||(n[1]=[p("The satisfies keyword")])),_:1,__:[1]})]),s("li",null,[a(e,{to:"#the-satisfies-keyword-in-the-wild"},{default:t(()=>n[2]||(n[2]=[p("The satisfies Keyword in the Wild")])),_:1,__:[2]})]),s("li",null,[a(e,{to:"#wrapping-up"},{default:t(()=>n[3]||(n[3]=[p("Wrapping up")])),_:1,__:[3]})])])]),n[4]||(n[4]=s("hr",null,null,-1)),a(u,{name:"Satisfies in TypeScript",desc:"The `satisfies` keyword allows you to assert that a certain value ",url:"https://frontendmasters.com/blog/satisfies-in-typescript/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6443"}),n[5]||(n[5]=k(`<p>This is a post about one of TypeScript’s less common features: the<code>satisfies</code>keyword. It’s occasionally incredibly useful, and knowing how to properly wield it is a valuable trick to have up your sleeve. Let’s take a look!</p><hr><h2 id="a-quick-intro-on-structural-typing" tabindex="-1"><a class="header-anchor" href="#a-quick-intro-on-structural-typing"><span>A quick intro on structural typing</span></a></h2><p>In a nutshell, structural typing means that TypeScript cares only about the<em>structure</em>of your values, not the types they were declared with. That means the following code contains no errors:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Thing1</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Thing2</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> thing1<span class="token operator">:</span> Thing1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> thing2<span class="token operator">:</span> Thing1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thing2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> thing3<span class="token operator">:</span> Thing1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Types are essentially contracts, and TypeScript cares only that you satisfy the contract with something that has what the original type specified.</p><p>Interestingly, this also means you can supply extraneous, superfluous “stuff” when satisfying types: the following also has no errors.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  xyz<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> thing4<span class="token operator">:</span> Thing1 <span class="token operator">=</span> val<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The<code>Thing1</code>type only calls for a <code>name</code> property that’s a <code>string</code>. If you also specify <em>other</em> properties, TypeScript is (usually) OK with it. This might seem surprising coming from other languages, but it’s a pragmatic tradeoff given that TypeScript’s primary purpose is to provide some manner of type safety to a completely untyped programming language: JavaScript.</p><p>I said <em>usually</em> above because occasionally TypeScript will be a bit stricter about not allowing “extra” values like we saw above. In particular, when assigning an object literal to a variable that’s declared with a type, TypeScript will require a strict matching.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">let</span> thing4<span class="token operator">:</span> Thing1 <span class="token operator">=</span> val<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> val2<span class="token operator">:</span> Thing1 <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  xyz<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// Error: Object literal may only specify known properties, and &#39;xyz&#39; does not exist in type &#39;Thing1&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is called “excess property checking.” It happens when assigning an object literal to a variable with a declared type, like we just saw, and also when passing an object literal to a function parameter that has a declared type.</p><hr><h2 id="the-satisfies-keyword" tabindex="-1"><a class="header-anchor" href="#the-satisfies-keyword"><span>The <code>satisfies</code> keyword</span></a></h2><p>To provide the most simplistic example of using <code>satisfies</code>, let’s go back to this code</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> val3 <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  xyz<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Right now <code>val3</code> has the inferred type</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  xyz<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we wanted, we could write this code like this:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> val3 <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  xyz<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// Error: Object literal may only specify known properties, and &#39;xyz&#39; does not exist in type &#39;Thing1&#39;</span></span>
<span class="line"><span class="token punctuation">}</span> satisfies Thing1<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That produced the same error we saw before, and the same error we<em>would have</em>gotten if we had declared <code>val3</code> as<code>Thing1</code>.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">const</span> val3<span class="token operator">:</span> Thing1 <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  xyz<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// Error: Object literal may only specify known properties, and &#39;xyz&#39; does not exist in type &#39;Thing1&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>The <code>satisfies</code> keyword allows you to assert that a certain value “satisfies” a given type, while <em>preventing</em> a wider type from being inferred.</p></div><p>Bear with me.</p><p>You’re probably thinking that this is completely pointless, since we can just move<code>Thing1</code>up into a proper type declaration, and even save a few keystrokes while doing so!</p><p>But not all situations lend themselves to this solution.</p><p>Let’s take a look at a slightly more complex, more realistic example.</p><hr><h2 id="the-satisfies-keyword-in-the-wild" tabindex="-1"><a class="header-anchor" href="#the-satisfies-keyword-in-the-wild"><span>The <code>satisfies</code> Keyword in the Wild</span></a></h2><p>This is a situation I actually ran into. I’ll do my best to simplify it, while keeping the realistic parts.</p><p>Imagine we’re writing an inventory management system. We have an inventory item type.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">InventoryItem</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  sku<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  originCode<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Maybe we have some external backend systems we need to fetch data from.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">BackendResponse</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  item_sku<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  item_description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  item_metadata<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">  item_origin_code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getBackendResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> BackendResponse<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The<code>getBackendResponse</code>function is hard coded to return an empty array, but just pretend it makes a request and returns actual data. Then pretend we want to take that data and actually insert it. We have a function to do the inserting; we’re only interested in the types though, so we’ll leave the implementation empty</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token function">insertInventoryItems</span><span class="token punctuation">(</span>items<span class="token operator">:</span> InventoryItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Let’s put things together. Fetch some items from our external system, manipulate them into the proper structure for our own<code>InventoryItem</code>type, and then call our<code>insertInventoryItems</code>function</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> backendItems <span class="token operator">=</span> <span class="token function">getBackendResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">insertInventoryItems</span><span class="token punctuation">(</span></span>
<span class="line">    backendItems<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">sku</span><span class="token operator">:</span> item<span class="token punctuation">.</span>item_sku<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">description</span><span class="token operator">:</span> item<span class="token punctuation">.</span>item_description<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">originCodeXXXXX</span><span class="token operator">:</span> item<span class="token punctuation">.</span>item_origin_code<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Unfortunately, <strong>this code has no errors</strong>, even though we completely fat-fingered the <code>originCode</code> property.</p><p>You already know that TypeScript will allow you to provide “extra” properties in places where excess property checking doesn’t exist, but you may be wondering why it’s not an error that we completely<em>left off</em>the real<code>originCode</code>property. The reason is that this is an optional property! That makes it all the more important that we disallow excess cruft.</p><p>You might be thinking that we can just restructure our code so that excess property checking is in place, and we certainly could do that</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> backendItems <span class="token operator">=</span> <span class="token function">getBackendResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">insertInventoryItems</span><span class="token punctuation">(</span></span>
<span class="line">    backendItems<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> result<span class="token operator">:</span> InventoryItem <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        sku<span class="token operator">:</span> item<span class="token punctuation">.</span>item_sku<span class="token punctuation">,</span></span>
<span class="line">        description<span class="token operator">:</span> item<span class="token punctuation">.</span>item_description<span class="token punctuation">,</span></span>
<span class="line">        originCodeXXXXX<span class="token operator">:</span> item<span class="token punctuation">.</span>item_origin_code<span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// Error: Object literal may only specify known properties, but &#39;originCodeXXXXX&#39;</span></span>
<span class="line">        <span class="token comment">// does not exist in type &#39;InventoryItem&#39;. Did you mean to write &#39;originCode&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This works and produces the error we want to see. But it’s just a byproduct of the (frankly weird) way we chose to write it, and this protection would disappear if anyone were to come along, see this weird, pointless intermediate variable declaration, and “helpfully” refactor the code to just immediately return the object literal like we just had.</p><p>The better solution is to use <code>satisfies</code> to prevent the unwanted widening; that’s why it exists!</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> backendItems <span class="token operator">=</span> <span class="token function">getBackendResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">insertInventoryItems</span><span class="token punctuation">(</span></span>
<span class="line">    backendItems<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        sku<span class="token operator">:</span> item<span class="token punctuation">.</span>item_sku<span class="token punctuation">,</span></span>
<span class="line">        description<span class="token operator">:</span> item<span class="token punctuation">.</span>item_description<span class="token punctuation">,</span></span>
<span class="line">        originCodeXXXXX<span class="token operator">:</span> item<span class="token punctuation">.</span>item_origin_code<span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// Error: Object literal may only specify known properties, but &#39;originCodeXXXXX&#39;</span></span>
<span class="line">        <span class="token comment">// does not exist in type &#39;InventoryItem&#39;. Did you mean to write &#39;originCode&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span> satisfies InventoryItem<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we’re back to the more idiomatic code we started with, with the same strict checks we’re looking for.</p><p>Before we wrap up, let’s briefly consider this alternative you might be wondering about</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> backendItems <span class="token operator">=</span> <span class="token function">getBackendResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">insertInventoryItems</span><span class="token punctuation">(</span></span>
<span class="line">    backendItems<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        sku<span class="token operator">:</span> item<span class="token punctuation">.</span>item_sku<span class="token punctuation">,</span></span>
<span class="line">        description<span class="token operator">:</span> item<span class="token punctuation">.</span>item_description<span class="token punctuation">,</span></span>
<span class="line">        originCodeXXXXX<span class="token operator">:</span> item<span class="token punctuation">.</span>item_origin_code<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">as</span> InventoryItem<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This produces no errors at all. The <code>as</code> keyword is a typecast. It’s something to avoid; it essentially allows you to “lie” to the type checker and <em>assert</em> that a given expression matches a given type. In this case, the cast pointless because this object already matches the <code>InventoryItem</code> type. It has a sku, and a description. It also has some extra “stuff” but TypeScript doesn’t really mind. It’s the <code>satisfies</code> keyword which additionally forces TypeScript to also <em>not</em> allow a wider type, and therefor <em>start</em> minding about extra properties.</p><p>For completeness, this version of the casting code actually does fail</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">function</span> <span class="token function">main3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> backendItems <span class="token operator">=</span> <span class="token function">getBackendResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">insertInventoryItems</span><span class="token punctuation">(</span></span>
<span class="line">    backendItems<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        sku<span class="token operator">:</span> item<span class="token punctuation">.</span>item_sku<span class="token punctuation">,</span></span>
<span class="line">        descriptionXXX<span class="token operator">:</span> item<span class="token punctuation">.</span>item_description<span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// Error: Conversion of type &#39;{ sku: string; descriptionXXX: string; originCodeXXXXX: string; }&#39; to type</span></span>
<span class="line">        <span class="token comment">// &#39;InventoryItem&#39; may be a mistake because neither type sufficiently overlaps with the other. If this</span></span>
<span class="line">        <span class="token comment">// was intentional, convert the expression to &#39;unknown&#39; first. Property &#39;description&#39; is missing in type</span></span>
<span class="line">        <span class="token comment">// &#39;{ sku: string; descriptionXXX: string; originCodeXXXXX: string; }&#39; but required in type &#39;InventoryItem&#39;.</span></span>
<span class="line">        originCodeXXXXX<span class="token operator">:</span> item<span class="token punctuation">.</span>item_origin_code<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">as</span> InventoryItem<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript will allow you to lie, but only so far. If the cast makes absolutely no sense, TypeScript won’t allow it. As the error indicates, if you, for some reason, actually wanted to go through with this code, you could do:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">as unknown as InventoryItem;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>since <code>unknown</code> is a “top” type, which means anything can be cast to it, and from it.</p><hr><h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="#wrapping-up"><span>Wrapping up</span></a></h2><p>Use <code>satisfies</code> when you want to prevent <em>type widenings</em>, in situations where a top-level variable declaration doesn’t quite fit well.</p>`,57)),v(" TODO: add ARTICLE CARD "),a(o,l(c({title:"Satisfies in TypeScript",desc:"The `satisfies` keyword allows you to assert that a certain value ",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/satisfies-in-typescript.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const X=d(g,[["render",T]]),_=JSON.parse('{"path":"/frontendmasters.com/satisfies-in-typescript.html","title":"Satisfies in TypeScript","lang":"en-US","frontmatter":{"lang":"en-US","title":"Satisfies in TypeScript","description":"Article(s) > Satisfies in TypeScript","icon":"iconfont icon-typescript","category":["TypeScript","Article(s)"],"tag":["blog","frontendmasters.com","ts","typescript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Satisfies in TypeScript\\",\\"image\\":[\\"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6443\\"],\\"datePublished\\":\\"2025-07-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Adam Rackis\\",\\"url\\":\\"https://frontendmasters.com/blog/author/adamrackis/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/satisfies-in-typescript.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Satisfies in TypeScript"}],["meta",{"property":"og:description","content":"Article(s) > Satisfies in TypeScript"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6443"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6443"}],["meta",{"name":"twitter:image:alt","content":"Satisfies in TypeScript"}],["meta",{"property":"article:author","content":"Adam Rackis"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:tag","content":"ts"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-07-03T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Satisfies in TypeScript"},{"property":"og:description","content":"Satisfies in TypeScript"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/satisfies-in-typescript.html"}]],"prev":"/programming/ts/articles/README.md","date":"2025-07-03T00:00:00.000Z","isOriginal":false,"author":[{"name":"Adam Rackis","url":"https://frontendmasters.com/blog/author/adamrackis/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6443"},"git":{},"readingTime":{"minutes":4.88,"words":1463},"filePathRelative":"frontendmasters.com/satisfies-in-typescript.md","copyright":{"author":"Adam Rackis"}}');export{X as comp,_ as data};
