import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as f,d as s,f as e,b as d,a as k,t as v,n as u,g as m,w as o,e as t,r as a,o as w}from"./app-BVguHYKu.js";const y={},T={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},z={class:"table-of-contents"},C={href:"https://jeffbridgforth.com/having-figure-match-width-of-contained-image/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://twitch.tv/chriscoyier",target:"_blank",rel:"noopener noreferrer"};function I(p,n){const l=a("VPCard"),i=a("router-link"),h=a("SiteInfo"),c=a("VPIcon"),r=a("CodePen"),g=a("VidStack");return w(),f("div",null,[s("h1",T,[s("a",x,[s("span",null,v(p.$frontmatter.title)+" 관련",1)])]),e(l,u(m({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",z,[s("ul",null,[s("li",null,[e(i,{to:"#wouldn-t-you-think-you-could-just-min-content-the-figure"},{default:o(()=>n[0]||(n[0]=[t("Wouldn’t you think you could just min-content the <figure>?")])),_:1,__:[0]})]),s("li",null,[e(i,{to:"#the-best-tricks-are-about-using-the-images-intrinsic-size-instead-of-the-figcaption"},{default:o(()=>n[1]||(n[1]=[t("The Best Tricks Are About Using The Images Intrinsic Size Instead Of The Figcaption")])),_:1,__:[1]})]),s("li",null,[e(i,{to:"#combined-demos"},{default:o(()=>n[2]||(n[2]=[t("Combined Demos")])),_:1,__:[2]})]),s("li",null,[e(i,{to:"#video"},{default:o(()=>n[3]||(n[3]=[t("Video")])),_:1,__:[3]})])])]),n[11]||(n[11]=s("hr",null,null,-1)),e(h,{name:"The Figcaption Problem",desc:"When an image isn't ",url:"https://frontendmasters.com/blog/the-figcaption-problem/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6532"}),n[12]||(n[12]=d(`<p>There is this <em>problem</em> with this, when it comes to layout:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>good description of image<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span><span class="token punctuation">&gt;</span></span>This is a pretty long caption that I want for the image. It&#39;s such a long bit of text that it&#39;s likely going to wrap in the layout.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figcaption</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The problem isn’t with the HTML, that’s fine.</p><p>The problem is when the <em>image</em> is less wide than the <em>container</em> and we want the <em>figcaption</em> to only be as wide as the <em>image</em> is.</p><p>We want this:</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/browser.png?resize=1024%2C667&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>We want that orange buddy. That’s the <code>&lt;figure&gt;</code> element sitting in the middle of this article, centered, with an <code>&lt;img&gt;</code> inside that isn’t the full width of the article, and a <code>&lt;figcaption&gt;</code> inside that wraps at the edges of the image.</p><p><strong><em>How hard can that be?!</em></strong></p><p>Well — it certainly is weird.</p><p>This all started with a post from Jeff Bridgforth that piqued my interest:</p><p>See, I’d run into this myself. On my own blog, I often post photos that are not the full width of the page and want to center them or float them to a side or something. <strong>And the thing that limits the width of the <code>&lt;figcaption&gt;</code> is the parent <code>&lt;figure&gt;</code> itself, not the <code>&lt;img&gt;</code>. So how do you limit the <code>&lt;figcaption&gt;</code> width?</strong></p><p>On my own blog, I was just like <em>screw it</em> and set a <code>max-inline-size</code> on them.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/Screenshot-2025-07-24-at-8.15.00-AM.png?resize=997%2C1024&amp;ssl=1" alt="Me going, eh, screw it: " tabindex="0" loading="lazy"><figcaption>Me going, eh, screw it: <code>figcaption { max-inline-size: 300px; }</code></figcaption></figure><p>For the most part I chalked it up as a design decision that had kind of a cool look. But it still bugged me. Like the image above where the figcaption still ends up <em>wider</em> than the image.</p><p>There is a proper solution here.</p>`,15)),s("p",null,[n[5]||(n[5]=t("Jeff was smart enough to ")),s("a",C,[e(c,{icon:"fas fa-globe"}),n[4]||(n[4]=t("blog the entire conversation and solutions that came out of his post"))]),n[6]||(n[6]=t(". And frankly he did a good job and this blog post probably isn’t entirely necessary. But hey if it helps more people when they run into this, that’s cool."))]),n[13]||(n[13]=s("p",null,"Allow me to jump straight to the end and showcase the best solution, by Stephanie Eckles:",-1)),e(r,{user:"5t3ph","slug-hash":"JodpOOR",title:"figure/figcaption issue","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),n[14]||(n[14]=d(`<p>There it is, the perfect solution here.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">figure</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">inline-size</span><span class="token punctuation">:</span> fit-content<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">margin-inline</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">figcaption</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">contain</span><span class="token punctuation">:</span> inline-size<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* Probably in your reset stylesheet, which is good. */</span></span>
<span class="line"><span class="token selector">img</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="wouldn-t-you-think-you-could-just-min-content-the-figure" tabindex="-1"><a class="header-anchor" href="#wouldn-t-you-think-you-could-just-min-content-the-figure"><span>Wouldn’t you think you could just <code>min-content</code> the <code>&lt;figure&gt;</code>?</span></a></h2><p>Like:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">figure</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">inline-size</span><span class="token punctuation">:</span> min-content<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s what my brain does and I heard from others the same. The image would be the smallest content within the figure (otherwise it would be just a word), so the figure should kinda shrink-wrap around the image.</p><p>The thing is… <em>you can and it works</em>… unless… you use the classic reset stylesheet thing:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">img</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I’m a fan of this. It’s protection against a too-wide image busting out of a container. It’s a classic, and it’s important. This is more like reality, where <code>width</code> and <code>height</code> attributes are on the image, because that’s a best-practice for maintaining aspect ratio space as the image is loading.</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2000<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">img</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* prevent blowouts */</span></span>
<span class="line">  <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/* maintain aspect ratio */</span></span>
<span class="line">  <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/* opinionated, but removes line-height space below block images */</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But if we do this, we’re essentially wiping away the intinstic size of the image and the <code>min-content</code> width becomes based on the <code>figcaption</code> instead and we get smashy-smashy thin time:</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/Screenshot-2025-07-24-at-9.57.51-AM.png?resize=1018%2C770&amp;ssl=1" alt="Nope." tabindex="0" loading="lazy"><figcaption>Nope.</figcaption></figure><p>What’s with mixing logical properties like <code>inline-size</code> in some places and non-logical properties like <code>max-width</code> in others? I’m a fan of almost <em>always</em> using logical properties, but for most images, even changing to a vertical writing mode shouldn’t rotate images, so properties like <code>width</code> make sense.</p><hr><h2 id="the-best-tricks-are-about-using-the-images-intrinsic-size-instead-of-the-figcaption" tabindex="-1"><a class="header-anchor" href="#the-best-tricks-are-about-using-the-images-intrinsic-size-instead-of-the-figcaption"><span>The Best Tricks Are About Using The Images Intrinsic Size Instead Of The Figcaption</span></a></h2><p>The core of the trick is:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">figcaption</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">contain</span><span class="token punctuation">:</span> inline-size<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That says: <em>don’t factor in the figcaption in determining the intrinsic inline-size of the parent.</em></p><p>There was a way to do this before, as Temani Afif pointed out, with weirder trickery:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">figcaption</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">inline-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token comment">/* or width */</span></span>
<span class="line">  <span class="token property">min-inline-size</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> */ or min-width */</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="combined-demos" tabindex="-1"><a class="header-anchor" href="#combined-demos"><span>Combined Demos</span></a></h2>`,24)),e(r,{user:"chriscoyier","slug-hash":"QwjENQj",title:"Demo of figure/figcaption Issues","default-tab":["css","result"],theme:p.$isDarkmode?"dark":"light"},null,8,["theme"]),n[15]||(n[15]=s("hr",null,null,-1)),n[16]||(n[16]=s("h2",{id:"video",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#video"},[s("span",null,"Video")])],-1)),s("p",null,[n[9]||(n[9]=t("While I was wrapping my mind around all this, I ")),s("a",j,[n[7]||(n[7]=t("popped on a stream (")),e(c,{icon:"fa-brands fa-twitch"}),n[8]||(n[8]=t("chriscoyier)"))]),n[10]||(n[10]=t(" to do it. This isn’t like a straightforward tutorial, it’s the exploratory poking around and trying stuff that lead to my own better understanding (and the demos and this blog post)."))]),e(g,{src:"youtube/Tsumy1v3zk4"}),k(" TODO: add ARTICLE CARD "),e(l,u(m({title:"The Figcaption Problem",desc:"When an image isn't ",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/the-figcaption-problem.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const S=b(y,[["render",I]]),q=JSON.parse('{"path":"/frontendmasters.com/the-figcaption-problem.html","title":"The Figcaption Problem","lang":"en-US","frontmatter":{"lang":"en-US","title":"The Figcaption Problem","description":"Article(s) > The Figcaption Problem","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","frontendmasters.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"The Figcaption Problem\\",\\"image\\":[\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/browser.png?resize=1024%2C667&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/Screenshot-2025-07-24-at-8.15.00-AM.png?resize=997%2C1024&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/07/Screenshot-2025-07-24-at-9.57.51-AM.png?resize=1018%2C770&ssl=1\\"],\\"datePublished\\":\\"2025-07-24T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chris Coyier\\",\\"url\\":\\"https://frontendmasters.com/blog/author/chriscoyier/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/the-figcaption-problem.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"The Figcaption Problem"}],["meta",{"property":"og:description","content":"Article(s) > The Figcaption Problem"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6532"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6532"}],["meta",{"name":"twitter:image:alt","content":"The Figcaption Problem"}],["meta",{"property":"article:author","content":"Chris Coyier"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-07-24T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > The Figcaption Problem"},{"property":"og:description","content":"The Figcaption Problem"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/the-figcaption-problem.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-07-24T00:00:00.000Z","isOriginal":false,"author":[{"name":"Chris Coyier","url":"https://frontendmasters.com/blog/author/chriscoyier/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6532"},"git":{},"readingTime":{"minutes":3.47,"words":1040},"filePathRelative":"frontendmasters.com/the-figcaption-problem.md","copyright":{"author":"Chris Coyier"}}');export{S as comp,q as data};
