import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as e,b as r,a as g,t as b,n as d,g as m,w as p,e as a,r as i,o as f}from"./app-BVguHYKu.js";const y={},x={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},T={class:"table-of-contents"},C={href:"http://codepen.io/lbebber/pen/ypgql",target:"_blank",rel:"noopener noreferrer"},$={href:"https://css-tricks.com/almanac/properties/c/clip/",target:"_blank",rel:"noopener noreferrer"},S={class:"hint-container note"},I={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path",target:"_blank",rel:"noopener noreferrer"},G={href:"https://codepen.io/chriscoyier/pen/XWrNyZy?editors=0110",target:"_blank",rel:"noopener noreferrer"};function A(o,n){const c=i("VPCard"),t=i("router-link"),k=i("SiteInfo"),l=i("VPIcon"),u=i("CodePen");return f(),h("div",null,[s("h1",x,[s("a",w,[s("span",null,b(o.$frontmatter.title)+" 관련",1)])]),e(c,d(m({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",T,[s("ul",null,[s("li",null,[e(t,{to:"#three-copies-of-the-text"},{default:p(()=>n[0]||(n[0]=[a("Three Copies of the Text")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#alter-the-copies"},{default:p(()=>n[1]||(n[1]=[a("Alter the Copies")])),_:1,__:[1]})]),s("li",null,[e(t,{to:"#clipping-the-copies"},{default:p(()=>n[2]||(n[2]=[a("Clipping the Copies")])),_:1,__:[2]})]),s("li",null,[e(t,{to:"#animate-the-clips"},{default:p(()=>n[3]||(n[3]=[a("Animate the Clips")])),_:1,__:[3]})]),s("li",null,[e(t,{to:"#sass-mixins"},{default:p(()=>n[4]||(n[4]=[a("Sass @mixins")])),_:1,__:[4]})])])]),n[40]||(n[40]=s("hr",null,null,-1)),e(k,{name:"Glitch Effect on Text / Images / SVG",desc:"Lucas Bebber's Glitch is a super cool effect. It's like you're looking at some text displayed on a progressive scan monitor that has been dropped on the",url:"https://css-tricks.com/glitch-effect-text-images-svg",logo:"https://css-tricks/favicon.svg",preview:"https://i0.wp.com/css-tricks.com/wp-content/uploads/2014/09/glitch-stacked.png"}),s("p",null,[n[8]||(n[8]=a("Lucas Bebber’s ")),s("a",C,[n[5]||(n[5]=a("Glitch (")),e(l,{icon:"fa-brands fa-codepen"}),n[6]||(n[6]=s("code",null,"lbebber",-1)),n[7]||(n[7]=a(")"))]),n[9]||(n[9]=a(" is a super cool effect. It’s like you’re looking at some text displayed on a progressive scan monitor that has been dropped on the ground one too many times and so the alignment of the pixels is off in weirdly un-even amounts time and space."))]),n[41]||(n[41]=s("p",null,[a("It’s bonafide CSS trick if there ever was one! It took me a bit to figure out how it was working, so I thought I’d explain. Then I ended up making it work for other kinds of content as well as making it into a group of Sass "),s("code",null,"@mixin"),a("s to make working with it a bit easier.")],-1)),e(u,{user:"chriscoyier","slug-hash":"xxKRQRm",title:"CSS Glitched Text","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),n[42]||(n[42]=r(`<hr><h2 id="three-copies-of-the-text" tabindex="-1"><a class="header-anchor" href="#three-copies-of-the-text"><span>Three Copies of the Text</span></a></h2><p>While the HTML is just:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>glitch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>GLITCH<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>GLITCH<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Three copies of it are created, via pseudo-elements, and they are positioned right on top of each other.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.glitch</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">.glitch::before,</span>
<span class="line">.glitch::after</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>data-text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Producing three unique copies that can be controlled individually:</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2014/09/glitch-stacked.png?ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="alter-the-copies" tabindex="-1"><a class="header-anchor" href="#alter-the-copies"><span>Alter the Copies</span></a></h2><p>Each copy is identical except that:</p><ul><li>It’s offset to the left or right</li><li>It has a highlight, in the form of a text-shadow</li></ul><p>Between the offset and the highlight, it gives it that broken feeling.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.glitch::before</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... anything needed to make it identical */</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/* variation */</span></span>
<span class="line">  <span class="token property">left</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">text-shadow</span><span class="token punctuation">:</span> -1px 0 red<span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">/* important: opaque background masks the original */</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">.glitch::after</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... anything needed to make it identical */</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/* variation */</span></span>
<span class="line">  <span class="token property">left</span><span class="token punctuation">:</span> -2px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">text-shadow</span><span class="token punctuation">:</span> -1px 0 blue<span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">/* important: opaque background masks the original */</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So now the three copies are like this:</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2014/09/red-blue-overlays.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="clipping-the-copies" tabindex="-1"><a class="header-anchor" href="#clipping-the-copies"><span>Clipping the Copies</span></a></h2>`,18)),s("p",null,[n[11]||(n[11]=a("You’d only ever see the top copy if left as-is. Probably the ")),n[12]||(n[12]=s("code",null,"::after",-1)),n[13]||(n[13]=a(" version, unless you alter with ")),n[14]||(n[14]=s("code",null,"z-index",-1)),n[15]||(n[15]=a(". But never fear, we’re going to be only revealing parts of the top, altered copies with the ")),n[16]||(n[16]=s("code",null,"clip",-1)),n[17]||(n[17]=a()),s("a",$,[e(l,{icon:"iconfont icon-css-tricks"}),n[10]||(n[10]=a("property"))]),n[18]||(n[18]=a(". This property is apparently deprecated in favor of ")),n[19]||(n[19]=s("code",null,"clip-path",-1)),n[20]||(n[20]=a(", but at the time of this writing, only ")),n[21]||(n[21]=s("code",null,"clip",-1)),n[22]||(n[22]=a(" was working for me. I’m sure that will change in time, so we’ll have to keep an eye on it, and presumably, Autoprefixer will handle it."))]),s("div",S,[n[34]||(n[34]=s("p",{class:"hint-container-title"},"Update! August 2019",-1)),s("p",null,[n[24]||(n[24]=a("Plenty of time has past, and ")),n[25]||(n[25]=s("code",null,"clip",-1)),n[26]||(n[26]=a(" is still generally supported, but deprecated in favor of the (better) ")),s("a",I,[e(l,{icon:"fa-brands fa-firefox"}),n[23]||(n[23]=s("code",null,"clip-path",-1))]),n[27]||(n[27]=a(". The ")),n[28]||(n[28]=s("code",null,"clip",-1)),n[29]||(n[29]=a(" syntax can do what the ")),n[30]||(n[30]=s("code",null,"inset()",-1)),n[31]||(n[31]=a(" function value is for ")),n[32]||(n[32]=s("code",null,"clip-path",-1)),n[33]||(n[33]=a(", so I’m updating this article to use that. Doesn’t look like Autoprefixer deals with the conversation."))])]),n[43]||(n[43]=r(`<p>The syntax for <code>clip</code> is kinda weird. For the four values, you might expect something like top/left/width/height, or point-at-top-left/point-at-bottom-right. But instead, it’s like margin and padding: top/right/bottom/left</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.glitch::before</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">clip</span><span class="token punctuation">:</span> <span class="token function">rect</span><span class="token punctuation">(</span>44px<span class="token punctuation">,</span> 450px<span class="token punctuation">,</span> 56px<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">    Essentially a box from 0, 44px</span>
<span class="line">    to 450px, 56px</span>
<span class="line">  */</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/* clip-path: inset(); needs how far you want to push in from the edges instead */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here’s some example clips on those layers, now with fully opaque backgrounds applied (but still rotated and with extra colors so you can see what’s going on):</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2014/09/clipped-layers.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="animate-the-clips" tabindex="-1"><a class="header-anchor" href="#animate-the-clips"><span>Animate the Clips</span></a></h2><p>Turns out clip can be animated, so, that clipped box will animate to a new position over time if told to, Here’s an example of keyframes:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@keyframes</span> noise-anim</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">0%</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>40% 0 61% 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">20%</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>92% 0 1% 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">40%</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>43% 0 1% 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">60%</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>25% 0 58% 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">80%</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>54% 0 7% 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">100%</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>58% 0 43% 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice the left and right values remain the same, it’s just the top and bottom that change. And those values are kinda random.</p><p>You can generate that pretty easily with Sass, like:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@keyframes</span> noise-anim</span> <span class="token punctuation">{</span></span>
<span class="line">  $<span class="token property">steps</span><span class="token punctuation">:</span> 20<span class="token punctuation">;</span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@for</span> $i from 0 through $steps</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token selector">#</span><span class="token punctuation">{</span><span class="token function">percentage</span><span class="token punctuation">(</span>$i*<span class="token punctuation">(</span>1/$steps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">{</span></span>
<span class="line">      $<span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">random</span><span class="token punctuation">(</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      $<span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token function">random</span><span class="token punctuation">(</span>101 - $top<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token selector">clip-path: inset(#</span><span class="token punctuation">{</span>$top<span class="token punctuation">}</span><span class="token selector">% 0 #</span><span class="token punctuation">{</span>$bottom<span class="token punctuation">}</span>% 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because you’d want two sets of randomized clipping positions, you’d make two sets of those @keyframes, and apply them to the copies:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.glitch::before</span> <span class="token punctuation">{</span></span>
<span class="line">  ...</span>
<span class="line"></span>
<span class="line">  <span class="token property">animation</span><span class="token punctuation">:</span> glitch-anim-1 2s infinite linear alternate-reverse<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.glitch::after</span> <span class="token punctuation">{</span></span>
<span class="line">  ...</span>
<span class="line"></span>
<span class="line">  <span class="token property">animation</span><span class="token punctuation">:</span> glitch-anim-2 2s infinite linear alternate-reverse<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There is where we set the speed (number of keyframes also affects speed) as well as making it run infinitely back and forth.</p><p>It’s pretty fun to watch:</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2014/09/glitch-in-action.gif?ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Although it should go without saying a little goes a long way.</p><hr><h2 id="sass-mixins" tabindex="-1"><a class="header-anchor" href="#sass-mixins"><span>Sass @mixins</span></a></h2><p>I thought it would be neat if the technique was more reusable. Basically, call a <code>@mixin</code> with parameters to control the effect and get just what you need.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.example-one</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token atrule"><span class="token rule">@include</span> <span class="token function">textGlitch</span><span class="token punctuation">(</span><span class="token string">&quot;example-one&quot;</span><span class="token punctuation">,</span> 17<span class="token punctuation">,</span> white<span class="token punctuation">,</span> black<span class="token punctuation">,</span> red<span class="token punctuation">,</span> blue<span class="token punctuation">,</span> 450<span class="token punctuation">,</span> 115<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here’s my take on it:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token comment">/*</span>
<span class="line">  (TEXT) PARAMS</span>
<span class="line">  =================</span>
<span class="line">  1. Namespace</span>
<span class="line">  2. Intensity</span>
<span class="line">  3. Text color</span>
<span class="line">  4. Background color (flat)</span>
<span class="line">  5. Highlight #1 color</span>
<span class="line">  6. Highlight #2 color</span>
<span class="line">  7. Width (px)</span>
<span class="line">  8. Height (px)</span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@mixin</span> <span class="token function">textGlitch</span><span class="token punctuation">(</span>$name<span class="token punctuation">,</span> $intensity<span class="token punctuation">,</span> $textColor<span class="token punctuation">,</span> $background<span class="token punctuation">,</span> $highlightColor1<span class="token punctuation">,</span> $highlightColor2<span class="token punctuation">,</span> $width<span class="token punctuation">,</span> $height<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">  </span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> $textColor<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="line">  $<span class="token property">steps</span><span class="token punctuation">:</span> $intensity<span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  // Ensure the <span class="token atrule"><span class="token rule">@keyframes</span> are generated at the root level</span>
<span class="line">  @at-root</span> <span class="token punctuation">{</span></span>
<span class="line">    // We need two different ones</span>
<span class="line">    <span class="token atrule"><span class="token rule">@for</span> $i from 1 through 2</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token atrule"><span class="token rule">@keyframes</span> #</span><span class="token punctuation">{</span>$name<span class="token punctuation">}</span><span class="token selector">-anim-#</span><span class="token punctuation">{</span>$i<span class="token punctuation">}</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token atrule"><span class="token rule">@for</span> $i from 0 through $steps</span> <span class="token punctuation">{</span></span>
<span class="line">          $<span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">random</span><span class="token punctuation">(</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          $<span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token function">random</span><span class="token punctuation">(</span>101 - $top<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token selector">#</span><span class="token punctuation">{</span><span class="token function">percentage</span><span class="token punctuation">(</span>$i*<span class="token punctuation">(</span>1/$steps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token selector">clip-path: inset(#</span><span class="token punctuation">{</span>$top<span class="token punctuation">}</span><span class="token selector">% 0 #</span><span class="token punctuation">{</span>$bottom<span class="token punctuation">}</span>% 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">&amp;::before,</span>
<span class="line">  &amp;::after</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>data-text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">background</span><span class="token punctuation">:</span> $background<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">&amp;::after</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">left</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">text-shadow</span><span class="token punctuation">:</span> -1px 0 $highlightColor1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token selector">animation: #</span><span class="token punctuation">{</span>$name<span class="token punctuation">}</span>-anim-1 2s infinite linear alternate-reverse<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">&amp;::before</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">left</span><span class="token punctuation">:</span> -2px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">text-shadow</span><span class="token punctuation">:</span> 2px 0 $highlightColor2<span class="token punctuation">;</span> </span>
<span class="line">    <span class="token selector">animation: #</span><span class="token punctuation">{</span>$name<span class="token punctuation">}</span>-anim-2 3s infinite linear alternate-reverse<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are a million different ways to approach it, this is just one. Totally depends on how much you want the mixin to do for you, how much customizability you want or need, what you want left in the HTML, etc.</p>`,24)),s("p",null,[n[38]||(n[38]=a("I also made two more mixins, one for applying this effect to images, and on for inline SVG. They are different because they don’t use pseudo-elements to make the copies, coloring happens in different ways, positioning happens differently, etc. ")),s("a",G,[n[35]||(n[35]=a("Here’s all three of them together (")),e(l,{icon:"fa-brands fa-codepen"}),n[36]||(n[36]=s("code",null,"chriscoyier",-1)),n[37]||(n[37]=a(")"))]),n[39]||(n[39]=a("."))]),n[44]||(n[44]=s("p",null,"And a demo:",-1)),e(u,{user:"chriscoyier","slug-hash":"RwboqMr",title:"CSS Glitched Text","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),g(" TODO: add ARTICLE CARD "),e(c,d(m({title:"Glitch Effect on Text / Images / SVG",desc:"Lucas Bebber's Glitch is a super cool effect. It's like you're looking at some text displayed on a progressive scan monitor that has been dropped on the",link:"https://chanhi2000.github.io/bookshelf/css-tricks.com/glitch-effect-text-images-svg.html",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16)])}const q=v(y,[["render",A]]),P=JSON.parse('{"path":"/css-tricks.com/glitch-effect-text-images-svg.html","title":"Glitch Effect on Text / Images / SVG","lang":"en-US","frontmatter":{"lang":"en-US","title":"Glitch Effect on Text / Images / SVG","description":"Article(s) > Glitch Effect on Text / Images / SVG","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","css-tricks.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Glitch Effect on Text / Images / SVG\\",\\"image\\":[\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2014/09/glitch-stacked.png?ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2014/09/red-blue-overlays.png\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2014/09/clipped-layers.png\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2014/09/glitch-in-action.gif?ssl=1\\"],\\"datePublished\\":\\"2019-08-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chris Coyier\\",\\"url\\":\\"https://css-tricks.com/author/chriscoyier/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/glitch-effect-text-images-svg.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Glitch Effect on Text / Images / SVG"}],["meta",{"property":"og:description","content":"Article(s) > Glitch Effect on Text / Images / SVG"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2014/09/glitch-stacked.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2014/09/glitch-stacked.png"}],["meta",{"name":"twitter:image:alt","content":"Glitch Effect on Text / Images / SVG"}],["meta",{"property":"article:author","content":"Chris Coyier"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"css-tricks.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2019-08-21T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Glitch Effect on Text / Images / SVG"},{"property":"og:description","content":"Glitch Effect on Text / Images / SVG"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/glitch-effect-text-images-svg.html"}]],"prev":"/programming/css/articles/README.md","date":"2019-08-21T00:00:00.000Z","isOriginal":false,"author":[{"name":"Chris Coyier","url":"https://css-tricks.com/author/chriscoyier/"}],"cover":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2014/09/glitch-stacked.png"},"git":{},"readingTime":{"minutes":4.75,"words":1426},"filePathRelative":"css-tricks.com/glitch-effect-text-images-svg.md","copyright":{"author":"Chris Coyier"}}');export{q as comp,P as data};
