import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as e,b as i,a as y,t as f,n as d,g as k,w as o,e as a,r as t,o as b}from"./app-BVguHYKu.js";const w={},x={id:"frontmatter-title-관련",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},A={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_colors/Relative_colors",target:"_blank",rel:"noopener noreferrer"},R={href:"https://caniuse.com/?search=relative%20color",target:"_blank",rel:"noopener noreferrer"},I={href:"https://chriscoyier.net/2023/05/12/add-opacity-to-an-existing-color/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://chriscoyier.net/2023/01/22/ok-oklch-%F0%9F%91%91/",target:"_blank",rel:"noopener noreferrer"};function U(c,n){const r=t("VPCard"),l=t("router-link"),m=t("SiteInfo"),p=t("VPIcon"),h=t("RouteLink"),u=t("CodePen");return b(),g("div",null,[s("h1",x,[s("a",C,[s("span",null,f(c.$frontmatter.title)+" 관련",1)])]),e(r,d(k({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[e(l,{to:"#add-opacity-to-a-color-you-already-have"},{default:o(()=>n[0]||(n[0]=[a("Add Opacity to a Color you Already Have")])),_:1,__:[0]})]),s("li",null,[e(l,{to:"#darken-a-color-you-already-have"},{default:o(()=>n[1]||(n[1]=[a("Darken a Color you Already Have")])),_:1,__:[1]})]),s("li",null,[e(l,{to:"#lighten-a-color-you-already-have"},{default:o(()=>n[2]||(n[2]=[a("Lighten a Color you Already Have")])),_:1,__:[2]})]),s("li",null,[e(l,{to:"#easy-variations"},{default:o(()=>n[3]||(n[3]=[a("Easy Variations")])),_:1,__:[3]})])])]),n[19]||(n[19]=s("hr",null,null,-1)),e(m,{name:"Relative Color Syntax — Basic Use Cases",desc:"Support for the relative color syntax in CSS is across the board now (go interop!), so here we look at some basic (and still very useful) use cases, like applying alpha to a color you have on hand.",url:"https://frontendmasters.com/blog/relative-color-syntax-basic-use-cases",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3448"}),s("p",null,[n[7]||(n[7]=a("As of last month, Firefox 128’s support of the ")),s("a",A,[e(p,{icon:"fa-brands fa-firefox"}),n[4]||(n[4]=a("relative color syntax"))]),n[8]||(n[8]=a(" means we’ve now got ")),s("a",R,[e(p,{icon:"fas fa-globe"}),n[5]||(n[5]=a("support across the board"))]),n[9]||(n[9]=a(". I’m excited about that as it’s an extremely powerful way to manipulate colors in CSS. Plus it was ")),e(h,{to:"/frontendmasters.com/comparing-interop-2024-choices-to-the-popular-vote.html"},{default:o(()=>n[6]||(n[6]=[a("part of Interop")])),_:1,__:[6]}),n[10]||(n[10]=a(" this year so that is further proof that is trucking along nicely."))]),n[20]||(n[20]=i(`<p>The syntax with generic names looks like this:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token function">color-function</span><span class="token punctuation">(</span>from origin-color channel1 channel2 channel3 / alpha<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Here’s how it works in my head:</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/08/relative-color-syntax.png?resize=1024%2C597&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="add-opacity-to-a-color-you-already-have" tabindex="-1"><a class="header-anchor" href="#add-opacity-to-a-color-you-already-have"><span>Add Opacity to a Color you Already Have</span></a></h2><p>It’s common to have CSS custom properties set up for colors on a project.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">html</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--color-yellow</span><span class="token punctuation">:</span> <span class="token function">oklch</span><span class="token punctuation">(</span>80% 0.15 94<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--color-green</span><span class="token punctuation">:</span>  <span class="token function">oklch</span><span class="token punctuation">(</span>70% 0.25 140<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  ...</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)),s("p",null,[n[12]||(n[12]=a("Now you want to use that yellow, but at about 50% opacity. How do you do that? There are actually ")),s("a",I,[e(p,{icon:"fas fa-globe"}),n[11]||(n[11]=a("a couple of ways to add transparency to an existing color"))]),n[13]||(n[13]=a(", but in my opinion the relative color syntax is the nicest."))]),n[21]||(n[21]=i(`<p>In the past, I’ve split out the color values like this:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">html</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--color-yellow-lch</span><span class="token punctuation">:</span> 80% 0.15 94<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--color-yellow</span><span class="token punctuation">:</span> <span class="token function">oklch</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--color-yellow-lch<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  ...</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That way I could either use the color all together, or use the split out values to apply opacity:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.box</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-yellow<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">oklch</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--color-yellow-lch<span class="token punctuation">)</span> / 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But that can get out of hand! You could also split each color into L, C, and H, the combine those, giving you <em>five</em> variables for every color. Too much.</p><p>With the relative color syntax, breaking down colors isn’t necessary. You apply alpha (and other transformations) on demand, leaving the original single color as the only variable (token) you need.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.box</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-yellow<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">oklch</span><span class="token punctuation">(</span>from <span class="token function">var</span><span class="token punctuation">(</span>--color-yellow<span class="token punctuation">)</span> l c h / 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I much prefer the idea of keeping the main colors tokenized as custom properties, then tweaking them as needed on demand.</p><hr><h2 id="darken-a-color-you-already-have" tabindex="-1"><a class="header-anchor" href="#darken-a-color-you-already-have"><span>Darken a Color you Already Have</span></a></h2><p>In the above example, we had <code>--color-yellow</code> and I ended by saying I prefer doing one-off tweaks on demand rather than making a whole new variable. If you have a <em>ton</em> of usage of a slightly-darker version of a color, then sure, make a new variable and stay consistent. But if it’s more of a one-off, relative color syntax is awesome:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.box</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--gray-5<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token selector">h2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-yellow<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/* Darkened version of yellow */</span></span>
<span class="line">    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 2px solid <span class="token function">oklch</span><span class="token punctuation">(</span>from <span class="token function">var</span><span class="token punctuation">(</span>--color-yellow<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>l - 0.4<span class="token punctuation">)</span> c h<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="lighten-a-color-you-already-have" tabindex="-1"><a class="header-anchor" href="#lighten-a-color-you-already-have"><span>Lighten a Color you Already Have</span></a></h2>`,14)),s("p",null,[n[15]||(n[15]=a("Same deal here. I’m ")),s("a",B,[e(p,{icon:"fas fa-globe"}),n[14]||(n[14]=a("using OKLCH because I like it"))]),n[16]||(n[16]=a(", particularly the “uniform brightness” characteristic. Meaning when doing this darkening and lightening across different colors, ")),n[17]||(n[17]=s("em",null,"it feels like it lightens/darkens the same amount",-1)),n[18]||(n[18]=a(". Which feels weird to write, but it’s true. Other color spaces do not lighten and darken consistently."))]),n[22]||(n[22]=i(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.box</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--gray-5<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token selector">h2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-orange<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/* Darkened version of orange */</span></span>
<span class="line">    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 2px solid <span class="token function">oklch</span><span class="token punctuation">(</span>from <span class="token function">var</span><span class="token punctuation">(</span>--color-orange<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>l + 0.4<span class="token punctuation">)</span> c h<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),e(u,{user:"chriscoyier","slug-hash":"MWMOWdQ",title:"Lighten a one-off color","default-tab":["css","result"],theme:c.$isDarkmode?"dark":"light"},null,8,["theme"]),n[23]||(n[23]=i(`<hr><h2 id="easy-variations" tabindex="-1"><a class="header-anchor" href="#easy-variations"><span>Easy Variations</span></a></h2><p>Avoiding making too many variables is a nice consequence of the relative color syntax, but you can still use the relative color syntax to make variables if it’s useful to have them.</p><p>I like the idea of starting with a base color, perhaps a slightly tinted gray, and then making the official variations with the relative color syntax.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">html</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--base-gray</span><span class="token punctuation">:</span> <span class="token function">oklch</span><span class="token punctuation">(</span>12.94% 0.02 159<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token property">--gray-1</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--base-gray<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--gray-2</span><span class="token punctuation">:</span> <span class="token function">oklch</span><span class="token punctuation">(</span>from <span class="token function">var</span><span class="token punctuation">(</span>--base-gray<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>l + 0.1<span class="token punctuation">)</span> c h<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--gray-3</span><span class="token punctuation">:</span> <span class="token function">oklch</span><span class="token punctuation">(</span>from <span class="token function">var</span><span class="token punctuation">(</span>--base-gray<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>l + 0.2<span class="token punctuation">)</span> c h<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--gray-4</span><span class="token punctuation">:</span> <span class="token function">oklch</span><span class="token punctuation">(</span>from <span class="token function">var</span><span class="token punctuation">(</span>--base-gray<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>l + 0.3<span class="token punctuation">)</span> c h<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--gray-5</span><span class="token punctuation">:</span> <span class="token function">oklch</span><span class="token punctuation">(</span>from <span class="token function">var</span><span class="token punctuation">(</span>--base-gray<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>l + 0.4<span class="token punctuation">)</span> c h<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--gray-6</span><span class="token punctuation">:</span> <span class="token function">oklch</span><span class="token punctuation">(</span>from <span class="token function">var</span><span class="token punctuation">(</span>--base-gray<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>l + 0.5<span class="token punctuation">)</span> c h<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--gray-7</span><span class="token punctuation">:</span> <span class="token function">oklch</span><span class="token punctuation">(</span>from <span class="token function">var</span><span class="token punctuation">(</span>--base-gray<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>l + 0.6<span class="token punctuation">)</span> c h<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--gray-8</span><span class="token punctuation">:</span> <span class="token function">oklch</span><span class="token punctuation">(</span>from <span class="token function">var</span><span class="token punctuation">(</span>--base-gray<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>l + 0.7<span class="token punctuation">)</span> c h<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),e(u,{user:"chriscoyier","slug-hash":"ExBbaxO",title:"Colored Grays with Relative Color Syntax","default-tab":["css","result"],theme:c.$isDarkmode?"dark":"light"},null,8,["theme"]),n[24]||(n[24]=s("hr",null,null,-1)),n[25]||(n[25]=s("p",null,[a("The fact that you can "),s("em",null,"start"),a(" with any color, use "),s("em",null,"any color function"),a(", and manipulate "),s("em",null,"any part"),a(" of the color is incredibly powerful. The above use cases are pretty basic. I’m sure more talented designers or developers who deeply know color will be able to do much more interesting things!")],-1)),y(" TODO: add ARTICLE CARD "),e(r,d(k({title:"Relative Color Syntax — Basic Use Cases",desc:"Support for the relative color syntax in CSS is across the board now (go interop!), so here we look at some basic (and still very useful) use cases, like applying alpha to a color you have on hand.",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/relative-color-syntax-basic-use-cases.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const P=v(w,[["render",U]]),D=JSON.parse('{"path":"/frontendmasters.com/relative-color-syntax-basic-use-cases.html","title":"Relative Color Syntax — Basic Use Cases","lang":"en-US","frontmatter":{"lang":"en-US","title":"Relative Color Syntax — Basic Use Cases","description":"Article(s) > Relative Color Syntax — Basic Use Cases","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","frontendmasters.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Relative Color Syntax — Basic Use Cases\\",\\"image\\":[\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/08/relative-color-syntax.png?resize=1024%2C597&ssl=1\\"],\\"datePublished\\":\\"2024-08-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chris Coyier\\",\\"url\\":\\"https://frontendmasters.com/blog/author/chriscoyier/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/relative-color-syntax-basic-use-cases.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Relative Color Syntax — Basic Use Cases"}],["meta",{"property":"og:description","content":"Article(s) > Relative Color Syntax — Basic Use Cases"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3448"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3448"}],["meta",{"name":"twitter:image:alt","content":"Relative Color Syntax — Basic Use Cases"}],["meta",{"property":"article:author","content":"Chris Coyier"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-08-12T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Relative Color Syntax — Basic Use Cases"},{"property":"og:description","content":"Relative Color Syntax — Basic Use Cases"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/relative-color-syntax-basic-use-cases.html"}]],"prev":"/programming/css/articles/README.md","date":"2024-08-12T00:00:00.000Z","isOriginal":false,"author":[{"name":"Chris Coyier","url":"https://frontendmasters.com/blog/author/chriscoyier/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3448"},"git":{},"readingTime":{"minutes":3.62,"words":1086},"filePathRelative":"frontendmasters.com/relative-color-syntax-basic-use-cases.md","copyright":{"author":"Chris Coyier"}}');export{P as comp,D as data};
