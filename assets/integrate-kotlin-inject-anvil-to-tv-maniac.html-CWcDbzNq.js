import{_ as f}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as n,f as a,b as g,a as y,t as w,n as k,g as m,w as s,e as t,r as p,o as A}from"./app-BVguHYKu.js";const C={},j={id:"frontmatter-title-관련",tabindex:"-1"},I={class:"header-anchor",href:"#frontmatter-title-관련"},T={class:"table-of-contents"},D={href:"https://unsplash.com/@albertstoynov",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/evant/kotlin-inject",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/thomaskioko/tv-maniac",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/amzn/kotlin-inject-anvil?tab=readme-ov-file",target:"_blank",rel:"noopener noreferrer"},M={href:"https://betterprogramming.pub/going-modular-the-kotlin-multiplatform-way-132c3dee6c95",target:"_blank",rel:"noopener noreferrer"},K={href:"https://medium.com/@_thomaskioko/kmm-preferences-datastore-674382443262",target:"_blank",rel:"noopener noreferrer"},P={href:"https://medium.com/@_thomaskioko/kmm-environment-variables-part-1-877091c2d5b4",target:"_blank",rel:"noopener noreferrer"},q={href:"https://proandroiddev.com/intercepting-ktor-network-responses-in-kotlin-multiplatform-32946b7d4d65",target:"_blank",rel:"noopener noreferrer"},z={href:"https://medium.com/proandroiddev/navigating-the-waters-of-kotlin-multiplatform-exploring-navigation-solutions-eef81aaa1a61",target:"_blank",rel:"noopener noreferrer"},B={href:"https://medium.com/@_thomaskioko/enhancing-ios-development-with-swift-ui-packages-kmm-fa31901fa146",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/thomaskioko/tv-maniac/pull/363",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/amzn/kotlin-inject-anvil?tab=readme-ov-file",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://github.com/amzn/kotlin-inject-anvil/blob/main/runtime/src/commonMain/kotlin/software/amazon/lastmile/kotlin/inject/anvil/ContributesSubcomponent.kt",target:"_blank",rel:"noopener noreferrer"},F={href:"https://x.com/vRallev",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/amzn/kotlin-inject-anvil",target:"_blank",rel:"noopener noreferrer"},W={href:"https://x.com/vRallev",target:"_blank",rel:"noopener noreferrer"},E={class:"hint-container info"},G={href:"https://proandroiddev.com/integrate-kotlin-inject-anvil-to-tv-maniac-e1330c9cb566",target:"_blank",rel:"noopener noreferrer"};function O(v,e){const u=p("VPCard"),r=p("router-link"),c=p("SiteInfo"),o=p("VPIcon"),b=p("RouteLink"),d=p("Tabs");return A(),h("div",null,[n("h1",j,[n("a",I,[n("span",null,w(v.$frontmatter.title)+" 관련",1)])]),a(u,k(m({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",T,[n("ul",null,[n("li",null,[a(r,{to:"#intro"},{default:s(()=>e[0]||(e[0]=[t("Intro")])),_:1,__:[0]})]),n("li",null,[a(r,{to:"#koltlin-inject-anvil-integration"},{default:s(()=>e[1]||(e[1]=[t("Koltlin-Inject-Anvil Integration")])),_:1,__:[1]}),n("ul",null,[n("li",null,[a(r,{to:"#add-kotin-inject-anvil-dependencies"},{default:s(()=>e[2]||(e[2]=[t("Add kotin-inject-anvil Dependencies")])),_:1,__:[2]})]),n("li",null,[a(r,{to:"#add-contributesto-annotation"},{default:s(()=>e[3]||(e[3]=[t("Add @ContributesTo Annotation")])),_:1,__:[3]})]),n("li",null,[a(r,{to:"#add-contributesbinding-annotation"},{default:s(()=>e[4]||(e[4]=[t("Add @ContributesBinding Annotation")])),_:1,__:[4]})]),n("li",null,[a(r,{to:"#mergecomponent-annotation"},{default:s(()=>e[5]||(e[5]=[t("@MergeComponent Annotation")])),_:1,__:[5]})])])])])]),e[113]||(e[113]=n("hr",null,null,-1)),a(c,{name:"Integrate Kotlin-Inject-Anvil To Tv Maniac",desc:"If you've used Anvil before, you know it takes away a lot of the boilerplate code and makes DI seamless. If Anvil is new to you, it basically allows you to contribute dagger modules and component interfaces to your DI graph, merge all the contributions, and add them to your component during compilation. Ralf Wonderatschek and Gabriel Peal gave an in-depth talk about this. Dagger + Anvil: Learning to Love Dependency Injection. You should check it out.",url:"https://droidcon.com/2024/12/12/integrate-kotlin-inject-anvil-to-tv-maniac",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",preview:"https://droidcon.com/wp-content/uploads/2024/12/0_Q0gZACq7a3T4cYeD-1024x683.webp"}),n("figure",null,[e[8]||(e[8]=n("img",{src:"https://droidcon.com/wp-content/uploads/2024/12/0_Q0gZACq7a3T4cYeD-1024x683.webp",alt:'Photo by <VPIcon icon="fas fa-globe"/>Albert Stoynov',tabindex:"0",loading:"lazy"},null,-1)),n("figcaption",null,[e[7]||(e[7]=t("Photo by ")),n("a",D,[a(o,{icon:"fas fa-globe"}),e[6]||(e[6]=t("Albert Stoynov"))])])]),e[114]||(e[114]=n("hr",null,null,-1)),e[115]||(e[115]=n("h2",{id:"intro",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#intro"},[n("span",null,"Intro")])],-1)),n("p",null,[e[10]||(e[10]=t("If you've used Anvil before, you know it takes away a lot of the boilerplate code and makes DI seamless. If Anvil is new to you, it basically allows you to contribute dagger modules and component interfaces to your DI graph, merge all the contributions, and add them to your component during compilation. Ralf Wonderatschek and Gabriel Peal gave an in-depth talk about this. ")),a(b,{to:"/droidcon.com/dagger-anvil-learning-to-love-dependency-injection.html"},{default:s(()=>e[9]||(e[9]=[t("Dagger + Anvil: Learning to Love Dependency Injection.")])),_:1,__:[9]}),e[11]||(e[11]=t(" You should check it out."))]),n("p",null,[e[17]||(e[17]=t("I have been using ")),n("a",x,[a(o,{icon:"iconfont icon-github"}),e[12]||(e[12]=n("code",null,"evant/kotlin-inject",-1))]),e[18]||(e[18]=t(" on ")),n("a",S,[e[13]||(e[13]=t("my pet project (")),a(o,{icon:"iconfont icon-github"}),e[14]||(e[14]=n("code",null,"thomaskioko/tv-maniac",-1)),e[15]||(e[15]=t(")"))]),e[19]||(e[19]=t(" for a while now, and I have had a good time with it, coming from using Dagger in other projects. One thing I missed was using Anvil. This was not available until recently, when ")),n("a",R,[a(o,{icon:"iconfont icon-github"}),e[16]||(e[16]=n("code",null,"amzn/kotlin-inject-anvil",-1))]),e[20]||(e[20]=t(" joined the chat."))]),e[116]||(e[116]=n("p",null,"This is a blog of an ongoing series on my journey with Kotlin Multiplatform. This article will focus on my experience and journey integrating/migrating to kotlin-inject-anvil into the project.",-1)),n("ul",null,[n("li",null,[n("a",M,[a(o,{icon:"fas fa-globe"}),e[21]||(e[21]=n("strong",null,"Going Modular — The Kotlin Multiplatform Way",-1))])]),n("li",null,[n("a",K,[e[22]||(e[22]=n("strong",null,"KMM Preferences Datastore",-1)),e[23]||(e[23]=t(" (")),a(o,{icon:"fa-brands fa-medium"}),e[24]||(e[24]=n("code",null,"_thomaskioko",-1)),e[25]||(e[25]=t(")"))])]),n("li",null,[n("a",P,[e[26]||(e[26]=n("strong",null,"KMP Environment Variables (Part 1)",-1)),e[27]||(e[27]=t(" (")),a(o,{icon:"fa-brands fa-medium"}),e[28]||(e[28]=n("code",null,"_thomaskioko",-1)),e[29]||(e[29]=t(")"))])]),n("li",null,[n("a",q,[e[30]||(e[30]=n("strong",null,"Intercepting Ktor Network Responses in Kotlin Multiplatform",-1)),e[31]||(e[31]=t(" (")),a(o,{icon:"fa-brands fa-medium"}),e[32]||(e[32]=n("code",null,"proandroiddev",-1)),e[33]||(e[33]=t(")"))])]),n("li",null,[n("a",z,[e[34]||(e[34]=n("strong",null,"Navigating the Waters of Kotlin Multiplatform: Exploring Navigation Solutions",-1)),e[35]||(e[35]=t(" (")),a(o,{icon:"fa-brands fa-medium"}),e[36]||(e[36]=n("code",null,"proandroiddev",-1)),e[37]||(e[37]=t(")"))])]),n("li",null,[n("a",B,[e[38]||(e[38]=n("strong",null,"Enhancing iOS UI Previews: Swift UI Packages & Kotlin Multiplatform Mobile",-1)),e[39]||(e[39]=t(" (")),a(o,{icon:"fa-brands fa-medium"}),e[40]||(e[40]=n("code",null,"_thomaskioko",-1)),e[41]||(e[41]=t(")"))]),e[42]||(e[42]=n("strong",null,".",-1))]),e[43]||(e[43]=n("li",null,[n("strong",null,"Integrate Kotlin-Inject-Anvil To Tv Maniac —"),t(" You are here**.** 👈")],-1))]),n("p",null,[e[47]||(e[47]=t("If you want to see the code, here's the ")),n("a",N,[e[44]||(e[44]=t("pull request (")),a(o,{icon:"iconfont icon-github"}),e[45]||(e[45]=n("code",null,"thomaskioko/tv-maniac",-1)),e[46]||(e[46]=t(")"))]),e[48]||(e[48]=t("."))]),a(c,{name:"thomaskioko/tv-maniac",desc:"Tv-Maniac is a personalized entertainment tracking and recommendation Multiplatform app (Android & iOS) for tracking TV Shows using TMDB API.",url:"https://github.com/thomaskioko/tv-maniac/pull/363/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/a439114321341bb40adf5dac490397e00df88da1648c5ad818247d14d071fa9a/thomaskioko/tv-maniac/pull/363"}),e[117]||(e[117]=n("hr",null,null,-1)),e[118]||(e[118]=n("h2",{id:"koltlin-inject-anvil-integration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#koltlin-inject-anvil-integration"},[n("span",null,"Koltlin-Inject-Anvil Integration")])],-1)),n("p",null,[e[50]||(e[50]=t("Before integrating ")),n("a",V,[a(o,{icon:"iconfont icon-github"}),e[49]||(e[49]=n("code",null,"amzn/kotlin-inject-anvil",-1))]),e[51]||(e[51]=t(", one thing that bothered me was how to approach the integration/migration. I thought the process would be a pain as I already have multiple modules in my project. Do I rip the bandaid off and do it all at once? Is it possible to do it gradually? Spoiler alert: it is possible to do it gradually. This approach might not work for your project, depending on the size of the team. There are multiple ways of doing this, but this worked for me. This approach made it easier to determine if I broke the current implementation or introduced new errors."))]),e[119]||(e[119]=g(`<p>Here&#39;s a quick overview of how I approached the migration.</p><ul><li>Add dependencies</li><li>Apply<code>@ContributesTo</code> annotation</li><li>Apply <code>@ContributesBinding</code> annotation</li><li>Add ksp <code>kotlin-inject-anvil</code> compiler dependencies.</li><li>Delete component interfaces.</li><li>Replace <code>@Component</code> with <code>@MergeComponent</code> and create a subcomponent.</li></ul><p>Let&#39;s take a quick look at how each step is implemented.</p><h3 id="add-kotin-inject-anvil-dependencies" tabindex="-1"><a class="header-anchor" href="#add-kotin-inject-anvil-dependencies"><span>Add <code>kotin-inject-anvil</code> Dependencies</span></a></h3><p>This is pretty straightforward. We need to add the dependencies to our project.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="build.gradle.kts"><span>build.gradle.kts</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">kotlinInject<span class="token operator">-</span>anvil<span class="token operator">-</span>compiler <span class="token operator">=</span> <span class="token punctuation">{</span> group <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;software.amazon.lastmile.kotlin.inject.anvil&quot;</span></span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;compiler&quot;</span></span><span class="token punctuation">,</span> version<span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;kotlin-inject-anvil&quot;</span></span> <span class="token punctuation">}</span></span>
<span class="line">kotlinInject<span class="token operator">-</span>anvil<span class="token operator">-</span>runtime <span class="token operator">=</span> <span class="token punctuation">{</span> group <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;software.amazon.lastmile.kotlin.inject.anvil&quot;</span></span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;runtime&quot;</span></span><span class="token punctuation">,</span> version<span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;kotlin-inject-anvil&quot;</span></span> <span class="token punctuation">}</span></span>
<span class="line">kotlinInject<span class="token operator">-</span>anvil<span class="token operator">-</span>runtime<span class="token operator">-</span>optional <span class="token operator">=</span> <span class="token punctuation">{</span> group <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;software.amazon.lastmile.kotlin.inject.anvil&quot;</span></span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;runtime-optional&quot;</span></span><span class="token punctuation">,</span> version<span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;kotlin-inject-anvil&quot;</span></span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p><code>kotlinInject-anvil-runtime-optional</code> is optional, and your project would work without it. I added it so I can get rid of my custom scope and use kotlin-inject-anvil&#39;s scopes to keep everything consistent.</p><p>To make things easier, I created a bundle with kotlin-inject dependencies, and I use that instead.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="libs=versions.toml"><span>libs=versions.toml</span></div><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">bundles</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">kotlinInject</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string">&quot;kotlinInject-runtime&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;kotlinInject-anvil-runtime&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;kotlinInject-anvil-runtime-optional&quot;</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>We can then add it to our module like so. <code>implementation(libs.bundles.kotlinInject)</code></p><h3 id="add-contributesto-annotation" tabindex="-1"><a class="header-anchor" href="#add-contributesto-annotation"><span>Add <code>@ContributesTo</code> Annotation</span></a></h3><p>We can now annotate our interface components with <code>@ContributesTo</code>. I also replaced my custom scope with kotlin-inject-anvil scope: <code>@ApplicationScope</code> -&gt; <code>@SingleIn(AppScope::class)</code>. As mentioned, this is optional and will work with your custom scopes. Here&#39;s how the component looks.</p>`,12)),a(d,{data:[{id:"Before"},{id:"After"}],active:0},{title0:s(({value:i,isActive:l})=>e[52]||(e[52]=[t("Before")])),title1:s(({value:i,isActive:l})=>e[53]||(e[53]=[t("After")])),tab0:s(({value:i,isActive:l})=>e[54]||(e[54]=[n("div",{class:"language-kotlin line-numbers-mode","data-highlighter":"prismjs","data-ext":"kt"},[n("pre",null,[n("code",{class:"language-kotlin"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"interface"),t(" CastComponent "),n("span",{class:"token punctuation"},"{")]),t(`
`),n("span",{class:"line"},"  "),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token annotation builtin"},"@Provides")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token annotation builtin"},"@ApplicationScope"),t("  ")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"fun"),t(),n("span",{class:"token function"},"provideCastDao"),n("span",{class:"token punctuation"},"("),t("bind"),n("span",{class:"token operator"},":"),t(" DefaultCastDao"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),t(" CastDao "),n("span",{class:"token operator"},"="),t(" bind")]),t(`
`),n("span",{class:"line"},"  "),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token annotation builtin"},"@Provides")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token annotation builtin"},"@ApplicationScope")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"fun"),t(),n("span",{class:"token function"},"provideCastRepository"),n("span",{class:"token punctuation"},"("),t("bind"),n("span",{class:"token operator"},":"),t(" DefaultCastRepository"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),t(" CastRepository "),n("span",{class:"token operator"},"="),t(" bind")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),t(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:s(({value:i,isActive:l})=>e[55]||(e[55]=[n("div",{class:"language-kotlin line-numbers-mode","data-highlighter":"prismjs","data-ext":"kt"},[n("pre",null,[n("code",{class:"language-kotlin"},[n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@ContributesTo"),n("span",{class:"token punctuation"},"("),t("AppScope"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"interface"),t(" CastComponent "),n("span",{class:"token punctuation"},"{")]),t(`
`),n("span",{class:"line"},"  "),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token annotation builtin"},"@Provides")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token annotation builtin"},"@SingleIn"),n("span",{class:"token punctuation"},"("),t("AppScope"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"fun"),t(),n("span",{class:"token function"},"provideCastDao"),n("span",{class:"token punctuation"},"("),t("bind"),n("span",{class:"token operator"},":"),t(" DefaultCastDao"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),t(" CastDao "),n("span",{class:"token operator"},"="),t(" bind")]),t(`
`),n("span",{class:"line"},"  "),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token annotation builtin"},"@Provides")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token annotation builtin"},"@SingleIn"),n("span",{class:"token punctuation"},"("),t("AppScope"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"fun"),t(),n("span",{class:"token function"},"provideCastRepository"),n("span",{class:"token punctuation"},"("),t("bind"),n("span",{class:"token operator"},":"),t(" DefaultCastRepository"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),t(" CastRepository "),n("span",{class:"token operator"},"="),t(" bind")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),t(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),e[120]||(e[120]=n("p",null,[t("One small thing I did later was move the "),n("code",null,"@SingleIn"),t(" annotation to the class instead of having it in the binding functions.")],-1)),e[121]||(e[121]=n("h3",{id:"add-contributesbinding-annotation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#add-contributesbinding-annotation"},[n("span",null,[t("Add "),n("code",null,"@ContributesBinding"),t(" Annotation")])])],-1)),e[122]||(e[122]=n("p",null,[t("The next thing we can do is annotate all classes that have interface implementations with "),n("code",null,"@ContributesBinding"),t(". Once we've plugged everything in, Anvil will provide the bindings for us, and we can get rid of the component above with the manual binding.")],-1)),a(d,{data:[{id:"Before"},{id:"After"},{id:"Before"},{id:"After"}],active:0},{title0:s(({value:i,isActive:l})=>e[56]||(e[56]=[t("Before")])),title1:s(({value:i,isActive:l})=>e[57]||(e[57]=[t("After")])),title2:s(({value:i,isActive:l})=>e[58]||(e[58]=[t("Before")])),title3:s(({value:i,isActive:l})=>e[59]||(e[59]=[t("After")])),tab0:s(({value:i,isActive:l})=>e[60]||(e[60]=[n("div",{class:"code-block-with-title"},[n("div",{class:"code-block-title-bar","data-title":"DefaultCastRepository.kt"},[n("span",null,"DefaultCastRepository.kt")]),n("div",{class:"language-kotlin line-numbers-mode","data-highlighter":"prismjs","data-ext":"kt"},[n("pre",null,[n("code",{class:"language-kotlin"},[n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@Inject")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"class"),t(),n("span",{class:"token function"},"DefaultCastRepository"),n("span",{class:"token punctuation"},"(")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"private"),t(),n("span",{class:"token keyword"},"val"),t(" dao"),n("span",{class:"token operator"},":"),t(" CastDao"),n("span",{class:"token punctuation"},",")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},":"),t(" CastRepository "),n("span",{class:"token punctuation"},"{")]),t(`
`),n("span",{class:"line"},[t("    "),n("span",{class:"token comment"},"// ...")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),t(`
`),n("span",{class:"line"}),t(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1)])),tab1:s(({value:i,isActive:l})=>[e[61]||(e[61]=n("div",{class:"code-block-with-title"},[n("div",{class:"code-block-title-bar","data-title":"DefaultCastRepository.kt"},[n("span",null,"DefaultCastRepository.kt")]),n("div",{class:"language-kotlin line-numbers-mode","data-highlighter":"prismjs","data-ext":"kt"},[n("pre",null,[n("code",{class:"language-kotlin"},[n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@Inject")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@SingleIn"),n("span",{class:"token punctuation"},"("),t("AppScope"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@ContributesBinding"),n("span",{class:"token punctuation"},"("),t("AppScope"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"class"),t(),n("span",{class:"token function"},"DefaultCastRepository"),n("span",{class:"token punctuation"},"(")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"private"),t(),n("span",{class:"token keyword"},"val"),t(" dao"),n("span",{class:"token operator"},":"),t(" CastDao"),n("span",{class:"token punctuation"},",")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},":"),t(" CastRepository "),n("span",{class:"token punctuation"},"{")]),t(`
`),n("span",{class:"line"},[t("    "),n("span",{class:"token comment"},"// ...")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),t(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1)),e[62]||(e[62]=n("h3",{id:"add-ksp-dependencies",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#add-ksp-dependencies"},[n("span",null,"Add KSP Dependencies")])],-1)),e[63]||(e[63]=n("p",null,[t("To check if the changes we've made work as intended, we can add the Kotlin inject Anvil compiler dependency and generate the component classes."),n("code",null,"addKspDependencyForAllTargets(libs.kotlinInject.anvil.compiler)"),t(". "),n("code",null,"addKspDependencyForAllTargets"),t(" is an extension function that creates KSP configurations for each target. e.g "),n("code",null,"kspAndroid"),t(", "),n("code",null,"kspIosArm64")],-1)),e[64]||(e[64]=n("figure",null,[n("img",{src:"https://droidcon.com/wp-content/uploads/2024/12/0_kgF_dICjfmGL6Q8C.webp",alt:"We can build our app and take a look at the generated code",tabindex:"0",loading:"lazy"}),n("figcaption",null,"We can build our app and take a look at the generated code")],-1)),e[65]||(e[65]=n("p",null,[t("Anvil will generate the bindings for us similarly to what we had above. This will be generated for all our classes annotated with "),n("code",null,"@ContributesBinding(AppScope::class)"),t(".")],-1)),e[66]||(e[66]=n("div",{class:"code-block-with-title"},[n("div",{class:"code-block-title-bar","data-title":"ComThomaskiokoTvmaniacDataCastImplementationDefaultCastRepository.kt"},[n("span",null,"ComThomaskiokoTvmaniacDataCastImplementationDefaultCastRepository.kt")]),n("div",{class:"language-kotlin line-numbers-mode","data-highlighter":"prismjs","data-ext":"kt"},[n("pre",null,[n("code",{class:"language-kotlin"},[n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@Origin"),n("span",{class:"token punctuation"},"("),t("value "),n("span",{class:"token operator"},"="),t(" DefaultCastRepository"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),t(),n("span",{class:"token keyword"},"interface"),t(" ComThomaskiokoTvmaniacDataCastImplementationDefaultCastRepository "),n("span",{class:"token punctuation"},"{")]),t(`
`),n("span",{class:"line"},"  "),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token annotation builtin"},"@Provides")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"public"),t(),n("span",{class:"token keyword"},"fun"),t(),n("span",{class:"token function"},"provideDefaultCastRepositoryCastRepository"),n("span",{class:"token punctuation"},"("),t("defaultCastRepository"),n("span",{class:"token operator"},":"),t(" DefaultCastRepository"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),t(" CastRepository "),n("span",{class:"token operator"},"="),t()]),t(`
`),n("span",{class:"line"},"    defaultCastRepository"),t(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),t(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1)),e[67]||(e[67]=n("h3",{id:"delete-manual-bindings",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#delete-manual-bindings"},[n("span",null,"Delete Manual Bindings")])],-1)),e[68]||(e[68]=n("p",null,"Now that our bindings and components are being generated, we can delete our component interfaces with provider functions.",-1)),e[69]||(e[69]=n("p",null,"In my previous implementation, each module was responsible for creating its own DI component. The shared module then added all these SuperType Components to the parent/final component for each platform component. This is a bit painful and can easily get out of hand as your project grows. 😮‍💨",-1)),e[70]||(e[70]=n("figure",null,[n("img",{src:"https://droidcon.com/wp-content/uploads/2024/12/0_UmcoYHnJjpYp8Kp8.webp",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1)),e[71]||(e[71]=n("p",null,[t("Thanks to "),n("code",null,"kotlin-inject-anvil"),t(", we can get rid of these as they are now generated for us once we add the merge annotation. 🥳")],-1)),e[72]||(e[72]=n("hr",null,null,-1)),e[73]||(e[73]=n("h2",{id:"final-boss-mergecomponent-annotation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#final-boss-mergecomponent-annotation"},[n("span",null,[t("Final Boss: "),n("code",null,"@MergeComponent"),t(" Annotation")])])],-1)),e[74]||(e[74]=n("h3",{id:"contributessubcomponent-annotation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#contributessubcomponent-annotation"},[n("span",null,[n("code",null,"@ContributesSubcomponent"),t(" Annotation")])])],-1)),e[75]||(e[75]=n("p",null,[t("Since we can only have one component annotated with "),n("code",null,"@MergeComponent"),t(", we need to annotate "),n("code",null,"ActivityComponent"),t(" to "),n("code",null,"@ContributesSubcomponent"),t(", create a factory that our parent scope will implement.")],-1)),a(d,{data:[]})]),tab2:s(({value:i,isActive:l})=>e[76]||(e[76]=[n("div",{class:"code-block-with-title"},[n("div",{class:"code-block-title-bar","data-title":"ActivityComponent.kt"},[n("span",null,"ActivityComponent.kt")]),n("div",{class:"language-kotlin line-numbers-mode","data-highlighter":"prismjs","data-ext":"kt"},[n("pre",null,[n("code",{class:"language-kotlin"},[n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@SingleIn"),n("span",{class:"token punctuation"},"("),t("ActivityScope"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@Component")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"abstract"),t(),n("span",{class:"token keyword"},"class"),t(),n("span",{class:"token function"},"ActivityComponent"),n("span",{class:"token punctuation"},"(")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token annotation builtin"},"@get:Provides"),t(),n("span",{class:"token keyword"},"val"),t(" activity"),n("span",{class:"token operator"},":"),t(" ComponentActivity"),n("span",{class:"token punctuation"},",")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token annotation builtin"},"@get:Provides"),t(),n("span",{class:"token keyword"},"val"),t(" componentContext"),n("span",{class:"token operator"},":"),t(" ComponentContext "),n("span",{class:"token operator"},"="),t(" activity"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"defaultComponentContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},",")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token annotation builtin"},"@Component")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"val"),t(" applicationComponent"),n("span",{class:"token operator"},":"),t(" ApplicationComponent "),n("span",{class:"token operator"},"=")]),t(`
`),n("span",{class:"line"},[t("    ApplicationComponent"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"create"),n("span",{class:"token punctuation"},"("),t("activity"),n("span",{class:"token punctuation"},"."),t("application"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},",")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},":"),t(" NavigatorComponent"),n("span",{class:"token punctuation"},","),t(" TraktAuthAndroidComponent "),n("span",{class:"token punctuation"},"{")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"abstract"),t(),n("span",{class:"token keyword"},"val"),t(" traktAuthManager"),n("span",{class:"token operator"},":"),t(" TraktAuthManager")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"abstract"),t(),n("span",{class:"token keyword"},"val"),t(" rootPresenter"),n("span",{class:"token operator"},":"),t(" RootPresenter")]),t(`
`),n("span",{class:"line"},"  "),t(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"companion"),t(),n("span",{class:"token keyword"},"object")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),t(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1)])),tab3:s(({value:i,isActive:l})=>[n("p",null,[e[80]||(e[80]=t("You should note that we converted our abstract class to an interface, as only interfaces can be annotated with contributed ")),e[81]||(e[81]=n("code",null,"@ContributesSubcomponent",-1)),e[82]||(e[82]=t(". For more details on annotation usage and behavior, ")),n("a",Y,[e[77]||(e[77]=t("see the documentation. (")),a(o,{icon:"iconfont icon-github"}),e[78]||(e[78]=n("code",null,"amzn/kotlin-inject-anvil",-1)),e[79]||(e[79]=t(")"))])]),e[83]||(e[83]=n("div",{class:"code-block-with-title"},[n("div",{class:"code-block-title-bar","data-title":"ActivityComponent.kt"},[n("span",null,"ActivityComponent.kt")]),n("div",{class:"language-kotlin line-numbers-mode","data-highlighter":"prismjs","data-ext":"kt"},[n("pre",null,[n("code",{class:"language-kotlin"},[n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@ContributesSubcomponent"),n("span",{class:"token punctuation"},"("),t("ActivityScope"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@SingleIn"),n("span",{class:"token punctuation"},"("),t("ActivityScope"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"interface"),t(" ActivityComponent "),n("span",{class:"token punctuation"},"{")]),t(`
`),n("span",{class:"line"}),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token annotation builtin"},"@Provides")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"fun"),t(),n("span",{class:"token function"},"provideComponentContext"),n("span",{class:"token punctuation"},"(")]),t(`
`),n("span",{class:"line"},[t("    activity"),n("span",{class:"token operator"},":"),t(" ComponentActivity")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),t(" ComponentContext "),n("span",{class:"token operator"},"="),t(" activity"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"defaultComponentContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),t(`
`),n("span",{class:"line"}),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"val"),t(" traktAuthManager"),n("span",{class:"token operator"},":"),t(" TraktAuthManager")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"val"),t(" rootPresenter"),n("span",{class:"token operator"},":"),t(" RootPresenter")]),t(`
`),n("span",{class:"line"}),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token annotation builtin"},"@ContributesSubcomponent"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Factory"),n("span",{class:"token punctuation"},"("),t("AppScope"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"interface"),t(" Factory "),n("span",{class:"token punctuation"},"{")]),t(`
`),n("span",{class:"line"},[t("    "),n("span",{class:"token keyword"},"fun"),t(),n("span",{class:"token function"},"createComponent"),n("span",{class:"token punctuation"},"(")]),t(`
`),n("span",{class:"line"},[t("      activity"),n("span",{class:"token operator"},":"),t(" ComponentActivity")]),t(`
`),n("span",{class:"line"},[t("    "),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),t(" ActivityComponent")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token punctuation"},"}")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),t(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1))]),_:1}),e[123]||(e[123]=g('<h3 id="mergecomponent-annotation" tabindex="-1"><a class="header-anchor" href="#mergecomponent-annotation"><span><code>@MergeComponent</code> Annotation</span></a></h3><p>To create our graph and our components to our graph, we need to replace <code>kotlin-injects</code> <code>@Component</code> with <code>kotlin-inject-anvil</code> <code>@MergeComponent</code> and get rid of the <code>SharedComponent</code>.</p>',2)),a(d,{data:[{id:"Before"},{id:"After"}],active:0},{title0:s(({value:i,isActive:l})=>e[84]||(e[84]=[t("Before")])),title1:s(({value:i,isActive:l})=>e[85]||(e[85]=[t("After")])),tab0:s(({value:i,isActive:l})=>e[86]||(e[86]=[n("div",{class:"code-block-with-title"},[n("div",{class:"code-block-title-bar","data-title":"ApplicationComponent.kt"},[n("span",null,"ApplicationComponent.kt")]),n("div",{class:"language-kotlin line-numbers-mode","data-highlighter":"prismjs","data-ext":"kt"},[n("pre",null,[n("code",{class:"language-kotlin"},[n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@Component")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@SingleIn"),n("span",{class:"token punctuation"},"("),t("AppScope"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"abstract"),t(),n("span",{class:"token keyword"},"class"),t(),n("span",{class:"token function"},"ApplicationComponent"),n("span",{class:"token punctuation"},"(")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token annotation builtin"},"@get:Provides"),t(),n("span",{class:"token keyword"},"val"),t(" application"),n("span",{class:"token operator"},":"),t(" Application"),n("span",{class:"token punctuation"},",")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},":"),t(),n("span",{class:"token function"},"SharedComponent"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"abstract"),t(),n("span",{class:"token keyword"},"val"),t(" initializers"),n("span",{class:"token operator"},":"),t(" AppInitializers")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"companion"),t(),n("span",{class:"token keyword"},"object")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),t(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1)])),tab1:s(({value:i,isActive:l})=>[e[102]||(e[102]=n("p",null,[t("I added annotation, removed the supertype from the application component, and added "),n("code",null,"ActivityComponent.Factory"),t(".")],-1)),e[103]||(e[103]=n("div",{class:"code-block-with-title"},[n("div",{class:"code-block-title-bar","data-title":"ApplicationComponent.kt"},[n("span",null,"ApplicationComponent.kt")]),n("div",{class:"language-kotlin line-numbers-mode","data-highlighter":"prismjs","data-ext":"kt"},[n("pre",null,[n("code",{class:"language-kotlin"},[n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@MergeComponent"),n("span",{class:"token punctuation"},"("),t("AppScope"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token annotation builtin"},"@SingleIn"),n("span",{class:"token punctuation"},"("),t("AppScope"),n("span",{class:"token operator"},"::"),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"abstract"),t(),n("span",{class:"token keyword"},"class"),t(),n("span",{class:"token function"},"ApplicationComponent"),n("span",{class:"token punctuation"},"(")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token annotation builtin"},"@get:Provides"),t(),n("span",{class:"token keyword"},"val"),t(" application"),n("span",{class:"token operator"},":"),t(" Application"),n("span",{class:"token punctuation"},",")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},":"),t(" ActivityComponent"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Factory"),t(),n("span",{class:"token punctuation"},"{")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"abstract"),t(),n("span",{class:"token keyword"},"val"),t(" initializers"),n("span",{class:"token operator"},":"),t(" AppInitializers")]),t(`
`),n("span",{class:"line"},[t("  "),n("span",{class:"token keyword"},"abstract"),t(),n("span",{class:"token keyword"},"val"),t(" activityComponentFactory"),n("span",{class:"token operator"},":"),t(" ActivityComponent"),n("span",{class:"token punctuation"},"."),t("Factory")]),t(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),t(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1)),e[104]||(e[104]=n("figure",null,[n("img",{src:"https://droidcon.com/wp-content/uploads/2024/12/0_KpjwBgVoFICJmiNI-1024x761.webp",alt:"Now, if we look at the generated code, we can see that Anvil adds all the generated components to our graph when we compile the app.",tabindex:"0",loading:"lazy"}),n("figcaption",null,"Now, if we look at the generated code, we can see that Anvil adds all the generated components to our graph when we compile the app.")],-1)),e[105]||(e[105]=n("p",null,"If you forget to delete any provide functions, you will get the following error at compile time.",-1)),e[106]||(e[106]=n("div",{class:"code-block-with-title"},[n("div",{class:"code-block-title-bar","data-title":"output"},[n("span",null,"output")]),n("div",{class:"language-plaintext line-numbers-mode","data-highlighter":"prismjs","data-ext":"plaintext"},[n("pre",null,[n("code",{class:"language-plaintext"},[n("span",{class:"line"},"e: [ksp] Cannot provide: com.thomaskioko.tvmaniac.data.cast.api.CastDao"),t(`
`),n("span",{class:"line"},"e: [ksp] as it is already provided"),t(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1)),e[107]||(e[107]=n("p",null,"This is expected; you can track down the duplicate provide method and delete it.",-1)),e[108]||(e[108]=n("hr",null,null,-1)),e[109]||(e[109]=n("h2",{id:"conclusion",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#conclusion"},[n("span",null,"Conclusion")])],-1)),e[110]||(e[110]=n("p",null,[t("With this in place, we have now gotten rid of manual bindings, replacing them with "),n("code",null,"@ContributesTo"),t(" and "),n("code",null,"@ContributesBinding"),t(". We also deleted our god component class and got rid of a lot of boilerplate, thanks to Anvil.")],-1)),n("p",null,[n("a",F,[e[87]||(e[87]=t("Ralf (")),a(o,{icon:"fa-brands fa-x-twitter"}),e[88]||(e[88]=n("code",null,"vRallev",-1)),e[89]||(e[89]=t(")"))]),e[91]||(e[91]=t(" and all the contributors have done a fantastic job with ")),n("a",L,[a(o,{icon:"iconfont icon-github"}),e[90]||(e[90]=n("code",null,"amzn/kotlin-inject-anvil",-1))]),e[92]||(e[92]=t(". The integration was smooth. I'm looking forward to how these libraries evolve. (Maybe it should be renamed to KiAnvil. Get it? You know, like Keanu, because of how lethal it feels? No? 😂 Don't worry, I will see myself out.)"))]),n("p",null,[e[96]||(e[96]=t("Thanks, ")),n("a",W,[e[93]||(e[93]=t("Ralf (")),a(o,{icon:"fa-brands fa-x-twitter"}),e[94]||(e[94]=n("code",null,"vRallev",-1)),e[95]||(e[95]=t(")"))]),e[97]||(e[97]=t(", for reviewing the article. Until we meet again, folks. Happy coding! ✌️"))]),e[111]||(e[111]=n("hr",null,null,-1)),e[112]||(e[112]=n("h2",{id:"references",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#references"},[n("span",null,"References")])],-1)),a(u,k(m({title:"Dagger + Anvil: Learning to Love Dependency Injection",desc:"This is a joint talk with Ralf Wondratschek from Square and Gabriel Peal from Tonal. Anvil is a Kotlin compiler plugin that makes dependency injection with Dagger 2 easier. Anvil reduces boilerplate code, improves code modularization, reduces build times, and enables custom code generators to further simplify patterns specific to your codebase. In this talk we will explain why Square created Anvil, how Tonal successfully adopted it, how the plugin works under the hood, what code is being generated and how you can get the most out of the framework",link:"/droidcon.com/dagger-anvil-learning-to-love-dependency-injection.md",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",background:"rgba(4,20,221,0.2)"})),null,16),a(c,{name:"KSP with Kotlin Multiplatform | Kotlin",desc:"Starting from KSP 1.0.1, applying KSP on a multiplatform project is similar to that on a single platform, JVM project. The main difference is that, instead of writing the ksp(...) configuration in dependencies, add(ksp<Target>) or add(ksp<SourceSet>) is used to specify which compilation targets need symbol processing, before compilation.",url:"https://kotlinlang.org/docs/ksp-multiplatform.html/",logo:"https://kotlinlang.org/assets/images/apple-touch-icon-114x114.png?v2",preview:"https://kotlinlang.org/assets/images/open-graph/docs.png"}),a(c,{name:"amzn/kotlin-inject-anvil",desc:"Extensions for the kotlin-inject dependency injection framework",url:"https://github.com/amzn/kotlin-inject-anvil",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/0ec2840ba33fe61c38a628367c6b7682296922e89dbf31d66abd9dbc25ae73ae/amzn/kotlin-inject-anvil"}),n("div",E,[e[101]||(e[101]=n("p",{class:"hint-container-title"},"Info",-1)),n("p",null,[e[100]||(e[100]=t("This article is previously published on ")),n("a",G,[a(o,{icon:"fa-brands fa-medium"}),e[98]||(e[98]=n("code",null,"proandroiddev",-1)),e[99]||(e[99]=t(")"))])]),a(c,{name:"Integrate Kotlin-Inject-Anvil To Tv Maniac",desc:"If you’ve used Anvil before, you know it takes away a lot of the boilerplate code and makes DI seamless. If Anvil is new to you, it basically allows you to contribute dagger modules and component interfaces to your DI graph, merge all the contributions, and add them to your component during compilation. Ralf Wonderatschek and Gabriel Peal gave an in-depth talk about this...",url:"https://proandroiddev.com/integrate-kotlin-inject-anvil-to-tv-maniac-e1330c9cb566/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/da:true/resize:fit:1200/0*Q0gZACq7a3T4cYeD"})])]),_:1}),y(" TODO: add ARTICLE CARD "),a(u,k(m({title:"Integrate Kotlin-Inject-Anvil To Tv Maniac",desc:"If you've used Anvil before, you know it takes away a lot of the boilerplate code and makes DI seamless. If Anvil is new to you, it basically allows you to contribute dagger modules and component interfaces to your DI graph, merge all the contributions, and add them to your component during compilation. Ralf Wonderatschek and Gabriel Peal gave an in-depth talk about this. Dagger + Anvil: Learning to Love Dependency Injection. You should check it out.",link:"https://chanhi2000.github.io/bookshelf/droidcon.com/integrate-kotlin-inject-anvil-to-tv-maniac.html",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",background:"rgba(4,20,221,0.2)"})),null,16)])}const U=f(C,[["render",O]]),J=JSON.parse('{"path":"/droidcon.com/integrate-kotlin-inject-anvil-to-tv-maniac.html","title":"Integrate Kotlin-Inject-Anvil To Tv Maniac","lang":"en-US","frontmatter":{"lang":"en-US","title":"Integrate Kotlin-Inject-Anvil To Tv Maniac","description":"Article(s) > Integrate Kotlin-Inject-Anvil To Tv Maniac","icon":"fa-brands fa-android","category":["Java","Kotlin","Android","Article(s)"],"tag":["blog","droidcon.com","java","kotlin","android"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Integrate Kotlin-Inject-Anvil To Tv Maniac\\",\\"image\\":[\\"https://unsplash.com/@albertstoynov\\",\\"https://droidcon.com/wp-content/uploads/2024/12/0_kgF_dICjfmGL6Q8C.webp\\",\\"https://droidcon.com/wp-content/uploads/2024/12/0_UmcoYHnJjpYp8Kp8.webp\\",\\"https://droidcon.com/wp-content/uploads/2024/12/0_KpjwBgVoFICJmiNI-1024x761.webp\\"],\\"datePublished\\":\\"2024-12-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Thomas Kioko™\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/integrate-kotlin-inject-anvil-to-tv-maniac.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Integrate Kotlin-Inject-Anvil To Tv Maniac"}],["meta",{"property":"og:description","content":"Article(s) > Integrate Kotlin-Inject-Anvil To Tv Maniac"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://droidcon.com/wp-content/uploads/2024/12/0_Q0gZACq7a3T4cYeD-1024x683.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://droidcon.com/wp-content/uploads/2024/12/0_Q0gZACq7a3T4cYeD-1024x683.webp"}],["meta",{"name":"twitter:image:alt","content":"Integrate Kotlin-Inject-Anvil To Tv Maniac"}],["meta",{"property":"article:author","content":"Thomas Kioko™"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"droidcon.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-12-12T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Integrate Kotlin-Inject-Anvil To Tv Maniac"},{"property":"og:description","content":"Integrate Kotlin-Inject-Anvil To Tv Maniac"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/integrate-kotlin-inject-anvil-to-tv-maniac.html"}]],"prev":"/programming/java-android/articles/README.md","date":"2024-12-12T00:00:00.000Z","isOriginal":false,"author":"Thomas Kioko™","cover":"https://droidcon.com/wp-content/uploads/2024/12/0_Q0gZACq7a3T4cYeD-1024x683.webp"},"git":{},"readingTime":{"minutes":7.67,"words":2301},"filePathRelative":"droidcon.com/integrate-kotlin-inject-anvil-to-tv-maniac.md","copyright":{"author":"Thomas Kioko™"}}');export{U as comp,J as data};
