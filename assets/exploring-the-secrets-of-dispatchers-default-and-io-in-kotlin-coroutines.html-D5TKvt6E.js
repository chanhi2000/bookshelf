import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as e,f as o,b as h,a as g,t as x,n as m,g as f,w as s,e as n,r as c,o as v}from"./app-BVguHYKu.js";const y={},D={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},I={class:"table-of-contents"},P={href:"https://github.com/Kotlin/kotlinx.coroutines/issues/2410",target:"_blank",rel:"noopener noreferrer"},O={href:"https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html",target:"_blank",rel:"noopener noreferrer"},U={href:"https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html",target:"_blank",rel:"noopener noreferrer"},T={class:"hint-container info"},S={href:"https://proandroiddev.com/exploring-the-secrets-of-dispatchers-default-and-io-in-kotlin-coroutines-31d703c29ee2",target:"_blank",rel:"noopener noreferrer"};function A(w,t){const p=c("VPCard"),l=c("router-link"),i=c("SiteInfo"),u=c("Tabs"),d=c("VPIcon");return v(),b("div",null,[e("h1",D,[e("a",C,[e("span",null,x(w.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),o(p,m(f({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",I,[e("ul",null,[e("li",null,[o(l,{to:"#overview"},{default:s(()=>t[0]||(t[0]=[n("Overview")])),_:1,__:[0]}),e("ul",null,[e("li",null,[o(l,{to:"#_1-core-vs-thread-the-basics"},{default:s(()=>t[1]||(t[1]=[n("1. Core vs .Thread : The Basics")])),_:1,__:[1]})]),e("li",null,[o(l,{to:"#_2-optimizing-with-dispatchers-in-kotlin-coroutines"},{default:s(()=>t[2]||(t[2]=[n("2. Optimizing with Dispatchers in Kotlin Coroutines")])),_:1,__:[2]})])])]),e("li",null,[o(l,{to:"#discussion-ü§î"},{default:s(()=>t[3]||(t[3]=[n("Discussion ü§î")])),_:1,__:[3]}),e("ul",null,[e("li",null,[o(l,{to:"#_1-whydispatchers-ioisn-t-a-replacement-fordispatchers-default"},{default:s(()=>t[4]||(t[4]=[n("1. WhyDispatchers.IOIsn‚Äôt a Replacement forDispatchers.Default?")])),_:1,__:[4]})]),e("li",null,[o(l,{to:"#_2-is-there-thread-switching-when-moving-from-default-to-io-dispatcher-using-withcontext"},{default:s(()=>t[5]||(t[5]=[n("2. Is there thread switching when moving from Default to IO dispatcher using withContext?")])),_:1,__:[5]})])])]),e("li",null,[o(l,{to:"#conclusion-üí°"},{default:s(()=>t[6]||(t[6]=[n("Conclusion üí°")])),_:1,__:[6]})]),e("li",null,[o(l,{to:"#references"},{default:s(()=>t[7]||(t[7]=[n("References")])),_:1,__:[7]})])])]),t[55]||(t[55]=e("hr",null,null,-1)),o(i,{name:"Exploring the Secrets of Dispatchers Default and IO in Kotlin Coroutines",desc:"Understanding the architecture of CPU cores and threads can be a game-changer when writing optimized code. In this guide, we will explore the differences between CPU cores and threads, the role of Kotlin‚ÄôsDispatchers.DefaultandDispatchers.IO, and why these distinctions matter when working with CPU and I/O-intensive tasks. This knowledge will help you create more efficient, high-performance applications. üëãüèª",url:"https://droidcon.com/exploring-the-secrets-of-dispatchers-default-and-io-in-kotlin-coroutines",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",preview:"https://droidcon.com/wp-content/uploads/2024/11/1_umopuK8jiae4gCm_NzahkQ.webp"}),t[56]||(t[56]=h('<p>Understanding the architecture of CPU cores and threads can be a game-changer when writing optimized code. In this guide, we will explore the differences between CPU cores and threads, the role of Kotlin‚Äôs<code>Dispatchers.Default</code>and<code>Dispatchers.IO</code>, and why these distinctions matter when working with CPU and I/O-intensive tasks. This knowledge will help you create more efficient, high-performance applications. üëãüèª</p><hr><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><h3 id="_1-core-vs-thread-the-basics" tabindex="-1"><a class="header-anchor" href="#_1-core-vs-thread-the-basics"><span>1. Core vs .Thread : The Basics</span></a></h3><p>Let‚Äôs start with a quick rundown of the foundational components:</p><figure><img src="https://droidcon.com/wp-content/uploads/2024/11/1_qmA6fum9VWGhbhO3bt2WLQ-300x300.webp" alt="Generated by ChatGPT" tabindex="0" loading="lazy"><figcaption>Generated by ChatGPT</figcaption></figure><h4 id="core-cpu-core" tabindex="-1"><a class="header-anchor" href="#core-cpu-core"><span>Core (CPU Core)</span></a></h4><p><em>A core</em> is a physical processing unit within a CPU that handles tasks independently, allowing for true multitasking. Each core has dedicated resources that execute tasks in parallel with other cores. This parallelism means a CPU with multiple cores can perform multiple tasks simultaneously. For example, a quad-core CPU can handle four separate tasks at once, maximizing computational power. If a CPU has more cores, it generally means higher processing capacity, especially useful for tasks that require heavy computation or data processing.</p><h4 id="thread" tabindex="-1"><a class="header-anchor" href="#thread"><span>Thread</span></a></h4><p><em>A thread,</em> in contrast, is a logical execution unit that can be thought of as a sub-task within a process. Threads allow a program to split into multiple, smaller tasks to be handled simultaneously. However, threads are designed to share the resources of a single core, unlike cores that don‚Äôt need to share their resources for parallel tasks.</p><p>With modern CPUs, technologies like hyper threading or simultaneous multithreading (SMT) enable each core to handle multiple threads. A CPU core with SMT can work on two threads concurrently, increasing efficiency without increasing the physical core count. So, a quad-core CPU wth SMT can run up to eight threads at a time.</p><h4 id="core-vs-thread-quick-comparison-table" tabindex="-1"><a class="header-anchor" href="#core-vs-thread-quick-comparison-table"><span>Core vs. Thread: Quick Comparison Table</span></a></h4><table><thead><tr><th style="text-align:right;">Feature</th><th style="text-align:left;"><strong>Core</strong></th><th style="text-align:left;"><strong>Thread</strong></th></tr></thead><tbody><tr><td style="text-align:right;">Type</td><td style="text-align:left;">Physical processing unit</td><td style="text-align:left;">Logical processing unit</td></tr><tr><td style="text-align:right;">Function</td><td style="text-align:left;">Executes distinct tasks directly</td><td style="text-align:left;">Handles sub-tasks within a single process</td></tr><tr><td style="text-align:right;">Resources</td><td style="text-align:left;">Dedicated resources per core</td><td style="text-align:left;">Shared resources within a core</td></tr><tr><td style="text-align:right;">Concurrency</td><td style="text-align:left;">Multiple cores = more parallel tasks</td><td style="text-align:left;">Threads improve multitasking within a core</td></tr><tr><td style="text-align:right;">Peformance Impact</td><td style="text-align:left;">Increases true CPU power</td><td style="text-align:left;">Optimizes each core without adding physical power</td></tr></tbody></table>',13)),g(" @include: https://gist.github.com/nphausg/782f873fe7596a4a3ebd7795c777f0a8/raw/05adc70df83b45ec73585c037a6d5068720c1b6a/core%20vs%20thread%20comparison%20table.md "),t[57]||(t[57]=e("h3",{id:"_2-optimizing-with-dispatchers-in-kotlin-coroutines",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-optimizing-with-dispatchers-in-kotlin-coroutines"},[e("span",null,"2. Optimizing with Dispatchers in Kotlin Coroutines")])],-1)),t[58]||(t[58]=e("p",null,[n("When working with Kotlin,"),e("code",null,"Dispatchers"),n("decide which threads execute a task. Two key dispatchers,"),e("code",null,"Dispatchers.Default"),n("and"),e("code",null,"Dispatchers.IO"),n(", optimize different kinds of tasks by managing the balance between cores and threads.")],-1)),o(u,{data:[{id:"<code>Dispatchers.Default</code>"},{id:"<code>Dispatchers.IO</code>"},{id:"Advantages"},{id:"Disadvantages"},{id:"Context Switching in Multithreading"}],active:0},{title0:s(({value:a,isActive:r})=>t[8]||(t[8]=[e("code",null,"Dispatchers.Default",-1)])),title1:s(({value:a,isActive:r})=>t[9]||(t[9]=[e("code",null,"Dispatchers.IO",-1)])),title2:s(({value:a,isActive:r})=>t[10]||(t[10]=[n("Advantages")])),title3:s(({value:a,isActive:r})=>t[11]||(t[11]=[n("Disadvantages")])),title4:s(({value:a,isActive:r})=>t[12]||(t[12]=[n("Context Switching in Multithreading")])),tab0:s(({value:a,isActive:r})=>t[13]||(t[13]=[e("ul",null,[e("li",null,"**Purpose:**Designed for CPU-intensive tasks."),e("li",null,"**Behavior:**Uses a limited number of threads that match the core count on the CPU"),e("li",null,[n("**Why:**By aligning threads with physical cores,"),e("code",null,"Dispatchers.Default"),n("ensures that each task has dedicated CPU time without being interrupted by excessive thread-switching. THis keeps the overhead low and the performance high for tasks that require consistent CPU power, like complex calculations and data processing.")])],-1),e("blockquote",null,[e("p",null,[e("em",null,[n("It is backed by a shared pool of threads on JVM and Native. By default, the maximum number of threads used by this dispatcher is equal to the number of CPU cores, but is at least two."),e("a",{href:"https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html",target:"_blank",rel:"noopener noreferrer"},"https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html")])])],-1)])),tab1:s(({value:a,isActive:r})=>[t[14]||(t[14]=e("ul",null,[e("li",null,"**Purpose:**Designed for I/O-bound (input/output) tasks, likle reading files, making network requests, or querying databases."),e("li",null,"**Behavior:**Scales up to 64 threads to handle multiple tasks without blocking other resources."),e("li",null,"**Why:**Tasks like I/O often require waiting on external resources (network, database) that don‚Äôt engage the CPU. Having 64 threads allows multiple I/O-bound tasks to run without creating a bottleneck in the CPU, ensuring these tasks don‚Äôt interfere with CPU-bound threads. However, the 64-thread limit keeps resource overhead in check, preventing excessive context-switching that could degrade performance.")],-1)),t[15]||(t[15]=e("div",{class:"language-kotlin line-numbers-mode","data-highlighter":"prismjs","data-ext":"kt"},[e("pre",null,[e("code",{class:"language-kotlin"},[e("span",{class:"line"},[e("span",{class:"token comment"},"// 100 threads for MySQL connection")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token keyword"},"val"),n(" myMysqlDbDispatcher "),e("span",{class:"token operator"},"="),n(" Dispatchers"),e("span",{class:"token punctuation"},"."),n("IO"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"limitedParallelism"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"100"),e("span",{class:"token punctuation"},")")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"// 60 threads for MongoDB connection")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token keyword"},"val"),n(" myMongoDbDispatcher "),e("span",{class:"token operator"},"="),n(" Dispatchers"),e("span",{class:"token punctuation"},"."),n("IO"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"limitedParallelism"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"60"),e("span",{class:"token punctuation"},")")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)),t[16]||(t[16]=e("blockquote",null,[e("p",null,"As a result of thread sharing, more than 64 (default parallelism) threads can be created (but not used) during operations over IO dispatcher.")],-1)),t[17]||(t[17]=e("h3",{id:"_3-context-switching",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-context-switching"},[e("span",null,"3. Context switching")])],-1)),t[18]||(t[18]=e("p",null,[n("In computer systems and programming,"),e("strong",null,"context switching"),n(" is a key concept that relates to how the OS manages and execute multiple processes or threads concurrently. Here is a proper explanation of context switching, how it works, and its impact on system performance.")],-1)),t[19]||(t[19]=e("figure",null,[e("img",{src:"https://droidcon.com/wp-content/uploads/2024/11/1_fBtSgDpVK6AkU6evCWzTMA-300x300.webp",alt:"Generated by ChatGPT",tabindex:"0",loading:"lazy"}),e("figcaption",null,"Generated by ChatGPT")],-1)),t[20]||(t[20]=e("h4",{id:"what-is-context-switching",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#what-is-context-switching"},[e("span",null,"What is Context Switching?")])],-1)),t[21]||(t[21]=e("p",null,[n("This is the process in which the operating systems pauses a running process or thread,"),e("strong",null,"saves"),n("its current state (known as the"),e("strong",null,"context"),n("), and then"),e("strong",null,"loads"),n("and"),e("strong",null,"resumes"),n("another process or thread. This mechanism allows the CPU to switch between processes or threads efficiently, creating the effect that tasks are running simultaneously.")],-1)),t[22]||(t[22]=e("h4",{id:"components-of-context",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#components-of-context"},[e("span",null,"Components of Context")])],-1)),t[23]||(t[23]=e("p",null,"The context of a process or thread includes:",-1)),t[24]||(t[24]=e("ul",null,[e("li",null,"**CPU registers information:**This includes registers like the Program Counter (PC), Stack Pointer (SP), and others that store the current state of the process."),e("li",null,[e("strong",null,"Process state:"),n(" This represents the current state (running, ready, waiting, ‚Ä¶) of the process.")]),e("li",null,[e("strong",null,"Memory information:"),n(" The address space or momey allowcation that the process is currently using.")]),e("li",null,[e("strong",null,"Resource information:"),n(" Information about resources the process is using, like files, I/O devices, ‚Ä¶")])],-1)),t[25]||(t[25]=e("h4",{id:"how-context-switching-works",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#how-context-switching-works"},[e("span",null,"How Context Switching works")])],-1)),t[26]||(t[26]=e("p",null,"The context switching process generally flows these steps:",-1)),t[27]||(t[27]=e("ol",null,[e("li",null,[e("strong",null,"Interrupt:"),n(" An event, such as a time slice ending or an I/O request, triggers an interrupt and informs the OS that it needs to switch contexts.")]),e("li",null,[e("strong",null,"Save current state:"),n(" The OS saves the current state of the running process or thread in a special memory area known as the Process Control Block (PCB).")]),e("li",null,[e("strong",null,"Select next process/Thread:"),n(" The OS uses scheduling algorithms to select the next process or thread to run.")]),e("li",null,"**Load new State:**The OS loads the states of the new process or thread from its PCB back into the CPU registers."),e("li",null,[e("strong",null,"Resume Execution:"),n(" The CPU begins or resumes executing the new process or thread.")])],-1)),t[28]||(t[28]=e("h4",{id:"impact-of-context-switching",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#impact-of-context-switching"},[e("span",null,"Impact of context switching")])],-1)),o(u,{data:[]})]),tab2:s(({value:a,isActive:r})=>t[29]||(t[29]=[e("ul",null,[e("li",null,[e("strong",null,"Multitasking"),n(": Allows the system to efficiently run multiple processes or threads, creating the effect that tasks are running simultaneously.")]),e("li",null,[e("strong",null,"Quick response"),n(": The system can quickly respond to user requests or system events.")])],-1)])),tab3:s(({value:a,isActive:r})=>t[30]||(t[30]=[e("ul",null,[e("li",null,[e("strong",null,"Time cost"),n(": Context switching requires CPU time to save and load the states of processes or threads. If too many context switches happen, it can impact system performance.")]),e("li",null,[e("strong",null,"Overhead"),n(": Frequent context switching can cause significant overhead, particularly in real-time systems or high-performance applications.")])],-1)])),tab4:s(({value:a,isActive:r})=>t[31]||(t[31]=[e("p",null,"In multithreaded programming, especially when using libraries or frameworks that support concurrency like Kotlin Coroutines, context switching plays a vital role in managing and optimizing performance:",-1),e("ul",null,[e("li",null,[e("strong",null,"Dispatchers"),n(": As mentioned before,"),e("code",null,"Dispatchers.Default"),n("and"),e("code",null,"Dispatchers.IO"),n("in Kotlin use context switching to allocate tasks to appropriate threads, ensuring that CPU-intensive and I/O-bound tasks are processed efficiently without excessive context switching.")]),e("li",null,[e("strong",null,"Application Performance"),n(": Optimizing the number of context switches through proper dispatcher usage helps reduce overhead and improve the application‚Äôs overall performance.")])],-1)])),_:1}),t[59]||(t[59]=h('<h4 id="how-to-minimize-the-impact-of-context-switching" tabindex="-1"><a class="header-anchor" href="#how-to-minimize-the-impact-of-context-switching"><span>How to Minimize the Impact of Context Switching</span></a></h4><ul><li><strong>Limit the number of processes or threads</strong>: Avoid creating too many unnecessary processes or threads to reduce context switching.</li><li><strong>Use optimized libraries</strong>: Libraries like Kotlin Coroutines are designed to minimize context switching by managing threads efficiently.</li><li><strong>Optimize scheduling algorithms</strong>: Both the operating system and applications can use efficient scheduling algorithms to reduce the need for context switching.</li></ul><hr><h2 id="discussion-ü§î" tabindex="-1"><a class="header-anchor" href="#discussion-ü§î"><span>Discussion ü§î</span></a></h2><h3 id="_1-whydispatchers-ioisn-t-a-replacement-fordispatchers-default" tabindex="-1"><a class="header-anchor" href="#_1-whydispatchers-ioisn-t-a-replacement-fordispatchers-default"><span>1. Why<code>Dispatchers.IO</code>Isn‚Äôt a Replacement for<code>Dispatchers.Default?</code></span></a></h3><figure><img src="https://droidcon.com/wp-content/uploads/2024/11/0_PfFcka0px2vjjb3X-300x78.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',6)),o(i,{name:"Coroutine context and dispatchers | Kotlin",desc:"Debugging with IDEA: The Coroutine Debugger of the Kotlin plugin simplifies debugging coroutines in IntelliJ IDEA.",url:"https://kotlinlang.org/docs/coroutine-context-and-dispatchers.html#debugging-with-idea",logo:"https://kotlinlang.org/assets/images/apple-touch-icon-114x114.png?v2",preview:"https://kotlinlang.org/assets/images/open-graph/docs.png"}),e("p",null,[t[35]||(t[35]=n("Sometimes, you might hear ")),e("a",P,[t[32]||(t[32]=n("that ‚ÄúDispatchers.IO looks like a better option for default dispatchers‚Äù (")),o(d,{icon:"iconfont icon-github"}),t[33]||(t[33]=e("code",null,"Kotlin/kotlinx.coroutines",-1)),t[34]||(t[34]=n(")"))]),t[36]||(t[36]=n(". However, while")),t[37]||(t[37]=e("code",null,"Dispatchers.IO",-1)),t[38]||(t[38]=n("excels at handling I/O tasks, it‚Äôs not a replacement for")),t[39]||(t[39]=e("code",null,"Dispatchers.Default",-1)),t[40]||(t[40]=n("in CPU-intensive operations."))]),o(i,{name:"Dispatcher.IO looks like better option for default dispatcher - Android - Kotlin Discussions",desc:"Reasonable advice) ok, thanks",url:"https://discuss.kotlinlang.org/t/dispatcher-io-looks-like-better-option-for-default-dispatcher/20044/6/",logo:"https://us1.discourse-cdn.com/flex019/uploads/kotlinlang/optimized/2X/2/224964e73572d20c3aa9d68b4c14ae5d11749202_2_32x32.png",preview:"https://us1.discourse-cdn.com/flex019/uploads/kotlinlang/original/2X/2/224964e73572d20c3aa9d68b4c14ae5d11749202.png"}),t[60]||(t[60]=h(`<h4 id="here-s-why" tabindex="-1"><a class="header-anchor" href="#here-s-why"><span>Here‚Äôs why</span></a></h4><ol><li><strong>Thread count:</strong> <code>Dispatchers.Default</code>aligns with the number of cores, ensuring efficient handling of CPU-bound tasks.<code>Dispatchers.IO</code>, however, scales threads up to 64, which is suitable for I/O but not for CPU-bound tasks, as it could overload the CPU and reduce overall efficiency.</li><li><strong>Resource Allocation:</strong> <code>Dispatchers.Default</code>conservers CPU resources by using core-based threading, while<code>Dispatchers.IO</code>uses many threads to prevent blocking from I/O wait times. Excessive threads on CPU-intensive tasks would lead to too much context-switching, adding unnecessary overhead.</li></ol><div class="hint-container important"><p class="hint-container-title">Key takeaway</p><ul><li><strong>Dispatcher.Default and CPU Usage</strong>:<code>Dispatchers.Default</code>in Kotlin uses a thread pool that aligns with the number of CPU cores available on the system. If all threads in<code>Dispatchers.Default</code>are actively running CPU-bound coroutines, this means every core is fully occupied, leaving no room for additional CPU tasks.</li><li><strong>Adding More Threads</strong>: If you were to start another thread beyond the capacity of<code>Dispatchers.Default</code>while all CPU cores are busy, that new thread would need to<em>compete</em>for CPU time. The operating system would then have to perform<strong>context switching</strong>between the threads, which involves temporarily pausing one thread to let another run.</li><li><strong>Limits of Simultaneous Execution</strong>: Since each CPU core can only execute one thread at a time, adding more threads doesn‚Äôt allow for<em>true</em>simultaneous execution on a single core. Instead, with more threads than cores, the system spends extra time switching between them. This<em>context-switching overhead</em>can reduce overall efficiency, particularly if there are many threads competing for limited CPU resources.</li><li><strong>Impact on Performance</strong>: If your application tries to run more CPU-intensive tasks than there are cores available, the performance gain can actually diminish due to the cost of context switching and resource contention. For this reason, sticking to<code>Dispatchers.Default</code>for CPU tasks is usually more efficient, as it keeps the thread count aligned with the CPU‚Äôs core count.</li></ul><blockquote><p><em>So, in summary, starting more threads when all cores are occupied won‚Äôt yield additional processing power. It‚Äôs often better to keep the number of CPU-bound tasks close to the number of CPU cores to avoid excessive context switching and keep CPU usage efficient. üêõ</em></p></blockquote></div><h3 id="_2-is-there-thread-switching-when-moving-from-default-to-io-dispatcher-using-withcontext" tabindex="-1"><a class="header-anchor" href="#_2-is-there-thread-switching-when-moving-from-default-to-io-dispatcher-using-withcontext"><span>2. Is there thread switching when moving from Default to IO dispatcher using withContext?</span></a></h3><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">withContext</span><span class="token punctuation">(</span></span>
<span class="line">    context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">,</span> </span>
<span class="line">    block<span class="token operator">:</span> <span class="token keyword">suspend</span> CoroutineScope<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> T</span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> T</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When switching between<code>Dispatchers.Default</code>and<code>Dispatchers.IO</code>with<code>withContext</code>, a thread switch occurs, but it is handled efficiently within the coroutine framework, with minimal impact on performance in most use cases.</p><ol><li><strong>Different Thread Pools:</strong> <code>Dispatchers.Default</code>and<code>Dispatchers.IO</code>each have their own separate thread pools.<code>Dispatchers.Default</code>has a thread pool that matches the CPU core count, while<code>Dispatchers.IO</code>is optimized for I/O-bound tasks and can scale up to 64 threads by default.</li><li><strong>Switching Threads:</strong> When you use<code>withContext(Dispatchers.IO)</code>within a coroutine that was originally running on<code>Dispatchers.Default</code>, the coroutine suspends on the<code>Default</code>thread and resumes on a different thread from the<code>IO</code>pool. This suspension and resumption involve<em>moving the coroutine‚Äôs execution context</em>from one thread pool to another, which is managed by the coroutine runtime.</li><li><strong>Context Switching Overhead:</strong> Although coroutines handle this transition efficiently, there is still a slight overhead due to the context switch. This switching doesn‚Äôt involve a full context switch at the OS level (since coroutines don‚Äôt map one-to-one with threads) but it does involve<strong>suspending and resuming the coroutine state</strong>, which takes a small amount of time.</li><li><strong>Practical Impact:</strong> In most cases, this thread switching is minimal and unlikely to impact performance significantly, especially when moving between CPU-bound and I/O-bound tasks. Kotlin coroutine framework is designed to make these transitions smooth, so the switching cost is generally much lower than in traditional multi-threaded applications.</li></ol><hr><h2 id="conclusion-üí°" tabindex="-1"><a class="header-anchor" href="#conclusion-üí°"><span>Conclusion üí°</span></a></h2><p>Understanding the roles of cores and threads ‚Äî and using<code>Dispatchers.Default</code>and<code>Dispatchers.IO</code>appropriately‚Äîcan maximize your application‚Äôs performance. Here‚Äôs a summary:</p>`,10)),e("ul",null,[t[49]||(t[49]=e("li",null,[e("strong",null,"Dispatchers.Default"),n("is optimized for CPU-intensive tasks, using the core count to prevent bottlenecks and context-switching overhead.")],-1)),t[50]||(t[50]=e("li",null,[e("strong",null,"Dispatchers.IO"),n("is tailored for I/O-bound tasks, scaling threads up to 64 to avoid blocking without overloading CPU resources.")],-1)),e("li",null,[t[43]||(t[43]=n("This dispatcher and its views share threads with the")),e("a",O,[o(d,{icon:"iconfont icon-kotlin"}),t[41]||(t[41]=n("Default"))]),t[44]||(t[44]=n("dispatcher, so using")),t[45]||(t[45]=e("code",null,"withContext(Dispatchers.IO) { ... }",-1)),t[46]||(t[46]=n("when already running on the")),e("a",U,[o(d,{icon:"iconfont icon-kotlin"}),t[42]||(t[42]=n("Default"))]),t[47]||(t[47]=n("dispatcher typically does not lead to an actual switching to another thread. In such scenarios, the underlying implementation attempts to keep the execution on the same thread on a best-effort basis.")),t[48]||(t[48]=e("a",{href:"https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-i-o.html",target:"_blank",rel:"noopener noreferrer"},"https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-i-o.html",-1))]),t[51]||(t[51]=h("<li>Using a dispatcher that uses a thread pool like**<code>Dispatchers.IO</code><strong>or</strong><code>Dispatchers.Default</code><strong>does not guarantee that the block executes on the same thread from top to bottom. In some situations, Kotlin coroutines might move execution to another thread after a</strong><code>suspend</code><strong>-and-</strong><code>resume</code><strong>. This means thread-local variables might not point to the same value for the entire</strong><code>withContext()</code>**block.</li>",1))]),o(i,{name:"Improve app performance with Kotlin coroutines | Android Developers",desc:"Kotlin coroutines enable you to write clean, simplified asynchronous code that keeps your app responsive while managing long-running tasks such as network calls or disk operations.",url:"https://developer.android.com/kotlin/coroutines/coroutines-adv/",logo:"https://gstatic.com/devrel-devsite/prod/v5ab6fd0ad9c02b131b4d387b5751ac2c3616478c6dd65b5e931f0805efa1009c/android/images/favicon.svg",preview:"https://developer.android.com/static/images/social/android-developers.png"}),t[61]||(t[61]=e("p",null,"By matching the right dispatcher to your task type, you can ensure smoother, more efficient execution and avoid common pitfalls in resource management.",-1)),t[62]||(t[62]=e("hr",null,null,-1)),t[63]||(t[63]=e("h2",{id:"references",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#references"},[e("span",null,"References")])],-1)),o(i,{name:"CoroutineDispatcher",desc:"Base class to be extended by all coroutine dispatcher implementations.",url:"https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/",logo:"https://kotlinlang.org/assets/images/apple-touch-icon-114x114.png?v2",preview:"https://kotlinlang.org/assets/images/open-graph/docs.png"}),o(i,{name:"Coroutine context and dispatchers | Kotlin",desc:"Coroutines always execute in some context represented by a value of the CoroutineContext type, defined in the Kotlin standard library.",url:"https://kotlinlang.org/docs/coroutine-context-and-dispatchers.html/",logo:"https://kotlinlang.org/assets/images/apple-touch-icon-114x114.png?v2",preview:"https://kotlinlang.org/assets/images/open-graph/docs.png"}),o(i,{name:"Dispatcher.IO looks like better option for default dispatcher ¬∑ Issue #2410 ¬∑ Kotlin/kotlinx.coroutines",desc:"After reading some RxJava articles i mentioned that all authors recommend use Schedule.computation only for hard CPU jobs, while Scheduler.IO looks as better option for everything else (IO operatio...",url:"https://github.com/Kotlin/kotlinx.coroutines/issues/2410/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/c632867b52853fdd32f9fbc44dda825f7778dbac74e0782c9ca060ab9c7eb49c/Kotlin/kotlinx.coroutines/issues/2410"}),o(i,{name:"Dispatcher.IO looks like better option for default dispatcher - Android - Kotlin Discussions",desc:"The reason Dispatchers.Default is a good default dispatcher is because it is limited to the number of physical threads on your machine (unless it only has one core, but that‚Äôs another story). Aligning the number of logical and physical cores like that means you reduce the chance of context switches during your application lifetime, something that is extremely (relatively speaking) expensive.  This comes with a caveat though, as you mentioned. If you have 8 phyiscal threads on your machine and yo...",url:"https://discuss.kotlinlang.org/t/dispatcher-io-looks-like-better-option-for-default-dispatcher/20044/3/",logo:"https://us1.discourse-cdn.com/flex019/uploads/kotlinlang/optimized/2X/2/224964e73572d20c3aa9d68b4c14ae5d11749202_2_32x32.png",preview:"https://us1.discourse-cdn.com/flex019/uploads/kotlinlang/original/2X/2/224964e73572d20c3aa9d68b4c14ae5d11749202.png"}),o(i,{name:"IO",desc:"The CoroutineDispatcher that is designed for offloading blocking IO tasks to a shared pool of threads.",url:"https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-i-o.html/",logo:"https://kotlinlang.org/assets/images/apple-touch-icon-114x114.png?v2",preview:"https://kotlinlang.org/assets/images/open-graph/docs.png"}),o(i,{name:"withContext",desc:"Calls the specified suspending block with a given coroutine context, suspends until it completes, and returns the result.",url:"https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-context.html/",logo:"https://kotlinlang.org/assets/images/apple-touch-icon-114x114.png?v2",preview:"https://kotlinlang.org/assets/images/open-graph/docs.png"}),o(i,{name:"nphausg - Overview",desc:"Engineer @ GXS Bank | MSc üéì | Technical Writer üáªüá≥ üá∏üá¨ üá≤üáæ üá¶üá∫ üáπüá≠ - nphausg",url:"https://github.com/nphausg/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://avatars.githubusercontent.com/u/13111806?v=4?s=400"}),e("div",T,[t[54]||(t[54]=e("p",{class:"hint-container-title"},"Info",-1)),e("p",null,[t[53]||(t[53]=n("This article is previously published on ")),e("a",S,[o(d,{icon:"fa-brands fa-medium"}),t[52]||(t[52]=e("code",null,"proandroiddev",-1))])]),o(i,{name:"Exploring the Secrets of Dispatchers Default and IO in Kotlin Coroutines",desc:"Understanding the architecture of CPU cores and threads can be a game-changer when writing optimized code. In this guide, we will explore‚Ä¶",url:"https://proandroiddev.com/exploring-the-secrets-of-dispatchers-default-and-io-in-kotlin-coroutines-31d703c29ee2/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1200/0*PfFcka0px2vjjb3X.png"})]),g(" TODO: add ARTICLE CARD "),o(p,m(f({title:"Exploring the Secrets of Dispatchers Default and IO in Kotlin Coroutines",desc:"Understanding the architecture of CPU cores and threads can be a game-changer when writing optimized code. In this guide, we will explore the differences between CPU cores and threads, the role of Kotlin‚ÄôsDispatchers.DefaultandDispatchers.IO, and why these distinctions matter when working with CPU and I/O-intensive tasks. This knowledge will help you create more efficient, high-performance applications. üëãüèª",link:"https://chanhi2000.github.io/bookshelf/droidcon.com/exploring-the-secrets-of-dispatchers-default-and-io-in-kotlin-coroutines.html",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",background:"rgba(4,20,221,0.2)"})),null,16)])}const E=k(y,[["render",A]]),q=JSON.parse('{"path":"/droidcon.com/exploring-the-secrets-of-dispatchers-default-and-io-in-kotlin-coroutines.html","title":"Exploring the Secrets of Dispatchers Default and IO in Kotlin Coroutines","lang":"en-US","frontmatter":{"lang":"en-US","title":"Exploring the Secrets of Dispatchers Default and IO in Kotlin Coroutines","description":"Article(s) > Exploring the Secrets of Dispatchers Default and IO in Kotlin Coroutines","icon":"fa-brands fa-android","category":["Java","Kotlin","Android","Article(s)"],"tag":["blog","droidcon.com","java","kotlin","android"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Exploring the Secrets of Dispatchers Default and IO in Kotlin Coroutines\\",\\"image\\":[\\"https://droidcon.com/wp-content/uploads/2024/11/1_qmA6fum9VWGhbhO3bt2WLQ-300x300.webp\\",\\"https://droidcon.com/wp-content/uploads/2024/11/1_fBtSgDpVK6AkU6evCWzTMA-300x300.webp\\",\\"https://droidcon.com/wp-content/uploads/2024/11/0_PfFcka0px2vjjb3X-300x78.webp\\"],\\"datePublished\\":\\"2024-11-22T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leo N\\",\\"url\\":\\"https://github.com/nphausg\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/exploring-the-secrets-of-dispatchers-default-and-io-in-kotlin-coroutines.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"Exploring the Secrets of Dispatchers Default and IO in Kotlin Coroutines"}],["meta",{"property":"og:description","content":"Article(s) > Exploring the Secrets of Dispatchers Default and IO in Kotlin Coroutines"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://droidcon.com/wp-content/uploads/2024/11/1_umopuK8jiae4gCm_NzahkQ.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://droidcon.com/wp-content/uploads/2024/11/1_umopuK8jiae4gCm_NzahkQ.webp"}],["meta",{"name":"twitter:image:alt","content":"Exploring the Secrets of Dispatchers Default and IO in Kotlin Coroutines"}],["meta",{"property":"article:author","content":"Leo N"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"droidcon.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-22T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Exploring the Secrets of Dispatchers Default and IO in Kotlin Coroutines"},{"property":"og:description","content":"Exploring the Secrets of Dispatchers Default and IO in Kotlin Coroutines"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/exploring-the-secrets-of-dispatchers-default-and-io-in-kotlin-coroutines.html"}]],"prev":"/programming/java-android/articles/README.md","date":"2024-11-22T00:00:00.000Z","isOriginal":false,"author":[{"name":"Leo N","url":"https://github.com/nphausg"}],"cover":"https://droidcon.com/wp-content/uploads/2024/11/1_umopuK8jiae4gCm_NzahkQ.webp"},"git":{},"readingTime":{"minutes":10.16,"words":3047},"filePathRelative":"droidcon.com/exploring-the-secrets-of-dispatchers-default-and-io-in-kotlin-coroutines.md","copyright":{"author":"Leo N"}}');export{E as comp,q as data};
