import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as n,f as e,b as m,a as v,t as k,n as p,g as l,w as c,e as s,r as t,o as b}from"./app-BVguHYKu.js";const y={},f={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},P={href:"http://openjdk.java.net/projects/jdk/10/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/ergonomics.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://docs.docker.com/engine/reference/run/#cpu-share-constraint",target:"_blank",rel:"noopener noreferrer"};function J(d,a){const o=t("VPCard"),i=t("router-link"),h=t("SiteInfo"),r=t("VPIcon");return b(),g("div",null,[n("h1",f,[n("a",x,[n("span",null,k(d.$frontmatter.title)+" 관련",1)])]),e(o,p(l({title:"Docker > Article(s)",desc:"Article(s)",link:"/devops/docker/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(o,p(l({title:"Java > Article(s)",desc:"Article(s)",link:"/programming/java/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",w,[n("ul",null,[n("li",null,[e(i,{to:"#container-memory-limits"},{default:c(()=>a[0]||(a[0]=[s("Container Memory Limits")])),_:1,__:[0]})]),n("li",null,[e(i,{to:"#setting-available-cpus"},{default:c(()=>a[1]||(a[1]=[s("Setting Available CPUs")])),_:1,__:[1]})]),n("li",null,[e(i,{to:"#allocating-memory-and-cpu"},{default:c(()=>a[2]||(a[2]=[s("Allocating memory and CPU")])),_:1,__:[2]})])])]),a[11]||(a[11]=n("hr",null,null,-1)),e(h,{name:"Improved Docker Container Integration with Java 10",desc:"Learn from Docker experts to simplify and advance your app development and management with Docker. Stay up to date on Docker events and new version",url:"https://docker.com/blog/improved-docker-container-integration-with-java-10",logo:"https://docker.com/app/uploads/2024/02/cropped-docker-logo-favicon-192x192.png",preview:"https://docker.com/app/uploads/Screen-Shot-2018-04-03-at-4.40.29-PM.png"}),a[12]||(a[12]=n("figure",null,[n("img",{src:"https://docker.com/app/uploads/Screen-Shot-2018-04-03-at-4.40.29-PM.png",alt:"Docker and Java",tabindex:"0",loading:"lazy"}),n("figcaption",null,"Docker and Java")],-1)),n("p",null,[a[4]||(a[4]=s("Many applications that run in a Java Virtual Machine (JVM), including data services such as Apache Spark and Kafka and traditional enterprise applications, are run in containers. Until recently, running the JVM in a container presented problems with memory and cpu sizing and usage that led to performance loss. This was because Java didn’t recognize that it was running in a container. With the ")),n("a",P,[e(r,{icon:"fa-brands fa-java"}),a[3]||(a[3]=s("release"))]),a[5]||(a[5]=s(" of Java 10, the JVM now recognizes constraints set by container control groups (cgroups). Both memory and cpu constraints can be used manage Java applications directly in containers, these include:"))]),a[13]||(a[13]=n("ul",null,[n("li",null,"adhering to memory limits set in the container"),n("li",null,"setting available cpus in the container"),n("li",null,"setting cpu constraints in the container")],-1)),a[14]||(a[14]=n("p",null,"Java 10 improvements are realized in both Docker for Mac or Windows and Docker Enterprise Edition environments.",-1)),a[15]||(a[15]=n("hr",null,null,-1)),a[16]||(a[16]=n("h2",{id:"container-memory-limits",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#container-memory-limits"},[n("span",null,"Container Memory Limits")])],-1)),a[17]||(a[17]=n("p",null,"Until Java 9 the JVM did not recognize memory or cpu limits set by the container using flags. In Java 10, memory limits are automatically recognized and enforced.",-1)),n("p",null,[n("a",C,[e(r,{icon:"iconfont icon-oracle"}),a[6]||(a[6]=s("Java"))]),a[7]||(a[7]=s(" defines a server class machine as having 2 CPUs and 2GB of memory and the default heap size is ¼ of the physical memory. For example, a Docker Enterprise Edition installation has 2GB of memory and 4 CPUs. Compare the difference between containers running Java 8 and Java 10. First, Java 8:"))]),a[18]||(a[18]=m(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> container run <span class="token parameter variable">-it</span> <span class="token parameter variable">-m512</span> <span class="token parameter variable">--entrypoint</span> <span class="token function">bash</span> openjdk:latest</span>
<span class="line">docker-java-home/bin/java <span class="token parameter variable">-XX:+PrintFlagsFinal</span> <span class="token parameter variable">-version</span> <span class="token operator">|</span> <span class="token function">grep</span> MaxHeapSize</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># uintx MaxHeapSize                              := 524288000                          {product}</span></span>
<span class="line"><span class="token comment"># openjdk version &quot;1.8.0_162&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The max heap size is 512M or ¼ of the 2GB set by the Docker EE installation instead of the limit set on the container to 512M. In comparison, running the same commands on Java 10 shows that the memory limit set in the container is fairly close to the expected 128M:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> container run <span class="token parameter variable">-it</span> <span class="token parameter variable">-m512M</span> <span class="token parameter variable">--entrypoint</span> <span class="token function">bash</span> openjdk:10-jdk</span>
<span class="line">docker-java-home/bin/java <span class="token parameter variable">-XX:+PrintFlagsFinal</span> <span class="token parameter variable">-version</span> <span class="token operator">|</span> <span class="token function">grep</span> MaxHeapSize</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># size_t MaxHeapSize                              = 134217728                                {product} {ergonomic}</span></span>
<span class="line"><span class="token comment"># openjdk version &quot;10&quot; 2018-03-20</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="setting-available-cpus" tabindex="-1"><a class="header-anchor" href="#setting-available-cpus"><span>Setting Available CPUs</span></a></h2><p>By default, each container’s access to the host machine’s CPU cycles is unlimited. Various constraints can be set to limit a given container’s access to the host machine’s CPU cycles. Java 10 recognizes these limits:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> container run <span class="token parameter variable">-it</span> <span class="token parameter variable">--cpus</span> <span class="token number">2</span> openjdk:10-jdk</span>
<span class="line">Runtime.getRuntime<span class="token punctuation">(</span><span class="token punctuation">)</span>.availableProcessors<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># $1 ==&gt; 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)),n("p",null,[a[9]||(a[9]=s("All CPUs allocated to Docker EE get the same proportion of CPU cycles. The proportion can be modified by changing the container’s ")),n("a",M,[e(r,{icon:"fa-brands fa-docker"}),a[8]||(a[8]=s("CPU share"))]),a[10]||(a[10]=s(" weighting relative to the weighting of all other running containers. The proportion will only apply when CPU-intensive processes are running. When tasks in one container are idle, other containers can use the leftover CPU time. The actual amount of CPU time will vary depending on the number of containers running on the system. These can be set in Java 10:"))]),a[19]||(a[19]=m(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> container run <span class="token parameter variable">-it</span> --cpu-shares <span class="token number">2048</span> openjdk:10-jdk</span>
<span class="line">Runtime.getRuntime<span class="token punctuation">(</span><span class="token punctuation">)</span>.availableProcessors<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># $1 ==&gt; 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The cpuset constraint sets which CPUs allow execution in Java 10.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> --cpuset-cpus<span class="token operator">=</span><span class="token string">&quot;1,2,3&quot;</span> openjdk:10-jdk</span>
<span class="line">Runtime.getRuntime<span class="token punctuation">(</span><span class="token punctuation">)</span>.availableProcessors<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># $1 ==&gt; 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="allocating-memory-and-cpu" tabindex="-1"><a class="header-anchor" href="#allocating-memory-and-cpu"><span>Allocating memory and CPU</span></a></h2><p>With Java 10, container settings can be used to estimate the allocation of memory and CPUs needed to deploy an application. Let’s assume that the memory heap and CPU requirements for each process running in a container has already been determined and JAVA_OPTS set. For example, if you have an application distributed across 10 nodes; five nodes require 512Mb of memory with 1024 CPU-shares each and another five nodes require 256Mb with 512 CPU-shares each. Note that 1 CPU share proportion is represented by 1024. For memory, the application would need 5Gb allocated at minimum.</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>512</mn><mtext>Mb</mtext><mo>×</mo><mn>5</mn><mo>=</mo><mn>2.56</mn><mtext> </mtext><mtext>Gb</mtext></mrow><annotation encoding="application/x-tex">512\\text{Mb}\\times{5}=2.56\\:\\text{Gb} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">512</span><span class="mord text"><span class="mord">Mb</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord"><span class="mord">5</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">2.56</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord text"><span class="mord">Gb</span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>256</mn><mtext>Mb</mtext><mo>×</mo><mn>5</mn><mo>=</mo><mn>1.28</mn><mtext> </mtext><mtext>Gb</mtext></mrow><annotation encoding="application/x-tex">256\\text{Mb}\\times{5}=1.28\\:\\text{Gb} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">256</span><span class="mord text"><span class="mord">Mb</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord"><span class="mord">5</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">1.28</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord text"><span class="mord">Gb</span></span></span></span></span></span></p><p>The application would require 8 CPUs to run efficiently.</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1024</mn><mo>×</mo><mn>5</mn><mo>=</mo><mn>5</mn><mtext> </mtext><mtext>CPUs</mtext></mrow><annotation encoding="application/x-tex">1024\\times{5}=5\\:\\text{CPUs} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1024</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord"><span class="mord">5</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord text"><span class="mord">CPUs</span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>512</mn><mo>×</mo><mn>5</mn><mo>=</mo><mn>3</mn><mtext> </mtext><mtext>CPUs</mtext></mrow><annotation encoding="application/x-tex">512\\times{5}=3\\:\\text{CPUs} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">512</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord"><span class="mord">5</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord text"><span class="mord">CPUs</span></span></span></span></span></span></p><p>Best practice suggests profiling the application to determine the memory and CPU allocations for each process running in the JVM. However, Java 10 removes the guesswork when sizing containers to prevent out of memory errors in Java applications as well allocating sufficient CPU to process work loads.</p>`,12)),v(" TODO: add ARTICLE CARD "),e(o,p(l({title:"Improved Docker Container Integration with Java 10",desc:"Learn from Docker experts to simplify and advance your app development and management with Docker. Stay up to date on Docker events and new version",link:"https://chanhi2000.github.io/bookshelf/docker.com/improved-docker-container-integration-with-java-10.html",logo:"https://docker.com/app/uploads/2024/02/cropped-docker-logo-favicon-192x192.png",background:"rgba(29,99,237,0.2)"})),null,16)])}const S=u(y,[["render",J]]),U=JSON.parse('{"path":"/docker.com/improved-docker-container-integration-with-java-10.html","title":"Improved Docker Container Integration with Java 10","lang":"en-US","frontmatter":{"lang":"en-US","title":"Improved Docker Container Integration with Java 10","description":"Article(s) > Improved Docker Container Integration with Java 10","icon":"fa-brands fa-docker","category":["DevOps","Docker","Java","Article(s)"],"tag":["blog","docker.com","devops","docker","java","jdk"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Improved Docker Container Integration with Java 10\\",\\"image\\":[\\"https://docker.com/app/uploads/Screen-Shot-2018-04-03-at-4.40.29-PM.png\\"],\\"datePublished\\":\\"2018-04-04T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Sophia Parafina\\",\\"url\\":\\"https://docker.com/author/sophia/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/docker.com/improved-docker-container-integration-with-java-10.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Improved Docker Container Integration with Java 10"}],["meta",{"property":"og:description","content":"Article(s) > Improved Docker Container Integration with Java 10"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://docker.com/app/uploads/Screen-Shot-2018-04-03-at-4.40.29-PM.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://docker.com/app/uploads/Screen-Shot-2018-04-03-at-4.40.29-PM.png"}],["meta",{"name":"twitter:image:alt","content":"Improved Docker Container Integration with Java 10"}],["meta",{"property":"article:author","content":"Sophia Parafina"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"docker.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2018-04-04T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Improved Docker Container Integration with Java 10"},{"property":"og:description","content":"Improved Docker Container Integration with Java 10"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/docker.com/improved-docker-container-integration-with-java-10.html"}]],"prev":"/devops/docker/articles/README.md","date":"2018-04-04T00:00:00.000Z","isOriginal":false,"author":[{"name":"Sophia Parafina","url":"https://docker.com/author/sophia/"}],"cover":"https://docker.com/app/uploads/Screen-Shot-2018-04-03-at-4.40.29-PM.png"},"git":{},"readingTime":{"minutes":3.34,"words":1002},"filePathRelative":"docker.com/improved-docker-container-integration-with-java-10.md","copyright":{"author":"Sophia Parafina"}}');export{S as comp,U as data};
