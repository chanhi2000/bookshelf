import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as e,f as a,b as r,a as v,t as k,n as c,g as d,w as t,e as s,r as l,o as w}from"./app-BVguHYKu.js";const f={},y={id:"frontmatter-title",tabindex:"-1"},N={class:"header-anchor",href:"#frontmatter-title"},E={class:"table-of-contents"};function x(m,n){const o=l("VPCard"),u=l("router-link"),h=l("SiteInfo"),i=l("RouteLink"),p=l("VPIcon");return w(),b("div",null,[e("h1",y,[e("a",N,[e("span",null,k(m.$frontmatter.title),1)])]),a(o,c(d({title:"awk > Article(s)",desc:"Article(s)",link:"/tool/awk/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a(o,c(d({title:"Shell > Article(s)",desc:"Article(s)",link:"/programming/sh/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",E,[e("ul",null,[e("li",null,[a(u,{to:"#conclusion"},{default:t(()=>n[0]||(n[0]=[s("Conclusion")])),_:1,__:[0]})])])]),n[31]||(n[31]=e("hr",null,null,-1)),a(h,{name:"How to Use Awk Special Patterns ‘BEGIN and END’ - Part 9",desc:"In this article, we shall cover Awk special patterns: BEGIN and END and these special features will help to expand and explore more complex Awk operations.",url:"https://tecmint.com/learn-use-awk-special-patterns-begin-and-end",logo:"https://tecmint.com/wp-content/uploads/2020/07/favicon.ico",preview:"https://tecmint.com/wp-content/uploads/2016/07/Learn-Awk-Patterns-BEGIN-and-END.png"}),e("p",null,[n[3]||(n[3]=s("In ")),n[4]||(n[4]=e("strong",null,"Part 8",-1)),n[5]||(n[5]=s(" of ")),a(i,{to:"/tecmint.com/use-linux-awk-command-to-filter-text-string-in-files.html"},{default:t(()=>n[1]||(n[1]=[e("strong",null,"this Awk series",-1)])),_:1,__:[1]}),n[6]||(n[6]=s(", we introduced some powerful awk command features, that is ")),a(i,{to:"/tecmint.com/learn-awk-variables-numeric-expressions-and-assignment-operators.html"},{default:t(()=>n[2]||(n[2]=[e("strong",null,"variables, numeric expressions, and assignment operators",-1)])),_:1,__:[2]}),n[7]||(n[7]=s("."))]),n[32]||(n[32]=r(`<p>In this segment, we will cover additional Awk features, specifically special patterns: <code>BEGIN</code> and <code>END</code>. These special features will be useful as we expand our exploration of complex Awk operations.</p><p>To get started, let us drive our thoughts back to the introduction of the <strong>Awk</strong> series, remember when we started this series, I pointed out that the general syntax of running an <strong>Awk</strong> command is:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">awk</span> <span class="token string">&#39;script&#39;</span> filenames  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In this syntax, the Awk script is formatted as:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">/pattern/ <span class="token punctuation">{</span> actions <span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>When you consider the pattern in the script, it is normally a regular expression, additionally, you can also think of patterns as special patterns <code>BEGIN</code> and <code>END</code>.</p><p>Therefore, we can also write an <strong>Awk</strong> command in the form below:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">awk</span> <span class="token string">&#39;</span>
<span class="line">  BEGIN { actions }</span>
<span class="line">  /pattern/ { actions }</span>
<span class="line">  /pattern/ { actions }</span>
<span class="line">  ...</span>
<span class="line">  END { actions }</span>
<span class="line">&#39;</span> filenames  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the event that you use the special patterns: <code>BEGIN</code> and <code>END</code> in an <strong>Awk</strong> script, this is what each of them means:</p><ul><li><strong>BEGIN pattern</strong>: means that Awk will execute the action(s) specified in <code>BEGIN</code> once before any input lines are read.</li><li><strong>END pattern</strong>: means that Awk will execute the action(s) specified in <code>END</code> before it exits.</li></ul><p>The flow of execution for an Awk command script with these patterns is:</p><ul><li>When the <code>BEGIN</code> pattern is used in a script, all the actions for <code>BEGIN</code> are executed once before any input line is read.</li><li>Then an input line is read and parsed into the different fields.</li><li>Next, each of the non-special patterns specified is compared with the input line for a match, when a match is found, the action(s) for that pattern are then executed. This stage will be repeated for all the patterns you have specified.</li><li>Next, stage 2 and 3 are repeated for all input lines.</li><li>When all input lines have been read and dealt with, in case you specify the <code>END</code> pattern, the action(s) will be executed.</li></ul><p>You should always remember this sequence of execution when working with special patterns to achieve the best results in an <strong>Awk</strong> operation.</p>`,13)),e("p",null,[n[9]||(n[9]=s("To understand it all, let us illustrate using the example from ")),a(i,{to:"/tecmint.com/learn-awk-variables-numeric-expressions-and-assignment-operators.html"},{default:t(()=>n[8]||(n[8]=[e("strong",null,"part 8",-1)])),_:1,__:[8]}),n[10]||(n[10]=s(", about the list of domains owned by ")),n[11]||(n[11]=e("strong",null,"Tecmint",-1)),n[12]||(n[12]=s(", as stored in a file named ")),a(p,{icon:"fas fa-file-lines"}),n[13]||(n[13]=e("code",null,"domains.txt",-1)),n[14]||(n[14]=s("."))]),n[33]||(n[33]=r(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="domains.txt"><span>domains.txt</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">news.tecmint.com</span>
<span class="line">tecmint.com</span>
<span class="line">linuxsay.com</span>
<span class="line">windows.tecmint.com</span>
<span class="line">tecmint.com</span>
<span class="line">news.tecmint.com</span>
<span class="line">tecmint.com</span>
<span class="line">linuxsay.com</span>
<span class="line">tecmint.com</span>
<span class="line">news.tecmint.com</span>
<span class="line">tecmint.com</span>
<span class="line">linuxsay.com</span>
<span class="line">windows.tecmint.com</span>
<span class="line">tecmint.com</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><figure><img src="https://tecmint.com/wp-content/uploads/2016/07/View-Contents-of-File.png" alt="View Contents of File" tabindex="0" loading="lazy"><figcaption>View Contents of File</figcaption></figure>`,2)),e("p",null,[n[15]||(n[15]=s("In this example, we want to count the number of times the domain ")),n[16]||(n[16]=e("code",null,"tecmint.com",-1)),n[17]||(n[17]=s(" is listed in the file ")),a(p,{icon:"fas fa-file-lines"}),n[18]||(n[18]=e("code",null,"domains.txt",-1)),n[19]||(n[19]=s(". So we wrote a small shell script called ")),a(p,{icon:"iconfont icon-shell"}),n[20]||(n[20]=e("code",null,"script.sh",-1)),n[21]||(n[21]=s(" to help us do that using the idea of variables, numeric expressions, and assignment operators which have the following content:"))]),n[34]||(n[34]=r(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="script.sh"><span>script.sh</span></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token shebang important">#!/bin/bash</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable">$@</span><span class="token punctuation">;</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token variable">$file</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">&quot;File is: <span class="token variable">$file</span>&quot;</span></span>
<span class="line">        <span class="token function">awk</span> <span class="token string">&#39;/^tecmint.com/ { counter+=1 ; printf &quot;%s\\n&quot;, counter ; }&#39;</span> <span class="token variable">$file</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$file</span> is not a file, please specify a file.&quot;</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">fi</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"><span class="token builtin class-name">exit</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Let us now employ the two special patterns: <code>BEGIN</code> and <code>END</code> in the <strong>Awk</strong> command in the script above as follows:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">awk</span> <span class="token string">&#39;</span>
<span class="line">  BEGIN { print &quot;The number of times tecmint.com appears in the file is:&quot; ; }</span>
<span class="line">  /^tecmint.com/ { counter+=1 ; }</span>
<span class="line">  END { printf &quot;%s\\n&quot;, counter ; }</span>
<span class="line">&#39;</span> <span class="token variable">$file</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After making the changes to the <strong>Awk</strong> command, the complete shell script now looks like this:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="script.sh"><span>script.sh</span></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token shebang important">#!/bin/bash</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable">$@</span><span class="token punctuation">;</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token variable">$file</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">&quot;File is: <span class="token variable">$file</span>&quot;</span></span>
<span class="line">        <span class="token function">awk</span> <span class="token string">&#39;</span>
<span class="line">          BEGIN { print &quot;The number of times tecmint.com appears in the file is:&quot; ; }</span>
<span class="line">          /^tecmint.com/ { counter+=1 ; }</span>
<span class="line">          END { printf &quot;%s\\n&quot;, counter ; }</span>
<span class="line">        &#39;</span> <span class="token variable">$file</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$file</span> is not a file, please specify a file.&quot;</span> <span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;2</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">fi</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"><span class="token builtin class-name">exit</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><figure><img src="https://tecmint.com/wp-content/uploads/2016/07/Awk-BEGIN-and-END-Patterns.png" alt="Awk BEGIN and END Patterns" tabindex="0" loading="lazy"><figcaption>Awk BEGIN and END Patterns</figcaption></figure><p>When you run this script, it will first display the file’s location and then execute the Awk command. The <code>BEGIN</code> pattern prints the message before any input lines are processed. The pattern <code>/^tecmint.com/</code> counts the occurrences of <strong>tecmint.com</strong>, and the <code>END</code> pattern prints the total count.</p><p>Then our pattern, <code>/^tecmint.com/</code> is compared against every input line and the action, <code>{ counter+=1 ; }</code> is executed for each input line, which counts the number of times <code>tecmint.com</code> appears in the file.</p><p>Finally, the <code>END</code> pattern will print the total number of times the domain <code>tecmint.com</code> appears in the file.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">./script.sh domains.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://tecmint.com/wp-content/uploads/2016/07/Script-to-Count-Number-of-Times-String-Appears.png" alt="Script to Count Number of Times String Appears" tabindex="0" loading="lazy"><figcaption>Script to Count Number of Times String Appears</figcaption></figure><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>To conclude, we walked through more <strong>Awk</strong> features exploring the concepts of special patterns: <code>BEGIN</code> and <code>END</code>.</p>`,14)),e("p",null,[n[24]||(n[24]=s("As I pointed out before, these Awk features will help us build more complex ")),a(i,{to:"/tecmint.com/use-linux-awk-command-to-filter-text-string-in-files.html"},{default:t(()=>n[22]||(n[22]=[e("strong",null,"text filtering operations",-1)])),_:1,__:[22]}),n[25]||(n[25]=s(", there is more to cover under ")),n[26]||(n[26]=e("strong",null,"Awk",-1)),n[27]||(n[27]=s(" features, and in ")),n[28]||(n[28]=e("strong",null,"part 10",-1)),n[29]||(n[29]=s(", we shall approach the idea of ")),a(i,{to:"/tecmint.com/awk-built-in-variables-examples.html"},{default:t(()=>n[23]||(n[23]=[e("strong",null,"Awk built-in variables",-1)])),_:1,__:[23]}),n[30]||(n[30]=s(", so stay connected."))]),v(" TODO: add ARTICLE CARD "),a(o,c(d({title:"How to Use Awk Special Patterns ‘BEGIN and END’ - Part 9",desc:"In this article, we shall cover Awk special patterns: BEGIN and END and these special features will help to expand and explore more complex Awk operations.",link:"https://chanhi2000.github.io/bookshelf/tecmint.com/learn-use-awk-special-patterns-begin-and-end.html",logo:"https://tecmint.com/wp-content/uploads/2020/07/favicon.ico",background:"rgba(5,86,243,0.2)"})),null,16)])}const P=g(f,[["render",x]]),D=JSON.parse('{"path":"/tecmint.com/learn-use-awk-special-patterns-begin-and-end.html","title":"How to Use Awk Special Patterns ‘BEGIN and END’ - Part 9","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How to Use Awk Special Patterns ‘BEGIN and END’ - Part 9","description":"Article(s) > How to Use Awk Special Patterns ‘BEGIN and END’ - Part 9","icon":"iconfont icon-awk","category":["Linux","Shell","awk","Article(s)"],"tag":["blog","tecmint.com","sh","shell","linux","awk"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to Use Awk Special Patterns ‘BEGIN and END’ - Part 9\\",\\"image\\":[\\"https://tecmint.com/wp-content/uploads/2016/07/View-Contents-of-File.png\\",\\"https://tecmint.com/wp-content/uploads/2016/07/Awk-BEGIN-and-END-Patterns.png\\",\\"https://tecmint.com/wp-content/uploads/2016/07/Script-to-Count-Number-of-Times-String-Appears.png\\"],\\"datePublished\\":\\"2024-08-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aaron Kili\\",\\"url\\":\\"https://tecmint.com/author/aaronkili/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/tecmint.com/learn-use-awk-special-patterns-begin-and-end.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to Use Awk Special Patterns ‘BEGIN and END’ - Part 9"}],["meta",{"property":"og:description","content":"Article(s) > How to Use Awk Special Patterns ‘BEGIN and END’ - Part 9"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tecmint.com/wp-content/uploads/2016/07/Learn-Awk-Patterns-BEGIN-and-END.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://tecmint.com/wp-content/uploads/2016/07/Learn-Awk-Patterns-BEGIN-and-END.png"}],["meta",{"name":"twitter:image:alt","content":"How to Use Awk Special Patterns ‘BEGIN and END’ - Part 9"}],["meta",{"property":"article:author","content":"Aaron Kili"}],["meta",{"property":"article:tag","content":"awk"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:tag","content":"tecmint.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-08-14T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How to Use Awk Special Patterns ‘BEGIN and END’ - Part 9"},{"property":"og:description","content":"How to Use Awk Special Patterns ‘BEGIN and END’ - Part 9"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/tecmint.com/learn-use-awk-special-patterns-begin-and-end.html"}]],"prev":"/tool/awk/articles/README.md","date":"2024-08-14T00:00:00.000Z","isOriginal":false,"author":[{"name":"Aaron Kili","url":"https://tecmint.com/author/aaronkili/"}],"cover":"https://tecmint.com/wp-content/uploads/2016/07/Learn-Awk-Patterns-BEGIN-and-END.png"},"git":{},"readingTime":{"minutes":3.92,"words":1177},"filePathRelative":"tecmint.com/learn-use-awk-special-patterns-begin-and-end.md","copyright":{"author":"Aaron Kili"}}');export{P as comp,D as data};
