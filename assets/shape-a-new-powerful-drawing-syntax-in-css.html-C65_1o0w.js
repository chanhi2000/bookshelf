import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as w,d as t,f as s,b as r,a as b,t as y,n as m,g as h,w as p,e as n,r as l,o as v}from"./app-BVguHYKu.js";const k={},S={id:"frontmatter-title-관련",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},I={href:"https://arc.net/l/quote/wnmeyzxr",target:"_blank",rel:"noopener noreferrer"},A={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape/shape",target:"_blank",rel:"noopener noreferrer"},P={class:"hint-container warning"},q={href:"https://developer.chrome.com/blog/css-shape#:~:text=At%20the%20moment%2C%20it%20only%20works%20for%20clip%2Dpath.",target:"_blank",rel:"noopener noreferrer"},D={href:"https://blog.codepen.io/2025/04/21/chris-corner-rounded-triangle-boxes-and-our-shapely-future/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://trysmudford.com/blog/rounded-triangular-boxes-in-css/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://css-tip.com/arrow-like-box/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://webkit.org/blog/16794/the-css-shape-function/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://developer.chrome.com/blog/css-shape",target:"_blank",rel:"noopener noreferrer"},z={href:"https://css-generators.com/blob/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://somonoco.com/",target:"_blank",rel:"noopener noreferrer"},G={href:"https://codepen.io/chriscoyier/pen/WbbOwBP",target:"_blank",rel:"noopener noreferrer"},M={class:"hint-container info"},E={href:"https://liamrosenfeld.com/posts/apple_icon_quest/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://claude.ai/public/artifacts/26954731-6fcd-40ac-9bd1-a6dd85b97a71",target:"_blank",rel:"noopener noreferrer"};function R(a,e){const u=l("VPCard"),d=l("router-link"),f=l("SiteInfo"),o=l("VPIcon"),i=l("CodePen"),g=l("RouteLink");return v(),w("div",null,[t("h1",S,[t("a",C,[t("span",null,y(a.$frontmatter.title)+" 관련",1)])]),s(u,m(h({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t("nav",x,[t("ul",null,[t("li",null,[s(d,{to:"#the-actual-shape-commands"},{default:p(()=>e[0]||(e[0]=[n("The Actual Shape Commands")])),_:1,__:[0]})]),t("li",null,[s(d,{to:"#squircles-with-shape"},{default:p(()=>e[1]||(e[1]=[n("Squircles with shape()")])),_:1,__:[1]})]),t("li",null,[s(d,{to:"#update-1"},{default:p(()=>e[2]||(e[2]=[n("Update #1")])),_:1,__:[2]})]),t("li",null,[s(d,{to:"#update-2"},{default:p(()=>e[3]||(e[3]=[n("Update #2")])),_:1,__:[3]})])])]),e[85]||(e[85]=t("hr",null,null,-1)),s(f,{name:"shape(): A New Powerful Drawing Syntax in CSS",desc:"Don't underestimate `shape()` — it's the CSS version of SVG  that we absolutely needed.",url:"https://frontendmasters.com/blog/shape-a-new-powerful-drawing-syntax-in-css/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/5662"}),t("p",null,[e[6]||(e[6]=n("I first saw in ")),t("a",I,[s(o,{icon:"fas fa-globe"}),e[4]||(e[4]=n("the Safari 18.4 release notes"))]),e[7]||(e[7]=n(" that ")),e[8]||(e[8]=t("code",null,"shape()",-1)),e[9]||(e[9]=n(", a new function is now supported. Then I ")),t("a",A,[s(o,{icon:"fa-brands fa-firefox"}),e[5]||(e[5]=n("saw on MDN"))]),e[10]||(e[10]=n(" it’s actually already in Chrome, too!"))]),e[86]||(e[86]=r("<p>The <code>shape()</code> function joins friends like <code>polygon()</code>, <code>circle()</code>, <code>rect()</code>, <code>inset()</code>, and a handful of others. These functions are used as values for a handful of things in CSS, namely:</p><ul><li><code>clip-path</code> — Clipping away parts of elements</li><li><code>offset-path</code> — Moving elements along a path</li><li><code>shape-outside</code> — Applied to a <code>float</code>-ed element such that content flows along the path</li></ul>",2)),t("div",P,[e[17]||(e[17]=t("p",{class:"hint-container-title"},"Fair warning:",-1)),t("p",null,[e[12]||(e[12]=t("code",null,"shape()",-1)),e[13]||(e[13]=n(" only seems to work with ")),e[14]||(e[14]=t("code",null,"clip-path",-1)),e[15]||(e[15]=n(". I couldn’t find a ton of information on this, but ")),t("a",q,[s(o,{icon:"fa-brands fa-firefox"}),e[11]||(e[11]=n("the Chrome blog does state it"))]),e[16]||(e[16]=n(". It will probably work with the other properties in due time."))])]),e[87]||(e[87]=t("p",null,[n("Let’s focus on "),t("code",null,"clip-path"),n(" here which I might argue is the most useful anyway, as it makes an entire element into the shape described which feels like a more generally applicable thing.")],-1)),t("p",null,[e[19]||(e[19]=n("I got into this ")),t("a",D,[s(o,{icon:"fa-brands fa-codepen"}),e[18]||(e[18]=n("on the CodePen blog"))]),e[20]||(e[20]=n(" where I equated ")),e[21]||(e[21]=t("code",null,"shape()",-1)),e[22]||(e[22]=n(" to ")),e[23]||(e[23]=t("code",null,'<path d="">',-1)),e[24]||(e[24]=n(" in SVG, which is surely the intention. You can actually set the ")),e[25]||(e[25]=t("code",null,"d",-1)),e[26]||(e[26]=n(" attribute in CSS, but it only works on ")),e[27]||(e[27]=t("code",null,"<path>",-1)),e[28]||(e[28]=n(" elements, and the unitless values translate ")),e[29]||(e[29]=t("em",null,"only",-1)),e[30]||(e[30]=n(" to pixels, which makes it not particularly CSSy or useful."))]),t("p",null,[e[32]||(e[32]=n("One situation I mentioned was ")),t("a",T,[s(o,{icon:"fas fa-globe"}),e[31]||(e[31]=n("Trys Mudford’s blog post"))]),e[33]||(e[33]=n(" where this was the design situation at hand:"))]),e[88]||(e[88]=t("figure",null,[t("img",{src:"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/04/motorway-cvt-1536x618-1.jpg?resize=1024%2C412&ssl=1",alt:"",tabindex:"0",loading:"lazy"}),t("figcaption")],-1)),e[89]||(e[89]=t("p",null,"Oh look, a use case.",-1)),e[90]||(e[90]=t("p",null,[n("Those light yellow boxes are basically polygons with rounded corners. In a perfect world, "),t("code",null,"polygon()"),n(" could do this with the "),t("code",null,"round"),n(" keyword, as specced, but alas that doesn’t work just yet. But because "),t("code",null,"shape()"),n(" is essentially all-powerful, that "),t("em",null,"does"),n(" work now (in Chrome and Safari anyway, and this feels like a decently progressive-enhancement thing).")],-1)),t("p",null,[t("a",N,[s(o,{icon:"fas fa-globe"}),e[34]||(e[34]=n("Temani Afif saw that and did the work!"))])]),s(i,{user:"t_afif","slug-hash":"LEENyEq",title:"Arrow-like Box with rounded corners","default-tab":["css","result"],theme:a.$isDarkmode?"dark":"light"},null,8,["theme"]),e[91]||(e[91]=t("p",null,"This is very awesome. This is quite the power tool for shape-making. I think we’re going to see a lot of fancy stuff come out of this.",-1)),t("p",null,[e[36]||(e[36]=n("It’s true we already have a ")),e[37]||(e[37]=t("code",null,"path()",-1)),e[38]||(e[38]=n(" function, but remember, it’s ")),e[39]||(e[39]=t("em",null,"sooooo",-1)),e[40]||(e[40]=n(" limited. The values are only pixels, which are some pretty big handcuffs in a responsive world full of intrinsic content (that is, elements on the web that respond to their contents and environment). ")),t("a",j,[s(o,{icon:"iconfont icon-webkit"}),e[35]||(e[35]=n("Simon Fraser on the WebKit blog introduces this new feature"))]),e[41]||(e[41]=n(" and calls it out:"))]),e[92]||(e[92]=r('<div class="hint-container info"><p class="hint-container-title">Info</p><blockquote><p>… using<code>path()</code>in<code>clip-path</code>can’t be<em>responsive</em>; you can’t write CSS rules so that the path adapts to the size of the element. This is where the new<code>shape()</code>function comes in.</p></blockquote></div><p>Coincidentally, Simon’s demo (Jen’s demo?) also shows off an arrow shape:</p>',2)),s(i,{user:"jensimmons","slug-hash":"GgRXXMx",title:"shape() - demo 3","default-tab":["css","result"],theme:a.$isDarkmode?"dark":"light"},null,8,["theme"]),t("p",null,[e[43]||(e[43]=n("That’s using multiple different drawing commands (")),e[44]||(e[44]=t("code",null,"line",-1)),e[45]||(e[45]=n(" and ")),e[46]||(e[46]=t("code",null,"arc",-1)),e[47]||(e[47]=n(", but there are more), keywords like ")),e[48]||(e[48]=t("code",null,"top",-1)),e[49]||(e[49]=n(" and ")),e[50]||(e[50]=t("code",null,"left",-1)),e[51]||(e[51]=n(" (excellent, but I wonder why logical properties don’t work?), and, even more deliciously, ")),s(g,{to:"/frontendmasters.com/container-queries-and-units/#what-are-container-query-units.md"},{default:p(()=>e[42]||(e[42]=[t("strong",null,"container units",-1)])),_:1,__:[42]}),e[52]||(e[52]=n(" (e.g. ")),e[53]||(e[53]=t("code",null,"cqh",-1)),e[54]||(e[54]=n("). The orange border there is a good reminder that ")),e[55]||(e[55]=t("code",null,"clip-path",-1)),e[56]||(e[56]=n(", well, ")),e[57]||(e[57]=t("em",null,"clips.",-1)),e[58]||(e[58]=n(" So it’ll lop off anything at all on this element in those areas, including content."))]),t("p",null,[t("a",V,[s(o,{icon:"fa-brands fa-chrome"}),e[59]||(e[59]=n("Noam Rosenthal got in on the fun"))]),e[60]||(e[60]=n(" over on the Chrome for Developers blog, underscoring just how hard this stuff used to be:"))]),e[93]||(e[93]=t("div",{class:"hint-container info"},[t("p",{class:"hint-container-title"},"Info"),t("blockquote",null,[t("p",null,[t("code",null,"clip-path: shape()"),n("lets you clip your element using arbitrary and responsive shapes, previously only possible using techniques like conic gradients or JavaScript-constructed SVG.")])])],-1)),e[94]||(e[94]=t("p",null,"And like all this good company, absolutely couldn’t resist peppering in other CSS goodness into a demo. His demo here uses different drawing commands than we’ve seen so far, custom properties (which are an extremely natural fit), and even animation (!!).",-1)),s(i,{user:"noamr","slug-hash":"OPJdjBp",title:"Untitled","default-tab":["css","result"],theme:a.$isDarkmode?"dark":"light"},null,8,["theme"]),t("p",null,[e[63]||(e[63]=n("I see Temani is hard on the case with ")),t("a",z,[s(o,{icon:"fas fa-globe"}),e[61]||(e[61]=n("a blob generator using ")),e[62]||(e[62]=t("code",null,"shape()",-1))]),e[64]||(e[64]=n(", which, I believe as long as there are the “same number of points”, can be animated by changing the ")),e[65]||(e[65]=t("code",null,"clip-path",-1)),e[66]||(e[66]=n(" entirely. Like:"))]),s(i,{user:"t_afif","slug-hash":"yyyPONb",title:"Blob shape with hover effect!","default-tab":["css","result"],theme:a.$isDarkmode?"dark":"light"},null,8,["theme"]),e[95]||(e[95]=t("p",null,"And obviously I love this:",-1)),s(i,{user:"t_afif","slug-hash":"JoovLam",title:"CodePen Logo using clip-path: shape()","default-tab":["css","result"],theme:a.$isDarkmode?"dark":"light"},null,8,["theme"]),e[96]||(e[96]=r('<hr><h2 id="the-actual-shape-commands" tabindex="-1"><a class="header-anchor" href="#the-actual-shape-commands"><span><a href="#the-actual-shape-commands"></a>The Actual Shape Commands</span></a></h2><p><a href="https://drafts.csswg.org/css-shapes-2/#shape-function" target="_blank" rel="noopener noreferrer">The spec covers them</a>, but the best writeup I’ve seen is <a href="https://css-tricks.com/css-shape-commands/#:~:text=I%20figured%20a%20table%20would%20help." target="_blank" rel="noopener noreferrer">Geoff’s on CSS-Tricks</a>. He’s got a bit more detail so check that out, but here’s the list:</p><ul><li><code>line</code></li><li><code>vline</code></li><li><code>hline</code></li><li><code>arc</code></li><li><code>curve</code></li><li><code>smooth</code></li></ul><p>Each of them have a bit of sub-syntax to themselves. Like the <code>curve</code> command might look like <code>curve to 50% 50% with 50% 0</code> which would continue drawing the shape to the exact center of the element in a curve in which the top center is a “control point” and so curves in that direction.</p><p>In my experience it’s quite easy to make a small mistake in the syntax and wreck the whole thing. But hey that’s understandable.</p><hr><h2 id="squircles-with-shape" tabindex="-1"><a class="header-anchor" href="#squircles-with-shape"><span>Squircles with <code>shape()</code></span></a></h2><p>I get to have some fun too! It occurred to me that digital designs most elusive beast, <em>the squircle,</em> might be now achievable with reasonable normal web tech.</p>',9)),t("p",null,[e[68]||(e[68]=n("SVG can do it, but I wouldn’t call it particularly readable code. “")),t("a",B,[s(o,{icon:"fas fa-globe"}),e[67]||(e[67]=n("Monoco"))]),e[69]||(e[69]=n(" is a tiny JavaScript library that adds squircles” (via SVG background images) and it does a pretty good job of it I’d say, but that’s more technology than I normally like to throw at something like this. Jared White by way of Simeon Griggs has a pretty nice SVG-based solution as well, leveraging SVG-as-clip-path."))]),s(i,{user:"jaredcwhite","slug-hash":"JoPeJar",title:"Squircle Web Component Button","default-tab":["css","result"],theme:a.$isDarkmode?"dark":"light"},null,8,["theme"]),e[97]||(e[97]=r(`<p>I like how relatively chill that SVG <code>path</code> is, but still, <code>shape()</code> can allow us to squish this down into just CSS which is kinda sweet.</p><p>That is… if I was fully smart enough to do it.</p><p>I crudely drew one in Figma so that I could label the points for writing the syntax out.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/Screenshot-2025-05-05-at-3.49.06 PM.png?resize=1008%2C1024&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>I figured if I just did a <code>curve</code> to every one of those points with control points a bit the edges, it would… work? So basically like this:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">div</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">shape</span><span class="token punctuation">(</span></span>
<span class="line">    from 5% 3%<span class="token punctuation">,</span></span>
<span class="line">    curve to 95% 3% with 50% 0<span class="token punctuation">,</span></span>
<span class="line">    curve to 97% 5% with 97% 3%<span class="token punctuation">,</span></span>
<span class="line">    curve to 97% 95% with 100% 50%<span class="token punctuation">,</span></span>
<span class="line">    curve to 95% 97% with 97% 97%<span class="token punctuation">,</span></span>
<span class="line">    curve to 5% 97% with 50% 100%<span class="token punctuation">,</span></span>
<span class="line">    curve to 3% 95% with 3% 97%<span class="token punctuation">,</span></span>
<span class="line">    curve to 3% 5% with 0% 50%<span class="token punctuation">,</span></span>
<span class="line">    curve to 5% 3% with 3% 3%<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),t("p",null,[e[73]||(e[73]=n("Which basically ")),t("a",G,[e[70]||(e[70]=n("works (")),s(o,{icon:"fa-brands fa-codepen"}),e[71]||(e[71]=t("code",null,"chriscoyier",-1)),e[72]||(e[72]=n(")"))]),e[74]||(e[74]=n(". I tried playing around with ")),e[75]||(e[75]=t("code",null,"arc",-1)),e[76]||(e[76]=n(" and ")),e[77]||(e[77]=t("code",null,"smooth",-1)),e[78]||(e[78]=n(" instead but couldn’t manage to make it any better (with my like zero geometry skills). Then instead of hard coding those percentage values, I made them in custom properties with sliders to squiggle them around a little."))]),s(i,{user:"chriscoyier","slug-hash":"zxxzBPZ",title:"Attempt at Squircle #3 with shape();","default-tab":["css","result"],theme:a.$isDarkmode?"dark":"light"},null,8,["theme"]),e[98]||(e[98]=t("p",null,"It’s a little janky — but I trust someone make like a real quality geometrically sound version eventually.",-1)),e[99]||(e[99]=t("hr",null,null,-1)),e[100]||(e[100]=t("h2",{id:"update-1",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#update-1"},[t("span",null,"Update #1")])],-1)),e[101]||(e[101]=t("p",null,"I heard from Peter Herbert over email:",-1)),t("div",M,[e[84]||(e[84]=t("p",{class:"hint-container-title"},"Info",-1)),t("blockquote",null,[t("p",null,[e[81]||(e[81]=n("I found a somewhat more accurate version of the iOS squircle. Apparently the Apple squircle uses three cubic beziers in each corner. The original research that figured out the curves I found")),t("a",E,[s(o,{icon:"fas fa-globe"}),e[79]||(e[79]=n("here"))]),e[82]||(e[82]=n(",and I used")),t("a",O,[s(o,{icon:"iconfont icon-claude"}),e[80]||(e[80]=n("Claude"))]),e[83]||(e[83]=n("to find the points."))])])]),s(i,{user:"chriscoyier","slug-hash":"KwwGKvY",title:"Three Cubic Bezier Squircle","default-tab":["css","result"],theme:a.$isDarkmode?"dark":"light"},null,8,["theme"]),e[102]||(e[102]=r(`<hr><h2 id="update-2" tabindex="-1"><a class="header-anchor" href="#update-2"><span>Update #2</span></a></h2><p>Matthew Morete commented below with a tool he made that converts SVG path commands into <code>shape()</code> commands, which is awesome. Squircles are one of the provided demos, and the commands are very chill:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.squircle</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">shape</span><span class="token punctuation">(</span></span>
<span class="line">    from 0% 50%<span class="token punctuation">,</span> </span>
<span class="line">    curve by 50% -50% with 0% -45% / 5% -50%<span class="token punctuation">,</span> </span>
<span class="line">    smooth by 50% 50% with 50% 5%<span class="token punctuation">,</span> </span>
<span class="line">    smooth by -50% 50% with -5% 50%<span class="token punctuation">,</span> </span>
<span class="line">    smooth by -50% -50% with -50% -5%</span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s(i,{user:"chriscoyier","slug-hash":"gbbBOXz",title:"Another Squircle Clip Path using `smooth`","default-tab":["css","result"],theme:a.$isDarkmode?"dark":"light"},null,8,["theme"]),b(" TODO: add ARTICLE CARD "),s(u,m(h({title:"shape(): A New Powerful Drawing Syntax in CSS",desc:"Don't underestimate `shape()` — it's the CSS version of SVG  that we absolutely needed.",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/shape-a-new-powerful-drawing-syntax-in-css.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const L=c(k,[["render",R]]),U=JSON.parse('{"path":"/frontendmasters.com/shape-a-new-powerful-drawing-syntax-in-css.html","title":"shape(): A New Powerful Drawing Syntax in CSS","lang":"en-US","frontmatter":{"lang":"en-US","title":"shape(): A New Powerful Drawing Syntax in CSS","description":"Article(s) > shape(): A New Powerful Drawing Syntax in CSS","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","frontendmasters.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"shape(): A New Powerful Drawing Syntax in CSS\\",\\"image\\":[\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/04/motorway-cvt-1536x618-1.jpg?resize=1024%2C412&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/05/Screenshot-2025-05-05-at-3.49.06%E2%80%AFPM.png?resize=1008%2C1024&ssl=1\\"],\\"datePublished\\":\\"2025-05-07T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chris Coyier\\",\\"url\\":\\"https://frontendmasters.com/blog/author/chriscoyier/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/shape-a-new-powerful-drawing-syntax-in-css.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"shape(): A New Powerful Drawing Syntax in CSS"}],["meta",{"property":"og:description","content":"Article(s) > shape(): A New Powerful Drawing Syntax in CSS"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/5662"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/5662"}],["meta",{"name":"twitter:image:alt","content":"shape(): A New Powerful Drawing Syntax in CSS"}],["meta",{"property":"article:author","content":"Chris Coyier"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-05-07T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > shape(): A New Powerful Drawing Syntax in CSS"},{"property":"og:description","content":"shape(): A New Powerful Drawing Syntax in CSS"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/shape-a-new-powerful-drawing-syntax-in-css.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-05-07T00:00:00.000Z","isOriginal":false,"author":[{"name":"Chris Coyier","url":"https://frontendmasters.com/blog/author/chriscoyier/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/5662"},"git":{},"readingTime":{"minutes":6.08,"words":1825},"filePathRelative":"frontendmasters.com/shape-a-new-powerful-drawing-syntax-in-css.md","copyright":{"author":"Chris Coyier"}}');export{L as comp,U as data};
