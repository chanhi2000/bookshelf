import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as a,b as g,a as b,t as h,n as i,g as u,w as e,e as p,r as c,o as y}from"./app-BVguHYKu.js";const w={},f={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},_={class:"table-of-contents"},M={class:"hint-container details"},S={class:"hint-container info"},D={href:"https://github.com/CodeMazeBlog/csharp-intermediate-module/tree/delegates",target:"_blank",rel:"noopener noreferrer"};function C(r,n){const o=c("VPCard"),l=c("router-link"),d=c("SiteInfo"),t=c("RouteLink"),k=c("VPIcon");return y(),v("div",null,[s("h1",f,[s("a",x,[s("span",null,h(r.$frontmatter.title)+" 관련",1)])]),a(o,i(u({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",_,[s("ul",null,[s("li",null,[a(l,{to:"#delegate-syntax"},{default:e(()=>n[0]||(n[0]=[p("Delegate Syntax")])),_:1,__:[0]})]),s("li",null,[a(l,{to:"#func-t-delegate"},{default:e(()=>n[1]||(n[1]=[p("Func<T> Delegate")])),_:1,__:[1]})]),s("li",null,[a(l,{to:"#action-t-delegate"},{default:e(()=>n[2]||(n[2]=[p("Action<T> Delegate")])),_:1,__:[2]})]),s("li",null,[a(l,{to:"#practical-example"},{default:e(()=>n[3]||(n[3]=[p("Practical Example")])),_:1,__:[3]})]),s("li",null,[a(l,{to:"#conclusion"},{default:e(()=>n[4]||(n[4]=[p("Conclusion")])),_:1,__:[4]})])])]),n[28]||(n[28]=s("hr",null,null,-1)),a(d,{name:"C# Intermediate - Delegates",desc:"In this article, you will learn about Delegates in C#. Differences between Action and Func delegates and how to write better code with delegates.",url:"https://code-maze.com/csharp-delegates/",logo:"/assets/image/code-maze.com/favicon.png",preview:"/assets/image/csharp-delegates/banner.png"}),n[29]||(n[29]=s("p",null,"In this article, we are going to talk more about delegates in C#.",-1)),n[30]||(n[30]=s("p",null,"A delegate is a reference to a method. We can use a delegate object to pass it to the code in which we want to call a referenced method, without knowing at compile time which method will be invoked.",-1)),s("details",M,[n[18]||(n[18]=s("summary",null,"This article is part of the series",-1)),s("ul",null,[s("li",null,[a(t,{to:"/code-maze.com/csharp-classes-constructors.html"},{default:e(()=>n[5]||(n[5]=[s("strong",null,"Classes and Constructors",-1)])),_:1,__:[5]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-properties.html"},{default:e(()=>n[6]||(n[6]=[s("strong",null,"Properties",-1)])),_:1,__:[6]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-static-members-constants-extension-methods.html"},{default:e(()=>n[7]||(n[7]=[s("strong",null,"Static Members, Constants, and Extension Methods",-1)])),_:1,__:[7]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-anonymous-nullable-types.html"},{default:e(()=>n[8]||(n[8]=[s("strong",null,"Anonymous and Nullable Types",-1)])),_:1,__:[8]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-structures.html"},{default:e(()=>n[9]||(n[9]=[s("strong",null,"Structures",-1)])),_:1,__:[9]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-enumerations.html"},{default:e(()=>n[10]||(n[10]=[s("strong",null,"Enumerations",-1)])),_:1,__:[10]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-inheritance.html"},{default:e(()=>n[11]||(n[11]=[s("strong",null,"Inheritance",-1)])),_:1,__:[11]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-interfaces.html"},{default:e(()=>n[12]||(n[12]=[s("strong",null,"Interfaces",-1)])),_:1,__:[12]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-abstract-classes.html"},{default:e(()=>n[13]||(n[13]=[s("strong",null,"Abstract Classes",-1)])),_:1,__:[13]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-generics.html"},{default:e(()=>n[14]||(n[14]=[s("strong",null,"Generics",-1)])),_:1,__:[14]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-queue-stack-hashtable.html"},{default:e(()=>n[15]||(n[15]=[s("strong",null,"Queue, Stack, Hashtable",-1)])),_:1,__:[15]})]),s("li",null,[a(t,{to:"/code-maze.com/cshart-generic-list-dictionary.html"},{default:e(()=>n[16]||(n[16]=[s("strong",null,"Generic List and Dictionary",-1)])),_:1,__:[16]})]),n[17]||(n[17]=s("li",null,"Delegates (Current article)",-1))])]),s("p",null,[n[20]||(n[20]=p("If you want to see the complete navigation of this tutorial, you can do that here ")),a(t,{to:"/code-maze.com/csharp-intermediate-tutorial-oop.html"},{default:e(()=>n[19]||(n[19]=[s("strong",null,"C# Intermediate Tutorial",-1)])),_:1,__:[19]}),n[21]||(n[21]=p("."))]),s("div",S,[n[27]||(n[27]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[25]||(n[25]=p("To download the source code, you can visit ")),s("a",D,[n[22]||(n[22]=p("Delegates in C# Source Code (")),a(k,{icon:"iconfont icon-github"}),n[23]||(n[23]=s("code",null,"CodeMazeBlog/csharp-intermediate-module",-1)),n[24]||(n[24]=p(")"))]),n[26]||(n[26]=p("."))])]),n[31]||(n[31]=g(`<hr><h2 id="delegate-syntax" tabindex="-1"><a class="header-anchor" href="#delegate-syntax"><span>Delegate Syntax</span></a></h2><p>A base syntax to create a delegate object is:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">delegate</span> <span class="token return-type class-name">Result_Type</span> <span class="token function">identifier</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">parameters</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>There are three steps in defining and using delegates:</p><ul><li>Declaration of our delegate</li><li>Instantiation, creating the delegate’s object</li><li>Invocation, where we call a referenced method</li></ul><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">//Declaration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriterDelegate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Program</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//Instantiation</span></span>
<span class="line">        <span class="token class-name">WriterDelegate</span> writerDelegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WriterDelegate</span><span class="token punctuation">(</span>Write<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//Invocation</span></span>
<span class="line">        <span class="token function">writerDelegate</span><span class="token punctuation">(</span><span class="token string">&quot;Some example text.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is important to understand that the return type of a method and the number of parameters must match the delegate’s return type and the number of parameters. Otherwise, we will get a compiler error. We can see in our example that our <code>Write</code> method has a void as return type and only one string parameter as well as our delegate.</p><p>Delegates are very useful in the encapsulation of our methods.</p><p>C# has the two built-in delegates: <code>Func&lt;T&gt;</code> and <code>Action&lt;T&gt;</code>, there are widely used, so let’s talk more about them.</p><hr><h2 id="func-t-delegate" tabindex="-1"><a class="header-anchor" href="#func-t-delegate"><span><code>Func&lt;T&gt;</code> Delegate</span></a></h2><p>This delegate encapsulates a method that has up to sixteen parameters and returns a value of the specified type. So, in other words, we use the <code>Func</code> delegate only with a method that has a return type other than void.</p><p>We can instantiate the <code>Func</code> delegate with this syntax:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Func<span class="token punctuation">&lt;</span>Type1<span class="token punctuation">,</span> Type2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> ReturnType<span class="token punctuation">&gt;</span></span> DelegateName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span>Type1<span class="token punctuation">,</span> Type2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> ReturnType<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>MethodName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We can see that the last parameter inside square brackets is a return type. Of course, we don’t have to initialize a delegate object like this, we can do it in another way:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Func<span class="token punctuation">&lt;</span> Type1<span class="token punctuation">,</span> Type2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> ReturnType<span class="token punctuation">&gt;</span></span> name <span class="token operator">=</span> MethodName<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Let’s see how to use <code>Func</code> delegate with an example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Program</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> sumDelegate <span class="token operator">=</span> Sum<span class="token punctuation">;</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">sumDelegate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="action-t-delegate" tabindex="-1"><a class="header-anchor" href="#action-t-delegate"><span><code>Action&lt;T&gt;</code> Delegate</span></a></h2><p>This delegate encapsulates a method that has up to sixteen parameters and doesn’t return any result. So we can assign to this delegate only methods with the void return type.</p><p>We can instantiate the <code>Action</code> object with this syntax:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Action<span class="token punctuation">&lt;</span>Type1<span class="token punctuation">,</span> Type2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&gt;</span></span> DelegateName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action<span class="token punctuation">&lt;</span>Type1<span class="token punctuation">,</span> Type2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>MethodName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Or, we can use another way:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Action <span class="token punctuation">&lt;</span> Type1<span class="token punctuation">,</span> Type2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&gt;</span></span> DelegateName <span class="token operator">=</span> MethodName<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Let’s see how to use <code>Action</code> delegate with an example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> writeDelegate <span class="token operator">=</span> Write<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">writeDelegate</span><span class="token punctuation">(</span><span class="token string">&quot;String parameter to write.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="practical-example" tabindex="-1"><a class="header-anchor" href="#practical-example"><span>Practical Example</span></a></h2><p>In this example, we are going to create an application that executes one of three methods (Sum, Subtract, Multiply) based on a single provided parameter. Basically, if we send <code>Sum</code> as a parameter, the Sum method will be executed, and so on. First, we will write this example without delegates and then we will refactor that code by introducing delegates.</p><p>So let’s start with the first part:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Operation</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Sum<span class="token punctuation">,</span></span>
<span class="line">    Subtract<span class="token punctuation">,</span></span>
<span class="line">    Multiply</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationManager</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _first<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _second<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">OperationManager</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> first<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> second<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _first <span class="token operator">=</span> first<span class="token punctuation">;</span></span>
<span class="line">        _second <span class="token operator">=</span> second<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> _first <span class="token operator">+</span> _second<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Subtract</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> _first <span class="token operator">-</span> _second<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Multiply</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> _first <span class="token operator">*</span> _second<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">Operation</span> operation<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">switch</span> <span class="token punctuation">(</span>operation<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> Operation<span class="token punctuation">.</span>Sum<span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> Operation<span class="token punctuation">.</span>Subtract<span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token function">Subtract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> Operation<span class="token punctuation">.</span>Multiply<span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token function">Multiply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//just to simulate</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Program</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> opManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OperationManager</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> opManager<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>Operation<span class="token punctuation">.</span>Sum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;The result of the operation is </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">result</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we start this application, we will get the correct response for any operation we send to the <code>Execute</code> method. But this code could be much better and easier to read without <code>switch-case</code> expression. If we are going to have more than ten operations (for example), this <code>switch</code> block would be very ugly to read and maintain as well.</p><p>So, let’s change our code to make it readable, maintainable, and more object-oriented. Let’s introduce a new class <code>ExecutionManager</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecutionManager</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span>Operation<span class="token punctuation">,</span> Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> FuncExecute <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> _sum<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> _subtract<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> _multiply<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">ExecutionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        FuncExecute <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>Operation<span class="token punctuation">,</span> Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PopulateFunctions</span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> Sum<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> Subtract<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> Multiply<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _sum <span class="token operator">=</span> Sum<span class="token punctuation">;</span></span>
<span class="line">        _subtract <span class="token operator">=</span> Subtract<span class="token punctuation">;</span></span>
<span class="line">        _multiply <span class="token operator">=</span> Multiply<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrepareExecution</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        FuncExecute<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Operation<span class="token punctuation">.</span>Sum<span class="token punctuation">,</span> _sum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        FuncExecute<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Operation<span class="token punctuation">.</span>Subtract<span class="token punctuation">,</span> _subtract<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        FuncExecute<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Operation<span class="token punctuation">.</span>Multiply<span class="token punctuation">,</span> _multiply<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, we create a dictionary that will hold all the operations and all the references towards our methods (Func delegates). Now we can inject this class into the <code>OperationManager</code> class and change the <code>Execute</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationManager</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _first<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _second<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ExecutionManager</span> _executionManager<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">OperationManager</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> first<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> second<span class="token punctuation">,</span> <span class="token class-name">ExecutionManager</span> executionManager<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _first <span class="token operator">=</span> first<span class="token punctuation">;</span></span>
<span class="line">        _second <span class="token operator">=</span> second<span class="token punctuation">;</span></span>
<span class="line">        _executionManager <span class="token operator">=</span> executionManager<span class="token punctuation">;</span></span>
<span class="line">        _executionManager<span class="token punctuation">.</span><span class="token function">PopulateFunctions</span><span class="token punctuation">(</span>Sum<span class="token punctuation">,</span> Subtract<span class="token punctuation">,</span> Multiply<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        _executionManager<span class="token punctuation">.</span><span class="token function">PrepareExecution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> _first <span class="token operator">+</span> _second<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Subtract</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> _first <span class="token operator">-</span> _second<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Multiply</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> _first <span class="token operator">*</span> _second<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">Operation</span> operation<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> _executionManager<span class="token punctuation">.</span>FuncExecute<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>operation<span class="token punctuation">)</span> <span class="token punctuation">?</span></span>
<span class="line">            _executionManager<span class="token punctuation">.</span>FuncExecute<span class="token punctuation">[</span>operation<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span></span>
<span class="line">            <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, we are configuring all in the constructor of the <code>OperationManager</code> class and executing our action in the <code>Execute</code> method if it contains the required operation. At the first look, we can see how much better this code is.</p><p>Finally, we need to change the <code>Program</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Program</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> executionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExecutionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> opManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OperationManager</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> executionManager<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> opManager<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>Operation<span class="token punctuation">.</span>Sum<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;The result of the operation is </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">result</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, we have learned:</p><ul><li>How to instantiate a delegate</li><li>The way to use Func and Action delegates</li><li>How to write a better code by using delegates</li></ul><p>If you have been with us along with this entire intermediate series, you’ve hopefully mastered OOP concepts in C#.</p>`,46)),b(" TODO: add ARTICLE CARD "),a(o,i(u({title:"C# Intermediate - Delegates",desc:"In this article, you will learn about Delegates in C#. Differences between Action and Func delegates and how to write better code with delegates.",link:"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-delegates.html",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16)])}const z=m(w,[["render",C]]),F=JSON.parse('{"path":"/code-maze.com/csharp-delegates.html","title":"C# Intermediate - Delegates","lang":"en-US","frontmatter":{"lang":"en-US","title":"C# Intermediate - Delegates","description":"Article(s) > C# Intermediate - Delegates","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","code-maze.com","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C# Intermediate - Delegates\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-delegates/banner.png\\"],\\"datePublished\\":\\"2018-10-31T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marinko Spasojević\\",\\"url\\":\\"https://code-maze.com/author/marinko/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-delegates.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"C# Intermediate - Delegates"}],["meta",{"property":"og:description","content":"Article(s) > C# Intermediate - Delegates"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-delegates/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-delegates/banner.png"}],["meta",{"name":"twitter:image:alt","content":"C# Intermediate - Delegates"}],["meta",{"property":"article:author","content":"Marinko Spasojević"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2018-10-31T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > C# Intermediate - Delegates"},{"property":"og:description","content":"C# Intermediate - Delegates"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-delegates.html"}]],"prev":"/programming/cs/articles/README.md","date":"2018-10-31T00:00:00.000Z","isOriginal":false,"author":[{"name":"Marinko Spasojević","url":"https://code-maze.com/author/marinko/"}],"cover":"/assets/image/code-maze.com/csharp-delegates/banner.png"},"git":{},"readingTime":{"minutes":4.47,"words":1341},"filePathRelative":"code-maze.com/csharp-delegates.md","copyright":{"author":"Marinko Spasojević"}}');export{z as comp,F as data};
