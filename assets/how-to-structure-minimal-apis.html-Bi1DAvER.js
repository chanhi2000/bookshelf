import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as a,b as i,t as m,n as v,g as h,w as p,e as t,r as o,o as g}from"./app-BVguHYKu.js";const b={},w={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},P={href:"https://github.com/CarterCommunity/Carter",target:"_blank",rel:"noopener noreferrer"};function A(c,n){const l=o("VPCard"),e=o("router-link"),u=o("SiteInfo"),r=o("VPIcon");return g(),k("div",null,[s("h1",w,[s("a",f,[s("span",null,m(c.$frontmatter.title)+" 관련",1)])]),a(l,v(h({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",y,[s("ul",null,[s("li",null,[a(e,{to:"#how-to-create-minimal-apis"},{default:p(()=>n[0]||(n[0]=[t("How To Create Minimal APIs?")])),_:1,__:[0]})]),s("li",null,[a(e,{to:"#the-problem-with-maintaining-minimal-apis"},{default:p(()=>n[1]||(n[1]=[t("The Problem With Maintaining Minimal APIs")])),_:1,__:[1]})]),s("li",null,[a(e,{to:"#structuring-minimal-api-projects-with-modules"},{default:p(()=>n[2]||(n[2]=[t("Structuring Minimal API Projects With Modules")])),_:1,__:[2]})]),s("li",null,[a(e,{to:"#would-i-use-minimal-apis-in-a-real-project"},{default:p(()=>n[3]||(n[3]=[t("Would I Use Minimal APIs In a Real Project?")])),_:1,__:[3]})])])]),n[7]||(n[7]=s("hr",null,null,-1)),a(u,{name:"How To Structure Minimal APIs",desc:"Did you know you can turn PostgreSQL into a fully-fledged Document database? Marten is a .NET library that allows developers to use the PostgreSQL database as both a document database and a fully-featured event store. You don't need to install anything else to be able to use PostgreSQL as a document database, outside of the Nuget pacakge. Marten relies on the JSONB support available since PostgreSQL 9.4. In this week's newsletter, I want to introduce you to the basics of working with Marten and show you how easy it is to get started.",url:"https://milanjovanovic.tech/blog/how-to-structure-minimal-apis/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_015.png"}),n[8]||(n[8]=i(`<p>In this week&#39;s newsletter we are going to explore <strong>Minimal APIs</strong>, which were introduced in <strong>.NET 6</strong>.</p><p><strong>Minimal APIs</strong> were introduced to remove some of the ceremony of creating traditional APIs with controllers. To define an endpoint, you can use the new extension methods, such as <code>MapGet</code> to define a <strong>GET</strong> endpoint.</p><p>I see one big issue with <strong>Minimal APIs</strong>, and that is the lack of clear guidance around how to structure applications built with <strong>Minimal APIs</strong>.</p><p>In this newsletter, I want to offer a few solutions for that problem.</p><p>Let&#39;s dive in.</p><hr><h2 id="how-to-create-minimal-apis" tabindex="-1"><a class="header-anchor" href="#how-to-create-minimal-apis"><span>How To Create Minimal APIs?</span></a></h2><p>Let&#39;s define a simple <strong>Minimal API</strong> application with two endpoints. We&#39;re going to create one <code>GET</code> endpoint for getting a list of products. And one <code>POST</code> endpoint for saving a product to the database.</p><p>We&#39;re using the powerful <strong>DI</strong> feature that allows us to inject services as expression arguments, which you can see in the two expressions below where we are injecting the <code>AppDbContext</code>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Configure EF and other services...</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/products&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token class-name">AppDbContext</span> dbContext<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">await</span> dbContext<span class="token punctuation">.</span>Products<span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapPost</span><span class="token punctuation">(</span><span class="token string">&quot;/products&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">,</span> <span class="token class-name">AppDbContext</span> dbContext<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    dbContext<span class="token punctuation">.</span>Products<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> dbContext<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And with this we have a functioning <strong>Minimal API</strong> that we can develop further as we continue to add more endpoints.</p><hr><h2 id="the-problem-with-maintaining-minimal-apis" tabindex="-1"><a class="header-anchor" href="#the-problem-with-maintaining-minimal-apis"><span>The Problem With Maintaining Minimal APIs</span></a></h2><p>There is one potential problem with structuring our <strong>Minimal APIs</strong> like in the previous example. If we keep adding the <strong>Minimal API</strong> endpoints in the same file, our API will become hard to maintain as it grows in complexity. How can we solve the maintance problem with <strong>Minimal APIs</strong>?</p><p>One solution can be to use extension methods to encapsulate the definiton of the <strong>Minimal API</strong> endpoints.</p><p>Here&#39;s an example of that:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ProductsModule</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RegisterProductsEndpoints</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEndpointRouteBuilder</span>  endpoints<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        endpoints<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/products&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token class-name">AppDbContext</span> dbContext<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">await</span> dbContext<span class="token punctuation">.</span>Products<span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        endpoints<span class="token punctuation">.</span><span class="token function">MapPost</span><span class="token punctuation">(</span><span class="token string">&quot;/products&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">,</span> <span class="token class-name">AppDbContext</span> dbContext<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            dbContext<span class="token punctuation">.</span>Products<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">await</span> dbContext<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And then inside of <code>Program</code> we need to register the endpoints:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token function">RegisterProductsEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can see that this simplifies our <strong>Minimal API</strong> definition, and we also have our endpoints grouped by feature in one place. I think this improve the maintainability of <strong>Minimal APIs</strong>, but it comes at a cost. And that cost is having to define extension methods for each group of endpoints you want to encapsulate, and then you have to remember to call that extensions method in <code>Program</code>.</p><p>Can we do better?</p><hr><h2 id="structuring-minimal-api-projects-with-modules" tabindex="-1"><a class="header-anchor" href="#structuring-minimal-api-projects-with-modules"><span>Structuring Minimal API Projects With Modules</span></a></h2>`,23)),s("p",null,[n[5]||(n[5]=t("I want to introduce you to an interesting open source library called ")),s("a",P,[a(r,{icon:"iconfont icon-github"}),n[4]||(n[4]=s("code",null,"CarterCommunity/Carter",-1))]),n[6]||(n[6]=t(", which has a concept of modules that we can use to group endpoints."))]),n[9]||(n[9]=i(`<p>Here&#39;s how we can define our <code>ProductsModule</code> with <strong>Carter</strong>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductsModule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICarterModule</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddRoutes</span><span class="token punctuation">(</span><span class="token class-name">IEndpointRouteBuilder</span> app<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/products&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token class-name">AppDbContext</span> dbContext<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">await</span> dbContext<span class="token punctuation">.</span>Products<span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        app<span class="token punctuation">.</span><span class="token function">MapPost</span><span class="token punctuation">(</span><span class="token string">&quot;/products&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">,</span> <span class="token class-name">AppDbContext</span> dbContext<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            dbContext<span class="token punctuation">.</span>Products<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">await</span> dbContext<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This takes care of configuring our <strong>Minimal API</strong> endpoints, but we still need to tell the framework to use these endpoints. We have to slightly modify the <code>Program</code> to register the required <strong>Carter</strong> services by calling <code>AddCarter</code>, and also map our endpoints by calling <code>MapCarter</code>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Configure EF and other services...</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddCarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapCarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When we want to define additional <strong>Minimal API</strong> endpoints we just need to implement a new <code>ICarterModule</code>, and register our endpoints. <strong>Carter</strong> will automatically take care of registering the new endpoints after that.</p><hr><h2 id="would-i-use-minimal-apis-in-a-real-project" tabindex="-1"><a class="header-anchor" href="#would-i-use-minimal-apis-in-a-real-project"><span>Would I Use Minimal APIs In a Real Project?</span></a></h2><p>I think <strong>Minimal APIs</strong> have evolved nicely since they were first introduced in <strong>.NET 6</strong>. I would be careful with using them in very large applications, but I&#39;m definitely going to explore options for using them on smaller projects.</p><p>A good use case can be for building a microservice that has a limited number of endpoints.</p>`,9))])}const C=d(b,[["render",A]]),x=JSON.parse('{"path":"/milanjovanovic.tech/how-to-structure-minimal-apis.html","title":"How To Structure Minimal APIs","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How To Structure Minimal APIs","description":"Article(s) > How To Structure Minimal APIs","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How To Structure Minimal APIs\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_015.png\\"],\\"datePublished\\":\\"2022-12-10T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-to-structure-minimal-apis.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How To Structure Minimal APIs"}],["meta",{"property":"og:description","content":"Article(s) > How To Structure Minimal APIs"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_015.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_015.png"}],["meta",{"name":"twitter:image:alt","content":"How To Structure Minimal APIs"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-12-10T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How To Structure Minimal APIs"},{"property":"og:description","content":"How To Structure Minimal APIs"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-to-structure-minimal-apis.html"}]],"prev":"/programming/cs/articles/README.md","date":"2022-12-10T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_015.png"},"git":{},"readingTime":{"minutes":2.99,"words":897},"filePathRelative":"milanjovanovic.tech/how-to-structure-minimal-apis.md","copyright":{"author":"Milan Jovanović"}}');export{C as comp,x as data};
