import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,d as e,f as a,b as p,t as d,n as m,g,e as n,r as s,o as h}from"./app-BVguHYKu.js";const k={},f={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"};function w(l,t){const c=s("VPCard"),i=s("SiteInfo"),o=s("VPIcon");return h(),u("div",null,[e("h1",f,[e("a",b,[e("span",null,d(l.$frontmatter.title)+" ê´€ë ¨",1)])]),a(c,m(g({title:"How to create a custom toast component with React",desc:"Create a toast component in your React app that is capable of displaying multiple notifications, customizing their position, and deleting them.",link:"/blog.logrocket.com/how-to-create-custom-toast-component-react/README.md",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16),t[16]||(t[16]=e("nav",{class:"table-of-contents"},[e("ul")],-1)),t[17]||(t[17]=e("hr",null,null,-1)),a(i,{name:"How to create a custom toast component with React",desc:"Create a toast component in your React app that is capable of displaying multiple notifications, customizing their position, and deleting them.",url:"https://blog.logrocket.com/how-to-create-custom-toast-component-react#setting-up-react-application",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/how-to-create-custom-toast-component-react/banner.png"}),t[18]||(t[18]=p(`<p>To demonstrate how to create custom toast components, we must first create a React application. Iâ€™ll assume that <a href="https://nodejs.org/en/" target="_blank" rel="noopener noreferrer">Node.js</a> is already installed on your computer. Node.js comes with npm, and weâ€™ll use Vite to build our React app.</p><p>First, open a terminal, navigate to the location where you want your app folder to be, and type the following command there:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line">npm create vite</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Next, simply follow the Vite instructions: name your project folder, choose React as the framework, and make sure to pick JavaScript as the variant. After the installation finishes, just CD into the project folder and install the required dependencies by typing <code>npm install</code> or <code>npm i</code>:</p><figure><img src="https://blog.logrocket.com/wp-content/uploads/2020/03/creating-react-app-vite.jpeg" alt="Creating A React App With Vite" tabindex="0" loading="lazy"><figcaption>Creating A React App With Vite</figcaption></figure><p>You can name the project whatever you want. We wonâ€™t install any other module inside the project; weâ€™ll simply use the default modules. The default folder structure is as follows:</p><figure><img src="https://blog.logrocket.com/wp-content/uploads/2020/03/default-react-folder-structure.png" alt="Default React Folder Structure" tabindex="0" loading="lazy"><figcaption>Default React Folder Structure</figcaption></figure>`,7)),e("p",null,[t[0]||(t[0]=n("The ")),a(o,{icon:"fas fa-folder-open"}),t[1]||(t[1]=e("code",null,"src",-1)),t[2]||(t[2]=n(" folder is where weâ€™ll do most of our work. Inside ")),a(o,{icon:"fas fa-folder-open"}),t[3]||(t[3]=e("code",null,"src",-1)),t[4]||(t[4]=n(", create a new folder called ")),t[5]||(t[5]=e("code",null,"components",-1)),t[6]||(t[6]=n(". Weâ€™ll add our toast and button components to this folder."))]),t[19]||(t[19]=p(`<p>In React, you can either use class components, which requires you to extend a <code>React.Component</code> and create a render function that returns a React element, or functional components, which are plain JavaScript functions that accept props and return React elements. We will use functional components throughout this tutorial, which is also recommended by the React team.</p><p>Inside the App.js component, you should remove or adjust the existing contents of the JSX according to the projectâ€™s needs. The parent element class should be changed to <code>app</code> and include a heading that describes our project. Additionally, weâ€™ll change the function to an arrow function. This is just my personal preference; feel free to use the default function if you prefer:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&#39;./App.css&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app-title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">React Toast Component</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),e("p",null,[t[7]||(t[7]=n("Next, empty the contents of ")),a(o,{icon:"fa-brands fa-css3-alt"}),t[8]||(t[8]=e("code",null,"App.css",-1)),t[9]||(t[9]=n(" and leave it blank for now. Similarly, clear the contents of ")),a(o,{icon:"fa-brands fa-css3-alt"}),t[10]||(t[10]=e("code",null,"index.css",-1)),t[11]||(t[11]=n(" and keep it empty. We will gradually incorporate these styles as we make progress. ")),a(o,{icon:"fa-brands fa-css3-alt"}),t[12]||(t[12]=e("code",null,"App.css",-1)),t[13]||(t[13]=n(" will contain styles specific to the app layout, while ")),a(o,{icon:"fa-brands fa-css3-alt"}),t[14]||(t[14]=e("code",null,"index.css",-1)),t[15]||(t[15]=n(" will serve as the global CSS reset."))])])}const j=r(k,[["render",w]]),R=JSON.parse('{"path":"/blog.logrocket.com/how-to-create-custom-toast-component-react/setting-up-our-react-application.html","title":"Setting up our React application","lang":"en-US","frontmatter":{"lang":"en-US","title":"Setting up our React application","description":"Article(s) > (1/9) How to create a custom toast component with React","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Setting up our React application\\",\\"image\\":[\\"https://blog.logrocket.com/wp-content/uploads/2020/03/creating-react-app-vite.jpeg\\",\\"https://blog.logrocket.com/wp-content/uploads/2020/03/default-react-folder-structure.png\\"],\\"datePublished\\":\\"2023-06-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Uzochukwu Eddie Odozi\\",\\"url\\":\\"https://blog.logrocket.com/author/uzochukwuodozi/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/how-to-create-custom-toast-component-react/setting-up-our-react-application.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"Setting up our React application"}],["meta",{"property":"og:description","content":"Article(s) > (1/9) How to create a custom toast component with React"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/how-to-create-custom-toast-component-react/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/how-to-create-custom-toast-component-react/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Setting up our React application"}],["meta",{"property":"article:author","content":"Uzochukwu Eddie Odozi"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-06-21T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > (1/9) How to create a custom toast component with React"},{"property":"og:description","content":"Setting up our React application"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/how-to-create-custom-toast-component-react/setting-up-our-react-application.html"}]],"date":"2023-06-21T00:00:00.000Z","isOriginal":false,"author":[{"name":"Uzochukwu Eddie Odozi","url":"https://blog.logrocket.com/author/uzochukwuodozi/"}],"cover":"/assets/image/blog.logrocket.com/how-to-create-custom-toast-component-react/banner.png"},"git":{},"readingTime":{"minutes":2.18,"words":653},"filePathRelative":"blog.logrocket.com/how-to-create-custom-toast-component-react/setting-up-our-react-application.md","copyright":{"author":"Uzochukwu Eddie Odozi"}}');export{j as comp,R as data};
