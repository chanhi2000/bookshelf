import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as p,b as d,t as m,n as v,g,w as t,e as a,r as o,o as b}from"./app-BVguHYKu.js";const h={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"};function j(c,n){const l=o("VPCard"),e=o("router-link"),i=o("SiteInfo"),u=o("RouteLink");return b(),k("div",null,[s("h1",y,[s("a",w,[s("span",null,m(c.$frontmatter.title)+" 관련",1)])]),p(l,v(g({title:"Java > Article(s)",desc:"Article(s)",link:"/programming/java/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",f,[s("ul",null,[s("li",null,[p(e,{to:"#_1-early-out"},{default:t(()=>n[0]||(n[0]=[a("1. Early Out")])),_:1,__:[0]})]),s("li",null,[p(e,{to:"#_2-for-each-사용하기"},{default:t(()=>n[1]||(n[1]=[a("2. For-each 사용하기")])),_:1,__:[1]})]),s("li",null,[p(e,{to:"#_3-변수는-사용할-때-선언하기"},{default:t(()=>n[2]||(n[2]=[a("3. 변수는 사용할 때 선언하기")])),_:1,__:[2]})]),s("li",null,[p(e,{to:"#_4-null-대신-optional-사용하기"},{default:t(()=>n[3]||(n[3]=[a("4. Null 대신 Optional 사용하기")])),_:1,__:[3]})]),s("li",null,[p(e,{to:"#_5-인터페이스-사용하기"},{default:t(()=>n[4]||(n[4]=[a("5. 인터페이스 사용하기")])),_:1,__:[4]})]),s("li",null,[p(e,{to:"#마치며"},{default:t(()=>n[5]||(n[5]=[a("마치며")])),_:1,__:[5]})])])]),n[9]||(n[9]=s("hr",null,null,-1)),p(i,{name:"자바 가독성 높이는 5가지 팁 | 요즘IT",desc:"개발자를 준비하는 많은 분들이 자기 PR 목적으로 코드를 공유합니다. 그러나 가독성이 좋지 않은 코드를 공유한다면, 오히려 역효과가 날 수 있습니다. 코드를 통해 여러분이 고민한 내용을 온전히 전달하기 위해서는 가독성을 높이는 것이 중요합니다. 이번 글에서는 코드 스타일 외에 가독성 높은 코드를 작성할 수 있는 몇 가지 방법을 알아보겠습니다. 저 또한 개인 블로그에 코드를 공유할 때 항상 신경 쓰는 내용인 만큼, 이번 글을 통해 앞으로 코드를 공유할 때 한 번씩 적용해 보면서 점점 더 좋은 코드를 작성할 수 있으면 좋겠습니다.",url:"https://yozm.wishket.com/magazine/detail/2682/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/2682/tracy-adams-TEemXOpR3cQ-unsplash.jpg"}),n[10]||(n[10]=s("p",null,"개발자를 준비하는 많은 분들이 자기 PR 목적으로 코드를 공유합니다. 깃헙이나 블로그에 직접 작성한 코드를 올려놓으면, 본인에 대한 더 많은 정보를 제공할 수 있습니다. 그러나 가독성이 좋지 않은 코드를 공유한다면, 오히려 역효과가 날 수 있습니다.",-1)),n[11]||(n[11]=s("p",null,[a("생각보다 흔하게 일어나는 일인데요. 그 이유 중 하나는 바로 "),s("strong",null,"코드 내용"),a("에만 집중하기 때문입니다. 여러분은 어떤 기능을 구현하기 위해 가장 효율적인 방법은 무엇인지, 어떻게 하면 확장성 있게 구현할 수 있을까에 대해 고민할 것입니다. 이러한 것들을 고민하다 보면 점점 구조가 복잡해지고, 읽기 어려운 코드가 됩니다.")],-1)),n[12]||(n[12]=s("figure",null,[s("img",{src:"https://yozm.wishket.com/media/news/2682/image1.jpg",alt:"Readability <출처: Gemini 이미지 생성>",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Readability <출처: Gemini 이미지 생성>")],-1)),s("p",null,[n[7]||(n[7]=a("코드를 통해 여러분이 고민한 내용을 온전히 전달하기 위해서는 가독성을 높이는 것이 중요합니다. 앞서 요즘IT에 ")),p(u,{to:"/yozm.wishket.com/2499.html"},{default:t(()=>n[6]||(n[6]=[a("코드 스타일의 중요성")])),_:1,__:[6]}),n[8]||(n[8]=a("에 관한 글을 발행한 적이 있습니다. 인덴트, 변수와 함수 이름과 같은 코드 스타일은 코드의 첫인상으로, 이를 제대로 지키지 않으면 아예 코드를 읽지 않을 수도 있습니다."))]),n[13]||(n[13]=d(`<p>코드 스타일은 가독성을 높이는 첫 단계입니다. 이번 글에서는 코드 스타일 외에 가독성 높은 코드를 작성할 수 있는 몇 가지 방법을 알아보겠습니다. 저 또한 개인 블로그에 코드를 공유할 때 항상 신경 쓰는 내용인 만큼, 이번 글을 통해 앞으로 코드를 공유할 때 한 번씩 적용해 보면서 점점 더 좋은 코드를 작성할 수 있으면 좋겠습니다.</p><hr><h2 id="_1-early-out" tabindex="-1"><a class="header-anchor" href="#_1-early-out"><span>1. Early Out</span></a></h2><p>Early Out은 메서드의 가독성을 높이는 대표적인 방법입니다. 예시로 사용자의 주문을 처리하는 다음의 코드를 살펴봅시다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>order <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getPaymentStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">PaymentStatus</span><span class="token punctuation">.</span><span class="token constant">PAID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getShippingAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 주문 처리 로직</span></span>
<span class="line">                <span class="token comment">// ...</span></span>
<span class="line">              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OrderException</span><span class="token punctuation">(</span><span class="token string">&quot;주문 상품이 없습니다.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">              <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OrderException</span><span class="token punctuation">(</span><span class="token string">&quot;배송 주소가 없습니다.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OrderException</span><span class="token punctuation">(</span><span class="token string">&quot;결제가 완료되지 않았습니다.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OrderException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 주문 예외 처리 로직</span></span>
<span class="line">          <span class="token comment">// ...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 기타 예외 처리 로직</span></span>
<span class="line">          <span class="token comment">// ...</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OrderException</span><span class="token punctuation">(</span><span class="token string">&quot;주문 정보가 유효하지 않습니다.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OrderException</span><span class="token punctuation">(</span><span class="token string">&quot;주문 정보가 없습니다.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이 코드는 주문이 정상적인지를 확인하고, 정상적일 경우 처리합니다. 로직을 생각해 보면 주문 정보가 있고, 유효하고, 결제가 완료되었고, 배송 주소가 있고, 주문한 상품이 있을 때 주문을 처리해야 하니 틀린 로직이 아닙니다. 하지만 가독성이 매우 떨어집니다.</p><p>가장 먼저 등장하는 조건인 order != null에 대한 처리가 메서드 가장 아래에 등장합니다. 마찬가지로 다른 조건들 또한 위에 있는 조건일수록, 아래쪽에서 대응하고 있습니다. 이처럼 조건문과 그에 대한 처리가 멀리 떨어져 있는 경우, 가독성을 심하게 해칠 수 있습니다.</p><p>이런 문제는 <strong>조건을 반전시킴으로써 해결</strong>할 수 있습니다. 다음과 같이 예외 경우에 대한 처리를 우선 검사하고, <strong>일찍 메서드를 종료</strong>하는 것입니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>order <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OrderException</span><span class="token punctuation">(</span><span class="token string">&quot;주문 정보가 없습니다.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>order<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OrderException</span><span class="token punctuation">(</span><span class="token string">&quot;주문 정보가 유효하지 않습니다.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getPaymentStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">PaymentStatus</span><span class="token punctuation">.</span><span class="token constant">PAID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OrderException</span><span class="token punctuation">(</span><span class="token string">&quot;결제가 완료되지 않았습니다.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getShippingAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OrderException</span><span class="token punctuation">(</span><span class="token string">&quot;배송 주소가 없습니다.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OrderException</span><span class="token punctuation">(</span><span class="token string">&quot;주문 상품이 없습니다.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 주문 처리 로직</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 코드를 수정함으로써 같은 로직을 유지하면서, 예외 처리에 대한 가독성을 높일 수 있습니다. 기존에 있던 인덴트 지옥이 해결되는 것도 큰 장점입니다.</p><hr><h2 id="_2-for-each-사용하기" tabindex="-1"><a class="header-anchor" href="#_2-for-each-사용하기"><span>2. For-each 사용하기</span></a></h2><p>자바는 for-each문을 통한 반복을 지원합니다. for-each는 인덱스를 관리하며 원소를 순회하는 일반적인 for문과 달리 배열이나 컬렉션의 <strong>각 원소에 직접 접근</strong>하여 안전하게 작업을 수행할 수 있습니다.</p><p>예를 들어, 장바구니에 담은 상품들의 총 가격을 구하는 예시 코드를 살펴봅시다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> products <span class="token operator">=</span> <span class="token comment">/* 장바구니의 상품 리스트 */</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> totalPrice <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> product <span class="token operator">:</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  totalPrice <span class="token operator">+=</span> product<span class="token punctuation">.</span><span class="token function">getQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> product<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이처럼 for-each문을 사용하면 모든 원소들에 대해 원하는 작업을 직관적으로 수행할 수 있게 됩니다. 인덱스를 직접 관리하지 않는 것에는 여러 장점이 있습니다.</p><p>우선 <strong>코드가 간결해집니다</strong>. 일반적인 for문은 다음 코드와 같이 인덱스를 관리하고, 다시 이 인덱스를 통해 원소에 접근하는 과정이 필요합니다. 인덱스와 관련된 부분을 생략함으로써 코드가 깔끔해지고, 가독성이 좋아집니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> products <span class="token operator">=</span> <span class="token comment">/* 장바구니의 상품 리스트 */</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> totalPrice <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> products<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  totalPrice <span class="token operator">+=</span> products<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> products<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>또한 <strong>off-by-one 오류를 방지</strong>할 수 있습니다. 이 오류는 배열의 인덱스를 직접 다룰 때 자주 발생하는 논리 오류 중 하나로, 경곗값을 잘못 처리하여 의도한 값보다 1만큼 크거나 작은 값을 사용하게 되는 오류입니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> products<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>for-each문은 실제로 존재하는 원소들에 대해서 순회하기 때문에 이러한 오류로부터 안전합니다.</p><p>물론 모든 반복을 for-each로 대체할 수 있는 것은 아닙니다. 인덱스의 정보가 필요할 때, 짝수 번째와 같이 모든 원소가 아닌 특정 원소에 대해서만 작업을 수행하고 싶을 때, 역순으로 순회하고자 할 때 등 for-each로는 해결하기 힘든 반복 작업이 있을 수 있습니다. 이러한 특수한 상황에서는 ranged based for문을 쓰되, 순방향으로 모든 원소에 대해 작업을 반복할 때는 for-each문을 사용해 보세요.</p><hr><h2 id="_3-변수는-사용할-때-선언하기" tabindex="-1"><a class="header-anchor" href="#_3-변수는-사용할-때-선언하기"><span>3. 변수는 사용할 때 선언하기</span></a></h2><p>옛날 버전의 C언어를 사용하는 분들은 변수를 함수 가장 위에 몰아서 선언하는 경우가 있습니다. 자바는 변수를 메서드 가장 앞에 몰아서 선언할 필요가 없습니다. 변수를 몰아서 선언하는 것은 변수가 어떻게 사용될지, 컨텍스트가 없는 상황에서 선언해 놓는 것이기 때문에 오히려 가독성을 저하시킵니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 좋지 않은 예시</span></span>
<span class="line"><span class="token keyword">int</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// ... 많은 코드 ...</span></span>
<span class="line">result <span class="token operator">=</span> <span class="token function">calculateSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 좋은 예시</span></span>
<span class="line"><span class="token comment">// ... 많은 코드 ...</span></span>
<span class="line"><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">calculateSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이처럼 변수를 <strong>실제로 사용하는 곳 근처에 선언</strong>하는 것은 코드를 읽을 때 위아래로 훑어봐야 하는 번거로움을 줄이고, 변수의 목적을 쉽게 파악할 수 있게 해줍니다.</p><hr><h2 id="_4-null-대신-optional-사용하기" tabindex="-1"><a class="header-anchor" href="#_4-null-대신-optional-사용하기"><span>4. Null 대신 <code>Optional</code> 사용하기</span></a></h2><p>현대의 많은 언어들은 null-safety를 강조합니다. 자바에서는 <code>null</code>을 안전하고 명시적으로 관리하여, <code>NullPointerException</code>을 방지하기 위한 안전한 방법이 마땅치 않습니다. <code>Optional</code>은 이를 어느 정도 해결할 수 있는 방법이 될 수 있습니다.</p><p>예를 들어, 다음과 같은 코드가 있습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">int</span> price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token function">getProduct</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  price <span class="token operator">=</span> product<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Optional의 사용이 표준화되어 있지 않은 코드라면, getProduct()가 반환한 값이 null인지 여부를 체크해 주어야 합니다. Optional을 사용할 경우, <strong>해당 객체의 값이 없을 수도 있다는 것을 명시적으로 표현</strong>할 수 있습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">int</span> price <span class="token operator">=</span> <span class="token function">getProduct</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Product</span><span class="token operator">::</span><span class="token function">getPrice</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">  아래와 동일한 코드</span>
<span class="line">  Optional&lt;Product&gt; product = getProduct(id);</span>
<span class="line">  int price = product.map(Product::getPrice).orElse(0);</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Optional</code>은 다음과 같은 상황에서 사용하면 유용합니다.</p><ol><li>메서드의 반환 값이 <code>null</code>일 수 있는 경우</li><li><code>null</code> 체크가 빈번한 경우</li></ol><p>위 경우 <code>Optional</code>을 활용하면 <code>NullPointerException</code>을 예방할 수 있습니다. 또한 <code>Optional</code> 클래스가 제공하는 <code>map()</code>, <code>filter()</code>, <code>orElse()</code>와 같은 메서드를 통해 함수형 스타일로 코드를 더욱 직관적으로 작성할 수 있습니다.</p><hr><h2 id="_5-인터페이스-사용하기" tabindex="-1"><a class="header-anchor" href="#_5-인터페이스-사용하기"><span>5. 인터페이스 사용하기</span></a></h2><p>자바에서 제공하는 많은 컬렉션들은 구현체와 인터페이스로 구분되어 있습니다. 예를 들어, <code>List</code> 인터페이스는 이를 구현하는 <code>ArrayList</code>, <code>LinkedList</code> 등의 클래스가 있고, Set 인터페이스는 <code>HashSet</code>, <code>TreeSet</code> 등이 구현합니다.</p><p>많은 경우, 구체적인 클래스 대신 인터페이스 자료형을 사용하면 코드의 가독성을 높일 수 있으며, 코드를 더욱 <strong>유연하고 확장성 있게</strong> 만들어 줍니다.</p><p>예를 들어, 전체 상품 리스트를 카테고리별로 분류하는 메서드 categorize()가 다음과 같이 정의되어 있습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Category</span><span class="token punctuation">,</span> <span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">categorize</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> products<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Category</span><span class="token punctuation">,</span> <span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> product <span class="token operator">:</span> products<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span>category<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span>category<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span>category<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위 코드는 <code>HashMap</code>과 <code>ArrayList</code> 등 인터페이스를 구현하는 클래스에 의존합니다. 이렇게 작성한 코드는 <code>TreeMap</code>, <code>LinkedList</code>처럼 같은 인터페이스를 다른 형태로 구현한 클래스에 대해서는 작업을 수행할 수 없습니다.</p><p>메서드 내용은 <code>Map</code>과 <code>List</code> 인터페이스에서 제공하는 작업들로 충분하므로, 굳이 구체적인 클래스를 명시하여 역할을 제한할 필요가 없습니다. 이를 반영하여 수정한 코드는 다음과 같습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Category</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">categorize</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> products<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Category</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> product <span class="token operator">:</span> products<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span>category<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span>category<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span>category<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>실제 객체를 생성할 때는 구현체가 있어야 하므로 클래스를 이용해 생성하지만, 변수나 메서드의 반환형은 인터페이스를 사용함을 확인할 수 있습니다.</p><p>다만 인터페이스를 사용할 땐 주의할 점이 있습니다. 만약 구현체별로 성능이나 동작 차이가 발생하고, 이것이 메서드를 수행하는 데에 있어서 중요한 요소라면 인터페이스보다는 클래스를 사용하는 것이 더 나은 선택일 수 있습니다.</p><p>리스트에 대해 버블 소트를 수행하는 다음의 메서드를 살펴봅시다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">int</span> n <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&gt;</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">int</span> temp <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위 버블 정렬은 <code>List</code> 인터페이스에서 제공하는 <code>get()</code> 메서드를 이용해 작성되었습니다. List에서 제공하는 것이니 인터페이스를 사용하는 것이 맞을까요?</p><p>List를 구현하는 가장 대표적인 두 클래스인 ArrayList와 <code>LinkedList</code>를 비교해 보면, random-access 동작을 수행하는 get() 메서드가 소요하는 시간에서 큰 차이가 발생합니다. 배열 기반인 <code>ArrayList</code>는 상수 시간인 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mn>1</mn><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\\left(1\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span> 만에 수행되는 데 반해, 링크드 리스트 기반인 <code>LinkedList</code>는 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>N</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\\left(N\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span> 의 시간 복잡도를 가지게 됩니다.</p><p>따라서 위 <code>bubbleSort()</code> 메서드는 입력으로 <code>ArrayList</code>를 넘겨주면 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\\left(N^{2}\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span> 의 시간 복잡도를, <code>LinkedList</code>를 넘겨주면 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><msup><mi>N</mi><mn>3</mn></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\\left(N^{3}\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span> 의 시간 복잡도를 가지게 됩니다.</p><p>메서드를 호출할 때는 메서드의 구체적인 동작 방식을 모르므로, 이와 같은 사실을 알기 힘듭니다. 이처럼 메서드 외부에서 전달해 주는 구현체에 따라 메서드의 동작이 달라질 경우, 구현체를 명시하여 원하는 동작만 수행하도록 제한하는 것도 고려할 만한 방법 중 하나입니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">int</span> n <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&gt;</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">int</span> temp <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>지금까지 자바 가독성을 높이는 5가지 팁을 살펴봤습니다. 사실 좋은 코드를 작성하는 것은 하루아침에 되는 것이 아닙니다. 코드를 한 줄 한 줄 적을 때마다 기능을 구현할 수 있는 여러 방법을 생각하고, 그중 하나를 충분한 근거를 통해 선택하는 과정을 반복함으로써 차근차근 쌓아갈 수 있습니다.</p><p>이번 글에서 소개한 가독성 높이는 팁이 사소할 수 있지만, 그만큼 몇 번만 신경 써서 코드를 작성하면 충분히 습관 들일 수 있는 내용입니다. 이렇게 작은 내용부터 시작해 체득한다면, 점점 더 가독성을 높여 좋은 코드를 작성할 수 있을 것이라 생각합니다.</p>`,59))])}const P=r(h,[["render",j]]),z=JSON.parse('{"path":"/yozm.wishket.com/2682.html","title":"자바 가독성 높이는 5가지 팁","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"자바 가독성 높이는 5가지 팁","description":"Article(s) > 자바 가독성 높이는 5가지 팁","icon":"fa-brands fa-java","category":["Java","Article(s)"],"tag":["blog","yozm.wishket.com","java","java-8","readability"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"자바 가독성 높이는 5가지 팁\\",\\"image\\":[\\"https://yozm.wishket.com/media/news/2682/image1.jpg\\"],\\"datePublished\\":\\"2024-07-22T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2682.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"자바 가독성 높이는 5가지 팁"}],["meta",{"property":"og:description","content":"Article(s) > 자바 가독성 높이는 5가지 팁"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/2682/tracy-adams-TEemXOpR3cQ-unsplash.jpg"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/2682/tracy-adams-TEemXOpR3cQ-unsplash.jpg"}],["meta",{"name":"twitter:image:alt","content":"자바 가독성 높이는 5가지 팁"}],["meta",{"property":"article:tag","content":"readability"}],["meta",{"property":"article:tag","content":"java-8"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-07-22T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 자바 가독성 높이는 5가지 팁"},{"property":"og:description","content":"자바 가독성 높이는 5가지 팁"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2682.html"}]],"prev":"/programming/java/articles/README.md","date":"2024-07-22T00:00:00.000Z","isOriginal":false,"cover":"https://yozm.wishket.com/media/news/2682/tracy-adams-TEemXOpR3cQ-unsplash.jpg"},"git":{},"readingTime":{"minutes":2.19,"words":658},"filePathRelative":"yozm.wishket.com/2682.md"}');export{P as comp,z as data};
