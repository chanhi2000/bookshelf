import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as a,a as p,b as i,t as v,n as u,g as r,w as e,r as c,o as f,e as o}from"./app-BVguHYKu.js";const h={},b={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"};function j(d,n){const l=c("VPCard"),t=c("router-link"),k=c("SiteInfo");return f(),g("div",null,[s("h1",b,[s("a",y,[s("span",null,v(d.$frontmatter.title)+" 관련",1)])]),a(l,u(r({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",w,[s("ul",null,[s("li",null,[a(t,{to:"#자바스크립트의-타입-시스템-이해하기"},{default:e(()=>n[0]||(n[0]=[o("자바스크립트의 타입 시스템 이해하기")])),_:1,__:[0]})]),s("li",null,[a(t,{to:"#암묵적-타입-변환"},{default:e(()=>n[1]||(n[1]=[o("암묵적 타입 변환")])),_:1,__:[1]}),s("ul",null,[s("li",null,[a(t,{to:"#_1-문자열-숫자-문자열"},{default:e(()=>n[2]||(n[2]=[o("1. 문자열 + 숫자 = 문자열?")])),_:1,__:[2]})]),s("li",null,[a(t,{to:"#_2-boolean-변환과-truthy-falsy"},{default:e(()=>n[3]||(n[3]=[o("2. boolean 변환과 truthy/falsy")])),_:1,__:[3]})]),s("li",null,[a(t,{to:"#_3-객체-원시값-변환"},{default:e(()=>n[4]||(n[4]=[o("3. 객체 -> 원시값 변환")])),_:1,__:[4]})])])]),s("li",null,[a(t,{to:"#명시적-타입-변환"},{default:e(()=>n[5]||(n[5]=[o("명시적 타입 변환")])),_:1,__:[5]})]),s("li",null,[a(t,{to:"#동등-연산자-vs-일치-연산자"},{default:e(()=>n[6]||(n[6]=[o("동등 연산자(==) vs 일치 연산자(===)")])),_:1,__:[6]})]),s("li",null,[a(t,{to:"#실전-예제와-예외-케이스들"},{default:e(()=>n[7]||(n[7]=[o("실전 예제와 예외 케이스들")])),_:1,__:[7]})]),s("li",null,[a(t,{to:"#마치며"},{default:e(()=>n[8]||(n[8]=[o("마치며")])),_:1,__:[8]})])])]),n[9]||(n[9]=s("hr",null,null,-1)),a(k,{name:"자바스크립트 ‘타입 변환’ 완전 정복",desc:"자바스크립트를 사용하다 보면 “0” == false, null == undefined 같은 비교에서 예상과는 전혀 다른 결과를 마주하게 됩니다. 이런 결과를 처음 본 개발자는 “왜 이게 true지?”라는 의문을 품게 되고, 때로는 디버깅에 긴 시간을 허비하기도 합니다. 이러한 현상은 바로 자바스크립트의 타입 변환(Type Coercion) 메커니즘에서 비롯됩니다. 이번 글에서는 자바스크립트의 타입 시스템과 변환 방식, 비교 연산자에서 벌어지는 암묵적 타입 변환의 정체, 그리고 예외적인 케이스까지 실무적으로 꼭 알아야 할 내용을 정리해 보겠습니다.",url:"https://yozm.wishket.com/magazine/detail/3332/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/3332/dfaefef.jpg"}),n[10]||(n[10]=s("p",null,"자바스크립트를 사용하다 보면, “0” == false, null == undefined 같은 비교에서 예상과는 전혀 다른 결과를 마주하게 됩니다. 이런 결과를 처음 본 개발자는 “왜 이게 true지?”라는 의문을 품게 되고, 때로는 디버깅에 긴 시간을 허비하기도 합니다. 이러한 현상은 바로 자바스크립트의 타입 변환(Type Coercion) 메커니즘에서 비롯됩니다.",-1)),n[11]||(n[11]=s("p",null,"자바스크립트는 동적 타입 언어로, 변수에 저장된 값의 타입을 상황에 따라 자동으로 바꾸며 연산을 수행합니다. 이 동작은 명확한 이해 없이 사용할 경우 큰 혼란과 오류로 이어질 수 있습니다. 특히 조건문, 비교 연산자, 연산자의 피연산자에 따라 자동 변환이 일어날 때 실무에서의 실수도 자주 발생합니다.",-1)),n[12]||(n[12]=s("p",null,"이번 글에서는 자바스크립트의 타입 시스템과 변환 방식, 비교 연산자에서 벌어지는 암묵적 타입 변환의 정체, 그리고 예외적인 케이스까지 실무적으로 꼭 알아야 할 내용을 정리해 보겠습니다.",-1)),n[13]||(n[13]=s("figure",null,[s("img",{src:"https://wishket.com/media/news/3332/ab__4_.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),p(" TODO: 테이블 화 "),n[14]||(n[14]=i('<hr><h2 id="자바스크립트의-타입-시스템-이해하기" tabindex="-1"><a class="header-anchor" href="#자바스크립트의-타입-시스템-이해하기"><span>자바스크립트의 타입 시스템 이해하기</span></a></h2><p>자바스크립트는 값을 크게 두 가지 범주로 나눕니다. 바로 ‘원시 타입(Primitive)’과 ‘참조 타입(Object)’입니다. 원시 타입에는 <code>string</code>, <code>number</code>, <code>boolean</code>, <code>null</code>, <code>undefined</code>, <code>symbol</code>, <code>bigint</code> 등이 있고, 나머지는 모두 객체입니다.</p><figure><img src="https://wishket.com/media/news/3332/ab__3_.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이 구분은 단순한 분류 이상의 의미를 갖습니다. 특히 객체가 산술 연산에 참여하거나 비교 연산자로 비교될 때는 ToPrimitive 알고리즘을 통해 내부적으로 원시값을 바꾸는 과정이 발생합니다. 이 변환 과정은 힌트(hint)에 따라 다르게 작동하며, 일반 객체는 <code>valueOf()</code> -&gt; <code>toString()</code> 순서로 평가되고, 날짜 객체(Date)는 그 반대 순서를 따릅니다.</p><figure><img src="https://wishket.com/media/news/3332/image4.png" alt="출처: Amandeep Singh from dev.to" tabindex="0" loading="lazy"><figcaption>출처: Amandeep Singh from dev.to</figcaption></figure>',6)),p(" TODO: mermaid화 "),n[15]||(n[15]=i(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// &quot;number&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &quot;string&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// &quot;boolean&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// &quot;object&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// &quot;object&quot; (버그이지만 유지됨)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// &quot;undefined&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// &quot;symbol&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위의 코드에서 null이 객체로 나오는 것은 JS 초기의 버그지만, 표준으로 굳어졌기 때문에, 타입 확인 시 주의가 필요합니다.</p><hr><h2 id="암묵적-타입-변환" tabindex="-1"><a class="header-anchor" href="#암묵적-타입-변환"><span>암묵적 타입 변환</span></a></h2><p>암묵적 타입 변환은 자바스크립트에서 개발자가 명시적으로 요청하지 않아도 자동으로 타입이 변환되는 현상을 말합니다. 자주 발생하는 상황은 연산자 사용 시, 조건문 평가 시, 또는 비교 연산자 사용 시입니다. 자동 변환은 편리할 수 있지만, 예상과는 다른 결과를 만들어내기 때문에 반드시 그 작동 방식을 이해하고 있어야 합니다.</p><h3 id="_1-문자열-숫자-문자열" tabindex="-1"><a class="header-anchor" href="#_1-문자열-숫자-문자열"><span>1. 문자열 + 숫자 = 문자열?</span></a></h3><p>자바스크립트의 + 연산자는 두 피연산자 중 하나라도 문자열이면 나머지도 문자열로 변환한 후 문자열 결합을 수행합니다. 이는 수치 연산이 아닌 문자열 연결로 처리되기 때문입니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;51&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;15&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>반대로 -, *, / 등의 연산자는 피연산자를 숫자로 변환한 후 계산을 수행합니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;10&quot;</span> <span class="token operator">*</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>이처럼 +와 나머지 연산자의 작동 방식 차이를 알고 있지 않으면, 숫자 계산을 하려다 엉뚱하게 문자열이 만들어지는 일이 자주 발생합니다.</p><h3 id="_2-boolean-변환과-truthy-falsy" tabindex="-1"><a class="header-anchor" href="#_2-boolean-변환과-truthy-falsy"><span>2. <code>boolean</code> 변환과 truthy/falsy</span></a></h3><p>조건문이나 if, while, 삼항 연산자 등에서는 값이 자동으로 boolean으로 변환됩니다. 이때 JS는 일부 값을 <code>false</code>로 간주하며, 이를 falsy라고 부릅니다. 나머지 값은 모두 truthy입니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;truthy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;falsy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Falsy로 평가되는 값은 false, 0, “”, null, undefined, NaN 등이 있으며, 그 외의 값은 모두 truthy로 간주됩니다. 실무에서 자주 사용되는 패턴 중 하나는 아래와 같은 조건문인데, 이 역시 내부적으로 boolean 타입으로 자동 변환됩니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">redirectToLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이러한 암묵적 변환을 잘 이해하면 간결한 코드 작성이 가능하지만, 반대로 예외 처리나 빈 값 판단 로직에서 예기치 않은 결과를 방지하기 위해서는 항상 truthy/falsy 기준을 숙지해 두는 것이 좋습니다.</p><h3 id="_3-객체-원시값-변환" tabindex="-1"><a class="header-anchor" href="#_3-객체-원시값-변환"><span>3. 객체 -&gt; 원시값 변환</span></a></h3><p>객체는 산술 연산이나 비교에 직접 사용할 수 없기 때문에, 자바스크립트는 객체를 내부적으로 원시값으로 변환하려 시도합니다. 이를 위해 ToPrimitive 알고리즘이 실행되며, 일반 객체는 다음과 같이 작동합니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;100&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위 예제에서 <code>valueOf()</code>가 우선 적용되어, 숫자 10이 반환되었기 때문에 결과는 11입니다. 만약 <code>valueOf</code>가 원시값을 반환하지 않으면, <code>toString()</code>이 호출됩니다. Date 객체의 경우엔 반대로 <code>toString</code>이 먼저 호출되는 등 힌트 기반의 동작 방식을 이해하는 것이 중요합니다.</p><hr><h2 id="명시적-타입-변환" tabindex="-1"><a class="header-anchor" href="#명시적-타입-변환"><span>명시적 타입 변환</span></a></h2><p>명시적 변환은 JS 내장 함수 또는 연산자를 통해 개발자가 의도를 명확히 하는 방식입니다. 예측 가능하고 안정적이라는 장점이 있어 실무에서는 적극 권장됩니다.</p><figure><img src="https://wishket.com/media/news/3332/image3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 123</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &quot;456&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>명시적 변환은 코드의 의도를 분명히 하며, 암묵적 변환보다 예측 가능성이 높습니다. 협업 코드에서 의도치 않은 비교나 연산을 방지하기 위해서는 항상 명시적 변환을 우선 고려하는 것이 바람직합니다.</p><hr><h2 id="동등-연산자-vs-일치-연산자" tabindex="-1"><a class="header-anchor" href="#동등-연산자-vs-일치-연산자"><span>동등 연산자(<code>==</code>) vs 일치 연산자(<code>===</code>)</span></a></h2><p>자바스크립트는 두 종류의 비교 연산자를 제공하는데요. <code>==</code>는 타입이 다르면 자동으로 타입을 맞춘 뒤 값을 비교하고, <code>===</code>는 타입까지 동일해야 true를 반환합니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>==는 아래와 같은 복잡한 변환 과정을 동반합니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>이유는 다음과 같습니다. <code>[] == false</code>는 [] -&gt; ‘’ -&gt; 0 그리고 false -&gt; 0으로 변환되어 <code>0 == 0</code>이 되어 <code>true</code>가 출력됩니다. <code>![]</code>는 먼저 false로 평가되고, 이후 <code>[] == false</code>와 동일하게 처리되기 때문에 역시 true가 출력됩니다.</p><p><code>==</code>는 매우 유연하게 작동하지만, 그만큼 예측하기 어렵고 실수를 유발하기 쉽습니다. 실무에서는 가독성과 안전성을 위해 항상 <code>===</code> 연산자를 사용하는 것이 좋습니다. 또한 <code>!=</code> 대신 <code>!==</code>를 사용하는 습관도 함께 들이면 좋습니다.</p><hr><h2 id="실전-예제와-예외-케이스들" tabindex="-1"><a class="header-anchor" href="#실전-예제와-예외-케이스들"><span>실전 예제와 예외 케이스들</span></a></h2><p>이번에는 실제 현업에서 종종 혼란을 야기하는 예외적인 케이스들을 살펴보겠습니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;function&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>null</code>과 <code>undefined</code>는 <code>==</code>에서만 서로 같다고 평가되며, 다른 어떤 값과도 같지 않습니다. 반면, <code>====</code> 연산자에서는 타입이 다르기 때문에 서로 다르게 평가됩니다. NaN은 숫자 타입이지만, 특이하게도 자기 자신과도 같지 않은 값입니다. 따라서 <code>NaN == NaN</code>은 false를 반환하게 되며, 이 값을 정확히 판별하기 위해서는 <code>Number.isNaN()</code> 함수를 사용해야 합니다.</p><p>또한 자바스크립트에서 함수는 객체이기 때문에 조건문에서 항상 truthy로 평가됩니다. 예를 들어, if (fn)과 같은 조건문은 fn이 어떤 함수이든 항상 <code>true</code>로 간주되어 실행 블록이 동작합니다.</p><p>최근 추가된 BigInt와 Symbol 타입도 비교 연산과 산술 연산에서 기존 타입과는 다르게 처리됩니다. 예를 들어, <code>10n == 10</code>은 <code>true</code>를 반환하지만, <code>10n === 10</code>은 타입이 다르기 때문에 false가 됩니다.</p><p>또한 <code>Symbol(“x”) == Symbol(“x”)</code>는 false입니다. Symbol은 고유성을 갖는 값이기 때문에, 동일한 설명(<code>description</code>)을 가지더라도 서로 다르다고 판단되기 때문입니다. 이러한 특수 타입이나 비교 규칙은 일반적인 숫자나 문자열과는 다르게 작동하므로, 실제 코드 작성 시 반드시 주의 깊게 다뤄야 합니다.</p><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>자바스크립트의 타입 변환은 매우 유연하면서도 복잡한 개념입니다. 자동 변환(암묵적 coercion)은 편리한 만큼 위험하며, 예외적인 케이스나 비교 연산에서 실수로 이어질 가능성이 높습니다. 실무에서는 다음과 같은 전략이 권장됩니다. 항상 ===를 기본으로 사용하고, 비교 전에는 명시적 타입 변환을 통해 의도를 명확히 합니다. 조건문에서는 truthy/falsy 기준을 명확히 이해하고, 객체와의 연산이나 비교에서는 valueOf, toString 같은 내부 동작에 대한 이해가 필수입니다.</p><p>이처럼 자바스크립트 타입 변환 메커니즘을 깊이 이해하면, 코드의 안정성과 예측 가능성을 확보할 수 있을 뿐 아니라, 디버깅 시간도 대폭 줄일 수 있습니다. 이번 글을 통해 여러분의 자바스크립트 실력을 한 단계 더 끌어올리는 계기가 되길 바랍니다.</p>`,47)),p(" TODO: add ARTICLE CARD "),a(l,u(r({title:"자바스크립트 ‘타입 변환’ 완전 정복",desc:"자바스크립트를 사용하다 보면 “0” == false, null == undefined 같은 비교에서 예상과는 전혀 다른 결과를 마주하게 됩니다. 이런 결과를 처음 본 개발자는 “왜 이게 true지?”라는 의문을 품게 되고, 때로는 디버깅에 긴 시간을 허비하기도 합니다. 이러한 현상은 바로 자바스크립트의 타입 변환(Type Coercion) 메커니즘에서 비롯됩니다. 이번 글에서는 자바스크립트의 타입 시스템과 변환 방식, 비교 연산자에서 벌어지는 암묵적 타입 변환의 정체, 그리고 예외적인 케이스까지 실무적으로 꼭 알아야 할 내용을 정리해 보겠습니다.",link:"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3332.html",logo:"https://yozm.wishket.com/favicon.ico",background:"rgba(84,7,224,0.2)"})),null,16)])}const x=m(h,[["render",j]]),z=JSON.parse('{"path":"/yozm.wishket.com/3332.html","title":"자바스크립트 ‘타입 변환’ 완전 정복","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"자바스크립트 ‘타입 변환’ 완전 정복","description":"Article(s) > 자바스크립트 ‘타입 변환’ 완전 정복","icon":"fa-brands fa-js","category":["JavaScript","Article(s)"],"tag":["blog","yozm.wishket.com","js","javascript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"자바스크립트 ‘타입 변환’ 완전 정복\\",\\"image\\":[\\"https://wishket.com/media/news/3332/ab__4_.png\\",\\"https://wishket.com/media/news/3332/ab__3_.png\\",\\"https://wishket.com/media/news/3332/image4.png\\",\\"https://wishket.com/media/news/3332/image3.png\\"],\\"datePublished\\":\\"2025-09-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"효빈\\",\\"url\\":\\"https://yozm.wishket.com/magazine/@hbin12212/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3332.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"자바스크립트 ‘타입 변환’ 완전 정복"}],["meta",{"property":"og:description","content":"Article(s) > 자바스크립트 ‘타입 변환’ 완전 정복"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/3332/dfaefef.jpg"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/3332/dfaefef.jpg"}],["meta",{"name":"twitter:image:alt","content":"자바스크립트 ‘타입 변환’ 완전 정복"}],["meta",{"property":"article:author","content":"효빈"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-09-08T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 자바스크립트 ‘타입 변환’ 완전 정복"},{"property":"og:description","content":"자바스크립트 ‘타입 변환’ 완전 정복"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3332.html"}]],"prev":"/programming/js/articles/README.md","date":"2025-09-08T00:00:00.000Z","isOriginal":false,"author":[{"name":"효빈","url":"https://yozm.wishket.com/magazine/@hbin12212/"}],"cover":"https://yozm.wishket.com/media/news/3332/dfaefef.jpg"},"git":{},"readingTime":{"minutes":1.51,"words":454},"filePathRelative":"yozm.wishket.com/3332.md","copyright":{"author":"효빈"}}');export{x as comp,z as data};
