import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as s,f as e,b as c,a as r,t as g,n as u,g as k,w as o,e as a,r as p,o as h}from"./app-BVguHYKu.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},j={class:"table-of-contents"},S={class:"hint-container info"},J={href:"https://x.com/abhaycloud_dev",target:"_blank",rel:"noopener noreferrer"},U={href:"https://linkedin.com/in/abhaysing-bhosale",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/Abhay-cloud",target:"_blank",rel:"noopener noreferrer"},A={class:"hint-container info"},I={href:"https://proandroiddev.com/kotlin-under-the-hood-exploring-objects-companion-objects-and-annotations-jvmstatic-71e1bf1128df",target:"_blank",rel:"noopener noreferrer"};function N(v,n){const d=p("VPCard"),t=p("router-link"),i=p("SiteInfo"),l=p("VPIcon");return h(),b("div",null,[s("h1",w,[s("a",f,[s("span",null,g(v.$frontmatter.title)+" 관련",1)])]),e(d,u(k({title:"Java > Article(s)",desc:"Article(s)",link:"/programming/java/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",j,[s("ul",null,[s("li",null,[e(t,{to:"#object"},{default:o(()=>n[0]||(n[0]=[a("Object")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#companion-object"},{default:o(()=>n[1]||(n[1]=[a("Companion Object")])),_:1,__:[1]})]),s("li",null,[e(t,{to:"#decoding-object-companion-object"},{default:o(()=>n[2]||(n[2]=[a("Decoding Object & Companion Object")])),_:1,__:[2]})]),s("li",null,[e(t,{to:"#jvmstatic"},{default:o(()=>n[3]||(n[3]=[a("@JvmStatic")])),_:1,__:[3]})]),s("li",null,[e(t,{to:"#jvmfield"},{default:o(()=>n[4]||(n[4]=[a("@JvmField")])),_:1,__:[4]})]),s("li",null,[e(t,{to:"#jvmoverloads"},{default:o(()=>n[5]||(n[5]=[a("@JvmOverloads")])),_:1,__:[5]})])])]),n[20]||(n[20]=s("hr",null,null,-1)),e(i,{name:"Kotlin Under the Hood: Exploring Objects, Companion Objects, and Annotations: @JvmStatic, @JvmField, @JvmOverloads",desc:"Hello! In this article, we will explore the inner workings of objects and companion objects in Kotlin, along with the annotations @JvmStatic, @JvmField, and @JvmOverloads.",url:"https://droidcon.com/kotlin-under-the-hood-exploring-objects-companion-objects-and-annotations-jvmstatic-jvmfield-jvmoverloads",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",preview:"https://droidcon.com/wp-content/uploads/2024/11/1_J39pAuo0okQu2yK40ZxLwA-600x300.webp"}),n[21]||(n[21]=s("p",null,[a("Hello! In this article, we will explore the inner workings of objects and companion objects in Kotlin, along with the annotations"),s("code",null,"@JvmStatic"),a(","),s("code",null,"@JvmField"),a(", and"),s("code",null,"@JvmOverloads"),a(".")],-1)),s("div",S,[n[6]||(n[6]=s("p",{class:"hint-container-title"},"Info",-1)),n[7]||(n[7]=s("p",null,"I previously published an article on how Kotlin’s constructors and init blocks function under the hood, which you can read here:",-1)),e(i,{name:"Kotlin Under the Hood: Exploring Constructors and Init Blocks",desc:"Hello! Have you ever wondered how Kotlin’s constructors and init blocks work under the hood? In this blog, we’ll dive into it.",url:"https://proandroiddev.com/kotlin-under-the-hood-exploring-constructors-and-init-blocks-869fc1f85a8e/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1200/1*Tv7ztrOoDi14tOZfgVR4cw.png"})]),n[22]||(n[22]=c(`<p>Before diving into the inner workings, let’s first understand what an object and a companion object are.</p><hr><h2 id="object" tabindex="-1"><a class="header-anchor" href="#object"><span>Object</span></a></h2><p>An object in Kotlin is primarily used to create singleton behavior, but it also serves other purposes, such as defining factory methods and creating anonymous objects.</p><ul><li>An object can be defined inside a class or outside of it, meaning it can be placed anywhere in the code.</li><li>*An object is instantiated lazily, meaning it is created only when accessed for the first time.*We’ll explore how this works when we dive deeper.</li></ul><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">object</span> Utils <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;1.0.0&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, we define a singleton object named<code>Utils</code>. The<code>getVersion()</code>function returns a version.</p><hr><h2 id="companion-object" tabindex="-1"><a class="header-anchor" href="#companion-object"><span>Companion Object</span></a></h2><p>A companion object is tied to a class in Kotlin, allowing us to define static members and methods similar to those in Java.</p><ul><li>A companion object can only be defined within classes.</li><li>The companion object is instantiated as soon as the containing class is loaded, meaning it is created even if we haven’t accessed the companion object.</li><li>You can omit the name for a companion object; if you do, it will default to the name<code>Companion</code>.</li></ul><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> Settings <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token keyword">companion</span> <span class="token keyword">object</span> Utils <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">fun</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;1.0.0&quot;</span></span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can call the method in two ways:</p><ul><li>With the name of the companion object:<code>Settings.Utils.getVersion()</code></li><li>Without specifying the name:<code>Settings.getVersion()</code></li></ul><p>If you do not give a name to the companion object, you can access it using:</p><ul><li><code>Settings.Companion.getVersion()</code></li><li>Or simply:<code>Settings.getVersion()</code></li></ul><hr><h2 id="decoding-object-companion-object" tabindex="-1"><a class="header-anchor" href="#decoding-object-companion-object"><span>Decoding Object &amp; Companion Object</span></a></h2><p>Now, let’s take a closer look at how it all works under the hood. To gain deeper insights, we can use IntelliJ IDEA’s decompilation feature. By navigating to<strong>Tools -&gt; Kotlin -&gt; Kotlin Bytecode</strong>and selecting<strong>Decompile</strong>, we can view the underlying Java code generated from our Kotlin constructs.</p><p>Let’s see what happens when we create an object in Kotlin:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">object</span> Utils <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;1.0.0&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here’s the underlying Java code generated from this Kotlin code:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Utils</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token annotation punctuation">@NotNull</span></span>
<span class="line">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Utils</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token annotation punctuation">@NotNull</span></span>
<span class="line">   <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">private</span> <span class="token class-name">Utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token class-name">Utils</span> var0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token constant">INSTANCE</span> <span class="token operator">=</span> var0<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I’ve simplified it by removing assertions and other metadata for clarity.</p><p>So, what do we observe here?</p><ul><li>The Kotlin<code>object</code>declaration translates to a<code>final</code> Java class,<code>Utils</code>.</li><li>A static variable,<code>INSTANCE</code>, holds the single instance of the<code>Utils</code>class, adhering to the singleton design pattern.</li><li>The private constructor prevents external instantiation, ensuring that the only way to access the instance is through<code>INSTANCE</code>.</li><li>Inside the static block, a new instance of<code>Utils</code>is created and assigned to<code>INSTANCE</code>, ensuring that this instance is created only once.</li><li>Also, we have the<code>getVersion()</code>method.</li></ul><div class="hint-container note"><p class="hint-container-title">Note</p><p>In Java, a <code>static{}</code> block is known as a static initialization block. It allows you to execute a block of code when the class is loaded, before any instances of the class are created or any static methods are called.</p></div><p>Now, let’s see what happens when we create companion objects. Consider the following code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Setting.kt"><span>Setting.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> Setting <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">object</span> Utils <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">fun</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;1.0.0&quot;</span></span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">companion</span> <span class="token keyword">object</span> MyUtils <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">fun</span> <span class="token function">generateUniqueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here’s the Java code generated from this Kotlin code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Setting.java"><span>Setting.java</span></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Setting</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token annotation punctuation">@NotNull</span></span>
<span class="line">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">MyUtils</span> <span class="token class-name">MyUtils</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyUtils</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultConstructorMarker</span><span class="token punctuation">)</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Utils</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token annotation punctuation">@NotNull</span></span>
<span class="line">      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Utils</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token annotation punctuation">@NotNull</span></span>
<span class="line">      <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">return</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">private</span> <span class="token class-name">Utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token class-name">Utils</span> var0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token constant">INSTANCE</span> <span class="token operator">=</span> var0<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MyUtils</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token annotation punctuation">@NotNull</span></span>
<span class="line">      <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">generateUniqueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token class-name">String</span> var10000 <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">         <span class="token keyword">return</span> var10000<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">private</span> <span class="token class-name">MyUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// $FF: synthetic method</span></span>
<span class="line">      <span class="token keyword">public</span> <span class="token class-name">MyUtils</span><span class="token punctuation">(</span><span class="token class-name">DefaultConstructorMarker</span> $constructor_marker<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,31)),r(" @include: https://gist.github.com/Abhay-cloud/2e0a28082738236023842a470937362b/raw/e55908143d834c190fc65cdb1c4381f043da4a2e/Setting.java "),n[23]||(n[23]=c(`<p>So, what’s happening?</p><ul><li>First, the<code>MyUtils</code>class is instantiated when the<code>Setting</code>class is loaded, not when it’s accessed. However, we can observe that the instance of the<code>Utils</code>object is created only when it is accessed for the first time. <em>This is why it is said that the companion object is instantiated eagerly when the containing class is loaded, while the regular object is instantiated lazily.</em></li><li>The<code>Utils</code>object behaves like a singleton, similar to the previous example.</li><li>The companion object is represented as a static inner class.</li><li>The<code>private MyUtils()</code>constructor ensures that this class cannot be instantiated from outside.</li><li>The synthetic method is added by the compiler to handle certain use cases in Kotlin.</li></ul><hr><h2 id="jvmstatic" tabindex="-1"><a class="header-anchor" href="#jvmstatic"><span><code>@JvmStatic</code></span></a></h2><p>This annotation tells the Kotlin compiler to generate an additional static method for a function or static getter/setter methods for a property.</p><ul><li>It only works in companion objects or object declarations.</li><li>It is useful when we want to access Kotlin method/property from Java code.</li><li>The annotation only affects how the code is compiled to bytecode; it has no effect on how the code behaves in Kotlin itself.</li></ul><p>Let’s take our previous example and see how to call the<code>getVersion()</code>method of<code>Utils</code>from Java without using<code>@JvmStatic</code>.</p><p>In Kotlin, you can call it directly like this:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> version <span class="token operator">=</span> Setting<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>However, in Java, if you try to do the same:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">String</span> version <span class="token operator">=</span> <span class="token class-name">Setting<span class="token punctuation">.</span>Utils</span><span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This will give an error</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You’ll encounter an error. Instead, you need to access the method like this:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">String</span> version <span class="token operator">=</span> <span class="token class-name">Setting<span class="token punctuation">.</span>Utils</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Why Does This Work Differently?</p><p>As we previously discussed regarding the under-the-hood code of objects, when we create an object in Kotlin, a final class is generated in Java for that object. This class contains a static variable,<code>INSTANCE</code>, which holds the single instance of the<code>Utils</code>class &amp; compiler generates a private constructor to prevent instantiation from outside the class, ensuring that the only way to access this instance is through<code>INSTANCE</code>. Therefore, in Java, we need to call<code>INSTANCE</code>if we do not use<code>@JvmStatic</code>.</p><p>Now, let’s use<code>@JvmStatic</code>in our previous example:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Setting.kt"><span>Setting.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> Setting <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">object</span> Utils <span class="token punctuation">{</span></span>
<span class="line">        <span class="token annotation builtin">@JvmStatic</span></span>
<span class="line">        <span class="token keyword">fun</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;1.0.0&quot;</span></span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">companion</span> <span class="token keyword">object</span> MyUtils <span class="token punctuation">{</span></span>
<span class="line">        <span class="token annotation builtin">@JvmStatic</span></span>
<span class="line">        <span class="token keyword">fun</span> <span class="token function">generateUniqueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Accessing Methods from Java:</p><p>With<code>@JvmStatic</code>, we can now access these methods directly without needing to reference an instance variable:</p><ul><li>To get the version from the<code>Utils</code>object, you can simply call:</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">String</span> version <span class="token operator">=</span> <span class="token class-name">Setting<span class="token punctuation">.</span>Utils</span><span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>To generate a unique ID from the companion object, you can call:</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">String</span> uid <span class="token operator">=</span> <span class="token class-name">Setting</span><span class="token punctuation">.</span><span class="token function">generateUniqueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// You can also specify the companion object’s name if you want:</span></span>
<span class="line"><span class="token class-name">String</span> uid <span class="token operator">=</span> <span class="token class-name">Setting<span class="token punctuation">.</span>MyUtils</span><span class="token punctuation">.</span><span class="token function">generateUniqueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you might wonder how the underlying code looks.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Setting.java"><span>Setting.java</span></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div>`,25)),r(" @include: https://gist.github.com/Abhay-cloud/c4df766c1ab4f9a30f411d08d647e803/raw/b9fa9332dcf056d8e7b3cdf58ec9282e041ffb0d/Setting.java "),n[24]||(n[24]=c(`<p>What’s the observation?</p><ul><li>An extra static method is created in the parent class for the companion object (<code>generateUniqueId()</code>).</li><li>The method in the<code>Utils</code>object is treated differently. Instead of creating an extra static method, the<code>getVersion()</code>method is made static.</li></ul><hr><h2 id="jvmfield" tabindex="-1"><a class="header-anchor" href="#jvmfield"><span><code>@JvmField</code></span></a></h2><p>Using<code>@JvmField</code>tells the Kotlin compiler not to create getters and setters for a property. Instead, it allows you to access the property directly like a regular field in Java.</p><p>Let’s explore this with an example.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> Utils <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">val</span> version<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1.0.0&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In Kotlin, you can access the<code>version</code>property easily:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> version <span class="token operator">=</span> <span class="token function">Utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>version</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>However, if you try to access it from Java like this:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Utils</span> utils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> version <span class="token operator">=</span> utils<span class="token punctuation">.</span>version<span class="token punctuation">;</span> <span class="token comment">// This will give you an error!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You’ll encounter a compilation error. Why is that? Let’s take a look under the hood.</p><p>Underlaying java code:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Utils</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token annotation punctuation">@NotNull</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> version <span class="token operator">=</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@NotNull</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>version<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, you can see that Kotlin generates a private field for<code>version</code>and provides a public getter method. Since the field is private, Java cannot access it directly.</p><p>Now, let’s see what happens when we apply<code>@JvmField</code>to our property:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> Utils <span class="token punctuation">{</span></span>
<span class="line">  <span class="token annotation builtin">@JvmField</span></span>
<span class="line">  <span class="token keyword">val</span> version<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1.0.0&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you can access the<code>version</code>property from Java.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Utils</span> utils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> version <span class="token operator">=</span> utils<span class="token punctuation">.</span>version<span class="token punctuation">;</span> <span class="token comment">// This works!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Decompiled code with<code>@JvmField</code>, it looks like this:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Utils</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token annotation punctuation">@JvmField</span></span>
<span class="line">   <span class="token annotation punctuation">@NotNull</span></span>
<span class="line">   <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> version <span class="token operator">=</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>version</code>is now a public field, with no generated getter. This makes it accessible directly from Java.</p><hr><h2 id="jvmoverloads" tabindex="-1"><a class="header-anchor" href="#jvmoverloads"><span><code>@JvmOverloads</code></span></a></h2><p>It instructs the compiler to generate multiple overloads of a function based on its default parameter values.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> Repository <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">getData</span><span class="token punctuation">(</span>category<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;default&quot;</span></span><span class="token punctuation">,</span> page<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> includeTranslation<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// some code</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In Kotlin, you can call the<code>getData()</code>function in different ways:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> repo <span class="token operator">=</span> <span class="token function">Repository</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">repo<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Uses all default values</span></span>
<span class="line">repo<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>page <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// Uses default for category and includeTranslation</span></span>
<span class="line">repo<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>includeTranslation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// Uses default for category and page</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, when you try to call this function from Java, you’ll run into a problem:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">Repository</span> repo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Repository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">repo<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This will give you an error!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Underlaying Java code:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Repository</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">String</span> category<span class="token punctuation">,</span> <span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">boolean</span> includeTranslation<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Intrinsics</span><span class="token punctuation">.</span><span class="token function">checkNotNullParameter</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span> <span class="token string">&quot;category&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// ... synthetic method</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> getData$<span class="token keyword">default</span><span class="token punctuation">(</span><span class="token class-name">Repository</span> var0<span class="token punctuation">,</span> <span class="token class-name">String</span> var1<span class="token punctuation">,</span> <span class="token keyword">int</span> var2<span class="token punctuation">,</span> <span class="token keyword">boolean</span> var3<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">,</span> <span class="token class-name">Object</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>var4 <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         var1 <span class="token operator">=</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>var4 <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         var2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>var4 <span class="token operator">&amp;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         var3 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      var0<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this case, the method is generated only with all parameters. Java doesn’t support default parameters, so you need to provide values for all of them.</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>Kotlin generates a synthetic method to handle default parameters, but this method isn’t accessible from Java. This synthetic method, like<code>getData$default</code>, uses bitwise operations to determine which default values to apply based on the parameters provided.</p></div><p>Now, let’s see what happens when we apply<code>@JvmOverloads</code>:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Repository.kt"><span>Repository.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> Repository <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation builtin">@JvmOverloads</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">getData</span><span class="token punctuation">(</span>category<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;default&quot;</span></span><span class="token punctuation">,</span> page<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> includeTranslation<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// some code</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Underlaying Java code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Repository.java"><span>Repository.java</span></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Repository</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@JvmOverloads</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">String</span> category<span class="token punctuation">,</span> <span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">boolean</span> includeTranslation<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@JvmOverloads</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">String</span> category<span class="token punctuation">,</span> <span class="token keyword">int</span> page<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        getData$<span class="token keyword">default</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> category<span class="token punctuation">,</span> page<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@JvmOverloads</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">String</span> category<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        getData$<span class="token keyword">default</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> category<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@JvmOverloads</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        getData$<span class="token keyword">default</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><ul><li>Kotlin generates additional overloaded versions of the<code>getData()</code>method.</li><li>It’s important to note that there’s no overload for just the<code>String</code>and<code>boolean</code>parameters.<em>As per the documentation, if a method has</em> <em>N</em> <em>parameters and</em> <em>M</em> <em>of them have default values, Kotlin generates</em> <em>M</em> <em>overloads. These overloads progressively omit parameters from the end.</em></li><li>In this case, since<code>includeTranslation</code>is the last parameter with a default value, Kotlin generates overloads that skip directly to<code>String</code>and<code>Int</code>, but you won’t see an overload for just<code>String</code>and<code>boolean</code>because<code>Int</code>is in between.</li><li>That’s why when you try to call<code>getData(String, Boolean)</code>from Java, it will not work.</li></ul><p>Working Combinations from Java:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line">repo<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ✅</span></span>
<span class="line">repo<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Calls with page = 1, includeTranslation = false ✅</span></span>
<span class="line">repo<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Calls with includeTranslation = false ✅</span></span>
<span class="line">repo<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ✅</span></span>
<span class="line"></span>
<span class="line">repo<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This won&#39;t compile ❌</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s it for today!</p><p>Thanks for reading this blog! 😊 If you want to explore more “under the hood” insights and deep dives into Kotlin, be sure to follow me for future updates and posts.</p><p>Feel free to connect with me on:</p>`,44)),s("ul",null,[s("li",null,[s("a",J,[n[8]||(n[8]=a("X (")),e(l,{icon:"fa-brands fa-x-twitter"}),n[9]||(n[9]=s("code",null,"abhaycloud_dev",-1)),n[10]||(n[10]=a(")"))])]),s("li",null,[s("a",U,[n[11]||(n[11]=a("LinkedIn (")),e(l,{icon:"fa-brands fa-linkedin"}),n[12]||(n[12]=s("code",null,"abhaysing-bhosale",-1)),n[13]||(n[13]=a(")"))])]),s("li",null,[s("a",x,[n[14]||(n[14]=a("GitHub (")),e(l,{icon:"iconfont icon-github"}),n[15]||(n[15]=s("code",null,"Abhay-cloud",-1)),n[16]||(n[16]=a(")"))])])]),s("div",A,[n[19]||(n[19]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[18]||(n[18]=a("This article is previously published on ")),s("a",I,[e(l,{icon:"fa-brands fa-medium"}),n[17]||(n[17]=a("proandroiddev.com"))])]),e(i,{name:"Kotlin Under the Hood: Exploring Objects, Companion Objects, and Annotations: @JvmStatic…",desc:"Hello! In this article, we will explore the inner workings of objects and companion objects in Kotlin, along with the annotations…",url:"https://proandroiddev.com/kotlin-under-the-hood-exploring-objects-companion-objects-and-annotations-jvmstatic-71e1bf1128df/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fill:1200:632/g:fp:0.42:0.45/1*J39pAuo0okQu2yK40ZxLwA.png"})]),r(" TODO: add ARTICLE CARD "),e(d,u(k({title:"Kotlin Under the Hood: Exploring Objects, Companion Objects, and Annotations: @JvmStatic, @JvmField, @JvmOverloads",desc:"Hello! In this article, we will explore the inner workings of objects and companion objects in Kotlin, along with the annotations @JvmStatic, @JvmField, and @JvmOverloads.",link:"https://chanhi2000.github.io/bookshelf/droidcon.com/kotlin-under-the-hood-exploring-objects-companion-objects-and-annotations-jvmstatic-jvmfield-jvmoverloads.html",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",background:"rgba(4,20,221,0.2)"})),null,16)])}const K=m(y,[["render",N]]),D=JSON.parse('{"path":"/droidcon.com/kotlin-under-the-hood-exploring-objects-companion-objects-and-annotations-jvmstatic-jvmfield-jvmoverloads.html","title":"Kotlin Under the Hood: Exploring Objects, Companion Objects, and Annotations: @JvmStatic, @JvmField, @JvmOverloads","lang":"en-US","frontmatter":{"lang":"en-US","title":"Kotlin Under the Hood: Exploring Objects, Companion Objects, and Annotations: @JvmStatic, @JvmField, @JvmOverloads","description":"Article(s) > Kotlin Under the Hood: Exploring Objects, Companion Objects, and Annotations: @JvmStatic, @JvmField, @JvmOverloads","icon":"iconfont icon-kotlin","category":["Java","Kotlin","Article(s)"],"tag":["blog","droidcon.com","java","kotlin"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kotlin Under the Hood: Exploring Objects, Companion Objects, and Annotations: @JvmStatic, @JvmField, @JvmOverloads\\",\\"image\\":[\\"https://droidcon.com/wp-content/uploads/2024/11/1_J39pAuo0okQu2yK40ZxLwA-600x300.webp\\"],\\"datePublished\\":\\"2024-11-04T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Abhaysing Bhosale\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/kotlin-under-the-hood-exploring-objects-companion-objects-and-annotations-jvmstatic-jvmfield-jvmoverloads.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Kotlin Under the Hood: Exploring Objects, Companion Objects, and Annotations: @JvmStatic, @JvmField, @JvmOverloads"}],["meta",{"property":"og:description","content":"Article(s) > Kotlin Under the Hood: Exploring Objects, Companion Objects, and Annotations: @JvmStatic, @JvmField, @JvmOverloads"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://droidcon.com/wp-content/uploads/2024/11/1_J39pAuo0okQu2yK40ZxLwA-600x300.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://droidcon.com/wp-content/uploads/2024/11/1_J39pAuo0okQu2yK40ZxLwA-600x300.webp"}],["meta",{"name":"twitter:image:alt","content":"Kotlin Under the Hood: Exploring Objects, Companion Objects, and Annotations: @JvmStatic, @JvmField, @JvmOverloads"}],["meta",{"property":"article:author","content":"Abhaysing Bhosale"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"droidcon.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-04T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Kotlin Under the Hood: Exploring Objects, Companion Objects, and Annotations: @JvmStatic, @JvmField, @JvmOverloads"},{"property":"og:description","content":"Kotlin Under the Hood: Exploring Objects, Companion Objects, and Annotations: @JvmStatic, @JvmField, @JvmOverloads"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/kotlin-under-the-hood-exploring-objects-companion-objects-and-annotations-jvmstatic-jvmfield-jvmoverloads.html"}]],"prev":"/programming/java-android/articles/README.md","date":"2024-11-04T00:00:00.000Z","isOriginal":false,"author":"Abhaysing Bhosale","cover":"https://droidcon.com/wp-content/uploads/2024/11/1_J39pAuo0okQu2yK40ZxLwA-600x300.webp"},"git":{},"readingTime":{"minutes":8.02,"words":2406},"filePathRelative":"droidcon.com/kotlin-under-the-hood-exploring-objects-companion-objects-and-annotations-jvmstatic-jvmfield-jvmoverloads.md","copyright":{"author":"Abhaysing Bhosale"}}');export{K as comp,D as data};
