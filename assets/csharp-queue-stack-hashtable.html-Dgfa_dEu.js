import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as a,b,a as i,t as g,n as u,g as r,w as e,e as t,r as l,o as f}from"./app-BVguHYKu.js";const y={},C={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},q={class:"table-of-contents"},S={class:"hint-container details"},T={class:"hint-container info"},x={href:"https://github.com/CodeMazeBlog/csharp-intermediate-module/tree/queue-stack-hashtable",target:"_blank",rel:"noopener noreferrer"};function j(d,n){const c=l("VPCard"),o=l("router-link"),k=l("SiteInfo"),p=l("RouteLink"),m=l("VPIcon");return f(),v("div",null,[s("h1",C,[s("a",w,[s("span",null,g(d.$frontmatter.title)+" 관련",1)])]),a(c,u(r({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",q,[s("ul",null,[s("li",null,[a(o,{to:"#queue-collection"},{default:e(()=>n[0]||(n[0]=[t("Queue Collection")])),_:1,__:[0]})]),s("li",null,[a(o,{to:"#the-most-common-methods-and-properties"},{default:e(()=>n[1]||(n[1]=[t("The Most Common Methods and Properties")])),_:1,__:[1]})]),s("li",null,[a(o,{to:"#stack-collection"},{default:e(()=>n[2]||(n[2]=[t("Stack Collection")])),_:1,__:[2]})]),s("li",null,[a(o,{to:"#related-methods-and-properties"},{default:e(()=>n[3]||(n[3]=[t("Related Methods and Properties")])),_:1,__:[3]})]),s("li",null,[a(o,{to:"#hashtable"},{default:e(()=>n[4]||(n[4]=[t("Hashtable")])),_:1,__:[4]})]),s("li",null,[a(o,{to:"#common-methods-in-the-hashtable-collection"},{default:e(()=>n[5]||(n[5]=[t("Common Methods In The Hashtable Collection")])),_:1,__:[5]})]),s("li",null,[a(o,{to:"#common-properties-in-the-hashtable-collection"},{default:e(()=>n[6]||(n[6]=[t("Common Properties in the Hashtable Collection")])),_:1,__:[6]})]),s("li",null,[a(o,{to:"#conclusion"},{default:e(()=>n[7]||(n[7]=[t("Conclusion")])),_:1,__:[7]})])])]),n[34]||(n[34]=s("hr",null,null,-1)),a(k,{name:"C# Intermediate - Queue, Stack, and Hashtable",desc:"Let's learn about Queue, Stack, And Hashtable Collections in C#. We'll also show the usage of different methods they provide.",url:"https://code-maze.com/csharp-queue-stack-hashtable/",logo:"/assets/image/code-maze.com/favicon.png",preview:"/assets/image/csharp-queue-stack-hashtable/banner.png"}),n[35]||(n[35]=s("p",null,"In this article, we are going to talk about the queue, stack, and hashtable collections in C#, how to use them and how to use the methods they provide.",-1)),s("details",S,[n[21]||(n[21]=s("summary",null,"This article is part of the series",-1)),s("ul",null,[s("li",null,[a(p,{to:"/code-maze.com/csharp-classes-constructors.html"},{default:e(()=>n[8]||(n[8]=[s("strong",null,"Classes and Constructors",-1)])),_:1,__:[8]})]),s("li",null,[a(p,{to:"/code-maze.com/csharp-properties.html"},{default:e(()=>n[9]||(n[9]=[s("strong",null,"Properties",-1)])),_:1,__:[9]})]),s("li",null,[a(p,{to:"/code-maze.com/csharp-static-members-constants-extension-methods.html"},{default:e(()=>n[10]||(n[10]=[s("strong",null,"Static Members, Constants, and Extension Methods",-1)])),_:1,__:[10]})]),s("li",null,[a(p,{to:"/code-maze.com/csharp-anonymous-nullable-types.html"},{default:e(()=>n[11]||(n[11]=[s("strong",null,"Anonymous and Nullable Types",-1)])),_:1,__:[11]})]),s("li",null,[a(p,{to:"/code-maze.com/csharp-structures.html"},{default:e(()=>n[12]||(n[12]=[s("strong",null,"Structures",-1)])),_:1,__:[12]})]),s("li",null,[a(p,{to:"/code-maze.com/csharp-enumerations.html"},{default:e(()=>n[13]||(n[13]=[s("strong",null,"Enumerations",-1)])),_:1,__:[13]})]),s("li",null,[a(p,{to:"/code-maze.com/csharp-inheritance.html"},{default:e(()=>n[14]||(n[14]=[s("strong",null,"Inheritance",-1)])),_:1,__:[14]})]),s("li",null,[a(p,{to:"/code-maze.com/csharp-interfaces.html"},{default:e(()=>n[15]||(n[15]=[s("strong",null,"Interfaces",-1)])),_:1,__:[15]})]),s("li",null,[a(p,{to:"/code-maze.com/csharp-abstract-classes.html"},{default:e(()=>n[16]||(n[16]=[s("strong",null,"Abstract Classes",-1)])),_:1,__:[16]})]),s("li",null,[a(p,{to:"/code-maze.com/csharp-generics.html"},{default:e(()=>n[17]||(n[17]=[s("strong",null,"Generics",-1)])),_:1,__:[17]})]),n[18]||(n[18]=s("li",null,"Queue, Stack, Hashtable (Current article)",-1))]),i(" - [**Queue, Stack, Hashtable**](/code-maze.com/csharp-queue-stack-hashtable.md) "),s("ul",null,[s("li",null,[a(p,{to:"/code-maze.com/cshart-generic-list-dictionary.html"},{default:e(()=>n[19]||(n[19]=[s("strong",null,"Generic List and Dictionary",-1)])),_:1,__:[19]})]),s("li",null,[a(p,{to:"/code-maze.com/csharp-delegates.html"},{default:e(()=>n[20]||(n[20]=[s("strong",null,"Delegates",-1)])),_:1,__:[20]})])])]),s("p",null,[n[23]||(n[23]=t("If you want to see the complete navigation of this tutorial, you can do that here ")),a(p,{to:"/code-maze.com/csharp-intermediate-tutorial-oop.html"},{default:e(()=>n[22]||(n[22]=[s("strong",null,"C# Intermediate Tutorial",-1)])),_:1,__:[22]}),n[24]||(n[24]=t("."))]),s("div",T,[n[30]||(n[30]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[28]||(n[28]=t("To download the source code, you can visit ")),s("a",x,[n[25]||(n[25]=t("Collections in C# Source Code (")),a(m,{icon:"iconfont icon-github"}),n[26]||(n[26]=s("code",null,"CodeMazeBlog/csharp-intermediate-module",-1)),n[27]||(n[27]=t(")"))]),n[29]||(n[29]=t("."))])]),n[36]||(n[36]=b(`<p>So, let’s start.</p><hr><h2 id="queue-collection" tabindex="-1"><a class="header-anchor" href="#queue-collection"><span>Queue Collection</span></a></h2><p>The <code>queue</code> collection represents a first-in, first-out collection of objects. This means that we can place our objects in a queue collection in a certain order and remove those objects in the same order. So, the first object which goes in is the first object to go out.</p><p>To create an object instance of a <code>queue</code> collection we can use two different statements.</p><p>By using <code>System.Collection.Generic</code> namespace:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Queue<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> intCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And by using <code>System.Collection</code> namespace:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Queue</span> queueCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If we declare an object by providing a type (in our example an int), we can store only integer numbers inside. On the other hand, if we use the second example we can store different data types in a collection because it stores objects.</p><hr><h2 id="the-most-common-methods-and-properties" tabindex="-1"><a class="header-anchor" href="#the-most-common-methods-and-properties"><span>The Most Common Methods and Properties</span></a></h2><p>The <code>Enqueue</code> method adds an element inside a collection:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Queue</span> queueCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">queueCollection<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token number">54</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">queueCollection<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">queueCollection<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token number">54.10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> queueCollection<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When we want to remove an element at the beginning of the collection and return it, we are going to use the <code>Dequeue</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Queue</span> queueCollection1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">queueCollection1<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token number">54</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">queueCollection1<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">queueCollection1<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token number">54.10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">int</span></span> number <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>queueCollection1<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Removed element is: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">number</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> queueCollection1<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>Peek</code> method returns the element at the beginning of the collection but does not remove it:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Queue</span> queueCollection2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">queueCollection2<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token number">54</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">queueCollection2<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">queueCollection2<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token number">54.10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line"><span class="token class-name"><span class="token keyword">int</span></span> peekNumber <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>queueCollection2<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Returned element is: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">number</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> queueCollection2<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>Clear</code> method removes all the elements from a collection.</p><p>If we want to check how many elements we have inside a collection, we can use the <code>Count</code> property:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">queueCollection2<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>queueCollection2<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="stack-collection" tabindex="-1"><a class="header-anchor" href="#stack-collection"><span>Stack Collection</span></a></h2><p>A <code>stack</code> collection represents a simple last-in, first-out collection. It means that an element that enters first in a collection will exit last.</p><p>As with a <code>Queue</code> collection, we can use the <code>System.Collection</code> and <code>System.Collection.Generic</code> namespaces:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Stack</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> stackInt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="related-methods-and-properties" tabindex="-1"><a class="header-anchor" href="#related-methods-and-properties"><span>Related Methods and Properties</span></a></h2><p>The <code>Push</code> method inserts an object at the top of the collection:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Stack</span> stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">stack1<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">328</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">stack1<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">&quot;Fifty Five&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">stack1<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">124.87</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> stackCollection1<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Pop</code> removes the element which was included last in a collection and returns it:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Stack</span> stackCollection2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">stackCollection2<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">328</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">stackCollection2<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">&quot;Fifty Five&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">stackCollection2<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">124.87</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">double</span></span> number <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>stackCollection2<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Element removed from a collection is: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">number</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> stackCollection2<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Peek</code> returns an object ready to exit the collection, but it doesn’t remove it:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Stack</span> stackCollection3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">stackCollection3<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">328</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">stackCollection3<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">&quot;Fifty Five&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">stackCollection3<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">124.87</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">double</span></span> number1 <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToDouble</span><span class="token punctuation">(</span>stackCollection3<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Element returned from a collection is: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">number</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> stackCollection3<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To remove all objects from a collection, we use the <code>Clear</code> method.</p><p>If we want to count the number of elements, we use the <code>Count</code> property:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">stackCollection3<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>stackCollection3<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="hashtable" tabindex="-1"><a class="header-anchor" href="#hashtable"><span>Hashtable</span></a></h2><p>The Hashtable represents a collection of a key-value pair that is organized based on the hash code of the key. Differently, from the queue and stack collections, we can instantiate a hashtable object by using the only <code>System.Collections</code> namespace:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Hashtable</span> hashTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>A Hashtable’s constructor has fifteen overloaded constructors.</p><hr><h2 id="common-methods-in-the-hashtable-collection" tabindex="-1"><a class="header-anchor" href="#common-methods-in-the-hashtable-collection"><span>Common Methods In The Hashtable Collection</span></a></h2><p>The <code>Add</code> method adds an element with the specified key and value into the collection:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Hashtable</span> hashTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">hashTable<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Element<span class="token punctuation">.</span>First<span class="token punctuation">,</span> <span class="token number">174</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">hashTable<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Element<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> <span class="token string">&quot;Sixty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">hashTable<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Element<span class="token punctuation">.</span>Third<span class="token punctuation">,</span> <span class="token number">124.24</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> key <span class="token keyword">in</span> hashTable<span class="token punctuation">.</span>Keys<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Key: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">key</span><span class="token punctuation">}</span></span><span class="token string">, value: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">hashTable<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>Remove</code> method removes the element with the specified key from a collection:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Hashtable</span> hashTable1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">hashTable1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Element<span class="token punctuation">.</span>First<span class="token punctuation">,</span> <span class="token number">174</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">hashTable1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Element<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> <span class="token string">&quot;Sixty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">hashTable1<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Element<span class="token punctuation">.</span>Third<span class="token punctuation">,</span> <span class="token number">124.24</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">hashTable1<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>Element<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> key <span class="token keyword">in</span> hashTable1<span class="token punctuation">.</span>Keys<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Key: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">key</span><span class="token punctuation">}</span></span><span class="token string">, value: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">hashTable<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ContainsKey</code> determines whether a collection contains a specific key:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>hashTable<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>Element<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Collection contains key: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Element<span class="token punctuation">.</span>Second</span><span class="token punctuation">}</span></span><span class="token string"> and its value is </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">hashTable<span class="token punctuation">[</span>Element<span class="token punctuation">.</span>Second<span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>ContainsValue</code> method determines whether a collection contains a specific value.</p><p><code>Clear</code> removes all elements from a collection:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">hashTable<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="common-properties-in-the-hashtable-collection" tabindex="-1"><a class="header-anchor" href="#common-properties-in-the-hashtable-collection"><span>Common Properties in the Hashtable Collection</span></a></h2><p><code>Count</code> property counts the number of elements inside a collection:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>hashTable<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>Keys</code> property returns all the keys from a collection and the <code>Value</code> property returns all the values from a collection:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Hashtable</span> hashTable2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">hashTable2<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Element<span class="token punctuation">.</span>First<span class="token punctuation">,</span> <span class="token number">174</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">hashTable2<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Element<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> <span class="token string">&quot;Sixty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">hashTable2<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Element<span class="token punctuation">.</span>Third<span class="token punctuation">,</span> <span class="token number">124.24</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> keys <span class="token operator">=</span> hashTable2<span class="token punctuation">.</span>Keys<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> key <span class="token keyword">in</span> keys<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">     Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> values <span class="token operator">=</span> hashTable2<span class="token punctuation">.</span>Values<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span> <span class="token keyword">in</span> values<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">     Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, we have learned:</p><ul><li>To use the Queue collection with its methods</li><li>To use the Stack collection with its methods</li><li>How to use Hashtable collection with its methods</li></ul>`,63)),s("p",null,[n[32]||(n[32]=t("In the next article, we are going to talk about ")),a(p,{to:"/code-maze.com/cshart-generic-list-dictionary.html"},{default:e(()=>n[31]||(n[31]=[s("strong",null,"List and Dictionary in C#",-1)])),_:1,__:[31]}),n[33]||(n[33]=t("."))]),i(" TODO: add ARTICLE CARD "),a(c,u(r({title:"C# Intermediate - Queue, Stack, and Hashtable",desc:"Let's learn about Queue, Stack, And Hashtable Collections in C#. We'll also show the usage of different methods they provide.",link:"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-queue-stack-hashtable.html",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16)])}const E=h(y,[["render",j]]),I=JSON.parse('{"path":"/code-maze.com/csharp-queue-stack-hashtable.html","title":"C# Intermediate - Queue, Stack, and Hashtable","lang":"en-US","frontmatter":{"lang":"en-US","title":"C# Intermediate - Queue, Stack, and Hashtable","description":"Article(s) > C# Intermediate - Queue, Stack, and Hashtable","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","code-maze.com","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C# Intermediate - Queue, Stack, and Hashtable\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-queue-stack-hashtable/banner.png\\"],\\"datePublished\\":\\"2018-10-24T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marinko Spasojević\\",\\"url\\":\\"https://code-maze.com/author/marinko/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-queue-stack-hashtable.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"C# Intermediate - Queue, Stack, and Hashtable"}],["meta",{"property":"og:description","content":"Article(s) > C# Intermediate - Queue, Stack, and Hashtable"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-queue-stack-hashtable/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-queue-stack-hashtable/banner.png"}],["meta",{"name":"twitter:image:alt","content":"C# Intermediate - Queue, Stack, and Hashtable"}],["meta",{"property":"article:author","content":"Marinko Spasojević"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2018-10-24T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > C# Intermediate - Queue, Stack, and Hashtable"},{"property":"og:description","content":"C# Intermediate - Queue, Stack, and Hashtable"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-queue-stack-hashtable.html"}]],"prev":"/programming/cs/articles/README.md","date":"2018-10-24T00:00:00.000Z","isOriginal":false,"author":[{"name":"Marinko Spasojević","url":"https://code-maze.com/author/marinko/"}],"cover":"/assets/image/code-maze.com/csharp-queue-stack-hashtable/banner.png"},"git":{},"readingTime":{"minutes":4.03,"words":1209},"filePathRelative":"code-maze.com/csharp-queue-stack-hashtable.md","copyright":{"author":"Marinko Spasojević"}}');export{E as comp,I as data};
