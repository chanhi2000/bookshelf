import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as e,b as y,a as b,t as g,n as l,g as r,w as p,e as a,r as c,o as w}from"./app-BVguHYKu.js";const h={},f={id:"frontmatter-title-관련",tabindex:"-1"},E={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},A={href:"https://en.wikipedia.org/wiki/Symmetric-key_algorithm",target:"_blank",rel:"noopener noreferrer"},I={href:"https://en.wikipedia.org/wiki/Public-key_cryptography",target:"_blank",rel:"noopener noreferrer"},C={href:"https://en.wikipedia.org/wiki/Advanced_Encryption_Standard",target:"_blank",rel:"noopener noreferrer"},D={href:"https://learn.microsoft.com/en-us/azure/key-vault/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://aws.amazon.com/kms/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://vaultproject.io/",target:"_blank",rel:"noopener noreferrer"};function V(u,n){const i=c("VPCard"),o=c("router-link"),k=c("SiteInfo"),t=c("VPIcon"),d=c("RouteLink");return w(),v("div",null,[s("h1",f,[s("a",E,[s("span",null,g(u.$frontmatter.title)+" 관련",1)])]),e(i,l(r({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[e(o,{to:"#symmetric-vs-asymmetric-encryption"},{default:p(()=>n[0]||(n[0]=[a("Symmetric vs Asymmetric Encryption")])),_:1,__:[0]})]),s("li",null,[e(o,{to:"#aes-encryption-implementation"},{default:p(()=>n[1]||(n[1]=[a("AES Encryption Implementation")])),_:1,__:[1]})]),s("li",null,[e(o,{to:"#aes-decryption-implementation"},{default:p(()=>n[2]||(n[2]=[a("AES Decryption Implementation")])),_:1,__:[2]})]),s("li",null,[e(o,{to:"#usage-example"},{default:p(()=>n[3]||(n[3]=[a("Usage Example")])),_:1,__:[3]})]),s("li",null,[e(o,{to:"#takeaway"},{default:p(()=>n[4]||(n[4]=[a("Takeaway")])),_:1,__:[4]})])])]),n[22]||(n[22]=s("hr",null,null,-1)),e(k,{name:"Implementing AES Encryption With C#",desc:"Learn how to implement secure AES encryption in C# to protect sensitive application data like API keys and passwords, with practical code examples covering encryption, decryption, and key management best practices.",url:"https://milanjovanovic.tech/blog/implementing-aes-encryption-with-csharp",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_126.png"}),n[23]||(n[23]=s("p",null,"A single exposed API key or database password can compromise your entire infrastructure. Yet many developers still store sensitive data with basic encoding or weak encryption.",-1)),n[24]||(n[24]=s("p",null,"Properly implemented encryption is your last line of defense. When other security measures fail, it ensures stolen data remains unreadable. This is especially crucial for API keys, database credentials, and user secrets that grant direct access to your systems.",-1)),n[25]||(n[25]=s("p",null,"In today's issue, we will cover implementing AES encryption in .NET with practical code examples and essential security considerations.",-1)),n[26]||(n[26]=s("hr",null,null,-1)),n[27]||(n[27]=s("h2",{id:"symmetric-vs-asymmetric-encryption",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#symmetric-vs-asymmetric-encryption"},[s("span",null,"Symmetric vs Asymmetric Encryption")])],-1)),s("p",null,[s("a",A,[e(t,{icon:"fa-brands fa-wikipedia-w"}),n[5]||(n[5]=a("Symmetric encryption"))]),n[6]||(n[6]=a(" (like AES) uses the same key for encryption and decryption. It's fast and ideal for storing data that only your application needs to read. The main challenge is securely storing the encryption key."))]),s("p",null,[s("a",I,[e(t,{icon:"fa-brands fa-wikipedia-w"}),n[7]||(n[7]=a("Asymmetric encryption"))]),n[8]||(n[8]=a(" (like RSA) uses different keys for encryption and decryption. It's slower but allows secure communication between parties who don't share secrets. Common uses include SSL/TLS and digital signatures."))]),n[28]||(n[28]=s("p",null,"For storing API keys and application secrets, symmetric encryption with AES is the appropriate choice.",-1)),n[29]||(n[29]=s("figure",null,[s("img",{src:"https://milanjovanovic.tech/blogs/mnw_126/aes_encryption.png?imwidth=1920",alt:"AES encryption algorithm.",tabindex:"0",loading:"lazy"}),s("figcaption",null,"AES encryption algorithm.")],-1)),n[30]||(n[30]=s("p",null,"AES encryption and decryption process block diagram.",-1)),n[31]||(n[31]=s("hr",null,null,-1)),n[32]||(n[32]=s("h2",{id:"aes-encryption-implementation",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#aes-encryption-implementation"},[s("span",null,"AES Encryption Implementation")])],-1)),s("p",null,[n[10]||(n[10]=a("Let's examine a secure ")),s("a",C,[e(t,{icon:"fa-brands fa-wikipedia-w"}),n[9]||(n[9]=a("AES (Advanced Encryption Standard)"))]),n[11]||(n[11]=a(" encryption implementation in C#. This implementation uses AES-256, which provides the strongest security currently available in the AES standard."))]),n[33]||(n[33]=y(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="Encryptor.cs"><span>Encryptor.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Encryptor</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> KeySize <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> BlockSize <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">EncryptionResult</span> <span class="token function">Encrypt</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> plainText<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Generate a random key and IV</span></span>
<span class="line">        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> aes <span class="token operator">=</span> Aes<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        aes<span class="token punctuation">.</span>KeySize <span class="token operator">=</span> KeySize<span class="token punctuation">;</span></span>
<span class="line">        aes<span class="token punctuation">.</span>BlockSize <span class="token operator">=</span> BlockSize<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Generate a random key and IV for each encryption operation</span></span>
<span class="line">        aes<span class="token punctuation">.</span><span class="token function">GenerateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        aes<span class="token punctuation">.</span><span class="token function">GenerateIV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> encryptedData<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Create encryptor and encrypt the data</span></span>
<span class="line">        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> encryptor <span class="token operator">=</span> aes<span class="token punctuation">.</span><span class="token function">CreateEncryptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> msEncrypt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> csEncrypt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CryptoStream</span><span class="token punctuation">(</span>msEncrypt<span class="token punctuation">,</span> encryptor<span class="token punctuation">,</span> CryptoStreamMode<span class="token punctuation">.</span>Write<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> swEncrypt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamWriter</span><span class="token punctuation">(</span>csEncrypt<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                swEncrypt<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            encryptedData <span class="token operator">=</span> msEncrypt<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Package everything together, storing IV with the encrypted data</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> EncryptionResult<span class="token punctuation">.</span><span class="token function">CreateEncryptedData</span><span class="token punctuation">(</span></span>
<span class="line">            encryptedData<span class="token punctuation">,</span></span>
<span class="line">            aes<span class="token punctuation">.</span>IV<span class="token punctuation">,</span></span>
<span class="line">            Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>aes<span class="token punctuation">.</span>Key<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EncryptionResult</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// The IV is prepended to the encrypted data</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> EncryptedData <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Key <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">EncryptionResult</span> <span class="token function">CreateEncryptedData</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> data<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> iv<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Combine IV and encrypted data</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> combined <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>iv<span class="token punctuation">.</span>Length <span class="token operator">+</span> data<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        Array<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>iv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> combined<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> iv<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Array<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> combined<span class="token punctuation">,</span> iv<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> data<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EncryptionResult</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            EncryptedData <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>combined<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            Key <span class="token operator">=</span> key</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> iv<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encryptedData<span class="token punctuation">)</span></span> <span class="token function">GetIVAndEncryptedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> combined <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>EncryptedData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Extract IV and data</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> iv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// AES block size is 16 bytes (128 / 8)</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> encryptedData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>combined<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        Array<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>combined<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> iv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Array<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>combined<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> encryptedData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> encryptedData<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>iv<span class="token punctuation">,</span> encryptedData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Let&#39;s break down what&#39;s happening in this implementation:</p><ul><li>Every encryption operation generates a new random key and IV (Initialization Vector). This is crucial - reusing either of these compromises security. The IV prevents identical plaintext from producing identical ciphertext.</li><li>We use <code>CryptoStream</code> for efficient encryption of potentially large data. The stream pattern ensures we don&#39;t load everything into memory at once.</li><li>The <code>EncryptionResult</code> class provides a way to package the encrypted data with its key and IV. In production, the key should be stored separately in a key management service.</li></ul><hr><h2 id="aes-decryption-implementation" tabindex="-1"><a class="header-anchor" href="#aes-decryption-implementation"><span>AES Decryption Implementation</span></a></h2><p>Here&#39;s the corresponding decryption implementation:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Decryptor.cs"><span>Decryptor.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Decryptor</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> KeySize <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> BlockSize <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Decrypt</span><span class="token punctuation">(</span><span class="token class-name">EncryptionResult</span> encryptionResult<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> key <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>encryptionResult<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> <span class="token punctuation">(</span>iv<span class="token punctuation">,</span> encryptedData<span class="token punctuation">)</span> <span class="token operator">=</span> encryptionResult<span class="token punctuation">.</span><span class="token function">GetIVAndEncryptedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> aes <span class="token operator">=</span> Aes<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        aes<span class="token punctuation">.</span>KeySize <span class="token operator">=</span> KeySize<span class="token punctuation">;</span></span>
<span class="line">        aes<span class="token punctuation">.</span>BlockSize <span class="token operator">=</span> BlockSize<span class="token punctuation">;</span></span>
<span class="line">        aes<span class="token punctuation">.</span>Key <span class="token operator">=</span> key<span class="token punctuation">;</span></span>
<span class="line">        aes<span class="token punctuation">.</span>IV <span class="token operator">=</span> iv<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Create decryptor and decrypt the data</span></span>
<span class="line">        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> decryptor <span class="token operator">=</span> aes<span class="token punctuation">.</span><span class="token function">CreateDecryptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> msDecrypt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span>encryptedData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> csDecrypt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CryptoStream</span><span class="token punctuation">(</span>msDecrypt<span class="token punctuation">,</span> decryptor<span class="token punctuation">,</span> CryptoStreamMode<span class="token punctuation">.</span>Read<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> srDecrypt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>csDecrypt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> srDecrypt<span class="token punctuation">.</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CryptographicException</span> ex<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Log the error securely - avoid exposing details</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CryptographicException</span><span class="token punctuation">(</span><span class="token string">&quot;Decryption failed&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The decryption process reverses the encryption steps. Note the error handling - we catch cryptographic exceptions but avoid exposing details that could help an attacker. In production, you should log these errors securely for debugging while keeping security in mind.</p><hr><h2 id="usage-example" tabindex="-1"><a class="header-anchor" href="#usage-example"><span>Usage Example</span></a></h2><p>Here&#39;s an example of encrypting and decrypting sensitive data using the implementations above:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Encrypt sensitive data</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> apiKey <span class="token operator">=</span> <span class="token string">&quot;your-sensitive-api-key&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> encryptionResult <span class="token operator">=</span> Encryptor<span class="token punctuation">.</span><span class="token function">Encrypt</span><span class="token punctuation">(</span>apiKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Output example: DCGT9kEwPglBonWWPa7PQPbr2I+6rskJ0lSFybbicvZ+wKMTU7cbJD2s3QSF2Yu6</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Store encrypted data in database</span></span>
<span class="line"><span class="token comment">// IV is stored with the encrypted data</span></span>
<span class="line"><span class="token function">SaveToDatabase</span><span class="token punctuation">(</span>encryptionResult<span class="token punctuation">.</span>EncryptedData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Store key in key vault</span></span>
<span class="line"><span class="token keyword">await</span> keyVault<span class="token punctuation">.</span><span class="token function">StoreKeyAsync</span><span class="token punctuation">(</span><span class="token string">&quot;apikey_1&quot;</span><span class="token punctuation">,</span> encryptionResult<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Later, decrypt when needed</span></span>
<span class="line"><span class="token comment">// IV is retrieved from the encrypted data</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> encryptedData <span class="token operator">=</span> <span class="token function">LoadFromDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> key <span class="token operator">=</span> <span class="token keyword">await</span> keyVault<span class="token punctuation">.</span><span class="token function">GetKeyAsync</span><span class="token punctuation">(</span><span class="token string">&quot;apikey_1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EncryptionResult</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    EncryptedData <span class="token operator">=</span> encryptedData<span class="token punctuation">,</span></span>
<span class="line">    Key <span class="token operator">=</span> key<span class="token punctuation">,</span></span>
<span class="line">    IV <span class="token operator">=</span> iv</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> decrypted <span class="token operator">=</span> Decryptor<span class="token punctuation">.</span><span class="token function">Decrypt</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="takeaway" tabindex="-1"><a class="header-anchor" href="#takeaway"><span>Takeaway</span></a></h2><p>AES encryption provides strong security for sensitive application data when implemented correctly.</p>`,15)),s("p",null,[n[15]||(n[15]=a("Proper key management is very important. Use a dedicated key storage service in production. Popular options include ")),s("a",D,[e(t,{icon:"iconfont icon-microsoftazure"}),n[12]||(n[12]=a("Azure Key Vault"))]),n[16]||(n[16]=a(", ")),s("a",x,[e(t,{icon:"fa-brands fa-aws"}),n[13]||(n[13]=a("AWS Key Management Service"))]),n[17]||(n[17]=a(", and ")),s("a",T,[e(t,{icon:"fas fa-globe"}),n[14]||(n[14]=a("HashiCorp Vault"))]),n[18]||(n[18]=a("."))]),s("p",null,[n[20]||(n[20]=a("In my ")),e(d,{to:"/milanjovanovic.tech/pragmatic-rest-apis/"},{default:p(()=>n[19]||(n[19]=[s("strong",null,"Pragmatic REST APIs",-1)])),_:1,__:[19]}),n[21]||(n[21]=a(" course, I cover secure data storage and encryption in more detail. These are critical aspects of building secure and robust APIs and integrating with third-party APIs. Check it out if you're interested in learning more."))]),n[34]||(n[34]=s("p",null,"Remember that encryption is just one part of a comprehensive security strategy. Keep your encryption keys separate from encrypted data and rotate them regularly.",-1)),n[35]||(n[35]=s("p",null,"Thanks for reading.",-1)),n[36]||(n[36]=s("p",null,"And stay awesome!",-1)),n[37]||(n[37]=s("hr",null,null,-1)),b(" TODO: add ARTICLE CARD "),e(i,l(r({title:"Implementing AES Encryption With C#",desc:"Learn how to implement secure AES encryption in C# to protect sensitive application data like API keys and passwords, with practical code examples covering encryption, decryption, and key management best practices.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/implementing-aes-encryption-with-csharp.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const j=m(h,[["render",V]]),K=JSON.parse('{"path":"/milanjovanovic.tech/implementing-aes-encryption-with-csharp.html","title":"Implementing AES Encryption With C#","lang":"en-US","frontmatter":{"lang":"en-US","title":"Implementing AES Encryption With C#","description":"Article(s) > Implementing AES Encryption With C#","icon":"iconfont icon-csharp","category":["C#","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Implementing AES Encryption With C#\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_126/aes_encryption.png?imwidth=1920\\"],\\"datePublished\\":\\"2025-01-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/implementing-aes-encryption-with-csharp.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Implementing AES Encryption With C#"}],["meta",{"property":"og:description","content":"Article(s) > Implementing AES Encryption With C#"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_126.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_126.png"}],["meta",{"name":"twitter:image:alt","content":"Implementing AES Encryption With C#"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-01-25T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Implementing AES Encryption With C#"},{"property":"og:description","content":"Implementing AES Encryption With C#"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/implementing-aes-encryption-with-csharp.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-01-25T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_126.png"},"git":{},"readingTime":{"minutes":3.88,"words":1164},"filePathRelative":"milanjovanovic.tech/implementing-aes-encryption-with-csharp.md","copyright":{"author":"Milan Jovanović"}}');export{j as comp,K as data};
