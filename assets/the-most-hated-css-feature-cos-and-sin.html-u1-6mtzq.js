import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as n,f as t,b as e,a as f,t as w,n as d,g as k,w as i,e as a,r as c,o as b}from"./app-BVguHYKu.js";const y={},S={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},q={class:"table-of-contents"},C={href:"https://2025.stateofcss.com/en-US/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://2025.stateofcss.com/en-US/awards/",target:"_blank",rel:"noopener noreferrer"},z={class:"hint-container info"},I={href:"https://en.wikipedia.org/wiki/Sine_and_cosine",target:"_blank",rel:"noopener noreferrer"},A={class:"hint-container note"},W={href:"https://css-tricks.com/almanac/functions/s/sibling-index/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://css-tricks.com/almanac/functions/s/sibling-count/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://css-tricks.com/almanac/properties/a/animation/",target:"_blank",rel:"noopener noreferrer"},M={class:"hint-container note"},F={href:"https://en.wikipedia.org/wiki/File:Damped_Spring_Simulation.gif",target:"_blank",rel:"noopener noreferrer"},H={href:"https://geogebra.org/graphing",target:"_blank",rel:"noopener noreferrer"},R={class:"hint-container note"},P={href:"https://css-tricks.com/almanac/rules/p/property/",target:"_blank",rel:"noopener noreferrer"},X={class:"hint-container info"};function Y(o,s){const r=c("VPCard"),u=c("router-link"),g=c("SiteInfo"),l=c("VPIcon"),m=c("RouteLink"),p=c("CodePen");return b(),v("div",null,[n("h1",S,[n("a",x,[n("span",null,w(o.$frontmatter.title)+" 관련",1)])]),t(r,d(k({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",q,[n("ul",null,[n("li",null,[t(u,{to:"#what-the-heck-are-cos-and-sin-anyway"},{default:i(()=>s[0]||(s[0]=[a("What the heck are cos() and sin() anyway?")])),_:1,__:[0]})]),n("li",null,[t(u,{to:"#circular-layouts"},{default:i(()=>s[1]||(s[1]=[a("Circular layouts")])),_:1,__:[1]})]),n("li",null,[t(u,{to:"#wavy-layouts"},{default:i(()=>s[2]||(s[2]=[a("Wavy layouts")])),_:1,__:[2]})]),n("li",null,[t(u,{to:"#damped-oscillatory-animations"},{default:i(()=>s[3]||(s[3]=[a("Damped oscillatory animations")])),_:1,__:[3]})]),n("li",null,[t(u,{to:"#more-trigonometry-to-come"},{default:i(()=>s[4]||(s[4]=[a("More trigonometry to come!")])),_:1,__:[4]})])])]),s[51]||(s[51]=n("hr",null,null,-1)),t(g,{name:"The “Most Hated” CSS Feature: cos() and sin()",desc:"I want to look at practical uses for CSS trigonometric functions. And we'll start with what may be the most popular functions of the ”worst” feature: sin() and cos().",url:"https://css-tricks.com/the-most-hated-css-feature-cos-and-sin",logo:"https://css-tricks/favicon.svg",preview:"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/most_hated_feature.jpg"}),n("p",null,[s[7]||(s[7]=a("No feature is truly “the worst” in CSS, right? After all, it’s all based on opinion and personal experience, but if we had to reach a consensus, checking the ")),n("a",C,[t(l,{icon:"fas fa-globe"}),s[5]||(s[5]=a("State of CSS 2025"))]),s[8]||(s[8]=a(" results would be a good starting point. I did exactly that, jumped into the ")),n("a",T,[t(l,{icon:"fas fa-globe"}),s[6]||(s[6]=a("awards section"))]),s[9]||(s[9]=a(", and there I found it: the “Most Hated Feature,” a title no CSS should have bear…"))]),s[52]||(s[52]=n("figure",null,[n("img",{src:"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/most_hated_feature.jpg?resize=1920%2C1080&ssl=1",alt:"State of CSS screenshot revealing the survey's most hated CSS feature, trigonometric functions.",tabindex:"0",loading:"lazy"}),n("figcaption",null,"State of CSS screenshot revealing the survey's most hated CSS feature, trigonometric functions.")],-1)),s[53]||(s[53]=n("p",null,[a("This shocks me, if I’m being honest. Are really trigonometric functions really "),n("em",null,"that"),a(" hated? I know “hated” is not the same as saying something is “worst”, but it still has an awful ring to it. And I know I’m being a little dramatic here, since only “9.1% of respondents truly hate trigonometry.” But that’s still too much shade being thrown for my taste.")],-1)),s[54]||(s[54]=n("p",null,[a("I want to eliminate that 9.1%. So, in this series, I want to look at practical uses for CSS trigonometric functions. We’ll tackle them in pieces because there’s a lot to take in and I find it easiest to learn and retain information when it’s chunked into focused, digestible pieces. And we’ll start with what may be the most popular functions of the “worst” feature: "),n("code",null,"sin()"),a(" and "),n("code",null,"cos()"),a(".")],-1)),n("div",z,[s[10]||(s[10]=n("p",{class:"hint-container-title"},"CSS Trigonometric Functions: The “Most Hated” CSS Feature",-1)),t(r,d(k({title:"The “Most Hated” CSS Feature: cos() and sin()",desc:"I want to look at practical uses for CSS trigonometric functions. And we'll start with what may be the most popular functions of the ”worst” feature: sin() and cos().",link:"/css-tricks.com/the-most-hated-css-feature-cos-and-sin.md",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16),s[11]||(s[11]=e('<ol start="2"><li><strong>Tackling the CSS <code>tan()</code> Function</strong> <em>(coming soon)</em></li><li><strong>Inverse functions: <code>asin()</code>, <code>acos()</code>, <code>atan()</code> and <code>atan2()</code></strong> <em>(coming soon)</em></li></ol>',1))]),s[55]||(s[55]=e('<hr><h2 id="what-the-heck-are-cos-and-sin-anyway" tabindex="-1"><a class="header-anchor" href="#what-the-heck-are-cos-and-sin-anyway"><span>What the heck are <code>cos()</code> and <code>sin()</code> anyway?</span></a></h2><div class="hint-container note"><p class="hint-container-title">Note</p><p>This section is for those who <code>cos()</code> and <code>sin()</code> don’t quite click yet, or simply want a refresher. If you aced trigonometry quizzes in high school, feel free to skip ahead to the <a href="#circular-layouts">next section</a>!</p></div>',3)),n("p",null,[s[13]||(s[13]=a("What I find funny about ")),s[14]||(s[14]=n("code",null,"cos()",-1)),s[15]||(s[15]=a(" and ")),s[16]||(s[16]=n("code",null,"sin()",-1)),s[17]||(s[17]=a("— and also why I think there is confusion around them — is the many ways we can describe them. We don’t have to look too hard. A quick glance at this ")),n("a",I,[t(l,{icon:"fa-brands fa-wikipedia-w"}),s[12]||(s[12]=a("Wikipedia page"))]),s[18]||(s[18]=a(" has an eye-watering number of super nuanced definitions."))]),n("p",null,[s[20]||(s[20]=a("This is a ")),t(m,{to:"/css-tricks.com/now-you-see-it.html"},{default:i(()=>s[19]||(s[19]=[n("strong",null,"learning problem in the web development field",-1)])),_:1,__:[19]}),s[21]||(s[21]=a(". I feel like some of those definitions are far too general and lack detail about the essence of what trigonometric functions like ")),s[22]||(s[22]=n("code",null,"sin()",-1)),s[23]||(s[23]=a(" and ")),s[24]||(s[24]=n("code",null,"cos()",-1)),s[25]||(s[25]=a(" can do. Conversely, other definitions are overly complex and academic, making them tough to grok without an advanced degree."))]),s[56]||(s[56]=e('<p>Let’s stick to the sweet middle spot: the <strong>unit circle</strong>.</p><p>Meet the unit circle. It is a circle with a radius of one unit:</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/unit_circle_mdwuda.jpg?resize=1920%2C1080&amp;ssl=1" alt="A circle in a white dashed outline against a black background. A purple line from the center to the outer border indicates the shape&#39;s radius, equal to 1." tabindex="0" loading="lazy"><figcaption>A circle in a white dashed outline against a black background. A purple line from the center to the outer border indicates the shape&#39;s radius, equal to 1.</figcaption></figure><p>Right now it’s alone… in space. Let’s place it on the Cartesian coordinate system (the classic chart with X and Y axes). We describe each point in space in Cartesian coordinates:</p><ol><li><strong>The X coordinate</strong>: The horizontal axis, plotting the point towards the left or right.</li><li><strong>The Y coordinate</strong>: The vertical axis, plotting the point towards the top or bottom.</li></ol><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/unit_circle_grid_fgfexz.jpg?resize=1920%2C1080&amp;ssl=1" alt="Same circle placed on a grid with labels indicating the coordinates." tabindex="0" loading="lazy"><figcaption>Same circle placed on a grid with labels indicating the coordinates.</figcaption></figure><p>We can move through the unit circle by an angle, which is measured from the positive X-axis going counter-clockwise.</p>',7)),t(p,{user:"monknow","slug-hash":"WbQmWXj",title:"Unit circle - Example I","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),s[57]||(s[57]=e('<div class="hint-container note"><p class="hint-container-title">Note</p><p>We can go in a clockwise direction by using negative angles. As my physics teacher used to say, “Time is negative!”</p></div><p>Notice how each angle lands on a unique point in the unit circle. How else can we describe that point using Cartesian coordinates?</p><p>When the angle is <code>0°</code> the X and Y coordinates are 1 and 0 (<code>1</code>, <code>0</code>), respectively. We can deduce the Cartesian coordinates for other angles just as easily, like <code>90°</code>, <code>180°</code> and <code>270°</code>. But for any other angle, we don’t know where the point is initially located on the unit circle.</p><p>If only there were a pair of functions that take an angle and give us our desired coordinates…</p><p><strong>You guessed it, the CSS <code>cos()</code> and <code>sin()</code> functions do exactly that</strong>. And they’re very closely related, where <code>cos()</code> is designed to handle the X coordinate and <code>sin()</code> returns the Y coordinate.</p><p>Play with the toggle slider in the following demo to see the relationship between the two functions, and notice how they form a right triangle with the initial point on the unit circle:</p>',6)),t(p,{user:"monknow","slug-hash":"azvMrEO",title:"Unit circle - Example II","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),s[58]||(s[58]=e('<p>I think that’s all you really need to know about <code>cos()</code> and <code>sin()</code> for the moment. They’re mapped to Cartesian coordinates, which allows us to track a point along the unit circle with an angle, no matter what size that circle happens to be.</p><p>Let’s dive into what we can actually use <code>cos()</code> and <code>sin()</code> for our everyday CSS work. It’s always good to put a little real-world context to theoretical concepts like math.</p><hr><h2 id="circular-layouts" tabindex="-1"><a class="header-anchor" href="#circular-layouts"><span>Circular layouts</span></a></h2><p>If we go by the unit circle definition of <code>cos()</code> and <code>sin()</code>, then it’s easy to see how they might be used to create circular layouts in CSS. The initial setup is a single row of circular elements:</p>',5)),t(p,{user:"monknow","slug-hash":"OPyqRbX",title:"A normal arrangement of circles","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),s[59]||(s[59]=e(`<p>Say we want to place each circular item around the outline of a larger circle instead. First, we would let CSS know the total number of elements and also each element’s index (the order it’s in), something we can do with an inline CSS variable that holds each order in the position:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--total</span><span class="token punctuation">:</span> 9</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 0</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 1</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 2</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 3</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 4</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 5</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 6</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 7</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 8</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),n("div",A,[s[35]||(s[35]=n("p",{class:"hint-container-title"},"Note",-1)),n("p",null,[s[29]||(s[29]=a("This step will become ")),s[30]||(s[30]=n("em",null,"much",-1)),s[31]||(s[31]=a(" easier and concise when the ")),n("a",W,[t(l,{icon:"iconfont icon-css-tricks"}),s[26]||(s[26]=n("code",null,"sibling-index()",-1))]),s[32]||(s[32]=a(" and ")),n("a",j,[t(l,{icon:"iconfont icon-css-tricks"}),s[27]||(s[27]=n("code",null,"sibling-count()",-1))]),s[33]||(s[33]=a("` functions gain support (and ")),t(m,{to:"/css-tricks.com/how-to-wait-for-the-sibling-count-and-sibling-index-functions.html"},{default:i(()=>s[28]||(s[28]=[n("strong",null,[a("they’re "),n("em",null,"really"),a(" neat")],-1)])),_:1,__:[28]}),s[34]||(s[34]=a("). I’m hardcoding the indexes with inline CSS variables in the meantime."))])]),s[60]||(s[60]=e(`<p>To place the items around the outline of a larger circle, we have to space them evenly by a certain angle. And to get that angle, we can divide <code>360deg</code> (a full turn around the circle) by the total number of items, which is 8 in this specific example. Then, to get each element’s specific angle, we can multiply the angle spacing by the element’s index (i.e., position):</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">li</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--rotation</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>360deg / <span class="token function">var</span><span class="token punctuation">(</span>--total<span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We also need to push the items away from the center, so we’ll assign a <code>--radius</code> value for the circle using another variable.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">ul</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--radius</span><span class="token punctuation">:</span> 10rem<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We have the element’s angle and radius. What’s left is to calculate the X and Y coordinates for each item.</p><p><strong>That’s where <code>cos()</code> and <code>sin()</code> come into the picture.</strong> We use them to get the X and Y coordinates that place each item around the unit circle, then multiply each coordinate by the <code>--radius</code> value to get an item’s final position on the bigger circle:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">li</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... */</span></span>
<span class="line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--rotation<span class="token punctuation">)</span><span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--radius<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span>
<span class="line">             <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--rotation<span class="token punctuation">)</span><span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--radius<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s it! We have a series of eight circular items placed evenly around the outline of a larger circle:</p>`,8)),t(p,{user:"monknow","slug-hash":"raObWRN",title:"A circular arrangement of circles","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),s[61]||(s[61]=n("p",null,"And we didn’t need to use a bunch of magic numbers to do it! All we provide CSS with is the unit circle’s radius, and then CSS does all the trigonometric gobbledygook that makes so many of us call this the “worst” CSS feature. Hopefully, I’ve convinced you to soften your opinions on them if that’s what was holding you back!",-1)),s[62]||(s[62]=n("p",null,[a("We aren’t limited to full circles, though! We can also have a semicircular arrangement by choosing "),n("code",null,"180deg"),a(" instead of "),n("code",null,"360deg"),a(".")],-1)),t(p,{user:"monknow","slug-hash":"jEbRyVg",title:"A circular arrangement of circles","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),s[63]||(s[63]=n("p",null,"This opens up lots of layout possibilities. Like, what if we want a circular menu that expands from a center point by transitioning the radius of the circle? We can totally do that:",-1)),t(p,{user:"monknow","slug-hash":"MYazxJO",title:"Circular Layout","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),s[64]||(s[64]=e('<p>Click or hover the heading and the menu items form around the circle!</p><hr><h2 id="wavy-layouts" tabindex="-1"><a class="header-anchor" href="#wavy-layouts"><span>Wavy layouts</span></a></h2><p>There’s still more we can do with layouts! If, say, we plot the <code>cos()</code> and <code>sin()</code> coordinates on a two-axis graph, notice how they give us a pair of waves that periodically go up and down. And notice they are offset from each other along the horizontal (X) axis:</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/sine_cosine_waves-1024x576.jpg?resize=1024%2C576&amp;ssl=1" alt="Comparing sine and cosine waves on a coordinate plane. They are essentially the same shape, but offset horizontally on the x-axis." tabindex="0" loading="lazy"><figcaption>Comparing sine and cosine waves on a coordinate plane. They are essentially the same shape, but offset horizontally on the x-axis.</figcaption></figure><p>Where do these waves come from? If we think back to the unit circle we talked about earlier, the value of <code>cos()</code> and <code>sin()</code> oscillate between <code>-1</code> and <code>1</code>. In other words, the lengths match when the angle around the unit circle varies. If we graph that oscillation, then we’ll get our wave and see that they’re sorta like reflections of each other.</p><details class="hint-container details"><summary>⚠️ Auto-playing media</summary><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/circle_cos_sin_k5uu75.gif?resize=650%2C390&amp;ssl=1" alt="Animated sine and cosine waves flowing horizontally on the X axis of a two-axis graph." tabindex="0" loading="lazy"><figcaption>Animated sine and cosine waves flowing horizontally on the X axis of a two-axis graph.</figcaption></figure></details><p>Can we place an element following one of these waves? Absolutely. Let’s start with the same single row layout of circular items we made earlier. This time, though, the length of that row spans beyond the viewport, causing overflow.</p>',8)),t(p,{user:"monknow","slug-hash":"XJmQgaj",title:"Another normal arrangement of circles","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),s[65]||(s[65]=e(`<p>We’ll assign an index position for each item like we did before, but this time we don’t need to know the total number of items. We had eight items last time, so let’s bump that up to 10 and pretend like we don’t know that:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 0</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 1</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 2</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 3</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 4</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 5</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 6</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 7</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 8</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 9</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 10</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We want to vary the element’s vertical position along either a <code>sin()</code> or <code>cos()</code> wave, meaning translating each item’s position based on its order in the index. We’ll multiply an item’s index by a certain angle that is passed into the <code>sin()</code> function, and that will return a ratio that describes how high or low the element should be on the wave. The final thing is to multiply that result by a length value, which I calculated as half an item’s total size.</p><p>Here’s the math in CSS-y terms:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">li</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">sin</span><span class="token punctuation">(</span>60deg * <span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span><span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--shape-size<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I’m using a <code>60deg</code> value because the waves it produces are smoother than some other values, but we can vary it as much as we want to get cooler waves. Play around with the toggle in the next demo and watch how the wave’s intensity changes with the angle:</p>`,6)),t(p,{user:"monknow","slug-hash":"jEbRLJa",title:"A wavy arrangement of circles","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),s[66]||(s[66]=e(`<p>This is a great example to see what we’re working with, but how would you use it in your work? Imagine we have two of these wavy chains of circles, and we want to intertwine them together, kinda like a DNA strand.</p><p>Let’s say we’re starting with the HTML structure for two unordered lists nested inside another unordered list. The two nested unordered lists represent the two waves that form the chain pattern:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>waves<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token comment">&lt;!-- First wave --&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>principal<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token comment">&lt;!-- Circles --&gt;</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 0</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 1</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 2</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 3</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token comment">&lt;!-- etc.  --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">&lt;!-- Second wave --&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>secondary<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token comment">&lt;!-- Circles --&gt;</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 0</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 1</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 2</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 3</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token comment">&lt;!-- etc.  --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pretty similar to the examples we’ve seen so far, right? We’re still working with an unordered list where the items are indexed with a CSS variable, but now we’re working with two of those lists… and they’re contained inside a third unordered list. We don’t have to structure this as lists, but I decided to leave them so I can use them as hooks for additional styling later.</p><p>To avoid any problems, we’ll ignore the two direct <code>&lt;li&gt;</code> elements in the outer unordered list that contain the other lists using <code>display: contents</code>.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.waves &gt; li</span> <span class="token punctuation">{</span> <span class="token property">display</span><span class="token punctuation">:</span> contents<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Notice how one of the chains is the “principal” while the other is the “secondary.” The difference is that the “secondary” chain is positioned behind the “principal” chain. I’m using slightly different background colors for the items in each chain, so it’s easier to distinguish one from the other as you scroll through the block-level overflow.</p>`,7)),t(p,{user:"monknow","slug-hash":"EaVJbwZ",title:"Yet another (longer) common arrangement of circles in a line","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),s[67]||(s[67]=e(`<p>We can reorder the chains using a stacking context:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.principal</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">z-index</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.secondary</span> <span class="token punctuation">{</span> <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This positions one chain on top of the other. Next, we will adjust each item’s vertical position with the “hated” <code>sin()</code> and <code>cos()</code> functions. Remember, they’re sorta like reflections of one another, so the variance between the two is what offsets the waves to form two intersecting chains of items:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.principal</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... */</span></span>
<span class="line">  <span class="token selector">li</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">sin</span><span class="token punctuation">(</span>60deg * <span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span><span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--shape-size<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.secondary</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... */</span></span>
<span class="line">  <span class="token selector">li</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span>60deg * <span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span><span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--shape-size<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can accentuate the offset even more by shifting the <code>.secondary</code> wave another <code>60deg</code>:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.secondary</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... */</span></span>
<span class="line">  <span class="token selector">li</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span>60deg * <span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span> + 60deg<span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--shape-size<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The next demo shows how the waves intersect at an offset angle of <code>60deg</code>. Adjust the slider toggle to see how the waves intersect at different angles:</p>`,7)),t(p,{user:"monknow","slug-hash":"XJmQzRK",title:"Wavy Layout","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),s[68]||(s[68]=n("p",null,"Oh, I told you this could be used in a practical, real-world way. How about adding a little whimsy and flair to a hero banner:",-1)),t(p,{user:"monknow","slug-hash":"XJmQpOg",title:"Better Wavy Layout","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),s[69]||(s[69]=n("hr",null,null,-1)),s[70]||(s[70]=n("h2",{id:"damped-oscillatory-animations",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#damped-oscillatory-animations"},[n("span",null,"Damped oscillatory animations")])],-1)),s[71]||(s[71]=n("p",null,[a("The last example got me thinking: "),n("strong",null,[a("is there a way to use "),n("code",null,"sin()"),a(" and "),n("code",null,"cos()"),a("‘s back and forth movement for animations?")]),a(" The first example that came to mind was an animation that also went back and forth, something like a pendulum or a bouncing ball.")],-1)),n("p",null,[s[37]||(s[37]=a("This is, of course, trivial since we can do it in a single ")),n("a",D,[t(l,{icon:"iconfont icon-css-tricks"}),s[36]||(s[36]=n("code",null,"animation",-1))]),s[38]||(s[38]=a(" declaration:"))]),s[72]||(s[72]=e(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.element</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">animation</span><span class="token punctuation">:</span> someAnimation 1s infinite alternate<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This “back and forth” animation is called <em>oscillatory</em> movement. And while <code>cos()</code> or <code>sin()</code> are used to model oscillations in CSS, it would be like reinventing the wheel (albeit a clunkier one).</p><p>I’ve learned that perfect oscillatory movement — like a pendulum that swings back and forth in perpetuity, or a ball that never stops bouncing — doesn’t really exist. Movement tends to decay over time, like a bouncing spring:</p><details class="hint-container details"><summary>⚠️ Auto-playing media</summary><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/damped_spring_nwegdi.gif?resize=110%2C359&amp;ssl=1" alt="An animated coiled spring anchored by an orange box showing natural spring motion." tabindex="0" loading="lazy"><figcaption>An animated coiled spring anchored by an orange box showing natural spring motion.</figcaption></figure></details><p>There’s a specific term that describes this: <em>damped</em> oscillatory movement. And guess what? We can model it in CSS with the <code>cos()</code> function! If we graph it over time, then we will see it goes back and forth while getting closer to the resting position<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/damped_movement_gfyswm.webp?resize=700%2C526&amp;ssl=1" alt="Damped movement graph. The waves starts steep, then gradually evens out as it goes from left to right." tabindex="0" loading="lazy"><figcaption>Damped movement graph. The waves starts steep, then gradually evens out as it goes from left to right.</figcaption></figure>`,6)),n("div",M,[s[41]||(s[41]=n("p",{class:"hint-container-title"},"Note",-1)),n("p",null,[n("a",F,[t(l,{icon:"fa-brands fa-wikipedia-w"}),s[39]||(s[39]=a("Wikipedia has another animated example"))]),s[40]||(s[40]=a(" that nicely demonstrates what damped oscillation looks like."))])]),s[73]||(s[73]=e('<p>In general, we can describe damped oscillation over time as a mathematical function:</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/damped_oscillation_formula.jpg?resize=1920%2C1080&amp;ssl=1" alt="Diagram of the damped oscillation formula labeling variables for time, damping, amplitude, frequency and the initial phase." tabindex="0" loading="lazy"><figcaption>Diagram of the damped oscillation formula labeling variables for time, damping, amplitude, frequency and the initial phase.</figcaption></figure><p>It’s composed of three parts:</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mrow><mo>−</mo><mi>γ</mi><mi>t</mi></mrow></msup></mrow><annotation encoding="application/x-tex">e^{−\\gamma{t}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7936em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7936em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.05556em;">γ</span><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span></span></span>: Due to the negative exponent, it becomes exponentially smaller as time passes, bringing the movement to a gradual stop. It is multiplied by a damping constant (γ) that specifies how quickly the movement should decay.</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span>: This is the initial amplitude of the oscillation, i.e., the element’s initial position.</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>cos</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>ω</mi><mi>t</mi><mo>−</mo><mi>α</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\\cos{\\left(\\omega{t}−\\alpha\\right)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mord"><span class="mord mathnormal">t</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span>: This gives the movement its oscillation as time passes. Time is multiplied by frequency (ω), which determines an element’s oscillation speed<a href="#footnote-2">^2</a>. We can also subtract from time α, which we can use to offset the initial oscillation of the system.</li></ul><p>Okay, enough with all the theory! How do we do it in CSS? We’ll set the stage with a single circle sitting all by itself.</p>',5)),t(p,{user:"monknow","slug-hash":"pvjBpeP",title:"A normal, common, ordinary circle","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),s[74]||(s[74]=e(`<p>We have a few CSS variables we can define that will come in handy since we already know the formula we’re working with:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">:root</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--circle-size</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">--amplitude</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span> <span class="token comment">/* The amplitude is the distance, so let&#39;s write it in pixels*/</span></span>
<span class="line">  <span class="token property">--damping</span><span class="token punctuation">:</span> 0.3<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--frequency</span><span class="token punctuation">:</span> 0.8<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--offset</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>pi/2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* This is the same as 90deg! (But in radians) */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),n("p",null,[s[43]||(s[43]=a("Given these variables, we can peek at what the animation would look like on a graph using a tool like ")),n("a",H,[t(l,{icon:"fas fa-globe"}),s[42]||(s[42]=a("GeoGebra"))]),s[44]||(s[44]=a(":"))]),s[75]||(s[75]=e('<figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/damped_graph_w17bzc.webp?resize=1022%2C1090&amp;ssl=1" alt="Damped motion graph. The wave is short and steep, then evens out as it goes from left to right." tabindex="0" loading="lazy"><figcaption>Damped motion graph. The wave is short and steep, then evens out as it goes from left to right.</figcaption></figure><p>From the graph, we can see that the animation starts at <code>0px</code> (thanks to our offset), then peaks around <code>140px</code> and dies out around <code>25s</code> in. I, for one, won’t be waiting 25 seconds for the animation to end, so let’s create a <code>--progress</code> property that will animate between <code>0</code> to <code>25</code>, and will act as our “time” in the function.</p>',2)),n("div",R,[s[48]||(s[48]=n("p",{class:"hint-container-title"},"Note",-1)),n("p",null,[s[46]||(s[46]=a("Remember that to animate or transition a custom property, we’ve gotta register it with the ")),n("a",P,[t(l,{icon:"iconfont icon-css-tricks"}),s[45]||(s[45]=n("code",null,"@property",-1))]),s[47]||(s[47]=a(" at-rule."))])]),s[76]||(s[76]=e(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@property</span> --progress</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;number&gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">inherits</span><span class="token punctuation">:</span> true<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@keyframes</span> movement</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">from</span> <span class="token punctuation">{</span> <span class="token property">--progress</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">to</span> <span class="token punctuation">{</span> <span class="token property">--progress</span><span class="token punctuation">:</span> 25<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What’s left is to implement the prior formula for the element’s movement, which, written in CSS terms, looks like this:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.circle</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--oscillation</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token function">exp</span><span class="token punctuation">(</span>-1 * <span class="token function">var</span><span class="token punctuation">(</span>--damping<span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--progress<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> * </span>
<span class="line">    <span class="token function">var</span><span class="token punctuation">(</span>--amplitude<span class="token punctuation">)</span> * </span>
<span class="line">    <span class="token function">cos</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--frequency<span class="token punctuation">)</span> * <span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--progress<span class="token punctuation">)</span><span class="token punctuation">)</span> - <span class="token function">var</span><span class="token punctuation">(</span>--offset<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--oscillation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">animation</span><span class="token punctuation">:</span> movement 1s linear infinite<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),t(p,{user:"monknow","slug-hash":"JoYVOxM",title:"Example Damped Oscillation","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),s[77]||(s[77]=e(`<p>This gives a pretty satisfying animation by itself, but the damped motion is only on the x-axis. What would it look like if, instead, we applied the damped motion on both axes? To do this, we can copy the same oscillation formula for x, but replace the <code>cos()</code> with <code>sin()</code>.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.circle</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--oscillation-x</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token function">exp</span><span class="token punctuation">(</span>-1 * <span class="token function">var</span><span class="token punctuation">(</span>--damping<span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--progress<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> * </span>
<span class="line">    <span class="token function">var</span><span class="token punctuation">(</span>--amplitude<span class="token punctuation">)</span> * </span>
<span class="line">    <span class="token function">cos</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--frequency<span class="token punctuation">)</span> * <span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--progress<span class="token punctuation">)</span><span class="token punctuation">)</span> - <span class="token function">var</span><span class="token punctuation">(</span>--offset<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--oscillation-y</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token function">exp</span><span class="token punctuation">(</span>-1 * <span class="token function">var</span><span class="token punctuation">(</span>--damping<span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--progress<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> * </span>
<span class="line">    <span class="token function">var</span><span class="token punctuation">(</span>--amplitude<span class="token punctuation">)</span> * </span>
<span class="line">    <span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--frequency<span class="token punctuation">)</span> * <span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--progress<span class="token punctuation">)</span><span class="token punctuation">)</span> - <span class="token function">var</span><span class="token punctuation">(</span>--offset<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--oscillation-x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--oscillation-y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">animation</span><span class="token punctuation">:</span> movement 1s linear infinite<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),t(p,{user:"monknow","slug-hash":"raObpZK",title:"Example Damped Oscillation (Both axes)","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),s[78]||(s[78]=n("p",null,[a("This is even more satisfying! A circular "),n("em",null,"and"),a(" damped motion, all thanks to "),n("code",null,"cos()"),a(" and "),n("code",null,"sin()"),a(". Besides looking great, how could this be used in a real layout?")],-1)),s[79]||(s[79]=n("p",null,"We don’t have to look too hard. Take, for example, this sidebar I recently made where the menu items pop in the viewport with a damped motion:",-1)),t(p,{user:"monknow","slug-hash":"MYaxWOJ",title:"Damped Menu Bar","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),s[80]||(s[80]=n("p",null,"Pretty neat, right?!",-1)),s[81]||(s[81]=n("hr",null,null,-1)),s[82]||(s[82]=n("h2",{id:"more-trigonometry-to-come",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#more-trigonometry-to-come"},[n("span",null,"More trigonometry to come!")])],-1)),s[83]||(s[83]=n("p",null,[a("Well, finding uses for the “most hated CSS feature” wasn’t that hard; maybe we should start showing some love to trigonometric functions. But wait. There are still several trigonometric functions in CSS we haven’t talked about. In the following posts, we’ll keep exploring what trig functions (like "),n("code",null,"tan()"),a(" and inverse functions) can do in CSS.")],-1)),n("div",X,[s[49]||(s[49]=n("p",{class:"hint-container-title"},"CSS Trigonometric Functions: The “Most Hated” CSS Feature",-1)),t(r,d(k({title:"The “Most Hated” CSS Feature: cos() and sin()",desc:"I want to look at practical uses for CSS trigonometric functions. And we'll start with what may be the most popular functions of the ”worst” feature: sin() and cos().",link:"/css-tricks.com/the-most-hated-css-feature-cos-and-sin.md",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16),s[50]||(s[50]=e('<ol start="2"><li><strong>Tackling the CSS <code>tan()</code> Function</strong> <em>(coming soon)</em></li><li><strong>Inverse functions: <code>asin()</code>, <code>acos()</code>, <code>atan()</code> and <code>atan2()</code></strong> <em>(coming soon)</em></li></ol>',1))]),s[84]||(s[84]=n("p",null,"Also, before I forget, here is another demo I made using cos() and sin() that didn’t make the cut in this article, but it is still worth checking out because it dials up the swirly-ness from the last example to show how wacky we can get.",-1)),t(p,{user:"monknow","slug-hash":"dPYQROE",title:"Spiral motion test","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"]),f(" TODO: add ARTICLE CARD "),t(r,d(k({title:"The “Most Hated” CSS Feature: cos() and sin()",desc:"I want to look at practical uses for CSS trigonometric functions. And we'll start with what may be the most popular functions of the ”worst” feature: sin() and cos().",link:"https://chanhi2000.github.io/bookshelf/css-tricks.com/the-most-hated-css-feature-cos-and-sin.html",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16),s[85]||(s[85]=e('<hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>This kind of damped oscillatory movement, where the back and forth is more visible, is called underdamped oscillation. There are also overdamped and critically damped oscillations, but we won’t focus on them here. <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>',2))])}const O=h(y,[["render",Y]]),$=JSON.parse('{"path":"/css-tricks.com/the-most-hated-css-feature-cos-and-sin.html","title":"The “Most Hated” CSS Feature: cos() and sin()","lang":"en-US","frontmatter":{"lang":"en-US","title":"The “Most Hated” CSS Feature: cos() and sin()","description":"Article(s) > The “Most Hated” CSS Feature: cos() and sin()","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","css-tricks.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"The “Most Hated” CSS Feature: cos() and sin()\\",\\"image\\":[\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/most_hated_feature.jpg?resize=1920%2C1080&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/unit_circle_mdwuda.jpg?resize=1920%2C1080&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/unit_circle_grid_fgfexz.jpg?resize=1920%2C1080&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/sine_cosine_waves-1024x576.jpg?resize=1024%2C576&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/circle_cos_sin_k5uu75.gif?resize=650%2C390&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/damped_spring_nwegdi.gif?resize=110%2C359&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/damped_movement_gfyswm.webp?resize=700%2C526&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/damped_oscillation_formula.jpg?resize=1920%2C1080&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/damped_graph_w17bzc.webp?resize=1022%2C1090&ssl=1\\"],\\"datePublished\\":\\"2025-09-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Juan Diego Rodríguez\\",\\"url\\":\\"https://css-tricks.com/author/monknow/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/the-most-hated-css-feature-cos-and-sin.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"The “Most Hated” CSS Feature: cos() and sin()"}],["meta",{"property":"og:description","content":"Article(s) > The “Most Hated” CSS Feature: cos() and sin()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/most_hated_feature.jpg"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/most_hated_feature.jpg"}],["meta",{"name":"twitter:image:alt","content":"The “Most Hated” CSS Feature: cos() and sin()"}],["meta",{"property":"article:author","content":"Juan Diego Rodríguez"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"css-tricks.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-09-15T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > The “Most Hated” CSS Feature: cos() and sin()"},{"property":"og:description","content":"The “Most Hated” CSS Feature: cos() and sin()"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/the-most-hated-css-feature-cos-and-sin.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-09-15T00:00:00.000Z","isOriginal":false,"author":[{"name":"Juan Diego Rodríguez","url":"https://css-tricks.com/author/monknow/"}],"cover":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/09/most_hated_feature.jpg"},"git":{},"readingTime":{"minutes":14.16,"words":4247},"filePathRelative":"css-tricks.com/the-most-hated-css-feature-cos-and-sin.md","copyright":{"author":"Juan Diego Rodríguez"}}');export{O as comp,$ as data};
