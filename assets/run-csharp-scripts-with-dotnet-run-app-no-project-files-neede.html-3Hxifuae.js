import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as e,b as o,a as v,t as h,n as r,g as u,w as p,e as a,r as l,o as b}from"./app-BVguHYKu.js";const y={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},j={class:"table-of-contents"},N={href:"https://devblogs.microsoft.com/dotnet/announcing-dotnet-run-app/",target:"_blank",rel:"noopener noreferrer"};function q(d,n){const c=l("VPCard"),t=l("router-link"),k=l("SiteInfo"),i=l("VPIcon");return b(),g("div",null,[s("h1",f,[s("a",w,[s("span",null,h(d.$frontmatter.title)+" 관련",1)])]),e(c,r(u({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",j,[s("ul",null,[s("li",null,[e(t,{to:"#why-this-matters"},{default:p(()=>n[0]||(n[0]=[a("Why This Matters")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#minimal-example"},{default:p(()=>n[1]||(n[1]=[a("Minimal Example")])),_:1,__:[1]})]),s("li",null,[e(t,{to:"#referencing-nuget-packages"},{default:p(()=>n[2]||(n[2]=[a("Referencing NuGet Packages")])),_:1,__:[2]})]),s("li",null,[e(t,{to:"#real-world-use-case-seeding-sql-data"},{default:p(()=>n[3]||(n[3]=[a("Real-World Use Case: Seeding SQL Data")])),_:1,__:[3]})]),s("li",null,[e(t,{to:"#file-level-directives-the-magic-behind-it"},{default:p(()=>n[4]||(n[4]=[a("File-Level Directives: The Magic Behind It")])),_:1,__:[4]})]),s("li",null,[e(t,{to:"#when-your-script-grows-up"},{default:p(()=>n[5]||(n[5]=[a("When Your Script Grows Up")])),_:1,__:[5]})]),s("li",null,[e(t,{to:"#takeaway"},{default:p(()=>n[6]||(n[6]=[a("Takeaway")])),_:1,__:[6]})])])]),n[26]||(n[26]=s("hr",null,null,-1)),e(k,{name:"Run C# Scripts With dotnet run app.cs (No Project Files Needed)",desc:"With .NET 10, you can now run C# files directly. No project files, no Main method, just code. In this issue, I'll show you how to use the new `dotnet run app.cs` feature in practice: from quick one-liners to a real-world SQL seeding script.",url:"https://milanjovanovic.tech/blog/run-csharp-scripts-with-dotnet-run-app-no-project-files-needed",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_146.png"}),n[27]||(n[27]=o(`<p>.NET 10 just got a whole lot more lightweight.</p><p>You can now run a C# file directly with:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">dotnet run app.cs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,3)),s("p",null,[n[7]||(n[7]=a("That's it. No ")),n[8]||(n[8]=s("code",null,".csproj",-1)),n[9]||(n[9]=a(". No ")),e(i,{icon:"iconfont icon-csharp"}),n[10]||(n[10]=s("code",null,"Program.cs",-1)),n[11]||(n[11]=a(". No solution files. Just a single C# file."))]),s("p",null,[n[13]||(n[13]=a("This new feature, introduced in ")),s("a",N,[e(i,{icon:"fa-brands fa-microsoft"}),n[12]||(n[12]=a(".NET 10 Preview 4"))]),n[14]||(n[14]=a(", is a big step toward making C# more script-friendly, especially for quick utilities, dev tooling, and CLI-based workflows."))]),n[28]||(n[28]=o(`<hr><h2 id="why-this-matters" tabindex="-1"><a class="header-anchor" href="#why-this-matters"><span>Why This Matters</span></a></h2><p>For years, C# has been perceived as heavyweight for small scripts. Compare that to Python, Bash, or even JavaScript, where you can just write a file and run it.</p><p>That barrier is now gone.</p><p>You can now:</p><ul><li>Write one-off scripts in <code>.cs</code> files</li><li>Use top-level statements</li><li>Reference NuGet packages inline</li><li>Share minimal reproducible examples without scaffolding a project</li></ul><p>And it runs on <strong>any OS</strong> with the .NET SDK installed.</p><hr><h2 id="minimal-example" tabindex="-1"><a class="header-anchor" href="#minimal-example"><span>Minimal Example</span></a></h2><p>Here&#39;s a simple script that prints today&#39;s date:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Today is </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token format-string"><span class="token punctuation">:</span>dddd, MMM dd yyyy</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Run it:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">dotnet run app.cs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Output:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">Today is Saturday, Jun 14 2025</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>That&#39;s it. No boilerplate, no boring <code>Main()</code> method. Just top-level programs and C# code.</p><hr><h2 id="referencing-nuget-packages" tabindex="-1"><a class="header-anchor" href="#referencing-nuget-packages"><span>Referencing NuGet Packages</span></a></h2><p>Let&#39;s say you want to make an HTTP request using <code>Flurl.Http</code>.</p><p>You can do this inline:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token preprocessor property">#:package Flurl.Http@4.0.2</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">Flurl<span class="token punctuation">.</span>Http</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token string">&quot;https://api.github.com&quot;</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">WithHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Accept&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/vnd.github.v3+json&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">WithHeader</span><span class="token punctuation">(</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dotnet-script&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Status code: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">response<span class="token punctuation">.</span>StatusCode</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetJsonAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To run it:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">dotnet run fetch.cs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Behind the scenes, the compiler downloads and restores NuGet dependencies automatically.</p><hr><h2 id="real-world-use-case-seeding-sql-data" tabindex="-1"><a class="header-anchor" href="#real-world-use-case-seeding-sql-data"><span>Real-World Use Case: Seeding SQL Data</span></a></h2><p>Here&#39;s a script I recently used to seed some test data into my Postgres database.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token preprocessor property">#:package Dapper@2.1.66</span></span>
<span class="line"><span class="token preprocessor property">#:package Npgsql@9.0.3</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">Dapper</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">Npgsql</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> connectionString <span class="token operator">=</span> <span class="token string">&quot;Host=localhost;Port=5432;Username=postgres;Password=postgres&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NpgsqlConnection</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">OpenAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> transaction <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">BeginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Creating tables...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token string">@&quot;</span>
<span class="line">    CREATE TABLE IF NOT EXISTS users (</span>
<span class="line">        id SERIAL PRIMARY KEY,</span>
<span class="line">        name TEXT NOT NULL</span>
<span class="line">    );</span>
<span class="line">&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Inserting users...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10_000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&quot;INSERT INTO users (name) VALUES (@Name);&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;User </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">i</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">1000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Inserted </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">i</span><span class="token punctuation">}</span></span><span class="token string"> users...&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">transaction<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Done!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Why did I write this as a script? I didn&#39;t want to clutter my app with throwaway seed logic. I just needed a quick way to populate my database with test data. This script does exactly that, and I can run it with:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">dotnet run seed.cs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="file-level-directives-the-magic-behind-it" tabindex="-1"><a class="header-anchor" href="#file-level-directives-the-magic-behind-it"><span>File-Level Directives: The Magic Behind It</span></a></h2>`,32)),s("p",null,[n[15]||(n[15]=a("The real power comes from file-level directives. These let you configure your app without leaving the ")),e(i,{icon:"iconfont icon-csharp"}),n[16]||(n[16]=s("code",null,".cs",-1)),n[17]||(n[17]=a(" file:"))]),n[29]||(n[29]=o(`<p><strong>Package References</strong></p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token preprocessor property">#:package Dapper@2.1.66</span></span>
<span class="line"><span class="token preprocessor property">#:package Npgsql@9.0.3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>SDK Selection</strong></p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token preprocessor property">#:sdk Microsoft.NET.Sdk.Web</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This tells .NET to treat your file as a web application, enabling ASP.NET Core features:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token preprocessor property">#:sdk Microsoft.NET.Sdk.Web</span></span>
<span class="line"><span class="token preprocessor property">#:package Microsoft.AspNetCore.OpenApi@9.*</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddOpenApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapOpenApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Hello from a file-based API!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/users/{id}&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> id<span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;User </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You now have a running web API. No project file. No <code>Startup.cs</code>. Just C# that does what you want.</p><p><strong>MSBuild Properties</strong></p><p>You can also set MSBuild properties directly in the file:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token preprocessor property">#:property LangVersion preview</span></span>
<span class="line"><span class="token preprocessor property">#:property Nullable enable</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="when-your-script-grows-up" tabindex="-1"><a class="header-anchor" href="#when-your-script-grows-up"><span>When Your Script Grows Up</span></a></h2><p>The brilliant part? When your file-based app gets complex enough to need project structure, converting is seamless:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">dotnet project convert api.cs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This creates:</p>`,15)),s("ul",null,[n[23]||(n[23]=s("li",null,"A new folder named after your file",-1)),n[24]||(n[24]=s("li",null,[a("A proper "),s("code",null,".csproj"),a(" file with all your directives converted to MSBuild properties")],-1)),s("li",null,[n[18]||(n[18]=a("Your code moved to ")),e(i,{icon:"iconfont icon-csharp"}),n[19]||(n[19]=s("code",null,"api.cs",-1)),n[20]||(n[20]=a(" (or ")),e(i,{icon:"iconfont icon-csharp"}),n[21]||(n[21]=s("code",null,"Program.cs",-1)),n[22]||(n[22]=a(" if you prefer)"))]),n[25]||(n[25]=s("li",null,"Everything ready for full project development",-1))]),n[30]||(n[30]=o(`<p>Given our API example above, the generated <code>.csproj</code> looks like:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title=".csproj"><span>.csproj</span></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Project</span> <span class="token attr-name">Sdk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Microsoft.NET.Sdk.Web<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TargetFramework</span><span class="token punctuation">&gt;</span></span>net10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TargetFramework</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImplicitUsings</span><span class="token punctuation">&gt;</span></span>enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ImplicitUsings</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Nullable</span><span class="token punctuation">&gt;</span></span>enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Nullable</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyGroup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ItemGroup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Microsoft.AspNetCore.OpenApi<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>9.*<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ItemGroup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Project</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Your file-based app evolves naturally into a project-based app. No need to rewrite or restructure everything. This makes it easy to start small and grow as needed, without losing the simplicity of the initial script.</p><hr><h2 id="takeaway" tabindex="-1"><a class="header-anchor" href="#takeaway"><span>Takeaway</span></a></h2><p>The bottom line is this: C# just became significantly more approachable. The barrier to entry dropped from &quot;learn project files and MSBuild&quot; to &quot;write C# and run it.&quot;</p><p>For experienced developers, this is a productivity boost for scripting and prototyping. For newcomers, this removes the biggest stumbling block to getting started with C#.</p><p>The best part? Microsoft didn&#39;t create a separate scripting language or runtime. They made regular C# easier to use. Your file-based apps are real .NET applications that can grow into full projects when needed.</p><p>The ceremony is dead. Long live practical C#.</p><hr>`,10)),v(" TODO: add ARTICLE CARD "),e(c,r(u({title:"Run C# Scripts With dotnet run app.cs (No Project Files Needed)",desc:"With .NET 10, you can now run C# files directly. No project files, no Main method, just code. In this issue, I'll show you how to use the new `dotnet run app.cs` feature in practice: from quick one-liners to a real-world SQL seeding script.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/run-csharp-scripts-with-dotnet-run-app-no-project-files-needed.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const C=m(y,[["render",q]]),x=JSON.parse('{"path":"/milanjovanovic.tech/run-csharp-scripts-with-dotnet-run-app-no-project-files-neede.html","title":"Run C# Scripts With dotnet run app.cs (No Project Files Needed)","lang":"en-US","frontmatter":{"lang":"en-US","title":"Run C# Scripts With dotnet run app.cs (No Project Files Needed)","description":"Article(s) > Run C# Scripts With dotnet run app.cs (No Project Files Needed)","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Run C# Scripts With dotnet run app.cs (No Project Files Needed)\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_146.png\\"],\\"datePublished\\":\\"2025-06-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/run-csharp-scripts-with-dotnet-run-app-no-project-files-neede.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Run C# Scripts With dotnet run app.cs (No Project Files Needed)"}],["meta",{"property":"og:description","content":"Article(s) > Run C# Scripts With dotnet run app.cs (No Project Files Needed)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_146.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_146.png"}],["meta",{"name":"twitter:image:alt","content":"Run C# Scripts With dotnet run app.cs (No Project Files Needed)"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-06-14T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Run C# Scripts With dotnet run app.cs (No Project Files Needed)"},{"property":"og:description","content":"Run C# Scripts With dotnet run app.cs (No Project Files Needed)"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/run-csharp-scripts-with-dotnet-run-app-no-project-files-needed.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-06-14T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_146.png"},"git":{},"readingTime":{"minutes":3.74,"words":1121},"filePathRelative":"milanjovanovic.tech/run-csharp-scripts-with-dotnet-run-app-no-project-files-neede.md","copyright":{"author":"Milan Jovanović"}}');export{C as comp,x as data};
