import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as a,f as e,b as l,t as g,n as m,g as v,w as t,e as s,r as i,o as f}from"./app-BVguHYKu.js";const b="/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/02-Authorization-flow-URI.png",y="/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/01-Authorization-flow-with-PKCE.png",w="/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/03-Authorization-flow-URI-with-PKCE.png",A="/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/04-db-configuration-for-IDP.png",I="/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/05-angular-project-overview.png",C="/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/06-Angular-application-started.png",j="/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/07-IDP-Login-screen.png",z="/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/08-Angular-Application-Security-URI-with-configuration.png",S="/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/09-Angular-Application-Security-console-logs-for-the-authorization-server.png",q="/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/10-Angular-Application-Security-redirection-to-the-404-page.png",P={},x={id:"frontmatter-title-관련",tabindex:"-1"},O={class:"header-anchor",href:"#frontmatter-title-관련"},D={class:"table-of-contents"},U={href:"https://code-maze.com/identityserver-4-series/",target:"_blank",rel:"noopener noreferrer"},R={class:"hint-container info"},T={href:"https://github.com/CodeMazeBlog/angular-identityserver4/tree/angular-oauth2-oidc-configuration",target:"_blank",rel:"noopener noreferrer"};function M(u,n){const d=i("VPCard"),o=i("router-link"),c=i("SiteInfo"),r=i("VPIcon"),p=i("RouteLink");return f(),k("div",null,[a("h1",x,[a("a",O,[a("span",null,g(u.$frontmatter.title)+" 관련",1)])]),e(d,m(v({title:"Angular.js > Article(s)",desc:"Article(s)",link:"/programming/js-angular/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a("nav",D,[a("ul",null,[a("li",null,[e(o,{to:"#about-authorization-code-flow"},{default:t(()=>n[0]||(n[0]=[s("About Authorization Code Flow")])),_:1,__:[0]}),a("ul",null,[a("li",null,[e(o,{to:"#flow-explanation-without-pkce-proof-key-for-code-exchange"},{default:t(()=>n[1]||(n[1]=[s("Flow explanation without PKCE (Proof Key for Code Exchange)")])),_:1,__:[1]})]),a("li",null,[e(o,{to:"#flow-explanation-with-pkce"},{default:t(()=>n[2]||(n[2]=[s("Flow explanation with PKCE")])),_:1,__:[2]})])])]),a("li",null,[e(o,{to:"#identityserver4-and-angular-oauth2-oidc-configuration"},{default:t(()=>n[3]||(n[3]=[s("IdentityServer4 and Angular OAuth2 OIDC Configuration")])),_:1,__:[3]}),a("ul",null,[a("li",null,[e(o,{to:"#transferring-new-configuration-to-the-database"},{default:t(()=>n[4]||(n[4]=[s("Transferring New Configuration to the Database")])),_:1,__:[4]})])])]),a("li",null,[e(o,{to:"#using-oidc-client-to-implement-angular-oauth2-oidc-security"},{default:t(()=>n[5]||(n[5]=[s("Using OIDC-Client to Implement Angular OAuth2 OIDC Security")])),_:1,__:[5]}),a("ul",null,[a("li",null,[e(o,{to:"#installing-the-required-library"},{default:t(()=>n[6]||(n[6]=[s("Installing the Required Library")])),_:1,__:[6]})])])]),a("li",null,[e(o,{to:"#creating-authentication-service"},{default:t(()=>n[7]||(n[7]=[s("Creating Authentication Service")])),_:1,__:[7]})]),a("li",null,[e(o,{to:"#using-the-usermanager-class-to-enable-idp-and-angular-integration"},{default:t(()=>n[8]||(n[8]=[s("Using the UserManager Class to Enable IDP and Angular Integration")])),_:1,__:[8]}),a("ul",null,[a("li",null,[e(o,{to:"#modifying-the-app-component-to-check-for-an-authenticated-user"},{default:t(()=>n[9]||(n[9]=[s("Modifying the App Component to Check for an Authenticated User")])),_:1,__:[9]})])])]),a("li",null,[e(o,{to:"#testing-the-connection-between-the-angular-application-and-idp"},{default:t(()=>n[10]||(n[10]=[s("Testing the Connection Between the Angular Application and IDP")])),_:1,__:[10]})]),a("li",null,[e(o,{to:"#conclusion"},{default:t(()=>n[11]||(n[11]=[s("Conclusion")])),_:1,__:[11]})])])]),n[41]||(n[41]=a("hr",null,null,-1)),e(c,{name:"Angular OAuth2 OIDC Configuration with IdentityServer4",desc:"In this article, we are going to setup the Angular OAuth2 OIDC configuration to establish communication with the IdentityServer4 server.",url:"https://code-maze.com/angular-oauth2-oidc-configuration-identityserver4/",logo:"/assets/image/code-maze.com/favicon.png",preview:"/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/banner.png"}),n[42]||(n[42]=a("p",null,"In this article, we are going to continue our IdentityServer4 series by learning how to implement Angular OAuth2 OIDC security with IdentityServer4 using the Authorization Code flow.",-1)),a("p",null,[n[13]||(n[13]=s("This article is heavily dependent on the previous articles from the series, so if you are not familiar with the IdentityServer4 concept or OAuth2 and OpenID Connect concepts, we strongly suggest reading all of our ")),a("a",U,[e(r,{icon:"fas fa-globe"}),n[12]||(n[12]=s("previous articles related to the IdentityServer4 series"))]),n[14]||(n[14]=s("."))]),a("div",R,[n[20]||(n[20]=a("p",{class:"hint-container-title"},"Info",-1)),a("p",null,[n[18]||(n[18]=s("To download the source code for this article, you can visit the ")),a("a",T,[n[15]||(n[15]=s("Angular OAuth2 OIDC with the IdentityServer4 (")),e(r,{icon:"iconfont icon-github"}),n[16]||(n[16]=a("code",null,"CodeMazeBlog/angular-identityserver4",-1)),n[17]||(n[17]=s(")"))]),n[19]||(n[19]=s(" repository. There, you will find the start folder for the starting projects and the end folder for the finished projects."))]),e(c,{name:"CodeMazeBlog/angular-identityserver4",desc:"This repo contains the source code for the 'Angular with IdentityServer4' series of articles on Code Maze",url:"https://github.com/CodeMazeBlog/angular-identityserver4/tree/angular-oauth2-oidc-configuration",logo:"https://avatars.githubusercontent.com/u/29179238?v=4",preview:"https://opengraph.githubassets.com/1e5a2c66415eaf85520fb3b5661bb000341bc94f928955a5494d4a8d8e1a9e31/CodeMazeBlog/angular-identityserver4"})]),n[43]||(n[43]=a("p",null,"So, let’s get going.",-1)),n[44]||(n[44]=a("hr",null,null,-1)),n[45]||(n[45]=a("h2",{id:"about-authorization-code-flow",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#about-authorization-code-flow"},[a("span",null,"About Authorization Code Flow")])],-1)),n[46]||(n[46]=a("p",null,"Up until recently, the recommendation for securing Angular application (or any other js application) was using the Implicit flow. But with the newest standards, that’s not the case anymore. Now, it is a recommendation using the Authorization Code flow with PKCE (Proof Key for Code Exchange).",-1)),a("p",null,[n[22]||(n[22]=s("In one of the previous articles, we have been talking about ")),e(p,{to:"/code-maze.com/hybrid-flow-securing-aspnetcore-web-application.html"},{default:t(()=>n[21]||(n[21]=[s("protecting the MVC client using the Hybrid Flow")])),_:1,__:[21]}),n[23]||(n[23]=s(" and there we have explained how that flow works. The Authorization Code flow is similar, but it has some differences. The ")),n[24]||(n[24]=a("code",null,"ResponseType",-1)),n[25]||(n[25]=s(" property is one difference. With the Hybrid Flow, we have three combinations for the Response type: code token, code id_token, and code id_token token. But for the Authorization Code flow, we have just one response type, which is ")),n[26]||(n[26]=a("code",null,"code",-1)),n[27]||(n[27]=s("."))]),n[47]||(n[47]=l('<p>We can inspect the URI to see this for ourselves:</p><figure><img src="'+b+'" alt="Authorization flow URI" tabindex="0" loading="lazy"><figcaption>Authorization flow URI</figcaption></figure><p>As we can see, next to all other parameters the response type <code>code</code> is sent to the IDP server.</p><h3 id="flow-explanation-without-pkce-proof-key-for-code-exchange" tabindex="-1"><a class="header-anchor" href="#flow-explanation-without-pkce-proof-key-for-code-exchange"><span>Flow explanation without PKCE (Proof Key for Code Exchange)</span></a></h3><p>The flow starts with the user clicking the login button or accessing the protected page. Then, the client app sends the request to the <code>/authorization</code> endpoint with the parameters from the picture above (and additional ones, but the url was shortened for better readability). The IDP replies with the code via the front-end channel. The client then calls the <code>/token</code> endpoint and provides the code. After the IDP verifies the code, it replies with the access token and the id token. The client application then uses that access token to access the protected API resources.</p><p>If we compare this to the Hybrid Flow, we are going to find a lot of similarities there. But, there is one addition to the Authorization Code flow, and that’s the usage of the PKCE.</p><h3 id="flow-explanation-with-pkce" tabindex="-1"><a class="header-anchor" href="#flow-explanation-with-pkce"><span>Flow explanation with PKCE</span></a></h3><p>Let’s take a look at the diagram for an easier understanding of the flow with PKCE:</p><figure><img src="'+y+'" alt="Authorization flow with PKCE" tabindex="0" loading="lazy"><figcaption>Authorization flow with PKCE</figcaption></figure><p>As you can see, when a client sends a request to the <code>/authorization</code> endpoint, it adds the hashed <code>code_challenge</code> in addition to all the parameters in the URI. This code is stored at the IDP level. Later on, the client sends the <code>code_verifier</code>, next to the client’s credentials and code. IDP hashes the <code>code_verifier</code> and compares it to the stored <code>code_challenge</code>. If it matches, IDP replies with the id token and access token.</p><p>We can see the <code>code_challenge</code> in the complete URI as well:</p><figure><img src="'+w+`" alt="Authorization flow URI with PKCE" tabindex="0" loading="lazy"><figcaption>Authorization flow URI with PKCE</figcaption></figure><p>As you can see, a lot is going on here and we are going to cover all of that with our articles and examples.</p><hr><h2 id="identityserver4-and-angular-oauth2-oidc-configuration" tabindex="-1"><a class="header-anchor" href="#identityserver4-and-angular-oauth2-oidc-configuration"><span>IdentityServer4 and Angular OAuth2 OIDC Configuration</span></a></h2><p>It’s time to start with the coding part. The first step towards the Angular OAuth2 OIDC security is to create a client configuration in the IDP project. To do that, we have to add a new client configuration in the <code>InMemoryConfig</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Client</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    ClientName <span class="token operator">=</span> <span class="token string">&quot;Angular-Client&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    ClientId <span class="token operator">=</span> <span class="token string">&quot;angular-client&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    AllowedGrantTypes <span class="token operator">=</span> GrantTypes<span class="token punctuation">.</span>Code<span class="token punctuation">,</span></span>
<span class="line">    RedirectUris <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;http://localhost:4200/signin-callback&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:4200/assets/silent-callback.html&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    RequirePkce <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    AllowAccessTokensViaBrowser <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    AllowedScopes <span class="token operator">=</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>OpenId<span class="token punctuation">,</span></span>
<span class="line">        IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;companyApi&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    AllowedCorsOrigins <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;http://localhost:4200&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    RequireClientSecret <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    PostLogoutRedirectUris <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">{</span> <span class="token string">&quot;http://localhost:4200/signout-callback&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    RequireConsent <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    AccessTokenLifetime <span class="token operator">=</span> <span class="token number">600</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This configuration is similar to a previous MVC client configuration but here, we use the Code as our grant type that stands for the Authorization Code flow. For the <code>RedirectUris</code> property, we add two values and both will be applied in the client code. We require PKCE and allow access token transmission via the browser. The scopes are the same as for the previous client application. Then, we set the URI for the allowed CORS origin, set the URI for the post logout redirect, disable the consent screen, and set the access token lifetime to 10 minutes (600 seconds).</p><p>But for our IDP application, this is not enough.</p><h3 id="transferring-new-configuration-to-the-database" tabindex="-1"><a class="header-anchor" href="#transferring-new-configuration-to-the-database"><span>Transferring New Configuration to the Database</span></a></h3>`,20)),a("p",null,[n[29]||(n[29]=s("If you remember ")),e(p,{to:"/code-maze.com/migrate-identityserver4-configuration-to-database.html"},{default:t(()=>n[28]||(n[28]=[s("the previous article")])),_:1,__:[28]}),n[30]||(n[30]=s(", we have transferred the entire configuration to the database and our IDP server doesn’t use this in-memory configuration anymore. So, the easiest thing to do is to remove the entire database and just start the IDP application. Since we have a code to migrate all the configuration to the database (the MigrationManager class), as soon as we start the IDP server, the complete configuration will be transferred to the database for sure:"))]),n[48]||(n[48]=l('<figure><img src="'+A+'" alt="db configuration for IDP" tabindex="0" loading="lazy"><figcaption>db configuration for IDP</figcaption></figure><p>That’s all it takes. The IDP configuration is in place and we can move on to the Angular OAuth2 OIDC security part.</p><hr><h2 id="using-oidc-client-to-implement-angular-oauth2-oidc-security" tabindex="-1"><a class="header-anchor" href="#using-oidc-client-to-implement-angular-oauth2-oidc-security"><span>Using OIDC-Client to Implement Angular OAuth2 OIDC Security</span></a></h2><p>In the Start folder of our source code, next to the Web API and OAuth project, we can find the AngularClient project. Let’s open that project and inspect it a bit:</p><figure><img src="'+I+`" alt="angular oauth2 oidc project overview" tabindex="0" loading="lazy"><figcaption>angular oauth2 oidc project overview</figcaption></figure><p>We have a basic project with a Home component, NavigationMenu component, Company module with the Companies component to fetch all the companies from the API, and the Error pages components.</p><p>Of course, don’t forget to open the terminal window (<kbd>CTRL</kbd>+<kbd>~</kbd>) and run the npm install command.</p><p>If you followed along with the entire series, then you already have the database created for the Web API application. If not, all you have to do is to start the Web API application, modify the connection string in the <code>appsettings.json</code> file, and run the <code>Update-Database</code> command in the Package Manager Console window.</p><p>You can start the Web API application and the AngularClient application to inspect how the app works.</p><h3 id="installing-the-required-library" tabindex="-1"><a class="header-anchor" href="#installing-the-required-library"><span>Installing the Required Library</span></a></h3><p>Let’s navigate back to the client application, and install the <code>oidc-client</code> library:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> <span class="token function">install</span> oidc-client <span class="token parameter variable">--save</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>After the installation, we are going to create a file named <code>constants</code> in the <code>shared</code> folder and add a couple of properties inside:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Constants</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> apiRoot <span class="token operator">=</span> <span class="token string">&quot;https://localhost:5001/api&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> clientRoot <span class="token operator">=</span> <span class="token string">&quot;http://localhost:4200&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> idpAuthority <span class="token operator">=</span> <span class="token string">&quot;https://localhost:5005&quot;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> clientId <span class="token operator">=</span> <span class="token string">&quot;angular-client&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, we create four properties and group them in a single class. We are going to use this file for additional properties as well. For now, we have the root address of our API project, the client application root, the URI of the IDP project, and finally the clientId property. The value of the clientId property must be the same as the ClientId property in the IDP configuration.</p><hr><h2 id="creating-authentication-service" tabindex="-1"><a class="header-anchor" href="#creating-authentication-service"><span>Creating Authentication Service</span></a></h2><p>To create an authentication service file, we are going to execute another command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">ng g <span class="token function">service</span> shared/services/auth <span class="token parameter variable">--skipTests</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Let’s add the import statements required for our authentication logic:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> UserManager<span class="token punctuation">,</span> User<span class="token punctuation">,</span> UserManagerSettings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;oidc-client&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Constants <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../constants&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>UserManager</code> class contains different low-level abstractions for <code>oidc-client</code> that save us from doing a lot of manual work. The <code>User</code> class contains all the properties related to the authenticated user (tokens, claims, expiration…). Finally, the <code>UserManagerSettings</code> class is a class meant for the OIDC configuration similar to the one we have on the IDP level.</p><p>Now, we can add our configuration:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthService</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token literal-property property">_userManager</span><span class="token operator">:</span> UserManager<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token literal-property property">_user</span><span class="token operator">:</span> User<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">get</span> <span class="token function">idpSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> UserManagerSettings <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">authority</span><span class="token operator">:</span> Constants<span class="token punctuation">.</span>idpAuthority<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">client_id</span><span class="token operator">:</span> Constants<span class="token punctuation">.</span>clientId<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">redirect_uri</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Constants<span class="token punctuation">.</span>clientRoot<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/signin-callback</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">scope</span><span class="token operator">:</span> <span class="token string">&quot;openid profile companyApi&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">response_type</span><span class="token operator">:</span> <span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">post_logout_redirect_uri</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Constants<span class="token punctuation">.</span>clientRoot<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/signout-callback</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>_userManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>idpSettings<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25)),a("p",null,[n[32]||(n[32]=s("The ")),n[33]||(n[33]=a("code",null,"idpSettings",-1)),n[34]||(n[34]=s(" property returns the object of the ")),n[35]||(n[35]=a("code",null,"UserManagerSettings",-1)),n[36]||(n[36]=s(" type containing all the required oidc configuration. Here, we can see all the properties that we have in the IDP configuration, except the authority, and yes these must match. Also, we have seen a similar configuration in ")),e(p,{to:"/code-maze.com/securing-webapi-hybrid-flow.html"},{default:t(()=>n[31]||(n[31]=[s("our MVC client application")])),_:1,__:[31]}),n[37]||(n[37]=s("."))]),n[49]||(n[49]=l(`<p>Let’s explain these properties:</p><ul><li>authority =&gt; the URI of the IDP project</li><li>client_id =&gt; the id of the client that consumes the IDP server</li><li>redirect_uri =&gt; the URI to redirect to after successful authentication</li><li>scope =&gt; the list of supported scopes by IDP</li><li>response_type =&gt; determines the flow we want to use (AllowedGrantTypes property on IDP)</li><li>post_logout_redirect_uri: the URI to redirect to after successful logout</li></ul><p>Then, in the constructor, we instantiate the <code>_userManager</code> property passing the <code>idpSettings</code> object with all the required configuration.</p><hr><h2 id="using-the-usermanager-class-to-enable-idp-and-angular-integration" tabindex="-1"><a class="header-anchor" href="#using-the-usermanager-class-to-enable-idp-and-angular-integration"><span>Using the UserManager Class to Enable IDP and Angular Integration</span></a></h2><p>We have explained all the steps that happen during the Authorization Code flow. But, we don’t have to manually add any of these steps. All we have to do is to ask the <code>UserManager</code> class to do that for us. So, to start, we are going to create a new function in the <code>AuthService</code> file:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">public</span> <span class="token function-variable function">login</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_userManager<span class="token punctuation">.</span><span class="token function">signinRedirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this function, we call the <code>signinRedirect</code> function from the <code>UserManager</code> class. This function will redirect us to the authorization endpoint on the IDP server. Additionally, the <code>UserManager</code> stores a user result in the session storage after a successful login action and we can always retrieve that object and use all the information it contains.</p><p>That said, let’s create a new function in the <code>AuthService</code> file:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">public</span> isAuthenticated <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span>  <span class="token operator">=&gt;</span>  <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_userManager<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>_user <span class="token operator">=</span> user<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> checkUser <span class="token operator">=</span> <span class="token punctuation">(</span>user <span class="token operator">:</span> User<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">boolean</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>user <span class="token operator">&amp;</span>amp<span class="token punctuation">;</span><span class="token operator">&amp;</span>amp<span class="token punctuation">;</span> <span class="token operator">!</span>user<span class="token punctuation">.</span>expired<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, we use the <code>getUser</code> function that returns a promise that produces a user object. After we fetch a user object from the storage, we assign it to the local <code>_user</code> property and return a result of the private <code>checkUser</code> function. In this function, we check if the user object is not null and not expired.</p><p>We need to do one additional thing. As soon as the user’s status changes, we want to inform any component that needs that kind of information. To do that, we are going to use an Observable:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Subject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">providedIn</span><span class="token operator">:</span> <span class="token string">&#39;root&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthService</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token literal-property property">_userManager</span><span class="token operator">:</span> UserManager<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token literal-property property">_user</span><span class="token operator">:</span> User<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">private</span> _loginChangedSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> loginChanged <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_loginChangedSubject<span class="token punctuation">.</span><span class="token function">asObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And modify the <code>isAuthenticated</code> function:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">public</span> isAuthenticated <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span>  <span class="token operator">=&gt;</span>  <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_userManager<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_user <span class="token operator">!==</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>_loginChangedSubject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>_user <span class="token operator">=</span> user<span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="modifying-the-app-component-to-check-for-an-authenticated-user" tabindex="-1"><a class="header-anchor" href="#modifying-the-app-component-to-check-for-an-authenticated-user"><span>Modifying the App Component to Check for an Authenticated User</span></a></h3><p>We need to realize that after the login action on the IDP side, the redirection happens back to the Angular application causing the Angular app to refresh itself (a fresh load of the application). So, let’s modify the <code>app.component</code> file to check if the user is authenticated:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> OnInit <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AuthService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./shared/services/auth.service&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">&#39;app-root&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">&#39;./app.component.html&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">styleUrls</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./app.component.css&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span></span>
<span class="line">  title <span class="token operator">=</span> <span class="token string">&#39;CompanyEmployees.Client.Oidc&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">public</span> userAuthenticated <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">private</span> <span class="token literal-property property">_authService</span><span class="token operator">:</span> AuthService</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>_authService<span class="token punctuation">.</span>loginChanged</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">userAuthenticated</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>userAuthenticated <span class="token operator">=</span> userAuthenticated<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>_authService<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">userAuthenticated</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>userAuthenticated <span class="token operator">=</span> userAuthenticated<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the <code>ngOnInit</code> function, we just call the <code>isAuthenticated</code> function from the <code>AuthService</code> file and populate the <code>userAuthenticated</code> property with true or false values. Also, we modify the constructor to react to the login change event. Now, if we need it, we can use the <code>userAuthenticated</code> property to modify the <code>app.component.html</code> page based on whether the user is authorized or not.</p><hr><h2 id="testing-the-connection-between-the-angular-application-and-idp" tabindex="-1"><a class="header-anchor" href="#testing-the-connection-between-the-angular-application-and-idp"><span>Testing the Connection Between the Angular Application and IDP</span></a></h2><p>Before we start with the test actions, we need to provide a way to trigger the redirection to the IDP server from a client application. We are going to do that by clicking the Login button on the navigation menu.</p><p>That said, let’s modify the <code>menu.component.ts</code> file:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> OnInit <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AuthService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../shared/services/auth.service&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">&#39;app-menu&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">templateUrl</span><span class="token operator">:</span> <span class="token string">&#39;./menu.component.html&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">styleUrls</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./menu.component.css&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MenuComponent</span> <span class="token keyword">implements</span> <span class="token class-name">OnInit</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">private</span> <span class="token literal-property property">_authService</span><span class="token operator">:</span> AuthService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">ngOnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token function-variable function">login</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>_authService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nothing special here, we just call the login function from the <code>AuthService</code> class.</p><p>After this modification, let’s modify the <code>menu.component.html</code> file:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>collapse navbar-collapse<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>navbarSupportedContent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>navbar-nav mr-auto<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav-item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav-link<span class="token punctuation">&quot;</span></span> <span class="token attr-name">[routerLink]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[&#39;/company/companies&#39;]<span class="token punctuation">&quot;</span></span> <span class="token attr-name">routerLinkActive</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>active<span class="token punctuation">&quot;</span></span> </span>
<span class="line">          <span class="token attr-name">[routerLinkActiveOptions]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{exact: true}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> Companies <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav-item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav-link<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> Privacy <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">&gt;</span></span> </span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn btn-link<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>gray</span><span class="token punctuation">&quot;</span></span></span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>login()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Great.</p><p>We can start the IDP application and the client application:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">ng serve <span class="token parameter variable">-o</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="`+C+'" alt="Angular application started - Angular OAuth2 OIDC Security" tabindex="0" loading="lazy"><figcaption>Angular application started - Angular OAuth2 OIDC Security</figcaption></figure><p>Once we click the Login button, the application redirects us to the IDP server on the Login screen:</p><figure><img src="'+j+'" alt="Angular OAuth2 OIDC application with IDP Login screen" tabindex="0" loading="lazy"><figcaption>Angular OAuth2 OIDC application with IDP Login screen</figcaption></figure><p>If we open the Developer Tools window (<kbd>F12</kbd>) and navigate to the Network tab, we are going to see the URI we have been talking about with all the required parameters from the configuration:</p><figure><img src="'+z+'" alt="Angular Application Security URI with configuration" tabindex="0" loading="lazy"><figcaption>Angular Application Security URI with configuration</figcaption></figure><p>Additionally, if we inspect the console logs:</p><figure><img src="'+S+'" alt="Angular OAuth2 OIDC Security console logs for the authorization server" tabindex="0" loading="lazy"><figcaption>Angular OAuth2 OIDC Security console logs for the authorization server</figcaption></figure><p>We can see that the <code>signinRedirect</code> function calls the <code>/.well-known/openid-configuration</code> endpoint, then the <code>/authorize</code> endpoint was invoked and we got redirected to the Login page.</p><p>Excellent, we can see our integration works, and our Angular application successfully communicates with the IDP server.</p><p>We can use Mick’s credentials (Mick and MickPassword) but after clicking the Login button, we are going to see the 404 page. That’s because we didn’t finish the login process and we don’t have the <code>/signin-oidc</code> route in our angular application:</p><figure><img src="'+q+'" alt="Angular OAuth2 OIDC Security redirection to the 404 page" tabindex="0" loading="lazy"><figcaption>Angular OAuth2 OIDC Security redirection to the 404 page</figcaption></figure><p>But this also proves that the communication between the Angular app and the IDP server works like a charm.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, we have enabled the communication between the Angular application and the IDP server. The configuration is in place on both sides and we have a way to redirect the user to the Login page that resides on the level of IDP.</p>',45)),a("p",null,[n[39]||(n[39]=s("Of course, we are not going to display the 404 page after successful login action, and that’s something we are going to handle in the next article. There, we will learn ")),e(p,{to:"/code-maze.com/angular-authentication-actions-with-identityserver4.html"},{default:t(()=>n[38]||(n[38]=[s("about the authentication actions, how to create required routes and components, and how to execute the logout actions as well")])),_:1,__:[38]}),n[40]||(n[40]=s("."))]),n[50]||(n[50]=a("p",null,"So, see you there.",-1))])}const L=h(P,[["render",M]]),K=JSON.parse('{"path":"/code-maze.com/angular-oauth2-oidc-configuration-identityserver4.html","title":"Angular OAuth2 OIDC Configuration with IdentityServer4","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Angular OAuth2 OIDC Configuration with IdentityServer4","description":"Article(s) > Angular OAuth2 OIDC Configuration with IdentityServer4","icon":"fa-brands fa-angular","category":["Node.js","Angular.js","C#","Article(s)"],"tag":["blog","code-maze.com","node","nodejs","node-js","angular","angularjs","angular-js","cs","c#","csharp"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Angular OAuth2 OIDC Configuration with IdentityServer4\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/02-Authorization-flow-URI.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/01-Authorization-flow-with-PKCE.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/03-Authorization-flow-URI-with-PKCE.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/04-db-configuration-for-IDP.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/05-angular-project-overview.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/06-Angular-application-started.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/07-IDP-Login-screen.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/08-Angular-Application-Security-URI-with-configuration.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/09-Angular-Application-Security-console-logs-for-the-authorization-server.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/10-Angular-Application-Security-redirection-to-the-404-page.png\\"],\\"datePublished\\":\\"2021-12-27T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/angular-oauth2-oidc-configuration-identityserver4.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Angular OAuth2 OIDC Configuration with IdentityServer4"}],["meta",{"property":"og:description","content":"Article(s) > Angular OAuth2 OIDC Configuration with IdentityServer4"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/banner.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Angular OAuth2 OIDC Configuration with IdentityServer4"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"angular-js"}],["meta",{"property":"article:tag","content":"angularjs"}],["meta",{"property":"article:tag","content":"angular"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2021-12-27T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Angular OAuth2 OIDC Configuration with IdentityServer4"},{"property":"og:description","content":"Angular OAuth2 OIDC Configuration with IdentityServer4"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/angular-oauth2-oidc-configuration-identityserver4.html"}]],"prev":"/programming/js-angular/articles/README.md","date":"2021-12-27T00:00:00.000Z","isOriginal":false,"cover":"/assets/image/code-maze.com/angular-oauth2-oidc-configuration-identityserver4/banner.png"},"git":{},"readingTime":{"minutes":9.42,"words":2825},"filePathRelative":"code-maze.com/angular-oauth2-oidc-configuration-identityserver4.md"}');export{L as comp,K as data};
