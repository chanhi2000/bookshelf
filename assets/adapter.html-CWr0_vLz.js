import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as e,b as m,t as v,n as h,g,w as t,e as a,r as o,o as b}from"./app-BVguHYKu.js";const f="/bookshelf/assets/image/code-maze.com/adapter/01-Xml-document.png",w="/bookshelf/assets/image/code-maze.com/adapter/02-Final-result.png",y={},C={id:"frontmatter-title-관련",tabindex:"-1"},A={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},q={class:"hint-container info"},M={href:"https://github.com/CodeMazeBlog/csharp-design-patterns/tree/adapter-desing-pattern",target:"_blank",rel:"noopener noreferrer"};function _(c,n){const i=o("VPCard"),l=o("router-link"),r=o("SiteInfo"),p=o("RouteLink"),u=o("VPIcon");return b(),k("div",null,[s("h1",C,[s("a",A,[s("span",null,v(c.$frontmatter.title)+" 관련",1)])]),e(i,h(g({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[e(l,{to:"#initial-project"},{default:t(()=>n[0]||(n[0]=[a("Initial Project")])),_:1,__:[0]})]),s("li",null,[e(l,{to:"#adapter-implementation"},{default:t(()=>n[1]||(n[1]=[a("Adapter Implementation")])),_:1,__:[1]})]),s("li",null,[e(l,{to:"#when-to-use-adapter"},{default:t(()=>n[2]||(n[2]=[a("When to Use Adapter")])),_:1,__:[2]})]),s("li",null,[e(l,{to:"#conclusion"},{default:t(()=>n[3]||(n[3]=[a("Conclusion")])),_:1,__:[3]})])])]),n[22]||(n[22]=s("hr",null,null,-1)),e(r,{name:"C# Design Patterns - Adapter",desc:"In this article we are going to learn about Adapter design pattern, how to implement it in the project and when shoud we use it.",url:"https://code-maze.com/adapter/",logo:"/assets/image/code-maze.com/favicon.png",preview:"/assets/image/adapter/banner.png"}),n[23]||(n[23]=s("p",null,"The Adapter design pattern is a structural pattern that allows incompatible interfaces to work together. By doing so, we allow objects from different interfaces to exchange data.",-1)),n[24]||(n[24]=s("p",null,"In this article, we are going to learn how to implement the Adapter pattern into our project and when should we use it.",-1)),s("ul",null,[s("li",null,[e(p,{to:"/code-maze.com/builder-design-pattern.html"},{default:t(()=>n[4]||(n[4]=[a("Builder Design Pattern and Fluent Builder")])),_:1,__:[4]})]),s("li",null,[e(p,{to:"/code-maze.com/fluent-builder-recursive-generics.html"},{default:t(()=>n[5]||(n[5]=[a("Fluent Builder Interface With Recursive Generics")])),_:1,__:[5]})]),s("li",null,[e(p,{to:"/code-maze.com/faceted-builder.html"},{default:t(()=>n[6]||(n[6]=[a("Faceted Builder")])),_:1,__:[6]})]),s("li",null,[e(p,{to:"/code-maze.com/factory-method.html"},{default:t(()=>n[7]||(n[7]=[a("Factory Method")])),_:1,__:[7]})]),s("li",null,[e(p,{to:"/code-maze.com/singleton.html"},{default:t(()=>n[8]||(n[8]=[a("Singleton")])),_:1,__:[8]})]),n[13]||(n[13]=s("li",null,"Adapter (Current article)",-1)),s("li",null,[e(p,{to:"/code-maze.com/composite.html"},{default:t(()=>n[9]||(n[9]=[a("Composite")])),_:1,__:[9]})]),s("li",null,[e(p,{to:"/code-maze.com/decorator-design-pattern.html"},{default:t(()=>n[10]||(n[10]=[a("Decorator")])),_:1,__:[10]})]),s("li",null,[e(p,{to:"/code-maze.com/command.html"},{default:t(()=>n[11]||(n[11]=[a("Command")])),_:1,__:[11]})]),s("li",null,[e(p,{to:"/code-maze.com/strategy.html"},{default:t(()=>n[12]||(n[12]=[a("Strategy")])),_:1,__:[12]})])]),s("div",q,[n[21]||(n[21]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[17]||(n[17]=a("The source code is available at the")),s("a",M,[n[14]||(n[14]=a("Adapter Design Pattern - Source Code. (")),e(u,{icon:"iconfont icon-github"}),n[15]||(n[15]=s("code",null,"CodeMazeBlog/csharp-design-patterns",-1)),n[16]||(n[16]=a(")"))])]),s("p",null,[n[19]||(n[19]=a("For the main page of this series check out ")),e(p,{to:"/code-maze.com/design-patterns-csharp.html"},{default:t(()=>n[18]||(n[18]=[a("C# Design Patterns")])),_:1,__:[18]}),n[20]||(n[20]=a("."))])]),n[25]||(n[25]=m(`<hr><h2 id="initial-project" tabindex="-1"><a class="header-anchor" href="#initial-project"><span>Initial Project</span></a></h2><p>Let’s imagine that we have functionality in which we convert the list of car manufacturers into JSON format and write it to the screen. But instead of a list, we have been provided with an API that provides us with all the manufacturers in the XML format.</p><p>Let’s say we can’t modify the existing API functionality (because of the technical restrictions such as being imported into our project from another solution that we mustn’t modify or as a NuGet package) so we have to find a way around it.</p><p>And the proper way to do it is to implement the Adapter pattern to solve this problem.</p><p>Let’s start with the creation of the <code>Manufacturer</code> model and a simple object to XML converter example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manufacturer</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> City <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Year <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ManufacturerDataProvider</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Manufacturer<span class="token punctuation">&gt;</span></span> <span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">       <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Manufacturer<span class="token punctuation">&gt;</span></span></span>
<span class="line">       <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Manufacturer</span> <span class="token punctuation">{</span> City <span class="token operator">=</span> <span class="token string">&quot;Italy&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;Alfa Romeo&quot;</span><span class="token punctuation">,</span> Year <span class="token operator">=</span> <span class="token number">2016</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Manufacturer</span> <span class="token punctuation">{</span> City <span class="token operator">=</span> <span class="token string">&quot;UK&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;Aston Martin&quot;</span><span class="token punctuation">,</span> Year <span class="token operator">=</span> <span class="token number">2018</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Manufacturer</span> <span class="token punctuation">{</span> City <span class="token operator">=</span> <span class="token string">&quot;USA&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;Dodge&quot;</span><span class="token punctuation">,</span> Year <span class="token operator">=</span> <span class="token number">2017</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Manufacturer</span> <span class="token punctuation">{</span> City <span class="token operator">=</span> <span class="token string">&quot;Japan&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;Subaru&quot;</span><span class="token punctuation">,</span> Year <span class="token operator">=</span> <span class="token number">2016</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Manufacturer</span> <span class="token punctuation">{</span> City <span class="token operator">=</span> <span class="token string">&quot;Germany&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;BMW&quot;</span><span class="token punctuation">,</span> Year <span class="token operator">=</span> <span class="token number">2015</span> <span class="token punctuation">}</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlConverter</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">XDocument</span> <span class="token function">GetXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> xDocument <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> xElement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">&quot;Manufacturers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> xAttributes <span class="token operator">=</span> ManufacturerDataProvider<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XElement</span><span class="token punctuation">(</span><span class="token string">&quot;Manufacturer&quot;</span><span class="token punctuation">,</span> </span>
<span class="line">                                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;City&quot;</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>City<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;Year&quot;</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>Year<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        xElement<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>xAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        xDocument<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>xElement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>xDocument<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> xDocument<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As we can see, this is a pretty straightforward code. We are collecting manufacturer data, creating a root Manufacturers element and all the Manufacturer sub-elements with its attributes.</p><p>After that, we are printing results to the console window to show how the final XML looks like.</p><p>This is how the <code>xDocument</code> should look like:</p><figure><img src="`+f+`" alt="Xml Conver - Adapter Design Pattern" tabindex="0" loading="lazy"><figcaption>Xml Conver - Adapter Design Pattern</figcaption></figure><p>Now let’s implement a <code>JsonConverter</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonConverter</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>Manufacturer<span class="token punctuation">&gt;</span></span> _manufacturers<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">JsonConverter</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>Manufacturer<span class="token punctuation">&gt;</span></span> manufacturers<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _manufacturers <span class="token operator">=</span> manufacturers<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConvertToJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> jsonManufacturers <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>_manufacturers<span class="token punctuation">,</span> Formatting<span class="token punctuation">.</span>Indented<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;\\nPrinting JSON list\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>jsonManufacturers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This code is even simpler because we only serialize our manufacturerlist into a JSON format.</p><p>Of course, for the serialization to work we need to install the <code>Newtonsoft.Json</code> library, so don’t forget to do that.</p><p>Excellent, we have our JSON functionality and the provided XML interface. But now, we need to solve a real problem. How to combine those two interfaces to accomplish our task, which is converting manufacturers from XML to JSON format.</p><hr><h2 id="adapter-implementation" tabindex="-1"><a class="header-anchor" href="#adapter-implementation"><span>Adapter Implementation</span></a></h2><p>As we can see, there is no way to pass an <code>xDocument</code> to the <code>JsonConverter</code> class and there shouldn’t be one, so we need to create the adapter class which will make these two interfaces work together.</p><p>To do this, we are going to start with the <code>IXmlToJson</code> interface to define the behavior of our adapter class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IXmlToJson</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConvertXmlToJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, let’s continue with the <code>XmlToJsonAdapter</code> class which is going to implement the <code>IXmlToJson</code> interface:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlToJsonAdapter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IXmlToJson</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">XmlConverter</span> _xmlConverter<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">XmlToJsonAdapter</span><span class="token punctuation">(</span><span class="token class-name">XmlConverter</span> xmlConverter<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _xmlConverter <span class="token operator">=</span> xmlConverter<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConvertXmlToJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> manufacturers <span class="token operator">=</span> _xmlConverter<span class="token punctuation">.</span><span class="token function">GetXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">Element</span><span class="token punctuation">(</span><span class="token string">&quot;Manufacturers&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">Elements</span><span class="token punctuation">(</span><span class="token string">&quot;Manufacturer&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Manufacturer</span></span>
<span class="line">                             <span class="token punctuation">{</span></span>
<span class="line">                                City <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">Attribute</span><span class="token punctuation">(</span><span class="token string">&quot;City&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">,</span></span>
<span class="line">                                Name <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">Attribute</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">,</span></span>
<span class="line">                                Year <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">Attribute</span><span class="token punctuation">(</span><span class="token string">&quot;Year&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span></span>
<span class="line">                             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonConverter</span><span class="token punctuation">(</span>manufacturers<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">ConvertToJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Excellent. We have created our adapter class which converts the Xml document object into the list of manufacturers and provides that list to the <code>JsonConverter</code> class.</p><p>So, as you can see, we have enabled collaboration between two completely different interfaces by just introducing an adapter class to our project.</p><p>Now, we can make a call to this adapter class from our client class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Program</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> xmlConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlToJsonAdapter</span><span class="token punctuation">(</span>xmlConverter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        adapter<span class="token punctuation">.</span><span class="token function">ConvertXmlToJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once we start our application, we are going to see the following result:</p><figure><img src="`+w+'" alt="Adapter - JSON Convert" tabindex="0" loading="lazy"><figcaption>Adapter - JSON Convert</figcaption></figure><p>Great job. We have finished our implementation.</p><hr><h2 id="when-to-use-adapter" tabindex="-1"><a class="header-anchor" href="#when-to-use-adapter"><span>When to Use Adapter</span></a></h2><p>We should use the Adapter class whenever we want to work with the existing class but its interface is not compatible with the rest of our code. Basically, the Adapter pattern is a middle-layer which serves as a translator between the code implemented in our project and some third party class or any other class with a different interface.</p><p>Furthermore, we should use the Adapter when we want to reuse existing classes from our project but they lack a common functionality. By using the Adapter pattern in this case, we don’t need to extend each class separately and create a redundant code.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>The Adapter pattern is pretty common in the C# world and it is quite used when we have to adapt some existing classes to a new interface. It can increase a code complexity by adding additional classes (adapters) but it is worth an effort for sure.</p>',39))])}const D=d(y,[["render",_]]),P=JSON.parse('{"path":"/code-maze.com/adapter.html","title":"C# Design Patterns - Adapter","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"C# Design Patterns - Adapter","description":"Article(s) > C# Design Patterns - Adapter","icon":"iconfont icon-csharp","category":["C#","Article(s)"],"tag":["blog","code-maze.com","csharp"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C# Design Patterns - Adapter\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/adapter/01-Xml-document.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/adapter/02-Final-result.png\\"],\\"datePublished\\":\\"2022-01-13T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/adapter.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"C# Design Patterns - Adapter"}],["meta",{"property":"og:description","content":"Article(s) > C# Design Patterns - Adapter"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/adapter/banner.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/adapter/banner.png"}],["meta",{"name":"twitter:image:alt","content":"C# Design Patterns - Adapter"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-01-13T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > C# Design Patterns - Adapter"},{"property":"og:description","content":"C# Design Patterns - Adapter"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/adapter.html"}]],"prev":"/programming/cs/articles/README.md","date":"2022-01-13T00:00:00.000Z","isOriginal":false,"cover":"/assets/image/code-maze.com/adapter/banner.png"},"git":{},"readingTime":{"minutes":3.64,"words":1091},"filePathRelative":"code-maze.com/adapter.md"}');export{D as comp,P as data};
