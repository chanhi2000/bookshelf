import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as a,b as r,a as k,t as h,n as c,g as u,e,r as i,o as v}from"./app-BVguHYKu.js";const b={},f={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},w={href:"https://wakamaifondue.com/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://fonts.google.com/specimen/Jost",target:"_blank",rel:"noopener noreferrer"},L={href:"https://caniuse.com/mdn-css_properties_scroll-timeline",target:"_blank",rel:"noopener noreferrer"};function j(t,n){const p=i("VPCard"),d=i("SiteInfo"),l=i("VPIcon"),o=i("CodePen");return v(),g("div",null,[s("h1",f,[s("a",y,[s("span",null,h(t.$frontmatter.title)+" 관련",1)])]),a(p,c(u({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n[10]||(n[10]=s("nav",{class:"table-of-contents"},[s("ul")],-1)),n[11]||(n[11]=s("hr",null,null,-1)),a(d,{name:"Scroll-Driven Letter Grid",desc:"scroll-timelines go from 0 to 100. Many variable fonts axis have similar ranges, like 100 to 900. Surely that's begging for interplay.",url:"https://frontendmasters.com/blog/scroll-driven-letter-grid/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6059"}),s("p",null,[n[2]||(n[2]=e("I was thinking about variable fonts the other day, and how many of them that deal with a variable axis for their weight go from 100 to 900. It varies — so you can always check ")),s("a",w,[a(l,{icon:"fas fa-globe"}),n[0]||(n[0]=e("wakamaifondue.com"))]),n[3]||(n[3]=e(" if you have the font file. ")),s("a",S,[a(l,{icon:"fa-brands fa-google"}),n[1]||(n[1]=e("Jost on Google Fonts"))]),n[4]||(n[4]=e(" is a classic example. Load that sucker up and you can use whatever weight you want."))]),a(o,{user:"chriscoyier","slug-hash":"JodOePb",title:"Jost Variable","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),s("p",null,[n[6]||(n[6]=e("I was also thinking about the “simple” kind of scroll-driven animations where all it does is move a ")),n[7]||(n[7]=s("code",null,"@keyframe",-1)),n[8]||(n[8]=e(" animation from 0% to 100% while a scrolling element goes from 0% to 100% “scrolled”. Fair warning that ")),s("a",L,[a(l,{icon:"iconfont icon-caniuse"}),n[5]||(n[5]=e("browser support isn’t great"))]),n[9]||(n[9]=e(", but it’s just a fun thing that can easily just not happen."))]),n[12]||(n[12]=s("p",null,"It’s deliciously simple to use:",-1)),a(o,{user:"chriscoyier","slug-hash":"azOVQmp",title:"Scroll Loader","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),n[13]||(n[13]=r(`<p>We can smash these things together. We should be able to map 0%-100% to 100-900 pretty easily, right?</p><p>Right.</p><p>Let’s made a grid of 100 letters inside a <code>&lt;div id=&quot;grid&quot;&gt;</code>. We could use any kind of HTML generating technology. Let’s just vanilla JavaScript here.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">generateGrid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> grid <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;grid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  grid<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    div<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token function">getRandomLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    grid<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">generateGrid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The lay it out as a 10✕10:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">#grid</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>10<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can chew through that grid in Sass applying random weights:</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> 1 <span class="token keyword">through</span> <span class="token selector">100 </span><span class="token punctuation">{</span></span>
<span class="line">  #<span class="token property">grid</span> <span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token variable">#{$i}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">font-weight</span><span class="token punctuation">:</span> 100 <span class="token operator">+</span> math.<span class="token function">ceil</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> 800<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Looks like this.</p>`,9)),a(o,{user:"chriscoyier","slug-hash":"bNdYQqJ",title:"Random Letter Grid with Variable Fonts","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),n[14]||(n[14]=r(`<p>But scroll up and down that preview!</p><p>I attached a scroll timeline to the document like:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">html</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">scroll-timeline</span><span class="token punctuation">:</span> --page-scroll block<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then use that timeline to call an animation like:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">#grid</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">&gt; div</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">animation</span><span class="token punctuation">:</span> to-thin auto linear<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">animation-timeline</span><span class="token punctuation">:</span> --page-scroll<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That animation is named <code>to-thin</code>, but actually I made three different animations: <code>to-thick</code>, <code>to-thin</code>, and <code>to-mid</code>, then applied them in rotation to all the letters, so any given letter does something a bit different.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@keyframes</span> to-thick</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">font-weight</span><span class="token punctuation">:</span> 900<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@keyframes</span> to-thin</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">font-weight</span><span class="token punctuation">:</span> 100<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token atrule"><span class="token rule">@keyframes</span> to-mid</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">font-weight</span><span class="token punctuation">:</span> 450<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>See how I used <code>50%</code> keyframes there which is a nice trick to animate to that value half way through the animation, <strong>then back.</strong></p><p>It then occurred to me I could make a <em>secret message.</em> So I make a <code>@mixin</code> that would override certain letters in CSS to make the message. It still randomized the weight, but all the letters animate to thin while the secret message animates to thick, revealing it as you scroll down.</p>`,9)),a(o,{user:"chriscoyier","slug-hash":"gbpXQQy",title:"Random Letter Grid with Variable Fonts with special message","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),n[15]||(n[15]=s("p",null,"Anyway this is sometimes how I spend my free time and it’s completely normal.",-1)),k(" TODO: add ARTICLE CARD "),a(p,c(u({title:"Scroll-Driven Letter Grid",desc:"scroll-timelines go from 0 to 100. Many variable fonts axis have similar ranges, like 100 to 900. Surely that's begging for interplay.",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/scroll-driven-letter-grid.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const I=m(b,[["render",j]]),G=JSON.parse('{"path":"/frontendmasters.com/scroll-driven-letter-grid.html","title":"Scroll-Driven Letter Grid","lang":"en-US","frontmatter":{"lang":"en-US","title":"Scroll-Driven Letter Grid","description":"Article(s) > Scroll-Driven Letter Grid","icon":"fa-brands fa-css3-alt","category":["CSS","JavaScript","Article(s)"],"tag":["blog","frontendmasters.com","css","js","javascript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Scroll-Driven Letter Grid\\",\\"image\\":[\\"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6059\\"],\\"datePublished\\":\\"2025-06-09T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chris Coyier\\",\\"url\\":\\"https://frontendmasters.com/blog/author/chriscoyier/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/scroll-driven-letter-grid.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Scroll-Driven Letter Grid"}],["meta",{"property":"og:description","content":"Article(s) > Scroll-Driven Letter Grid"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6059"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6059"}],["meta",{"name":"twitter:image:alt","content":"Scroll-Driven Letter Grid"}],["meta",{"property":"article:author","content":"Chris Coyier"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-06-09T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Scroll-Driven Letter Grid"},{"property":"og:description","content":"Scroll-Driven Letter Grid"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/scroll-driven-letter-grid.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-06-09T00:00:00.000Z","isOriginal":false,"author":[{"name":"Chris Coyier","url":"https://frontendmasters.com/blog/author/chriscoyier/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6059"},"git":{},"readingTime":{"minutes":2.52,"words":755},"filePathRelative":"frontendmasters.com/scroll-driven-letter-grid.md","copyright":{"author":"Chris Coyier"}}');export{I as comp,G as data};
