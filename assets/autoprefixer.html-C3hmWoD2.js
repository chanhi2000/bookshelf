import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as n,f as e,b as o,a as b,t as g,n as u,g as d,w as l,e as a,r as p,o as v}from"./app-BVguHYKu.js";const y={},x={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},h={class:"table-of-contents"},S={class:"hint-container info"},A={href:"https://github.com/ai",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/ai/autoprefixer",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/ai/autoprefixer",target:"_blank",rel:"noopener noreferrer"},j={href:"https://caniuse.com/",target:"_blank",rel:"noopener noreferrer"},T={href:"http://gruntjs.com/",target:"_blank",rel:"noopener noreferrer"},W={href:"http://antiflash.ru/",target:"_blank",rel:"noopener noreferrer"},V={href:"http://prefixr.com/",target:"_blank",rel:"noopener noreferrer"},D={href:"http://compass-style.org/",target:"_blank",rel:"noopener noreferrer"},I={href:"http://visionmedia.github.io/nib/",target:"_blank",rel:"noopener noreferrer"},B={href:"http://leaverou.github.io/prefixfree/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/visionmedia/rework",target:"_blank",rel:"noopener noreferrer"},N={href:"http://support.google.com/a/bin/answer.py?answer=33864",target:"_blank",rel:"noopener noreferrer"},L={href:"http://fotorama.io/",target:"_blank",rel:"noopener noreferrer"},G={href:"https://twitter.com/fotoramajs/status/362686759944982528",target:"_blank",rel:"noopener noreferrer"},R={href:"http://gruntjs.com/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://caniuse.com/css-transitions",target:"_blank",rel:"noopener noreferrer"},U={href:"http://middlemanapp.com/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/nodeca/mincer",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/ai/autoprefixer#usage",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/ai/autoprefixer/issues/new",target:"_blank",rel:"noopener noreferrer"},F={href:"https://twitter.com/autoprefixer",target:"_blank",rel:"noopener noreferrer"};function J(c,s){const r=p("VPCard"),i=p("router-link"),f=p("SiteInfo"),t=p("VPIcon");return v(),k("div",null,[n("h1",x,[n("a",w,[n("span",null,g(c.$frontmatter.title)+" 관련",1)])]),e(r,u(d({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",h,[n("ul",null,[n("li",null,[e(i,{to:"#the-problem"},{default:l(()=>s[0]||(s[0]=[a("The Problem")])),_:1,__:[0]})]),n("li",null,[e(i,{to:"#under-the-hood"},{default:l(()=>s[1]||(s[1]=[a("Under the Hood")])),_:1,__:[1]})]),n("li",null,[e(i,{to:"#demo"},{default:l(()=>s[2]||(s[2]=[a("Demo")])),_:1,__:[2]})]),n("li",null,[e(i,{to:"#what-next"},{default:l(()=>s[3]||(s[3]=[a("What Next?")])),_:1,__:[3]})])])]),s[118]||(s[118]=n("hr",null,null,-1)),e(f,{name:"Autoprefixer: A Postprocessor for Dealing with Vendor Prefixes in the Best Possible Way",desc:"The following is a guest post by Andrey Sitnik, the creator of the Autoprefixer tool, a ”postprocessor” for handling vendor prefixes in CSS. Why use this",url:"https://css-tricks.com/autoprefixer",logo:"https://css-tricks/favicon.svg",preview:"https://i0.wp.com/css-tricks/wp-content/uploads/2013/08/autoprefixer-logo.png"}),n("div",S,[s[13]||(s[13]=n("p",{class:"hint-container-title"},"Info",-1)),n("p",null,[s[10]||(s[10]=a("The following is a guest post by ")),n("a",A,[s[4]||(s[4]=a("Andrey Sitnik (")),e(t,{icon:"iconfont icon-github"}),s[5]||(s[5]=n("code",null,"ai",-1)),s[6]||(s[6]=a(")"))]),s[11]||(s[11]=a(", the creator of the ")),n("a",P,[s[7]||(s[7]=a("Autoprefixer (")),e(t,{icon:"iconfont icon-github"}),s[8]||(s[8]=n("code",null,"ai/autoprefixer",-1)),s[9]||(s[9]=a(")"))]),s[12]||(s[12]=a(" tool, a “postprocessor” for handling vendor prefixes in CSS. Why use this instead of your preprocessor or another tool? Many reasons. Andrey will explain."))])]),n("p",null,[n("a",C,[s[14]||(s[14]=a("Autoprefixer (")),e(t,{icon:"iconfont icon-github"}),s[15]||(s[15]=n("code",null,"ai/autoprefixer",-1)),s[16]||(s[16]=a(")"))]),s[18]||(s[18]=a(" parses CSS files and adds vendor prefixes to CSS rules using the ")),n("a",j,[e(t,{icon:"iconfont icon-caniuse"}),s[17]||(s[17]=a("Can I Use"))]),s[19]||(s[19]=a(" database to determine which prefixes are needed."))]),n("p",null,[s[21]||(s[21]=a("All you have to do is add it to your asset building tool (")),n("a",T,[e(t,{icon:"iconfont icon-grunt"}),s[20]||(s[20]=a("Grunt"))]),s[22]||(s[22]=a(", for instance) and you can totally forget about CSS vendor prefixes. Just write regular CSS according to the latest W3C specifications without any prefixes. Like this:"))]),s[119]||(s[119]=o(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">a</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">transition</span><span class="token punctuation">:</span> transform 1s</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Autoprefixer uses a database with current browser popularity and properties support to apply prefixes for you:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">a</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> -webkit-transform 1s<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">transition</span><span class="token punctuation">:</span> -ms-transform 1s<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">transition</span><span class="token punctuation">:</span> transform 1s</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),n("figure",null,[s[25]||(s[25]=n("img",{src:"https://i0.wp.com/css-tricks.com/wp-content/uploads/2013/08/autoprefixer-logo.png",alt:'Autoprefixer logo by <VPIcon icon="fas fa-globe"/>Anton Lovchikov',tabindex:"0",loading:"lazy"},null,-1)),n("figcaption",null,[s[24]||(s[24]=a("Autoprefixer logo by ")),n("a",W,[e(t,{icon:"fas fa-globe"}),s[23]||(s[23]=a("Anton Lovchikov"))])])]),s[120]||(s[120]=n("hr",null,null,-1)),s[121]||(s[121]=n("h2",{id:"the-problem",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#the-problem"},[n("span",null,"The Problem")])],-1)),s[122]||(s[122]=n("p",null,"We can, of course, write vendor CSS prefixes by hand, but it can be tedious and error-prone.",-1)),n("p",null,[s[27]||(s[27]=a("We can use services like ")),n("a",V,[e(t,{icon:"fas fa-globe"}),s[26]||(s[26]=a("Prefixr"))]),s[28]||(s[28]=a(" and text editor plugins, but it is still exhausting to work with big blocks of repeating code."))]),n("p",null,[s[31]||(s[31]=a("We can use mixin libraries with preproccesors like ")),n("a",D,[e(t,{icon:"fas fa-globe"}),s[29]||(s[29]=a("Compass"))]),s[32]||(s[32]=a(" for Sass or ")),n("a",I,[e(t,{icon:"fas fa-globe"}),s[30]||(s[30]=a("nib"))]),s[33]||(s[33]=a(" for Stylus. They solve a lot of problems, but create other problems instead. They force us to use a new syntax. They iterate much slower than modern browsers do, so a stable release can have a lot of unnecessary prefixes, and sometimes we need to create our own mixins."))]),s[123]||(s[123]=n("p",null,[a("And Compass does not really hide prefixes from you since you still need to decide on a lot of questions, for example: Do I need to write a mixin for "),n("code",null,"border-radius"),a("? Do I need to split arguments for "),n("code",null,"+transition"),a(" by comma?")],-1)),n("p",null,[s[35]||(s[35]=a("Lea Verou’s ")),n("a",B,[e(t,{icon:"fas fa-globe"}),s[34]||(s[34]=a("-prefix-free"))]),s[36]||(s[36]=a(" came closest to solving this problem, but using client side libraries is not such a good idea when you take end-user perfomance into account. To avoid doing the same job again and again, it is better to build CSS once: during asset building or project deployment."))]),s[124]||(s[124]=n("hr",null,null,-1)),s[125]||(s[125]=n("h2",{id:"under-the-hood",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#under-the-hood"},[n("span",null,"Under the Hood")])],-1)),s[126]||(s[126]=n("p",null,"Instead of being a preprocessor - such as Sass and Stylus - Autoprefixer is a postprocessor. It doesn’t use any specific syntax and works with common CSS. Autoprefixer can be easily integrated with Sass and Stylus, since it runs after CSS is already compiled.",-1)),n("p",null,[s[40]||(s[40]=a("Autoprefixer is based on ")),n("a",q,[s[37]||(s[37]=a("Rework (")),e(t,{icon:"iconfont icon-github"}),s[38]||(s[38]=n("code",null,"visionmedia/rework",-1)),s[39]||(s[39]=a(")"))]),s[41]||(s[41]=a(", a framework for writing your own CSS postproccesors. Rework parses CSS to useful JavaScript structure and exports it back to CSS after your manipulations."))]),s[127]||(s[127]=n("p",null,"Each version of Autoprefixer contains a copy of latest Can I Use data:",-1)),s[128]||(s[128]=n("ul",null,[n("li",null,"List of current browsers and their popularity."),n("li",null,"List of prefixes required for new CSS properties, values and selectors.")],-1)),n("p",null,[s[43]||(s[43]=a("By default, Autoprefixer will support 2 latest versions of major browsers, much like ")),n("a",N,[e(t,{icon:"fa-brands fa-google"}),s[42]||(s[42]=a("Google does"))]),s[44]||(s[44]=a(". But you can choose, what browsers are supported in your project, by name (like ")),s[45]||(s[45]=n("strong",null,"“ff 21”",-1)),s[46]||(s[46]=a(") or by pattern:"))]),s[129]||(s[129]=o(`<ul><li>Last 2 version of each major browsers using <strong>“last 2 versions”</strong>.</li><li>With more that 1 % of global usage statistics using <strong>“&gt; 1%”</strong>.</li><li>Only newer versions by <strong>“ff &gt; 20”</strong> or <strong>“ff &gt;= 20”</strong>.</li></ul><p>Then Autoprefixer calculates which prefixes are required and which are outdated.</p><p>When Autoprefixer adds prefixes to your CSS, it doesn’t forget about fixing syntax differences. This way, CSS is produced according to the latest W3C specs:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">a</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to top<span class="token punctuation">,</span> black<span class="token punctuation">,</span> white<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> flex</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">::placeholder</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> #ccc</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>compiles to:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">a</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>bottom<span class="token punctuation">,</span> black<span class="token punctuation">,</span> white<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to top<span class="token punctuation">,</span> black<span class="token punctuation">,</span> white<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-flex<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> -moz-box<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> -ms-flexbox<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> flex</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">:-ms-input-placeholder</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> #ccc</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">::-moz-placeholder</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> #ccc</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">::-webkit-input-placeholder</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> #ccc</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">::placeholder</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> #ccc</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Autoprefixer cleans outdated prefixes as well (from legacy code or CSS libraries like Bootstrap), so the following code:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">a</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>compiles to:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">a</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)),n("p",null,[s[51]||(s[51]=a("So after Autoprefixer, CSS will contain only actual vendor prefixes. After ")),n("a",L,[e(t,{icon:"fas fa-globe"}),s[47]||(s[47]=a("Fotorama"))]),s[52]||(s[52]=a(" switched from Compass to Autoprefixer, the CSS file size ")),n("a",G,[s[48]||(s[48]=a("decreased (")),e(t,{icon:"fa-brands fa-x-twitter"}),s[49]||(s[49]=n("code",null,"fotoramajs",-1)),s[50]||(s[50]=a(")"))]),s[53]||(s[53]=a(" by almost 20%."))]),s[130]||(s[130]=n("hr",null,null,-1)),s[131]||(s[131]=n("h2",{id:"demo",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#demo"},[n("span",null,"Demo")])],-1)),n("p",null,[s[55]||(s[55]=a("If you still don’t use any kind of tool to automate the building of your assets, be sure to check out ")),n("a",R,[e(t,{icon:"iconfont icon-grunt"}),s[54]||(s[54]=a("Grunt"))]),s[56]||(s[56]=a(". I highly recommend to start using build tools. This can open you a whole new world of “sugar” syntaxes, time-saving mixin libraries and useful image processing tools. All of developers’ productivity methods to save a lot of nerves and time (the freedom to choose languages, code re-use, the ability to use third-party libraries) are available now for front-end programmers."))]),n("p",null,[s[57]||(s[57]=a("Let’s create a project directory and write simple CSS in ")),e(t,{icon:"fa-brands fa-css3-alt"}),s[58]||(s[58]=n("code",null,"style.css",-1)),s[59]||(s[59]=a(":"))]),s[132]||(s[132]=o(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">a</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>For this example, we will use Grunt. First, we will need to install <code>grunt-autoprefixer</code> using npm:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> <span class="token function">install</span> grunt-cli grunt-contrib-watch grunt-autoprefixer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,3)),n("p",null,[s[60]||(s[60]=a("Then we should create ")),e(t,{icon:"fa-brands fa-js"}),s[61]||(s[61]=n("code",null,"Gruntfile.js",-1)),s[62]||(s[62]=a(" and enable Autoprefixer:"))]),s[133]||(s[133]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="Gruntfile.js"><span>Gruntfile.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">grunt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  grunt<span class="token punctuation">.</span><span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">autoprefixer</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">dist</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token string-property property">&quot;build/style.css&quot;</span><span class="token operator">:</span> <span class="token string">&quot;style.css&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">styles</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style.css&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">tasks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;autoprefixer&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  grunt<span class="token punctuation">.</span><span class="token function">loadNpmTasks</span><span class="token punctuation">(</span><span class="token string">&quot;grunt-autoprefixer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  grunt<span class="token punctuation">.</span><span class="token function">loadNpmTasks</span><span class="token punctuation">(</span><span class="token string">&quot;grunt-contrib-watch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),n("p",null,[s[63]||(s[63]=a("This config enables the compilation of ")),e(t,{icon:"fa-brands fa-css3-alt"}),s[64]||(s[64]=n("code",null,"style.css",-1)),s[65]||(s[65]=a(" to ")),e(t,{icon:"fas fa-folder-open"}),s[66]||(s[66]=n("code",null,"build/",-1)),e(t,{icon:"fa-brands fa-css3-alt"}),s[67]||(s[67]=n("code",null,"style.css",-1)),s[68]||(s[68]=a(" using Autoprefixer. Also we will use ")),s[69]||(s[69]=n("code",null,"grunt-contrib-watch",-1)),s[70]||(s[70]=a(" to recompile ")),e(t,{icon:"fas fa-folder-open"}),s[71]||(s[71]=n("code",null,"build/",-1)),e(t,{icon:"fa-brands fa-css3-alt"}),s[72]||(s[72]=n("code",null,"style.css",-1)),s[73]||(s[73]=a(" every time style.css changes."))]),s[134]||(s[134]=o(`<p>Let’s start Grunt’s Watch:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">./node_modules/.bin/grunt <span class="token function">watch</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,2)),n("p",null,[s[74]||(s[74]=a("Now, we’ll add a CSS3 expression to ")),e(t,{icon:"fa-brands fa-css3-alt"}),s[75]||(s[75]=n("code",null,"style.css",-1)),s[76]||(s[76]=a(" and save the file:"))]),s[135]||(s[135]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="style.css"><span>style.css</span></div><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">a</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 2em<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),n("p",null,[s[77]||(s[77]=a("The magic has just happened and now we have a ")),e(t,{icon:"fas fa-folder-open"}),s[78]||(s[78]=n("code",null,"build/",-1)),e(t,{icon:"fa-brands fa-css3-alt"}),s[79]||(s[79]=n("code",null,"style.css",-1)),s[80]||(s[80]=a(" file. Grunt detected the change in ")),e(t,{icon:"fa-brands fa-css3-alt"}),s[81]||(s[81]=n("code",null,"style.css",-1)),s[82]||(s[82]=a(" and launched the Autoprefixer task. Autoprefixer did find the ")),s[83]||(s[83]=n("code",null,"calc()",-1)),s[84]||(s[84]=a(" value unit, that ")),s[85]||(s[85]=n("a",{href:"https://caniuse.com/calc",target:"_blank",rel:"noopener noreferrer"},"needs a vendor",-1)),s[86]||(s[86]=a(" prefix for Safari 6."))]),s[136]||(s[136]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="style.css"><span>style.css</span></div><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">a</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">-webkit-calc</span><span class="token punctuation">(</span>50% - 2em<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 2em<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),n("p",null,[s[87]||(s[87]=a("Now we’ll add a little bit more complicated CSS3 to ")),e(t,{icon:"fa-brands fa-css3-alt"}),s[88]||(s[88]=n("code",null,"style.css",-1)),s[89]||(s[89]=a(" and save the file:"))]),s[137]||(s[137]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="style.css"><span>style.css</span></div><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">a</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 2em<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">transition</span><span class="token punctuation">:</span> transform 1s</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),n("p",null,[s[91]||(s[91]=a("Autoprefixer already knows that Chrome, Safari 6 and Opera 15 ")),n("a",E,[e(t,{icon:"iconfont icon-caniuse"}),s[90]||(s[90]=a("need"))]),s[92]||(s[92]=a(" prefixes for ")),s[93]||(s[93]=n("code",null,"transition",-1)),s[94]||(s[94]=a(" and ")),s[95]||(s[95]=n("code",null,"transform",-1)),s[96]||(s[96]=a(". But IE 9 also needs a prefix for ")),s[97]||(s[97]=n("code",null,"transform",-1)),s[98]||(s[98]=a(", which we used as value in ")),s[99]||(s[99]=n("code",null,"transition",-1)),s[100]||(s[100]=a("."))]),s[138]||(s[138]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="style.css"><span>style.css</span></div><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">a</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">-webkit-calc</span><span class="token punctuation">(</span>1% + 1em<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>1% + 1em<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> -webkit-transform 1s<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">transition</span><span class="token punctuation">:</span> -ms-transform 1s<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">transition</span><span class="token punctuation">:</span> transform 1s</span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Autoprefixer is designed to perform all the dirty work for you. It will check the Can I Use database, write all the prefixes needed and it does understand the difference between specifications as well. Welcome to the future of CSS3 — no more vendor prefixes!</p><hr><h2 id="what-next" tabindex="-1"><a class="header-anchor" href="#what-next"><span>What Next?</span></a></h2>`,4)),n("ol",null,[n("li",null,[s[106]||(s[106]=a("Autoprefixer supports Ruby on Rails, ")),n("a",U,[e(t,{icon:"fas fa-globe"}),s[101]||(s[101]=a("Middleman"))]),s[107]||(s[107]=a(", ")),n("a",O,[e(t,{icon:"iconfont icon-github"}),s[102]||(s[102]=n("code",null,"nodeca/mincer",-1))]),s[108]||(s[108]=a(", Grunt, Sublime Text. Learn more about how to use it with your environment in the ")),n("a",z,[s[103]||(s[103]=a("documentation (")),e(t,{icon:"iconfont icon-github"}),s[104]||(s[104]=n("code",null,"ai/autoprefixer",-1)),s[105]||(s[105]=a(")"))]),s[109]||(s[109]=a("."))]),n("li",null,[s[113]||(s[113]=a("If your environment doesn’t support Autoprefixer yet, please, ")),n("a",M,[s[110]||(s[110]=a("report it (")),e(t,{icon:"iconfont icon-github"}),s[111]||(s[111]=n("code",null,"ai/autoprefixer",-1)),s[112]||(s[112]=a(")"))]),s[114]||(s[114]=a(" and I’ll try to help."))]),n("li",null,[s[116]||(s[116]=a("Follow ")),n("a",F,[e(t,{icon:"fa-brands fa-x-twitter"}),s[115]||(s[115]=n("code",null,"@autoprefixer",-1))]),s[117]||(s[117]=a(" for info on updates and new features."))])]),b(" TODO: add ARTICLE CARD "),e(r,u(d({title:"Autoprefixer: A Postprocessor for Dealing with Vendor Prefixes in the Best Possible Way",desc:"The following is a guest post by Andrey Sitnik, the creator of the Autoprefixer tool, a ”postprocessor” for handling vendor prefixes in CSS. Why use this",link:"https://chanhi2000.github.io/bookshelf/css-tricks.com/autoprefixer.html",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16)])}const $=m(y,[["render",J]]),K=JSON.parse('{"path":"/css-tricks.com/autoprefixer.html","title":"Autoprefixer: A Postprocessor for Dealing with Vendor Prefixes in the Best Possible Way","lang":"en-US","frontmatter":{"lang":"en-US","title":"Autoprefixer: A Postprocessor for Dealing with Vendor Prefixes in the Best Possible Way","description":"Article(s) > Autoprefixer: A Postprocessor for Dealing with Vendor Prefixes in the Best Possible Way","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","css-tricks.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Autoprefixer: A Postprocessor for Dealing with Vendor Prefixes in the Best Possible Way\\",\\"image\\":[\\"http://antiflash.ru/\\"],\\"datePublished\\":\\"2017-04-13T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Andrey Sitnik\\",\\"url\\":\\"https://css-tricks.com/author/andreysitnik/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/autoprefixer.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Autoprefixer: A Postprocessor for Dealing with Vendor Prefixes in the Best Possible Way"}],["meta",{"property":"og:description","content":"Article(s) > Autoprefixer: A Postprocessor for Dealing with Vendor Prefixes in the Best Possible Way"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2013/08/autoprefixer-logo.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2013/08/autoprefixer-logo.png"}],["meta",{"name":"twitter:image:alt","content":"Autoprefixer: A Postprocessor for Dealing with Vendor Prefixes in the Best Possible Way"}],["meta",{"property":"article:author","content":"Andrey Sitnik"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"css-tricks.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2017-04-13T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Autoprefixer: A Postprocessor for Dealing with Vendor Prefixes in the Best Possible Way"},{"property":"og:description","content":"Autoprefixer: A Postprocessor for Dealing with Vendor Prefixes in the Best Possible Way"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/autoprefixer.html"}]],"prev":"/programming/css/articles/README.md","date":"2017-04-13T00:00:00.000Z","isOriginal":false,"author":[{"name":"Andrey Sitnik","url":"https://css-tricks.com/author/andreysitnik/"}],"cover":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2013/08/autoprefixer-logo.png"},"git":{},"readingTime":{"minutes":5.57,"words":1670},"filePathRelative":"css-tricks.com/autoprefixer.md","copyright":{"author":"Andrey Sitnik"}}');export{$ as comp,K as data};
