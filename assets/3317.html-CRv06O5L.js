import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as e,b as p,a as v,t as h,n as r,g as u,w as o,e as a,r as l,o as b}from"./app-BVguHYKu.js";const f={},S={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},x={href:"https://napkin.ai",target:"_blank",rel:"noopener noreferrer"},j={href:"https://learn.microsoft.com/vi-vn/microsoft-edge/devtools/storage/sessionstorage",target:"_blank",rel:"noopener noreferrer"},z={href:"https://privacysandbox.google.com/cookies/basics/what-are-cookies?hl=ko",target:"_blank",rel:"noopener noreferrer"};function I(d,n){const c=l("VPCard"),t=l("router-link"),k=l("SiteInfo"),i=l("VPIcon");return b(),m("div",null,[s("h1",S,[s("a",y,[s("span",null,h(d.$frontmatter.title)+" 관련",1)])]),e(c,r(u({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",w,[s("ul",null,[s("li",null,[e(t,{to:"#localstorage-sessionstorage-cookie-차이와-실전-전략"},{default:o(()=>n[0]||(n[0]=[a("localStorage, sessionStorage, cookie 차이와 실전 전략")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#브라우저-저장소의-종류와-특성"},{default:o(()=>n[1]||(n[1]=[a("브라우저 저장소의 종류와 특성")])),_:1,__:[1]}),s("ul",null,[s("li",null,[e(t,{to:"#_1-localstorage"},{default:o(()=>n[2]||(n[2]=[a("1) localStorage")])),_:1,__:[2]})]),s("li",null,[e(t,{to:"#_2-sessionstorage"},{default:o(()=>n[3]||(n[3]=[a("2) sessionStorage")])),_:1,__:[3]})]),s("li",null,[e(t,{to:"#_3-cookie"},{default:o(()=>n[4]||(n[4]=[a("3) cookie")])),_:1,__:[4]})])])]),s("li",null,[e(t,{to:"#실무에서의-선택-기준은"},{default:o(()=>n[5]||(n[5]=[a("실무에서의 선택 기준은?")])),_:1,__:[5]}),s("ul",null,[s("li",null,[e(t,{to:"#_1-인증-토큰-저장은-localstorage보다-cookie"},{default:o(()=>n[6]||(n[6]=[a("1) 인증 토큰 저장은 localStorage보다 cookie?")])),_:1,__:[6]})]),s("li",null,[e(t,{to:"#_2-상태-저장-vs-세션-유지"},{default:o(()=>n[7]||(n[7]=[a("2) 상태 저장 vs 세션 유지")])),_:1,__:[7]})])])]),s("li",null,[e(t,{to:"#주의해야-할-점은"},{default:o(()=>n[8]||(n[8]=[a("주의해야 할 점은?")])),_:1,__:[8]}),s("ul",null,[s("li",null,[e(t,{to:"#_1-json-저장과-파싱"},{default:o(()=>n[9]||(n[9]=[a("1) JSON 저장과 파싱")])),_:1,__:[9]})]),s("li",null,[e(t,{to:"#_2-스토리지-초과-시-예외-처리"},{default:o(()=>n[10]||(n[10]=[a("2) 스토리지 초과 시 예외 처리")])),_:1,__:[10]})]),s("li",null,[e(t,{to:"#_3-ttl-직접-구현하는-경우"},{default:o(()=>n[11]||(n[11]=[a("3) TTL 직접 구현하는 경우")])),_:1,__:[11]})]),s("li",null,[e(t,{to:"#_4-스토리지-동기화-이벤트-처리"},{default:o(()=>n[12]||(n[12]=[a("4) 스토리지 동기화 이벤트 처리")])),_:1,__:[12]})])])]),s("li",null,[e(t,{to:"#마치며"},{default:o(()=>n[13]||(n[13]=[a("마치며")])),_:1,__:[13]})])])]),n[37]||(n[37]=s("hr",null,null,-1)),e(k,{name:"브라우저 저장소 완전 정복: 로컬, 세션, 쿠키 사용 전략",desc:"웹 애플리케이션에서는 사용자 상태나 임시 데이터, 설정값 등을 클라이언트 측에 저장해야 할 일이 자주 발생합니다. 예를 들어, “테마 설정, 로그인 정보, 장바구니 상태 등은 사용자가 새로고침을 하거나, 브라우저를 닫았다가 다시 열었을 때도 유지되면 좋겠습니다.”라는 요구를 충족시키기 위해 브라우저는 몇 가지 저장소 API를 제공합니다. 대표적으로 localStorage, sessionStorage, 그리고 cookie가 있습니다. 이번 글에서는 각 브라우저 저장소의 차이점과 사용 목적, 주의할 점, 그리고 실무에서의 안전한 사용 전략까지 알아보겠습니다.",url:"https://yozm.wishket.com/magazine/detail/3317/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/3317/image1.png"}),n[38]||(n[38]=p('<h2 id="localstorage-sessionstorage-cookie-차이와-실전-전략" tabindex="-1"><a class="header-anchor" href="#localstorage-sessionstorage-cookie-차이와-실전-전략"><span><code>localStorage</code>, <code>sessionStorage</code>, <code>cookie</code> 차이와 실전 전략</span></a></h2><p>웹 애플리케이션에서는 사용자 상태나 임시 데이터, 설정값 등을 클라이언트 측에 저장해야 할 일이 자주 발생합니다. 예를 들어, “테마 설정, 로그인 정보, 장바구니 상태 등은 사용자가 새로고침을 하거나, 브라우저를 닫았다가 다시 열었을 때도 유지되면 좋겠습니다.”라는 요구를 충족시키기 위해 브라우저는 몇 가지 저장소 API를 제공합니다. 대표적으로 <code>localStorage</code>, <code>sessionStorage</code>, 그리고 <code>cookie</code>가 있습니다.</p>',2)),s("figure",null,[n[24]||(n[24]=s("img",{src:"https://wishket.com/media/news/3317/image1.png",alt:', ,  차이<br/><출처: <VPIcon icon="fas fa-globe"/>Napkin.ai 제작>',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[15]||(n[15]=s("code",null,"localStorage",-1)),n[16]||(n[16]=a(", ")),n[17]||(n[17]=s("code",null,"sessionStorage",-1)),n[18]||(n[18]=a(", ")),n[19]||(n[19]=s("code",null,"cookie",-1)),n[20]||(n[20]=a(" 차이")),n[21]||(n[21]=s("br",null,null,-1)),n[22]||(n[22]=a("<출처: ")),s("a",x,[e(i,{icon:"fas fa-globe"}),n[14]||(n[14]=a("Napkin.ai"))]),n[23]||(n[23]=a(" 제작>"))])]),n[39]||(n[39]=p(`<p>이 세 가지 브라우저 저장소는 저장 위치도 다르고, 저장 방식, 전송 방식, 용량 제한, 보안 측면에서도 각각 큰 차이가 있습니다. 단순히 데이터를 저장할 수 있다는 이유로 아무 저장소나 사용하는 것은 종종 보안 문제나 유지보수의 어려움을 낳기도 합니다. 이번 글에서는 각 브라우저 저장소의 차이점과 사용 목적, 주의할 점, 그리고 실무에서의 안전한 사용 전략까지 알아보겠습니다.</p><hr><h2 id="브라우저-저장소의-종류와-특성" tabindex="-1"><a class="header-anchor" href="#브라우저-저장소의-종류와-특성"><span>브라우저 저장소의 종류와 특성</span></a></h2><p>웹 브라우저는 클라이언트 측 데이터를 저장할 수 있는 여러 메커니즘을 제공합니다. 그중 가장 흔히 사용되는 것은 <code>localStorage</code>, <code>sessionStorage</code>, 그리고 <code>cookie</code>입니다. 이들은 각각의 특성과 목적에 따라 적절히 선택하여 사용해야 합니다.</p><h3 id="_1-localstorage" tabindex="-1"><a class="header-anchor" href="#_1-localstorage"><span>1) <code>localStorage</code></span></a></h3><p><code>localStorage</code>는 도메인 단위로 데이터를 영구적으로 저장할 수 있는 API입니다. 사용자가 브라우저를 닫고 다시 열어도 데이터는 유지되며, 페이지 새로고침이나 탭 변경에도 영향을 받지 않습니다. 따라서 테마, 언어 설정, 비로그인 상태의 장바구니 등 장기적으로 유지돼야 하는 데이터를 저장하는 데 적합합니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 다크 모드 상태 저장</span></span>
<span class="line">localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;theme&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dark&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 저장된 값 불러오기</span></span>
<span class="line"><span class="token keyword">const</span> theme <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;theme&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 삭제</span></span>
<span class="line">localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;theme&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>localStorage</code>의 데이터는 문자(string)로 저장되기 때문에, 객체나 배열을 저장하려면 반드시 <code>JSON.stringify</code>와 <code>JSON.parse</code>를 사용해야 합니다. 예외적으로, 숫자나 불린 값도 자동으로 문자열로 변환됩니다.</p><figure><img src="https://wishket.com/media/news/3317/image2.png" alt="" tabindex="0" loading="lazy"><figcaption><code>localStorage</code></figcaption></figure><p>또한 <code>localStorage</code>는 브라우저마다 약 5MB 정도의 용량 제한이 있습니다. 이는 쿠키(4KB 내외)에 비하면 매우 넉넉한 편입니다. 하지만 <code>localStorage</code>는 서버와 자동으로 연동되지 않으며, XSS 공격에 취약하기 때문에 민감한 정보를 저장하는 것은 금물입니다.</p><h3 id="_2-sessionstorage" tabindex="-1"><a class="header-anchor" href="#_2-sessionstorage"><span>2) <code>sessionStorage</code></span></a></h3><p><code>sessionStorage</code>는 브라우저 탭 단위로 데이터를 저장합니다. 같은 도메인이라 하더라도 탭을 새로 열면 별도의 <code>sessionStorage</code> 공간이 생성되며, 기존 탭의 <code>sessionStorage</code>와는 공유되지 않습니다. 탭을 닫는 즉시 데이터가 사라지기 때문에 임시 데이터나 사용자 인터페이스 상태를 저장하는 데 적합합니다.</p>`,12)),s("figure",null,[n[30]||(n[30]=s("img",{src:"https://wishket.com/media/news/3317/image3.png",alt:'<br/><출처: <VPIcon icon="fa-brands fa-microsoft"/>learn.microsoft>',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[26]||(n[26]=s("code",null,"sessionStorage",-1)),n[27]||(n[27]=s("br",null,null,-1)),n[28]||(n[28]=a("<출처: ")),s("a",j,[e(i,{icon:"fa-brands fa-microsoft"}),n[25]||(n[25]=a("learn.microsoft"))]),n[29]||(n[29]=a(">"))])]),n[40]||(n[40]=p(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 팝업 노출 여부 저장</span></span>
<span class="line">sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;popupShown&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 불러오기</span></span>
<span class="line"><span class="token keyword">const</span> shown <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;popupShown&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>실무에서는 폼 입력 도중 탭을 닫는 것을 방지하거나, 안내 메시지를 한 번만 보여주는 데 자주 사용됩니다. 다만, 쿠키와 달리 서버로 자동 전송되지 않으며 <code>localStorage</code>처럼 5MB 정도의 용량 제한이 존재합니다.</p><h3 id="_3-cookie" tabindex="-1"><a class="header-anchor" href="#_3-cookie"><span>3) cookie</span></a></h3><p><code>cookie</code>는 브라우저 저장소 중 유일하게 클라이언트와 서버 간의 요청에 자동으로 포함되는 방식입니다. 즉, 쿠키는 HTTP 요청 시마다 서버로 자동 전송되기 때문에 인증 정보나 세션 식별자 등을 저장하는 데 매우 유용합니다.</p>`,4)),s("figure",null,[n[36]||(n[36]=s("img",{src:"https://wishket.com/media/news/3317/image4.png",alt:'cookie의 작동 방식<br/><출처: <VPIcon icon="fa-brands fa-google"/>privacysandbox>',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[32]||(n[32]=a("cookie의 작동 방식")),n[33]||(n[33]=s("br",null,null,-1)),n[34]||(n[34]=a("<출처: ")),s("a",z,[e(i,{icon:"fa-brands fa-google"}),n[31]||(n[31]=a("privacysandbox"))]),n[35]||(n[35]=a(">"))])]),n[41]||(n[41]=p(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 쿠키 설정 (자바스크립트)</span></span>
<span class="line">document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&#39;token=abc123; path=/; max-age=3600; Secure; SameSite=Strict&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>쿠키는 크기가 약 4KB 내외로 제한되며, 도메인과 경로(path)에 따라 전송 범위를 세밀하게 조절할 수 있습니다. 예를 들어, <code>path=/admin</code>으로 설정된 쿠키는 <code>/admin</code> 하위 경로에서만 접근 가능하게 할 수 있습니다. 또한 Secure 플래그를 사용하면 HTTPS에서만 전송되며, <code>HttpOnly</code>를 설정하면 자바스크립트로 접근이 불가능해 보안이 강화됩니다.</p><p><code>HttpOnly</code> 쿠키는 XSS 공격에 강하지만, 클라이언트 측에서 직접 토큰 값을 읽을 수 없기 때문에 SPA 구조에서는 불편함이 생길 수 있습니다. 이런 경우 <code>localStorage</code>를 사용하는 대신, Refresh Token만 <code>HttpOnly</code> 쿠키에 저장하고 Access Token은 메모리에서 관리하는 방식을 혼합하여 사용하는 전략도 있습니다.</p><hr><h2 id="실무에서의-선택-기준은" tabindex="-1"><a class="header-anchor" href="#실무에서의-선택-기준은"><span>실무에서의 선택 기준은?</span></a></h2><p>자바스크립트 프로젝트에서 저장소를 선택할 때는 단순한 기능만 볼 것이 아니라, 동작 방식, 보안, 생명주기, 전송 여부까지 고려해야 합니다.</p><h3 id="_1-인증-토큰-저장은-localstorage보다-cookie" tabindex="-1"><a class="header-anchor" href="#_1-인증-토큰-저장은-localstorage보다-cookie"><span>1) 인증 토큰 저장은 <code>localStorage</code>보다 <code>cookie</code>?</span></a></h3><p>많은 개발자들이 처음에는 <code>localStorage</code>에 JWT 토큰을 저장하는 실수를 합니다. 하지만 <code>localStorage</code>는 XSS 공격에 매우 취약합니다. 공격자가 스크립트를 삽입하여 <code>localStorage</code> 값을 탈취하면 사용자의 인증 정보가 노출될 수 있습니다.</p><figure><img src="https://wishket.com/media/news/3317/image5.png" alt="CSRF, XSS" tabindex="0" loading="lazy"><figcaption>CSRF, XSS</figcaption></figure><p>반면, 쿠키는 <code>HttpOnly</code> 설정을 통해 자바스크립트로 접근할 수 없게 만들 수 있습니다. 이는 XSS로부터는 안전하지만, 쿠키는 모든 요청에 자동으로 포함되기 때문에 CSRF(Cross-Site Request Forgery) 공격에는 더 취약해질 수 있습니다. 이를 방지하기 위해 <code>SameSite=Lax</code> 또는 <code>Strict</code> 옵션을 반드시 설정해야 합니다.</p><p>실무에서는 <code>Refresh Token</code>은 <code>HttpOnly</code> 쿠키에 저장하고, <code>Access Token</code>은 메모리나 <code>sessionStorage</code>에 보관하는 방식이 많이 사용됩니다. 인증 요청을 보낼 때는 이 <code>Access Token</code>을 <code>Authorization</code> 헤더에 직접 실어 보내는 구조입니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">Authorization</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>accessToken<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이처럼 각 저장소의 장단점을 조합한 하이브리드 전략을 활용하면, 보안성과 사용자 경험을 모두 만족시키는 인증 시스템을 구축할 수 있습니다.</p><h3 id="_2-상태-저장-vs-세션-유지" tabindex="-1"><a class="header-anchor" href="#_2-상태-저장-vs-세션-유지"><span>2) 상태 저장 vs 세션 유지</span></a></h3><p>사용자의 인터페이스 상태나 설정값은 localStorage가 적합합니다. 브라우저를 닫았다 다시 열어도 유지되기 때문에, 테마나 언어 설정, 장바구니 목록 등을 저장하기 좋습니다. 반면, 일시적인 사용자 상태나 폼 입력 도중의 데이터는 sessiongStorage가 알맞습니다. 탭이 닫히면 삭제되므로, 탭 간의 독립성을 보장할 수 있습니다. 예를 들어, 설문조사를 진행하다가 새 탭을 열면 새로운 세션으로 취급할 수 있죠.</p><p>서버와 통신이 필요한 세션 상태 유지는 쿠키로 처리하는 것이 가장 적절합니다. 서버에서는 쿠키의 세션 ID를 바탕으로 사용자의 상태를 관리하게 됩니다.</p><hr><h2 id="주의해야-할-점은" tabindex="-1"><a class="header-anchor" href="#주의해야-할-점은"><span>주의해야 할 점은?</span></a></h2><p>브라우저 저장소를 사용할 때는 몇 가지 주의해야 할 기술적인 디테일이 있습니다. 단순히 API를 쓰는 것보다, 이 저장소들이 가진 특성과 한계점을 이해하고 적절히 보완하는 것이 중요합니다.</p><h3 id="_1-json-저장과-파싱" tabindex="-1"><a class="header-anchor" href="#_1-json-저장과-파싱"><span>1) JSON 저장과 파싱</span></a></h3><p><code>localStorage</code>와 <code>sessionStorage</code>는 문자열만 저장할 수 있기 때문에, 객체나 배열은 반드시 <code>JSON</code>으로 변환하여 저장하고, 다시 사용할 때는 파싱해야 합니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> cart <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;햄버거&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;cart&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>cart<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> storedCart <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;cart&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이때 <code>JSON.parse</code> 과정에서 예외가 발생할 수 있기 때문에 try-catch로 감싸는 것이 안전합니다.</p><h3 id="_2-스토리지-초과-시-예외-처리" tabindex="-1"><a class="header-anchor" href="#_2-스토리지-초과-시-예외-처리"><span>2) 스토리지 초과 시 예외 처리</span></a></h3><p><code>localStorage</code>나 <code>sessionStorage</code>의 저장 용량이 초과되면 Quota Exceeded Error가 발생합니다. 사용자가 지나치게 많은 데이터를 저장하거나, 의도하지 않은 루프로 인해 저장이 반복될 경우 발생할 수 있습니다. 이때는 예외 처리를 통해 사용자에게 경고하거나 대체 동작을 유도해야 합니다.</p><h3 id="_3-ttl-직접-구현하는-경우" tabindex="-1"><a class="header-anchor" href="#_3-ttl-직접-구현하는-경우"><span>3) TTL 직접 구현하는 경우</span></a></h3><p><code>localStorage</code>와 <code>sessionStorage</code>는 저장된 데이터에 자동으로 만료 시간이 적용되지 않습니다. 만료 처리를 하고 싶다면 타임스탬프를 함께 저장하고, 데이터를 사용할 때 유효한지 검사해야 합니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">expires</span><span class="token operator">:</span> now <span class="token operator">+</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> raw <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> raw<span class="token punctuation">.</span>expires<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-스토리지-동기화-이벤트-처리" tabindex="-1"><a class="header-anchor" href="#_4-스토리지-동기화-이벤트-처리"><span>4) 스토리지 동기화 이벤트 처리</span></a></h3><p><code>localStorage</code>는 탭 간 동기화를 지원합니다. 다른 탭에서 저장소가 변경되면 storage 이벤트가 발생하므로, 이를 활용하면 실시간 동기화가 가능합니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;storage&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">&#39;theme&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>className <span class="token operator">=</span> e<span class="token punctuation">.</span>newValue<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>반면, <code>sessionStorage</code>와 쿠키는 이런 실시간 동기화 이벤트를 지원하지 않기 때문에 동기화가 필요하다면 BroadcastChannel API 같은 별도 통신 수단을 고려해야 합니다.</p><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>브라우저 저장소는 웹 개발에 있어 매우 강력한 도구입니다. 그러나 각각의 저장소는 쓰임새와 보안 특성이 전혀 다르기 때문에, 단순히 데이터를 저장할 수 있다는 이유로 무분별하게 사용하는 것은 피해야 합니다. 용량 제한, 만료 정책, 보안 취약점, 접근 범위 등을 정확히 이해하고 사용하는 것이 무엇보다 중요합니다.</p><p><code>localStorage</code>는 장기 상태를 저장하는 데 유용하지만, 민감 정보는 저장하지 말아야 하며, <code>sessionStorage</code>는 탭 단위의 임시 저장소로 활용 가치가 높습니다. 쿠키는 서버와 연동된 인증에 적합하지만, 보안 옵션을 반드시 설정해야 안전합니다. 결국 가장 중요한 것은 각 저장소의 특성과 한계를 이해하고, 그에 맞는 전략을 수립하는 것입니다. 저장소 선택 하나가 보안과 사용자 경험을 좌우할 수 있다는 사실을 꼭 기억해 두시면 좋겠습니다.</p>`,36)),v(" TODO: add ARTICLE CARD "),e(c,r(u({title:"브라우저 저장소 완전 정복: 로컬, 세션, 쿠키 사용 전략",desc:"웹 애플리케이션에서는 사용자 상태나 임시 데이터, 설정값 등을 클라이언트 측에 저장해야 할 일이 자주 발생합니다. 예를 들어, “테마 설정, 로그인 정보, 장바구니 상태 등은 사용자가 새로고침을 하거나, 브라우저를 닫았다가 다시 열었을 때도 유지되면 좋겠습니다.”라는 요구를 충족시키기 위해 브라우저는 몇 가지 저장소 API를 제공합니다. 대표적으로 localStorage, sessionStorage, 그리고 cookie가 있습니다. 이번 글에서는 각 브라우저 저장소의 차이점과 사용 목적, 주의할 점, 그리고 실무에서의 안전한 사용 전략까지 알아보겠습니다.",link:"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3317.html",logo:"https://yozm.wishket.com/favicon.ico",background:"rgba(84,7,224,0.2)"})),null,16)])}const T=g(f,[["render",I]]),P=JSON.parse('{"path":"/yozm.wishket.com/3317.html","title":"브라우저 저장소 완전 정복: 로컬, 세션, 쿠키 사용 전략","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"브라우저 저장소 완전 정복: 로컬, 세션, 쿠키 사용 전략","description":"Article(s) > 브라우저 저장소 완전 정복: 로컬, 세션, 쿠키 사용 전략","icon":"fa-brands fa-js","category":["JavaScript","Article(s)"],"tag":["blog","yozm.wishket.com","js","javascript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"브라우저 저장소 완전 정복: 로컬, 세션, 쿠키 사용 전략\\",\\"image\\":[\\"https://napkin.ai\\",\\"https://wishket.com/media/news/3317/image2.png\\",\\"https://learn.microsoft.com/vi-vn/microsoft-edge/devtools/storage/sessionstorage\\",\\"https://privacysandbox.google.com/cookies/basics/what-are-cookies?hl=ko\\",\\"https://wishket.com/media/news/3317/image5.png\\"],\\"datePublished\\":\\"2025-09-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"효빈\\",\\"url\\":\\"https://yozm.wishket.com/magazine/@hbin12212/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3317.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"브라우저 저장소 완전 정복: 로컬, 세션, 쿠키 사용 전략"}],["meta",{"property":"og:description","content":"Article(s) > 브라우저 저장소 완전 정복: 로컬, 세션, 쿠키 사용 전략"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/3317/image1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/3317/image1.png"}],["meta",{"name":"twitter:image:alt","content":"브라우저 저장소 완전 정복: 로컬, 세션, 쿠키 사용 전략"}],["meta",{"property":"article:author","content":"효빈"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-09-01T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 브라우저 저장소 완전 정복: 로컬, 세션, 쿠키 사용 전략"},{"property":"og:description","content":"브라우저 저장소 완전 정복: 로컬, 세션, 쿠키 사용 전략"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3317.html"}]],"prev":"/programming/js/articles/README.md","date":"2025-09-01T00:00:00.000Z","isOriginal":false,"author":[{"name":"효빈","url":"https://yozm.wishket.com/magazine/@hbin12212/"}],"cover":"https://yozm.wishket.com/media/news/3317/image1.png"},"git":{},"readingTime":{"minutes":1.5,"words":450},"filePathRelative":"yozm.wishket.com/3317.md","copyright":{"author":"효빈"}}');export{T as comp,P as data};
