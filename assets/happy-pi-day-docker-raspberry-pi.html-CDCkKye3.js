import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as e,f as o,b as d,a as y,t as f,n as c,g as u,w as s,e as n,r as l,o as w}from"./app-BVguHYKu.js";const D={},P={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"},R={href:"https://hub.docker.com/r/stefanscherer/monitor/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://hub.docker.com/r/stefanscherer/whoami",target:"_blank",rel:"noopener noreferrer"},E={start:"10"},T={href:"https://github.com/dockersamples/docker-swarm-visualizer",target:"_blank",rel:"noopener noreferrer"},S={href:"https://twitter.com/paulofrazao",target:"_blank",rel:"noopener noreferrer"};function z(h,a){const p=l("VPCard"),g=l("router-link"),m=l("SiteInfo"),r=l("VPIcon"),b=l("Tabs");return w(),k("div",null,[e("h1",P,[e("a",x,[e("span",null,f(h.$frontmatter.title)+" 관련",1)])]),o(p,c(u({title:"Docker > Article(s)",desc:"Article(s)",link:"/devops/docker/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),o(p,c(u({title:"Linux - Debian > Article(s)",desc:"Article(s)",link:"/devops/linux-debian/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",A,[e("ul",null,[e("li",null,[o(g,{to:"#instructions"},{default:s(()=>a[0]||(a[0]=[n("Instructions")])),_:1,__:[0]})])])]),a[30]||(a[30]=e("hr",null,null,-1)),o(m,{name:"Happy Pi Day with  and Raspberry Pi",desc:"Learn from Docker experts to simplify and advance your app development and management with Docker. Stay up to date on Docker events and new version",url:"https://docker.com/blog/happy-pi-day-docker-raspberry-pi",logo:"https://docker.com/app/uploads/2024/02/cropped-docker-logo-favicon-192x192.png",preview:"https://docker.com/app/uploads/2019/03/docker-pi.gif"}),a[31]||(a[31]=e("p",null,"What better way to say “Happy Pi Day” than by installing Docker Engine – Community (CE) 18.09 on Raspberry Pi. This article will walk you through the process of installing Docker Engine 18.09 on a Raspberry Pi. There are many articles out there that show this process, but many failed due to older Engine versions and some syntax issues.",-1)),e("p",null,[a[3]||(a[3]=n("Special thanks to Docker Solutions Engineer, Stefan Scherer and his monitoring image (")),e("a",R,[o(r,{icon:"fa-brands fa-docker"}),a[1]||(a[1]=e("code",null,"stefanscherer/monitor",-1))]),a[4]||(a[4]=n(") along with the whoami image (")),e("a",j,[o(r,{icon:"fa-brands fa-docker"}),a[2]||(a[2]=e("code",null,"stefanscherer/whoami",-1))]),a[5]||(a[5]=n(") that allows Pimoroni Blinkt! LED’s to turn on/off when scaling an application within a Swarm Cluster."))]),a[32]||(a[32]=d(`<figure><img src="https://docker.com/app/uploads/2019/03/docker-pi-225x300.gif" alt="docker pi" tabindex="0" loading="lazy"><figcaption>docker pi</figcaption></figure><hr><h2 id="instructions" tabindex="-1"><a class="header-anchor" href="#instructions"><span>Instructions</span></a></h2><p>For this demo, I used 7 Raspberry Pi’s 3 (model B+) and 1 Pimoroni Blinkt! LED for each Pi.</p><ol><li><p>Download the following Raspian image ‘2018-11-13-raspbian-stretch-full.img’ from</p></li><li><p>Use balenaEtcher to write the image to each of your microusb cards.</p></li><li><p>To make DNS hostname resolution a little easier, I setup local hostnames on each Pi device. Below is an example.</p></li></ol><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/etc/hosts"><span>/etc/hosts</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">192.168.93.231 pi-mgr1 pi-mgr1.docker.cafe  </span>
<span class="line">192.168.93.232 pi-mgr2 pi-mgr2.docker.cafe  </span>
<span class="line">192.168.93.233 pi-mgr3 pi-mgr3.docker.cafe  </span>
<span class="line">192.168.93.241 pi-node1 pi-node1.docker.cafe  </span>
<span class="line">192.168.93.242 pi-node2 pi-node2.docker.cafe  </span>
<span class="line">192.168.93.243 pi-node3 pi-node3.docker.cafe  </span>
<span class="line">192.168.93.244 pi-node4 pi-node4.docker.cafe</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><ol start="4"><li>On each of your Pi’s, install the following:</li></ol>`,7)),o(b,{data:[{id:"a."},{id:"b."},{id:"c."},{id:"d."},{id:"e."},{id:"f."},{id:"g."},{id:"h."},{id:"i."}],active:0},{title0:s(({value:t,isActive:i})=>a[6]||(a[6]=[n("a.")])),title1:s(({value:t,isActive:i})=>a[7]||(a[7]=[n("b.")])),title2:s(({value:t,isActive:i})=>a[8]||(a[8]=[n("c.")])),title3:s(({value:t,isActive:i})=>a[9]||(a[9]=[n("d.")])),title4:s(({value:t,isActive:i})=>a[10]||(a[10]=[n("e.")])),title5:s(({value:t,isActive:i})=>a[11]||(a[11]=[n("f.")])),title6:s(({value:t,isActive:i})=>a[12]||(a[12]=[n("g.")])),title7:s(({value:t,isActive:i})=>a[13]||(a[13]=[n("h.")])),title8:s(({value:t,isActive:i})=>a[14]||(a[14]=[n("i.")])),tab0:s(({value:t,isActive:i})=>a[15]||(a[15]=[e("p",null,"Install the following prerequisites.",-1),e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[e("pre",null,[e("code",{class:"language-bash"},[e("span",{class:"line"},[e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"apt-get"),n(),e("span",{class:"token function"},"install"),n(" apt-transport-https ca-certificates software-properties-common "),e("span",{class:"token parameter variable"},"-y")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1)])),tab1:s(({value:t,isActive:i})=>a[16]||(a[16]=[e("p",null,"Download and install Docker.",-1),e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[e("pre",null,[e("code",{class:"language-bash"},[e("span",{class:"line"},[e("span",{class:"token function"},"curl"),n(),e("span",{class:"token parameter variable"},"-fsSL"),n(" get.docker.com "),e("span",{class:"token parameter variable"},"-o"),n(" get-docker.sh "),e("span",{class:"token operator"},"&&"),n(),e("span",{class:"token function"},"sh"),n(" get-docker.sh")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1)])),tab2:s(({value:t,isActive:i})=>a[17]||(a[17]=[e("p",null,[n("Give the "),e("code",null,"pi"),n(" user the ability to run Docker.")],-1),e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[e("pre",null,[e("code",{class:"language-bash"},[e("span",{class:"line"},[e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"usermod"),n(),e("span",{class:"token parameter variable"},"-aG"),n(),e("span",{class:"token function"},"docker"),n(" pi")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1)])),tab3:s(({value:t,isActive:i})=>a[18]||(a[18]=[e("p",null,"Import Docker CPG key.",-1),e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[e("pre",null,[e("code",{class:"language-bash"},[e("span",{class:"line"},[e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"curl"),n(" https://download.docker.com/linux/raspbian/gpg")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1)])),tab4:s(({value:t,isActive:i})=>a[19]||(a[19]=[e("p",null,"Setup the Docker Repo.",-1),e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[e("pre",null,[e("code",{class:"language-bash"},[e("span",{class:"line"},[e("span",{class:"token function"},"vim"),n(" /etc/apt/sources.list")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),e("p",null,"Add the following line and save:",-1),e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[e("pre",null,[e("code",{class:"language-bash"},[e("span",{class:"line"},"deb https://download.docker.com/linux/raspbian/ stretch stable"),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1)])),tab5:s(({value:t,isActive:i})=>a[20]||(a[20]=[e("p",null,"Patch and update your Pi.",-1),e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[e("pre",null,[e("code",{class:"language-bash"},[e("span",{class:"line"},[e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"apt-get"),n(" update")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[e("pre",null,[e("code",{class:"language-bash"},[e("span",{class:"line"},[e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"apt-get"),n(" upgrade")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1)])),tab6:s(({value:t,isActive:i})=>a[21]||(a[21]=[e("p",null,"Start the Docker service.",-1),e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[e("pre",null,[e("code",{class:"language-bash"},[e("span",{class:"line"},"systemctl start docker.service"),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1)])),tab7:s(({value:t,isActive:i})=>a[22]||(a[22]=[e("p",null,"To verify that Docker is installed and running.",-1),e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[e("pre",null,[e("code",{class:"language-bash"},[e("span",{class:"line"},[e("span",{class:"token function"},"docker"),n(" info")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1)])),tab8:s(({value:t,isActive:i})=>a[23]||(a[23]=[e("p",null,"You should now some information in regards to versioning, runtime,etc.",-1)])),_:1}),a[33]||(a[33]=d(`<ol start="5"><li><p>Now that Docker has been installed on all of your Pi’s, we can now setup Docker Swarm.</p></li><li><p>On one of your Pi devices that will be a master node, type the following:</p></li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> swarm init</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="7"><li>Once Docker initiates the swarm setup, you will be presented with a command to add additional worker nodes. Below is an example.</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> swarm <span class="token function">join</span> <span class="token parameter variable">--token</span> SWMTKN-1-<span class="token operator">&lt;</span>token-key<span class="token operator">&gt;</span> <span class="token number">192.168</span>.93.231:2377</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>on each worker node paste the text in step 7</li></ul><ol start="8"><li>To add additional manager nodes, the token and string will be different than the worker string. In order to discover the correct string to add manager nodes, do the following command on an existing working manager node.</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> swarm join-token manager</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>copy and paste the output to each of your manager nodes</li></ul><ol start="9"><li>If you want to add additional worker nodes and don’t have the correct syntax, just type the following on any of the working manager nodes to retrieve it.</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> swarm join-token worker</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,10)),e("ol",E,[e("li",null,[a[25]||(a[25]=n("To have a graphical representation of your current cluster, we will install the VIZ application. For more information, go to ")),e("a",T,[o(r,{icon:"iconfont icon-github"}),a[24]||(a[24]=e("code",null,"dockersamples/docker-swarm-visualizer",-1))]),a[26]||(a[26]=n(". To install, type the following:"))])]),a[34]||(a[34]=d(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> swarm join-token worker <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--name</span><span class="token operator">=</span>viz <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--publish</span><span class="token operator">=</span><span class="token number">9090</span>:8080/tcp <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--constraint</span><span class="token operator">=</span>node.role<span class="token operator">==</span>manager <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--mount</span><span class="token operator">=</span>type<span class="token operator">=</span>bind,src<span class="token operator">=</span>/var/run/docker.sock,dst<span class="token operator">=</span>/var/run/docker.sock <span class="token punctuation">\\</span></span>
<span class="line">alexellis2/visualizer-arm:latest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="11"><li><p>Using a browser, connect to one of your master services on port 9090. You should now see the Visualizer showing your worker and manager nodes.</p></li><li><p>Now we will install the monitor app that will be deployed on both the manager and worker nodes. Type the following on the one of the manager nodes.</p></li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> <span class="token function">service</span> create <span class="token parameter variable">--name</span> monitor <span class="token parameter variable">--mode</span> global <span class="token punctuation">\\</span></span>
<span class="line">--restart-condition any <span class="token parameter variable">--mount</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>bind,src<span class="token operator">=</span>/sys,dst<span class="token operator">=</span>/sys <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--mount</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>bind,src<span class="token operator">=</span>/var/run/docker.sock,dst<span class="token operator">=</span>/var/run/docker.sock <span class="token punctuation">\\</span></span>
<span class="line">stefanscherer/monitor:1.2.0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="13"><li>Once the monitor app is install, we will now install the ‘whoami’ app. The ‘whoami’ app is a small application that will trigger the LED’s on/off by scaling the application up and down. For each running instance, you will get one LED turned on. As we scale the application up to 5, you will have 5 LEDs turn on. As you scale up and down the number of LEDs that turn on will depend on how many containers you have running in your cluster. To install the application, type the following.</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> <span class="token function">service</span> create <span class="token parameter variable">--name</span> <span class="token function">whoami</span> stefanscherer/whoami:1.1.0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="14"><li><p>Once deployed, you should have 1 LED turned on.</p></li><li><p>Now lets scale the application to 5. Type the following.</p></li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> <span class="token function">service</span> scale <span class="token assign-left variable">whoami</span><span class="token operator">=</span><span class="token number">5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="16"><li>You should now have 5 LEDs on. Please that this will take some time as the Pi devices are not very fast and require some time to properly deploy and bring up.</li></ol>`,8)),e("p",null,[a[28]||(a[28]=n("And there you go! We hope you have fun and enjoy some Pi(e) today! If you have feedback or suggestions on how to improve, please reach out to me on Twitter: ")),e("a",S,[o(r,{icon:"fa-brands fa-x-twitter"}),a[27]||(a[27]=e("code",null,"@paulofrazao",-1))]),a[29]||(a[29]=n(" or on Github"))]),o(m,{name:"paulofrazao/RaspberryPi",desc:"Installing Docker 18.09 on Raspberry Pi.",url:"https://github.com/paulofrazao/RaspberryPi/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/0ea7d48557a1384f5ed84690bb646540b6228abf902c0de0cbc432f68a26cb13/paulofrazao/RaspberryPi"}),y(" TODO: add ARTICLE CARD "),o(p,c(u({title:"Happy Pi Day with  and Raspberry Pi",desc:"Learn from Docker experts to simplify and advance your app development and management with Docker. Stay up to date on Docker events and new version",link:"https://chanhi2000.github.io/bookshelf/docker.com/happy-pi-day-docker-raspberry-pi.html",logo:"https://docker.com/app/uploads/2024/02/cropped-docker-logo-favicon-192x192.png",background:"rgba(29,99,237,0.2)"})),null,16)])}const H=v(D,[["render",z]]),C=JSON.parse('{"path":"/docker.com/happy-pi-day-docker-raspberry-pi.html","title":"Happy Pi Day with  and Raspberry Pi","lang":"en-US","frontmatter":{"lang":"en-US","title":"Happy Pi Day with  and Raspberry Pi","description":"Article(s) > Happy Pi Day with  and Raspberry Pi","icon":"fa-brands fa-docker","category":["DevOps","Docker","Linux","Debian","Raspberry-pi","Article(s)"],"tag":["blog","docker.com","devops","docker","linux","debian","raspberry-pi"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Happy Pi Day with  and Raspberry Pi\\",\\"image\\":[\\"https://docker.com/app/uploads/2019/03/docker-pi-225x300.gif\\"],\\"datePublished\\":\\"2019-03-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"paulofrazao\\",\\"url\\":\\"https://docker.com/author/paulofrazao/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/docker.com/happy-pi-day-docker-raspberry-pi.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Happy Pi Day with  and Raspberry Pi"}],["meta",{"property":"og:description","content":"Article(s) > Happy Pi Day with  and Raspberry Pi"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://docker.com/app/uploads/2019/03/docker-pi.gif"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://docker.com/app/uploads/2019/03/docker-pi.gif"}],["meta",{"name":"twitter:image:alt","content":"Happy Pi Day with  and Raspberry Pi"}],["meta",{"property":"article:author","content":"paulofrazao"}],["meta",{"property":"article:tag","content":"raspberry-pi"}],["meta",{"property":"article:tag","content":"debian"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"docker.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2019-03-15T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Happy Pi Day with  and Raspberry Pi"},{"property":"og:description","content":"Happy Pi Day with  and Raspberry Pi"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/docker.com/happy-pi-day-docker-raspberry-pi.html"}]],"prev":"/devops/docker/articles/README.md","date":"2019-03-15T00:00:00.000Z","isOriginal":false,"author":[{"name":"paulofrazao","url":"https://docker.com/author/paulofrazao/"}],"cover":"https://docker.com/app/uploads/2019/03/docker-pi.gif"},"git":{},"readingTime":{"minutes":3.94,"words":1181},"filePathRelative":"docker.com/happy-pi-day-docker-raspberry-pi.md","copyright":{"author":"paulofrazao"}}');export{H as comp,C as data};
