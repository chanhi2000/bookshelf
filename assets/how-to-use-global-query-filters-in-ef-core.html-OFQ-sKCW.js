import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as n,f as s,b as i,t as h,n as m,g as y,w as o,e as a,r,o as v}from"./app-BVguHYKu.js";const k={},f={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},F={href:"https://learn.microsoft.com/en-us/ef/core/querying/filters",target:"_blank",rel:"noopener noreferrer"};function Q(l,e){const p=r("VPCard"),t=r("router-link"),c=r("SiteInfo"),u=r("VPIcon");return v(),g("div",null,[n("h1",f,[n("a",b,[n("span",null,h(l.$frontmatter.title)+" 관련",1)])]),s(p,m(y({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",w,[n("ul",null,[n("li",null,[s(t,{to:"#how-to-apply-query-filters"},{default:o(()=>e[0]||(e[0]=[a("How To Apply Query Filters")])),_:1,__:[0]})]),n("li",null,[s(t,{to:"#disabling-query-filters"},{default:o(()=>e[1]||(e[1]=[a("Disabling Query Filters")])),_:1,__:[1]})]),n("li",null,[s(t,{to:"#good-things-to-know-before-using-query-filters"},{default:o(()=>e[2]||(e[2]=[a("Good Things To Know Before Using Query Filters")])),_:1,__:[2]}),n("ul",null,[n("li",null,[s(t,{to:"#configuring-multiple-query-filters"},{default:o(()=>e[3]||(e[3]=[a("Configuring multiple Query Filters")])),_:1,__:[3]})]),n("li",null,[s(t,{to:"#ignoring-specific-query-filters"},{default:o(()=>e[4]||(e[4]=[a("Ignoring specific Query Filters")])),_:1,__:[4]})])])])])]),e[8]||(e[8]=n("hr",null,null,-1)),s(c,{name:"How To Use Global Query Filters in EF Core",desc:"In this week's newsletter, I'll show you how you can remove repetitive conditions in EF Core database queries. An example would be when you implement soft-delete, and have to check if a record was soft-deleted or not in every query. Also, it is practical if you're working in a multi-tenant system and need to specify a tenantId on every query. EF Core has a powerful feature called Query Filters that can help you remove repetitive conditions from your code.",url:"https://milanjovanovic.tech/blog/how-to-use-global-query-filters-in-ef-core/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_009.png"}),e[9]||(e[9]=i("<p>In this week&#39;s newsletter, I&#39;ll show you how you can remove repetitive conditions in <strong>EF Core</strong> database queries.</p><p>Which kinds of queries fit this description?</p><p>An example would be when you implement <strong>soft-delete</strong>, and have to check if a record was <strong>soft-deleted</strong> or not in every query.</p><p>Also, it&#39;s practical if you&#39;re working in a multi-tenant system and need to specify a <code>tenantId</code> on every query.</p><p><strong>EF Core</strong> has a powerful feature that can help you remove repetitive conditions from your code.</p>",5)),n("p",null,[e[6]||(e[6]=a("I'm talking about ")),n("a",F,[s(u,{icon:"fa-brands fa-microsoft"}),e[5]||(e[5]=a("Query Filters"))]),e[7]||(e[7]=a("."))]),e[10]||(e[10]=i(`<p>Let&#39;s see how we can implement it.</p><hr><h2 id="how-to-apply-query-filters" tabindex="-1"><a class="header-anchor" href="#how-to-apply-query-filters"><span>How To Apply Query Filters</span></a></h2><p>Before introducing <strong>Query Filters</strong>, we will see how the standard approach looks. We have an <code>Orders</code> table that supports <strong>soft-deleting</strong>. And we never want to return <strong>soft-deleted</strong> orders.</p><p>We&#39;ll start with an <code>Order</code> entity that has an <code>IsDeleted</code> property.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsDeleted <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And we have a business requirement that we can only query orders that are not deleted.</p><p>Here&#39;s what an <strong>EF</strong> query to get a single <code>Order</code> might look like:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">dbContext</span>
<span class="line">   <span class="token punctuation">.</span>Orders</span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>order <span class="token operator">=&gt;</span> <span class="token operator">!</span>order<span class="token punctuation">.</span>IsDeleted<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>order <span class="token operator">=&gt;</span> order<span class="token punctuation">.</span>Id <span class="token operator">==</span> orderId<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This works perfectly for what we need to do.</p><p>However, we need to remember to apply this condition every time we want to query the <code>Order</code> entity.</p><p>Now, let&#39;s see how we can define a <strong>Query Filter</strong> on the <code>Order</code> entity to apply this check when querying the database.</p><p>Inside of the <code>OnModelCreating</code> method on the database context, we need to call the <code>HasQueryFilter</code> method and specify the expression we want:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">modelBuilder</span>
<span class="line">   <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">HasQueryFilter</span><span class="token punctuation">(</span>order <span class="token operator">=&gt;</span> <span class="token operator">!</span>order<span class="token punctuation">.</span>IsDeleted<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can omit the <strong>soft-delete</strong> check from the previous <strong>LINQ</strong> expression:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">dbContext</span>
<span class="line">   <span class="token punctuation">.</span>Orders</span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>order <span class="token operator">=&gt;</span> order<span class="token punctuation">.</span>Id <span class="token operator">==</span> orderId<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And this is the <strong>SQL</strong> that <strong>EF</strong> will generate with the <strong>Query Filter</strong>:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> o<span class="token punctuation">.</span><span class="token operator">*</span></span>
<span class="line"><span class="token keyword">FROM</span> Orders o</span>
<span class="line"><span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>IsDeleted <span class="token operator">=</span> <span class="token boolean">FALSE</span> <span class="token operator">AND</span> o<span class="token punctuation">.</span>Id <span class="token operator">=</span> <span class="token variable">@orderId</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="disabling-query-filters" tabindex="-1"><a class="header-anchor" href="#disabling-query-filters"><span>Disabling Query Filters</span></a></h2><p>You may run into a situation where you need to disable <strong>Query Filters</strong> for a specific query. Luckily, there is an easy way to do this.</p><p>In your <strong>LINQ</strong> expression, you need to call the <code>IgnoreQueryFilters</code> method, and all the <strong>Query Filters</strong> configured for this entity will be disabled:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">dbContext</span>
<span class="line">   <span class="token punctuation">.</span>Orders</span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">IgnoreQueryFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>order <span class="token operator">=&gt;</span> order<span class="token punctuation">.</span>Id <span class="token operator">==</span> orderId<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Be careful when doing this, as you can easily introduce unwanted behavior in your application.</p><hr><h2 id="good-things-to-know-before-using-query-filters" tabindex="-1"><a class="header-anchor" href="#good-things-to-know-before-using-query-filters"><span>Good Things To Know Before Using Query Filters</span></a></h2><p>Here are a few more details that you should know about <strong>Query Filters</strong> before using them. Hopefully, this will save you some trouble if you decide to use them in your application.</p><h3 id="configuring-multiple-query-filters" tabindex="-1"><a class="header-anchor" href="#configuring-multiple-query-filters"><span>Configuring multiple Query Filters</span></a></h3><p>Configuring multiple <strong>Query Filters</strong> on the same entity will only apply the last one. If you need more than one condition, you can do that with the logical <code>AND</code> operator (&amp;&amp;).</p><h3 id="ignoring-specific-query-filters" tabindex="-1"><a class="header-anchor" href="#ignoring-specific-query-filters"><span>Ignoring specific Query Filters</span></a></h3><p>If you need to ignore a specific expression in a <strong>Query Filter</strong> and leave the rest in place, unfortunately, you can&#39;t do that. Only one <strong>Query Filter</strong> is allowed per entity type.</p><p>One solution is calling <code>IgnoreQueryFilters</code>, which will remove the configured <strong>Query Filter</strong> for that entity type. And then manually apply the condition that you need for that specific query.</p>`,32))])}const _=d(k,[["render",Q]]),C=JSON.parse('{"path":"/milanjovanovic.tech/how-to-use-global-query-filters-in-ef-core.html","title":"How To Use Global Query Filters in EF Core","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How To Use Global Query Filters in EF Core","description":"Article(s) > How To Use Global Query Filters in EF Core","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How To Use Global Query Filters in EF Core\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_009.png\\"],\\"datePublished\\":\\"2022-10-29T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-to-use-global-query-filters-in-ef-core.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How To Use Global Query Filters in EF Core"}],["meta",{"property":"og:description","content":"Article(s) > How To Use Global Query Filters in EF Core"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_009.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_009.png"}],["meta",{"name":"twitter:image:alt","content":"How To Use Global Query Filters in EF Core"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-10-29T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How To Use Global Query Filters in EF Core"},{"property":"og:description","content":"How To Use Global Query Filters in EF Core"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-to-use-global-query-filters-in-ef-core.html"}]],"prev":"/programming/cs/articles/README.md","date":"2022-10-29T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_009.png"},"git":{},"readingTime":{"minutes":2.66,"words":798},"filePathRelative":"milanjovanovic.tech/how-to-use-global-query-filters-in-ef-core.md","copyright":{"author":"Milan Jovanović"}}');export{_ as comp,C as data};
