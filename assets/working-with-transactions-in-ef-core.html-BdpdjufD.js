import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,d as a,f as s,b as d,t as k,n as v,g as m,w as e,r as i,o as h,e as o}from"./app-BVguHYKu.js";const g={},b={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"};function f(c,n){const p=i("VPCard"),t=i("router-link"),l=i("SiteInfo");return h(),u("div",null,[a("h1",b,[a("a",w,[a("span",null,k(c.$frontmatter.title)+" 관련",1)])]),s(p,v(m({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a("nav",y,[a("ul",null,[a("li",null,[s(t,{to:"#default-transaction-behavior"},{default:e(()=>n[0]||(n[0]=[o("Default Transaction Behavior")])),_:1,__:[0]})]),a("li",null,[s(t,{to:"#creating-transactions-with-ef-core"},{default:e(()=>n[1]||(n[1]=[o("Creating Transactions With EF Core")])),_:1,__:[1]})]),a("li",null,[s(t,{to:"#using-existing-transactions-with-ef-core"},{default:e(()=>n[2]||(n[2]=[o("Using Existing Transactions With EF Core")])),_:1,__:[2]})]),a("li",null,[s(t,{to:"#in-summary"},{default:e(()=>n[3]||(n[3]=[o("In Summary")])),_:1,__:[3]})])])]),n[4]||(n[4]=a("hr",null,null,-1)),s(l,{name:"Working With Transactions In EF Core",desc:"Every software engineer working with SQL databases needs to know about transactions. And since most of the time the SQL database will be abstracted by an ORM like EF Core, it's important to understand how you can work with transactions using the available abstractions.",url:"https://milanjovanovic.tech/blog/working-with-transactions-in-ef-core/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_023.png"}),n[5]||(n[5]=d(`<p>Every software engineer working with <strong>SQL databases</strong> needs to know about <strong>transactions</strong>. And since most of the time the <strong>SQL database</strong> will be abstracted by an ORM like <strong>EF Core</strong>, it&#39;s important to understand how you can work with <strong>transactions</strong> using the available abstractions.</p><p>So today, I&#39;ll show you how to work with <strong>transactions</strong> in <strong>EF Core</strong>.</p><p>Here&#39;s what we will cover:</p><ul><li>Default transaction behavior</li><li>Creating transactions</li><li>Using existing transactions</li></ul><p>Let&#39;s dive in.</p><hr><h2 id="default-transaction-behavior" tabindex="-1"><a class="header-anchor" href="#default-transaction-behavior"><span>Default Transaction Behavior</span></a></h2><p>What is the <strong>default</strong> EF Core <strong>transaction behavior</strong>?</p><p>By default, all changes made in a single call to <code>SaveChanges</code> are applied in a transaction. If any of the changes fail, the entire transaction is rolled back and no changes are applied to the database. Only if all changes are successfully persisted to the database, the call to <code>SaveChanges</code> can complete.</p><p>This is a wonderful feature of <strong>SQL databases</strong> and it saves us many headaches. We don&#39;t have to think about the databases remaining in an inconsistent state, because database <strong>transactions</strong> can do the work for us.</p><p>Let&#39;s take a look at an example.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ShoppingContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">context<span class="token punctuation">.</span>LineItems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">LineItem</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    ProductId <span class="token operator">=</span> productId<span class="token punctuation">,</span></span>
<span class="line">    Quantity <span class="token operator">=</span> quantity</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> stock <span class="token operator">=</span> context<span class="token punctuation">.</span>Stock<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>ProductId <span class="token operator">==</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">stock<span class="token punctuation">.</span>Quantity <span class="token operator">-=</span> quantity<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">context<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because we are adding a <code>LineItem</code>, and in the same scope reducing the <code>Stock</code> quantity, the call to <code>SaveChanges</code> will apply both changes inside of a transaction. We can guarantee that the database will remain in a <strong>consistent state</strong>.</p><hr><h2 id="creating-transactions-with-ef-core" tabindex="-1"><a class="header-anchor" href="#creating-transactions-with-ef-core"><span>Creating Transactions With EF Core</span></a></h2><p>What if you want to have more control over <strong>transactions</strong> when working with <strong>EF Core</strong>?</p><p>You can manually create a transaction by accessing the <code>Database</code> facade available on a <code>DbContext</code> instance and calling <code>BeginTransaction</code>.</p><p>Here&#39;s an example where we have multiple calls to <code>SaveChanges</code>. In the default scenario, both calls would run in their own transaction. This leaves the possibility of the second call to <code>SaveChanges</code> failing, and leaving the database in an inconsistent state.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ShoppingContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> transaction  <span class="token operator">=</span> context<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">BeginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    context<span class="token punctuation">.</span>LineItems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">LineItem</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        ProductId <span class="token operator">=</span> productId<span class="token punctuation">,</span></span>
<span class="line">        Quantity <span class="token operator">=</span> quantity</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    context<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> stock <span class="token operator">=</span> context<span class="token punctuation">.</span>Stock<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>ProductId <span class="token operator">==</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    stock<span class="token punctuation">.</span>Quantity <span class="token operator">-=</span> quantity<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    context<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// When we commit the changes, they will be applied to the databases.</span></span>
<span class="line">    <span class="token comment">// The transaction will auto-rollback when it is disposed,</span></span>
<span class="line">    <span class="token comment">// if any command fails.</span></span>
<span class="line">    transaction<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    transaction<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We call <code>BeginTransaction</code> to manually start a new <strong>database transaction</strong>. This will create a new transaction and return it, so that we can <code>Commit</code> the transaction when we want to complete the operation. You also want to add a <code>try-catch</code> block around your code, so that you can <code>Rollback</code> the transaction if there are any exceptions.</p><hr><h2 id="using-existing-transactions-with-ef-core" tabindex="-1"><a class="header-anchor" href="#using-existing-transactions-with-ef-core"><span>Using Existing Transactions With EF Core</span></a></h2><p>Creating a transaction using the EF Core <code>DbContext</code> isn&#39;t the only option. You can create a <code>SqlTransaction</code> instance and pass it to <strong>EF Core</strong>, so that the changes applied with EF Core can be committed inside the same <strong>transaction</strong>.</p><p>Here&#39;s what I mean:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> sqlConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlTransaction</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sqlConnection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> transaction <span class="token operator">=</span> sqlConnection<span class="token punctuation">.</span><span class="token function">BeginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ShoppingContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Tell EF Core to use an existing transaction.</span></span>
<span class="line">    context<span class="token punctuation">.</span><span class="token function">UseTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    context<span class="token punctuation">.</span>LineItems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">LineItem</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        ProductId <span class="token operator">=</span> productId<span class="token punctuation">,</span></span>
<span class="line">        Quantity <span class="token operator">=</span> quantity</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    context<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> stock <span class="token operator">=</span> context<span class="token punctuation">.</span>Stock<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>ProductId <span class="token operator">==</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    stock<span class="token punctuation">.</span>Quantity <span class="token operator">-=</span> quantity<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    context<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    transaction<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    transaction<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="in-summary" tabindex="-1"><a class="header-anchor" href="#in-summary"><span>In Summary</span></a></h2><p><strong>EF Core</strong> has excellent support for <strong>transactions</strong> and it&#39;s very easy to work with.</p><p>You have three options available:</p><ul><li>Rely on the default transaction behavior</li><li>Create a new transaction</li><li>Use an existing transaction</li></ul><p>Most of the time, you want to rely on the default behavior and not have to think about it.</p><p>As soon as you need to perform multiple <code>SaveChanges</code> calls, you should manually create a transaction, and manage the transaction yourself.</p><p>See you next week, and have an excellent Saturday.</p>`,33))])}const I=r(g,[["render",f]]),E=JSON.parse('{"path":"/milanjovanovic.tech/working-with-transactions-in-ef-core.html","title":"Working With Transactions In EF Core","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Working With Transactions In EF Core","description":"Article(s) > Working With Transactions In EF Core","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Working With Transactions In EF Core\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_023.png\\"],\\"datePublished\\":\\"2023-02-04T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/working-with-transactions-in-ef-core.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Working With Transactions In EF Core"}],["meta",{"property":"og:description","content":"Article(s) > Working With Transactions In EF Core"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_023.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_023.png"}],["meta",{"name":"twitter:image:alt","content":"Working With Transactions In EF Core"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-02-04T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Working With Transactions In EF Core"},{"property":"og:description","content":"Working With Transactions In EF Core"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/working-with-transactions-in-ef-core.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-02-04T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_023.png"},"git":{},"readingTime":{"minutes":2.72,"words":815},"filePathRelative":"milanjovanovic.tech/working-with-transactions-in-ef-core.md","copyright":{"author":"Milan Jovanović"}}');export{I as comp,E as data};
