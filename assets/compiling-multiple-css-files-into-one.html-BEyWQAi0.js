import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as a,b as k,a as h,t as f,n as p,g as l,w as u,e as t,r as o,o as S}from"./app-BVguHYKu.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"},C={href:"https://alwaystwisted.com",target:"_blank",rel:"noopener noreferrer"},x={href:"https://alwaystwisted.com/articles/UnSassing-my-CSS",target:"_blank",rel:"noopener noreferrer"},F={href:"https://jeffbridgforth.com",target:"_blank",rel:"noopener noreferrer"},j={href:"https://alwaystwisted.com/articles/UnSassing-my-CSS-CSS-imports",target:"_blank",rel:"noopener noreferrer"},I={href:"https://postcss.org",target:"_blank",rel:"noopener noreferrer"},O={href:"https://alwaystwisted.com/articles/UnSassing-my-CSS",target:"_blank",rel:"noopener noreferrer"};function A(m,n){const i=o("VPCard"),c=o("router-link"),r=o("SiteInfo"),e=o("VPIcon");return S(),g("div",null,[s("h1",w,[s("a",b,[s("span",null,f(m.$frontmatter.title)+" 관련",1)])]),a(i,p(l({title:"Node.js > Article(s)",desc:"Article(s)",link:"/programming/js-node/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a(i,p(l({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",v,[s("ul",null,[s("li",null,[a(c,{to:"#using-postcss"},{default:u(()=>n[0]||(n[0]=[t("Using PostCSS")])),_:1,__:[0]})]),s("li",null,[a(c,{to:"#custom-script-for-compilation"},{default:u(()=>n[1]||(n[1]=[t("Custom Script for Compilation")])),_:1,__:[1]})])])]),n[19]||(n[19]=s("hr",null,null,-1)),a(r,{name:"Compiling Multiple CSS Files into One",desc:"Stu Robson outlines two ways to compile multiple CSS files when you aren't relying on Sass for it.",url:"https://css-tricks.com/compiling-multiple-css-files-into-one",logo:"https://css-tricks/favicon.svg",preview:"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/08/css-modules-connections.jpg"}),s("p",null,[s("a",C,[a(e,{icon:"fas fa-globe"}),n[2]||(n[2]=t("Stu Robson"))]),n[5]||(n[5]=t(" is on a mission to ")),s("a",x,[a(e,{icon:"fas fa-globe"}),n[3]||(n[3]=t("“un-Sass” his CSS"))]),n[6]||(n[6]=t(". I see articles like this pop up every year, and for good reason as CSS has grown so many new legs in recent years. So much so that much of the core features that may have prompted you to reach for Sass in the past are now baked directly into CSS. In fact, we have ")),s("a",F,[a(e,{icon:"fas fa-globe"}),n[4]||(n[4]=t("Jeff Bridgforth"))]),n[7]||(n[7]=t(" on tap with a related article next week."))]),s("p",null,[n[9]||(n[9]=t("What I like about Stu’s stab at this is that it’s an ongoing journey rather than a wholesale switch. In fact, he’s out with a new post that ")),s("a",j,[a(e,{icon:"fas fa-globe"}),n[8]||(n[8]=t("pokes specifically at compiling multiple CSS files into a single file"))]),n[10]||(n[10]=t(". Splitting and organizing styles into separate files is definitely the reason I continue to Sass-ify my work. I love being able to find exactly what I need in a specific file and updating it without having to dig through a monolith of style rules."))]),n[20]||(n[20]=s("p",null,[t("But is that a real reason to keep using Sass? I’ve honestly never questioned it, perhaps due to a lizard brain that doesn’t care as long as something continues to work. "),s("em",null,"Oh, I want partialized style files? Always done that with a Sass-y toolchain that hasn’t let me down yet."),t(" I know, not the most proactive path.")],-1)),n[21]||(n[21]=s("p",null,"Stu outlines two ways to compile multiple CSS files when you aren’t relying on Sass for it:",-1)),n[22]||(n[22]=s("hr",null,null,-1)),n[23]||(n[23]=s("h2",{id:"using-postcss",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#using-postcss"},[s("span",null,"Using PostCSS")])],-1)),s("p",null,[n[12]||(n[12]=t("Ah, that’s right, we can use ")),s("a",I,[a(e,{icon:"fas fa-globe"}),n[11]||(n[11]=t("PostCSS"))]),n[13]||(n[13]=t(" both with ")),n[14]||(n[14]=s("em",null,"and",-1)),n[15]||(n[15]=t(" without Sass. It’s easy to forget that PostCSS and Sass are compatible, but not dependent on one another."))]),n[24]||(n[24]=k(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">postcss main.css <span class="token parameter variable">-o</span> output.css</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Stu explains why this could be a nice way to toe-dip into un-Sass’ing your work:</p><blockquote><p>PostCSS can seamlessly integrate with popular build tools like webpack, Gulp, and Rollup, allowing you to incorporate CSS compilation into your existing development workflow without potential, additional configuration headaches.</p></blockquote><hr><h2 id="custom-script-for-compilation" tabindex="-1"><a class="header-anchor" href="#custom-script-for-compilation"><span>Custom Script for Compilation</span></a></h2><p>The ultimate thing would be eliminating the need for any dependencies. Stu has a custom Node.js script for that:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Function to read and compile CSS</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">compileCSS</span><span class="token punctuation">(</span><span class="token parameter">inputFile<span class="token punctuation">,</span> outputFile</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> cssContent <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>inputFile<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> imports <span class="token operator">=</span> cssContent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">@import\\s+[&#39;&quot;]([^&#39;&quot;]+)[&#39;&quot;]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> compiledCSS <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// Read and append each imported CSS file</span></span>
<span class="line">  imports<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">importStatement</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> filePath <span class="token operator">=</span> importStatement<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[&#39;&quot;]([^&#39;&quot;]+)[&#39;&quot;]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> fullPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>inputFile<span class="token punctuation">)</span><span class="token punctuation">,</span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    compiledCSS <span class="token operator">+=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// Write the compiled CSS to the output file</span></span>
<span class="line">  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>outputFile<span class="token punctuation">,</span> compiledCSS<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Compiled CSS written to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>outputFile<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// Usage</span></span>
<span class="line"><span class="token keyword">const</span> inputCSSFile <span class="token operator">=</span> <span class="token string">&#39;index.css&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Your main CSS file</span></span>
<span class="line"><span class="token keyword">const</span> outputCSSFile <span class="token operator">=</span> <span class="token string">&#39;output.css&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Output file</span></span>
<span class="line"><span class="token function">compileCSS</span><span class="token punctuation">(</span>inputCSSFile<span class="token punctuation">,</span> outputCSSFile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Not 100% free of dependencies, but geez, what a nice way to reduce the overhead and still combine files:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">node</span> compile-css.js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This approach is designed for a flat file directory. If you’re like me and prefer nested subfolders:</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>With the flat file structure and single-level import strategy I employ, nested imports (you can do with <code>postcss-import</code> aren’t necessary for my project setup, simplifying the compilation process while maintaining clean organisation.</p></div>`,11)),s("p",null,[n[17]||(n[17]=t("Very cool, thanks Stu! And check out the ")),s("a",O,[a(e,{icon:"fas fa-globe"}),n[16]||(n[16]=t("full post"))]),n[18]||(n[18]=t(" because there’s a lot of helpful context behind this, particularly with the custom script."))]),a(r,{name:"Un-Sass'ing My CSS: Compiling Multiple CSS Files into One Always Twisted",desc:"Discover how to transition from Sass to modern CSS, exploring ways we can import multiple CSS files into one sole CSS file",url:"https://alwaystwisted.com/articles/UnSassing-my-CSS-CSS-imports.html/",logo:"https://alwaystwisted.com/images/favicons/favicon-16x16.png",preview:"https://alwaystwisted.com/images/articles/meta-images/unsass-my-css-2.png"}),h(" TODO: add ARTICLE CARD "),a(i,p(l({title:"Compiling Multiple CSS Files into One",desc:"Stu Robson outlines two ways to compile multiple CSS files when you aren't relying on Sass for it.",link:"https://chanhi2000.github.io/bookshelf/css-tricks.com/compiling-multiple-css-files-into-one.html",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16)])}const R=d(y,[["render",A]]),q=JSON.parse('{"path":"/css-tricks.com/compiling-multiple-css-files-into-one.html","title":"Compiling Multiple CSS Files into One","lang":"en-US","frontmatter":{"lang":"en-US","title":"Compiling Multiple CSS Files into One","description":"Article(s) > Compiling Multiple CSS Files into One","icon":"fa-brands fa-node","category":["Node.js","CSS","Article(s)"],"tag":["blog","css-tricks.com","node","nodejs","node-js","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Compiling Multiple CSS Files into One\\",\\"image\\":[\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/08/css-modules-connections.jpg\\"],\\"datePublished\\":\\"2025-09-11T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Geoff Graham\\",\\"url\\":\\"https://css-tricks.com/author/geoffgraham/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/compiling-multiple-css-files-into-one.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Compiling Multiple CSS Files into One"}],["meta",{"property":"og:description","content":"Article(s) > Compiling Multiple CSS Files into One"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/08/css-modules-connections.jpg"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/08/css-modules-connections.jpg"}],["meta",{"name":"twitter:image:alt","content":"Compiling Multiple CSS Files into One"}],["meta",{"property":"article:author","content":"Geoff Graham"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"css-tricks.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-09-11T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Compiling Multiple CSS Files into One"},{"property":"og:description","content":"Compiling Multiple CSS Files into One"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/compiling-multiple-css-files-into-one.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-09-11T00:00:00.000Z","isOriginal":false,"author":[{"name":"Geoff Graham","url":"https://css-tricks.com/author/geoffgraham/"}],"cover":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/08/css-modules-connections.jpg"},"git":{},"readingTime":{"minutes":3.02,"words":906},"filePathRelative":"css-tricks.com/compiling-multiple-css-files-into-one.md","copyright":{"author":"Geoff Graham"}}');export{R as comp,q as data};
