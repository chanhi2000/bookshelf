import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as t,b as c,a as h,t as b,n as r,g as d,w as e,e as a,r as o,o as y}from"./app-BVguHYKu.js";const f={},w={id:"frontmatter-title-관련",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-관련"},T={class:"table-of-contents"},I={href:"https://jimmybogard.com/automapper-and-mediatr-going-commercial/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/khellang/Scrutor",target:"_blank",rel:"noopener noreferrer"};function x(k,n){const i=o("VPCard"),p=o("router-link"),m=o("SiteInfo"),u=o("VPIcon"),l=o("RouteLink");return y(),g("div",null,[s("h1",w,[s("a",C,[s("span",null,b(k.$frontmatter.title)+" 관련",1)])]),t(i,r(d({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",T,[s("ul",null,[s("li",null,[t(p,{to:"#commands-queries-and-handlers"},{default:e(()=>n[0]||(n[0]=[a("Commands, Queries, and Handlers")])),_:1,__:[0]})]),s("li",null,[t(p,{to:"#practical-example-command-handler"},{default:e(()=>n[1]||(n[1]=[a("Practical Example: Command Handler")])),_:1,__:[1]})]),s("li",null,[t(p,{to:"#decorators"},{default:e(()=>n[2]||(n[2]=[a("Decorators")])),_:1,__:[2]})]),s("li",null,[t(p,{to:"#di-setup"},{default:e(()=>n[3]||(n[3]=[a("DI Setup")])),_:1,__:[3]})]),s("li",null,[t(p,{to:"#usage-from-minimal-api"},{default:e(()=>n[4]||(n[4]=[a("Usage from Minimal API")])),_:1,__:[4]})]),s("li",null,[t(p,{to:"#conclusion"},{default:e(()=>n[5]||(n[5]=[a("Conclusion")])),_:1,__:[5]})])])]),n[25]||(n[25]=s("hr",null,null,-1)),t(m,{name:"CQRS Pattern the Way It Should've Been From the Start",desc:"Learn how to implement CQRS in .NET without relying on MediatR. This guide walks you through a lightweight setup using simple interfaces, decorators, and DI — no frameworks required.",url:"https://milanjovanovic.tech/blog/cqrs-pattern-the-way-it-should-have-been-from-the-start",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_142.png"}),n[26]||(n[26]=s("p",null,"MediatR is going commercial.",-1)),s("p",null,[s("a",I,[t(u,{icon:"fas fa-globe"}),n[6]||(n[6]=a("Jimmy Bogard recently announced"))]),n[7]||(n[7]=a(" that MediatR will adopt a commercial license model for companies above a certain size."))]),n[27]||(n[27]=s("p",null,"For many teams, this is a trigger to re-evaluate their usage and possibly look for alternatives.",-1)),s("p",null,[n[9]||(n[9]=a("And it's not a bad time to do so. MediatR became almost synonymous with CQRS in .NET, despite the fact that ")),t(l,{to:"/milanjovanovic.tech/stop-conflating-cqrs-and-mediatr.html"},{default:e(()=>n[8]||(n[8]=[s("strong",null,"CQRS and MediatR are not the same thing",-1)])),_:1,__:[8]}),n[10]||(n[10]=a(". Most projects use it as a thin dispatching layer for commands and queries — a use case that can be covered with a few straightforward abstractions."))]),n[28]||(n[28]=c(`<div class="hint-container info"><p class="hint-container-title">By removing MediatR, you gain:</p><ul><li>Full control over your CQRS infrastructure</li><li>Predictable, explicit handler dispatching</li><li>Simpler debugging and onboarding</li><li>Cleaner DI setup and better testability</li></ul></div><p>In this article, I&#39;ll walk you through building a minimal CQRS setup with just a few interfaces and support for decorators. No hidden DI magic. Just clean, predictable code.</p><div class="hint-container info"><p class="hint-container-title">We&#39;ll cover:</p><ul><li>Defining <code>ICommand</code>, <code>IQuery</code>, and handler contracts</li><li>Adding support for decorators (logging, validation, etc.)</li><li>Registering everything with DI</li><li>A full working example in a real-world scenario</li></ul></div><p>Let&#39;s get started.</p><hr><h2 id="commands-queries-and-handlers" tabindex="-1"><a class="header-anchor" href="#commands-queries-and-handlers"><span>Commands, Queries, and Handlers</span></a></h2><p>Let&#39;s start by defining the basic contracts for commands and queries.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ICommand.cs"><span>ICommand.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICommand</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICommand<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="IQuery.cs"><span>IQuery.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IQuery<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>These interfaces exist purely as markers. They allow us to structure application logic around intention — write operations go through <code>ICommand</code>, read operations through <code>IQuery</code>.</p><p>The handler interfaces follow the same model:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ICommandHandler.cs"><span>ICommandHandler.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICommandHandler<span class="token punctuation">&lt;</span><span class="token keyword">in</span> TCommand<span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token keyword">where</span> <span class="token class-name">TCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICommand</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Result<span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">TCommand</span> command<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICommandHandler<span class="token punctuation">&lt;</span><span class="token keyword">in</span> TCommand<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token keyword">where</span> <span class="token class-name">TCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICommand<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Result<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">TCommand</span> command<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="IQueryHandler.cs"><span>IQueryHandler.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IQueryHandler<span class="token punctuation">&lt;</span><span class="token keyword">in</span> TQuery<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token keyword">where</span> <span class="token class-name">TQuery</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IQuery<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Result<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">TQuery</span> query<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>These are nearly identical to MediatR&#39;s <code>IRequest</code> and <code>IRequestHandler</code> APIs, making migration trivial if you&#39;re moving off of MediatR.</p>`,14)),s("p",null,[n[12]||(n[12]=a("You'll notice we're using a ")),n[13]||(n[13]=s("code",null,"Result",-1)),n[14]||(n[14]=a(" wrapper for all return types. This is optional, but it promotes explicit success/failure handling and encourages consistency across the application boundary. You can learn more about it in my ")),t(l,{to:"/milanjovanovic.tech/functional-error-handling-in-dotnet-with-the-result-pattern.html"},{default:e(()=>n[11]||(n[11]=[s("strong",null,"previous article",-1)])),_:1,__:[11]}),n[15]||(n[15]=a("."))]),n[29]||(n[29]=c(`<p>These interfaces form a lightweight CQRS infrastructure, focused purely on intent and separation of concerns. No mediator, no runtime indirection — just clear contracts for handling reads and writes.</p><hr><h2 id="practical-example-command-handler" tabindex="-1"><a class="header-anchor" href="#practical-example-command-handler"><span>Practical Example: Command Handler</span></a></h2><p>To see these abstractions in action, let&#39;s implement a command that marks a todo item as completed.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="CompleteTodoCommand.cs"><span>CompleteTodoCommand.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">record</span> <span class="token class-name">CompleteTodoCommand</span><span class="token punctuation">(</span><span class="token class-name">Guid</span> TodoItemId<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICommand</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="CompleteTodoCommandHandler.cs"><span>CompleteTodoCommandHandler.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">CompleteTodoCommandHandler</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">IApplicationDbContext</span> context<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">IDateTimeProvider</span> dateTimeProvider<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">IUserContext</span> userContext<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> ICommandHandler<span class="token operator">&lt;</span>CompleteTodoCommand<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Result<span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">CompleteTodoCommand</span> command<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">TodoItem<span class="token punctuation">?</span></span> todoItem <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span>TodoItems</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">SingleOrDefaultAsync</span><span class="token punctuation">(</span></span>
<span class="line">                t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Id <span class="token operator">==</span> command<span class="token punctuation">.</span>TodoItemId <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>UserId <span class="token operator">==</span> userContext<span class="token punctuation">.</span>UserId<span class="token punctuation">,</span></span>
<span class="line">                cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>todoItem <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Failure</span><span class="token punctuation">(</span>TodoItemErrors<span class="token punctuation">.</span><span class="token function">NotFound</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>TodoItemId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>todoItem<span class="token punctuation">.</span>IsCompleted<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Failure</span><span class="token punctuation">(</span>TodoItemErrors<span class="token punctuation">.</span><span class="token function">AlreadyCompleted</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>TodoItemId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        todoItem<span class="token punctuation">.</span>IsCompleted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        todoItem<span class="token punctuation">.</span>CompletedAt <span class="token operator">=</span> dateTimeProvider<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        todoItem<span class="token punctuation">.</span><span class="token function">Raise</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TodoItemCompletedDomainEvent</span><span class="token punctuation">(</span>todoItem<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>A few important things to note:</p><ul><li>The command is an immutable value object (just data, no behavior).</li><li>The handler encapsulates all business logic: validation, state change, raising domain events, and persistence.</li><li>There&#39;s no mediator, no <code>ISender</code>, no hidden dispatching. The handler is invoked directly via our custom abstractions.</li></ul><p>This makes intent explicit, avoids magic, and keeps the dependencies minimal.</p><p>We&#39;ll look at how to add decorators next, so we can introduce things like logging, validation, or transactions without modifying the handler itself.</p><hr><h2 id="decorators" tabindex="-1"><a class="header-anchor" href="#decorators"><span>Decorators</span></a></h2><p>To support cross-cutting concerns like logging, validation, and transactions, we apply the <strong>decorator pattern</strong> around our handlers. Technically, this is closer to the <strong>proxy pattern</strong>, since we&#39;re injecting behavior before/after delegating to the real handler. But in the context of cross-cutting concerns, most people refer to this as a decorator — which is fine for our purposes.</p><p>Let&#39;s look at two examples: one for logging, one for validation.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">using</span> <span class="token namespace">Serilog<span class="token punctuation">.</span>Context</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token generic-method"><span class="token function">LoggingCommandHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TCommand<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">ICommandHandler<span class="token punctuation">&lt;</span>TCommand<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span> innerHandler<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>CommandHandler<span class="token punctuation">&lt;</span>TCommand<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> ICommandHandler<span class="token operator">&lt;</span>TCommand<span class="token punctuation">,</span> TResponse<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token keyword">where</span> <span class="token class-name">TCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICommand<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Result<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">TCommand</span> command<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> commandName <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TCommand</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;Processing command {Command}&quot;</span><span class="token punctuation">,</span> commandName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Result<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> innerHandler<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>IsSuccess<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;Completed command {Command}&quot;</span><span class="token punctuation">,</span> commandName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">using</span> <span class="token punctuation">(</span>LogContext<span class="token punctuation">.</span><span class="token function">PushProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>Error<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">&quot;Completed command {Command} with error&quot;</span><span class="token punctuation">,</span> commandName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This class wraps any <code>ICommandHandler&lt;TCommand, TResponse&gt;</code>, injecting the decorated handler as <code>innerHandler</code>. It adds structured logging around the command execution without touching the core business logic.</p>`,16)),s("p",null,[n[17]||(n[17]=a("Now a ")),t(l,{to:"/milanjovanovic.tech/cqrs-validation-with-mediatr-pipeline-and-fluentvalidation.html"},{default:e(()=>n[16]||(n[16]=[s("strong",null,"validation example with FluentValidation",-1)])),_:1,__:[16]}),n[18]||(n[18]=a(":"))]),n[30]||(n[30]=c(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">using</span> <span class="token namespace">FluentValidation</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">FluentValidation<span class="token punctuation">.</span>Results</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token generic-method"><span class="token function">ValidationCommandHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TCommand<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">ICommandHandler<span class="token punctuation">&lt;</span>TCommand<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span> innerHandler<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>IValidator<span class="token punctuation">&lt;</span>TCommand<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> validators<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">:</span> ICommandHandler<span class="token operator">&lt;</span>TCommand<span class="token punctuation">,</span> TResponse<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token keyword">where</span> <span class="token class-name">TCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICommand<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Result<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">TCommand</span> command<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Validate the command using all registered validators</span></span>
<span class="line">        <span class="token class-name">ValidationFailure<span class="token punctuation">[</span><span class="token punctuation">]</span></span> validationFailures <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">ValidateAsync</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> validators<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>validationFailures<span class="token punctuation">.</span>Length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">await</span> innerHandler<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// If validation fails, return a failure result with the errors</span></span>
<span class="line">        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Failure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">CreateValidationError</span><span class="token punctuation">(</span>validationFailures<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>ValidationFailure<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ValidateAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TCommand<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">TCommand</span> command<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>IValidator<span class="token punctuation">&lt;</span>TCommand<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> validators<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>validators<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationContext<span class="token punctuation">&lt;</span>TCommand<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">ValidationResult<span class="token punctuation">[</span><span class="token punctuation">]</span></span> validationResults <span class="token operator">=</span> <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">WhenAll</span><span class="token punctuation">(</span></span>
<span class="line">            validators<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>validator <span class="token operator">=&gt;</span> validator<span class="token punctuation">.</span><span class="token function">ValidateAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">ValidationFailure<span class="token punctuation">[</span><span class="token punctuation">]</span></span> validationFailures <span class="token operator">=</span> validationResults</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>validationResult <span class="token operator">=&gt;</span> <span class="token operator">!</span>validationResult<span class="token punctuation">.</span>IsValid<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>validationResult <span class="token operator">=&gt;</span> validationResult<span class="token punctuation">.</span>Errors<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> validationFailures<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">ValidationError</span> <span class="token function">CreateValidationError</span><span class="token punctuation">(</span><span class="token class-name">ValidationFailure<span class="token punctuation">[</span><span class="token punctuation">]</span></span> validationFailures<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token keyword">new</span><span class="token punctuation">(</span>validationFailures<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>f <span class="token operator">=&gt;</span> Error<span class="token punctuation">.</span><span class="token function">Problem</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>ErrorCode<span class="token punctuation">,</span> f<span class="token punctuation">.</span>ErrorMessage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each decorator handles a single concern and can be layered transparently around the core handler.</p><div class="hint-container important"><p class="hint-container-title">Important</p><p>Since we&#39;re working with generic interfaces (<code>ICommandHandler&lt;,&gt;</code>, <code>IQueryHandler&lt;,&gt;</code>), each decorator must explicitly target the same generic contract. That means you&#39;ll need separate decorator classes for each handler abstraction you&#39;re using (e.g. command with result, command without result, query with result).</p></div>`,3)),s("p",null,[n[20]||(n[20]=a("In the next section, we'll wire this up using ")),s("a",R,[t(u,{icon:"iconfont icon-github"}),n[19]||(n[19]=s("code",null,"khellang/Scrutor",-1))]),n[21]||(n[21]=a(". It's a simple assembly scanning library that helps us register and decorate handlers cleanly. Yes, it uses reflection, but only during startup — and it's fully transparent and predictable."))]),n[31]||(n[31]=c(`<hr><h2 id="di-setup" tabindex="-1"><a class="header-anchor" href="#di-setup"><span>DI Setup</span></a></h2><p>With our handlers and decorators in place, we can register everything using Scrutor.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">services<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>scan <span class="token operator">=&gt;</span> scan<span class="token punctuation">.</span><span class="token function">FromAssembliesOf</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DependencyInjection</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddClasses</span><span class="token punctuation">(</span>classes <span class="token operator">=&gt;</span> classes<span class="token punctuation">.</span><span class="token function">AssignableTo</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IQueryHandler<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">publicOnly</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">AsImplementedInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">WithScopedLifetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddClasses</span><span class="token punctuation">(</span>classes <span class="token operator">=&gt;</span> classes<span class="token punctuation">.</span><span class="token function">AssignableTo</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ICommandHandler<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">publicOnly</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">AsImplementedInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">WithScopedLifetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">AddClasses</span><span class="token punctuation">(</span>classes <span class="token operator">=&gt;</span> classes<span class="token punctuation">.</span><span class="token function">AssignableTo</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ICommandHandler<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">publicOnly</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">AsImplementedInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">WithScopedLifetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This scans the application assembly and registers all command and query handlers (including internal types) as their respective interfaces.</p><p>Next, we apply decorators for validation and logging:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">services<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ICommandHandler<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ValidationDecorator<span class="token punctuation">.</span>CommandHandler<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">services<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ICommandHandler<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ValidationDecorator<span class="token punctuation">.</span>CommandBaseHandler<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">services<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IQueryHandler<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">LoggingDecorator<span class="token punctuation">.</span>QueryHandler<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">services<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ICommandHandler<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">LoggingDecorator<span class="token punctuation">.</span>CommandHandler<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">services<span class="token punctuation">.</span><span class="token function">Decorate</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ICommandHandler<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">LoggingDecorator<span class="token punctuation">.</span>CommandBaseHandler<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each <code>Decorate</code> call wraps the previous registration. <strong>Order matters</strong>, but it might not be intuitive at first glance.</p><p>The last decorator applied will be the outermost one at runtime. So in this example:</p><ul><li>The <strong>base handler</strong> is first decorated by <strong>validation</strong></li><li>That composite is then decorated again by <strong>logging</strong></li></ul><p>Which means the <strong>logging decorator runs first</strong>, followed by <strong>validation</strong>, and then the core handler.</p><p>This order allows logging to capture the full command lifecycle, including any early exits from validation failures.</p><p>With this setup, you now have a fully functional and extensible CQRS pipeline:</p><ul><li>Custom handler interfaces</li><li>Clean decorator chain</li><li>Assembly-scanned DI setup</li></ul><hr><h2 id="usage-from-minimal-api" tabindex="-1"><a class="header-anchor" href="#usage-from-minimal-api"><span>Usage from Minimal API</span></a></h2><p>Once everything is wired up, using a command handler from a Minimal API endpoint is straightforward:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Complete</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEndpoint</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MapEndpoint</span><span class="token punctuation">(</span><span class="token class-name">IEndpointRouteBuilder</span> app<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        app<span class="token punctuation">.</span><span class="token function">MapPut</span><span class="token punctuation">(</span><span class="token string">&quot;todos/{id:guid}/complete&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">            <span class="token class-name">Guid</span> id<span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">ICommandHandler<span class="token punctuation">&lt;</span>CompleteTodoCommand<span class="token punctuation">&gt;</span></span> handler<span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CompleteTodoCommand</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">await</span> handler<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>Results<span class="token punctuation">.</span>NoContent<span class="token punctuation">,</span> CustomResults<span class="token punctuation">.</span>Problem<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">WithTags</span><span class="token punctuation">(</span>Tags<span class="token punctuation">.</span>Todos<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">RequireAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;re injecting the appropriate <code>ICommandHandler&lt;CompleteTodoCommand&gt;</code> directly into the endpoint. No need for <code>ISender</code>, no mediator layer, no runtime lookup.</p><p>This keeps the endpoint clean and focused on its primary responsibility: handling HTTP requests.</p><p>Everything is resolved explicitly by the container. This makes the code easier to test, reason about, and trace while maintaining all the benefits of CQRS and separation of concerns.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>CQRS doesn&#39;t require a complex framework.</p><p>With a few small interfaces, some decorator classes, and a clean DI setup, you can build a simple and flexible pipeline for handling commands and queries. It&#39;s easy to understand, easy to test, and easy to extend.</p>`,25)),s("p",null,[n[23]||(n[23]=a("If you want to see this pattern applied in a complete solution, my ")),t(l,{to:"/milanjovanovic.tech/templates/clean-architecture/"},{default:e(()=>n[22]||(n[22]=[s("strong",null,"free Clean Architecture template",-1)])),_:1,__:[22]}),n[24]||(n[24]=a(" includes everything covered in this article (fully wired up)."))]),n[32]||(n[32]=s("p",null,"Use it as a reference or as a starting point for your next project.",-1)),n[33]||(n[33]=s("hr",null,null,-1)),h(" TODO: add ARTICLE CARD "),t(i,r(d({title:"CQRS Pattern the Way It Should've Been From the Start",desc:"Learn how to implement CQRS in .NET without relying on MediatR. This guide walks you through a lightweight setup using simple interfaces, decorators, and DI — no frameworks required.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/cqrs-pattern-the-way-it-should-have-been-from-the-start.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const A=v(f,[["render",x]]),j=JSON.parse(`{"path":"/milanjovanovic.tech/cqrs-pattern-the-way-it-should-have-been-from-the-start.html","title":"CQRS Pattern the Way It Should've Been From the Start","lang":"en-US","frontmatter":{"lang":"en-US","title":"CQRS Pattern the Way It Should've Been From the Start","description":"Article(s) > CQRS Pattern the Way It Should've Been From the Start","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CQRS Pattern the Way It Should've Been From the Start\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_142.png\\"],\\"datePublished\\":\\"2025-05-17T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/cqrs-pattern-the-way-it-should-have-been-from-the-start.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"CQRS Pattern the Way It Should've Been From the Start"}],["meta",{"property":"og:description","content":"Article(s) > CQRS Pattern the Way It Should've Been From the Start"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_142.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_142.png"}],["meta",{"name":"twitter:image:alt","content":"CQRS Pattern the Way It Should've Been From the Start"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-05-17T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > CQRS Pattern the Way It Should've Been From the Start"},{"property":"og:description","content":"CQRS Pattern the Way It Should've Been From the Start"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/cqrs-pattern-the-way-it-should-have-been-from-the-start.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-05-17T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_142.png"},"git":{},"readingTime":{"minutes":5.71,"words":1713},"filePathRelative":"milanjovanovic.tech/cqrs-pattern-the-way-it-should-have-been-from-the-start.md","copyright":{"author":"Milan Jovanović"}}`);export{A as comp,j as data};
