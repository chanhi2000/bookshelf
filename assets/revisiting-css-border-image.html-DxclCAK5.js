import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as n,f as a,b as l,a as v,t as f,n as m,g,w as t,e,r as p,o as y}from"./app-BVguHYKu.js";const w={},F={id:"frontmatter-title-관련",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-관련"},E={class:"table-of-contents"},A={href:"https://stuffandnonsense.co.uk/hardboiled-web-design",target:"_blank",rel:"noopener noreferrer"},x={class:"hint-container tip"},D={href:"https://stuffandnonsense.co.uk/transcending-css-revisited/index.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://stuffandnonsense.co.uk/books",target:"_blank",rel:"noopener noreferrer"},I={href:"https://stuffandnonsense.co.uk",target:"_blank",rel:"noopener noreferrer"},B={href:"https://codepen.io/collection/QbWmYL",target:"_blank",rel:"noopener noreferrer"},_={href:"https://base64.guru/converter/encode/image/svg",target:"_blank",rel:"noopener noreferrer"},z={class:"hint-container tip"},T={href:"https://codepen.io/collection/QbWmYL",target:"_blank",rel:"noopener noreferrer"},j={class:"hint-container info"},V={href:"https://stuffandnonsense.co.uk/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://stuffandnonsense.co.uk/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://stuffandnonsense.co.uk/projects/contract-killer",target:"_blank",rel:"noopener noreferrer"};function P(r,s){const d=p("VPCard"),i=p("router-link"),h=p("SiteInfo"),u=p("RouteLink"),o=p("VPIcon"),c=p("CodePen");return y(),k("div",null,[n("h1",F,[n("a",C,[n("span",null,f(r.$frontmatter.title)+" 관련",1)])]),a(d,m(g({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",E,[n("ul",null,[n("li",null,[a(i,{to:"#a-brief-overview-of-properties-and-values"},{default:t(()=>s[0]||(s[0]=[e("A brief overview of properties and values")])),_:1,__:[0]})]),n("li",null,[a(i,{to:"#a-border-image-s-source"},{default:t(()=>s[1]||(s[1]=[e("A border-image’s source")])),_:1,__:[1]})]),n("li",null,[a(i,{to:"#slicing-up-a-border-image"},{default:t(()=>s[2]||(s[2]=[e("Slicing up a border-image")])),_:1,__:[2]})]),n("li",null,[a(i,{to:"#filling-in-the-center"},{default:t(()=>s[3]||(s[3]=[e("Filling in the center")])),_:1,__:[3]})]),n("li",null,[a(i,{to:"#setting-up-repeats"},{default:t(()=>s[4]||(s[4]=[e("Setting up repeats")])),_:1,__:[4]}),n("ul",null,[n("li",null,[a(i,{to:"#stretch"},{default:t(()=>s[5]||(s[5]=[e("stretch")])),_:1,__:[5]})]),n("li",null,[a(i,{to:"#repeat"},{default:t(()=>s[6]||(s[6]=[e("repeat")])),_:1,__:[6]})]),n("li",null,[a(i,{to:"#round"},{default:t(()=>s[7]||(s[7]=[e("round")])),_:1,__:[7]})]),n("li",null,[a(i,{to:"#sace"},{default:t(()=>s[8]||(s[8]=[e("sace")])),_:1,__:[8]})])])]),n("li",null,[a(i,{to:"#outsetting-a-border-image"},{default:t(()=>s[9]||(s[9]=[e("Outsetting a border-image")])),_:1,__:[9]})]),n("li",null,[a(i,{to:"#border-image-in-action"},{default:t(()=>s[10]||(s[10]=[e("border-image in action")])),_:1,__:[10]})]),n("li",null,[a(i,{to:"#decorative-buttons"},{default:t(()=>s[11]||(s[11]=[e("Decorative buttons")])),_:1,__:[11]})]),n("li",null,[a(i,{to:"#article-scroll"},{default:t(()=>s[12]||(s[12]=[e("Article scroll")])),_:1,__:[12]})]),n("li",null,[a(i,{to:"#home-page-overlay"},{default:t(()=>s[13]||(s[13]=[e("Home page overlay")])),_:1,__:[13]})]),n("li",null,[a(i,{to:"#conclusion-you-should-take-a-fresh-look-at-border-image"},{default:t(()=>s[14]||(s[14]=[e("Conclusion: You should take a fresh look at border-image")])),_:1,__:[14]})])])]),s[56]||(s[56]=n("hr",null,null,-1)),a(h,{name:"Revisiting CSS border-image",desc:"I’ve used border-image regularly. Yet, it remains one of the most underused CSS tools, and I can’t, for the life of me, figure out why. Is it possible that people steer clear of border-image because its syntax is awkward and unintuitive? Perhaps it’s because most explanations don’t solve the type of creative implementation problems that most people need to solve. Most likely, it’s both.",url:"https://css-tricks.com/revisiting-css-border-image",logo:"https://css-tricks/favicon.svg",preview:"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/border-image-menu.png"}),n("p",null,[s[16]||(s[16]=e("In my last article on ")),a(u,{to:"/css-tricks.com/revisiting-css-multi-column-layout.html"},{default:t(()=>s[15]||(s[15]=[n("strong",null,"“Revisiting CSS Multi-Column Layout”",-1)])),_:1,__:[15]}),s[17]||(s[17]=e(", I mentioned that almost twenty years have flown by since I wrote my first book, ")),s[18]||(s[18]=n("em",null,"Transcending CSS",-1)),s[19]||(s[19]=e(". In it, I explained how and why to use what were, at the time, an emerging CSS property."))]),n("p",null,[s[21]||(s[21]=e("Ten years later, I wrote the ")),n("a",A,[a(o,{icon:"fas fa-globe"}),s[20]||(s[20]=n("em",null,"Hardboiled Web Design Fifth Anniversary Edition",-1))]),s[22]||(s[22]=e(", covering similar ground and introducing the new CSS ")),s[23]||(s[23]=n("code",null,"border-image",-1)),s[24]||(s[24]=e(" property."))]),n("div",x,[s[30]||(s[30]=n("p",{class:"hint-container-title"},"Hint",-1)),n("p",null,[s[27]||(s[27]=e("I published an updated version, ")),n("em",null,[n("a",D,[a(o,{icon:"fas fa-globe"}),s[25]||(s[25]=e("Transcending CSS Revisited"))])]),s[28]||(s[28]=e(" which is free to read online. Hardboiled Web Design is available from ")),n("a",S,[a(o,{icon:"fas fa-globe"}),s[26]||(s[26]=e("my bookshop"))]),s[29]||(s[29]=e("."))])]),s[57]||(s[57]=n("p",null,"I was very excited about the possibilities this new property would offer. After all, we could now add images to the borders of any element, even table cells and rows (unless their borders had been set to collapse).",-1)),s[58]||(s[58]=n("p",null,[e("Since then, I’ve used "),n("code",null,"border-image"),e(" regularly. Yet, it remains one of the most underused CSS tools, and I can’t, for the life of me, figure out why. Is it possible that people steer clear of "),n("code",null,"border-image"),e(" because its syntax is awkward and unintuitive? Perhaps it’s because most explanations don’t solve the type of creative implementation problems that most people need to solve. Most likely, it’s both.")],-1)),s[59]||(s[59]=n("p",null,[e("I’ve recently been working on a new website for Emmy-award-winning game composer Mike Worth. He hired me to create a highly graphical design that showcases his work, and I used "),n("code",null,"border-image"),e(" throughout.")],-1)),n("figure",null,[s[36]||(s[36]=n("img",{src:"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264165055_2025-03-1-scaled.webp?resize=2560%2C1758&ssl=1",alt:'Design by <VPIcon icon="fas fa-globe"/>Andy Clarke, Stuff & Nonsense. Mike Worth’s website will launch in April 2025, but you can <VPIcon icon="fa-brands fa-codepen"/>see examples from this article on CodePen.',tabindex:"0",loading:"lazy"},null,-1)),n("figcaption",null,[s[33]||(s[33]=e("Design by ")),n("a",I,[a(o,{icon:"fas fa-globe"}),s[31]||(s[31]=e("Andy Clarke, Stuff & Nonsense"))]),s[34]||(s[34]=e(". Mike Worth’s website will launch in April 2025, but you can ")),n("a",B,[a(o,{icon:"fa-brands fa-codepen"}),s[32]||(s[32]=e("see examples from this article on CodePen"))]),s[35]||(s[35]=e("."))])]),s[60]||(s[60]=l(`<hr><h2 id="a-brief-overview-of-properties-and-values" tabindex="-1"><a class="header-anchor" href="#a-brief-overview-of-properties-and-values"><span>A brief overview of properties and values</span></a></h2><p>First, here’s a short refresher. Most <code>border-image</code> explanations begin with this highly illuminating code snippet:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image</span><span class="token punctuation">:</span> [source] [slice]/[width]/[outset] [repeat]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This is shorthand for a set of <code>border-image</code> properties, but it’s best to deal with properties individually to grasp the concept more easily.</p><hr><h2 id="a-border-image-s-source" tabindex="-1"><a class="header-anchor" href="#a-border-image-s-source"><span>A <code>border-image</code>’s source</span></a></h2><p>I’ll start with the source of the bitmap or vector format image or CSS gradient to be inserted into the border space:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image-source</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;/img/scroll.png&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>When I insert SVG images into a border, I have several choices as to how. I could use an external SVG file:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image-source</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;/img/scroll.svg&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,11)),n("p",null,[s[39]||(s[39]=e("Or I might convert my SVG to data URI using a tool like ")),n("a",_,[a(o,{icon:"fas fa-globe"}),s[37]||(s[37]=e("Base64.Guru"))]),s[40]||(s[40]=e(" although, as both SVG and HTML are XML-based, ")),a(u,{to:"/css-tricks.com/probably-dont-base64-svg.html"},{default:t(()=>s[38]||(s[38]=[n("strong",null,"this isn’t recommended",-1)])),_:1,__:[38]}),s[41]||(s[41]=e(":"))]),s[61]||(s[61]=l(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image-source</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;data:image/svg+xml;base64,…&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Instead, I can add the SVG code directly into the source URL value and save one unnecessary HTTP request:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image-source</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;data:image/svg+xml;utf8,…&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Finally, I could insert an entirely CSS-generated conical, linear, or radial gradient into my border:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image-source</span><span class="token punctuation">:</span> <span class="token function">conical-gradient</span><span class="token punctuation">(</span>…<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>It’s useful to remember that a browser renders a <code>border-image</code> above an element’s background and <code>box-shadow</code> but below its content. More on that a little later.</p></div><hr><h2 id="slicing-up-a-border-image" tabindex="-1"><a class="header-anchor" href="#slicing-up-a-border-image"><span>Slicing up a <code>border-image</code></span></a></h2><p>Now that I’ve specified the source of a border image, I can apply it to a border by slicing it up and using the parts in different positions around an element. This can be the most baffling aspect for people new to <code>border-image</code>.</p><p>Most <code>border-image</code> explanations show an example where the pieces will simply be equally-sized, like this:</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264637220_2025-03-2-1024x293.webp?resize=1024%2C293&amp;ssl=1" alt="Showing nine star shapes in the same images displayed as a three-by-three grid." tabindex="0" loading="lazy"><figcaption>Showing nine star shapes in the same images displayed as a three-by-three grid.</figcaption></figure><p>However, a <code>border-image</code> can be developed from any shape, no matter how complex or irregular.</p><p>Instead of simply inserting an image into a border and watching it repeat around an element, invisible cut-lines slice up a <code>border-image</code> into nine parts. These lines are similar to the slice guides found in graphics applications. The pieces are, in turn, inserted into the nine regions of an element’s border.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264662803_2025-03-3-scaled.webp?resize=2560%2C768&amp;ssl=1" alt="Dissecting the top, right, bottom, and left slices of a border image." tabindex="0" loading="lazy"><figcaption>Dissecting the top, right, bottom, and left slices of a border image.</figcaption></figure><p>The <code>border-image-slice</code> property defines the size of each slice by specifying the distance from each edge of the image. I could use the same distance from every edge:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image-slice</span><span class="token punctuation">:</span> 65</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>I can combine top/bottom and left/right values:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image-slice</span><span class="token punctuation">:</span> 115 65<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Or, I can specify distance values for all four cut-lines, running clockwise: top, right, bottom, left:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image-slice</span><span class="token punctuation">:</span> 65 65 115 125<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The top-left of an image will be used on the top-left corner of an element’s border. The bottom-right will be used on the bottom-right, and so on.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264758550_2025-03-4-scaled.webp?resize=2560%2C1273&amp;ssl=1" alt="Diagram of the nine border image slices." tabindex="0" loading="lazy"><figcaption>Diagram of the nine border image slices.</figcaption></figure><p>I don’t need to add units to <code>border-image-slice</code> values when using a bitmap image as the browser correctly assumes bitmaps use pixels. The SVG <code>viewBox</code> makes using them a little different, so I also prefer to specify their <code>height</code> and <code>width</code>:</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>600px<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>600px<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>…<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Don’t forget to set the widths of these borders, as without them, there will be nowhere for a border’s image to display:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image-width</span><span class="token punctuation">:</span> 65px 65px 115px 125px<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="filling-in-the-center" tabindex="-1"><a class="header-anchor" href="#filling-in-the-center"><span>Filling in the center</span></a></h2><p>So far, I’ve used all four corners and sides of my image, but what about the center? By default, the browser will ignore the center of an image after it’s been sliced. But I can put it to use by adding the <code>fill</code> keyword to my <code>border-image-slice</code> value:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image-slice</span><span class="token punctuation">:</span> 65px 65px 115px 125px fill<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="setting-up-repeats" tabindex="-1"><a class="header-anchor" href="#setting-up-repeats"><span>Setting up repeats</span></a></h2><p>With the corners of my border images in place, I can turn my attention to the edges between them. As you might imagine, the slice at the top of an image will be placed on the top edge. The same is true of the right, bottom, and left edges. In a flexible design, we never know how wide or tall these edges will be, so I can fine-tune how images will repeat or stretch when they fill an edge.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264943610_2025-03-5-scaled.webp?resize=2560%2C869&amp;ssl=1" alt="Showing the same image four times, once per type of repeat, including stretch, repeat, round, and space." tabindex="0" loading="lazy"><figcaption>Showing the same image four times, once per type of repeat, including stretch, repeat, round, and space.</figcaption></figure><h3 id="stretch" tabindex="-1"><a class="header-anchor" href="#stretch"><span><code>stretch</code></span></a></h3><p>When a sliced image is flat or smooth, it can stretch to fill any height or width. Even a tiny <code>65px</code> slice can stretch to hundreds or thousands of pixels without degrading.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image-repeat</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="repeat" tabindex="-1"><a class="header-anchor" href="#repeat"><span><code>repeat</code></span></a></h3><p>If an image has texture, stretching it isn’t an option, so it can repeat to fill any height or width.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image-repeat</span><span class="token punctuation">:</span> repeat<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="round" tabindex="-1"><a class="header-anchor" href="#round"><span><code>round</code></span></a></h3><p>If an image has a pattern or shape that can’t be stretched and I need to match the edges of the repeat, I can specify that the repeat be <code>round</code>. A browser will resize the image so that only whole pieces display inside an edge.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image-repeat</span><span class="token punctuation">:</span> round<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="sace" tabindex="-1"><a class="header-anchor" href="#sace"><span><code>sace</code></span></a></h3><p>Similar to <code>round</code>, when using the space property, only whole pieces will display inside an edge. But instead of resizing the image, a browser will add spaces into the repeat.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image-repeat</span><span class="token punctuation">:</span> space<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>When I need to specify a separate <code>stretch</code>, <code>repeat</code>, <code>round</code>, or <code>space</code> value for each edge, I can use multiple keywords:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image-repeat</span><span class="token punctuation">:</span> stretch round<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="outsetting-a-border-image" tabindex="-1"><a class="header-anchor" href="#outsetting-a-border-image"><span>Outsetting a <code>border-image</code></span></a></h2><p>There can be times when I need an image to extend beyond an element’s <code>border-box</code>. Using the <code>border-image-outset</code> property, I can do just that. The simplest syntax extends the border image evenly on all sides by <code>10px</code>:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image-outset</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Of course, there being four borders on every element, I could also specify each outset individually:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-image-outset</span><span class="token punctuation">:</span> 20px 10px<span class="token punctuation">;</span> </span>
<span class="line"><span class="token comment">/* or */</span></span>
<span class="line"><span class="token property">border-image-outset</span><span class="token punctuation">:</span> 20px 10px 0<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="border-image-in-action" tabindex="-1"><a class="header-anchor" href="#border-image-in-action"><span><code>border-image</code> in action</span></a></h2><p>Mike Worth is a video game composer who’s won an Emmy for his work. He loves ’90s animation — especially Disney’s <em>Duck Tales</em> — and he asked me to create custom artwork and develop a bold, retro-style design.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265156777_2025-03-6-scaled.webp?resize=2560%2C1758&amp;ssl=1" alt="Four examples of page layouts, including the main menu, a default page, message received confirmation, and a 404 page, all featuring bold cartoon illustrations reminiscent of nineties Disney cartoons." tabindex="0" loading="lazy"><figcaption>Four examples of page layouts, including the main menu, a default page, message received confirmation, and a 404 page, all featuring bold cartoon illustrations reminiscent of nineties Disney cartoons.</figcaption></figure><p>My challenge when developing for Mike was implementing my highly graphical design without compromising performance, especially on mobile devices. While it’s normal in CSS to accomplish the same goal in several ways, here, <code>border-image</code> often proved to be the most efficient.</p><hr><h2 id="decorative-buttons" tabindex="-1"><a class="header-anchor" href="#decorative-buttons"><span>Decorative buttons</span></a></h2><p>The easiest and most obvious place to start was creating buttons reminiscent of stone tablets with chipped and uneven edges.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265262847_2025-03-7-scaled.webp?resize=2560%2C549&amp;ssl=1" alt="Illustration of chipped and zagged edges spliced up for border-image." tabindex="0" loading="lazy"><figcaption>Illustration of chipped and zagged edges spliced up for border-image.</figcaption></figure><p>I created an SVG of the tablet shape and added it to my buttons using <code>border-image</code>:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">button</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">border-image-repeat</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">border-image-slice</span><span class="token punctuation">:</span> 10 10 10 10 fill<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">border-image-source</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;data:image/svg+xml;utf8,…&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">border-image-width</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I set the <code>border-image-repeat</code> on all edges to <code>stretch</code> and the center slice to <code>fill</code> so these stone tablet-style buttons expand along with their content to any height or width.</p>`,66)),a(c,{user:"malarkey","slug-hash":"xbxdoBO",title:"Button with SVG border-image","default-tab":["css","result"],theme:r.$isDarkmode?"dark":"light"},null,8,["theme"]),s[62]||(s[62]=l(`<hr><h2 id="article-scroll" tabindex="-1"><a class="header-anchor" href="#article-scroll"><span>Article scroll</span></a></h2><p>I want every aspect of Mike’s website design to express his brand. That means continuing the ’90s cartoon theme in his long-form content by turning it into a paper scroll.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270707387_2025-03-8.webp?resize=1600%2C1080&amp;ssl=1" alt="Page layout of a paper scroll with jagged edges on the sides and rolled paper on the top and bottom." tabindex="0" loading="lazy"><figcaption>Page layout of a paper scroll with jagged edges on the sides and rolled paper on the top and bottom.</figcaption></figure><p>The markup is straightforward with just a single <code>article</code> element:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token comment">&lt;!-- ... --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But, I struggled to decide how to implement the paper effect. My first thought was to divide my scroll into three separate SVG files (top, middle, and bottom) and use pseudo-elements to add the rolled up top and bottom parts of the scroll. I started by applying a vertically repeating graphic to the middle of my article:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">article</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">padding</span><span class="token punctuation">:</span> 10rem 8rem<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/* Scroll middle */</span></span>
<span class="line">  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;data:image/svg+xml;utf8,…&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background-position</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background-repeat</span><span class="token punctuation">:</span> repeat-y<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background-size</span><span class="token punctuation">:</span> contain<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, I added two pseudo-elements, each containing its own SVG content:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">article:before</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">top</span><span class="token punctuation">:</span> -30px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/* Scroll top */</span></span>
<span class="line">  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;data:image/svg+xml;utf8,…&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">article:after</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">top</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/* Scroll bottom */</span></span>
<span class="line">  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;data:image/svg+xml;utf8,…&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>While this implementation worked as expected, using two pseudo-elements and three separate SVG files felt clumsy. However, using <code>border-image</code>, one SVG, and no pseudo-elements feels more elegant and significantly reduces the amount of code needed to implement the effect.</p><p>I started by creating an SVG of the complete tablet shape:</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270415707_2025-03-9-scaled.webp?resize=2560%2C1099&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>And I worked out the position of the four cut-lines:</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270432341_2025-03-10-scaled.webp?resize=2560%2C1371&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Then, I inserted this single SVG into my article’s border by first selecting the source, slicing the image, and setting the top and bottom edges to <code>stretch</code> and the left and right edges to <code>round</code>:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">article</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">border-image-slice</span><span class="token punctuation">:</span> 150 95 150 95 fill<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">border-image-width</span><span class="token punctuation">:</span> 150px 95px 150px 95px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">border-image-repeat</span><span class="token punctuation">:</span> stretch round<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">border-image-source</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;data:image/svg+xml;utf8,…&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The result is a flexible paper scroll effect which adapts to both the viewport width and any amount or type of content.</p>`,18)),a(c,{user:"malarkey","slug-hash":"GgRmVpG",title:"Article scroll with border-image","default-tab":["css","result"],theme:r.$isDarkmode?"dark":"light"},null,8,["theme"]),s[63]||(s[63]=l(`<hr><h2 id="home-page-overlay" tabindex="-1"><a class="header-anchor" href="#home-page-overlay"><span>Home page overlay</span></a></h2><p>My final challenge was implementing the action-packed graphic I’d designed for Mike Worth’s home page. This contains a foreground SVG featuring Mike’s orangutan mascot and a zooming background graphic:</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270949769_2025-03-11.webp?resize=1600%2C1080&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token comment">&lt;!-- content --&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">&lt;!-- ape --&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">&gt;</span></span>…<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I defined the <code>section</code> as a positioning context for its children:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">section</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, I absolutely positioned a pseudo-element and added the zooming graphic to its background:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">section:before</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;data:image/svg+xml;utf8,…&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background-position</span><span class="token punctuation">:</span> center center<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background-size</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I wanted this graphic to spin and add subtle movement to the panel, so I applied a simple CSS animation to the pseudo-element:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@keyframes</span> spin-bg</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">from</span> <span class="token punctuation">{</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token selector">to</span> <span class="token punctuation">{</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">section:before</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">animation</span><span class="token punctuation">:</span> spin-bg 240s linear infinite<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, I added a CSS mask to fade the edges of the zooming graphic into the background. The CSS <code>mask-image</code> property specifies a mask layer image, which can be a PNG image, an SVG image or mask, or a CSS gradient:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">section:before</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">mask-image</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>circle<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>0 0 0<span class="token punctuation">)</span> 0%<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>0 0 0 / 0<span class="token punctuation">)</span> 60%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">mask-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>At this point, you might wonder where a border image could be used in this design. To add more interactivity to the graphic, I wanted to reduce its <code>opacity</code> and change its color — by adding a colored gradient overlay — when someone interacts with it. One of the simplest, but rarely-used, methods for applying an overlay to an element is using <code>border-image</code>. First, I added a default <code>opacity</code> and added a brief <code>transition</code>:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">section:before</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">transition</span><span class="token punctuation">:</span> opacity .25s ease-in-out<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, on hover, I reduced the <code>opacity</code> to <code>.5</code> and added a <code>border-image</code>:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">section:hover::before</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">opacity</span><span class="token punctuation">:</span> .5<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">border-image</span><span class="token punctuation">:</span> fill 0 <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>255<span class="token punctuation">,</span>.25<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You may ponder why I’ve not used the other <code>border-image</code> values I explained earlier, so I’ll dissect that declaration. First is the <code>border-image-slice</code> value, where zero pixels ensures that the eight corners and edges stay empty. The <code>fill</code> keyword ensures the middle section is filled with the linear gradient. Second, the <code>border-image-source</code> is a CSS linear gradient that blends blue into red. A browser renders this <code>border-image</code> above the background but behind the content.</p>`,18)),a(c,{user:"malarkey","slug-hash":"bNGWXqJ",title:"Illustration with border-image overlay","default-tab":["css","result"],theme:r.$isDarkmode?"dark":"light"},null,8,["theme"]),s[64]||(s[64]=l('<hr><h2 id="conclusion-you-should-take-a-fresh-look-at-border-image" tabindex="-1"><a class="header-anchor" href="#conclusion-you-should-take-a-fresh-look-at-border-image"><span>Conclusion: You should take a fresh look at <code>border-image</code></span></a></h2><p>The <code>border-image</code> property is a powerful, yet often overlooked, CSS tool that offers incredible flexibility. By slicing, repeating, and outsetting images, you can create intricate borders, decorative elements, and even dynamic overlays with minimal code.</p><p>In my work for Mike Worth’s website, <code>border-image</code> proved invaluable, improving performance while maintaining a highly graphical aesthetic. Whether used for buttons, interactive overlays, or larger graphic elements, <code>border-image</code> can create visually striking designs without relying on extra markup or multiple assets.</p><p>If you’ve yet to experiment with <code>border-image</code>, now’s the time to revisit its potential and add it to your design toolkit.</p>',5)),n("div",z,[s[45]||(s[45]=n("p",{class:"hint-container-title"},"Hint",-1)),n("p",null,[s[43]||(s[43]=e("Mike Worth’s website will launch in April 2025, but you can see ")),n("a",T,[a(o,{icon:"fa-brands fa-codepen"}),s[42]||(s[42]=e("examples from this article on CodePen"))]),s[44]||(s[44]=e("."))])]),n("div",j,[s[54]||(s[54]=n("p",{class:"hint-container-title"},"About Andy Clarke",-1)),n("p",null,[s[47]||(s[47]=e("Often referred to as one of the pioneers of web design, ")),n("a",V,[a(o,{icon:"fas fa-globe"}),s[46]||(s[46]=e("Andy Clarke"))]),s[48]||(s[48]=e(" has been instrumental in pushing the boundaries of web design and is known for his creative and visually stunning designs. His work has inspired countless designers to explore the full potential of product and website design."))]),s[55]||(s[55]=n("p",null,[e("Andy’s written several industry-leading books, including "),n("em",null,"Transcending CSS"),e(", "),n("em",null,"Hardboiled Web Design"),e(", and "),n("em",null,"Art Direction for the Web"),e(". He’s also worked with businesses of all sizes and industries to achieve their goals through design.")],-1)),n("p",null,[s[51]||(s[51]=e("Visit Andy’s studio, ")),n("a",M,[a(o,{icon:"fas fa-globe"}),s[49]||(s[49]=e("Stuff & Nonsense"))]),s[52]||(s[52]=e(", and check out his ")),n("a",R,[a(o,{icon:"fas fa-globe"}),s[50]||(s[50]=e("Contract Killer"))]),s[53]||(s[53]=e(", the popular web design contract template trusted by thousands of web designers and developers."))])]),v(" TODO: add ARTICLE CARD "),a(d,m(g({title:"Revisiting CSS border-image",desc:"I’ve used border-image regularly. Yet, it remains one of the most underused CSS tools, and I can’t, for the life of me, figure out why. Is it possible that people steer clear of border-image because its syntax is awkward and unintuitive? Perhaps it’s because most explanations don’t solve the type of creative implementation problems that most people need to solve. Most likely, it’s both.",link:"https://chanhi2000.github.io/bookshelf/css-tricks.com/revisiting-css-border-image.html",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16)])}const H=b(w,[["render",P]]),N=JSON.parse('{"path":"/css-tricks.com/revisiting-css-border-image.html","title":"Revisiting CSS border-image","lang":"en-US","frontmatter":{"lang":"en-US","title":"Revisiting CSS border-image","description":"Article(s) > Revisiting CSS border-image","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","css-tricks.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Revisiting CSS border-image\\",\\"image\\":[\\"https://stuffandnonsense.co.uk\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264637220_2025-03-2-1024x293.webp?resize=1024%2C293&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264662803_2025-03-3-scaled.webp?resize=2560%2C768&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264758550_2025-03-4-scaled.webp?resize=2560%2C1273&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264943610_2025-03-5-scaled.webp?resize=2560%2C869&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265156777_2025-03-6-scaled.webp?resize=2560%2C1758&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265262847_2025-03-7-scaled.webp?resize=2560%2C549&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270707387_2025-03-8.webp?resize=1600%2C1080&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270415707_2025-03-9-scaled.webp?resize=2560%2C1099&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270432341_2025-03-10-scaled.webp?resize=2560%2C1371&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270949769_2025-03-11.webp?resize=1600%2C1080&ssl=1\\"],\\"datePublished\\":\\"2025-03-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Andy Clarke\\",\\"url\\":\\"https://css-tricks.com/author/andyclarke/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/revisiting-css-border-image.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Revisiting CSS border-image"}],["meta",{"property":"og:description","content":"Article(s) > Revisiting CSS border-image"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/border-image-menu.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/border-image-menu.png"}],["meta",{"name":"twitter:image:alt","content":"Revisiting CSS border-image"}],["meta",{"property":"article:author","content":"Andy Clarke"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"css-tricks.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-03-21T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Revisiting CSS border-image"},{"property":"og:description","content":"Revisiting CSS border-image"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/revisiting-css-border-image.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-03-21T00:00:00.000Z","isOriginal":false,"author":[{"name":"Andy Clarke","url":"https://css-tricks.com/author/andyclarke/"}],"cover":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/border-image-menu.png"},"git":{},"readingTime":{"minutes":10.47,"words":3141},"filePathRelative":"css-tricks.com/revisiting-css-border-image.md","copyright":{"author":"Andy Clarke"}}');export{H as comp,N as data};
