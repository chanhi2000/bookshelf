import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as t,b as g,a as h,t as b,n as r,g as u,w as e,e as a,r as o,o as f}from"./app-BVguHYKu.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},V={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},x={href:"https://learn.microsoft.com/en-us/aspnet/core/mvc/models/validation?view=aspnetcore-9.0#validation-attributes",target:"_blank",rel:"noopener noreferrer"},O={href:"https://docs.fluentvalidation.net/en/latest/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options",target:"_blank",rel:"noopener noreferrer"};function A(d,n){const c=o("VPCard"),i=o("router-link"),k=o("SiteInfo"),p=o("RouteLink"),l=o("VPIcon");return f(),m("div",null,[s("h1",w,[s("a",V,[s("span",null,b(d.$frontmatter.title)+" 관련",1)])]),t(c,r(u({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[t(i,{to:"#why-fluentvalidation-over-data-annotations"},{default:e(()=>n[0]||(n[0]=[a("Why FluentValidation Over Data Annotations?")])),_:1,__:[0]})]),s("li",null,[t(i,{to:"#understanding-the-options-pattern-lifecycle"},{default:e(()=>n[1]||(n[1]=[a("Understanding the Options Pattern Lifecycle")])),_:1,__:[1]})]),s("li",null,[t(i,{to:"#common-configuration-failures-without-validation"},{default:e(()=>n[2]||(n[2]=[a("Common Configuration Failures Without Validation")])),_:1,__:[2]})]),s("li",null,[t(i,{to:"#setting-up-the-foundation"},{default:e(()=>n[3]||(n[3]=[a("Setting Up the Foundation")])),_:1,__:[3]})]),s("li",null,[t(i,{to:"#creating-a-fluentvalidation-validator"},{default:e(()=>n[4]||(n[4]=[a("Creating a FluentValidation Validator")])),_:1,__:[4]})]),s("li",null,[t(i,{to:"#building-the-fluentvalidation-integration"},{default:e(()=>n[5]||(n[5]=[a("Building the FluentValidation Integration")])),_:1,__:[5]})]),s("li",null,[t(i,{to:"#how-the-fluentvalidation-integration-works"},{default:e(()=>n[6]||(n[6]=[a("How the FluentValidation Integration Works")])),_:1,__:[6]})]),s("li",null,[t(i,{to:"#creating-extension-methods-for-easy-integration"},{default:e(()=>n[7]||(n[7]=[a("Creating Extension Methods for Easy Integration")])),_:1,__:[7]})]),s("li",null,[t(i,{to:"#registering-and-using-the-validation"},{default:e(()=>n[8]||(n[8]=[a("Registering and Using the Validation")])),_:1,__:[8]}),s("ul",null,[s("li",null,[t(i,{to:"#option-1-standard-registration-with-manual-validator-registration"},{default:e(()=>n[9]||(n[9]=[a("Option 1: Standard Registration with Manual Validator Registration")])),_:1,__:[9]})]),s("li",null,[t(i,{to:"#option-2-using-the-convenience-extension-method"},{default:e(()=>n[10]||(n[10]=[a("Option 2: Using the Convenience Extension Method")])),_:1,__:[10]})]),s("li",null,[t(i,{to:"#option-3-automatic-validator-registration"},{default:e(()=>n[11]||(n[11]=[a("Option 3: Automatic Validator Registration")])),_:1,__:[11]})])])]),s("li",null,[t(i,{to:"#what-happens-at-runtime"},{default:e(()=>n[12]||(n[12]=[a("What Happens at Runtime?")])),_:1,__:[12]})]),s("li",null,[t(i,{to:"#working-with-different-configuration-sources"},{default:e(()=>n[13]||(n[13]=[a("Working with Different Configuration Sources")])),_:1,__:[13]})]),s("li",null,[t(i,{to:"#testing-your-validators"},{default:e(()=>n[14]||(n[14]=[a("Testing Your Validators")])),_:1,__:[14]})]),s("li",null,[t(i,{to:"#summary"},{default:e(()=>n[15]||(n[15]=[a("Summary")])),_:1,__:[15]})])])]),n[34]||(n[34]=s("hr",null,null,-1)),t(k,{name:"Options Pattern Validation in ASP.NET Core With FluentValidation",desc:"Elevate your ASP.NET Core configuration with FluentValidation integration that catches configuration errors at startup, preventing silent failures and runtime exceptions with more expressive validation rules than Data Annotations.",url:"https://milanjovanovic.tech/blog/options-pattern-validation-in-aspnetcore-with-fluentvalidation",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_134.png"}),s("p",null,[n[18]||(n[18]=a("If you've worked with the ")),t(p,{to:"/milanjovanovic.tech/how-to-use-the-options-pattern-in-asp-net-core-7.html"},{default:e(()=>n[16]||(n[16]=[s("strong",null,"Options Pattern",-1)])),_:1,__:[16]}),n[19]||(n[19]=a(" in ASP.NET Core, you're likely familiar with the built-in validation using ")),s("a",x,[t(l,{icon:"iconfont icon-csharp"}),n[17]||(n[17]=a("Data Annotations"))]),n[20]||(n[20]=a(". While functional, Data Annotations can be limiting for complex validation scenarios."))]),n[35]||(n[35]=s("p",null,[a("The "),s("strong",null,"Options Pattern"),a(" lets you use classes to obtain strongly typed configuration objects at runtime.")],-1)),n[36]||(n[36]=s("p",null,"The problem? You can't be certain that the configuration is valid until you try to use it.",-1)),n[37]||(n[37]=s("p",null,"So why not validate it at application startup?",-1)),s("p",null,[n[23]||(n[23]=a("In this article, we'll explore how to integrate the more powerful ")),s("a",O,[t(l,{icon:"fas fa-globe"}),n[21]||(n[21]=a("FluentValidation"))]),n[24]||(n[24]=a(" library with ASP.NET Core's ")),s("a",T,[t(l,{icon:"iconfont icon-csharp"}),n[22]||(n[22]=a("Options Pattern"))]),n[25]||(n[25]=a(", to build a robust validation solution that executes at application startup."))]),n[38]||(n[38]=g(`<hr><h2 id="why-fluentvalidation-over-data-annotations" tabindex="-1"><a class="header-anchor" href="#why-fluentvalidation-over-data-annotations"><span>Why FluentValidation Over Data Annotations?</span></a></h2><p>Data Annotations work well for simple validations, but FluentValidation offers several advantages:</p><ul><li>More expressive and flexible validation rules</li><li>Better support for complex conditional validations</li><li>Cleaner separation of concerns (validation logic separate from model)</li><li>Easier testing of validation rules</li><li>Better support for custom validation logic</li><li>Allows for injecting dependencies into validators</li></ul><hr><h2 id="understanding-the-options-pattern-lifecycle" tabindex="-1"><a class="header-anchor" href="#understanding-the-options-pattern-lifecycle"><span>Understanding the Options Pattern Lifecycle</span></a></h2><p>Before diving deep into validation, it&#39;s important to understand the lifecycle of options in ASP.NET Core:</p><ul><li>Options are registered with the DI container</li><li>Configuration values are bound to options classes</li><li>Validation occurs (if configured)</li><li>Options are resolved when requested via <code>IOptions&lt;T&gt;</code>, <code>IOptionsSnapshot&lt;T&gt;</code>, or <code>IOptionsMonitor&lt;T&gt;</code></li></ul><p>The <code>ValidateOnStart()</code> method forces validation to occur during application startup rather than when options are first resolved.</p><hr><h2 id="common-configuration-failures-without-validation" tabindex="-1"><a class="header-anchor" href="#common-configuration-failures-without-validation"><span>Common Configuration Failures Without Validation</span></a></h2><p>Without validation, configuration issues can manifest in several ways:</p><ul><li><strong>Silent failures</strong>: An incorrectly configured option may result in default values being used without warning</li><li><strong>Runtime exceptions</strong>: Configuration issues may only surface when the application tries to use invalid values</li><li><strong>Cascading failures</strong>: One misconfigured component can cause failures in dependent systems</li></ul><p>By validating at startup, you create a fast feedback loop that prevents these issues.</p><hr><h2 id="setting-up-the-foundation" tabindex="-1"><a class="header-anchor" href="#setting-up-the-foundation"><span>Setting Up the Foundation</span></a></h2><p>First, let&#39;s add the FluentValidation package to our project:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> FluentValidation <span class="token comment"># base package</span></span>
<span class="line"><span class="token function">Install-Package</span> FluentValidation<span class="token punctuation">.</span>DependencyInjectionExtensions <span class="token comment"># for DI integration</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>For our example, we&#39;ll use a <code>GitHubSettings</code> class that requires validation:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="GitHubSettings.cs"><span>GitHubSettings.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GitHubSettings</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> ConfigurationSection <span class="token operator">=</span> <span class="token string">&quot;GitHubSettings&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> BaseUrl <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span><span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> AccessToken <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> RepositoryName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="creating-a-fluentvalidation-validator" tabindex="-1"><a class="header-anchor" href="#creating-a-fluentvalidation-validator"><span>Creating a FluentValidation Validator</span></a></h2><p>Next, we&#39;ll create a validator for our settings class:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="GitHubSettingsValidator.cs"><span>GitHubSettingsValidator.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GitHubSettingsValidator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AbstractValidator<span class="token punctuation">&lt;</span>GitHubSettings<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">GitHubSettingsValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>BaseUrl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>BaseUrl<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>baseUrl <span class="token operator">=&gt;</span> Uri<span class="token punctuation">.</span><span class="token function">TryCreate</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">,</span> UriKind<span class="token punctuation">.</span>Absolute<span class="token punctuation">,</span> <span class="token keyword">out</span> _<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">When</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>baseUrl<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">WithMessage</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">nameof</span><span class="token punctuation">(</span>GitHubSettings<span class="token punctuation">.</span>BaseUrl<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> must be a valid URL&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>AccessToken<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">NotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">RuleFor</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>RepositoryName<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">NotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="building-the-fluentvalidation-integration" tabindex="-1"><a class="header-anchor" href="#building-the-fluentvalidation-integration"><span>Building the FluentValidation Integration</span></a></h2><p>To integrate FluentValidation with the Options Pattern, we need to create a custom <code>IValidateOptions&lt;T&gt;</code> implementation:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="FluentValidateOptions.cs"><span>FluentValidateOptions.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">using</span> <span class="token namespace">FluentValidation</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Options</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FluentValidateOptions<span class="token punctuation">&lt;</span>TOptions<span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IValidateOptions<span class="token punctuation">&lt;</span>TOptions<span class="token punctuation">&gt;</span></span></span></span>
<span class="line">    <span class="token keyword">where</span> <span class="token class-name">TOptions</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IServiceProvider</span> _serviceProvider<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> _name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">FluentValidateOptions</span><span class="token punctuation">(</span><span class="token class-name">IServiceProvider</span> serviceProvider<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _serviceProvider <span class="token operator">=</span> serviceProvider<span class="token punctuation">;</span></span>
<span class="line">        _name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">ValidateOptionsResult</span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> name<span class="token punctuation">,</span> <span class="token class-name">TOptions</span> options<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>_name <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> _name <span class="token operator">!=</span> name<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> ValidateOptionsResult<span class="token punctuation">.</span>Skip<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        ArgumentNullException<span class="token punctuation">.</span><span class="token function">ThrowIfNull</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> scope <span class="token operator">=</span> _serviceProvider<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> validator <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IValidator<span class="token punctuation">&lt;</span>TOptions<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>IsValid<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> ValidateOptionsResult<span class="token punctuation">.</span>Success<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> type <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> failure <span class="token keyword">in</span> result<span class="token punctuation">.</span>Errors<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            errors<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Validation failed for </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">type</span><span class="token punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">failure<span class="token punctuation">.</span>PropertyName</span><span class="token punctuation">}</span></span><span class="token string"> &quot;</span></span> <span class="token operator">+</span></span>
<span class="line">                       <span class="token interpolation-string"><span class="token string">$&quot;with the error: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">failure<span class="token punctuation">.</span>ErrorMessage</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> ValidateOptionsResult<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>A few important notes about this implementation:</p><ol><li>We create a scoped service provider to properly resolve the validator (since validators are typically registered as scoped services)</li><li>We handle named options through the <code>_name</code> property</li><li>We build informative error messages that include the property name and error message</li></ol><hr><h2 id="how-the-fluentvalidation-integration-works" tabindex="-1"><a class="header-anchor" href="#how-the-fluentvalidation-integration-works"><span>How the FluentValidation Integration Works</span></a></h2><p>When adding our custom FluentValidation integration, it&#39;s helpful to understand how it connects to ASP.NET Core&#39;s options system:</p><ol><li>The <code>IValidateOptions&lt;T&gt;</code> interface is the hook that ASP.NET Core provides for options validation</li><li>Our <code>FluentValidateOptions&lt;T&gt;</code> class implements this interface to bridge to FluentValidation</li><li>When <code>ValidateOnStart()</code> is called, ASP.NET Core resolves all <code>IValidateOptions&lt;T&gt;</code> implementations and runs them</li><li>If validation fails, an <code>OptionsValidationException</code> is thrown, preventing the application from starting</li></ol><hr><h2 id="creating-extension-methods-for-easy-integration" tabindex="-1"><a class="header-anchor" href="#creating-extension-methods-for-easy-integration"><span>Creating Extension Methods for Easy Integration</span></a></h2><p>Now, let&#39;s create a few extension methods to make our validation easier to use:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="OptionsBuilderExtensions.cs"><span>OptionsBuilderExtensions.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OptionsBuilderExtensions</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">OptionsBuilder<span class="token punctuation">&lt;</span>TOptions<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">ValidateFluentValidation</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">this</span> <span class="token class-name">OptionsBuilder<span class="token punctuation">&lt;</span>TOptions<span class="token punctuation">&gt;</span></span> builder<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">where</span> <span class="token class-name">TOptions</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IValidateOptions<span class="token punctuation">&lt;</span>TOptions<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">            serviceProvider <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FluentValidateOptions<span class="token punctuation">&lt;</span>TOptions<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span></span>
<span class="line">                serviceProvider<span class="token punctuation">,</span></span>
<span class="line">                builder<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> builder<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This extension method allows us to call <code>.ValidateFluentValidation()</code> when configuring options, similar to the built-in <code>.ValidateDataAnnotations()</code> method.</p><p>For even more convenience, we can create another extension method to simplify the entire configuration process:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ServiceCollectionExtensions.cs"><span>ServiceCollectionExtensions.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ServiceCollectionExtensions</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IServiceCollection</span> <span class="token generic-method"><span class="token function">AddOptionsWithFluentValidation</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">this</span> <span class="token class-name">IServiceCollection</span> services<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> configurationSection<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">where</span> <span class="token class-name">TOptions</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddOptions</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">BindConfiguration</span><span class="token punctuation">(</span>configurationSection<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">ValidateFluentValidation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Configure FluentValidation validation</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">ValidateOnStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Validate options on application start</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> services<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="registering-and-using-the-validation" tabindex="-1"><a class="header-anchor" href="#registering-and-using-the-validation"><span>Registering and Using the Validation</span></a></h2><p>There are a few ways to use our FluentValidation integration:</p><h3 id="option-1-standard-registration-with-manual-validator-registration" tabindex="-1"><a class="header-anchor" href="#option-1-standard-registration-with-manual-validator-registration"><span>Option 1: Standard Registration with Manual Validator Registration</span></a></h3><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Register the validator</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IValidator<span class="token punctuation">&lt;</span>GitHubSettings<span class="token punctuation">&gt;</span><span class="token punctuation">,</span> GitHubSettingsValidator<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Configure options with validation</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddOptions</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GitHubSettings<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">BindConfiguration</span><span class="token punctuation">(</span>GitHubSettings<span class="token punctuation">.</span>ConfigurationSection<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ValidateFluentValidation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Configure FluentValidation validation</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ValidateOnStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="option-2-using-the-convenience-extension-method" tabindex="-1"><a class="header-anchor" href="#option-2-using-the-convenience-extension-method"><span>Option 2: Using the Convenience Extension Method</span></a></h3><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Register the validator</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IValidator<span class="token punctuation">&lt;</span>GitHubSettings<span class="token punctuation">&gt;</span><span class="token punctuation">,</span> GitHubSettingsValidator<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Use the convenience extension</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddOptionsWithFluentValidation</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GitHubSettings<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>GitHubSettings<span class="token punctuation">.</span>ConfigurationSection<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="option-3-automatic-validator-registration" tabindex="-1"><a class="header-anchor" href="#option-3-automatic-validator-registration"><span>Option 3: Automatic Validator Registration</span></a></h3><p>If you have many validators and want to register them all at once, you can use FluentValidation&#39;s assembly scanning:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Register all validators from assembly</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddValidatorsFromAssembly</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Use the convenience extension</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddOptionsWithFluentValidation</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GitHubSettings<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>GitHubSettings<span class="token punctuation">.</span>ConfigurationSection<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="what-happens-at-runtime" tabindex="-1"><a class="header-anchor" href="#what-happens-at-runtime"><span>What Happens at Runtime?</span></a></h2><p>With <code>.ValidateOnStart()</code>, the application will throw an exception during startup if any validation rules fail. For example, if your <code>appsettings.json</code> is missing the required <code>AccessToken</code>, you&#39;ll see something like:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">Microsoft.Extensions.Options.OptionsValidationException:</span>
<span class="line">    Validation failed for GitHubSettings.AccessToken with the error: &#39;Access Token&#39; must not be empty.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This prevents your application from even starting with invalid configuration, ensuring issues are caught as early as possible.</p><hr><h2 id="working-with-different-configuration-sources" tabindex="-1"><a class="header-anchor" href="#working-with-different-configuration-sources"><span>Working with Different Configuration Sources</span></a></h2><p>ASP.NET Core&#39;s configuration system supports multiple sources. When using the Options Pattern with FluentValidation, remember that validation works regardless of the source:</p><ul><li>Environment variables</li><li>Azure Key Vault</li><li>User secrets</li><li>JSON files</li><li>In-memory configuration</li></ul><p>This is particularly useful for containerized applications where configuration comes from environment variables or mounted secrets.</p><hr><h2 id="testing-your-validators" tabindex="-1"><a class="header-anchor" href="#testing-your-validators"><span>Testing Your Validators</span></a></h2><p>One benefit of using FluentValidation is that validators are easy to test:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Uses helper methods from FluentValidation.TestHelper</span></span>
<span class="line"><span class="token punctuation">[</span>Fact<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GitHubSettings_WithMissingAccessToken_ShouldHaveValidationError</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Arrange</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GitHubSettingsValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> settings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GitHubSettings</span> <span class="token punctuation">{</span> RepositoryName <span class="token operator">=</span> <span class="token string">&quot;test-repo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Act</span></span>
<span class="line">    <span class="token class-name">TestValidationResult<span class="token punctuation">&lt;</span>CreateEntryDto<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> validator<span class="token punctuation">.</span><span class="token function">TestValidate</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Assert</span></span>
<span class="line">    result<span class="token punctuation">.</span><span class="token function">ShouldNotHaveAnyValidationErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2>`,67)),s("p",null,[n[27]||(n[27]=a("By combining FluentValidation with the Options Pattern and ")),n[28]||(n[28]=s("code",null,"ValidateOnStart()",-1)),n[29]||(n[29]=a(", we create a powerful ")),t(p,{to:"/milanjovanovic.tech/cqrs-validation-with-mediatr-pipeline-and-fluentvalidation.html"},{default:e(()=>n[26]||(n[26]=[s("strong",null,"validation system",-1)])),_:1,__:[26]}),n[30]||(n[30]=a(" that ensures our application has correct configuration at startup."))]),n[39]||(n[39]=s("p",null,"This approach:",-1)),n[40]||(n[40]=s("ol",null,[s("li",null,"Provides more expressive validation rules than Data Annotations"),s("li",null,"Separates validation logic from configuration models"),s("li",null,"Catches configuration errors at application startup"),s("li",null,"Supports complex validation scenarios"),s("li",null,"Is easily testable")],-1)),s("p",null,[n[32]||(n[32]=a("This pattern is particularly valuable in ")),t(p,{to:"/milanjovanovic.tech/monolith-to-microservices-how-a-modular-monolith-helps.html"},{default:e(()=>n[31]||(n[31]=[s("strong",null,"microservice architectures",-1)])),_:1,__:[31]}),n[33]||(n[33]=a(" or containerized applications where configuration errors should be detected immediately rather than at runtime."))]),n[41]||(n[41]=s("p",null,[a("Remember to register your validators appropriately and use "),s("code",null,".ValidateOnStart()"),a(" to ensure validation happens during application startup.")],-1)),n[42]||(n[42]=s("hr",null,null,-1)),h(" TODO: add ARTICLE CARD "),t(c,r(u({title:"Options Pattern Validation in ASP.NET Core With FluentValidation",desc:"Elevate your ASP.NET Core configuration with FluentValidation integration that catches configuration errors at startup, preventing silent failures and runtime exceptions with more expressive validation rules than Data Annotations.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/options-pattern-validation-in-aspnetcore-with-fluentvalidation.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const C=v(y,[["render",A]]),E=JSON.parse('{"path":"/milanjovanovic.tech/options-pattern-validation-in-aspnetcore-with-fluentvalidation.html","title":"Options Pattern Validation in ASP.NET Core With FluentValidation","lang":"en-US","frontmatter":{"lang":"en-US","title":"Options Pattern Validation in ASP.NET Core With FluentValidation","description":"Article(s) > Options Pattern Validation in ASP.NET Core With FluentValidation","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Options Pattern Validation in ASP.NET Core With FluentValidation\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_134.png\\"],\\"datePublished\\":\\"2025-03-22T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/options-pattern-validation-in-aspnetcore-with-fluentvalidation.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Options Pattern Validation in ASP.NET Core With FluentValidation"}],["meta",{"property":"og:description","content":"Article(s) > Options Pattern Validation in ASP.NET Core With FluentValidation"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_134.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_134.png"}],["meta",{"name":"twitter:image:alt","content":"Options Pattern Validation in ASP.NET Core With FluentValidation"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-03-22T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Options Pattern Validation in ASP.NET Core With FluentValidation"},{"property":"og:description","content":"Options Pattern Validation in ASP.NET Core With FluentValidation"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/options-pattern-validation-in-aspnetcore-with-fluentvalidation.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-03-22T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_134.png"},"git":{},"readingTime":{"minutes":4.92,"words":1475},"filePathRelative":"milanjovanovic.tech/options-pattern-validation-in-aspnetcore-with-fluentvalidation.md","copyright":{"author":"Milan Jovanović"}}');export{C as comp,E as data};
