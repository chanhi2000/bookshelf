import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as n,f as o,b as r,a as d,t as h,n as u,g as m,w as t,e as s,r as l,o as f}from"./app-BVguHYKu.js";const b={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},C={class:"table-of-contents"},x={href:"https://github.com/glours/compose-telepresence-plugin",target:"_blank",rel:"noopener noreferrer"},P={class:"hint-container info"},S={href:"https://github.com/docker/compose/blob/main/docs/extension.md",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/glours/compose-telepresence-plugin",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/docker/compose/blob/main/docs/extension.md",target:"_blank",rel:"noopener noreferrer"};function A(v,e){const p=l("VPCard"),a=l("router-link"),c=l("SiteInfo"),i=l("VPIcon");return f(),g("div",null,[n("h1",y,[n("a",w,[n("span",null,h(v.$frontmatter.title)+" 관련",1)])]),o(p,u(m({title:"Docker > Article(s)",desc:"Article(s)",link:"/devops/docker/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",C,[n("ul",null,[n("li",null,[o(a,{to:"#why-provider-services-are-a-game-changer"},{default:t(()=>e[0]||(e[0]=[s("Why Provider Services Are a Game-Changer")])),_:1,__:[0]})]),n("li",null,[o(a,{to:"#using-a-provider-service-in-your-compose-file"},{default:t(()=>e[1]||(e[1]=[s("Using a Provider Service in Your Compose File")])),_:1,__:[1]}),n("ul",null,[n("li",null,[o(a,{to:"#up-action"},{default:t(()=>e[2]||(e[2]=[s("Up Action")])),_:1,__:[2]})]),n("li",null,[o(a,{to:"#down-action"},{default:t(()=>e[3]||(e[3]=[s("Down Action")])),_:1,__:[3]})])])]),n("li",null,[o(a,{to:"#how-provider-services-work-behind-the-scenes"},{default:t(()=>e[4]||(e[4]=[s("How Provider Services Work Behind the Scenes*")])),_:1,__:[4]})]),n("li",null,[o(a,{to:"#building-your-own-provider-plugin"},{default:t(()=>e[5]||(e[5]=[s("Building Your Own Provider Plugin")])),_:1,__:[5]})]),n("li",null,[o(a,{to:"#what-s-next"},{default:t(()=>e[6]||(e[6]=[s("What’s Next?")])),_:1,__:[6]})])])]),e[35]||(e[35]=n("hr",null,null,-1)),o(c,{name:"Extend Docker Compose with Provider Services",desc:"Docker Compose now supports provider services to connect to external systems—no wrappers needed. Build full-stack dev workflows, all in your Compose file.",url:"https://docker.com/blog/docker-compose-with-provider-services",logo:"https://docker.com/app/uploads/2024/02/cropped-docker-logo-favicon-192x192.png",preview:"https://docker.com/app/uploads/2025/03/image.png"}),e[36]||(e[36]=n("p",null,[s("With the release of Docker Compose v2.36.0, we’re excited to introduce a powerful new feature: "),n("strong",null,"provider services"),s(". This extension point opens up Docker Compose to interact not only with containers but also with any kind of external system, all while keeping the familiar Compose file at the center of the workflow.")],-1)),e[37]||(e[37]=n("p",null,"In this blog post, we’ll walk through what provider services are, how developers can use them to streamline their workflows, how the provider system works behind the scenes, and how you can build your own provider to extend Compose for your platform needs.",-1)),e[38]||(e[38]=n("hr",null,null,-1)),e[39]||(e[39]=n("h2",{id:"why-provider-services-are-a-game-changer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#why-provider-services-are-a-game-changer"},[n("span",null,"Why Provider Services Are a Game-Changer")])],-1)),e[40]||(e[40]=n("p",null,"Docker Compose has long been a favorite among developers for orchestrating multi-container applications in a simple and declarative way. But as development environments have become more complex, the need to integrate non-container dependencies has become a common challenge. Applications often rely on managed databases, SaaS APIs, cloud-hosted message queues, VPN tunnels, or LLM inference engines — all of which traditionally sit outside the scope of Compose.",-1)),e[41]||(e[41]=n("p",null,"Developers have had to resort to shell scripts, Makefiles, or wrapper CLIs to manage these external components, fragmenting the developer experience and making it harder to onboard new contributors or maintain consistent workflows across teams.",-1)),n("p",null,[e[7]||(e[7]=n("strong",null,"Provider services change that",-1)),e[8]||(e[8]=s(". By introducing a native extension point into Compose, developers can now define and manage external resources directly in their ")),o(i,{icon:"iconfont icon-yaml"}),e[9]||(e[9]=n("code",null,"compose.yaml",-1)),e[10]||(e[10]=s(". Compose delegates their lifecycle to the provider binary, coordinating with it as part of its own service lifecycle."))]),e[42]||(e[42]=r('<p>This makes Docker Compose a more complete solution for full-stack, platform-aware development — from local environments to hybrid or remote setups.</p><hr><h2 id="using-a-provider-service-in-your-compose-file" tabindex="-1"><a class="header-anchor" href="#using-a-provider-service-in-your-compose-file"><span>Using a Provider Service in Your Compose File</span></a></h2><p>Provider services are declared like any other Compose service, but instead of specifying an <code>image</code>, you specify a <code>provider</code> with a <code>type</code>, and optionally some <code>options</code>. The <code>type</code> must correspond to the name of a binary available in your <code>$PATH</code> that implements the Compose provider specification.</p>',4)),n("p",null,[e[14]||(e[14]=s("As an example we will use the ")),n("a",x,[e[11]||(e[11]=s("Telepresence provider plugin (")),o(i,{icon:"iconfont icon-github"}),e[12]||(e[12]=n("code",null,"glours/compose-telepresence-plugin",-1)),e[13]||(e[13]=s(")"))]),e[15]||(e[15]=s(", which routes Kubernetes traffic to a local service for live cloud debugging. This is especially useful for testing how a local service behaves when integrated into a real cluster:"))]),e[43]||(e[43]=r(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="compose.yaml"><span>compose.yaml</span></div><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">local-api</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">build</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">context</span><span class="token punctuation">:</span> ./api</span>
<span class="line">  <span class="token key atrule">develop</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">watch</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> ./api</span>
<span class="line">        <span class="token key atrule">action</span><span class="token punctuation">:</span> sync</span>
<span class="line">    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> dev—api</span>
<span class="line">  </span>
<span class="line"><span class="token key atrule">dev-api</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">provider</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">type</span><span class="token punctuation">:</span> compose<span class="token punctuation">-</span>telepresence</span>
<span class="line">    <span class="token key atrule">optlons</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">name</span><span class="token punctuation">:</span> api</span>
<span class="line">        <span class="token key atrule">port</span><span class="token punctuation">:</span> 5732<span class="token punctuation">:</span>api<span class="token punctuation">-</span><span class="token number">80</span></span>
<span class="line">        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> avatars</span>
<span class="line">        <span class="token key atrule">service</span><span class="token punctuation">:</span> api</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In this setup, when you run <code>docker compose up</code>, Compose will call the <code>compose-telepresence</code> plugin binary. The plugin performs the following actions:</p><h3 id="up-action" tabindex="-1"><a class="header-anchor" href="#up-action"><span>Up Action</span></a></h3><ul><li>Check if the Telepresence traffic manager is installed in the Kubernetes cluster, and install it if needed.</li><li>Establish an intercept to re-route traffic from the specified Kubernetes service to the local service.</li></ul><h3 id="down-action" tabindex="-1"><a class="header-anchor" href="#down-action"><span>Down Action</span></a></h3><ul><li>Remove the previously established intercept.</li><li>Uninstall the Telepresence traffic manager from the cluster.</li><li>Quit the active Telepresence session.</li></ul><div class="hint-container note"><p class="hint-container-title">Note</p><p>The structure and content of the <code>options</code> field are specific to each provider. It is up to the plugin author to define and document the expected keys and values.</p></div><p>If you’re unsure how to properly configure your provider service in your Compose file, the Compose Language Server (LSP) can guide you step by step with inline suggestions and validation.</p>`,8)),n("div",P,[e[16]||(e[16]=n("p",{class:"hint-container-title"},"Info",-1)),e[17]||(e[17]=n("p",null,"You can find more usage examples and supported workflows in the official documentation:",-1)),o(c,{name:"Use provider services",desc:"Learn how to use provider services in Docker Compose to integrate external capabilities into your applications",url:"https://docs.docker.com/compose/how-tos/provider-services//",logo:"https://docs.docker.com/favicons/docs@2x.ico",preview:"https://docs.docker.com/images/thumbnail.webp"})]),e[44]||(e[44]=r('<hr><h2 id="how-provider-services-work-behind-the-scenes" tabindex="-1"><a class="header-anchor" href="#how-provider-services-work-behind-the-scenes"><span>How Provider Services Work Behind the Scenes*</span></a></h2><p>Under the hood, when Compose encounters a service using the <code>provider</code> key, it looks for an executable in the user’s <code>$PATH</code> matching the provider <code>type</code> name (e.g. <code>docker-model cli</code> plugin or <code>compose-telepresence</code>). Compose then spawns the binary and passes the service <code>options</code> as flags, allowing the provider to receive all required configuration via command-line arguments.</p><p>The binary must respond to JSON-formatted requests on stdin and return structured JSON responses on stdout.</p><p>Here’s a diagram illustrating the interaction:</p><figure><img src="https://docker.com/app/uploads/2025/07/Screenshot-2025-07-09-at-9.51.59 AM.png" alt="Communication with Compose" tabindex="0" loading="lazy"><figcaption>Communication with Compose</figcaption></figure>',6)),d(" TODO: mermaid로 변환 "),e[45]||(e[45]=r(`<p>Compose send all the necessary information to the provider binary by transforming all the <code>options</code> attributes as flags. It also passes the project and the service name. If we look at the <code>compose-telepresence</code> provider example, on the <code>up</code> command Compose will execute the following command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">compose-telepresence compose <span class="token punctuation">\\</span></span>
<span class="line">--project-name my-project up <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--name</span> api <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--port</span> <span class="token number">5732</span>:api-80 <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--namespace</span> avatars <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--service</span> api </span>
<span class="line">dev-api</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On the other side, providers can also send runtime messages to Compose:</p><ul><li><code>info:</code> Reports status updates. Displayed in Compose’s logs.</li><li><code>error:</code> Reports an error. Displayed as the failure reason.</li><li><code>setenv:</code> Exposes environment variables to dependent services.</li><li><code>debug:</code> Debug messages displayed only when running Compose with <code>-verbose</code>.</li></ul><p>This flexible protocol makes it easy to add new types and build rich provider integrations.</p>`,5)),n("p",null,[e[21]||(e[21]=s("Refer to the ")),n("a",S,[e[18]||(e[18]=s("official protocol spec (")),o(i,{icon:"iconfont icon-github"}),e[19]||(e[19]=n("code",null,"docker/compose",-1)),e[20]||(e[20]=s(")"))]),e[22]||(e[22]=s(" for detailed structure and examples."))]),e[46]||(e[46]=n("hr",null,null,-1)),e[47]||(e[47]=n("h2",{id:"building-your-own-provider-plugin",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#building-your-own-provider-plugin"},[n("span",null,"Building Your Own Provider Plugin")])],-1)),e[48]||(e[48]=n("p",null,"The real power of provider services lies in their extensibility. You can write your own plugin, in any language, as long as it adheres to the protocol.",-1)),e[49]||(e[49]=n("p",null,[s("A typical provider binary implements logic to handle a "),n("code",null,"compose"),s(" command with "),n("code",null,"up"),s(" and "),n("code",null,"down"),s(" subcommands.")],-1)),n("p",null,[e[24]||(e[24]=s("The source code of ")),n("a",T,[o(i,{icon:"iconfont icon-github"}),e[23]||(e[23]=n("code",null,"glours/compose-telepresence-plugin",-1))]),e[25]||(e[25]=s(" will be a good starting point. This plugin is implemented in Go and wraps the Telepresence CLI to bridge a local dev container with a remote Kubernetes service."))]),e[50]||(e[50]=r(`<p>Here’s a snippet from its <code>up</code> implementation:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token comment">// Up orchestrates the telepresence connection and setup</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">Up</span><span class="token punctuation">(</span>options P1uginOptions<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">checkTelepresenceInstalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">connectToCluster</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> str1ngs<span class="token punctuation">.</span><span class="token function">Conta1ns</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;traffic manager not found&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">sendlnfo</span><span class="token punctuation">(</span><span class="token string">&quot;Traffic manager not found. Installing TeIepresence helm chart... \\\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">installTelepresenceChart</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> err</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// Retry connection after installation</span></span>
<span class="line">            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">connectToCluster</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> err</span>
<span class="line">            <span class="token punctuation">}</span> </span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">sendErrorf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to connect: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">createIntercept</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This method is triggered when <code>docker compose up</code> is run, and it starts the service by calling the Telepresence CLI based on the received options.</p><p>To build your own provider:</p>`,4)),n("ol",null,[n("li",null,[e[29]||(e[29]=s("Read the full ")),n("a",D,[e[26]||(e[26]=s("extension protocol spec (")),o(i,{icon:"iconfont icon-github"}),e[27]||(e[27]=n("code",null,"docker/compose",-1)),e[28]||(e[28]=s(")"))])]),e[30]||(e[30]=n("li",null,"Parse all the options as flags to collect the whole configuration needed by the provider",-1)),e[31]||(e[31]=n("li",null,"Implement the expected JSON response handling over /stdout",-1)),e[32]||(e[32]=n("li",null,[s("Don’t forget to add "),n("code",null,"debug"),s(" messages to have as many details as possible during your implementation phase.")],-1)),e[33]||(e[33]=n("li",null,[s("Compile your binary and place it in your "),n("code",null,"$PATH")],-1)),e[34]||(e[34]=n("li",null,[s("Reference it in your Compose file using "),n("code",null,"provider.type")],-1))]),e[51]||(e[51]=n("p",null,"You can build anything from service emulators to remote cloud service starters. Compose will automatically invoke your binary as needed.",-1)),e[52]||(e[52]=n("hr",null,null,-1)),e[53]||(e[53]=n("h2",{id:"what-s-next",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#what-s-next"},[n("span",null,"What’s Next?")])],-1)),e[54]||(e[54]=n("p",null,"Provider services will continue to evolve, future enhancements will be guided by real-world feedback from users to ensure provider services grow in the most useful and impactful directions.",-1)),e[55]||(e[55]=n("p",null,"Looking forward, we envision a future where Compose can serve as a declarative hub for full-stack dev environments, including containers, local tooling, remote services, and AI runtimes.",-1)),e[56]||(e[56]=n("p",null,"Whether you’re connecting to a cloud-hosted database, launching a tunnel, or orchestrating machine learning inference, Compose provider services give you a native way to extend your dev environment, no wrappers, no hacks.",-1)),e[57]||(e[57]=n("p",null,"Let us know what kind of providers you’d like to build or see added. We can’t wait to see how the community takes this further.",-1)),e[58]||(e[58]=n("p",null,"Stay tuned and happy coding!",-1)),d(" TODO: add ARTICLE CARD "),o(p,u(m({title:"Extend Docker Compose with Provider Services",desc:"Docker Compose now supports provider services to connect to external systems—no wrappers needed. Build full-stack dev workflows, all in your Compose file.",link:"https://chanhi2000.github.io/bookshelf/docker.com/docker-compose-with-provider-services.html",logo:"https://docker.com/app/uploads/2024/02/cropped-docker-logo-favicon-192x192.png",background:"rgba(29,99,237,0.2)"})),null,16)])}const L=k(b,[["render",A]]),O=JSON.parse('{"path":"/docker.com/docker-compose-with-provider-services.html","title":"Extend Docker Compose with Provider Services","lang":"en-US","frontmatter":{"lang":"en-US","title":"Extend Docker Compose with Provider Services","description":"Article(s) > Extend Docker Compose with Provider Services","icon":"fa-brands fa-docker","category":["DevOps","Docker","Article(s)"],"tag":["blog","docker.com","devops","docker"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Extend Docker Compose with Provider Services\\",\\"image\\":[\\"https://docker.com/app/uploads/2025/07/Screenshot-2025-07-09-at-9.51.59 AM.png\\"],\\"datePublished\\":\\"2025-07-10T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guillaume Lours\\",\\"url\\":\\"https://docker.com/author/glours/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/docker.com/docker-compose-with-provider-services.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Extend Docker Compose with Provider Services"}],["meta",{"property":"og:description","content":"Article(s) > Extend Docker Compose with Provider Services"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://docker.com/app/uploads/2025/03/image.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://docker.com/app/uploads/2025/03/image.png"}],["meta",{"name":"twitter:image:alt","content":"Extend Docker Compose with Provider Services"}],["meta",{"property":"article:author","content":"Guillaume Lours"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"docker.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-07-10T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Extend Docker Compose with Provider Services"},{"property":"og:description","content":"Extend Docker Compose with Provider Services"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/docker.com/docker-compose-with-provider-services.html"}]],"prev":"/devops/docker/articles/README.md","date":"2025-07-10T00:00:00.000Z","isOriginal":false,"author":[{"name":"Guillaume Lours","url":"https://docker.com/author/glours/"}],"cover":"https://docker.com/app/uploads/2025/03/image.png"},"git":{},"readingTime":{"minutes":5.07,"words":1520},"filePathRelative":"docker.com/docker-compose-with-provider-services.md","copyright":{"author":"Guillaume Lours"}}');export{L as comp,O as data};
