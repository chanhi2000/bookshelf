import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as s,f as a,b as l,a as f,t as w,n as u,g as h,w as i,e as n,r as c,o as v}from"./app-BVguHYKu.js";const k={},y={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},C={href:"https://frontendmasters.com/blog/tag/shape/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/LeaVerou/corner-shape",target:"_blank",rel:"noopener noreferrer"},z={href:"https://drafts.csswg.org/css-borders-4/#corner-shaping",target:"_blank",rel:"noopener noreferrer"},D={class:"hint-container note"},T={href:"https://chromestatus.com/feature/5357329815699456",target:"_blank",rel:"noopener noreferrer"},I={href:"https://drafts.csswg.org/css-borders-4/#corner-shaping",target:"_blank",rel:"noopener noreferrer"},P={href:"https://css-shape.com/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://css-tip.com/hexagon/",target:"_blank",rel:"noopener noreferrer"};function L(t,e){const d=c("VPCard"),o=c("router-link"),g=c("SiteInfo"),p=c("VPIcon"),r=c("CodePen");return v(),b("div",null,[s("h1",y,[s("a",x,[s("span",null,w(t.$frontmatter.title)+" 관련",1)])]),a(d,u(h({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[a(o,{to:"#what-is-corner-shape"},{default:i(()=>e[0]||(e[0]=[n("What is corner-shape?")])),_:1,__:[0]})]),s("li",null,[a(o,{to:"#let-s-draw-shapes"},{default:i(()=>e[1]||(e[1]=[n("Let’s Draw Shapes")])),_:1,__:[1]}),s("ul",null,[s("li",null,[a(o,{to:"#rhombus-octagon"},{default:i(()=>e[2]||(e[2]=[n("Rhombus & Octagon")])),_:1,__:[2]})]),s("li",null,[a(o,{to:"#hexagon"},{default:i(()=>e[3]||(e[3]=[n("Hexagon")])),_:1,__:[3]})]),s("li",null,[a(o,{to:"#triangles"},{default:i(()=>e[4]||(e[4]=[n("Triangles")])),_:1,__:[4]})]),s("li",null,[a(o,{to:"#slanted-edge"},{default:i(()=>e[5]||(e[5]=[n("Slanted edge")])),_:1,__:[5]})]),s("li",null,[a(o,{to:"#arrow-like-box"},{default:i(()=>e[6]||(e[6]=[n("Arrow-like box")])),_:1,__:[6]})]),s("li",null,[a(o,{to:"#trapezoid-parallelogram"},{default:i(()=>e[7]||(e[7]=[n("Trapezoid & Parallelogram")])),_:1,__:[7]})])])]),s("li",null,[a(o,{to:"#conclusion"},{default:i(()=>e[8]||(e[8]=[n("Conclusion")])),_:1,__:[8]})])])]),e[46]||(e[46]=s("hr",null,null,-1)),a(g,{name:"Drawing CSS Shapes using corner-shape",desc:"After you've got a `border-radius`, you can control the shape of the corner with `corner-shape`, which unlocks a simpler and more powerful way to make shapes compared to `clip-path()`.",url:"https://frontendmasters.com/blog/drawing-css-shapes-using-corner-shape/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6235"}),s("p",null,[e[12]||(e[12]=n("We recently got ")),s("a",C,[a(p,{icon:"fas fa-globe"}),e[9]||(e[9]=n("the new")),e[10]||(e[10]=s("code",null,"shape()",-1)),e[11]||(e[11]=n("function"))]),e[13]||(e[13]=n(" for")),e[14]||(e[14]=s("code",null,"clip-path",-1)),e[15]||(e[15]=n("which is a game changer for creating CSS shape. Another cool feature is on the way and will soon be available: ")),e[16]||(e[16]=s("code",null,"corner-shape",-1)),e[17]||(e[17]=n("."))]),s("p",null,[e[22]||(e[22]=n("I will not call it “new” because it’s something that has been around for quite a while and you can find countless GitHub discussions around it. There is even")),s("a",A,[e[18]||(e[18]=n("an 11-year old Github Repo made by Lea Verou (")),a(p,{icon:"iconfont icon-github"}),e[19]||(e[19]=s("code",null,"LeaVerou/corner-shape",-1)),e[20]||(e[20]=n(")"))]),e[23]||(e[23]=n("with an interactive demo showing a few examples! After all that time, It finally has")),s("a",z,[a(p,{icon:"fas fa-globe"}),e[21]||(e[21]=n("its own specification"))]),e[24]||(e[24]=n("and is ready to be implemented and shipped."))]),s("div",D,[e[30]||(e[30]=s("p",{class:"hint-container-title"},"Note",-1)),s("p",null,[e[26]||(e[26]=n("At the time of writing, ")),e[27]||(e[27]=s("code",null,"corner-shape",-1)),e[28]||(e[28]=n(" is ")),s("a",T,[a(p,{icon:"fas fa-globe"}),e[25]||(e[25]=n("available in Chrome v139"))]),e[29]||(e[29]=n(" or 136+ with the experimental web features flag turned on, but no other browsers yet."))])]),e[47]||(e[47]=l(`<hr><h2 id="what-is-corner-shape" tabindex="-1"><a class="header-anchor" href="#what-is-corner-shape"><span>What is corner-shape?</span></a></h2><p>When you define a<code>border-radius</code>you will get rounded corners.<code>corner-shape</code>allows you to change those rounded corners to something else. It’s in the name; it changes the “shape” of the “corner”.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/IqSM2bQw.png?resize=890%2C195&amp;ssl=1" alt="A graphic displaying different CSS corner shapes: &#39;round&#39;, &#39;scoop&#39;, &#39;bevel&#39;, &#39;notch&#39;, and &#39;squircle&#39;, each in a purple background with white text." tabindex="0" loading="lazy"><figcaption>A graphic displaying different CSS corner shapes: &#39;round&#39;, &#39;scoop&#39;, &#39;bevel&#39;, &#39;notch&#39;, and &#39;squircle&#39;, each in a purple background with white text.</figcaption></figure><p>The value <code>round</code>is the default (the classic rounded corners). As you can see above, we have many cool variations. All of this with a simple syntax:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.corner</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">corner-shape</span><span class="token punctuation">:</span> round | scoop | bevel | notch | squircle<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),s("p",null,[e[32]||(e[32]=n("We can also use the")),e[33]||(e[33]=s("code",null,"superellipse(K)",-1)),e[34]||(e[34]=n("value that can define all the different variations and more by adjusting the")),e[35]||(e[35]=s("code",null,"K",-1)),e[36]||(e[36]=n("variable. I will not detail that part as it’s not important for the article but it’s good to know so I invite you to check")),s("a",I,[a(p,{icon:"fas fa-globe"}),e[31]||(e[31]=n("the (draft) specification"))]),e[37]||(e[37]=n("for more detail."))]),e[48]||(e[48]=l(`<figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/6tnTLi91.png?resize=777%2C501&amp;ssl=1" alt="Diagram illustrating various &#39;superellipse()&#39; values for corner shapes with labeled corners and arrows indicating direction. Shows how the corner shape changes with different K values." tabindex="0" loading="lazy"><figcaption>Diagram illustrating various &#39;superellipse()&#39; values for corner shapes with labeled corners and arrows indicating direction. Shows how the corner shape changes with different K values.</figcaption></figure><hr><h2 id="let-s-draw-shapes" tabindex="-1"><a class="header-anchor" href="#let-s-draw-shapes"><span>Let’s Draw Shapes</span></a></h2><p>Changing the corner shape is good — but how can we draw <em>shapes</em>? The answer is to play with<code>border-radius</code>. Follow along to see all the magic we can do with<code>corner-shape</code>!</p><h3 id="rhombus-octagon" tabindex="-1"><a class="header-anchor" href="#rhombus-octagon"><span>Rhombus &amp; Octagon</span></a></h3><p>If you look closely at the example using the<code>bevel</code>value, you will see that we have 8 sides since the corners are diagonal straight lines so we almost have an octagon shape. We simply need to find the exact value for<code>border-radius</code>that gives us 8 equal sides.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/ZeCHx_ws.png?resize=793%2C348&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>I will skip the boring math and give you the final value which is:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100%/<span class="token punctuation">(</span>2 + <span class="token function">sqrt</span><span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Even without being precise, you can approximate the value using trial &amp; error. You will get an octagon when you are close to<code>29%</code>. The usage of percentage is important because it means the shape is responsive and let’s not forget<code>aspect-ratio: 1</code>as well.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.octagon</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100%/<span class="token punctuation">(</span>2 + <span class="token function">sqrt</span><span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">corner-shape</span><span class="token punctuation">:</span> bevel<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">aspect-ratio</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now what if we keep increasing the radius? We get a Rhombus shape at<code>50%</code>.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/RtLO8vP1.png?resize=845%2C344&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.rhombus</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">corner-shape</span><span class="token punctuation">:</span> bevel<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">aspect-ratio</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14)),a(r,{user:"t_afif","slug-hash":"OPVZwxg",title:"Octagon and rhombus shapes","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),s("p",null,[e[39]||(e[39]=n("Some of you might ask if this method is better than what we already have. In")),s("a",P,[a(p,{icon:"fas fa-globe"}),e[38]||(e[38]=n("my shape collection"))]),e[40]||(e[40]=n(", you can easily find the code of the above shapes made using")),e[41]||(e[41]=s("code",null,"clip-path",-1)),e[42]||(e[42]=n("so why another method?"))]),e[49]||(e[49]=l('<p>First of all, the syntax is a bit easier than the<code>clip-path</code>one so this can improve the readability of the code as we have fewer values to deal with. But the most important advantage is that we can add a border to the shape! Adding borders to custom shapes is always a nightmare but<code>corner-shape</code>made it easy.</p><p>This is logical since, by default, when we add<code>border-radius</code>, the border and other decorations such as<code>box-shadow</code>will follow the rounded corners. It’s still the case even if we change the shape of the corner.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/q8rLnLOp.png?resize=905%2C200&amp;ssl=1" alt="Five shapes with different corner styles labeled: round, scoop, bevel, notch, and squircle, all displayed on a purple background." tabindex="0" loading="lazy"><figcaption>Five shapes with different corner styles labeled: round, scoop, bevel, notch, and squircle, all displayed on a purple background.</figcaption></figure><p>Here are the rhombus and octagon shapes with borders:</p>',4)),a(r,{user:"t_afif","slug-hash":"PwqevXP",title:"Adding border to octagon and rhombus","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),e[50]||(e[50]=l(`<p>Note how we can have a border-only version if we keep the background transparent and we can also apply the shape to an image as well. Cool, right?</p><h3 id="hexagon" tabindex="-1"><a class="header-anchor" href="#hexagon"><span>Hexagon</span></a></h3><p>Do you see how can we achieve a hexagon shape? Try to think about it before reading my explanation.</p><p>The trick is to rely on the fact that<code>border-radius</code>accepts vertical and horizontal values, something we always forget about. Let’s take the rhombus shape and decrease the vertical or the horizontal radius.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/6nJJ3x5a.png?resize=737%2C502&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Do you see that? We have an “almost” hexagon shape. All that is missing is the correct <code>aspect-ratio</code>.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.hexagon</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50% / 25%<span class="token punctuation">;</span> <span class="token comment">/* OR 25% / 50% */</span></span>
<span class="line">  <span class="token property">corner-shape</span><span class="token punctuation">:</span> bevel<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">aspect-ratio</span><span class="token punctuation">:</span> <span class="token function">cos</span><span class="token punctuation">(</span>30deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* OR 1/cos(30deg) */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)),s("p",null,[e[44]||(e[44]=n("We can definitely say that we have")),s("a",j,[a(p,{icon:"fas fa-globe"}),e[43]||(e[43]=n("the easiest and simplest way to create hexagon shapes"))]),e[45]||(e[45]=n("!"))]),a(r,{user:"t_afif","slug-hash":"yyNjgzR",title:"Hexagon shapes (with border!)","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),e[51]||(e[51]=l(`<h3 id="triangles" tabindex="-1"><a class="header-anchor" href="#triangles"><span>Triangles</span></a></h3><p>Following the same logic we can create most of the common shapes and triangles aren’t an exception. Again, we can use the Rhombus as a starting point and adjust either the horizontal or the vertical radius like below.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/1rHsNa2J.png?resize=771%2C343&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>This one can be a bit tricky at first glance because we don’t have the 4 diagonal lines for each corner like the previous shapes but don’t forget that we can use<code>0</code>with<code>border-radius</code>which will disable the corresponding corner.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.triangle</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50% / 100% 100% 0 0<span class="token punctuation">;</span> </span>
<span class="line">  <span class="token property">corner-shape</span><span class="token punctuation">:</span> bevel<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>From there, we can easily get any kind of triangle by trying the different radius combinations and also playing with<code>aspect-ratio</code>.</p><p>Below is a demo with many examples. Try to create some of them before checking my code. It’s the perfect exercise to practice with corner-shape.</p>`,7)),a(r,{user:"t_afif","slug-hash":"yyNjmLw",title:"Triangle shapes using corner-shape","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),e[52]||(e[52]=s("p",null,"The only caveat with triangle shapes is that the border is not perfect. It may sound like a bug but it’s not. I won’t detail the logic behind this but if you want to add a border, you may need a different thickness for one or many sides.",-1)),e[53]||(e[53]=s("p",null,"Here is an example with one of the triangle shapes where I am increasing the thickness of the top border a little to have a perfect-looking shape.",-1)),a(r,{user:"t_afif","slug-hash":"LEVmwNb",title:"Adding border to triangles","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),e[54]||(e[54]=s("p",null,"As you can see in the code, there is a math formula to get the correct thickness but since it will be a different formula for each triangle shape, I won’t bother you with a boring explanation. Plus you can easily (and rapidly) get a good result with some trial & error. No need to be very precise.",-1)),e[55]||(e[55]=s("h3",{id:"slanted-edge",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#slanted-edge"},[s("span",null,"Slanted edge")])],-1)),e[56]||(e[56]=s("p",null,[n("All the shapes we created rely on percentage values but"),s("code",null,"border-radius"),n("accepts length as well, which means we can have elements with variable size but the shape remains static.")],-1)),e[57]||(e[57]=s("p",null,"Example with a slanted edge where the slant keeps the same size whatever the element width:",-1)),a(r,{user:"t_afif","slug-hash":"VYLxoPW",title:"Slanted edge","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),e[58]||(e[58]=l(`<p>The code is a simple as:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.slanted</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 80px 100%<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">corner-shape</span><span class="token punctuation">:</span> bevel<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>No need for the shorthand property in this case since only the top-right corner matters. As for the value, I think it’s self-explanatory. Simply notice that there is no<code>/</code>to separate the horizontal and vertical radius when using the longhand properties.</p><h3 id="arrow-like-box" tabindex="-1"><a class="header-anchor" href="#arrow-like-box"><span>Arrow-like box</span></a></h3><p>Using the same logic we can have an arrow-like box:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.arrow</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 80px / 0 50% 50% 0<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">corner-shape</span><span class="token punctuation">:</span> bevel<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),a(r,{user:"t_afif","slug-hash":"vEOjoWp",title:"Arrow-like box","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),e[59]||(e[59]=l(`<h3 id="trapezoid-parallelogram" tabindex="-1"><a class="header-anchor" href="#trapezoid-parallelogram"><span>Trapezoid &amp; Parallelogram</span></a></h3><p>Also trapezoid &amp; parallelogram shapes:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.trapezoid</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 80px / 100% 0 100% 0<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">corner-shape</span><span class="token punctuation">:</span> bevel<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token selector">.parallelogram</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 80px / 100% 100% 0 0<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">corner-shape</span><span class="token punctuation">:</span> bevel<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),a(r,{user:"t_afif","slug-hash":"WbvJVdW",title:"Trapezoid & Parallelogram","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),e[60]||(e[60]=l('<hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Using only the<code>bevel</code>option of<code>corner-shape</code>we were able to create a lot of different shapes easily. All we had to do was to play with<code>border-radius</code>, a well-known property. Not to mention the fact that we can easily add borders and box shadows which is a real game changer compared to shapes created using<code>clip-path</code>or<code>mask</code>.</p><p>I will end the article with a last demo where I combine<code>bevel</code>and<code>notch</code>to create an arrow. Yes, you can have a different shape per corner!</p>',4)),a(r,{user:"t_afif","slug-hash":"WbvyNMM",title:"Arrow shape","default-tab":["css","result"],theme:t.$isDarkmode?"dark":"light"},null,8,["theme"]),e[61]||(e[61]=s("p",null,[n("What about you? Can you think about a cool shape using"),s("code",null,"corner-shape"),n("?")],-1)),f(" TODO: add ARTICLE CARD "),a(d,u(h({title:"Drawing CSS Shapes using corner-shape",desc:"After you've got a `border-radius`, you can control the shape of the corner with `corner-shape`, which unlocks a simpler and more powerful way to make shapes compared to `clip-path()`.",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/drawing-css-shapes-using-corner-shape.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const V=m(k,[["render",L]]),O=JSON.parse('{"path":"/frontendmasters.com/drawing-css-shapes-using-corner-shape.html","title":"Drawing CSS Shapes using corner-shape","lang":"en-US","frontmatter":{"lang":"en-US","title":"Drawing CSS Shapes using corner-shape","description":"Article(s) > Drawing CSS Shapes using corner-shape","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","frontendmasters.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Drawing CSS Shapes using corner-shape\\",\\"image\\":[\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/IqSM2bQw.png?resize=890%2C195&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/6tnTLi91.png?resize=777%2C501&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/ZeCHx_ws.png?resize=793%2C348&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/RtLO8vP1.png?resize=845%2C344&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/q8rLnLOp.png?resize=905%2C200&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/6nJJ3x5a.png?resize=737%2C502&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/1rHsNa2J.png?resize=771%2C343&ssl=1\\"],\\"datePublished\\":\\"2025-06-18T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Temani Afif\\",\\"url\\":\\"https://frontendmasters.com/blog/author/temaniafif/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/drawing-css-shapes-using-corner-shape.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Drawing CSS Shapes using corner-shape"}],["meta",{"property":"og:description","content":"Article(s) > Drawing CSS Shapes using corner-shape"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6235"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6235"}],["meta",{"name":"twitter:image:alt","content":"Drawing CSS Shapes using corner-shape"}],["meta",{"property":"article:author","content":"Temani Afif"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-06-18T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Drawing CSS Shapes using corner-shape"},{"property":"og:description","content":"Drawing CSS Shapes using corner-shape"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/drawing-css-shapes-using-corner-shape.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-06-18T00:00:00.000Z","isOriginal":false,"author":[{"name":"Temani Afif","url":"https://frontendmasters.com/blog/author/temaniafif/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6235"},"git":{},"readingTime":{"minutes":6.39,"words":1916},"filePathRelative":"frontendmasters.com/drawing-css-shapes-using-corner-shape.md","copyright":{"author":"Temani Afif"}}');export{V as comp,O as data};
