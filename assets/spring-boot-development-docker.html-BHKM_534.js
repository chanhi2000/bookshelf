import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as e,b as p,a as v,t as b,n as c,g as r,w as u,e as a,r as o,o as h}from"./app-BVguHYKu.js";const f={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},D={href:"https://github.com/dockersamples/atsea-sample-shop-app",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/docker/labs/tree/master/developer-tools/java-debugging",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/dockersamples/atsea-sample-shop-app",target:"_blank",rel:"noopener noreferrer"};function T(d,n){const l=o("VPCard"),i=o("router-link"),k=o("SiteInfo"),t=o("VPIcon");return h(),m("div",null,[s("h1",y,[s("a",w,[s("span",null,b(d.$frontmatter.title)+" 관련",1)])]),e(l,c(r({title:"Docker > Article(s)",desc:"Article(s)",link:"/devops/docker/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(l,c(r({title:"Spring > Article(s)",desc:"Article(s)",link:"/programming/java-spring/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[e(i,{to:"#building-the-rest-application"},{default:u(()=>n[0]||(n[0]=[a("Building the REST Application")])),_:1,__:[0]})]),s("li",null,[e(i,{to:"#project-setup"},{default:u(()=>n[1]||(n[1]=[a("Project setup")])),_:1,__:[1]})]),s("li",null,[e(i,{to:"#remote-debugging"},{default:u(()=>n[2]||(n[2]=[a("Remote Debugging")])),_:1,__:[2]})])])]),n[29]||(n[29]=s("hr",null,null,-1)),e(k,{name:"Spring Boot Development with Docker",desc:"Learn from Docker experts to simplify and advance your app development and management with Docker. Stay up to date on Docker events and new version",url:"https://docker.com/blog/spring-boot-development-docker",logo:"https://docker.com/app/uploads/2024/02/cropped-docker-logo-favicon-192x192.png",preview:"https://docker.com/app/uploads/9d6c9743-e348-4c76-8515-1743162101ad.jpg"}),s("p",null,[n[6]||(n[6]=a("The ")),s("a",D,[n[3]||(n[3]=a("AtSea Shop (")),e(t,{icon:"iconfont icon-github"}),n[4]||(n[4]=s("code",null,"dockersamples/atsea-sample-shop-app",-1)),n[5]||(n[5]=a(")"))]),n[7]||(n[7]=a(" is an example storefront application that can be deployed on different operating systems and can be customized to both your enterprise development and operational environments. In my last post, I discussed the architecture of the app. In this post, I will cover how to setup your development environment to debug the Java REST backend that runs in a container."))]),n[30]||(n[30]=s("hr",null,null,-1)),n[31]||(n[31]=s("h2",{id:"building-the-rest-application",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#building-the-rest-application"},[s("span",null,"Building the REST Application")])],-1)),n[32]||(n[32]=s("p",null,"I used the Spring Boot framework to rapidly develop the REST backend that manages products, customers and orders tables used in the AtSea Shop. The application takes advantage of Spring Boot’s built-in application server, support for REST interfaces and ability to define multiple data sources. Because it was written in Java, it is agnostic to the base operating system and runs in either Windows or Linux containers. This allows developers to build against a heterogenous architecture.",-1)),n[33]||(n[33]=s("hr",null,null,-1)),n[34]||(n[34]=s("h2",{id:"project-setup",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#project-setup"},[s("span",null,"Project setup")])],-1)),n[35]||(n[35]=s("p",null,"The AtSea project uses multi-stage builds, a new Docker feature, which allows me to use multiple images to build a single Docker image that includes all the components needed for the application. The multi-stage build uses a Maven container to build the the application jar file. The jar file is then copied to a Java Development Kit image. This makes for a more compact and efficient image because the Maven is not included with the application. Similarly, the React store front client is built in a Node image and the compile application is also added to the final application image.",-1)),s("p",null,[n[14]||(n[14]=a("I used Eclipse to write the AtSea app. If you want info on configuring IntelliJ or Netbeans for remote debugging, you can check out the the ")),s("a",x,[n[8]||(n[8]=a("Docker Labs Repository (")),e(t,{icon:"iconfont icon-github"}),n[9]||(n[9]=s("code",null,"docker/labs",-1)),n[10]||(n[10]=a(")"))]),n[15]||(n[15]=a(". You can also check out the code in the ")),s("a",j,[n[11]||(n[11]=a("AtSea app github repository (")),e(t,{icon:"iconfont icon-github"}),n[12]||(n[12]=s("code",null,"dockersamples/atsea-sample-shop-app",-1)),n[13]||(n[13]=a(")"))]),n[16]||(n[16]=a("."))]),n[36]||(n[36]=p(`<p>I built the application by cloning the repository and imported the project into Eclipse by setting the Root Directory to the project and clicking Finish</p><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">File &gt; Import &gt; Maven &gt; Existing Maven Projects</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,2)),s("p",null,[n[17]||(n[17]=a("Since I used using Spring Boot, I took advantage of spring-devtools to do remote debugging in the application. I had to add the Spring Boot-devtools dependency to the ")),e(t,{icon:"iconfont icon-code"}),n[18]||(n[18]=s("code",null,"pom.xml",-1)),n[19]||(n[19]=a(" file."))]),n[37]||(n[37]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="pom.xml"><span>pom.xml</span></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Note that developer tools are automatically disabled when the application is fully packaged as a jar. To ensure that devtools are available during development, I set the <code>&lt;excludeDevtools&gt;</code> configuration to false in the spring-boot-maven build plugin:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="pom.xml"><span>pom.xml</span></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeDevtools</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludeDevtools</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This example uses a Docker Compose file that creates a simplified build of the containers specifically needed for development and debugging.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="docker-compose-dev.yml"><span>docker-compose-dev.yml</span></div><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.1&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">database</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">build</span><span class="token punctuation">:</span> </span>
<span class="line">       <span class="token key atrule">context</span><span class="token punctuation">:</span> ./database</span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> atsea_db</span>
<span class="line">    <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">POSTGRES_USER</span><span class="token punctuation">:</span> gordonuser</span>
<span class="line">      <span class="token key atrule">POSTGRES_DB</span><span class="token punctuation">:</span> atsea</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;5432:5432&quot;</span> </span>
<span class="line">    <span class="token key atrule">networks</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> back<span class="token punctuation">-</span>tier</span>
<span class="line">    <span class="token key atrule">secrets</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> postgres_password</span>
<span class="line"></span>
<span class="line">  <span class="token key atrule">appserver</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">build</span><span class="token punctuation">:</span></span>
<span class="line">       <span class="token key atrule">context</span><span class="token punctuation">:</span> .</span>
<span class="line">       <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> app/Dockerfile<span class="token punctuation">-</span>dev</span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> atsea_app</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;8080:8080&quot;</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;5005:5005&quot;</span></span>
<span class="line">    <span class="token key atrule">networks</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> front<span class="token punctuation">-</span>tier</span>
<span class="line">      <span class="token punctuation">-</span> back<span class="token punctuation">-</span>tier</span>
<span class="line">    <span class="token key atrule">secrets</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> postgres_password</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">secrets</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">postgres_password</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">file</span><span class="token punctuation">:</span> ./devsecrets/postgres_password</span>
<span class="line">    </span>
<span class="line"><span class="token key atrule">networks</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">front-tier</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">back-tier</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">payment</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">driver</span><span class="token punctuation">:</span> overlay</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,5)),s("p",null,[n[20]||(n[20]=a("The Compose file uses secrets to provision passwords and other sensitive information such as certificates - without relying on environmental variables. Although the example uses PostgreSQL, the application can use secrets to connect to any database defined by as a Spring Boot datasource. From ")),e(t,{icon:"fa-brands fa-java"}),n[21]||(n[21]=s("code",null,"JpaConfiguration.java",-1)),n[22]||(n[22]=a(":"))]),n[38]||(n[38]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="JpaConfiguration.java"><span>JpaConfiguration.java</span></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token class-name">DataSourceProperties</span> <span class="token function">dataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">DataSourceProperties</span> dataSourceProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Set password to connect to database using Docker secrets.</span></span>
<span class="line">    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;/run/secrets/postgres_password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>line <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">lineSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">         dataSourceProperties<span class="token punctuation">.</span><span class="token function">setDataPassword</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Could not successfully load DB password file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> dataSourceProperties<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[23]||(n[23]=a("Also note that the appserver opens port 5005 for remote debugging and that build calls the ")),e(t,{icon:"fa-brands fa-docker"}),n[24]||(n[24]=s("code",null,"Dockerfile-dev",-1)),n[25]||(n[25]=a(" file to build a container that has remote debugging turned on. This is set in the Entrypoint which specifies transport and address for the debugger."))]),n[39]||(n[39]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile-dev"><span>Dockerfile-dev</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;java&quot;</span>, </span></span>
<span class="line"></span>
<span class="line">&quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005&quot;,&quot;-jar&quot;, </span>
<span class="line"></span>
<span class="line">&quot;/app/AtSea-0.0.1-SNAPSHOT.jar&quot;]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="remote-debugging" tabindex="-1"><a class="header-anchor" href="#remote-debugging"><span>Remote Debugging</span></a></h2>`,3)),s("p",null,[n[26]||(n[26]=a("To start remote debugging on the application, run compose using the ")),e(t,{icon:"iconfont icon-yaml"}),n[27]||(n[27]=s("code",null,"docker-compose-dev.yml",-1)),n[28]||(n[28]=a(" file."))]),n[40]||(n[40]=p(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker-compose</span> <span class="token parameter variable">-f</span> docker-compose-dev.yml up <span class="token parameter variable">--build</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Docker will build the images and start the AtSea Shop database and appserver containers. However, the application will not fully load until Eclipse’s remote debugger attaches to the application. To start remote debugging you click on Run &gt; Debug Configurations …</p><p>Select Remote Java Application then press the new button to create a configuration. In the Debug Configurations panel, you give the configuration a name, select the AtSea project and set the connection properties for host and the port to 5005. Click Apply &gt; Debug.</p><figure><img src="https://docker.com/app/uploads/9d6c9743-e348-4c76-8515-1743162101ad.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>The appserver will start up.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">appserver_1|2017-05-09 03:22:23.095 INFO 1 --- [main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)</span>
<span class="line"></span>
<span class="line">appserver_1|2017-05-09 03:22:23.118 INFO 1 --- [main] com.docker.atsea.AtSeaApp                : Started AtSeaApp in 38.923 seconds (JVM running for 109.984)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>To test remote debugging set a breakpoint on ProductController.java where it returns a list of products.</p><figure><img src="https://docker.com/app/uploads/b0e7f813-c3de-4d1e-b52d-af6d4821c58e-1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>You can test it using curl or your preferred tool for making HTTP requests:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token parameter variable">-X</span> GET  http://localhost:8080/api/product/</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Eclipse will switch to the debug perspective where you can step through the code.</p><figure><img src="https://docker.com/app/uploads/e7edc918-c6b0-44e2-b6c9-7ef71cd223d6-1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>The AtSea Shop example shows how easy it is to use containers as part of your normal development environment using tools that you and your team are familiar with. Download the application to try out developing with containers or use it as basis for your own Spring Boot REST application.</p>`,13)),v(" TODO: add ARTICLE CARD "),e(l,c(r({title:"Spring Boot Development with Docker",desc:"Learn from Docker experts to simplify and advance your app development and management with Docker. Stay up to date on Docker events and new version",link:"https://chanhi2000.github.io/bookshelf/docker.com/spring-boot-development-docker.html",logo:"https://docker.com/app/uploads/2024/02/cropped-docker-logo-favicon-192x192.png",background:"rgba(29,99,237,0.2)"})),null,16)])}const B=g(f,[["render",T]]),P=JSON.parse('{"path":"/docker.com/spring-boot-development-docker.html","title":"Spring Boot Development with Docker","lang":"en-US","frontmatter":{"lang":"en-US","title":"Spring Boot Development with Docker","description":"Article(s) > Spring Boot Development with Docker","icon":"iconfont icon-spring","category":["Java","Spring","DevOps","Docker","Article(s)"],"tag":["blog","docker.com","java","jdk","spring","devops","docker"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Boot Development with Docker\\",\\"image\\":[\\"https://docker.com/app/uploads/9d6c9743-e348-4c76-8515-1743162101ad.jpg\\",\\"https://docker.com/app/uploads/b0e7f813-c3de-4d1e-b52d-af6d4821c58e-1.jpg\\",\\"https://docker.com/app/uploads/e7edc918-c6b0-44e2-b6c9-7ef71cd223d6-1.jpg\\"],\\"datePublished\\":\\"2017-05-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Sophia Parafina\\",\\"url\\":\\"https://docker.com/author/sophia/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/docker.com/spring-boot-development-docker.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Spring Boot Development with Docker"}],["meta",{"property":"og:description","content":"Article(s) > Spring Boot Development with Docker"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://docker.com/app/uploads/9d6c9743-e348-4c76-8515-1743162101ad.jpg"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://docker.com/app/uploads/9d6c9743-e348-4c76-8515-1743162101ad.jpg"}],["meta",{"name":"twitter:image:alt","content":"Spring Boot Development with Docker"}],["meta",{"property":"article:author","content":"Sophia Parafina"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"docker.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2017-05-25T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Spring Boot Development with Docker"},{"property":"og:description","content":"Spring Boot Development with Docker"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/docker.com/spring-boot-development-docker.html"}]],"prev":"/programming/java-spring/articles/README.md","date":"2017-05-25T00:00:00.000Z","isOriginal":false,"author":[{"name":"Sophia Parafina","url":"https://docker.com/author/sophia/"}],"cover":"https://docker.com/app/uploads/9d6c9743-e348-4c76-8515-1743162101ad.jpg"},"git":{},"readingTime":{"minutes":4.23,"words":1270},"filePathRelative":"docker.com/spring-boot-development-docker.md","copyright":{"author":"Sophia Parafina"}}');export{B as comp,P as data};
