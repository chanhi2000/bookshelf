import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as f,d as s,f as e,b as a,a as r,t as v,n as u,g as m,w as l,e as t,r as p,o as b}from"./app-BVguHYKu.js";const h={},y={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},x={class:"table-of-contents"},A={href:"https://github.com/android/nowinandroid",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/android/nowinandroid",target:"_blank",rel:"noopener noreferrer"},K={class:"hint-container note"},I={href:"https://github.com/InsertKoinIO/nowinandroid",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/InsertKoinIO/nowinandroid/tree/perfs_koin",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/InsertKoinIO/nowinandroid/tree/perfs_hilt",target:"_blank",rel:"noopener noreferrer"},T={href:"https://insert-koin.io/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://insert-koin.io/docs/setup/why/#koin-a-dependency-injection-framework",target:"_blank",rel:"noopener noreferrer"},L={href:"https://developer.android.com/topic/performance/baselineprofiles/measure-baselineprofile",target:"_blank",rel:"noopener noreferrer"},F={href:"https://kotzilla.io/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/InsertKoinIO/nowinandroid/blob/perfs_koin/core/data/src/main/kotlin/com/google/samples/apps/nowinandroid/core/data/Measure.kt",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/InsertKoinIO/nowinandroid/blob/perfs_koin/app/src/main/kotlin/com/google/samples/apps/nowinandroid/MainActivity.kt#L77",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/InsertKoinIO/nowinandroid/blob/perfs_koin/feature/foryou/src/main/kotlin/com/google/samples/apps/nowinandroid/feature/foryou/ForYouScreen.kt#L113",target:"_blank",rel:"noopener noreferrer"},C={class:"hint-container note"},H={href:"https://insert-koin.io/docs/reference/koin-android/start#start-koin-with-androidx-startup-401",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/InsertKoinIO/nowinandroid/blob/perfs_koin/app/src/main/kotlin/com/google/samples/apps/nowinandroid/MainActivity.kt#L80",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/InsertKoinIO/nowinandroid/blob/perfs_hilt/feature/foryou/src/main/kotlin/com/google/samples/apps/nowinandroid/feature/foryou/ForYouScreen.kt#L113",target:"_blank",rel:"noopener noreferrer"},P={href:"https://gist.github.com/arnaudgiuliani/9e05451d111373eaf570c7f3a4465ad2",target:"_blank",rel:"noopener noreferrer"},W={href:"https://bit.ly/benchmark_koin_hilt_2024",target:"_blank",rel:"noopener noreferrer"},U={class:"hint-container info"},Y={href:"https://gist.github.com/arnaudgiuliani/9e05451d111373eaf570c7f3a4465ad2",target:"_blank",rel:"noopener noreferrer"},z={href:"https://slack-chats.kotlinlang.org/c/koin",target:"_blank",rel:"noopener noreferrer"},G={class:"hint-container info"},E={href:"https://proandroiddev.com/benchmarking-koin-vs-dagger-hilt-in-modern-android-development-2024-ff7bb40470df",target:"_blank",rel:"noopener noreferrer"};function q(g,n){const c=p("VPCard"),i=p("router-link"),d=p("SiteInfo"),o=p("VPIcon");return b(),f("div",null,[s("h1",y,[s("a",w,[s("span",null,v(g.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),e(c,u(m({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[e(i,{to:"#what-to-benchmark"},{default:l(()=>n[0]||(n[0]=[t("What to benchmark?")])),_:1,__:[0]})]),s("li",null,[e(i,{to:"#service-locator-or-dependency-injection-koin-can-do-both"},{default:l(()=>n[1]||(n[1]=[t("Service Locator or Dependency Injection? Koin can do both!")])),_:1,__:[1]})]),s("li",null,[e(i,{to:"#why-choose-koin"},{default:l(()=>n[2]||(n[2]=[t("Why choose Koin?")])),_:1,__:[2]}),s("ul",null,[s("li",null,[e(i,{to:"#tracking-performances"},{default:l(()=>n[3]||(n[3]=[t("Tracking Performances")])),_:1,__:[3]})]),s("li",null,[e(i,{to:"#now-in-android"},{default:l(()=>n[4]||(n[4]=[t("Now in Android")])),_:1,__:[4]})]),s("li",null,[e(i,{to:"#execution-extraction-and-results"},{default:l(()=>n[5]||(n[5]=[t("Execution, Extraction, And Results")])),_:1,__:[5]})])])])])]),n[112]||(n[112]=s("hr",null,null,-1)),e(d,{name:"Benchmarking Koin vs. Dagger Hilt in Modern Android Development (2024)",desc:"When choosing a dependency injection framework for Android and Kotlin development, performance is often a key consideration. This article explores the performance of Koin in its latest version (4.0.1-Beta1) and compares it with Dagger Hilt (2.52). Rather than relying on simplistic benchmarks or limited code execution scenarios, the focus is ‚Äúdeveloper-centric‚Äù: understanding performance in real-world, day-to-day usage. Additionally, this article aims to reassure those who may hesitate to adopt Koin due to performance concerns.",url:"https://droidcon.com/2024/12/03/benchmarking-koin-vs-dagger-hilt-in-modern-android-development-2024",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",preview:"https://droidcon.com/wp-content/uploads/2024/12/1_h5ULv-tGdDA3yD2c685lFQ.webp"}),n[113]||(n[113]=s("p",null,[t("When choosing a dependency injection framework for Android and Kotlin development, performance is often a key consideration. This article explores the performance of"),s("strong",null,"Koin"),t("in its latest version ("),s("strong",null,"4.0.1-Beta1"),t(") and compares it with"),s("strong",null,"Dagger Hilt (2.52)"),t(". Rather than relying on simplistic benchmarks or limited code execution scenarios, the focus is ‚Äúdeveloper-centric‚Äù: understanding performance in real-world, day-to-day usage. Additionally, this article aims to reassure those who may hesitate to adopt"),s("strong",null,"Koin"),t("due to performance concerns.")],-1)),s("figure",null,[n[11]||(n[11]=s("img",{src:"https://droidcon.com/wp-content/uploads/2024/12/1_h5ULv-tGdDA3yD2c685lFQ.webp",alt:'From originalGoogle‚Äôs Now in Android (<VPIcon icon="iconfont icon-github"/>)banner.',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[9]||(n[9]=t("From original")),s("a",A,[n[6]||(n[6]=t("Google‚Äôs Now in Android (")),e(o,{icon:"iconfont icon-github"}),n[7]||(n[7]=s("code",null,"android/nowinandroid",-1)),n[8]||(n[8]=t(")"))]),n[10]||(n[10]=t("banner."))])]),n[114]||(n[114]=s("hr",null,null,-1)),n[115]||(n[115]=s("h2",{id:"what-to-benchmark",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#what-to-benchmark"},[s("span",null,"What to benchmark?")])],-1)),n[116]||(n[116]=s("p",null,"Benchmarking such frameworks poses a significant challenge: ensuring fair comparison and focused on equivalent behaviors and features.",-1)),n[117]||(n[117]=s("p",null,"To make this exercise meaningful, I‚Äôve opted for a user-oriented approach: evaluating the time it takes to build a component requested from the UI (like ViewModels and so on ‚Ä¶). To ensure our test context is strong enough, we need a complex enough application (no basic ‚ÄúHello World‚Äù or to-do list app).",-1)),s("p",null,[n[15]||(n[15]=t("For this purpose, I‚Äôve chosen to use Google‚Äôs")),s("a",M,[n[12]||(n[12]=t("Now in Android app (")),e(o,{icon:"iconfont icon-github"}),n[13]||(n[13]=s("code",null,"android/nowinandroid",-1)),n[14]||(n[14]=t(")"))]),n[16]||(n[16]=t(", a great open-source application that is complex enough and covers the challenges of real-life development and where the Android team demonstrates best practices (modularization, Jetpack Compose, and dependency injection ‚Ä¶)."))]),n[118]||(n[118]=s("p",null,"By evaluating Koin and Dagger Hilt in this environment, we aim to get insights that truly matter to Android developers.",-1)),s("div",K,[n[19]||(n[19]=s("p",{class:"hint-container-title"},"Note",-1)),s("p",null,[n[18]||(n[18]=t("üëâ Sources are available at")),s("a",I,[e(o,{icon:"iconfont icon-github"}),n[17]||(n[17]=s("code",null,"InsertKoinIO/nowinandroid",-1))])]),e(d,{name:"InsertKoinIO/nowinandroid",desc:"A fully functional Android app built entirely with Kotlin and Jetpack Compose",url:"https://github.com/InsertKoinIO/nowinandroid/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/7048e8e7705c5c973ef7d210b020a50539b6d75a3c2903c6206803dc55c8e8fc/InsertKoinIO/nowinandroid"})]),n[119]||(n[119]=s("p",null,"You will find the following branches:",-1)),s("ul",null,[s("li",null,[s("a",D,[e(o,{icon:"fas fa-code-branch"}),n[20]||(n[20]=s("code",null,"perfs_koin",-1))]),n[21]||(n[21]=t("‚Äî is the Now in Android migrated to Koin branch, with performances measurement"))]),s("li",null,[s("a",S,[e(o,{icon:"fas fa-code-branch"}),n[22]||(n[22]=s("code",null,"perfs_hilt",-1))]),n[23]||(n[23]=t(" ‚Äî is the default Hilt branch, with performances measurement"))])]),s("p",null,[n[25]||(n[25]=t("And don‚Äôt forget")),s("a",T,[e(o,{icon:"fas fa-globe"}),n[24]||(n[24]=t("official Koin documentation"))]),n[26]||(n[26]=t(". Now, let‚Äôs dive into the details!"))]),n[120]||(n[120]=a('<hr><h2 id="service-locator-or-dependency-injection-koin-can-do-both" tabindex="-1"><a class="header-anchor" href="#service-locator-or-dependency-injection-koin-can-do-both"><span>Service Locator or Dependency Injection? Koin can do both!</span></a></h2><p>Before diving into the benchmarks, let‚Äôs address a common question about Koin: Is it a Service Locator or a Dependency Injection (DI) framework? The answer is <strong>both</strong>.</p><ul><li>A<strong>Service Locator</strong>retrieves dependencies dynamically through a centralized registry.</li><li><strong>Dependency Injection</strong>provides dependencies explicitly at instantiation, enhancing testability and maintainability.</li></ul><p>Koin bridges these two approaches, offering dynamic retrieval via<code>get()</code>or<code>inject()</code>while also supporting DI features like constructor injection and scoping.</p><p>Koin‚Äôs dynamic behavior is influenced by Android‚Äôs lifecycle, which historically made constructor injection challenging. While modern Android features now support constructor injection, Koin remains flexible, letting developers choose the best approach for their needs.</p><p>At its core,<strong>Koin is a DI framework</strong>. It avoids reflection overhead, uses a Kotlin DSL for dependency graphs, and supports scoped lifecycles. However, its ability to function as a Service Locator adds versatility, particularly for simpler or legacy projects.</p>',7)),s("p",null,[n[28]||(n[28]=t("This is a summary, but this Koin project")),s("a",j,[e(o,{icon:"fas fa-globe"}),n[27]||(n[27]=t("documentation page"))]),n[29]||(n[29]=t("has more details if you need to go deeper."))]),n[121]||(n[121]=a('<hr><h2 id="why-choose-koin" tabindex="-1"><a class="header-anchor" href="#why-choose-koin"><span>Why choose Koin?</span></a></h2><ul><li><strong>Simple and Developer-Friendly:</strong> Koin‚Äôs clean DSL, no compile-time overhead, minimal setup, and easy testing let you focus on building your apps.</li><li><strong>Scales with Your App: f</strong>rom small apps to complex projects, Koin scales effortlessly to meet your needs.</li><li><strong>Evolving Compile-Time Safety:</strong> With features like module validation (<strong>Verify API</strong>),<strong>Koin Annotations</strong>(KSP for configuration safety), and the upcoming<strong>Koin IDE Plugin</strong>, Koin simplifies coding while boosting safety.</li><li><strong>Ready for Kotlin Multiplatform:</strong> Koin seamlessly manages dependencies across iOS, Android, Desktop, and Web, making it the go-to DI framework for cross-platform development.</li><li><strong>Perfect for Compose Multiplatform:</strong> Koin integrates effortlessly with Compose Multiplatform, supporting shared logic and DI for UI components ‚Äî even<strong>ViewModel</strong>.</li></ul><p>If you‚Äôre curious about Koin‚Äôs internals and design, let me know ‚Äî I‚Äôd be happy to explore that in a future article. For now, let‚Äôs dive into the benchmarks! üòÅ</p><h3 id="tracking-performances" tabindex="-1"><a class="header-anchor" href="#tracking-performances"><span>Tracking Performances</span></a></h3>',5)),s("p",null,[n[32]||(n[32]=t("Tracking the performance of components over sessions is trickier than it initially seems. While tools like")),s("a",L,[e(o,{icon:"fa-brands fa-android"}),n[30]||(n[30]=s("strong",null,"Baseline Profiles Macrobenchmark",-1))]),n[33]||(n[33]=t("and similar deep-dive tools offer great analysis, they don‚Äôt allow me to easily extract benchmark values for custom use. Alternatively, connected dev platforms like")),n[34]||(n[34]=s("strong",null,"Firebase Crashlytics or",-1)),n[35]||(n[35]=t()),s("a",F,[e(o,{icon:"fas fa-globe"}),n[31]||(n[31]=s("strong",null,"Kotzilla Platform",-1))]),n[36]||(n[36]=t("offer convenient solutions to capture and analyze performance metrics."))]),n[122]||(n[122]=s("p",null,[t("My goal here is to"),s("strong",null,"stay simple and lightweight"),t(": I want to"),s("strong",null,"measure how long it takes to create a specific component"),t(", like building a ViewModel instance using dependency injection. I don‚Äôt need a complex framework for this task, but I‚Äôm OK with manually instrumenting my code as long as it‚Äôs straightforward and lightweight.")],-1)),s("p",null,[n[41]||(n[41]=t("To achieve this, I wrote a few functions to capture function call time from DI frameworks (All is in")),s("a",O,[e(o,{icon:"iconfont icon-kotlin"}),n[37]||(n[37]=s("code",null,"Measure.kt",-1)),n[38]||(n[38]=t(" (")),e(o,{icon:"iconfont icon-github"}),n[39]||(n[39]=s("code",null,"InsertKoinIO/nowinandroid",-1)),n[40]||(n[40]=t(")"))]),n[42]||(n[42]=t("file). This utility leverages")),n[43]||(n[43]=s("strong",null,"Kotlin‚Äôs",-1)),n[44]||(n[44]=t()),n[45]||(n[45]=s("strong",null,"measureTimedValue",-1)),n[46]||(n[46]=t(" function, an elegant and efficient way to measure code execution times, making it an excellent fit for lightweight, manual instrumentation. By extending the Android")),n[47]||(n[47]=s("code",null,"Context",-1)),n[48]||(n[48]=t(", I created an easy way to log the duration of any function call (or dependency injection operation) directly to a log file."))]),n[123]||(n[123]=a(`<div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T<span class="token operator">&gt;</span> Context<span class="token punctuation">.</span><span class="token function">measureTimeLazy</span><span class="token punctuation">(</span>tag <span class="token operator">:</span> String<span class="token punctuation">,</span> code <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Lazy<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">:</span> Lazy<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">measureTimedValue</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> timeInMs <span class="token operator">=</span> result<span class="token punctuation">.</span>duration<span class="token punctuation">.</span>inWholeMicroseconds <span class="token operator">/</span> <span class="token number">1000.0</span></span>
<span class="line">    <span class="token function">logBenchmark</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span>timeInMs<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> result<span class="token punctuation">.</span>value</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the end,<strong>we are storing all results in a local file</strong>(function<strong>logBenchmark</strong>). This file will be extracted, to allow average times calculation.</p><h3 id="now-in-android" tabindex="-1"><a class="header-anchor" href="#now-in-android"><span>Now in Android</span></a></h3><p>Now, let‚Äôs see how these tracking functions are applied in our real-world scenario. For this benchmark, we‚Äôll measure the performance of the following components:<strong>MainActivityViewModel</strong>,<strong>ForYouViewModel</strong>, and<strong>startup time</strong>.</p><p>These ViewModels are the first two used in the application, making them ideal candidates for assessing the performance of DI frameworks during the app‚Äôs initial loading phase.</p>`,5)),s("p",null,[n[57]||(n[57]=t("In the")),n[58]||(n[58]=s("strong",null,"Koin implementation",-1)),n[59]||(n[59]=t(", the performance tracking for these components is instrumented as follows (")),s("a",N,[e(o,{icon:"iconfont icon-github"}),n[49]||(n[49]=s("code",null,"MainActivity.kt",-1)),n[50]||(n[50]=t(" (")),e(o,{icon:"iconfont icon-github"}),n[51]||(n[51]=s("code",null,"InsertKoinIO/nowinandroid",-1)),n[52]||(n[52]=t(")"))]),n[60]||(n[60]=t("&")),s("a",V,[e(o,{icon:"iconfont icon-github"}),n[53]||(n[53]=s("code",null,"ForYouScreen.kt",-1)),n[54]||(n[54]=t(" (")),e(o,{icon:"iconfont icon-github"}),n[55]||(n[55]=s("code",null,"InsertKoinIO/nowinandroid",-1)),n[56]||(n[56]=t(")"))]),n[61]||(n[61]=t(" links):"))]),n[124]||(n[124]=a(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="MainActivity.kt"><span>MainActivity.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">ComponentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/**</span>
<span class="line">     * Lazily inject [JankStats], which is used to track jank throughout the app.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">val</span> lazyStats <span class="token keyword">by</span> inject<span class="token operator">&lt;</span>JankStats<span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token function">parametersOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">val</span> networkMonitor<span class="token operator">:</span> NetworkMonitor <span class="token keyword">by</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">val</span> timeZoneMonitor<span class="token operator">:</span> TimeZoneMonitor <span class="token keyword">by</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">val</span> analyticsHelper<span class="token operator">:</span> AnalyticsHelper <span class="token keyword">by</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">val</span> userNewsResourceRepository<span class="token operator">:</span> UserNewsResourceRepository <span class="token keyword">by</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> viewModel<span class="token operator">:</span> MainActivityViewModel <span class="token keyword">by</span> <span class="token function">measureTimeLazy</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;MainActivityViewModel&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">viewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),r(" @include https://github.com/InsertKoinIO/nowinandroid/blob/perfs_koin/app/src/main/kotlin/com/google/samples/apps/nowinandroid/MainActivity.kt#L77 "),n[125]||(n[125]=a(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="ForYouScreen.kt"><span>ForYouScreen.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Composable</span></span>
<span class="line"><span class="token keyword">internal</span> <span class="token keyword">fun</span> <span class="token function">ForYouScreen</span><span class="token punctuation">(</span></span>
<span class="line">    onTopicClick<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">,</span></span>
<span class="line">    modifier<span class="token operator">:</span> Modifier <span class="token operator">=</span> Modifier<span class="token punctuation">,</span></span>
<span class="line">    viewModel<span class="token operator">:</span> ForYouViewModel <span class="token operator">=</span> LocalContext<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">measureTime</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;ForYouViewModel&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">koinViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> onboardingUiState <span class="token keyword">by</span> viewModel<span class="token punctuation">.</span>onboardingUiState<span class="token punctuation">.</span><span class="token function">collectAsStateWithLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> feedState <span class="token keyword">by</span> viewModel<span class="token punctuation">.</span>feedState<span class="token punctuation">.</span><span class="token function">collectAsStateWithLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> isSyncing <span class="token keyword">by</span> viewModel<span class="token punctuation">.</span>isSyncing<span class="token punctuation">.</span><span class="token function">collectAsStateWithLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> deepLinkedUserNewsResource <span class="token keyword">by</span> viewModel<span class="token punctuation">.</span>deepLinkedNewsResource<span class="token punctuation">.</span><span class="token function">collectAsStateWithLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ForYouScreen</span><span class="token punctuation">(</span></span>
<span class="line">        isSyncing <span class="token operator">=</span> isSyncing<span class="token punctuation">,</span></span>
<span class="line">        onboardingUiState <span class="token operator">=</span> onboardingUiState<span class="token punctuation">,</span></span>
<span class="line">        feedState <span class="token operator">=</span> feedState<span class="token punctuation">,</span></span>
<span class="line">        deepLinkedUserNewsResource <span class="token operator">=</span> deepLinkedUserNewsResource<span class="token punctuation">,</span></span>
<span class="line">        onTopicCheckedChanged <span class="token operator">=</span> viewModel<span class="token operator">::</span>updateTopicSelection<span class="token punctuation">,</span></span>
<span class="line">        onDeepLinkOpened <span class="token operator">=</span> viewModel<span class="token operator">::</span>onDeepLinkOpened<span class="token punctuation">,</span></span>
<span class="line">        onTopicClick <span class="token operator">=</span> onTopicClick<span class="token punctuation">,</span></span>
<span class="line">        saveFollowedTopics <span class="token operator">=</span> viewModel<span class="token operator">::</span>dismissOnboarding<span class="token punctuation">,</span></span>
<span class="line">        onNewsResourcesCheckedChanged <span class="token operator">=</span> viewModel<span class="token operator">::</span>updateNewsResourceSaved<span class="token punctuation">,</span></span>
<span class="line">        onNewsResourceViewed <span class="token operator">=</span> <span class="token punctuation">{</span> viewModel<span class="token punctuation">.</span><span class="token function">setNewsResourceViewed</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        modifier <span class="token operator">=</span> modifier<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),r(" @include: https://github.com/InsertKoinIO/nowinandroid/blob/perfs_koin/feature/foryou/src/main/kotlin/com/google/samples/apps/nowinandroid/feature/foryou/ForYouScreen.kt#L113 "),s("div",C,[n[65]||(n[65]=s("p",{class:"hint-container-title"},"Note",-1)),s("p",null,[n[63]||(n[63]=t("We are using the latest")),s("a",H,[e(o,{icon:"fas fa-globe"}),n[62]||(n[62]=t("Koin AndroidX Startup"))]),n[64]||(n[64]=t("feature to help improve startup time."))])]),s("p",null,[n[74]||(n[74]=t("For the")),n[75]||(n[75]=s("strong",null,"Hilt implementation",-1)),n[76]||(n[76]=t(", tracking is similarly applied (")),s("a",B,[e(o,{icon:"iconfont icon-github"}),n[66]||(n[66]=s("code",null,"MainActivity.kt",-1)),n[67]||(n[67]=t(" (")),e(o,{icon:"iconfont icon-github"}),n[68]||(n[68]=s("code",null,"InsertKoinIO/nowinandroid",-1)),n[69]||(n[69]=t(")"))]),n[77]||(n[77]=t("&")),s("a",R,[e(o,{icon:"iconfont icon-kotlin"}),n[70]||(n[70]=s("code",null,"ForYouScreen",-1)),n[71]||(n[71]=t(" (")),e(o,{icon:"iconfont icon-github"}),n[72]||(n[72]=s("code",null,"InsertKoinIO/nowinandroid",-1)),n[73]||(n[73]=t(")"))]),n[78]||(n[78]=t("links):"))]),n[126]||(n[126]=a(`<p>To capture the<strong>startup time</strong>, we use the<code>onWindowFocusChanged</code>function in<strong>MainActivity</strong>. This measures the time it takes for the app to render its first frame after gaining focus, giving a clear picture of the app‚Äôs startup performance. We track time from the<strong>Application</strong>class until the first Activity:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MainActivity.kt"><span>MainActivity.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">ComponentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onWindowFocusChanged</span><span class="token punctuation">(</span>hasFocus<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onWindowFocusChanged</span><span class="token punctuation">(</span>hasFocus<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasFocus<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">val</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">val</span> startupTime <span class="token operator">=</span> endTime <span class="token operator">-</span> NiaApplication<span class="token punctuation">.</span>startTime</span>
<span class="line">            <span class="token function">logBenchmark</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;AppStartup&quot;</span></span><span class="token punctuation">,</span>startupTime<span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),r(" @include: https://github.com/InsertKoinIO/nowinandroid/blob/perfs_hilt/app/src/main/kotlin/com/google/samples/apps/nowinandroid/MainActivity.kt#L80 "),n[127]||(n[127]=s("h3",{id:"execution-extraction-and-results",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#execution-extraction-and-results"},[s("span",null,"Execution, Extraction, And Results")])],-1)),s("p",null,[n[79]||(n[79]=t("To capture performance metrics automatically, we run the")),e(o,{icon:"iconfont icon-shell"}),n[80]||(n[80]=s("code",null,"benchmark.sh",-1)),n[81]||(n[81]=t("shell script. This script automates a sequence of app install, start, wait a few seconds, and stop actions to simulate realistic usage patterns. After all runs, it extracts the")),e(o,{icon:"fas fa-file-lines"}),n[82]||(n[82]=s("code",null,"benchmark_log.txt",-1)),n[83]||(n[83]=t("file containing all recorded times. This is 25 iterations of running the Nia application‚Äôs start, wait and stop (demo release build)."))]),s("p",null,[n[84]||(n[84]=t("Using the collected data, the")),e(o,{icon:"fa-brands fa-python"}),n[85]||(n[85]=s("code",null,"stats.py",-1)),n[86]||(n[86]=t("Python script processes the log to compute key statistics: minimum, maximum, and average times for each benchmarked component."))]),s("p",null,[n[87]||(n[87]=s("strong",null,"On your terminal",-1)),n[88]||(n[88]=t(", you can just run the command:")),n[89]||(n[89]=s("code",null,"benchmark.sh; python3 stats.py",-1)),n[90]||(n[90]=t(" (from the ")),e(o,{icon:"fas fa-folder-open"}),n[91]||(n[91]=s("code",null,"/app",-1)),n[92]||(n[92]=t(" folder)."))]),n[128]||(n[128]=s("p",null,"The best is to run it on a real Android device. On my OnePlus Nord (Android 12), I got the following results:",-1)),s("p",null,[n[97]||(n[97]=t("OnePlus Nord")),s("a",P,[n[93]||(n[93]=t("results (")),e(o,{icon:"iconfont icon-github"}),n[94]||(n[94]=s("code",null,"arnaudgiuliani",-1)),n[95]||(n[95]=t(")"))]),n[98]||(n[98]=t(", and also in Google")),s("a",W,[e(o,{icon:"iconfont icon-google-sheets"}),n[96]||(n[96]=t("spreadsheet"))])]),s("div",U,[n[104]||(n[104]=s("p",{class:"hint-container-title"},"Benchmark Results",-1)),s("p",null,[n[102]||(n[102]=t("Same OnePlus Nord")),s("a",Y,[n[99]||(n[99]=t("results (")),e(o,{icon:"iconfont icon-github"}),n[100]||(n[100]=s("code",null,"arnaudgiuliani",-1)),n[101]||(n[101]=t(")"))]),n[103]||(n[103]=t(" in table"))]),n[105]||(n[105]=a('<table><thead><tr><th style="text-align:left;">Component</th><th style="text-align:left;">Framework</th><th style="text-align:center;">Avg (ms)</th><th style="text-align:center;">Min (ms)</th><th style="text-align:center;">Max (ms)</th><th style="text-align:center;">Standard Error (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>¬±</mo></mrow><annotation encoding="application/x-tex">\\pm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">¬±</span></span></span></span> ms)</th></tr></thead><tbody><tr><td style="text-align:left;">MainActivityViewModel</td><td style="text-align:left;">Koin</td><td style="text-align:center;">0.166</td><td style="text-align:center;">0.146</td><td style="text-align:center;">0.198</td><td style="text-align:center;">0.002</td></tr><tr><td style="text-align:left;">MainActivityViewModel</td><td style="text-align:left;">Hilt</td><td style="text-align:center;">0.202</td><td style="text-align:center;">0.186</td><td style="text-align:center;">0.264</td><td style="text-align:center;">0.003</td></tr><tr><td style="text-align:left;">ForYouViewModel</td><td style="text-align:left;">Koin</td><td style="text-align:center;">2.052</td><td style="text-align:center;">0.223</td><td style="text-align:center;">9.042</td><td style="text-align:center;">0.302</td></tr><tr><td style="text-align:left;">ForYouViewModel</td><td style="text-align:left;">Hilt</td><td style="text-align:center;">2.203</td><td style="text-align:center;">0.359</td><td style="text-align:center;">8.481</td><td style="text-align:center;">0.299</td></tr><tr><td style="text-align:left;">App Startup</td><td style="text-align:left;">Koin</td><td style="text-align:center;">1416.360</td><td style="text-align:center;">1204.000</td><td style="text-align:center;">1746.000</td><td style="text-align:center;">37.072</td></tr><tr><td style="text-align:left;">App Startup</td><td style="text-align:left;">Hilt</td><td style="text-align:center;">1511.480</td><td style="text-align:center;">1238.000</td><td style="text-align:center;">1729.000</td><td style="text-align:center;">35.457</td></tr></tbody></table>',1))]),n[129]||(n[129]=a("<p>In this benchmark, in addition to average, minimum, and maximum, we show the ‚Äú<strong>standard error‚Äù</strong>: it measures the<strong>reliability of the average</strong>, indicating how much it may vary from the true population mean. Smaller values mean more stable and precise results. It helps also compare stability results between Koin and Dagger Hilt.</p><p>The benchmarks highlight <strong>Koin</strong>as a reliable and modern alternative for Android development, matching<strong>Hilt</strong>in performance while offering its own unique advantages.</p><p>That said, benchmarks are just one part of the story. Your results may vary depending on your app, but the trends are clear:<strong>Koin is performant for real-world challenges.</strong> From Android to Kotlin Multiplatform and Compose Multiplatform applications.</p>",3)),s("p",null,[n[107]||(n[107]=t("I‚Äôm always open to feedback ‚Äî if you have thoughts or insights,")),s("a",z,[e(o,{icon:"fa-brands fa-slack"}),n[106]||(n[106]=t("let‚Äôs chat"))]),n[108]||(n[108]=t("! üëç"))]),n[130]||(n[130]=s("p",null,[t("Why not give"),s("strong",null,"Koin"),t("a shot? Let"),s("strong",null,"Koin"),t("be part of your journey! üòä")],-1)),s("div",G,[n[111]||(n[111]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[110]||(n[110]=t("This article is previously published on ")),s("a",E,[e(o,{icon:"fa-brands fa-medium"}),n[109]||(n[109]=s("code",null,"proandroiddev",-1))])]),e(d,{name:"Benchmarking Koin vs. Dagger Hilt in Modern Android Development (2024)",desc:"How Koin scales and performs compared to Hilt, using practical benchmarks and insights.",url:"https://proandroiddev.com/benchmarking-koin-vs-dagger-hilt-in-modern-android-development-2024-ff7bb40470df/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1200/1*h5ULv-tGdDA3yD2c685lFQ.png"})]),r(" TODO: add ARTICLE CARD "),e(c,u(m({title:"Benchmarking Koin vs. Dagger Hilt in Modern Android Development (2024)",desc:"When choosing a dependency injection framework for Android and Kotlin development, performance is often a key consideration. This article explores the performance of Koin in its latest version (4.0.1-Beta1) and compares it with Dagger Hilt (2.52). Rather than relying on simplistic benchmarks or limited code execution scenarios, the focus is ‚Äúdeveloper-centric‚Äù: understanding performance in real-world, day-to-day usage. Additionally, this article aims to reassure those who may hesitate to adopt Koin due to performance concerns.",link:"https://chanhi2000.github.io/bookshelf/droidcon.com/benchmarking-koin-vs-dagger-hilt-in-modern-android-development-2024.html",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",background:"rgba(4,20,221,0.2)"})),null,16)])}const Z=k(h,[["render",q]]),X=JSON.parse('{"path":"/droidcon.com/benchmarking-koin-vs-dagger-hilt-in-modern-android-development-2024.html","title":"Benchmarking Koin vs. Dagger Hilt in Modern Android Development (2024)","lang":"en-US","frontmatter":{"lang":"en-US","title":"Benchmarking Koin vs. Dagger Hilt in Modern Android Development (2024)","description":"Article(s) > Benchmarking Koin vs. Dagger Hilt in Modern Android Development (2024)","icon":"fa-brands fa-android","category":["Java","Kotlin","Android","Article(s)"],"tag":["blog","droidcon.com","java","kotlin","android"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Benchmarking Koin vs. Dagger Hilt in Modern Android Development (2024)\\",\\"image\\":[\\"https://github.com/android/nowinandroid\\"],\\"datePublished\\":\\"2024-12-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Arnaud Giuliani\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/benchmarking-koin-vs-dagger-hilt-in-modern-android-development-2024.html"}],["meta",{"property":"og:site_name","content":"üìöBookshelf"}],["meta",{"property":"og:title","content":"Benchmarking Koin vs. Dagger Hilt in Modern Android Development (2024)"}],["meta",{"property":"og:description","content":"Article(s) > Benchmarking Koin vs. Dagger Hilt in Modern Android Development (2024)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://droidcon.com/wp-content/uploads/2024/12/1_h5ULv-tGdDA3yD2c685lFQ.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://droidcon.com/wp-content/uploads/2024/12/1_h5ULv-tGdDA3yD2c685lFQ.webp"}],["meta",{"name":"twitter:image:alt","content":"Benchmarking Koin vs. Dagger Hilt in Modern Android Development (2024)"}],["meta",{"property":"article:author","content":"Arnaud Giuliani"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"droidcon.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-12-03T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Benchmarking Koin vs. Dagger Hilt in Modern Android Development (2024)"},{"property":"og:description","content":"Benchmarking Koin vs. Dagger Hilt in Modern Android Development (2024)"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/benchmarking-koin-vs-dagger-hilt-in-modern-android-development-2024.html"}]],"prev":"/programming/java-android/articles/README.md","date":"2024-12-03T00:00:00.000Z","isOriginal":false,"author":"Arnaud Giuliani","cover":"https://droidcon.com/wp-content/uploads/2024/12/1_h5ULv-tGdDA3yD2c685lFQ.webp"},"git":{},"readingTime":{"minutes":7.47,"words":2240},"filePathRelative":"droidcon.com/benchmarking-koin-vs-dagger-hilt-in-modern-android-development-2024.md","copyright":{"author":"Arnaud Giuliani"}}');export{Z as comp,X as data};
