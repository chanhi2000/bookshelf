import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as e,b as i,a as g,t as h,n as r,g as u,w as p,e as a,r as l,o as b}from"./app-BVguHYKu.js";const y={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},S={href:"https://postgresql.org",target:"_blank",rel:"noopener noreferrer"},E={href:"https://learn.microsoft.com/en-us/ef/core/querying/pagination#offset-pagination",target:"_blank",rel:"noopener noreferrer"},I={href:"https://learn.microsoft.com/en-us/ef/core/querying/pagination#keyset-pagination",target:"_blank",rel:"noopener noreferrer"},q={href:"https://postgresql.org/docs/current/using-explain.html",target:"_blank",rel:"noopener noreferrer"},D={href:"https://use-the-index-luke.com/blog/2013-07/pagination-done-the-postgresql-way",target:"_blank",rel:"noopener noreferrer"};function T(d,n){const c=l("VPCard"),t=l("router-link"),k=l("SiteInfo"),o=l("VPIcon");return b(),v("div",null,[s("h1",f,[s("a",w,[s("span",null,h(d.$frontmatter.title)+" 관련",1)])]),e(c,r(u({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(c,r(u({title:"PostgreSQL > Article(s)",desc:"Article(s)",link:"/data-science/postgres/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[e(t,{to:"#database-schema"},{default:p(()=>n[0]||(n[0]=[a("Database Schema")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#offset-pagination-the-traditional-approach"},{default:p(()=>n[1]||(n[1]=[a("Offset Pagination: The Traditional Approach")])),_:1,__:[1]}),s("ul",null,[s("li",null,[e(t,{to:"#limitations-of-offset-pagination"},{default:p(()=>n[2]||(n[2]=[a("Limitations of Offset Pagination")])),_:1,__:[2]})])])]),s("li",null,[e(t,{to:"#cursor-based-pagination-a-faster-approach"},{default:p(()=>n[3]||(n[3]=[a("Cursor-Based Pagination: A Faster Approach")])),_:1,__:[3]}),s("ul",null,[s("li",null,[e(t,{to:"#limitations-of-cursor-pagination"},{default:p(()=>n[4]||(n[4]=[a("Limitations of Cursor Pagination")])),_:1,__:[4]})])])]),s("li",null,[e(t,{to:"#examining-the-sql-execution-plans"},{default:p(()=>n[5]||(n[5]=[a("Examining the SQL Execution Plans")])),_:1,__:[5]})]),s("li",null,[e(t,{to:"#adding-indexes-for-cursor-pagination"},{default:p(()=>n[6]||(n[6]=[a("Adding Indexes for Cursor Pagination")])),_:1,__:[6]})]),s("li",null,[e(t,{to:"#encoding-the-cursor"},{default:p(()=>n[7]||(n[7]=[a("Encoding the Cursor")])),_:1,__:[7]})]),s("li",null,[e(t,{to:"#summary"},{default:p(()=>n[8]||(n[8]=[a("Summary")])),_:1,__:[8]})])])]),n[42]||(n[42]=s("hr",null,null,-1)),e(k,{name:"Understanding Cursor Pagination and Why It's So Fast (Deep Dive)",desc:"While offset pagination is widely used, cursor-based pagination offers significant performance advantages - my tests show a 17x speedup when paginating through a million-record dataset in PostgreSQL. Let's take a deep dive into cursor pagination, compare it with offset pagination, and examine the SQL execution plans.",url:"https://milanjovanovic.tech/blog/understanding-cursor-pagination-and-why-its-so-fast-deep-dive",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_129.png"}),n[43]||(n[43]=s("p",null,"Pagination is crucial for efficiently handling large datasets. While offset pagination is widely used and gets the job done, cursor-based pagination offers some interesting advantages for certain scenarios.",-1)),n[44]||(n[44]=s("p",null,"It's particularly valuable for real-time feeds, infinite scroll interfaces, and APIs where performance at scale matters - like social media timelines, activity logs, or event streams where users frequently page through large datasets.",-1)),n[45]||(n[45]=s("p",null,[a("Let's explore both approaches using a simple "),s("code",null,"UserNotes"),a(" table and see how they perform with a million records.")],-1)),n[46]||(n[46]=s("p",null,"We'll look at the implementation details, compare query performance, and discuss where each approach makes the most sense.",-1)),s("p",null,[n[10]||(n[10]=a("I've included real execution plans from ")),s("a",S,[e(o,{icon:"iconfont icon-postgresql"}),n[9]||(n[9]=a("PostgreSQL"))]),n[11]||(n[11]=a(" to demonstrate the significant performance differences between these approaches."))]),n[47]||(n[47]=i(`<hr><h2 id="database-schema" tabindex="-1"><a class="header-anchor" href="#database-schema"><span>Database Schema</span></a></h2><p>I created a simple table to demonstrate pagination techniques. The table is seeded with <code>1,000,000</code> records for testing purposes, which should be enough to show the performance difference between offset and cursor pagination.</p><p>We&#39;ll use the following SQL schema for the examples:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user_notes <span class="token punctuation">(</span></span>
<span class="line">    id uuid <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">    user_id uuid <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">    note <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">date</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">CONSTRAINT</span> pk_user_notes <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And here&#39;s the C# class representing the <code>UserNote</code> entity:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="UserNote.cs"><span>UserNote.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserNote</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> UserId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Note <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">DateOnly</span> Date <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>I will use PostgreSQL as the database, but the concepts also apply to other databases.</p><hr><h2 id="offset-pagination-the-traditional-approach" tabindex="-1"><a class="header-anchor" href="#offset-pagination-the-traditional-approach"><span>Offset Pagination: The Traditional Approach</span></a></h2>`,10)),s("p",null,[s("a",E,[e(o,{icon:"fa-brands fa-microsoft"}),n[12]||(n[12]=a("Offset pagination"))]),n[13]||(n[13]=a(" uses ")),n[14]||(n[14]=s("code",null,"Skip",-1)),n[15]||(n[15]=a(" and ")),n[16]||(n[16]=s("code",null,"Take",-1)),n[17]||(n[17]=a(" operations. We ")),n[18]||(n[18]=s("em",null,"skip",-1)),n[19]||(n[19]=a(" a certain number of rows and ")),n[20]||(n[20]=s("em",null,"take",-1)),n[21]||(n[21]=a(" a fixed number of rows. These usually translate to ")),n[22]||(n[22]=s("code",null,"OFFSET",-1)),n[23]||(n[23]=a(" and ")),n[24]||(n[24]=s("code",null,"LIMIT",-1)),n[25]||(n[25]=a(" in SQL queries."))]),n[48]||(n[48]=i(`<p>Here&#39;s an example of offset pagination in ASP.NET Core:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/offset&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">AppDbContext</span> dbContext<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">int</span></span> page <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">int</span></span> pageSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>page <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">BadRequest</span><span class="token punctuation">(</span><span class="token string">&quot;Page must be greater than 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pageSize <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">BadRequest</span><span class="token punctuation">(</span><span class="token string">&quot;Page size must be greater than 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pageSize <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">BadRequest</span><span class="token punctuation">(</span><span class="token string">&quot;Page size must be less than or equal to 100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> dbContext<span class="token punctuation">.</span>UserNotes</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Date<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ThenByDescending</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Offset pagination typically counts the total number of items</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> totalCount <span class="token operator">=</span> <span class="token keyword">await</span> query<span class="token punctuation">.</span><span class="token function">CountAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> totalPages <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">Ceiling</span><span class="token punctuation">(</span>totalCount <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Skip and take the required number of items</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> items <span class="token operator">=</span> <span class="token keyword">await</span> query</span>
<span class="line highlighted">        <span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">)</span></span>
<span class="line highlighted">        <span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">new</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Items <span class="token operator">=</span> items<span class="token punctuation">,</span></span>
<span class="line">        Page <span class="token operator">=</span> page<span class="token punctuation">,</span></span>
<span class="line">        PageSize <span class="token operator">=</span> pageSize<span class="token punctuation">,</span></span>
<span class="line">        TotalCount <span class="token operator">=</span> totalCount<span class="token punctuation">,</span></span>
<span class="line">        TotalPages <span class="token operator">=</span> totalPages<span class="token punctuation">,</span></span>
<span class="line">        HasNextPage <span class="token operator">=</span> page <span class="token operator">&lt;</span> totalPages<span class="token punctuation">,</span></span>
<span class="line">        HasPreviousPage <span class="token operator">=</span> page <span class="token operator">&gt;</span> <span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that I&#39;m sorting the results by <code>Date</code> and <code>Id</code> in descending order. This ensures consistent results when paginating.</p><p>Here&#39;s the generated SQL for offset pagination:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token comment">-- This query is sent first</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>::<span class="token keyword">int</span> <span class="token keyword">FROM</span> user_notes <span class="token keyword">AS</span> u<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Followed by the actual data query</span></span>
<span class="line"><span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> u<span class="token punctuation">.</span><span class="token keyword">date</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>note<span class="token punctuation">,</span> u<span class="token punctuation">.</span>user_id</span>
<span class="line"><span class="token keyword">FROM</span> user_notes <span class="token keyword">AS</span> u</span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> u<span class="token punctuation">.</span><span class="token keyword">date</span> <span class="token keyword">DESC</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>id <span class="token keyword">DESC</span></span>
<span class="line"><span class="token keyword">LIMIT</span> <span class="token variable">@pageSize</span> <span class="token keyword">OFFSET</span> <span class="token variable">@offset</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="limitations-of-offset-pagination" tabindex="-1"><a class="header-anchor" href="#limitations-of-offset-pagination"><span>Limitations of Offset Pagination</span></a></h3><ol><li>Performance degrades as offset increases because the database must scan and discard all rows before the offset</li><li>Risk of missing or duplicating items when data changes between pages</li><li>Inconsistent results with concurrent updates</li></ol><hr><h2 id="cursor-based-pagination-a-faster-approach" tabindex="-1"><a class="header-anchor" href="#cursor-based-pagination-a-faster-approach"><span>Cursor-Based Pagination: A Faster Approach</span></a></h2>`,9)),s("p",null,[s("a",I,[e(o,{icon:"fa-brands fa-microsoft"}),n[26]||(n[26]=a("Cursor pagination"))]),n[27]||(n[27]=a(" uses a reference point (cursor) to fetch the next set of results. This reference point is typically a ")),n[28]||(n[28]=s("strong",null,"unique identifier",-1)),n[29]||(n[29]=a(" or a combination of fields that define the sort order."))]),n[49]||(n[49]=i(`<p>I&#39;ll use the <code>Date</code> and <code>Id</code> fields to create a cursor for our <code>UserNotes</code> table. The cursor is a composite of these two fields, allowing us to paginate efficiently.</p><p>Here&#39;s an example of cursor pagination in ASP.NET Core:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/cursor&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">AppDbContext</span> dbContext<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">DateOnly<span class="token punctuation">?</span></span> date <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Guid<span class="token punctuation">?</span></span> lastId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">int</span></span> limit <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>limit <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">BadRequest</span><span class="token punctuation">(</span><span class="token string">&quot;Limit must be greater than 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>limit <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">BadRequest</span><span class="token punctuation">(</span><span class="token string">&quot;Limit must be less than or equal to 100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> dbContext<span class="token punctuation">.</span>UserNotes<span class="token punctuation">.</span><span class="token function">AsQueryable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>date <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> lastId <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Use the cursor to fetch the next set of results</span></span>
<span class="line">        <span class="token comment">// If we were sorting in ASC order, we&#39;d use &gt; instead of &lt;</span></span>
<span class="line highlighted">        query <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Date <span class="token operator">&lt;</span> date <span class="token operator">||</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>Date <span class="token operator">==</span> date <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Id <span class="token operator">&lt;=</span> lastId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Fetch the items and determine if there are more</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> items <span class="token operator">=</span> <span class="token keyword">await</span> query</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Date<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ThenByDescending</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">)</span></span>
<span class="line highlighted">        <span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>limit <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Extract the cursor and ID for the next page</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">bool</span></span> hasMore <span class="token operator">=</span> items<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> limit<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">DateOnly<span class="token punctuation">?</span></span> nextDate <span class="token operator">=</span> hasMore <span class="token punctuation">?</span> items<span class="token punctuation">[</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Date <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Guid<span class="token punctuation">?</span></span> nextLastId <span class="token operator">=</span> hasMore <span class="token punctuation">?</span> items<span class="token punctuation">[</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Id <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Remove the extra item before returning results</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasMore<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        items<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">new</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Items <span class="token operator">=</span> items<span class="token punctuation">,</span></span>
<span class="line">        NextDate <span class="token operator">=</span> nextDate<span class="token punctuation">,</span></span>
<span class="line">        NextLastId <span class="token operator">=</span> nextLastId<span class="token punctuation">,</span></span>
<span class="line">        HasMore <span class="token operator">=</span> hasMore</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The sort order is the same as in the offset pagination example. However, the sort order is critical for consistent results with cursor pagination. Because the <code>Date</code> isn&#39;t a unique value in our table, we use the <code>Id</code> field to handle ties. This ensures that we don&#39;t miss or duplicate items when paginating.</p><p>Here&#39;s the generated SQL for cursor pagination:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> u<span class="token punctuation">.</span><span class="token keyword">date</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>note<span class="token punctuation">,</span> u<span class="token punctuation">.</span>user_id</span>
<span class="line"><span class="token keyword">FROM</span> user_notes <span class="token keyword">AS</span> u</span>
<span class="line"><span class="token keyword">WHERE</span> u<span class="token punctuation">.</span><span class="token keyword">date</span> <span class="token operator">&lt;</span> <span class="token variable">@date</span> <span class="token operator">OR</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token keyword">date</span> <span class="token operator">=</span> <span class="token variable">@date</span> <span class="token operator">AND</span> u<span class="token punctuation">.</span>id <span class="token operator">&lt;=</span> <span class="token variable">@lastId</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> u<span class="token punctuation">.</span><span class="token keyword">date</span> <span class="token keyword">DESC</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>id <span class="token keyword">DESC</span></span>
<span class="line"><span class="token keyword">LIMIT</span> <span class="token variable">@limit</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that there&#39;s no <code>OFFSET</code> in the query. We&#39;re directly seeking the rows based on the cursor, which is more efficient than offset pagination.</p><p>The <code>COUNT</code> query is omitted in cursor pagination because we&#39;re not counting the total number of items. This can be a limitation if you need to display the total number of pages upfront. However, the performance benefits of cursor pagination often outweigh this limitation.</p><h3 id="limitations-of-cursor-pagination" tabindex="-1"><a class="header-anchor" href="#limitations-of-cursor-pagination"><span>Limitations of Cursor Pagination</span></a></h3><ol><li>If users need to change sort fields dynamically, cursor pagination becomes significantly more complicated since the cursor must incorporate all sort conditions</li><li>Users can&#39;t jump to a specific page number - they must traverse sequentially through the pages</li><li>More complex to implement correctly compared to offset pagination, especially when handling ties and ensuring stable ordering</li></ol><hr><h2 id="examining-the-sql-execution-plans" tabindex="-1"><a class="header-anchor" href="#examining-the-sql-execution-plans"><span>Examining the SQL Execution Plans</span></a></h2>`,12)),s("p",null,[n[31]||(n[31]=a("I wanted to compare the execution plans for offset and cursor pagination. I used the ")),n[32]||(n[32]=s("code",null,"EXPLAIN ANALYZE",-1)),n[33]||(n[33]=a(" command in PostgreSQL to see the ")),s("a",q,[e(o,{icon:"iconfont icon-postgresql"}),n[30]||(n[30]=a("query plans"))]),n[34]||(n[34]=a("."))]),n[50]||(n[50]=i(`<p>Here&#39;s the offset pagination query:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> u<span class="token punctuation">.</span><span class="token keyword">date</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>note<span class="token punctuation">,</span> u<span class="token punctuation">.</span>user_id</span>
<span class="line"><span class="token keyword">FROM</span> user_notes <span class="token keyword">AS</span> u</span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> u<span class="token punctuation">.</span><span class="token keyword">date</span> <span class="token keyword">DESC</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>id <span class="token keyword">DESC</span></span>
<span class="line"><span class="token keyword">LIMIT</span> <span class="token number">1000</span> <span class="token keyword">OFFSET</span> <span class="token number">900000</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I&#39;m intentionally skipping <code>900,000</code> rows to exaggerate the performance impact. After that, we fetch the next <code>1,000</code> rows.</p><p>Here&#39;s the query plan for offset pagination:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">EXPLAIN</span> <span class="token keyword">ANALYZE</span> <span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> u<span class="token punctuation">.</span><span class="token keyword">date</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>note<span class="token punctuation">,</span> u<span class="token punctuation">.</span>user_id</span>
<span class="line"><span class="token keyword">FROM</span> user_notes <span class="token keyword">AS</span> u</span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> u<span class="token punctuation">.</span><span class="token keyword">date</span> <span class="token keyword">DESC</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>id <span class="token keyword">DESC</span></span>
<span class="line"><span class="token keyword">LIMIT</span> <span class="token number">1000</span> <span class="token keyword">OFFSET</span> <span class="token number">900000</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">---</span></span>
<span class="line"><span class="token comment">-- Limit  (cost=165541.59..165541.71 rows=1 width=52) (actual time=695.026..701.406 rows=1000 loops=1)</span></span>
<span class="line"><span class="token comment">--   -&gt;  Gather Merge  (cost=68312.50..165541.59 rows=833334 width=52) (actual time=342.475..684.567 rows=901000 loops=1)</span></span>
<span class="line"><span class="token comment">--         Workers Planned: 2</span></span>
<span class="line"><span class="token comment">--         Workers Launched: 2</span></span>
<span class="line"><span class="token comment">--         -&gt;  Sort  (cost=67312.48..68354.15 rows=416667 width=52) (actual time=327.846..450.295 rows=300841 loops=3)</span></span>
<span class="line"><span class="token comment">--               Sort Key: date DESC, id DESC</span></span>
<span class="line"><span class="token comment">--               Sort Method: external merge  Disk: 20440kB</span></span>
<span class="line"><span class="token comment">--               Worker 0:  Sort Method: external merge  Disk: 18832kB</span></span>
<span class="line"><span class="token comment">--               Worker 1:  Sort Method: external merge  Disk: 18912kB</span></span>
<span class="line"><span class="token comment">--               -&gt;  Parallel Seq Scan on user_notes u  (cost=0.00..14174.67 rows=416667 width=52) (actual time=1.035..22.876 rows=333333 loops=3)</span></span>
<span class="line"><span class="token comment">-- Planning Time: 0.050 ms</span></span>
<span class="line"><span class="token comment">-- JIT:</span></span>
<span class="line"><span class="token comment">--   Functions: 8</span></span>
<span class="line"><span class="token comment">--   Options: Inlining false, Optimization false, Expressions true, Deforming true</span></span>
<span class="line"><span class="token comment">--   Timing: Generation 0.243 ms (Deform 0.111 ms), Inlining 0.000 ms, Optimization 0.270 ms, Emission 4.085 ms, Total 4.598 ms</span></span>
<span class="line"><span class="token comment">-- Execution Time: 704.217 ms</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The total execution time is <code>704.217 ms</code> for offset pagination.</p><p>Here&#39;s the query returning the same set of rows using cursor pagination. I had to hardcode the <code>@date</code> and <code>@lastId</code> values for this comparison:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> u<span class="token punctuation">.</span><span class="token keyword">date</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>note<span class="token punctuation">,</span> u<span class="token punctuation">.</span>user_id</span>
<span class="line"><span class="token keyword">FROM</span> user_notes <span class="token keyword">AS</span> u</span>
<span class="line"><span class="token keyword">WHERE</span> u<span class="token punctuation">.</span><span class="token keyword">date</span> <span class="token operator">&lt;</span> <span class="token variable">@date</span> <span class="token operator">OR</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token keyword">date</span> <span class="token operator">=</span> <span class="token variable">@date</span> <span class="token operator">AND</span> u<span class="token punctuation">.</span>id <span class="token operator">&lt;=</span> <span class="token variable">@lastId</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> u<span class="token punctuation">.</span><span class="token keyword">date</span> <span class="token keyword">DESC</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>id <span class="token keyword">DESC</span></span>
<span class="line"><span class="token keyword">LIMIT</span> <span class="token number">1000</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, here&#39;s the query plan for cursor pagination:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">EXPLAIN</span> <span class="token keyword">ANALYZE</span> <span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> u<span class="token punctuation">.</span><span class="token keyword">date</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>note<span class="token punctuation">,</span> u<span class="token punctuation">.</span>user_id</span>
<span class="line"><span class="token keyword">FROM</span> user_notes <span class="token keyword">AS</span> u</span>
<span class="line"><span class="token keyword">WHERE</span> u<span class="token punctuation">.</span><span class="token keyword">date</span> <span class="token operator">&lt;</span> <span class="token variable">@date</span> <span class="token operator">OR</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token keyword">date</span> <span class="token operator">=</span> <span class="token variable">@date</span> <span class="token operator">AND</span> u<span class="token punctuation">.</span>id <span class="token operator">&lt;=</span> <span class="token variable">@lastId</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> u<span class="token punctuation">.</span><span class="token keyword">date</span> <span class="token keyword">DESC</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>id <span class="token keyword">DESC</span></span>
<span class="line"><span class="token keyword">LIMIT</span> <span class="token number">1000</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">---</span></span>
<span class="line"><span class="token comment">-- Limit  (cost=20605.63..20722.31 rows=1000 width=52) (actual time=37.993..40.958 rows=1000 loops=1)</span></span>
<span class="line"><span class="token comment">--   -&gt;  Gather Merge  (cost=20605.63..30419.62 rows=84114 width=52) (actual time=37.992..40.921 rows=1000 loops=1)</span></span>
<span class="line"><span class="token comment">--         Workers Planned: 2</span></span>
<span class="line"><span class="token comment">--         Workers Launched: 2</span></span>
<span class="line"><span class="token comment">--         -&gt;  Sort  (cost=19605.61..19710.75 rows=42057 width=52) (actual time=24.611..24.630 rows=811 loops=3)</span></span>
<span class="line"><span class="token comment">--               Sort Key: date DESC, id DESC</span></span>
<span class="line"><span class="token comment">--               Sort Method: top-N heapsort  Memory: 240kB</span></span>
<span class="line"><span class="token comment">--               Worker 0:  Sort Method: top-N heapsort  Memory: 239kB</span></span>
<span class="line"><span class="token comment">--               Worker 1:  Sort Method: top-N heapsort  Memory: 238kB</span></span>
<span class="line"><span class="token comment">--               -&gt;  Parallel Seq Scan on user_notes u  (cost=0.00..17299.67 rows=42057 width=52) (actual time=0.009..21.462 rows=33333 loops=3)</span></span>
<span class="line"><span class="token comment">--                     Filter: ((date &lt; @date::date) OR ((date = @date::date) AND (id &lt;= @lastId::uuid)))</span></span>
<span class="line"><span class="token comment">--                     Rows Removed by Filter: 300000</span></span>
<span class="line"><span class="token comment">-- Planning Time: 0.063 ms</span></span>
<span class="line"><span class="token comment">-- Execution Time: 40.993 ms</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The total execution time for cursor pagination is <code>40.993 ms</code>.</p><p>A whopping <code>17x</code> performance improvement with cursor pagination compared to offset pagination!</p><p>The performance with cursor pagination is consistent regardless of the page depth. This is because we&#39;re directly seeking the rows based on the cursor, which is more efficient than offset pagination. It&#39;s a huge advantage over offset pagination, especially for large datasets.</p><hr><h2 id="adding-indexes-for-cursor-pagination" tabindex="-1"><a class="header-anchor" href="#adding-indexes-for-cursor-pagination"><span>Adding Indexes for Cursor Pagination</span></a></h2>`,15)),s("p",null,[n[36]||(n[36]=a("I also tested the impact of indexes on ")),s("a",D,[e(o,{icon:"fas fa-globe"}),n[35]||(n[35]=a("cursor pagination"))]),n[37]||(n[37]=a(". I created a composite index on the ")),n[38]||(n[38]=s("code",null,"Date",-1)),n[39]||(n[39]=a(" and ")),n[40]||(n[40]=s("code",null,"Id",-1)),n[41]||(n[41]=a(" fields to speed up the queries. Or so I thought..."))]),n[51]||(n[51]=i(`<p>Here&#39;s the SQL command to create the composite index:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_user_notes_date_id <span class="token keyword">ON</span> user_notes <span class="token punctuation">(</span><span class="token keyword">date</span> <span class="token keyword">DESC</span><span class="token punctuation">,</span> id <span class="token keyword">DESC</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The index is created in descending order to match the sort order in our queries.</p><p>Let&#39;s see the query plan for cursor pagination with the composite index:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">EXPLAIN</span> <span class="token keyword">ANALYZE</span> <span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> u<span class="token punctuation">.</span><span class="token keyword">date</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>note<span class="token punctuation">,</span> u<span class="token punctuation">.</span>user_id</span>
<span class="line"><span class="token keyword">FROM</span> user_notes <span class="token keyword">AS</span> u</span>
<span class="line"><span class="token keyword">WHERE</span> u<span class="token punctuation">.</span><span class="token keyword">date</span> <span class="token operator">&lt;</span> <span class="token variable">@date</span> <span class="token operator">OR</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token keyword">date</span> <span class="token operator">=</span> <span class="token variable">@date</span> <span class="token operator">AND</span> u<span class="token punctuation">.</span>id <span class="token operator">&lt;=</span> <span class="token variable">@lastId</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> u<span class="token punctuation">.</span><span class="token keyword">date</span> <span class="token keyword">DESC</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>id <span class="token keyword">DESC</span></span>
<span class="line"><span class="token keyword">LIMIT</span> <span class="token number">1000</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">---</span></span>
<span class="line"><span class="token comment">-- Limit  (cost=0.42..816.55 rows=1000 width=52) (actual time=298.534..298.924 rows=1000 loops=1)</span></span>
<span class="line"><span class="token comment">--   -&gt;  Index Scan using idx_user_notes_date_id on user_notes u  (cost=0.42..82376.42 rows=100936 width=52) (actual time=298.532..298.888 rows=1000 loops=1)</span></span>
<span class="line"><span class="token comment">--         Filter: ((date &lt; @date::date) OR ((date = @date::date) AND (id &lt;= @lastId::uuid)))</span></span>
<span class="line"><span class="token comment">--         Rows Removed by Filter: 900000</span></span>
<span class="line"><span class="token comment">-- Planning Time: 0.068 ms</span></span>
<span class="line"><span class="token comment">-- Execution Time: 298.955 ms</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We have an <code>Index Scan</code> using the composite index. However, the execution time is <code>298.955 ms</code>, which is slower than the previous query without the index.</p><p>This might be because the dataset is too small to benefit from the index. I have only <code>1,000,000</code> records in the table, which might not be enough to see the performance improvement with the index.</p><p>But wait, there&#39;s more to it!</p><p>What if we were to use a tuple comparison in SQL?</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">EXPLAIN</span> <span class="token keyword">ANALYZE</span> <span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>id<span class="token punctuation">,</span> u<span class="token punctuation">.</span><span class="token keyword">date</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>note<span class="token punctuation">,</span> u<span class="token punctuation">.</span>user_id</span>
<span class="line"><span class="token keyword">FROM</span> user_notes <span class="token keyword">AS</span> u</span>
<span class="line"><span class="token keyword">WHERE</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token keyword">date</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token variable">@date</span><span class="token punctuation">,</span> <span class="token variable">@lastId</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> u<span class="token punctuation">.</span><span class="token keyword">date</span> <span class="token keyword">DESC</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>id <span class="token keyword">DESC</span></span>
<span class="line"><span class="token keyword">LIMIT</span> <span class="token number">1000</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">---</span></span>
<span class="line"><span class="token comment">-- Limit  (cost=0.42..432.81 rows=1000 width=52) (actual time=0.020..0.641 rows=1000 loops=1)</span></span>
<span class="line"><span class="token comment">--   -&gt;  Index Scan using idx_user_notes_date_id on user_notes u  (cost=0.42..43817.85 rows=101339 width=52) (actual time=0.019..0.606 rows=1000 loops=1)</span></span>
<span class="line"><span class="token comment">--         Index Cond: (ROW(date, id) &lt;= ROW(@date::date, @lastId::uuid))</span></span>
<span class="line"><span class="token comment">-- Planning Time: 0.060 ms</span></span>
<span class="line"><span class="token comment">-- Execution Time: 0.668 ms</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, the index is working. The execution time is <code>0.668 ms</code>, which is significantly faster than the previous queries.</p><p>The query optimizer cannot determine whether the composite index can be used for row-level comparison. However, the index is effectively used with a tuple comparison.</p><p>How do you translate this to EF Core?</p><p>The Postgres provider has <code>EF.Functions.LessThanOrEqual</code>, which accepts a <code>ValueTuple</code> as an argument. We can use it to produce a <code>(u.date, u.id) &lt;= (@date, @lastId)</code> comparison in the query. And this will utilize the composite index.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">query <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> EF<span class="token punctuation">.</span>Functions<span class="token punctuation">.</span><span class="token function">LessThanOrEqual</span><span class="token punctuation">(</span></span>
<span class="line">    ValueTuple<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>Date<span class="token punctuation">,</span> x<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    ValueTuple<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> lastId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="encoding-the-cursor" tabindex="-1"><a class="header-anchor" href="#encoding-the-cursor"><span>Encoding the Cursor</span></a></h2><p>Here&#39;s a small utility class for encoding and decoding the cursor. We&#39;ll use this to encode the cursor in the URL and decode it when fetching the next set of results.</p><p>The clients will receive the cursor as a Base64-encoded string. They don&#39;t need to know the internal structure of the cursor.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Cursor.cs"><span>Cursor.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Authentication</span><span class="token punctuation">;</span> <span class="token comment">// For Base64UrlTextEncoder</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">record</span> <span class="token class-name">Cursor</span><span class="token punctuation">(</span><span class="token class-name">DateOnly</span> Date<span class="token punctuation">,</span> <span class="token class-name">Guid</span> LastId<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Encode</span><span class="token punctuation">(</span><span class="token class-name">DateOnly</span> date<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> lastId<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> cursor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Cursor</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> lastId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> json <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> Base64UrlTextEncoder<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Cursor<span class="token punctuation">?</span></span> <span class="token function">Decode</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> cursor<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">string</span></span> json <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>Base64UrlTextEncoder<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> JsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Cursor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">catch</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here&#39;s an example of encoding and decoding the cursor:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">string</span></span> encodedCursor <span class="token operator">=</span> Cursor<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateOnly</span><span class="token punctuation">(</span><span class="token number">2025</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  Guid<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">&quot;019500f9-8b41-74cf-ab12-25a48d4d4ab4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Result:</span></span>
<span class="line"><span class="token comment">// eyJEYXRlIjoiMjAyNS0wMi0xNSIsIkxhc3RJZCI6IjAxOTUwMGY5LThiNDEtNzRjZi1hYjEyLTI1YTQ4ZDRkNGFiNCJ9</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Cursor</span> decodedCursor <span class="token operator">=</span> Cursor<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>encodedCursor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Result:</span></span>
<span class="line"><span class="token comment">// {</span></span>
<span class="line"><span class="token comment">//     &quot;Date&quot;: &quot;2025-02-15&quot;,</span></span>
<span class="line"><span class="token comment">//     &quot;LastId&quot;: &quot;019500f9-8b41-74cf-ab12-25a48d4d4ab4&quot;</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>While offset pagination is simpler to implement, it suffers from significant performance degradation at scale. My tests showed a 17x slowdown compared to cursor pagination when accessing deeper pages.</p><p>Cursor pagination maintains consistent performance regardless of page depth and works particularly well for real-time feeds and infinite scroll interfaces.</p><p>However, cursor pagination comes with tradeoffs. It requires careful implementation, especially around cursor encoding and handling sort orders. It also doesn&#39;t provide total page counts, making it unsuitable for interfaces that need to support paged navigation.</p><p>The choice between these approaches ultimately depends on your use case:</p><ul><li>Choose cursor pagination for performance-critical APIs, real-time feeds, infinite scroll, or any scenario where users frequently access deep pages</li><li>Stick with offset pagination for admin interfaces, small datasets, or when you need upfront page counts</li></ul><p>Another thing to consider: which page will your users typically land on? If most users start at the first page and rarely visit other pages, offset pagination might be sufficient. This will be the case for many applications.</p><p>Remember to use tuple comparisons and appropriate indexes to get the best performance from cursor pagination.</p><hr>`,32)),g(" TODO: add ARTICLE CARD "),e(c,r(u({title:"Understanding Cursor Pagination and Why It's So Fast (Deep Dive)",desc:"While offset pagination is widely used, cursor-based pagination offers significant performance advantages - my tests show a 17x speedup when paginating through a million-record dataset in PostgreSQL. Let's take a deep dive into cursor pagination, compare it with offset pagination, and examine the SQL execution plans.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/understanding-cursor-pagination-and-why-its-so-fast-deep-dive.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const A=m(y,[["render",T]]),R=JSON.parse(`{"path":"/milanjovanovic.tech/understanding-cursor-pagination-and-why-its-so-fast-deep-dive.html","title":"Understanding Cursor Pagination and Why It's So Fast (Deep Dive)","lang":"en-US","frontmatter":{"lang":"en-US","title":"Understanding Cursor Pagination and Why It's So Fast (Deep Dive)","description":"Article(s) > Understanding Cursor Pagination and Why It's So Fast (Deep Dive)","icon":"iconfont icon-csharp","category":["C#","DotNet","Postgres","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet","postgres","postgresql"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Understanding Cursor Pagination and Why It's So Fast (Deep Dive)\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_129.png\\"],\\"datePublished\\":\\"2025-02-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/understanding-cursor-pagination-and-why-its-so-fast-deep-dive.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Understanding Cursor Pagination and Why It's So Fast (Deep Dive)"}],["meta",{"property":"og:description","content":"Article(s) > Understanding Cursor Pagination and Why It's So Fast (Deep Dive)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_129.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_129.png"}],["meta",{"name":"twitter:image:alt","content":"Understanding Cursor Pagination and Why It's So Fast (Deep Dive)"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"postgresql"}],["meta",{"property":"article:tag","content":"postgres"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-02-15T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Understanding Cursor Pagination and Why It's So Fast (Deep Dive)"},{"property":"og:description","content":"Understanding Cursor Pagination and Why It's So Fast (Deep Dive)"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/understanding-cursor-pagination-and-why-its-so-fast-deep-dive.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-02-15T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_129.png"},"git":{},"readingTime":{"minutes":9,"words":2700},"filePathRelative":"milanjovanovic.tech/understanding-cursor-pagination-and-why-its-so-fast-deep-dive.md","copyright":{"author":"Milan Jovanović"}}`);export{A as comp,R as data};
