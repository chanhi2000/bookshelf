import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as s,f as t,b as u,a as v,t as f,n as c,g as d,w as e,e as a,r as p,o as y}from"./app-BVguHYKu.js";const w={},A={id:"frontmatter-title-관련",tabindex:"-1"},T={class:"header-anchor",href:"#frontmatter-title-관련"},D={class:"table-of-contents"},S={href:"https://doineedkubernetes.com/",target:"_blank",rel:"noopener noreferrer"},E={class:"hint-container note"},O={href:"https://prometheus.io/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://nuget.org/packages?q=OpenTelemetry",target:"_blank",rel:"noopener noreferrer"},P={href:"https://youtu.be/zvBu0OOCVos",target:"_blank",rel:"noopener noreferrer"};function x(m,n){const r=p("VPCard"),o=p("router-link"),g=p("SiteInfo"),l=p("RouteLink"),i=p("VPIcon"),h=p("VidStack");return y(),b("div",null,[s("h1",A,[s("a",T,[s("span",null,f(m.$frontmatter.title)+" 관련",1)])]),t(r,c(d({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t(r,c(d({title:"Docker > Article(s)",desc:"Article(s)",link:"/devops/docker/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t(r,c(d({title:"Prometheus > Article(s)",desc:"Article(s)",link:"/programming/go-prometheus/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",D,[s("ul",null,[s("li",null,[t(o,{to:"#why-run-the-aspire-dashboard-standalone"},{default:e(()=>n[0]||(n[0]=[a("Why Run the Aspire Dashboard Standalone?")])),_:1,__:[0]})]),s("li",null,[t(o,{to:"#step-1-add-the-dashboard-container"},{default:e(()=>n[1]||(n[1]=[a("Step 1: Add the Dashboard Container")])),_:1,__:[1]})]),s("li",null,[t(o,{to:"#step-2-wire-up-your-net-services"},{default:e(()=>n[2]||(n[2]=[a("Step 2: Wire Up Your .NET Services")])),_:1,__:[2]})]),s("li",null,[t(o,{to:"#step-3-configure-opentelemetry-in-your-code"},{default:e(()=>n[3]||(n[3]=[a("Step 3: Configure OpenTelemetry in Your Code")])),_:1,__:[3]})]),s("li",null,[t(o,{to:"#what-you-get"},{default:e(()=>n[4]||(n[4]=[a("What You Get")])),_:1,__:[4]}),s("ul",null,[s("li",null,[t(o,{to:"#structured-logs"},{default:e(()=>n[5]||(n[5]=[a("Structured Logs")])),_:1,__:[5]})]),s("li",null,[t(o,{to:"#distributed-traces"},{default:e(()=>n[6]||(n[6]=[a("Distributed Traces")])),_:1,__:[6]})]),s("li",null,[t(o,{to:"#real-time-metrics"},{default:e(()=>n[7]||(n[7]=[a("Real-Time Metrics")])),_:1,__:[7]})])])]),s("li",null,[t(o,{to:"#summary"},{default:e(()=>n[8]||(n[8]=[a("Summary")])),_:1,__:[8]})])])]),n[42]||(n[42]=s("hr",null,null,-1)),t(g,{name:"Standalone Aspire Dashboard Setup for Distributed .NET Applications",desc:"Learn how to run the Aspire Dashboard as a standalone container for instant traces, logs, and metrics in your .NET applications.",url:"https://milanjovanovic.tech/blog/standalone-aspire-dashboard-setup-for-distributed-dotnet-applications",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_157.png"}),n[43]||(n[43]=s("p",null,"You've built a distributed .NET application. Multiple services, databases, message queues. Now something's slow, and you need to figure out why.",-1)),s("p",null,[n[11]||(n[11]=s("strong",null,"The Aspire Dashboard runs perfectly as a standalone container",-1)),n[12]||(n[12]=a(", giving you ")),t(l,{to:"/milanjovanovic.tech/introduction-to-distributed-tracing-with-opentelemetry-in-dotnet.html"},{default:e(()=>n[9]||(n[9]=[s("strong",null,"distributed tracing",-1)])),_:1,__:[9]}),n[13]||(n[13]=a(", ")),t(l,{to:"/milanjovanovic.tech/5-serilog-best-practices-for-better-structured-logging.html"},{default:e(()=>n[10]||(n[10]=[s("strong",null,"structured logs",-1)])),_:1,__:[10]}),n[14]||(n[14]=a(", and real-time metrics without the full orchestration framework."))]),s("p",null,[n[18]||(n[18]=a("While ")),t(l,{to:"/milanjovanovic.tech/dotnet-aspire-a-game-changer-for-cloud-native-development.html"},{default:e(()=>n[15]||(n[15]=[s("strong",null,"Aspire's orchestration",-1)])),_:1,__:[15]}),n[19]||(n[19]=a(" is incredibly powerful for managing distributed applications, sometimes you just need the observability piece. Maybe you're already using ")),t(l,{to:"/milanjovanovic.tech/using-dotnet-aspire-with-the-docker-publisher.html"},{default:e(()=>n[16]||(n[16]=[s("strong",null,"Docker Compose",-1)])),_:1,__:[16]}),n[20]||(n[20]=a(" or ")),s("a",S,[t(i,{icon:"fas fa-globe"}),n[17]||(n[17]=a("Kubernetes"))]),n[21]||(n[21]=a(". Maybe you're debugging an existing system. The standalone dashboard gives you valuable telemetry visualization with minimal setup."))]),n[44]||(n[44]=u('<p>Let&#39;s get it running in under 5 minutes.</p><hr><h2 id="why-run-the-aspire-dashboard-standalone" tabindex="-1"><a class="header-anchor" href="#why-run-the-aspire-dashboard-standalone"><span>Why Run the Aspire Dashboard Standalone?</span></a></h2><p>Most teams already have their deployment story figured out. Docker Compose, Kubernetes, or some platform-specific orchestration. You don&#39;t want to rewrite everything just to get observability.</p><p>The standalone <strong>Aspire Dashboard</strong> hits a sweet spot <strong>for development</strong>:</p><ul><li><strong>Drop-in observability</strong>: Just add a container to your existing setup</li><li><strong>Full OpenTelemetry support</strong>: Works with any OTLP-compatible application</li><li><strong>Developer-friendly</strong>: Designed for local development and debugging</li><li><strong>Immediate value</strong>: See traces, logs, and metrics within minutes</li></ul>',6)),s("div",E,[n[29]||(n[29]=s("p",{class:"hint-container-title"},"One caveat",-1)),s("p",null,[n[24]||(n[24]=a("it's ")),n[25]||(n[25]=s("strong",null,"in-memory only",-1)),n[26]||(n[26]=a(". Perfect for development and debugging, not for production. For production, you'll want something like ")),t(l,{to:"/milanjovanovic.tech/introduction-to-distributed-tracing-with-opentelemetry-in-dotnet.html"},{default:e(()=>n[22]||(n[22]=[s("strong",null,"Jaeger",-1)])),_:1,__:[22]}),n[27]||(n[27]=a(", ")),s("a",O,[t(i,{icon:"iconfont icon-prometheus"}),n[23]||(n[23]=a("Prometheus"))]),n[28]||(n[28]=a(", or a commercial APM solution."))])]),n[45]||(n[45]=s("p",null,"But for understanding what your code is doing right now? It's exactly what you need.",-1)),n[46]||(n[46]=s("hr",null,null,-1)),n[47]||(n[47]=s("h2",{id:"step-1-add-the-dashboard-container",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#step-1-add-the-dashboard-container"},[s("span",null,"Step 1: Add the Dashboard Container")])],-1)),s("p",null,[n[30]||(n[30]=a("Drop this into your ")),t(i,{icon:"iconfont icon-yaml"}),n[31]||(n[31]=s("code",null,"docker-compose.yml",-1)),n[32]||(n[32]=a(":"))]),n[48]||(n[48]=u(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="docker-compose.yaml"><span>docker-compose.yaml</span></div><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">aspire-dashboard</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">container_name</span><span class="token punctuation">:</span> aspire<span class="token punctuation">-</span>dashboard</span>
<span class="line">  <span class="token key atrule">image</span><span class="token punctuation">:</span> mcr.microsoft.com/dotnet/aspire<span class="token punctuation">-</span>dashboard<span class="token punctuation">:</span><span class="token number">9.0</span></span>
<span class="line">  <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> 18888<span class="token punctuation">:</span><span class="token number">18888</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>That&#39;s it. The dashboard is running. Navigate to <code>http://localhost:18888</code> and... you&#39;ll need a token.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_157/aspire_dashboard_login.png?imwidth=3840" alt="Aspire Dashboard login screen" tabindex="0" loading="lazy"><figcaption>Aspire Dashboard login screen</figcaption></figure><p><strong>Check the container logs</strong> for the login link. The dashboard generates a unique authentication token on startup:</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_157/aspire_dashboard_login_link.png?imwidth=3840" alt="Aspire Dashboard login link" tabindex="0" loading="lazy"><figcaption>Aspire Dashboard login link</figcaption></figure><p>Click that link, and you&#39;re in. Empty for now, but not for long.</p><hr><h2 id="step-2-wire-up-your-net-services" tabindex="-1"><a class="header-anchor" href="#step-2-wire-up-your-net-services"><span>Step 2: Wire Up Your .NET Services</span></a></h2><p>Your services need to know where to send their telemetry. Add these environment variables to your API containers:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="docker-compose.yaml"><span>docker-compose.yaml</span></div><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">users.api</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">image</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>DOCKER_REGISTRY<span class="token punctuation">-</span><span class="token punctuation">}</span>usersapi</span>
<span class="line">  <span class="token key atrule">build</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">context</span><span class="token punctuation">:</span> .</span>
<span class="line">    <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Users.Api/Dockerfile</span>
<span class="line">  <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> 5100<span class="token punctuation">:</span><span class="token number">5100</span></span>
<span class="line">    <span class="token punctuation">-</span> 5101<span class="token punctuation">:</span><span class="token number">5101</span></span>
<span class="line">  <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> OTEL_EXPORTER_OTLP_ENDPOINT=http<span class="token punctuation">:</span>//aspire<span class="token punctuation">-</span>dashboard<span class="token punctuation">:</span><span class="token number">18889</span></span>
<span class="line">    <span class="token punctuation">-</span> OTEL_EXPORTER_OTLP_PROTOCOL=grpc</span>
<span class="line">  <span class="token key atrule">depends_on</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> users.database</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Notice port <code>18889</code>? That&#39;s the OTLP ingestion endpoint. The dashboard listens on <code>18888</code> for the UI, <code>18889</code> for telemetry data.</p><hr><h2 id="step-3-configure-opentelemetry-in-your-code" tabindex="-1"><a class="header-anchor" href="#step-3-configure-opentelemetry-in-your-code"><span>Step 3: Configure OpenTelemetry in Your Code</span></a></h2>`,13)),s("p",null,[n[34]||(n[34]=a("Install the necessary ")),s("a",q,[t(i,{icon:"fas fa-globe"}),n[33]||(n[33]=a("OpenTelemetry packages"))]),n[35]||(n[35]=a(":"))]),n[49]||(n[49]=u(`<div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Npgsql.OpenTelemetry<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>9.0.3<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>OpenTelemetry.Exporter.OpenTelemetryProtocol<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1.12.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>OpenTelemetry.Extensions.Hosting<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1.12.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>OpenTelemetry.Instrumentation.AspNetCore<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1.12.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PackageReference</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>OpenTelemetry.Instrumentation.Http<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1.12.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[36]||(n[36]=a("Then configure OpenTelemetry in your ")),t(i,{icon:"iconfont icon-csharp"}),n[37]||(n[37]=s("code",null,"Program.cs",-1)),n[38]||(n[38]=a(":"))]),n[50]||(n[50]=u(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="Program.cs"><span>Program.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddOpenTelemetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ConfigureResource</span><span class="token punctuation">(</span>resource <span class="token operator">=&gt;</span> resource<span class="token punctuation">.</span><span class="token function">AddService</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Environment<span class="token punctuation">.</span>ApplicationName<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">WithTracing</span><span class="token punctuation">(</span>tracing <span class="token operator">=&gt;</span> tracing</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">AddHttpClientInstrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">AddAspNetCoreInstrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">AddNpgsql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">WithMetrics</span><span class="token punctuation">(</span>metrics <span class="token operator">=&gt;</span> metrics</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">AddHttpClientInstrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">AddAspNetCoreInstrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Logging<span class="token punctuation">.</span><span class="token function">AddOpenTelemetry</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    options<span class="token punctuation">.</span>IncludeScopes <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    options<span class="token punctuation">.</span>IncludeFormattedMessage <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddOpenTelemetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UseOtlpExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This configuration:</p><ul><li><strong>Traces</strong> HTTP calls, ASP.NET Core requests, and database queries</li><li><strong>Collects metrics</strong> on request duration, response codes, and throughput</li><li><strong>Structured logging</strong> with full context and formatted messages</li><li><strong>Exports everything</strong> to the Aspire Dashboard via OTLP</li></ul><p>The <code>UseOtlpExporter()</code> method automatically picks up the <code>OTEL_EXPORTER_OTLP_ENDPOINT</code> environment variable you configured earlier.</p><hr><h2 id="what-you-get" tabindex="-1"><a class="header-anchor" href="#what-you-get"><span>What You Get</span></a></h2><p>Start your application and make a few requests. The dashboard immediately lights up with data.</p><h3 id="structured-logs" tabindex="-1"><a class="header-anchor" href="#structured-logs"><span>Structured Logs</span></a></h3><p>Every log entry includes full context: trace IDs, request paths, user identities. Click any log to see the complete structured data.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_157/structured_logs.png?imwidth=3840" alt="Aspire Dashboard structured logs" tabindex="0" loading="lazy"><figcaption>Aspire Dashboard structured logs</figcaption></figure><h3 id="distributed-traces" tabindex="-1"><a class="header-anchor" href="#distributed-traces"><span>Distributed Traces</span></a></h3><p>See the complete request flow across all your services. Which database query is slow? Which HTTP call is failing? The trace view shows you exactly where time is spent.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_157/distributed_traces.png?imwidth=3840" alt="Aspire Dashboard distributed traces" tabindex="0" loading="lazy"><figcaption>Aspire Dashboard distributed traces</figcaption></figure><p>You can click into a trace to see the individual spans and any metadata associated with them.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_157/distributed_trace_details.png?imwidth=3840" alt="Aspire Dashboard distributed trace details" tabindex="0" loading="lazy"><figcaption>Aspire Dashboard distributed trace details</figcaption></figure><h3 id="real-time-metrics" tabindex="-1"><a class="header-anchor" href="#real-time-metrics"><span>Real-Time Metrics</span></a></h3><p>Response times, error rates, throughput, all updating live. Perfect for load testing or understanding traffic patterns.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_157/metrics.png?imwidth=3840" alt="Aspire Dashboard metrics" tabindex="0" loading="lazy"><figcaption>Aspire Dashboard metrics</figcaption></figure><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>The standalone <strong>Aspire Dashboard</strong> is perfect for local development and debugging. Spin up your stack, make requests, and instantly see what&#39;s happening across all your services. Find bottlenecks in the trace view, correlate logs with requests, watch metrics update in real-time.</p>`,21)),s("p",null,[n[40]||(n[40]=a("Remember: this is for development only since data is in-memory and disappears on restart. That last part might be fixed soon, according to the ")),s("a",P,[t(i,{icon:"fa-brands fa-youtube"}),n[39]||(n[39]=a("Aspire roadmap"))]),n[41]||(n[41]=a(". For production, you'll want proper solutions like Jaeger for tracing, Prometheus for metrics, or a commercial APM like Application Insights."))]),t(h,{src:"youtube/zvBu0OOCVos"}),n[51]||(n[51]=s("p",null,`But for that immediate "what is my code actually doing?" question during development? You've got professional observability in under 5 minutes.`,-1)),n[52]||(n[52]=s("p",null,"Just add the container, configure OpenTelemetry, and start debugging like a pro.",-1)),n[53]||(n[53]=s("hr",null,null,-1)),v(" TODO: add ARTICLE CARD "),t(r,c(d({title:"Standalone Aspire Dashboard Setup for Distributed .NET Applications",desc:"Learn how to run the Aspire Dashboard as a standalone container for instant traces, logs, and metrics in your .NET applications.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/standalone-aspire-dashboard-setup-for-distributed-dotnet-applications.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const C=k(w,[["render",x]]),R=JSON.parse('{"path":"/milanjovanovic.tech/standalone-aspire-dashboard-setup-for-distributed-dotnet-applications.html","title":"Standalone Aspire Dashboard Setup for Distributed .NET Applications","lang":"en-US","frontmatter":{"lang":"en-US","title":"Standalone Aspire Dashboard Setup for Distributed .NET Applications","description":"Article(s) > Standalone Aspire Dashboard Setup for Distributed .NET Applications","icon":"iconfont icon-csharp","category":["C#","DotNet","DevOps","Docker","Go","Prometheus","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet","devops","docker","go","prometheus","go-prometheus"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Standalone Aspire Dashboard Setup for Distributed .NET Applications\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_157/aspire_dashboard_login.png?imwidth=3840\\",\\"https://milanjovanovic.tech/blogs/mnw_157/aspire_dashboard_login_link.png?imwidth=3840\\",\\"https://milanjovanovic.tech/blogs/mnw_157/structured_logs.png?imwidth=3840\\",\\"https://milanjovanovic.tech/blogs/mnw_157/distributed_traces.png?imwidth=3840\\",\\"https://milanjovanovic.tech/blogs/mnw_157/distributed_trace_details.png?imwidth=3840\\",\\"https://milanjovanovic.tech/blogs/mnw_157/metrics.png?imwidth=3840\\"],\\"datePublished\\":\\"2025-08-30T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/standalone-aspire-dashboard-setup-for-distributed-dotnet-applications.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Standalone Aspire Dashboard Setup for Distributed .NET Applications"}],["meta",{"property":"og:description","content":"Article(s) > Standalone Aspire Dashboard Setup for Distributed .NET Applications"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_157.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_157.png"}],["meta",{"name":"twitter:image:alt","content":"Standalone Aspire Dashboard Setup for Distributed .NET Applications"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"go-prometheus"}],["meta",{"property":"article:tag","content":"prometheus"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-08-30T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Standalone Aspire Dashboard Setup for Distributed .NET Applications"},{"property":"og:description","content":"Standalone Aspire Dashboard Setup for Distributed .NET Applications"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/standalone-aspire-dashboard-setup-for-distributed-dotnet-applications.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-08-30T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_157.png"},"git":{},"readingTime":{"minutes":3.85,"words":1154},"filePathRelative":"milanjovanovic.tech/standalone-aspire-dashboard-setup-for-distributed-dotnet-applications.md","copyright":{"author":"Milan Jovanović"}}');export{C as comp,R as data};
