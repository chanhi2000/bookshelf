import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as p,b as l,t as f,n as u,g as r,w as e,e as a,r as c,o as y}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/d2.naver.com/6178029/1.png",h="/bookshelf/assets/image/d2.naver.com/6178029/2.png",D={},x={id:"frontmatter-title-관련",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-관련"},E={class:"table-of-contents"},M={href:"https://github.com/mongodb/mongo-go-driver",target:"_blank",rel:"noopener noreferrer"},B={href:"https://pkg.go.dev/net/http",target:"_blank",rel:"noopener noreferrer"},R={class:"hint-container details"},T={class:"hint-container details"},N={href:"https://www.mongodb.com/docs/drivers/go/upcoming/fundamentals/crud/read-operations/cursor/#retrieve-all-documents",target:"_blank",rel:"noopener noreferrer"},A={href:"https://pkg.go.dev/go.mongodb.org/mongo-driver/mongo#Collection",target:"_blank",rel:"noopener noreferrer"},G={class:"hint-container details"},I={href:"https://www.mongodb.com/docs/drivers/go/current/fundamentals/connections/connection-guide/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.mongodb.com/docs/drivers/go/current/fundamentals/context/",target:"_blank",rel:"noopener noreferrer"};function S(k,n){const i=c("VPCard"),t=c("router-link"),d=c("SiteInfo"),v=c("VidStack"),o=c("VPIcon"),m=c("RouteLink");return y(),g("div",null,[s("h1",x,[s("a",C,[s("span",null,f(k.$frontmatter.title)+" 관련",1)])]),p(i,u(r({title:"Go > Article(s)",desc:"Article(s)",link:"/programming/go/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",E,[s("ul",null,[s("li",null,[p(t,{to:"#기존-문제점"},{default:e(()=>n[0]||(n[0]=[a("기존 문제점")])),_:1,__:[0]})]),s("li",null,[p(t,{to:"#개선-방향"},{default:e(()=>n[1]||(n[1]=[a("개선 방향")])),_:1,__:[1]}),s("ul",null,[s("li",null,[p(t,{to:"#db-쿼리-실행-정보와-error를-래핑하여-반환"},{default:e(()=>n[2]||(n[2]=[a("DB 쿼리 실행 정보와 error를 래핑하여 반환")])),_:1,__:[2]})]),s("li",null,[p(t,{to:"#error-값이-nil이면-반환되는-값-document-데이터-은-nil이-아니며-쿼리-성공을-보장"},{default:e(()=>n[3]||(n[3]=[a("error 값이 nil이면, 반환되는 값(document 데이터)은 nil이 아니며 쿼리 성공을 보장")])),_:1,__:[3]})]),s("li",null,[p(t,{to:"#singleresult-cursor-등을-디코딩하는-중복-코드를-공통화"},{default:e(()=>n[4]||(n[4]=[a("singleResult, Cursor 등을 디코딩하는 중복 코드를 공통화")])),_:1,__:[4]})]),s("li",null,[p(t,{to:"#상위-레이어에서는-db-레이어-내부에서-정의한-error를-처리하고-로그-레벨을-판단해-로깅"},{default:e(()=>n[5]||(n[5]=[a("상위 레이어에서는 DB 레이어 내부에서 정의한 error를 처리하고 로그 레벨을 판단해 로깅")])),_:1,__:[5]})])])]),s("li",null,[p(t,{to:"#공통화"},{default:e(()=>n[6]||(n[6]=[a("공통화")])),_:1,__:[6]}),s("ul",null,[s("li",null,[p(t,{to:"#collection-객체-singleton"},{default:e(()=>n[7]||(n[7]=[a("collection 객체 singleton")])),_:1,__:[7]})]),s("li",null,[p(t,{to:"#slow-쿼리-로깅"},{default:e(()=>n[8]||(n[8]=[a("slow 쿼리 로깅")])),_:1,__:[8]})]),s("li",null,[p(t,{to:"#시간-초과-처리"},{default:e(()=>n[9]||(n[9]=[a("시간 초과 처리")])),_:1,__:[9]})]),s("li",null,[p(t,{to:"#디코딩-및-error-타입-생성"},{default:e(()=>n[10]||(n[10]=[a("디코딩 및 error 타입 생성")])),_:1,__:[10]})]),s("li",null,[p(t,{to:"#error-분류에-대한-고민"},{default:e(()=>n[11]||(n[11]=[a("error 분류에 대한 고민")])),_:1,__:[11]})])])]),s("li",null,[p(t,{to:"#마치며"},{default:e(()=>n[12]||(n[12]=[a("마치며")])),_:1,__:[12]})]),s("li",null,[p(t,{to:"#참고"},{default:e(()=>n[13]||(n[13]=[a("참고")])),_:1,__:[13]})])])]),n[64]||(n[64]=s("hr",null,null,-1)),p(d,{name:"Golang, 그대들은 어떻게 할 것인가 - 2. MongoDB Go Driver 추상화 | NAVER D2",desc:"Golang, 그대들은 어떻게 할 것인가 - 2. MongoDB Go Driver 추상화",url:"https://d2.naver.com/helloworld/6178029",logo:"/assets/image/d2.naver.com/favicon.ico",preview:"/assets/image/d2.naver.com/6178029/banner.png"}),p(v,{src:"https://tv.naver.com/embed/48960992?autoPlay=true"}),s("p",null,[n[17]||(n[17]=a("클로바노트 V1의 주요 서버들은 Golang(v1.14)으로 개발되었고 MongoDB를 메인 DB로 사용하고 있습니다. ")),s("a",M,[p(o,{icon:"iconfont icon-github"}),n[14]||(n[14]=a("MongoDB Go Driver (")),n[15]||(n[15]=s("code",null,"mongodb/mongo-go-driver",-1)),n[16]||(n[16]=a(")"))]),n[18]||(n[18]=a("라는 라이브러리를 사용하고 있는데, 이는 DB 쿼리(raw query)를 간편하게 작성할 수 있게 하고 struct에 매핑을 도와주는 매퍼 형식의 DB 라이브러리라고 생각하시면 될 것 같습니다."))]),s("p",null,[p(m,{to:"/d2.naver.com/8588537.html"},{default:e(()=>n[19]||(n[19]=[a("앞 글")])),_:1,__:[19]}),n[20]||(n[20]=a("에서 이야기한 error에 대한 고민 중 DB 레이어에서 고민이 필요한 부분은 다음과 같았습니다."))]),n[65]||(n[65]=l('<ul><li>로그는 어디서 남겨야 하는가? 남긴다면 어떤 레벨로 남겨야 하는가?</li></ul><p>어떤 document에 대한 find를 실행했는데 해당 document가 없는 경우, 이것이 발생하면 안 되는 상황인지 정상적인 상황인지는 상위 레이어에서 결정됩니다. 그렇다면 DB 레이어에서는 로그를 Info, Warn 중 어떤 레벨로 남겨야 할까요? DB 레이어에서는 로그 레벨을 결정할 수가 없습니다. 그러면 DB 레이어에서는 Info 레벨로 로그를 남기고 상위 함수에서 error 여부를 판단하여 Error 레벨로 로그를 남겨야 할까요? 하지만 그러면 로그가 중복되고 효율적이지 못한 것 같았습니다.</p><p>이 밖에도 DB에서 다양한 error(찾을 수 없음, 중복된 키, 시간 초과, 디코딩 오류 등)가 발생할 수 있는데 상위 레이어에서는 이를 어떻게 판별할지에 대한 고민도 필요했습니다.</p><hr><h2 id="기존-문제점" tabindex="-1"><a class="header-anchor" href="#기존-문제점"><span>기존 문제점</span></a></h2><p>V1 서버에서 DB 레이어 구조만 보면 다음과 같습니다.</p><figure><img src="'+w+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>클로바노트 V1을 만들 때는 서비스를 만들어내는 속도가 중요한 상황이어서 일관성 없이 각 서버에서 각자의 방식으로 MongoDB Go Driver를 사용하고 있었는데, 이러한 구조를 없애고 모든 서버가 같은 구조로 일관성 있게 동작하게 개선하고 싶었습니다.</p><p>document를 가져오는 코드의 구조는 다음과 같았습니다.</p><ol><li>DB collection 객체 생성</li><li>시간 초과(timeout) 설정</li><li>쿼리 작성(filter, update 등)</li><li>slow 쿼리 로깅</li><li>document 디코딩</li></ol><p>3번을 제외한 코드는 대부분 각 서버에서 작성해 코드가 중복되어 있었고, 그에 따라 코드의 양이 많아지고 동작이 다르거나 누락된 경우도 많아 공통화에 대한 고민도 했습니다.</p><details class="hint-container details"><summary>코드 예</summary><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">type</span> MyCollectionManager <span class="token keyword">struct</span> <span class="token punctuation">{</span>  </span>
<span class="line">    authSource <span class="token builtin">string</span></span>
<span class="line">    collection <span class="token builtin">string</span></span>
<span class="line">    client  <span class="token operator">*</span>mongoDB<span class="token punctuation">.</span>Client</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. collection 객체 생성</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">MyCollection</span><span class="token punctuation">(</span>client <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Client<span class="token punctuation">)</span> <span class="token operator">*</span>MyCollectionManager <span class="token punctuation">{</span>  </span>
<span class="line">    manager <span class="token operator">:=</span> <span class="token operator">&amp;</span>MyCollectionManager<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    dbConfig <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">GetDatabaseConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    manager<span class="token punctuation">.</span>authSource <span class="token operator">=</span> dbConfig<span class="token punctuation">.</span>DatabaseName</span>
<span class="line">    manager<span class="token punctuation">.</span>collection <span class="token operator">=</span> <span class="token string">&quot;myCollection&quot;</span></span>
<span class="line">    manager<span class="token punctuation">.</span>client <span class="token operator">=</span> client</span>
<span class="line">    <span class="token keyword">return</span> manager</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 실제 쿼리 조건 세팅 및 디코딩</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>manager <span class="token operator">*</span>MyCollectionManager<span class="token punctuation">)</span> <span class="token function">GetDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>MyDocument<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    document <span class="token operator">:=</span> <span class="token operator">&amp;</span>MyDocument<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 3. 쿼리 조건 세팅</span></span>
<span class="line">    filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    startTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    singleResult <span class="token operator">:=</span> manager<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">FindOne</span><span class="token punctuation">(</span>manager<span class="token punctuation">.</span>authSource<span class="token punctuation">,</span> manager<span class="token punctuation">.</span>collection<span class="token punctuation">,</span> <span class="token operator">&amp;</span>filter<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 4. slow 쿼리 로깅</span></span>
<span class="line">    <span class="token keyword">if</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span> <span class="token operator">&gt;</span> slowQueryLimit <span class="token punctuation">{</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> singleResult <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        msg <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;FindOne document is failed&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> document<span class="token punctuation">,</span> ERROR_INTERNAL_SERVER<span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 5. 디코딩</span></span>
<span class="line">    <span class="token keyword">var</span> document MyDocument</span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> singleResult<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">==</span> mongo<span class="token punctuation">.</span>ErrNoDocuments <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> document<span class="token punctuation">,</span> ERROR_NOT_FOUND<span class="token punctuation">,</span> err</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&amp;</span>document<span class="token punctuation">,</span> ERROR_INTERNAL_SERVER<span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>document<span class="token punctuation">,</span> notecommon<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 시간 초과 설정 및 쿼리 수행</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Client<span class="token punctuation">)</span> <span class="token function">FindOne</span><span class="token punctuation">(</span>databaseName <span class="token builtin">string</span><span class="token punctuation">,</span> collectionName <span class="token builtin">string</span><span class="token punctuation">,</span> filter <span class="token operator">*</span>bson<span class="token punctuation">.</span>M<span class="token punctuation">)</span> <span class="token operator">*</span>mongo<span class="token punctuation">.</span>SingleResult <span class="token punctuation">{</span>  </span>
<span class="line">    collection <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span>databaseName<span class="token punctuation">,</span> collectionName<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> collection <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        ctx<span class="token punctuation">,</span> ctxCancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeoutLimit<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">defer</span> <span class="token function">ctxCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        res <span class="token operator">:=</span> collection<span class="token punctuation">.</span><span class="token function">FindOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> filter<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> res</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="개선-방향" tabindex="-1"><a class="header-anchor" href="#개선-방향"><span>개선 방향</span></a></h2><p>저는 개선 방향을 다음과 같이 정했습니다.</p><ol><li><strong>DB 레이어에서는 로그를 남기지 않고 DB 쿼리 실행 정보와 error를 래핑하여 반환한다.</strong></li><li><strong><code>error</code> 값이 <code>nil</code>(=Null)이면, 반환되는 값(document)은 <code>nil</code>이 아니며 쿼리 성공을 보장한다.</strong></li><li><strong>singleResult, Cursor 등을 디코딩하는 중복 코드를 공통화한다.</strong></li><li><strong>상위 레이어에서는 MongoDB Go Driver의 error를 처리하는 것이 아니라 DB 레이어 내부에서 정의한 error를 처리하고 로그 레벨을 판단해 로그를 남긴다.</strong></li></ol><p>방향을 이렇게 정한 이유와 그 결과를 하나씩 설명하겠습니다.</p><h3 id="db-쿼리-실행-정보와-error를-래핑하여-반환" tabindex="-1"><a class="header-anchor" href="#db-쿼리-실행-정보와-error를-래핑하여-반환"><span>DB 쿼리 실행 정보와 error를 래핑하여 반환</span></a></h3><p>글의 초반에서 언급한 대로, DB 레이어에서는 error의 심각성을 판단할 수 없습니다. 실제로 어떤 레벨의 error인지는 <strong>비즈니스 로직을 포함한 상위 레이어까지 올라가야만 알 수 있기 때문에, DB 레이어는 로그를 남가지 않도록</strong> 설계 방향을 잡았습니다.</p><p>DB 레이어에서 로그를 기록하지 않기로 결정했으므로, DB 레이어는 상위 레이어에 error 정보를 정확하게 전달해야 했습니다. 그러면 error에 어떤 정보를 포함해야 할지 생각해보았습니다.</p><p>우선, DB에서 발생할 수 있는 error를 파악했습니다.</p><ul><li>시간 초과(timeout)</li><li>찾을 수 없음(not found)</li><li>중복된 키(duplicated key)</li><li>네트워크 오류(network)</li><li>연결 끊김(disconnect)</li></ul><p>MongoDB Go Driver에서 정의한 error는 위의 5개 외에도 더 있지만 크게 위와 같이 분류했고, 결과를 디코딩하는 중 발생한 오류도 고려하여 디코딩 error까지 총 6개의 error를 추렸습니다.</p><p>그 다음에는 어떤 정보를 error에 포함할지 정했습니다. DB 오류가 발생한 경우 디버깅에 어떤 정보가 필요할지 고민했습니다.</p><ul><li>필터링 조건</li><li>update/insert 내용</li><li>대상 collection</li><li>Mongo 내부 오류 메시지</li></ul><p>위와 같은 정보가 필요하다고 생각했고, 해당 내용을 담을 수 있는 <code>struct</code>를 다음과 같이 정의했습니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">package</span> errorUtils</span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> basicQueryInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>  </span>
<span class="line">    collection <span class="token builtin">string</span></span>
<span class="line">    filter     <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    update     <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    doc        <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> notFoundError <span class="token keyword">struct</span> <span class="token punctuation">{</span>  </span>
<span class="line">    basicQueryInfo</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> duplicatedKeyError <span class="token keyword">struct</span> <span class="token punctuation">{</span>  </span>
<span class="line">    basicQueryInfo</span>
<span class="line">    <span class="token builtin">error</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>부가 함수</summary><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">NotFoundError</span><span class="token punctuation">(</span>col <span class="token builtin">string</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> update<span class="token punctuation">,</span> doc <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">    err <span class="token operator">:=</span> <span class="token operator">&amp;</span>notFoundError<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    err<span class="token punctuation">.</span><span class="token function">setBasicError</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> update<span class="token punctuation">,</span> doc<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>err <span class="token operator">*</span>basicQueryInfo<span class="token punctuation">)</span> <span class="token function">setBasicError</span><span class="token punctuation">(</span>col <span class="token builtin">string</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> update<span class="token punctuation">,</span> doc <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    err<span class="token punctuation">.</span>filter <span class="token operator">=</span> filter</span>
<span class="line">    err<span class="token punctuation">.</span>collection <span class="token operator">=</span> col</span>
<span class="line">    err<span class="token punctuation">.</span>update <span class="token operator">=</span> update</span>
<span class="line">    err<span class="token punctuation">.</span>doc <span class="token operator">=</span> doc</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>그리고 로그를 남길 때 앞에서 정의한 struct의 정보가 보이도록 문자열을 작성했습니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>notFoundError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s not found. &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>collection<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getBasicInfoErrorMsg</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>basicQueryInfo<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">getBasicInfoErrorMsg</span><span class="token punctuation">(</span>e basicQueryInfo<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  </span>
<span class="line">    msg <span class="token operator">:=</span> <span class="token string">&quot;| {query info: &quot;</span></span>
<span class="line">    <span class="token keyword">if</span> e<span class="token punctuation">.</span>filter <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        msg <span class="token operator">+=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot; filter: %+v&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>filter<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> e<span class="token punctuation">.</span>update <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        msg <span class="token operator">+=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;, update: %+v&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>update<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> e<span class="token punctuation">.</span>doc <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        msg <span class="token operator">+=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;, doc: %+v&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>doc<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    msg <span class="token operator">+=</span> <span class="token string">&quot;}&quot;</span></span>
<span class="line">    <span class="token keyword">return</span> msg</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이 코드의 error의 로그는 다음과 같이 <code>error 종류, Mongo 오류 내용, 쿼리 내용</code>의 구조로 남겨집니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token comment">// accounts collection에서 특정 document를 찾지 못함</span></span>
<span class="line"><span class="token string">&quot;accounts not found. | {query info: filter: map[account_id: 123]}&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="error-값이-nil이면-반환되는-값-document-데이터-은-nil이-아니며-쿼리-성공을-보장" tabindex="-1"><a class="header-anchor" href="#error-값이-nil이면-반환되는-값-document-데이터-은-nil이-아니며-쿼리-성공을-보장"><span><code>error</code> 값이 <code>nil</code>이면, 반환되는 값(document 데이터)은 <code>nil</code>이 아니며 쿼리 성공을 보장</span></a></h3>`,33)),s("p",null,[n[22]||(n[22]=a("Golang을 사용하면서 외부 API를 호출할 때 ")),s("a",B,[p(o,{icon:"fas fa-boxes-stacked"}),n[21]||(n[21]=a("net/http"))]),n[23]||(n[23]=a(" 패키지를 자주 사용했는데, ")),n[24]||(n[24]=s("code",null,"error",-1)),n[25]||(n[25]=a(" 값이 ")),n[26]||(n[26]=s("code",null,"nil",-1)),n[27]||(n[27]=a("이면 반환 값이 항상 ")),n[28]||(n[28]=s("code",null,"non-nil",-1)),n[29]||(n[29]=a("이라는 점이 괜찮다고 생각했습니다. 개발자는 ")),n[30]||(n[30]=s("code",null,"error",-1)),n[31]||(n[31]=a(" 값이 ")),n[32]||(n[32]=s("code",null,"nil",-1)),n[33]||(n[33]=a("이면 반환 값을 검증 없이 사용할 수 있었습니다."))]),s("details",R,[s("summary",null,[n[34]||(n[34]=a("net/http/client.go ")),p(o,{icon:"fa-brands fa-golang"})]),n[35]||(n[35]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token comment">// net/http/client.go</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// If the returned error is nil, the Response will contain a non-nil</span></span>
<span class="line"><span class="token comment">// Body which the user is expected to close.</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>req <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Response<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))]),n[66]||(n[66]=l(`<p>그래서 저도 이러한 개념을 도입하기로 했습니다. 반환된 <code>error</code> 값이 <code>nil</code>이면, 반환된 document 또는 결과는 <code>nil</code>이 아니며 동시에 쿼리 성공을 보장하도록 했습니다.</p><p>이러한 결정을 한 주요한 이유는 document를 찾을 수 없는 상황 때문이었습니다. find의 결과로 document를 찾을 수 없는 경우, 쿼리가 실패하지는 않았기 때문에 다음과 같이 결과물을 <code>nil</code>로, <code>error</code>도 <code>nil</code>로 반환할 수 있습니다.</p><details class="hint-container details"><summary>코드 예</summary><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">FindSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>MyDocument<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> not found <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>하지만 저는 다음과 같은 이유로 이 방식을 선호하지 않았습니다.</p><ul><li>만약 <code>nil</code>이 반환된다면 상위 함수에서 document가 <code>nil</code>인지 확인해야 한다.</li><li>MongoDB Go Driver에서는 document를 찾을 수 없는 상황을 error(<code>ErrNoDocuments</code>)로 정의한다.</li></ul>`,5)),s("details",T,[s("summary",null,[n[36]||(n[36]=a("mongo/single_result.go ")),p(o,{icon:"fa-brands fa-golang"})]),n[37]||(n[37]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token comment">// single_result.go</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ErrNoDocuments is returned by SingleResult methods when the operation that created the SingleResult did not return</span></span>
<span class="line"><span class="token comment">// any documents.</span></span>
<span class="line"><span class="token keyword">var</span> ErrNoDocuments <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;mongo: no documents in result&quot;</span><span class="token punctuation">)</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))]),n[67]||(n[67]=l(`<p>물론 document를 찾을 수 없는 상황을 error로 반환하는 경우도 확인해야 합니다.</p><p>하지만 document를 찾을 수 없는 상황을 error로 취급한다면, 굳이 error 내용을 확인할 필요 없이 상위 레이어로 올리거나 error 로그를 남기기만 하면 된다는 장점이 있습니다.</p><p>그래서 저는 <code>not found</code>는 error로 보기로 했고, <code>error</code> 값이 <code>nil</code>인 경우에는 결과 값은 <code>nil</code>이 아니며 쿼리 성공을 보장하는 방식을 도입했습니다.</p><h3 id="singleresult-cursor-등을-디코딩하는-중복-코드를-공통화" tabindex="-1"><a class="header-anchor" href="#singleresult-cursor-등을-디코딩하는-중복-코드를-공통화"><span><code>singleResult</code>, <code>Cursor</code> 등을 디코딩하는 중복 코드를 공통화</span></a></h3><p>MongoDB Go Driver를 사용하면서 불편한 점은 매번 디코딩 코드를 작성해야 한다는 것이었습니다.</p><details class="hint-container details"><summary>코드 예</summary><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token comment">// find all 1</span></span>
<span class="line">cursor<span class="token punctuation">,</span> err <span class="token operator">:=</span> collection<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">defer</span> cursor<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>  </span>
<span class="line"><span class="token keyword">var</span> results <span class="token punctuation">[</span><span class="token punctuation">]</span>MyDocument  </span>
<span class="line"><span class="token keyword">for</span> cursor<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">var</span> doc MyDocument</span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    results <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> doc<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// find all 2</span></span>
<span class="line"><span class="token keyword">var</span> results <span class="token punctuation">[</span><span class="token punctuation">]</span>MyDocument  </span>
<span class="line"><span class="token keyword">if</span> err <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// find one</span></span>
<span class="line">singleResult <span class="token operator">:=</span> collection<span class="token punctuation">.</span><span class="token function">FindOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  </span>
<span class="line"><span class="token keyword">var</span> doc MyDocument  </span>
<span class="line"><span class="token keyword">if</span> err <span class="token operator">:=</span> singleResult<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>위와 같은 중복 코드를 제거하고 공통 함수에서 디코딩할 수 있는 방법을 고민했습니다.</p><p>먼저, <code>singleResult</code> 디코딩은 디코딩 함수를 한 번 래핑하는 것으로 간단히 해결할 수 있었습니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">package</span> mongo</span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> SingleResultErr  <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;single result is nil&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">EvaluateAndDecodeSingleResult</span><span class="token punctuation">(</span>result <span class="token operator">*</span>mongo<span class="token punctuation">.</span>SingleResult<span class="token punctuation">,</span> v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> result <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> SingleResultErr</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> result<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>하지만 문제는 Cursor 디코딩이었습니다. 어떤 타입을 디코딩해야 하는지는 런타임에 결정되어, 동적으로 추론하는 방법은 reflect 밖에 없었고 그것도 완벽하지 않았습니다.</p><details class="hint-container details"><summary>reflect를 사용하여 디코딩하는 예</summary><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>col <span class="token operator">*</span>Collection<span class="token punctuation">)</span> <span class="token function">FindAll</span><span class="token punctuation">(</span>requiredExample <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> filter <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>options<span class="token punctuation">.</span>FindOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line">    cursor<span class="token punctuation">,</span> err <span class="token operator">:=</span> col<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">DecodeCursor</span><span class="token punctuation">(</span>cursor<span class="token punctuation">,</span> <span class="token function">GetInterfaceType</span><span class="token punctuation">(</span>requiredExample<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">DecodeCursor</span><span class="token punctuation">(</span>cursor <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Cursor<span class="token punctuation">,</span> t reflect<span class="token punctuation">.</span>Type<span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">// 타입에 맞춰 slice 생성</span></span>
<span class="line">    slice <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">MakeSlice</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">SliceOf</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> cursor<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// struct 초기화</span></span>
<span class="line">        doc <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 디코딩</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">:=</span> cursor<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 디코딩 결과 slice append</span></span>
<span class="line">        slice <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// slice return</span></span>
<span class="line">    <span class="token keyword">return</span> slice<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">GetInterfaceType</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> reflect<span class="token punctuation">.</span>Type <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">var</span> t reflect<span class="token punctuation">.</span>Type</span>
<span class="line">    <span class="token keyword">if</span> xt<span class="token punctuation">,</span> ok <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span></span>
<span class="line">        t <span class="token operator">=</span> xt</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        t <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> t</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>이 코드는 다음과 같은 단계를 거칩니다.</p><ol><li><code>FindAll()</code> 함수에 slice로 반환받을 예시 struct 객체를 넣으면 해당 객체가 담긴 <code>interface{}</code>를 반환</li><li>상위 함수에서는 이를 한 번 더 type assertion</li></ol><p>reflect를 사용하다 보니 코드를 바로 이용하기가 쉽지 않았고, <code>interface{}</code>로 반환되므로 다시 타입을 변환해야 하는 불편함이 있었습니다.</p><details class="hint-container details"><summary>reflect 방식 사용 예</summary><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token comment">// FindAll(Account 타입, 쿼리 조건)</span></span>
<span class="line">    all<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">FindAll</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Account<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    result <span class="token operator">:=</span> all<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>types<span class="token punctuation">.</span>Account<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p><code>DecodeCursor()</code> 함수 내부에서 slice를 만들지 않고 기존의 커서 디코딩 방식처럼 외부에서 slice를 받아서 append하는 방식을 시도해보았으나 쉽지 않았고 구글링으로도 해결책을 찾지 못했습니다.</p><p>그래서 기존 MongoDB Go Driver에서는 <code>cursor.All()</code>은 어떻게 구현되어 있는지 확인해보았습니다.</p>`,17)),s("blockquote",null,[p(o,{icon:"fas fa-folder-open"}),n[38]||(n[38]=s("code",null,"mongo/",-1)),p(o,{icon:"fa-brands fa-golang"}),n[39]||(n[39]=s("code",null,"cursor.go",-1))]),n[68]||(n[68]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cursor<span class="token punctuation">)</span> <span class="token function">All</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> results <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">    resultsVal <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> resultsVal<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;results argument must be a pointer to a slice, but was a %s&quot;</span><span class="token punctuation">,</span> resultsVal<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    sliceVal <span class="token operator">:=</span> resultsVal<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> sliceVal<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Interface <span class="token punctuation">{</span></span>
<span class="line">        sliceVal <span class="token operator">=</span> sliceVal<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> sliceVal<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Slice <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;results argument must be a pointer to a slice, but was a pointer to %s&quot;</span><span class="token punctuation">,</span> sliceVal<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    elementType <span class="token operator">:=</span> sliceVal<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">var</span> index <span class="token builtin">int</span></span>
<span class="line">    <span class="token keyword">var</span> err <span class="token builtin">error</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">defer</span> c<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    batch <span class="token operator">:=</span> c<span class="token punctuation">.</span>batch <span class="token comment">// exhaust the current batch before iterating the batch cursor</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">        sliceVal<span class="token punctuation">,</span> index<span class="token punctuation">,</span> err <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">addFromBatch</span><span class="token punctuation">(</span>sliceVal<span class="token punctuation">,</span> elementType<span class="token punctuation">,</span> batch<span class="token punctuation">,</span> index<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> err</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token operator">!</span>c<span class="token punctuation">.</span>bc<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">break</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        batch <span class="token operator">=</span> c<span class="token punctuation">.</span>bc<span class="token punctuation">.</span><span class="token function">Batch</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">=</span> <span class="token function">replaceErrors</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>bc<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    resultsVal<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>sliceVal<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>제가 구현한 방식과 비슷하게 reflect를 사용하고 있지만, 다른 점은 마지막 줄이었습니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line">resultsVal<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>sliceVal<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>내부에서 생성한 slice의 데이터를 외부에서 받은 slice에 담는 작업인데, 이렇게 작성하면 <code>All()</code> 내부에 2개의 slice가 존재하게 됩니다. 이에 대해 공식 문서에서는 <code>cursor.All()</code>의 메모리 이슈 가능성을 설명하고 있습니다.</p>`,5)),s("blockquote",null,[n[42]||(n[42]=s("p",null,"Memory",-1)),n[43]||(n[43]=s("p",null,"If the number and size of documents returned by your query exceeds available application memory, your program will crash. If you except a large result set, you should consume your cursor iteratively.",-1)),s("p",null,[n[41]||(n[41]=a("출처: ")),s("a",N,[p(o,{icon:"iconfont icon-mongodb"}),n[40]||(n[40]=a("Retrieve All Documents"))])])]),n[69]||(n[69]=l(`<p>그래서 결국 <code>cursor.All()</code>을 사용하는 방식과 제가 직접 만든 reflect 함수를 사용하는 방식, 이렇게 두 가지를 만들어, 만약 조회할 데이터가 크지 않다면 전자의 함수를, 크다면 불편함은 있지만 후자의 함수를 사용하는 것으로 마무리하려고 했었습니다.</p><p>하지만 이러한 고민을 해결해줄 <strong>Go 1.18 버전이 2022년 3월 15일에 공개</strong>되었고 <strong>Generic이 도입</strong>되었습니다. Generic을 이용한 해결을 시도해보았는데, 디코딩할 때 함수에 Generic 타입을 넘겨주면 아주 간단하게 처리할 수 있었습니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token comment">// cursor</span></span>
<span class="line"><span class="token keyword">func</span> DecodeCursor<span class="token punctuation">[</span>T any<span class="token punctuation">]</span><span class="token punctuation">(</span>cursor <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Cursor<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">defer</span> cursor<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    slice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// nil이 아님을 보장하기 위해 slice intialize</span></span>
<span class="line">    <span class="token keyword">for</span> cursor<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> doc T</span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">:=</span> cursor<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> doc<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> slice<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// single result</span></span>
<span class="line"><span class="token keyword">func</span> EvaluateAndDecodeSingleResult<span class="token punctuation">[</span>T any<span class="token punctuation">]</span><span class="token punctuation">(</span>result <span class="token operator">*</span>mongo<span class="token punctuation">.</span>SingleResult<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> result <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errorType<span class="token punctuation">.</span>SingleResultErr</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">var</span> v T</span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> result<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이 방법으로, 이제는 reflect를 사용한 경우 caller에서 type assertion을 할 필요가 없었으며, <code>cursor.All()</code>의 메모리 이슈도 해결할 수 있었습니다.</p><h3 id="상위-레이어에서는-db-레이어-내부에서-정의한-error를-처리하고-로그-레벨을-판단해-로깅" tabindex="-1"><a class="header-anchor" href="#상위-레이어에서는-db-레이어-내부에서-정의한-error를-처리하고-로그-레벨을-판단해-로깅"><span>상위 레이어에서는 DB 레이어 내부에서 정의한 error를 처리하고 로그 레벨을 판단해 로깅</span></a></h3><p>마지막으로, 상위 레이어에서 MongoDB Go Driver의 error를 처리하는 것이 아니라 앞서 DB 레이어가 쿼리 실행 정보와 함께 래핑한 error를 처리하게 하는 일이 남았습니다.</p><p>이를 위해서는 상위 레이어에서 error를 구별할 방법이 필요했고, 다음의 총 3가지 방법이 있었습니다.</p><ul><li><strong><code>errors.As()</code></strong></li><li><strong>reflect</strong></li><li><strong>type swtich</strong></li></ul><h4 id="_1-errors-as" tabindex="-1"><a class="header-anchor" href="#_1-errors-as"><span>1. <code>errors.As()</code></span></a></h4><p><code>github.com/pkg/errors</code>를 사용하여 특정 구조체에 error가 바인딩될 수 있는지 확인하는 방법입니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">IsErrorOf</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> target <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">As</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>하지만 이 방식은 매번 error를 확인할 때마다 target error의 변수를 선언해서 넘겨야 하는 불편함이 있습니다.</p><details class="hint-container details"><summary>코드 예</summary><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">service</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">var</span> notFoundErr notFoundError</span>
<span class="line">    <span class="token keyword">if</span> <span class="token function">IsErrorOf</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token operator">&amp;</span>notFoundErr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// handle error</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">var</span> dupKeyErr duplicatedKeyError</span>
<span class="line">    <span class="token keyword">if</span> <span class="token function">IsErrorOf</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dupKeyErr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// handle error</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="_2-reflect" tabindex="-1"><a class="header-anchor" href="#_2-reflect"><span>2. <code>reflect</code></span></a></h4><p>Golang의 <code>reflect</code>를 사용하여 error가 해당 <code>struct</code>의 타입과 동일한지 판별하는 것입니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">GetInterfaceType</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> reflect<span class="token punctuation">.</span>Type <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">var</span> t reflect<span class="token punctuation">.</span>Type</span>
<span class="line">    <span class="token keyword">if</span> xt<span class="token punctuation">,</span> ok <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span></span>
<span class="line">        t <span class="token operator">=</span> xt</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        t <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> t</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">IsErrorTypeOf</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>  </span>
<span class="line">    t <span class="token operator">:=</span> <span class="token function">GetInterfaceType</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span></span>
<span class="line">    errorType <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> t <span class="token operator">==</span> errorType <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// IsErrorTypeOf(err, duplicatedKeyError{})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>하지만 이 방식을 사용하기 위해서는 error struct를 public으로 공개해야 한다는 조건이 있습니다. 또한, 확인하려는 struct의 객체를 생성해야 하므로 이로 인한 불편함도 존재합니다.</p><h4 id="_3-type-switch" tabindex="-1"><a class="header-anchor" href="#_3-type-switch"><span>3. <code>type switch</code></span></a></h4><p>이 방식은 Golang에서 타입을 판별할 때 가장 자주 사용되는 방식입니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">IsDBInternalErr</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">for</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">switch</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token operator">*</span>internalError<span class="token punctuation">,</span></span>
<span class="line">            <span class="token operator">*</span>timeoutError<span class="token punctuation">,</span></span>
<span class="line">            <span class="token operator">*</span>dbClientError<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">Unwrap</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(Golang에서 error는 여러 겹으로 래핑될 수 있기 때문에 양파 껍질을 까듯이 확인하도록 만들었습니다. 래핑에 관한 내용은 다음 글에서 자세히 설명하겠습니다.)</p><p>위 방식은 모든 error struct마다 타입 switch 함수를 만들어야 하는 불편함은 있지만 가장 직관적이고, DB에서 발생하는 error의 종류가 늘어날 가능성이 거의 없기 때문에 이 방법도 괜찮아 보였습니다. 또한, <code>IsDBInternalErr()</code>와 같이 여러 error를 1개로 처리되도록 할 수 있었습니다.</p><p>상위 함수에서는 다음과 같이 사용될 수 있습니다.</p><details class="hint-container details"><summary>사용 예</summary><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">service</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> <span class="token function">IsNotFoundErr</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// handle error</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token function">IsDBInternalErr</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// handle error</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>위의 상황을 전체적으로 고려할 때, 팀 내에서는 세 번째 방식이 가장 좋을 것으로 결론을 내렸으며, 타입 switch 방식으로 상위 함수에서 처리하도록 설정했습니다.</p><hr><h2 id="공통화" tabindex="-1"><a class="header-anchor" href="#공통화"><span>공통화</span></a></h2><p>error를 정의하고 처리하고 쿼리 결과를 디코딩하는 것까지 완성하고, V1에서 중복되어 있던 다음과 같은 코드를 공통화하는 작업을 진행했습니다.</p><ul><li>collection 객체 singleton</li><li>slow 쿼리 로깅</li><li>시간 초과</li><li>디코딩</li><li>error 타입 생성</li></ul><h3 id="collection-객체-singleton" tabindex="-1"><a class="header-anchor" href="#collection-객체-singleton"><span>collection 객체 singleton</span></a></h3><p>기존 V1에서는 MongoDB <code>client</code> 객체에서 매번 <code>Collection</code> 객체를 생성하고 있었습니다.</p><details class="hint-container details"><summary>코드 예</summary><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Client<span class="token punctuation">)</span> <span class="token function">getCollection</span><span class="token punctuation">(</span>database <span class="token builtin">string</span><span class="token punctuation">,</span> collection <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Collection <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span>database<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>manager <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Client<span class="token punctuation">)</span> <span class="token function">FindOne</span><span class="token punctuation">(</span>databaseName <span class="token builtin">string</span><span class="token punctuation">,</span> collectionName <span class="token builtin">string</span><span class="token punctuation">,</span> filter <span class="token operator">*</span>bson<span class="token punctuation">.</span>M<span class="token punctuation">)</span> <span class="token operator">*</span>mongo<span class="token punctuation">.</span>SingleResult <span class="token punctuation">{</span>  </span>
<span class="line">    collection <span class="token operator">:=</span> manager<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span>databaseName<span class="token punctuation">,</span> collectionName<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,33)),s("p",null,[n[45]||(n[45]=a("쿼리마다 객체를 생성하는 비용이 있기 때문에, 이를 줄이기 위해 객체를 공유해서 사용해도 되는지 MongoDB Go Driver 공식 문서를 찾아보았습니다. 확인 결과, ")),n[46]||(n[46]=s("code",null,"Collection",-1)),n[47]||(n[47]=a(" 객체는 ")),s("a",A,[p(o,{icon:"fas fa-boxes-stacked"}),n[44]||(n[44]=a("goroutine safe"))]),n[48]||(n[48]=a("하여 singleton으로 사용해도 무방하다는 내용을 찾을 수 있었습니다."))]),s("details",G,[s("summary",null,[n[49]||(n[49]=a("mongo/collection.go ")),p(o,{icon:"fa-brands fa-golang"})]),n[50]||(n[50]=l(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token comment">// Collection is a handle to a MongoDB collection. It is safe for concurrent use by multiple goroutines.</span></span>
<span class="line"><span class="token keyword">type</span> Collection <span class="token keyword">struct</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))]),n[70]||(n[70]=l(`<p>그래서 V2에서는 <code>Collection</code> 객체는 singleton으로 사용하기로 하고, <code>Collection</code> 객체에 디코딩할 때 사용할 <code>struct</code> 타입을 Generic 타입으로 받아, 앞에서 언급한 디코딩 함수에 넘기도록 했습니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">package</span> mongo</span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Collection<span class="token punctuation">[</span>T any<span class="token punctuation">]</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Collection</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> MakeCollection<span class="token punctuation">[</span>T any<span class="token punctuation">]</span><span class="token punctuation">(</span>mongoManager <span class="token operator">*</span>MongoDBClient<span class="token punctuation">,</span> databaseName<span class="token punctuation">,</span> collectionName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Collection<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token punctuation">{</span>  </span>
<span class="line">    collection <span class="token operator">:=</span> mongoManager<span class="token punctuation">.</span><span class="token function">GetCollection</span><span class="token punctuation">(</span>databaseName<span class="token punctuation">,</span> collectionName<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Collection<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">{</span>Collection<span class="token punctuation">:</span> collection<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="slow-쿼리-로깅" tabindex="-1"><a class="header-anchor" href="#slow-쿼리-로깅"><span>slow 쿼리 로깅</span></a></h3><p>이전에 생성한 <code>Collection</code> 객체의 메서드로 각 쿼리 함수를 래핑하여, 여기에 slow 쿼리 로깅을 할 수 있도록 했습니다(이해를 돕기 위해 따로 함수 추출은 하지 않음).</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">const</span> slowQueryLimit <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second <span class="token comment">// slow 쿼리 기준 값</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>col <span class="token operator">*</span>Collection<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">findAll</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> filter <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>options<span class="token punctuation">.</span>FindOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>mongo<span class="token punctuation">.</span>Cursor<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    startTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    cursor<span class="token punctuation">,</span> err <span class="token operator">:=</span> col<span class="token punctuation">.</span>Collection<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// slow 쿼리 로깅</span></span>
<span class="line">    <span class="token keyword">if</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span> <span class="token operator">&gt;</span> slowQueryLimit <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;%s, filter: %+v&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;findAll&quot;</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> singleResult</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="시간-초과-처리" tabindex="-1"><a class="header-anchor" href="#시간-초과-처리"><span>시간 초과 처리</span></a></h3><p>또한, DB 응답이 없으면 시간 초과 error를 내면서 함수를 종료하도록 해야 했습니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">const</span> timeoutLimit <span class="token operator">=</span> <span class="token number">15</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second <span class="token comment">// 시간 초과 기준 값</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>col <span class="token operator">*</span>Collection<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">FindAll</span><span class="token punctuation">(</span>filter <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>options<span class="token punctuation">.</span>FindOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    ctx<span class="token punctuation">,</span> ctxCancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeoutLimit<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> <span class="token function">ctxCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    cursor<span class="token punctuation">,</span> err <span class="token operator">:=</span> col<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)),s("p",null,[n[53]||(n[53]=a("Golang의 내장 라이브러리인 ")),n[54]||(n[54]=s("code",null,"context",-1)),n[55]||(n[55]=a("를 활용하여 , 기준 시간 동안 ")),n[56]||(n[56]=s("code",null,"findAll",-1)),n[57]||(n[57]=a("의 결과가 없으면 ")),n[58]||(n[58]=s("code",null,"err",-1)),n[59]||(n[59]=a(" 변수에 ")),n[60]||(n[60]=s("code",null,"context Deadline exceed",-1)),n[61]||(n[61]=a("라는 error가 나오도록 했습니다(")),s("a",I,[p(o,{icon:"iconfont icon-mongodb"}),n[51]||(n[51]=a("MongoDB Golang 클라이언트 설정"))]),n[62]||(n[62]=a("으로 글로벌하게 설정할 수도 있습니다). 시간 초과 설정에 대한 더 자세한 내용은 ")),s("a",q,[p(o,{icon:"iconfont icon-mongodb"}),n[52]||(n[52]=a("MongoDB Go Driver 문서"))]),n[63]||(n[63]=a("를 참고하시기 바랍니다."))]),n[71]||(n[71]=l(`<h3 id="디코딩-및-error-타입-생성" tabindex="-1"><a class="header-anchor" href="#디코딩-및-error-타입-생성"><span>디코딩 및 error 타입 생성</span></a></h3><p>모든 error에 대한 정의는 끝났으니, 이제는 error 타입을 매핑해야 했습니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token function">ParseAndReturnDBError</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> collection <span class="token builtin">string</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> update<span class="token punctuation">,</span> doc <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> mongo<span class="token punctuation">.</span>ErrNoDocuments<span class="token punctuation">)</span> <span class="token operator">||</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> NotMatchedAnyErr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">NotFoundError</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> update<span class="token punctuation">,</span> doc<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> mongo<span class="token punctuation">.</span><span class="token function">IsDuplicateKeyError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">DuplicatedKeyError</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> update<span class="token punctuation">,</span> doc<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> mongo<span class="token punctuation">.</span><span class="token function">IsTimeout</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">||</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> context<span class="token punctuation">.</span>DeadlineExceeded<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">TimeoutError</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> update<span class="token punctuation">,</span> doc<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">InternalError</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> update<span class="token punctuation">,</span> doc<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>err</code> 변수를 받아서 각각 정의한 error 객체를 매핑하여 반환하도록 함수를 만들고, 다음과 같이 실제 쿼리 결과 함수에 적용했습니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>col <span class="token operator">*</span>Collection<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">FindAll</span><span class="token punctuation">(</span>filter <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>options<span class="token punctuation">.</span>FindOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    ctx<span class="token punctuation">,</span> ctxCancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeoutLimit<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> <span class="token function">ctxCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    cursor<span class="token punctuation">,</span> err1 <span class="token operator">:=</span> col<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token function">ParseAndReturnDBError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> col<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    resultSlice<span class="token punctuation">,</span> err2 <span class="token operator">:=</span> DecodeCursor<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token function">DecodeError</span><span class="token punctuation">(</span>col<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> resultSlice<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>쿼리 결과에서 나온 <code>err1</code> 변수에는 쿼리에서 발생한 error가 담기며, 이를 넘겨서 분류에 따른 error가 반환되게 했습니다.</p><p>쿼리에서 발생한 error가 없다면 커서를 받아서 디코딩하고, 디코딩에서 나온 <code>err2</code>는 <code>DecodeError</code>로 매핑했습니다. 커서에서 <code>DecodeError</code>는 struct의 타입이 정상적이라면 거의 나오지 않습니다.</p><p>하지만 <code>singleResult</code>에서는 디코딩할 때 총 <strong>3가지 error를 따로 분류</strong>해야 했습니다.</p><ul><li>no document found</li><li>deadline exceed</li><li>duplicated key error(replace, update 등에서 발생)</li></ul><p>위 error는 따로 처리하여 <code>DecodeError</code>로 분류되지 않도록 했습니다.</p><details class="hint-container details"><summary>적용 코드</summary><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>col <span class="token operator">*</span>Collection<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">FindOneAndModify</span><span class="token punctuation">(</span>filter <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> update <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>options<span class="token punctuation">.</span>FindOneAndUpdateOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line">    singleResult <span class="token operator">:=</span> col<span class="token punctuation">.</span><span class="token function">findOneAndModify</span><span class="token punctuation">(</span>commonHead<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> update<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    doc<span class="token punctuation">,</span> err <span class="token operator">:=</span> EvaluateAndDecodeSingleResult<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span>singleResult<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>mongo<span class="token punctuation">.</span>ErrNoDocuments<span class="token punctuation">)</span> <span class="token operator">||</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> context<span class="token punctuation">.</span>DeadlineExceeded<span class="token punctuation">)</span> <span class="token operator">||</span> mongo<span class="token punctuation">.</span><span class="token function">IsDuplicateKeyError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errorType<span class="token punctuation">.</span><span class="token function">ParseAndReturnDBError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> col<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errorType<span class="token punctuation">.</span><span class="token function">DecodeError</span><span class="token punctuation">(</span>col<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> doc<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>대부분의 DB CRUD에서의 시간 초과, slow 쿼리 로깅, error 분류까지 모두 마쳤지만, 한 가지 남은 고민이 있었습니다.</p><h3 id="error-분류에-대한-고민" tabindex="-1"><a class="header-anchor" href="#error-분류에-대한-고민"><span>error 분류에 대한 고민</span></a></h3><p>update, delete의 결과 <code>MatchedCount</code>/<code>ModifiedCount</code> 값이 <strong>0이면 error로 봐야하는지</strong> 고민해볼 필요가 있었습니다.</p><p>멱등성 관점에서는 다음과 같이 볼 수 있습니다.</p><ul><li>delete의 경우, 지우려는 대상이 없다는 것은(<code>MatchedCount == 0</code>) <strong>해당 값이 DB에 없는 정상적인 상황</strong>이다.</li><li>update의 경우, 수정된 대상이 없다는 것은(<code>MatchedCount ≠ 0 &amp; ModifiedCount == 0</code>) <strong>해당 값이 이미 update 요청한 값</strong>이다.</li></ul><p>하지만 비즈니스 로직마다 관점이 다르므로, 멱등성 관점만 고려하여 error로 보지 않기는 어려울 것 같았습니다.</p><p>그래서 팀 내 리뷰 시간에 이와 같은 고민을 나눴고, 다음과 같은 이유로 <strong><code>not matched</code>는 <code>not found</code>로 남겨두고, <code>not modified</code>는 error는 보지 않기로 결론</strong> 내렸습니다.</p><ul><li><code>not matched</code>의 경우, 대부분의 <strong>사용자(개발자)는 update/delete 쿼리를 사용할 때 해당 값이 있는 것을 기대하고 사용</strong>하기 때문에, <strong><code>not found</code>에 대한 error 처리가 필요</strong>할 수도 있다(삭제된 개수가 0인 경우도 <code>not found</code>로 간주).</li><li><code>not modified</code>의 경우, <strong>이미 해당 값으로 db에 저장되어 있다</strong>는 것이기 때문에, <strong>사용자의 기대 혹은 의도와 일치</strong>하므로 error 처리가 필요하지 않다.</li></ul><details class="hint-container details"><summary>반영된 코드</summary><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">var</span> NotMatchedAnyErr <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;no documents have been matched&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>col <span class="token operator">*</span>Collection<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">UpdateOne</span><span class="token punctuation">(</span>filter <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> update <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>options<span class="token punctuation">.</span>UpdateOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>mongo<span class="token punctuation">.</span>UpdateResult<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line">    updateResult<span class="token punctuation">,</span> err <span class="token operator">:=</span> col<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> update<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errorType<span class="token punctuation">.</span><span class="token function">ParseAndReturnDBError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> col<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> update<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> updateResult<span class="token punctuation">.</span>MatchedCount <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;</span> updateResult<span class="token punctuation">.</span>UpsertedCount <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> updateResult<span class="token punctuation">,</span> errorType<span class="token punctuation">.</span><span class="token function">ParseAndReturnDBError</span><span class="token punctuation">(</span>errorType<span class="token punctuation">.</span>NotMatchedAnyErr<span class="token punctuation">,</span> col<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> update<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> updateResult<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>col <span class="token operator">*</span>Collection<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">DeleteOne</span><span class="token punctuation">(</span>filter <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>options<span class="token punctuation">.</span>DeleteOptions<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>mongo<span class="token punctuation">.</span>DeleteResult<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line">    deleteResult<span class="token punctuation">,</span> err <span class="token operator">:=</span> col<span class="token punctuation">.</span><span class="token function">deleteOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errorType<span class="token punctuation">.</span><span class="token function">ParseAndReturnDBError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> col<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> deleteResult<span class="token punctuation">.</span>DeletedCount <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> deleteResult<span class="token punctuation">,</span> errorType<span class="token punctuation">.</span><span class="token function">ParseAndReturnDBError</span><span class="token punctuation">(</span>errorType<span class="token punctuation">.</span>NotMatchedAnyErr<span class="token punctuation">,</span> col<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> deleteResult<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>여기서 조심해야 하는 부분은, update에서 <strong>upsert가 수행된 경우에는 MatchedCount가 0</strong>이 된다는 것입니다. 이때 <code>UpsertedCount</code>는 양수인데 이 값까지 확인하지 않으면 not found error로 분류될 수 있으므로 주의가 필요합니다.</p><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>로그는 어디서 남겨야 하는가, 어느 레벨로 남겨야 하는가 하는 고민에서 시작된, 가장 하위 레이어인 DB 레이어를 개편한 과정이었습니다.</p><p>결국 위에 대한 고민에 대한 답은, 여기서는 판단이 불가하기 때문에 &#39;<strong>DB 레이어에서는 로그를 남기지 않는다</strong>&#39;입니다. 대신 다음과 같은 장치를 마련하여, 로그를 남기지 않더라도 충분한 기능을 제공하도록 했습니다.</p><ul><li>DB 레이어에서는 로그를 남기지 않고 DB 쿼리 실행 정보와 error를 래핑하여 반환한다.</li><li><code>error</code> 값이 <code>nil</code>이면, 반환되는 값(document)은 <code>nil</code>이 아니며 쿼리 성공을 보장한다.</li><li>DB 레이어 내부에서 정의한 error를 처리하고 로그 레벨을 판단해 로그를 남길 수 있도록 error 타입을 정의하고 판별 함수를 제공한다.</li></ul><p>그리고 <strong>각 서버마다 구현했던 다음과 같은 부분을 공통 저장소로 옮겨 일관되게 로직을 수행하고 error를 분류</strong>하게 했습니다.</p><ul><li>collection 객체 singleton 유지</li><li>slow 쿼리 로깅</li><li>시간 초과 처리</li><li>singleResult, Cursor 등 디코딩</li></ul><figure><img src="`+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>그 결과 V2 코드는 다음과 같이 줄어들었습니다.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go"><pre><code class="language-go"><span class="line"><span class="token keyword">type</span> MyCollectionManager <span class="token keyword">struct</span> <span class="token punctuation">{</span>  </span>
<span class="line">    collection <span class="token operator">*</span>commonMongoDB<span class="token punctuation">.</span>Collection<span class="token punctuation">[</span>MyDocument<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">MyCollection</span><span class="token punctuation">(</span>client <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Client<span class="token punctuation">)</span> <span class="token operator">*</span>MyCollectionManager <span class="token punctuation">{</span>  </span>
<span class="line">    manager <span class="token operator">:=</span> <span class="token operator">&amp;</span>MyCollectionManager<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    dbConfig <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">GetDatabaseConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    manager<span class="token punctuation">.</span>collection <span class="token operator">=</span> commonMongoDB<span class="token punctuation">.</span>MakeCollection<span class="token punctuation">[</span>MyDocument<span class="token punctuation">]</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> dbConfig<span class="token punctuation">.</span>DatabaseName<span class="token punctuation">,</span> <span class="token string">&quot;myCollection&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> manager</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>manager <span class="token operator">*</span>MyCollectionManager<span class="token punctuation">)</span> <span class="token function">GetDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>MyDocument<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    doc<span class="token punctuation">,</span> err <span class="token operator">:=</span> manager<span class="token punctuation">.</span>collection<span class="token punctuation">.</span><span class="token function">FindOne</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>filter<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> doc<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다음 글에서는 여기서 발생한 error를 상위에 어떻게 전달할 수 있을지에 대한 고민을 이야기해보려 합니다.</p><hr><h2 id="참고" tabindex="-1"><a class="header-anchor" href="#참고"><span>참고</span></a></h2><p>slow 쿼리 로깅과 같은 부분은 monitor 혹은 logger를 이용하면 좀 더 정확하고 실제 MongoDB raw query를 받아 볼 수도 있으니, 관심이 있다면 참고하시기 바랍니다.</p>`,35)),p(i,u(r({title:"title",desc:"desc",link:"https://pkg.go.dev/go.mongodb.org/mongo-driver/event",logo:"logo",background:"rgba(r,g,b,0.2)"})),null,16),p(i,u(r({title:"title",desc:"desc",link:"https://www.mongodb.com/docs/drivers/go/current/fundamentals/logging/",logo:"logo",background:"rgba(r,g,b,0.2)"})),null,16)])}const F=b(D,[["render",S]]),j=JSON.parse('{"path":"/d2.naver.com/6178029.html","title":"Golang, 그대들은 어떻게 할 것인가 - 2. MongoDB Go Driver 추상화","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Golang, 그대들은 어떻게 할 것인가 - 2. MongoDB Go Driver 추상화","description":"Article(s) > Golang, 그대들은 어떻게 할 것인가 - 2. MongoDB Go Driver 추상화","icon":"fa-brands fa-golang","category":["Go","MongoDB","Article(s)"],"tag":["blog","d2.naver.com","go","golang","mongodb"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Golang, 그대들은 어떻게 할 것인가 - 2. MongoDB Go Driver 추상화\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/6178029/1.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/6178029/2.png\\"],\\"datePublished\\":\\"2024-03-27T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/d2.naver.com/6178029.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Golang, 그대들은 어떻게 할 것인가 - 2. MongoDB Go Driver 추상화"}],["meta",{"property":"og:description","content":"Article(s) > Golang, 그대들은 어떻게 할 것인가 - 2. MongoDB Go Driver 추상화"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/6178029/banner.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/6178029/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Golang, 그대들은 어떻게 할 것인가 - 2. MongoDB Go Driver 추상화"}],["meta",{"property":"article:tag","content":"mongodb"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:tag","content":"d2.naver.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-03-27T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Golang, 그대들은 어떻게 할 것인가 - 2. MongoDB Go Driver 추상화"},{"property":"og:description","content":"Golang, 그대들은 어떻게 할 것인가 - 2. MongoDB Go Driver 추상화"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/d2.naver.com/6178029.html"}]],"prev":"/programming/go/articles/README.md","date":"2024-03-27T00:00:00.000Z","isOriginal":false,"cover":"/assets/image/d2.naver.com/6178029/banner.png"},"git":{},"readingTime":{"minutes":7.46,"words":2237},"filePathRelative":"d2.naver.com/6178029.md"}');export{F as comp,j as data};
