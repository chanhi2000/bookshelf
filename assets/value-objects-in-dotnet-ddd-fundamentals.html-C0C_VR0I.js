import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as e,b as i,t as b,n as y,g,w as t,e as a,r as o,o as w}from"./app-BVguHYKu.js";const h={},f={id:"frontmatter-title-관련",tabindex:"-1"},j={class:"header-anchor",href:"#frontmatter-title-관련"},V={class:"table-of-contents"},C={href:"http://amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215",target:"_blank",rel:"noopener noreferrer"},O={href:"https://refactoring.guru/smells/primitive-obsession",target:"_blank",rel:"noopener noreferrer"},D={href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/instance-constructors#primary-constructors",target:"_blank",rel:"noopener noreferrer"},T={href:"https://learn.microsoft.com/en-us/ef/core/modeling/owned-entities",target:"_blank",rel:"noopener noreferrer"},x={href:"https://devblogs.microsoft.com/dotnet/announcing-ef8-rc1/#complex-types-as-value-objects",target:"_blank",rel:"noopener noreferrer"},A={href:"https://learn.microsoft.com/en-us/ef/core/modeling/owned-entities",target:"_blank",rel:"noopener noreferrer"},E={href:"https://devblogs.microsoft.com/dotnet/announcing-ef8-rc1/#complex-types-as-value-objects",target:"_blank",rel:"noopener noreferrer"},q={href:"https://youtu.be/P5CRea21R2E",target:"_blank",rel:"noopener noreferrer"},S={href:"https://youtu.be/LhCD5CUSP6g",target:"_blank",rel:"noopener noreferrer"};function I(u,n){const r=o("VPCard"),p=o("router-link"),d=o("SiteInfo"),l=o("VPIcon"),k=o("RouteLink"),c=o("VidStack");return w(),v("div",null,[s("h1",f,[s("a",j,[s("span",null,b(u.$frontmatter.title)+" 관련",1)])]),e(r,y(g({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",V,[s("ul",null,[s("li",null,[e(p,{to:"#what-are-value-objects"},{default:t(()=>n[0]||(n[0]=[a("What are Value Objects?")])),_:1,__:[0]})]),s("li",null,[e(p,{to:"#implementing-value-objects"},{default:t(()=>n[1]||(n[1]=[a("Implementing Value Objects")])),_:1,__:[1]}),s("ul",null,[s("li",null,[e(p,{to:"#c-records"},{default:t(()=>n[2]||(n[2]=[a("C# Records")])),_:1,__:[2]})]),s("li",null,[e(p,{to:"#base-class"},{default:t(()=>n[3]||(n[3]=[a("Base Class")])),_:1,__:[3]})])])]),s("li",null,[e(p,{to:"#when-to-use-value-objects"},{default:t(()=>n[4]||(n[4]=[a("When To Use Value Objects?")])),_:1,__:[4]})]),s("li",null,[e(p,{to:"#persisting-value-objects-with-ef-core"},{default:t(()=>n[5]||(n[5]=[a("Persisting Value Objects With EF Core")])),_:1,__:[5]}),s("ul",null,[s("li",null,[e(p,{to:"#owned-types"},{default:t(()=>n[6]||(n[6]=[a("Owned Types")])),_:1,__:[6]})]),s("li",null,[e(p,{to:"#complex-types"},{default:t(()=>n[7]||(n[7]=[a("Complex Types")])),_:1,__:[7]})])])]),s("li",null,[e(p,{to:"#takeaway"},{default:t(()=>n[8]||(n[8]=[a("Takeaway")])),_:1,__:[8]})])])]),n[44]||(n[44]=s("hr",null,null,-1)),e(d,{name:"Value Objects in .NET (DDD Fundamentals)",desc:"Value Objects are one of the building blocks of Domain-Driven Design. Today, I'll show you some best practices for implementing Value Objects.",url:"https://milanjovanovic.tech/blog/value-objects-in-dotnet-ddd-fundamentals/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_069.png"}),n[45]||(n[45]=s("p",null,[s("strong",null,"Value Objects"),a(" are one of the building blocks of Domain-Driven Design. DDD is a software development approach for solving problems in complex domains.")],-1)),n[46]||(n[46]=s("p",null,"Value objects encapsulate a set of primitive values and related invariants. A few examples of value objects are money and date range objects. Money consists of an amount and currency. A date range consists of start and end dates.",-1)),n[47]||(n[47]=s("p",null,"Today, I'll show you some best practices for implementing Value Objects.",-1)),n[48]||(n[48]=s("hr",null,null,-1)),n[49]||(n[49]=s("h2",{id:"what-are-value-objects",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#what-are-value-objects"},[s("span",null,"What are Value Objects?")])],-1)),n[50]||(n[50]=s("p",null,"Let's start with the definition from the Domain-Driven Design book:",-1)),s("blockquote",null,[n[10]||(n[10]=s("p",null,"An object that represents a descriptive aspect of the domain with no conceptual identity is called a Value Object. Value Objects are instantiated to represent elements of the design that we care about only for what they are, not who or which they are.",-1)),s("blockquote",null,[s("p",null,[s("em",null,[s("a",C,[e(l,{icon:"fa-brands fa-amazon"}),n[9]||(n[9]=a("Eric Evans"))])])])])]),s("p",null,[n[12]||(n[12]=a("Value objects are different from entities - they don't have a concept of identity. They encapsulate primitive types in the domain and solve ")),s("a",O,[e(l,{icon:"fas fa-globe"}),n[11]||(n[11]=a("primitive obsession."))])]),n[51]||(n[51]=i(`<p>There are two main qualities of Value Objects:</p><ul><li>They are immutable</li><li>They have no identity</li></ul><p>Another quality of value objects is structural equality. Two value objects are equal if their values are the same. This quality is the least important in practice. However, there are cases where you want only some values to determine equality.</p><hr><h2 id="implementing-value-objects" tabindex="-1"><a class="header-anchor" href="#implementing-value-objects"><span>Implementing Value Objects</span></a></h2><p>The most important quality of value objects is immutability. The values of a value object can&#39;t change once an object is created. If you want to change an individual value, you need to replace the entire value object.</p><p>Here&#39;s a <code>Booking</code> entity with primitive values representing an address and the start and end dates of the booking.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Booking</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Street <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> City <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> State <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Country <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ZipCode <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">DateOnly</span> StartDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">DateOnly</span> EndDate <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can replace these primitive values with <code>Address</code> and <code>DateRange</code> value objects.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Booking</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Address</span> Address <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">DateRange</span> Period <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But how do you implement value objects?</p><h3 id="c-records" tabindex="-1"><a class="header-anchor" href="#c-records"><span>C# Records</span></a></h3>`,12)),s("p",null,[n[14]||(n[14]=a("You can use C# ")),e(k,{to:"/milanjovanovic.tech/records-anonymous-types-non-destructive-mutation.html"},{default:t(()=>n[13]||(n[13]=[a("records")])),_:1,__:[13]}),n[15]||(n[15]=a(" to represent value objects. Records are immutable by design, and they have structural equality. We want both of these qualities for our value objects."))]),s("p",null,[n[17]||(n[17]=a("For example, you can represent an ")),n[18]||(n[18]=s("code",null,"Address",-1)),n[19]||(n[19]=a(" value object using a ")),n[20]||(n[20]=s("code",null,"record",-1)),n[21]||(n[21]=a(" with a ")),s("a",D,[e(l,{icon:"fa-brands fa-microsoft"}),n[16]||(n[16]=a("primary constructor"))]),n[22]||(n[22]=a(". The advantage of this approach is conciseness."))]),n[52]||(n[52]=i(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Address</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> Street<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> City<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> State<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> Country<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> ZipCode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, you lose this advantage when defining a private constructor. This will happen when you want to enforce invariants while creating the value object. Another issue with using records is avoiding value object invariants using the <code>with</code> expression.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Address</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token function">Address</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> street<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> city<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> state<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> country<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> zipCode<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Street <span class="token operator">=</span> street<span class="token punctuation">;</span></span>
<span class="line">        City <span class="token operator">=</span> city<span class="token punctuation">;</span></span>
<span class="line">        State <span class="token operator">=</span> state<span class="token punctuation">;</span></span>
<span class="line">        Country <span class="token operator">=</span> country<span class="token punctuation">;</span></span>
<span class="line">        ZipCode <span class="token operator">=</span> zipCode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Street <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> City <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> State <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Country <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ZipCode <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Result<span class="token punctuation">&lt;</span>Address<span class="token punctuation">&gt;</span></span> <span class="token function">Create</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> street<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> city<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> state<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> country<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> zipCode<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Check if the address is valid</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Address</span><span class="token punctuation">(</span>street<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> country<span class="token punctuation">,</span> zipCode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="base-class" tabindex="-1"><a class="header-anchor" href="#base-class"><span>Base Class</span></a></h3><p>The alternative way to implement value objects is with a <code>ValueObject</code> base class. The base class handles structural equality with the <code>GetAtomicValues</code> abstract method. <code>ValueObject</code> implementations have to implement this method and define the equality components.</p><p>The advantage of using a <code>ValueObject</code> base class is that it&#39;s explicit. It&#39;s clear which classes in your domain represent value objects. Another advantage is being able to control the equality components.</p><p>Here&#39;s a <code>ValueObject</code> base class I use in my projects:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ValueObject</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEquatable<span class="token punctuation">&lt;</span>ValueObject<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token class-name">ValueObject<span class="token punctuation">?</span></span> a<span class="token punctuation">,</span> <span class="token class-name">ValueObject<span class="token punctuation">?</span></span> b<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">is</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> b <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">is</span> <span class="token keyword">null</span> <span class="token operator">||</span> b <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">!=</span><span class="token punctuation">(</span><span class="token class-name">ValueObject<span class="token punctuation">?</span></span> a<span class="token punctuation">,</span> <span class="token class-name">ValueObject<span class="token punctuation">?</span></span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token operator">!</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name">ValueObject<span class="token punctuation">?</span></span> other<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        other <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ValuesAreEqual</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Equals</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">?</span></span> obj<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        obj <span class="token keyword">is</span> <span class="token class-name">ValueObject</span> valueObject <span class="token operator">&amp;&amp;</span> <span class="token function">ValuesAreEqual</span><span class="token punctuation">(</span>valueObject<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token function">GetAtomicValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Aggregate</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">(</span>hashcode<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">                HashCode<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>hashcode<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetAtomicValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ValuesAreEqual</span><span class="token punctuation">(</span><span class="token class-name">ValueObject</span> valueObject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token function">GetAtomicValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SequenceEqual</span><span class="token punctuation">(</span>valueObject<span class="token punctuation">.</span><span class="token function">GetAtomicValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>Address</code> value object implementation would look like this:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ValueObject</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Street <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> City <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> State <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Country <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ZipCode <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetAtomicValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token keyword">return</span> Street<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token keyword">return</span> City<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token keyword">return</span> State<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token keyword">return</span> Country<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token keyword">return</span> ZipCode<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="when-to-use-value-objects" tabindex="-1"><a class="header-anchor" href="#when-to-use-value-objects"><span>When To Use Value Objects?</span></a></h2><p>I use value objects to solve primitive obsession and encapsulate domain invariants. Encapsulation is an important aspect of any domain model. You shouldn&#39;t be able to create a value object in an invalid state.</p><p>Value objects also give you type safety. Take a look at this method signature:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPricingService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">decimal</span></span> <span class="token function">Calculate</span><span class="token punctuation">(</span><span class="token class-name">Apartment</span> apartment<span class="token punctuation">,</span> <span class="token class-name">DateOnly</span> start<span class="token punctuation">,</span> <span class="token class-name">DateOnly</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, compare it to this method signature, where we added value objects. You can see how the <code>IPricingService</code> with value objects is much more explicit. You also get the benefit of type safety. When compiling the code, value objects reduce the chance of errors creeping in.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPricingService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">PricingDetails</span> <span class="token function">Calculate</span><span class="token punctuation">(</span><span class="token class-name">Apartment</span> apartment<span class="token punctuation">,</span> <span class="token class-name">DateRange</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here are a few more things you should consider to decide if you need value objects:</p><ul><li><strong>Complexity of invariants</strong>: If enforcing complex invariants, consider using value objects</li><li><strong>Number of primitives</strong>: Value objects make sense when encapsulating many primitive values</li><li><strong>Number of duplications</strong>: If you need to enforce invariants only in a few places in the code, you can manage without value objects</li></ul><hr><h2 id="persisting-value-objects-with-ef-core" tabindex="-1"><a class="header-anchor" href="#persisting-value-objects-with-ef-core"><span>Persisting Value Objects With EF Core</span></a></h2><p>Value objects are part of domain entities, and you need to save them in the database.</p>`,22)),s("p",null,[n[25]||(n[25]=a("I'll show you how to use EF ")),s("a",T,[e(l,{icon:"fa-brands fa-microsoft"}),n[23]||(n[23]=a("Owned Types"))]),n[26]||(n[26]=a(" and ")),s("a",x,[e(l,{icon:"fa-brands fa-microsoft"}),n[24]||(n[24]=a("Complex Types"))]),n[27]||(n[27]=a(" to persist value objects."))]),n[53]||(n[53]=s("h3",{id:"owned-types",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#owned-types"},[s("span",null,"Owned Types")])],-1)),s("p",null,[s("a",A,[e(l,{icon:"fa-brands fa-microsoft"}),n[28]||(n[28]=a("Owned Types"))]),n[29]||(n[29]=a(" can be configured by calling the ")),n[30]||(n[30]=s("code",null,"OwnsOne",-1)),n[31]||(n[31]=a(" method when configuring the entity. This tells EF to persist the ")),n[32]||(n[32]=s("code",null,"Address",-1)),n[33]||(n[33]=a(" and ")),n[34]||(n[34]=s("code",null,"Price",-1)),n[35]||(n[35]=a(" value objects to the same table as the ")),n[36]||(n[36]=s("code",null,"Apartment",-1)),n[37]||(n[37]=a(" entity. The value objects are represented with additional columns in the ")),n[38]||(n[38]=s("code",null,"apartments",-1)),n[39]||(n[39]=a(" table."))]),n[54]||(n[54]=i(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">EntityTypeBuilder<span class="token punctuation">&lt;</span>Apartment<span class="token punctuation">&gt;</span></span> builder<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    builder<span class="token punctuation">.</span><span class="token function">ToTable</span><span class="token punctuation">(</span><span class="token string">&quot;apartments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    builder<span class="token punctuation">.</span><span class="token function">OwnsOne</span><span class="token punctuation">(</span>property <span class="token operator">=&gt;</span> property<span class="token punctuation">.</span>Address<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    builder<span class="token punctuation">.</span><span class="token function">OwnsOne</span><span class="token punctuation">(</span>property <span class="token operator">=&gt;</span> property<span class="token punctuation">.</span>Price<span class="token punctuation">,</span> priceBuilder <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        priceBuilder<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>money <span class="token operator">=&gt;</span> money<span class="token punctuation">.</span>Currency<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">HasConversion</span><span class="token punctuation">(</span></span>
<span class="line">                currency <span class="token operator">=&gt;</span> currency<span class="token punctuation">.</span>Code<span class="token punctuation">,</span></span>
<span class="line">                code <span class="token operator">=&gt;</span> Currency<span class="token punctuation">.</span><span class="token function">FromCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A few more remarks about owned types:</p><ul><li>Owned types have a hidden key value</li><li>No support for optional (nullable) owned types</li><li>Owned collections are supported with <code>OwnsMany</code></li><li>Table splitting allows you to persist owned types separately</li></ul><h3 id="complex-types" tabindex="-1"><a class="header-anchor" href="#complex-types"><span>Complex Types</span></a></h3>`,4)),s("p",null,[s("a",E,[e(l,{icon:"fa-brands fa-microsoft"}),n[40]||(n[40]=a("Complex Types"))]),n[41]||(n[41]=a(" are a new EF feature available in .NET 8. They aren't identified or tracked by a key value. Complex types have to be part of an entity type."))]),n[55]||(n[55]=i(`<p>Complex types are more appropriate for representing value objects with EF.</p><p>Here&#39;s how you can configure an <code>Address</code> value object as a complex type:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">EntityTypeBuilder<span class="token punctuation">&lt;</span>Apartment<span class="token punctuation">&gt;</span></span> builder<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    builder<span class="token punctuation">.</span><span class="token function">ToTable</span><span class="token punctuation">(</span><span class="token string">&quot;apartments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    builder<span class="token punctuation">.</span><span class="token function">ComplexProperty</span><span class="token punctuation">(</span>property <span class="token operator">=&gt;</span> property<span class="token punctuation">.</span>Address<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A few limitations for complex types:</p><ul><li>No support for collections</li><li>No support for nullable values</li></ul><hr><h2 id="takeaway" tabindex="-1"><a class="header-anchor" href="#takeaway"><span>Takeaway</span></a></h2><p>Value objects help design a rich domain model. You can use them to solve primitive obsession and encapsulate domain invariants. Value objects can reduce errors by preventing the instantiation of invalid domain objects.</p><p>You can use a <code>record</code> or <code>ValueObject</code> base class to represent value objects. This should depend on your specific requirements and the complexity of your domain. I use records by default unless I need some qualities of a <code>ValueObject</code> base class. For example, a base class is practical when you want to control equality components.</p><p>More learning material about value objects:</p>`,10)),s("ul",null,[s("li",null,[s("a",q,[e(l,{icon:"fa-brands fa-youtube"}),n[42]||(n[42]=a("Solving primitive obsession with value objects"))])]),s("li",null,[s("a",S,[e(l,{icon:"fa-brands fa-youtube"}),n[43]||(n[43]=a("Using EF 8 Complex types for value objects"))])])]),n[56]||(n[56]=s("p",null,"Hope this was helpful.",-1)),n[57]||(n[57]=s("p",null,"See you next week.",-1)),e(c,{src:"youtube/P5CRea21R2E"}),e(c,{src:"youtube/LhCD5CUSP6g"})])}const F=m(h,[["render",I]]),R=JSON.parse('{"path":"/milanjovanovic.tech/value-objects-in-dotnet-ddd-fundamentals.html","title":"Value Objects in .NET (DDD Fundamentals)","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Value Objects in .NET (DDD Fundamentals)","description":"Article(s) > Value Objects in .NET (DDD Fundamentals)","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Value Objects in .NET (DDD Fundamentals)\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_069.png\\"],\\"datePublished\\":\\"2023-12-23T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/value-objects-in-dotnet-ddd-fundamentals.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Value Objects in .NET (DDD Fundamentals)"}],["meta",{"property":"og:description","content":"Article(s) > Value Objects in .NET (DDD Fundamentals)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_069.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_069.png"}],["meta",{"name":"twitter:image:alt","content":"Value Objects in .NET (DDD Fundamentals)"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-12-23T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Value Objects in .NET (DDD Fundamentals)"},{"property":"og:description","content":"Value Objects in .NET (DDD Fundamentals)"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/value-objects-in-dotnet-ddd-fundamentals.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-12-23T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_069.png"},"git":{},"readingTime":{"minutes":5.32,"words":1597},"filePathRelative":"milanjovanovic.tech/value-objects-in-dotnet-ddd-fundamentals.md","copyright":{"author":"Milan Jovanović"}}');export{F as comp,R as data};
