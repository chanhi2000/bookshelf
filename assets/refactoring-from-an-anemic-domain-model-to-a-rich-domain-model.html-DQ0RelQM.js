import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as s,f as a,b as d,t as k,n as m,g as v,w as t,r as i,o as h,e as p}from"./app-BVguHYKu.js";const g={},b={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"};function f(o,n){const l=i("VPCard"),e=i("router-link"),c=i("SiteInfo");return h(),r("div",null,[s("h1",b,[s("a",y,[s("span",null,k(o.$frontmatter.title)+" 관련",1)])]),a(l,m(v({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",w,[s("ul",null,[s("li",null,[a(e,{to:"#working-with-anemic-domain-model"},{default:t(()=>n[0]||(n[0]=[p("Working With Anemic Domain Model")])),_:1,__:[0]})]),s("li",null,[a(e,{to:"#moving-business-logic-into-the-domain"},{default:t(()=>n[1]||(n[1]=[p("Moving Business Logic Into The Domain")])),_:1,__:[1]})]),s("li",null,[a(e,{to:"#moving-validation-rules-into-the-domain"},{default:t(()=>n[2]||(n[2]=[p("Moving Validation Rules Into The Domain")])),_:1,__:[2]})]),s("li",null,[a(e,{to:"#expressing-side-effects-with-domain-events"},{default:t(()=>n[3]||(n[3]=[p("Expressing Side Effects With Domain Events")])),_:1,__:[3]})]),s("li",null,[a(e,{to:"#takeaway"},{default:t(()=>n[4]||(n[4]=[p("Takeaway")])),_:1,__:[4]})])])]),n[5]||(n[5]=s("hr",null,null,-1)),a(c,{name:"Refactoring From an Anemic Domain Model To a Rich Domain Model",desc:"Today's modern applications must deliver the latest information without Is the Anemic domain model an antipattern? It's a domain model without any behavior and only data properties. Anemic domain models work great in simple applications, but they are difficult to maintain and evolve if you have rich business logic. The important parts of your business logic and rules end up being scattered all over the application. It reduces cohesiveness and reusability, and makes adding new features more difficult. Rich domain model attempts to solve this by encapsulating as much of the business logic as possible. This is a never-ending process of moving business logic into the domain and refining your domain model.",url:"https://milanjovanovic.tech/blog/refactoring-from-an-anemic-domain-model-to-a-rich-domain-model/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_042.png"}),n[6]||(n[6]=d(`<p>Is the <strong>anemic domain model</strong> an <strong>antipattern</strong>?</p><p>It&#39;s a domain model without any behavior and only data properties.</p><p>Anemic domain models work great in simple applications, but they are difficult to maintain and evolve if you have rich business logic.</p><p>The important parts of your business logic and rules end up being scattered all over the application. It reduces cohesiveness and reusability, and makes adding new features more difficult.</p><p><strong>Rich domain model</strong> attempts to solve this by encapsulating as much of the business logic as possible.</p><p>But how can you design a <strong>rich domain model</strong>?</p><p>This is a never-ending process of moving business logic into the domain and refining your domain model.</p><p>Let&#39;s see how to <strong>refactor</strong> from an <strong>anemic domain model</strong> to a <strong>rich domain model</strong>.</p><hr><h2 id="working-with-anemic-domain-model" tabindex="-1"><a class="header-anchor" href="#working-with-anemic-domain-model"><span>Working With Anemic Domain Model</span></a></h2><p>To understand what working with an <strong>anemic domain model</strong> looks like, I&#39;ll use an example of handling a <code>SendInvitationCommand</code>.</p><p>I omitted the class and its dependencies so that we can focus on the <code>Handle</code> method. It loads some entities from the database, performs validation, executes the business logic, and finally persists the changes in the database and sends an email.</p><p>It already implements some good practices like using repositories and returning result objects.</p><p>However, it&#39;s working with an <strong>anemic domain model</strong>.</p><p>A few things indicating this:</p><ul><li>Parameterless constructors</li><li>Public property setters</li><li>Exposed collections</li></ul><p>In other words - the classes representing domain entities contain only data properties and no behavior.</p><p>The <strong>problems</strong> of an <strong>anemic domain model</strong> are:</p><ul><li>Discoverability of operations</li><li>Potential code duplication</li><li>Lack of encapsulation</li></ul><p>We&#39;ll apply a few techniques to push logic down into the domain, and try to make the model more domain-driven. I hope you&#39;ll be able to see the value and benefits this will bring.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Result<span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">SendInvitationCommand</span> command<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> member <span class="token operator">=</span> <span class="token keyword">await</span> _memberRepository<span class="token punctuation">.</span><span class="token function">GetByIdAsync</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>MemberId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> gathering <span class="token operator">=</span> <span class="token keyword">await</span> _gatheringRepository<span class="token punctuation">.</span><span class="token function">GetByIdAsync</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>GatheringId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>member <span class="token keyword">is</span> <span class="token keyword">null</span> <span class="token operator">||</span> gathering <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Failure</span><span class="token punctuation">(</span>Error<span class="token punctuation">.</span>NullValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>gathering<span class="token punctuation">.</span>Creator<span class="token punctuation">.</span>Id <span class="token operator">==</span> member<span class="token punctuation">.</span>Id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t send invitation to the creator.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>gathering<span class="token punctuation">.</span>ScheduledAtUtc <span class="token operator">&lt;</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t send invitation for the past.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> invitation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Invitation</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Id <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        Member <span class="token operator">=</span> member<span class="token punctuation">,</span></span>
<span class="line">        Gathering <span class="token operator">=</span> gathering<span class="token punctuation">,</span></span>
<span class="line">        Status <span class="token operator">=</span> InvitationStatus<span class="token punctuation">.</span>Pending<span class="token punctuation">,</span></span>
<span class="line">        CreatedOnUtc <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    gathering<span class="token punctuation">.</span>Invitations<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>invitation<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    _invitationRepository<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>invitation<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> _unitOfWork<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> _emailService<span class="token punctuation">.</span><span class="token function">SendInvitationSentEmailAsync</span><span class="token punctuation">(</span>member<span class="token punctuation">,</span> gathering<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="moving-business-logic-into-the-domain" tabindex="-1"><a class="header-anchor" href="#moving-business-logic-into-the-domain"><span>Moving Business Logic Into The Domain</span></a></h2><p>The goal is to move as much of the business logic as possible into the domain.</p><p>Let&#39;s start with the <code>Invitation</code> entity and defining a constructor for it. I can simplify the design by setting the <code>Status</code> and <code>CreatedOnUtc</code> properties inside the constructor. I&#39;m also going to make it <code>internal</code> so that an <code>Invitation</code> instance can only be created within the domain.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Invitation</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">internal</span> <span class="token function">Invitation</span><span class="token punctuation">(</span><span class="token class-name">Guid</span> id<span class="token punctuation">,</span> <span class="token class-name">Gathering</span> gathering<span class="token punctuation">,</span> <span class="token class-name">Member</span> member<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Id <span class="token operator">=</span> id<span class="token punctuation">;</span></span>
<span class="line">        Member <span class="token operator">=</span> member<span class="token punctuation">;</span></span>
<span class="line">        Gathering <span class="token operator">=</span> gathering<span class="token punctuation">;</span></span>
<span class="line">        Status <span class="token operator">=</span> InvitationStatus<span class="token punctuation">.</span>Pending<span class="token punctuation">;</span></span>
<span class="line">        CreatedOnUtc <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Data properties omitted for brevity.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The reason I made the <code>Invitation</code> constructor <code>internal</code> is so that I can introduce a new method on the <code>Gathering</code> entity. Let&#39;s call it <code>SendInvitation</code> and it will be responsible for instantiating a new <code>Invitation</code> instance and adding it to the internal collection.</p><p>Currently, the <code>Gathering.Invitations</code> collection is <code>public</code>, which means anyone can obtain a reference and modify the collection.</p><p>We don&#39;t want to allow this, so what we can do is encapsulate this collection behind a <code>private</code> field. This moves the responsibility for managing the <code>_invitations</code> collection to the <code>Gathering</code> class.</p><p>Here&#39;s how the <code>Gathering</code> class looks like now:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Gathering</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>Invitation<span class="token punctuation">&gt;</span></span> _invitations<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Other members omitted for brevity.</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SendInvitation</span><span class="token punctuation">(</span><span class="token class-name">Member</span> member<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> invitation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Invitation</span><span class="token punctuation">(</span>Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gathering<span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        _invitations<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>invitation<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="moving-validation-rules-into-the-domain" tabindex="-1"><a class="header-anchor" href="#moving-validation-rules-into-the-domain"><span>Moving Validation Rules Into The Domain</span></a></h2><p>The next thing we can do is move the validation rules into the <code>SendInvitation</code> method, further enriching the domain model.</p><p>Unfortunately, this is still a bad practice because of throwing &quot;expected&quot; exceptions when a validation fails. If you want to use exceptions to enforce your validation rules you should at least do it right, and use specific exceptions instead of generic ones.</p><p>But it would be even better to use a <strong>result object</strong> to express validation errors.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Gathering</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Other members omitted for brevity.</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SendInvitation</span><span class="token punctuation">(</span><span class="token class-name">Member</span> member<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>gathering<span class="token punctuation">.</span>Creator<span class="token punctuation">.</span>Id <span class="token operator">==</span> member<span class="token punctuation">.</span>Id<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t send invitation to the creator.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>gathering<span class="token punctuation">.</span>ScheduledAtUtc <span class="token operator">&lt;</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t send invitation for the past.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> invitation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Invitation</span><span class="token punctuation">(</span>Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gathering<span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        _invitations<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>invitation<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here&#39;s how using <strong>result objects</strong> would look like:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Gathering</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Other members omitted for brevity.</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Result</span> <span class="token function">SendInvitation</span><span class="token punctuation">(</span><span class="token class-name">Member</span> member<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>gathering<span class="token punctuation">.</span>Creator<span class="token punctuation">.</span>Id <span class="token operator">==</span> member<span class="token punctuation">.</span>Id<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Failure</span><span class="token punctuation">(</span>DomainErrors<span class="token punctuation">.</span>Gathering<span class="token punctuation">.</span>InvitingCreator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>gathering<span class="token punctuation">.</span>ScheduledAtUtc <span class="token operator">&lt;</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Failure</span><span class="token punctuation">(</span>DomainErrors<span class="token punctuation">.</span>Gathering<span class="token punctuation">.</span>AlreadyPassed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> invitation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Invitation</span><span class="token punctuation">(</span>Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gathering<span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        _invitations<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>invitation<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The benefit of this approach is we can introduce constants for possible domain errors. The catalog of domain errors will act as <strong>documentation</strong> for your domain, and make it more expressive.</p><p>Finally, here&#39;s how the <code>Handle</code> method looks like with all the changes so far:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Result<span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">SendInvitationCommand</span> command<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> member <span class="token operator">=</span> <span class="token keyword">await</span> _memberRepository<span class="token punctuation">.</span><span class="token function">GetByIdAsync</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>MemberId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> gathering <span class="token operator">=</span> <span class="token keyword">await</span> _gatheringRepository<span class="token punctuation">.</span><span class="token function">GetByIdAsync</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>GatheringId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>member <span class="token keyword">is</span> <span class="token keyword">null</span> <span class="token operator">||</span> gathering <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Failure</span><span class="token punctuation">(</span>Error<span class="token punctuation">.</span>NullValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> gathering<span class="token punctuation">.</span><span class="token function">SendInvitation</span><span class="token punctuation">(</span>member<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>IsFailure<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Failure</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Errors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> _unitOfWork<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> _emailService<span class="token punctuation">.</span><span class="token function">SendInvitationSentEmailAsync</span><span class="token punctuation">(</span>member<span class="token punctuation">,</span> gathering<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you take a closer look at the <code>Handle</code> method you&#39;ll notice it&#39;s doing two things:</p><ul><li>Persisting changes to the database</li><li>Sending an email</li></ul><p>This means it&#39;s <strong>not atomic</strong>.</p><p>There&#39;s a potential for the database transaction to complete, and the email sending to fail. Also, sending the email will slow down the method which could affect performance.</p><p>How can make this method atomic?</p><p>By sending the email in the background. It&#39;s not important for our business logic, so this is safe to do.</p><hr><h2 id="expressing-side-effects-with-domain-events" tabindex="-1"><a class="header-anchor" href="#expressing-side-effects-with-domain-events"><span>Expressing Side Effects With Domain Events</span></a></h2><p>You can use <strong>domain events</strong> to express that something occurred in your domain that might be interesting to other components in your system.</p><p>I often use <strong>domain events</strong> to trigger actions in the background, like sending a notification or email.</p><p>Let&#39;s introduce an <code>InvitationSentDomainEvent</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">InvitationSentDomainEvent</span><span class="token punctuation">(</span><span class="token class-name">Invitation</span> Invitation<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDomainEvent</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We&#39;re going to raise this <strong>domain event</strong> inside the <code>SendInvitation</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Gathering</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>Invitation<span class="token punctuation">&gt;</span></span> _invitations<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Other members omitted for brevity.</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Result</span> <span class="token function">SendInvitation</span><span class="token punctuation">(</span><span class="token class-name">Member</span> member<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>gathering<span class="token punctuation">.</span>Creator<span class="token punctuation">.</span>Id <span class="token operator">==</span> member<span class="token punctuation">.</span>Id<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Failure</span><span class="token punctuation">(</span>DomainErrors<span class="token punctuation">.</span>Gathering<span class="token punctuation">.</span>InvitingCreator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>gathering<span class="token punctuation">.</span>ScheduledAtUtc <span class="token operator">&lt;</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Failure</span><span class="token punctuation">(</span>DomainErrors<span class="token punctuation">.</span>Gathering<span class="token punctuation">.</span>AlreadyPassed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> invitation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Invitation</span><span class="token punctuation">(</span>Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gathering<span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        _invitations<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>invitation<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">Raise</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvitationSentDomainEvent</span><span class="token punctuation">(</span>invitation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The goal is to remove the code responsible for sending the email from the <code>Handle</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Result<span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">SendInvitationCommand</span> command<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> member <span class="token operator">=</span> <span class="token keyword">await</span> _memberRepository<span class="token punctuation">.</span><span class="token function">GetByIdAsync</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>MemberId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> gathering <span class="token operator">=</span> <span class="token keyword">await</span> _gatheringRepository<span class="token punctuation">.</span><span class="token function">GetByIdAsync</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>GatheringId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>member <span class="token keyword">is</span> <span class="token keyword">null</span> <span class="token operator">||</span> gathering <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Failure</span><span class="token punctuation">(</span>Error<span class="token punctuation">.</span>NullValue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> gathering<span class="token punctuation">.</span><span class="token function">SendInvitation</span><span class="token punctuation">(</span>member<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>IsFailure<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Failure</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Errors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> _unitOfWork<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We only want to worry about executing the business logic and persisting any changes to the database. Part of those changes will also be the <strong>domain event</strong>, which the system will publish in the background.</p><p>Of course, we need a respective <strong>handler</strong> for the <strong>domain event</strong>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">InvitationSentDomainEventHandler</span></span>
<span class="line">    <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDomainEventHandler<span class="token punctuation">&lt;</span>InvitationSentDomainEvent<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IEmailService</span> _emailService<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">InvitationSentDomainEventHandler</span><span class="token punctuation">(</span><span class="token class-name">IEmailService</span> emailService<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _emailService <span class="token operator">=</span> emailService<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">InvitationSentDomainEvent</span> domainEvent<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> _emailService<span class="token punctuation">.</span><span class="token function">SendInvitationSentEmailAsync</span><span class="token punctuation">(</span></span>
<span class="line">            domainEvent<span class="token punctuation">.</span>Invitation<span class="token punctuation">.</span>Member<span class="token punctuation">,</span></span>
<span class="line">            domainEvent<span class="token punctuation">.</span>Invitation<span class="token punctuation">.</span>Gathering<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We achieved two things:</p><ul><li>Handling the <code>SendInvitationCommand</code> is now atomic</li><li>Email is sent in the background, and can be safely retried in case of an error</li></ul><hr><h2 id="takeaway" tabindex="-1"><a class="header-anchor" href="#takeaway"><span>Takeaway</span></a></h2><p>Designing a <strong>rich domain model</strong> is a gradual process, and you can slowly evolve the domain model over time.</p><p>The first step could be making your domain model more defensive:</p><ul><li>Hiding constructors with the <code>internal</code> keyword</li><li>Encapsulating collection access</li></ul><p>The benefit is your domain models will have a fine-grained public API (methods) which act as an entry point for executing the business logic.</p><p>It&#39;s easy to test behavior when it&#39;s encapsulated in a class without having to mock external dependencies.</p><p>You can raise <strong>domain events</strong> to notify the system that something of important occurred, and any interested components can subscribe to that domain event. Domain events allow you to develop a <strong>decoupled</strong> system, where you focus on the core domain logic, and don&#39;t have to worry about the side effects.</p><p>However, this doesn&#39;t mean that every system needs a <strong>rich domain model</strong>.</p><p>You should be pragmatic and decide when the complexity is worth it.</p><p>That&#39;s all for this week.</p><p>See you next Saturday.</p>`,75))])}const R=u(g,[["render",f]]),D=JSON.parse('{"path":"/milanjovanovic.tech/refactoring-from-an-anemic-domain-model-to-a-rich-domain-model.html","title":"Refactoring From an Anemic Domain Model To a Rich Domain Model","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Refactoring From an Anemic Domain Model To a Rich Domain Model","description":"Article(s) > Refactoring From an Anemic Domain Model To a Rich Domain Model","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Refactoring From an Anemic Domain Model To a Rich Domain Model\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_042.png\\"],\\"datePublished\\":\\"2023-06-17T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/refactoring-from-an-anemic-domain-model-to-a-rich-domain-model.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Refactoring From an Anemic Domain Model To a Rich Domain Model"}],["meta",{"property":"og:description","content":"Article(s) > Refactoring From an Anemic Domain Model To a Rich Domain Model"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_042.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_042.png"}],["meta",{"name":"twitter:image:alt","content":"Refactoring From an Anemic Domain Model To a Rich Domain Model"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-06-17T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Refactoring From an Anemic Domain Model To a Rich Domain Model"},{"property":"og:description","content":"Refactoring From an Anemic Domain Model To a Rich Domain Model"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/refactoring-from-an-anemic-domain-model-to-a-rich-domain-model.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-06-17T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_042.png"},"git":{},"readingTime":{"minutes":5.73,"words":1720},"filePathRelative":"milanjovanovic.tech/refactoring-from-an-anemic-domain-model-to-a-rich-domain-model.md","copyright":{"author":"Milan Jovanović"}}');export{R as comp,D as data};
