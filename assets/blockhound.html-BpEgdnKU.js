import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as a,b as l,a as m,t as g,n as p,g as c,e,r as t,o as v}from"./app-BVguHYKu.js";const b={},h={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"hint-container info"},w={href:"https://github.com/reactor/BlockHound",target:"_blank",rel:"noopener noreferrer"};function B(r,n){const o=t("VPCard"),i=t("SiteInfo"),u=t("VPIcon");return v(),k("div",null,[s("h1",h,[s("a",f,[s("span",null,g(r.$frontmatter.title)+" 관련",1)])]),a(o,p(c({title:"Kotlin > Article(s)",desc:"Article(s)",link:"/programming/java/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n[6]||(n[6]=s("nav",{class:"table-of-contents"},[s("ul")],-1)),n[7]||(n[7]=s("hr",null,null,-1)),a(i,{name:"Using BlockHound to track blocking calls in non-blocking dispatchers",desc:"How to use BlockHound to track blocking calls in non-blocking dispatchers.",url:"https://kt.academy/article/blockhound",logo:"https://kt.academy/logo.png",preview:"https://marcinmoskala.com/kt-academy-articles/promotion/blockhound.jpg"}),n[8]||(n[8]=l(`<p>When we implement repositories in Kotlin Coroutines, there is a constant tension between safety and performance. On one hand, making a blocking call directly in a suspending function is a serious mistake (on Android it can cause ANR):</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="DiscSaveRepository.kt"><span>DiscSaveRepository.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> <span class="token function">DiscSaveRepository</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">val</span> discReader<span class="token operator">:</span> DiscReader</span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">:</span> SaveRepository <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Mistake: Blocking call in a suspending function</span></span>
<span class="line">  <span class="token keyword">override</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">loadSave</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> SaveData <span class="token operator">=</span></span>
<span class="line">    discReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;save/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This should be fixed by using a dispatcher that is designed for blocking calls, like <code>Dispatchers.IO</code>:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="DiscSaveRepository.kt"><span>DiscSaveRepository.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> <span class="token function">DiscSaveRepository</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">val</span> discReader<span class="token operator">:</span> DiscReader</span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">:</span> SaveRepository <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Fixed: Blocking call in a suspending function</span></span>
<span class="line">  <span class="token keyword">override</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">loadSave</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> SaveData <span class="token operator">=</span> <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    discReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;save/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>On the other hand, changing dispatcher when not needed can be a performance hit, and suspending APIs should never block:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> <span class="token function">NetworkOfferRepository</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">val</span> offerClient<span class="token operator">:</span> OfferClient<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">:</span> OfferRepository <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Mistake: Unnecessary dispatcher change</span></span>
<span class="line">  <span class="token keyword">override</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">fetchOffers</span><span class="token punctuation">(</span>userId<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>Offer<span class="token operator">&gt;</span> <span class="token operator">=</span></span>
<span class="line">    <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      offerClient<span class="token punctuation">.</span><span class="token function">fetchOffers</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">toOffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Retrofit definition</span></span>
<span class="line"><span class="token keyword">interface</span> OfferClient <span class="token punctuation">{</span></span>
<span class="line">  <span class="token annotation builtin">@GET</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;offers&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">fetchOffers</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;page&quot;</span></span><span class="token punctuation">)</span> sellerId<span class="token operator">:</span> String</span>
<span class="line">  <span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>OfferJson<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This constant tension between safety and performance is a real problem, but there is a simple solution: We can use BlockHound to track blocking calls in non-blocking dispatchers.</p><p><a href="https://github.com/reactor/BlockHound" target="_blank" rel="noopener noreferrer">BlockHound</a> is a library that can detect blocking calls on certain threads. In Kotlin Coroutines we use it together with <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-debug/" target="_blank" rel="noopener noreferrer">kotlinx-coroutines-debug</a> to detect blocking calls in non-blocking dispatchers. This is how we can set it up. First, we need dependencies:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="build.gradle.kts"><span>build.gradle.kts</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-debug:1.5.2&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;io.projectreactor.tools:blockhound:1.0.6.RELEASE&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div>`,9)),s("div",y,[n[5]||(n[5]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[3]||(n[3]=e("In JDK 13+ you need special configuration, see ")),s("a",w,[n[0]||(n[0]=e("BlockHound documentation (")),a(u,{icon:"iconfont icon-github"}),n[1]||(n[1]=s("code",null,"reactor/BlockHound",-1)),n[2]||(n[2]=e(")"))]),n[4]||(n[4]=e(". In general, using BlockHound with never versions of JDK can be more challenging."))]),a(i,{name:"reactor/BlockHound",desc:"Java agent to detect blocking calls from non-blocking threads.",url:"https://github.com/reactor/BlockHound/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/fa7cce1109e4c6c756405be7dbfea131541aff0c37edbeaa9806ad1a8d4b6986/reactor/BlockHound"})]),n[9]||(n[9]=l(`<p>Then, we need to install BlockHound in our application:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">BlockHound<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span><span class="token function">CoroutinesBlockHoundIntegration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can use it in debug mode or in E2E tests. Once it is installed, it will throw an exception when a blocking call is detected. This is how it looks like:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="main.kt"><span>main.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">import</span> reactor<span class="token punctuation">.</span>blockhound<span class="token punctuation">.</span>BlockHound</span>
<span class="line"><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>debug<span class="token punctuation">.</span>CoroutinesBlockHoundIntegration</span>
<span class="line"><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  BlockHound<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span><span class="token function">CoroutinesBlockHoundIntegration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  runBlocking <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// Exception</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Results with an exception:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="log"><span>log</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line highlighted">Exception in thread &quot;main&quot; reactor.blockhound.BlockingOperationError: Blocking call! java.lang.Thread.sleep</span>
<span class="line">  at java.base/java.lang.Thread.sleep(Thread.java)</span>
<span class="line">  at MainKt$main$1$1.invokeSuspend(Main.kt:12)</span>
<span class="line">  at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)</span>
<span class="line">  at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108)</span>
<span class="line">  at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:584)</span>
<span class="line">  at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:793)</span>
<span class="line">  at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:697)</span>
<span class="line">  at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:684)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Using <code>Dispatchers.IO</code> would not throw an exception, as it is designed for blocking calls.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="main.kt"><span>main.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">import</span> reactor<span class="token punctuation">.</span>blockhound<span class="token punctuation">.</span>BlockHound</span>
<span class="line"><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>debug<span class="token punctuation">.</span>CoroutinesBlockHoundIntegration</span>
<span class="line"><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  BlockHound<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span><span class="token function">CoroutinesBlockHoundIntegration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line highlighted">  <span class="token keyword">val</span> d <span class="token operator">=</span> Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">.</span><span class="token function">limitedParallelism</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// or just Dispatchers.IO</span></span>
<span class="line">  runBlocking <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token function">launch</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// OK</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This way we can ensure that our suspending functions are safe and performant, without unnecessary dispatcher changes.</p>`,9)),m(" TODO: add ARTICLE CARD "),a(o,p(c({title:"Using BlockHound to track blocking calls in non-blocking dispatchers",desc:"How to use BlockHound to track blocking calls in non-blocking dispatchers.",link:"https://chanhi2000.github.io/bookshelf/kt.academy/blockhound.html",logo:"https://kt.academy/logo.png",background:"rgba(243,139,49,0.2)"})),null,16)])}const S=d(b,[["render",B]]),C=JSON.parse('{"path":"/kt.academy/blockhound.html","title":"Using BlockHound to track blocking calls in non-blocking dispatchers","lang":"en-US","frontmatter":{"lang":"en-US","title":"Using BlockHound to track blocking calls in non-blocking dispatchers","description":"Article(s) > Using BlockHound to track blocking calls in non-blocking dispatchers","icon":"iconfont icon-kotlin","category":["Java","Kotlin","Article(s)"],"tag":["blog","kt.academy","java","kotlin"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Using BlockHound to track blocking calls in non-blocking dispatchers\\",\\"image\\":[\\"https://marcinmoskala.com/kt-academy-articles/promotion/blockhound.jpg\\"],\\"datePublished\\":\\"2024-12-02T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marcin Moskała\\",\\"url\\":\\"https://kt.academy/user/marcinmoskala\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/kt.academy/blockhound.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Using BlockHound to track blocking calls in non-blocking dispatchers"}],["meta",{"property":"og:description","content":"Article(s) > Using BlockHound to track blocking calls in non-blocking dispatchers"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://marcinmoskala.com/kt-academy-articles/promotion/blockhound.jpg"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://marcinmoskala.com/kt-academy-articles/promotion/blockhound.jpg"}],["meta",{"name":"twitter:image:alt","content":"Using BlockHound to track blocking calls in non-blocking dispatchers"}],["meta",{"property":"article:author","content":"Marcin Moskała"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"kt.academy"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-12-02T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Using BlockHound to track blocking calls in non-blocking dispatchers"},{"property":"og:description","content":"Using BlockHound to track blocking calls in non-blocking dispatchers"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/kt.academy/blockhound.html"}]],"prev":"/programming/java/articles/README.md","date":"2024-12-02T00:00:00.000Z","isOriginal":false,"author":[{"name":"Marcin Moskała","url":"https://kt.academy/user/marcinmoskala"}],"cover":"https://marcinmoskala.com/kt-academy-articles/promotion/blockhound.jpg"},"git":{},"readingTime":{"minutes":2.34,"words":703},"filePathRelative":"kt.academy/blockhound.md","copyright":{"author":"Marcin Moskała"}}');export{S as comp,C as data};
