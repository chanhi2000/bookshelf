import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as e,b as l,a as h,t as b,n as r,g as u,w as p,e as a,r as o,o as g}from"./app-BVguHYKu.js";const y={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},C={class:"table-of-contents"},M={href:"https://github.com/CodeMazeBlog/CodeMazeGuides/tree/main/aspnetcore-features/PerformanceMonitoringWithIMeterFactory",target:"_blank",rel:"noopener noreferrer"},S={href:"https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-counters",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/open-telemetry/semantic-conventions/blob/main/docs/general/metrics.md#general-guidelines",target:"_blank",rel:"noopener noreferrer"},q={href:"https://ucum.org/",target:"_blank",rel:"noopener noreferrer"};function I(d,n){const i=o("VPCard"),t=o("router-link"),m=o("SiteInfo"),c=o("VPIcon");return g(),v("div",null,[s("h1",f,[s("a",w,[s("span",null,b(d.$frontmatter.title)+" 관련",1)])]),e(i,r(u({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",C,[s("ul",null,[s("li",null,[e(t,{to:"#what-are-net-metric-instruments"},{default:p(()=>n[0]||(n[0]=[a("What Are .NET Metric Instruments?")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#configure-imeterfactory-in-asp-net-core-web-api"},{default:p(()=>n[1]||(n[1]=[a("Configure IMeterFactory in ASP.NET Core Web API")])),_:1,__:[1]})]),s("li",null,[e(t,{to:"#define-the-imeterfactory-instruments"},{default:p(()=>n[2]||(n[2]=[a("Define the IMeterFactory Instruments")])),_:1,__:[2]})]),s("li",null,[e(t,{to:"#capture-the-metrics"},{default:p(()=>n[3]||(n[3]=[a("Capture the Metrics")])),_:1,__:[3]})]),s("li",null,[e(t,{to:"#visualize-the-metrics"},{default:p(()=>n[4]||(n[4]=[a("Visualize the Metrics")])),_:1,__:[4]})]),s("li",null,[e(t,{to:"#add-clarity-with-unit-and-description"},{default:p(()=>n[5]||(n[5]=[a("Add Clarity With Unit and Description")])),_:1,__:[5]})]),s("li",null,[e(t,{to:"#define-multi-dimensional-metrics"},{default:p(()=>n[6]||(n[6]=[a("Define Multi-Dimensional Metrics")])),_:1,__:[6]})]),s("li",null,[e(t,{to:"#test-imeterfactory-metrics-using-metriccollector"},{default:p(()=>n[7]||(n[7]=[a("Test IMeterFactory Metrics Using MetricCollector")])),_:1,__:[7]})]),s("li",null,[e(t,{to:"#imeterfactory-best-practices"},{default:p(()=>n[8]||(n[8]=[a("IMeterFactory Best Practices")])),_:1,__:[8]})]),s("li",null,[e(t,{to:"#conclusion"},{default:p(()=>n[9]||(n[9]=[a("Conclusion")])),_:1,__:[9]})])])]),n[26]||(n[26]=s("hr",null,null,-1)),e(m,{name:"Measure Application Performance in .NET Using IMeterFactory",desc:"In this article, we'll learn how to measure the performance an ASP.NET Core Web API application using IMeterFactory.",url:"https://code-maze.com/dotnet-imeterfactory-application-performance",logo:"/assets/image/code-maze.com/favicon.png",preview:"https://code-maze.com/wp-content/uploads/2021/12/social-dotnet-core.png"}),n[27]||(n[27]=s("p",null,[a("Performance monitoring is essential for ensuring that our applications run efficiently and reliably. .NET offers a set of tools to help with this, accessible via "),s("strong",null,"IMeterFactory"),a(". In this article, we’ll learn how to use these tools to check the health of our applications, measure performance, and collect data for optimization.")],-1)),s("p",null,[n[13]||(n[13]=a("To download the source code for this article, you can visit our ")),s("a",M,[n[10]||(n[10]=a("GitHub repository (")),e(c,{icon:"iconfont icon-github"}),n[11]||(n[11]=s("code",null,"CodeMazeBlog/CodeMazeGuides",-1)),n[12]||(n[12]=a(")"))]),n[14]||(n[14]=a("."))]),n[28]||(n[28]=l(`<p>So let’s get going.</p><hr><h2 id="what-are-net-metric-instruments" tabindex="-1"><a class="header-anchor" href="#what-are-net-metric-instruments"><span>What Are .NET Metric Instruments?</span></a></h2><p>In .NET, we have various instruments available to capture an application’s performance data, such as:</p><ul><li><code>Counter&lt;T&gt;</code>: Tracks increasing counts, such as total requests or clicks</li><li><code>Gauge&lt;T&gt;</code>: Measures fluctuating non-cumulative values, like current memory consumption</li><li><code>UpDownCounter&lt;T&gt;</code>: Captures values that can increase and decrease, such as queue sizes</li><li><code>Histogram&lt;T&gt;</code>: Visualizes how data is distributed across ranges of values</li></ul><p>In addition to these, there are observable instruments like <code>ObservableCounter&lt;T&gt;</code>, <code>ObservableGauge&lt;T&gt;</code>, and <code>ObservableUpDownCounter&lt;T&gt;</code> that report their values as they are observed.</p><p>These instruments are carefully designed for different monitoring needs, allowing accurate and meaningful performance tracking.</p><hr><h2 id="configure-imeterfactory-in-asp-net-core-web-api" tabindex="-1"><a class="header-anchor" href="#configure-imeterfactory-in-asp-net-core-web-api"><span>Configure IMeterFactory in ASP.NET Core Web API</span></a></h2><p>Let’s create an ASP.NET Core Web API project and configure it to use <strong>IMeterFactory.</strong> We need this before we can create and use the metric instruments described above.</p><p><strong>IMeterFactory</strong> is part of the <code>System.Diagnostics.Metrics</code> NuGet package, which is included by default in .NET 8+. This means we can directly inject <code>IMeterFactory</code> into our classes. Let’s do that now by creating a <code>MetricsService</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetricsService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">MetricsService</span><span class="token punctuation">(</span><span class="token class-name">IMeterFactory</span> meterFactory<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> meter <span class="token operator">=</span> meterFactory<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;Metrics.Service&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We define a <code>MetricsService</code> class and inject <code>IMeterFactory</code> into it to initialize a <code>Meter</code> instance. Now, we can use this <code>Meter</code> instance to define and capture metrics.</p><hr><h2 id="define-the-imeterfactory-instruments" tabindex="-1"><a class="header-anchor" href="#define-the-imeterfactory-instruments"><span>Define the IMeterFactory Instruments</span></a></h2><p>Next, let’s see how to capture various metrics.</p><p>Let’s declare a counter for holding the number of user clicks, a histogram for reporting response times, and a couple of variables for storing requests and memory consumption:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetricsService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Counter<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> _userClicks<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Histogram<span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">&gt;</span></span> _responseTime<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _requests<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> _memoryConsumption<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">MetricsService</span><span class="token punctuation">(</span><span class="token class-name">IMeterFactory</span> meterFactory<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> meter <span class="token operator">=</span> meterFactory<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;Metrics.Service&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        _userClicks <span class="token operator">=</span> meter<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateCounter</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;metrics.service.user_clicks&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        _responseTime <span class="token operator">=</span> meter<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateHistogram</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;metrics.service.response_time&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        meter<span class="token punctuation">.</span><span class="token function">CreateObservableCounter</span><span class="token punctuation">(</span><span class="token string">&quot;metrics.service.requests&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> _requests<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        meter<span class="token punctuation">.</span><span class="token function">CreateObservableGauge</span><span class="token punctuation">(</span><span class="token string">&quot;metrics.service.memory_consumption&quot;</span><span class="token punctuation">,</span> </span>
<span class="line">            _memoryConsumption<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>First, we initialize the counter using the <code>CreateCounter()</code> method. Next, we initialize the histogram metric with the <code>CreateHistogram()</code> method.</p><p>After that, we set up an observable counter using the <code>CreateObservableCounter()</code> method, which returns the value of <code>_requests</code> through a callback function. Similarly, we set up an observable gauge with the <code>CreateObservableGauge()</code> method, returning the <code>_memoryConsumption</code> value via its own callback function.</p><p>Since the only difference between a <code>Counter</code> and <code>UpDownCounter</code> is that the former can only increase in value, while the latter can increase <em>and</em> decrease, we will not look at <code>UpDownCounter</code> here.</p><hr><h2 id="capture-the-metrics" tabindex="-1"><a class="header-anchor" href="#capture-the-metrics"><span>Capture the Metrics</span></a></h2><p>Now, let’s add a few methods for recording these metric values in both an interface and in the class.</p><p>First, let’s create an <code>IMetricsService</code> interface and add a few method contracts:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMetricsService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RecordUserClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RecordResponseTime</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RecordRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RecordMemoryConsumption</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, let’s implement this new interface in the <code>MetricsService</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetricsService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMetricsService</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// private fields and constructor omitted for brevity</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RecordUserClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _userClicks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RecordResponseTime</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _responseTime<span class="token punctuation">.</span><span class="token function">Record</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RecordRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Interlocked<span class="token punctuation">.</span><span class="token function">Increment</span><span class="token punctuation">(</span><span class="token keyword">ref</span> _requests<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RecordMemoryConsumption</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _memoryConsumption <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, the <code>RecordUserClick()</code> method increments the <code>_userClicks</code> counter by one to track the number of user clicks. The <code>RecordResponseTime()</code> method records the provided application’s response time using a histogram metric. The <code>RecordRequest()</code> method safely increments the <code>_requests</code> counter by one in a multi-threaded environment each time we call it, and the <code>RecordMemoryConsumption()</code> method updates the <code>_memoryConsumption</code> field with the provided value.</p><p>After that, let’s create a controller class and inject <code>IMetricsService</code> into it. In the controller, let’s add a GET method to generate some metrics data and record those using the <code>MetricsService</code> methods:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;api/[controller]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetricsController</span><span class="token punctuation">(</span><span class="token class-name">IMetricsService</span> metricsService<span class="token punctuation">)</span> <span class="token punctuation">:</span> ControllerBase</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> random <span class="token operator">=</span> Random<span class="token punctuation">.</span>Shared<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        metricsService<span class="token punctuation">.</span><span class="token function">RecordUserClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            metricsService<span class="token punctuation">.</span><span class="token function">RecordResponseTime</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">NextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        metricsService<span class="token punctuation">.</span><span class="token function">RecordRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        metricsService<span class="token punctuation">.</span><span class="token function">RecordMemoryConsumption</span><span class="token punctuation">(</span>GC<span class="token punctuation">.</span><span class="token function">GetAllocatedBytesForCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We begin by recording a user-click event by calling the <code>RecordUserClick()</code> method. Next, we generate random values for response time within a loop and capture those values by calling the <code>RecordResponseTime()</code> method. Afterward, we log a request event by calling the <code>RecordRequest()</code> method. Finally, we record the current thread’s memory usage in megabytes by calling the <code>RecordMemoryConsumption()</code> method.</p><p>Here, the controller’s <code>Get()</code> method simulates the metrics data collection by invoking various methods from <code>MetricsService</code> with random values and returning an <code>HTTP 200 OK</code> response.</p><p>Finally, let’s register the <code>MetricsService</code> in the dependency injection container:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMetricsService<span class="token punctuation">,</span> MetricsService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This registers <code>MetricsService</code> as a singleton service for the <code>IMetricsService</code> interface throughout the application’s lifetime.</p><p>Also, make sure to add the <code>Swashbuckle.AspNetCore</code> NuGet package and configure Swagger UI in the <code>Program</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddSwaggerGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMetricsService<span class="token punctuation">,</span> MetricsService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>Environment<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">UseSwagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">UseSwaggerUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token range operator">..</span><span class="token punctuation">.</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will enable the Swagger UI and make it easier to visualize and run the API endpoints.</p><hr><h2 id="visualize-the-metrics" tabindex="-1"><a class="header-anchor" href="#visualize-the-metrics"><span>Visualize the Metrics</span></a></h2>`,41)),s("p",null,[n[16]||(n[16]=a("Let’s run the API application, which should display the Swagger UI. To view the metrics, we’ll use the ")),s("a",S,[e(c,{icon:"fa-brands fa-microsoft"}),n[15]||(n[15]=a("dotnet-counters"))]),n[17]||(n[17]=a(" tool."))]),n[29]||(n[29]=l(`<p>First, we need to install the <code>dotnet-counters</code> tool using the <code>dotnet tool update</code> command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">dotnet tool update <span class="token parameter variable">-g</span> dotnet-counters\`</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Once the tool is installed, we get a success message:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">dotnet tool update <span class="token parameter variable">-g</span> dotnet-counters</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># You can invoke the tool using the following command: dotnet-counters</span></span>
<span class="line"><span class="token comment"># Tool &#39;dotnet-counters&#39; (version &#39;9.0.553101&#39;) was successfully installed.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>While the app is still running, let’s use <code>dotnet-counters</code> to monitor all the metrics from our application:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">dotnet-counters monitor <span class="token parameter variable">-n</span> MetricsAPI <span class="token parameter variable">--counters</span> Metrics.Service</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Here, we specify the <code>dotnet-counters</code> tool to monitor all metrics in the <strong>MetricsAPI</strong> application coming from the <strong>MetricsService</strong> meter. Remember that the meter name is case-sensitive.</p><p>This will bring up the metrics screen, which will be empty as we haven’t yet run the endpoint to generate those:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">Press p to pause, r to resume, q to quit.</span>
<span class="line">    Status: Waiting for initial payload...</span>
<span class="line"></span>
<span class="line">Name                                                                                   Current Value</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now, let’s invoke the <code>\\metrics</code> endpoint from the Swagger UI to create the metrics and observe the output:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">Press p to pause, r to resume, q to quit.</span>
<span class="line">    Status: Running</span>
<span class="line"></span>
<span class="line">Name                                                                                       Current Value</span>
<span class="line">[Metrics.Service]</span>
<span class="line">    metrics.service.memory_consumption                                                             0.003</span>
<span class="line">    metrics.service.requests (Count)                                                               1      </span>
<span class="line">    metrics.service.response_time</span>
<span class="line">    Percentile</span>
<span class="line">        50                                                                                         0.567</span>
<span class="line">        95                                                                                         0.938</span>
<span class="line">        99                                                                                         0.988</span>
<span class="line">    metrics.service.user_clicks (Count)                                                            1    </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>As expected, we can see the output with all metrics collected. As we run the endpoint multiple times, notice how the <code>user_clicks</code> and <code>request</code> values increment by one. On the other hand, <code>response_time</code> shows the percentile of a large set of random samples. <strong>Although</strong> <strong>the</strong> <strong>dotnet-counters tool renders Histogram instruments as three percentile statistics (50th, 95th, and 99th), other tools might summarize the distribution differently or offer more configuration options</strong>. Similarly, <code>memory_consumption</code> shows a different value every time as it represents a Gauge.</p><hr><h2 id="add-clarity-with-unit-and-description" tabindex="-1"><a class="header-anchor" href="#add-clarity-with-unit-and-description"><span>Add Clarity With Unit and Description</span></a></h2><p>When we define instruments, we can specify an optional unit and description. These details do not change any calculations, but they can help us understand the data in the collection tool’s interface. Currently**, the dotnet-counters tool does not show the description text, but it does display the unit if provided**.</p><p>Let’s modify the <code>MetricsService</code> constructor, to specify the unit as Seconds and add a description while creating the histogram for capturing the response time:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">_responseTime <span class="token operator">=</span> meter<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateHistogram</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;metrics.service.response_time&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">unit</span><span class="token punctuation">:</span> <span class="token string">&quot;Seconds&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">description</span><span class="token punctuation">:</span> <span class="token string">&quot;This metric measures the time taken for the application to respond to user requests.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The option is available on observable instruments as well.</p><p>Let’s modify the constructor further, to specify the unit as Megabytes and add a description while creating the observable gauge metric for memory consumption:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">meter<span class="token punctuation">.</span><span class="token function">CreateObservableGauge</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;metrics.service.memory_consumption&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> _memoryConsumption<span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">unit</span><span class="token punctuation">:</span> <span class="token string">&quot;Megabytes&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">description</span><span class="token punctuation">:</span> <span class="token string">&quot;This metric measures the amount of memory used by the application.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, when we run the application, hit the endpoint, and observe the metrics, we can see that the response time shows the Seconds as units, while the memory consumption shows units as Megabytes:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">Press p to pause, r to resume, q to quit.</span>
<span class="line">    Status: Running</span>
<span class="line">Name                                                                                        Current Value</span>
<span class="line">[Metrics.Service]</span>
<span class="line">    metrics.service.memory_consumption (Megabytes)                                                 0.003</span>
<span class="line">    metrics.service.requests (Count)                                                               1</span>
<span class="line">    metrics.service.response_time (Seconds)</span>
<span class="line">        Percentile</span>
<span class="line">        50                                                                                         0.532</span>
<span class="line">        95                                                                                         0.952</span>
<span class="line">        99                                                                                         0.976</span>
<span class="line">    metrics.service.user_clicks (Count)                                                            1    </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Leveraging this, we can add units to metrics to make the data more meaningful.</p><hr><h2 id="define-multi-dimensional-metrics" tabindex="-1"><a class="header-anchor" href="#define-multi-dimensional-metrics"><span>Define Multi-Dimensional Metrics</span></a></h2><p>Measurements can have tags that link them to key-value pairs, which helps organize data for analysis. We can use specific tags for <code>Counter</code> and <code>Histogram</code> measurements in the overloaded <code>Add()</code> and <code>Record()</code> methods, which accept one or more <code>KeyValuePair</code> arguments. For <code>ObservableCounter</code> and <code>ObservableGauge</code>, we can add tagged measurements in the callback provided to the constructor.</p><p>For example, to improve the metrics for user clicks by adding details like the user’s region and the feature clicked, we can create a method called <code>RecordUserClickDetailed()</code> in <code>MetricsService</code>. This method allows us to send these extra details to the overloaded <code>Counter.Add()</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RecordUserClickDetailed</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> region<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> feature<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    _userClicks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;user.region&quot;</span><span class="token punctuation">,</span> region<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;user.feature&quot;</span><span class="token punctuation">,</span> feature<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Similarly, let’s create a multi-dimensional gauge that reports detailed resource consumption, such as CPU, memory, and thread count. First, let’s add these additional fields to our <code>MetricService</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> _cpu<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> _memory<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">double</span></span> _threadCount<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, let’s create a <code>GetResourceConsumption()</code> method that returns <code>IEnumerable&lt;Measurement&lt;int&gt;&gt;</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">private</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>Measurement<span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetResourceConsumption</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">[</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Measurement<span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_cpu<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">object</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token string">&quot;resource_usage&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cpu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Measuremcent<span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_memory<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">object</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token string">&quot;resource_usage&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;memory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Measurement<span class="token punctuation">&lt;</span><span class="token keyword">double</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_threadCount<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">object</span><span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token punctuation">(</span><span class="token string">&quot;resource_usage&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;thread_count&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, in our constructor, we need to update the callback in our observable Gauge creation to call our new <code>GetResourceConsumption()</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token function">MetricsService</span><span class="token punctuation">(</span><span class="token class-name">IMeterFactory</span> meterFactory<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// code omitted for brevity</span></span>
<span class="line"></span>
<span class="line">    meter<span class="token punctuation">.</span><span class="token function">CreateObservableGauge</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;metrics.service.resource_consumption&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">GetResourceConsumption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Additionally, let’s create a <code>RecordResourceUsage()</code> method for capturing the resource usage:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RecordResourceUsage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> currentCpuUsage<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> currentMemoryUsage<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> currentThreadCount<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    _cpu <span class="token operator">=</span> currentCpuUsage<span class="token punctuation">;</span></span>
<span class="line">    _memory <span class="token operator">=</span> currentMemoryUsage<span class="token punctuation">;</span></span>
<span class="line">    _threadCount <span class="token operator">=</span> currentThreadCount<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Also, let’s create a Utility class and method to calculate the CPU usage:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Utilities</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">GetCpuUsagePercentage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> process <span class="token operator">=</span> Process<span class="token punctuation">.</span><span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> startTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> initialCpuTime <span class="token operator">=</span> process<span class="token punctuation">.</span>TotalProcessorTime<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> endTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> finalCpuTime <span class="token operator">=</span> process<span class="token punctuation">.</span>TotalProcessorTime<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> totalCpuTimeUsed <span class="token operator">=</span> <span class="token punctuation">(</span>finalCpuTime <span class="token operator">-</span> initialCpuTime<span class="token punctuation">)</span><span class="token punctuation">.</span>TotalMilliseconds<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> totalTimeElapsed <span class="token operator">=</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">.</span>TotalMilliseconds<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> cpuUsage <span class="token operator">=</span> <span class="token punctuation">(</span>totalCpuTimeUsed <span class="token operator">/</span> <span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>ProcessorCount <span class="token operator">*</span> totalTimeElapsed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> cpuUsage<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This method measures the CPU usage of the current process by capturing the CPU time used over a one-second period and calculating the percentage of CPU utilization.</p><p>Lastly, we need to be sure to update our <code>IMetricsService</code> interface with our two new recording methods:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RecordUserClickDetailed</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> region<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> feature<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RecordResourceUsage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> currentCpuUsage<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> currentMemoryUsage<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> currentThreadCount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, let’s call these methods by adding them to the end of the GET endpoint in the controller, immediately before the final <code>return Ok()</code> line:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">metricsService<span class="token punctuation">.</span><span class="token function">RecordUserClickDetailed</span><span class="token punctuation">(</span><span class="token string">&quot;US&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;checkout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">metricsService<span class="token punctuation">.</span><span class="token function">RecordResourceUsage</span><span class="token punctuation">(</span></span>
<span class="line">    Utilities<span class="token punctuation">.</span><span class="token function">GetCpuUsagePercentage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    GC<span class="token punctuation">.</span><span class="token function">GetTotalAllocatedBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    Process<span class="token punctuation">.</span><span class="token function">GetCurrentProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Threads<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>While calling the <code>RecordUserClickDetailed()</code> method, we pass the region and feature.</p><p>When calling the method, we pass the values for CPU usage, total memory, and thread count. We utilize the <code>GetCpuUsagePercentage()</code> utility method to obtain CPU usage, while the <code>GC.GetTotalAllocatedBytes()</code> method can supply the total memory allocated to the current process and <code>Process.GetCurrentProcess().Threads.Count</code> report the number of threads running in that process.</p><p>Now, when we run the application again, exercise the endpoint, and observe the metrics, we can see it displays these details as multi-dimensional metrics:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="output"><span>output</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">Press p to pause, r to resume, q to quit.</span>
<span class="line">    Status: Running</span>
<span class="line"></span>
<span class="line">Name                                                                                       Current Value</span>
<span class="line">[Metrics.Service]</span>
<span class="line">    metrics.service.memory_consumption (Megabytes)                                                 0.016</span>
<span class="line">    metrics.service.requests (Count)                                                               1    </span>
<span class="line">    metrics.service.resource_consumption</span>
<span class="line">        resource_usage</span>
<span class="line">        cpu                                                                                        0.482</span>
<span class="line">        memory                                                                                     6</span>
<span class="line">        thread_count                                                                              50</span>
<span class="line">    metrics.service.response_time (Seconds)</span>
<span class="line">        Percentile</span>
<span class="line">        50                                                                                         0.419</span>
<span class="line">        95                                                                                         0.958</span>
<span class="line">        99                                                                                         0.983</span>
<span class="line">    metrics.service.user_clicks (Count)                                                            1</span>
<span class="line">        user.feature user.region</span>
<span class="line">        checkout     US                                                                            1    </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This is an excellent way to display metrics that have multiple dimensions.</p><hr><h2 id="test-imeterfactory-metrics-using-metriccollector" tabindex="-1"><a class="header-anchor" href="#test-imeterfactory-metrics-using-metriccollector"><span>Test IMeterFactory Metrics Using MetricCollector</span></a></h2><p>We can test any custom <code>IMeterFactory</code> metrics that we add to our application using the <code>MetricCollector&lt;T&gt;</code> class. This class simplifies the process of recording measurements from specific instruments and helps us verify their accuracy. Let’s see how to do this.</p><p>First, we need to add the <code>Microsoft.Extensions.DependencyInjection</code> and <code>Microsoft.Extensions.Diagnostics.Testing</code> NuGet packages. Next, we need to define a <code>CreateServiceProvider()</code> to use in our test methods:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">ServiceProvider</span> <span class="token function">CreateServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> serviceCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServiceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    serviceCollection<span class="token punctuation">.</span><span class="token function">AddMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    serviceCollection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MetricsService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> serviceCollection<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>CreateServiceProvider()</code> method sets up a dependency injection container. It creates a new <code>ServiceCollection</code>, adds metric services, and a singleton instance of <code>MetricsService</code>, and then builds and returns a service provider that can be used to resolve these services.</p><p>Let’s write a test for user click metrics using <code>MetricCollector&lt;int&gt;</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GivenMetricsConfigured_WhenUserClickRecorded_ThenCounterCaptured</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Arrange</span></span>
<span class="line">    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> services <span class="token operator">=</span> <span class="token function">CreateServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> metrics <span class="token operator">=</span> services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MetricsService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> meterFactory <span class="token operator">=</span> services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMeterFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> collector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MetricCollector<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>meterFactory<span class="token punctuation">,</span> <span class="token string">&quot;Metrics.Service&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;metrics.service.user_clicks&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Act</span></span>
<span class="line">    metrics<span class="token punctuation">.</span><span class="token function">RecordUserClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Assert</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> measurements <span class="token operator">=</span> collector<span class="token punctuation">.</span><span class="token function">GetMeasurementSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    Assert<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>measurements<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> measurements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This test verifies that <code>MetricsService</code> accurately records a user’s click. It sets up the required services and metrics collector and then calls the <code>RecordUserClick()</code> method in <code>MetricsService</code>. Afterward, it checks that the metrics collector has captured exactly one user click. Here, the metric collector will collect the specified metrics and return a snapshot of the measurements collected.</p><p>Similarly, let’s write a test for request metrics which uses <code>ObservableCounter</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GivenMetricsConfigured_WhenRequestRecorded_ThenObservableCounterCaptured</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Arrange</span></span>
<span class="line">    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> services <span class="token operator">=</span> <span class="token function">CreateServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> metrics <span class="token operator">=</span> services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MetricsService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> meterFactory <span class="token operator">=</span> services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMeterFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> collector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MetricCollector<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>meterFactory<span class="token punctuation">,</span> <span class="token string">&quot;Metrics.Service&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;metrics.service.requests&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Act</span></span>
<span class="line">    metrics<span class="token punctuation">.</span><span class="token function">RecordRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Assert</span></span>
<span class="line">    collector<span class="token punctuation">.</span><span class="token function">RecordObservableInstruments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> measurements <span class="token operator">=</span> collector<span class="token punctuation">.</span><span class="token function">GetMeasurementSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    Assert<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>measurements<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> measurements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This test verifies that the <code>MetricsService</code> accurately records a request. It sets up the necessary components, including a <code>MetricsService</code> and a <code>MetricCollector</code>, to capture metrics. The test then calls the <code>RecordRequest()</code> method on the <code>MetricsService</code> and checks that the observable counter for requests is incremented by one.</p><p>When collecting observable metrics (<code>ObservableCounter</code>, <code>ObservableGauge</code>, etc), we need to call the <code>RecordObservableInstruments()</code> method on the <code>MetricsCollector</code> to scan all the observable metrics.</p><p>The <code>MetricCollector</code> simplifies the process of writing tests for the various metric collections in our application.</p><hr><h2 id="imeterfactory-best-practices" tabindex="-1"><a class="header-anchor" href="#imeterfactory-best-practices"><span>IMeterFactory Best Practices</span></a></h2><p>Let’s explore best practices for choosing and implementing <strong>IMeterFactory</strong> instruments. <strong>For DI-aware libraries, avoid static variables and opt for dependency injection (DI) instead</strong>.</p>`,65)),s("p",null,[n[21]||(n[21]=a("When creating a Meter, it’s important to choose a unique name. As discussed earlier, follow ")),s("a",T,[n[18]||(n[18]=a("OpenTelemetry naming guidelines (")),e(c,{icon:"iconfont icon-github"}),n[19]||(n[19]=s("code",null,"open-telemetry/semantic-conventions",-1)),n[20]||(n[20]=a(")"))]),n[22]||(n[22]=a(" using a lowercase, dotted hierarchical structure and underscores to separate words for naming all constructs. Ensure the instrument name is unique across the system, often incorporating assembly or namespace names."))]),n[30]||(n[30]=s("p",null,"We should always choose the appropriate instrument based on need; however, keep in mind that the Observable equivalents may perform better in performance-intensive scenarios, such as when there are more than one million calls per second per thread.",-1)),n[31]||(n[31]=s("p",null,[a("If we need to understand the distribution’s tail, such as the 90th, 95th, and 99th percentiles, instead of just averages, use a histogram to measure event timings. For measuring cache, queue, and file sizes, opt for an "),s("code",null,"UpDownCounter"),a(" or "),s("code",null,"ObservableUpDownCounter"),a(" based on ease of integration into existing code, either through API calls for increments and decrements or a callback for current values from a maintained variable.")],-1)),s("p",null,[n[24]||(n[24]=a(".NET APIs allow any string as a unit, but utilizing ")),s("a",q,[e(c,{icon:"fas fa-globe"}),n[23]||(n[23]=a("UCUM"))]),n[25]||(n[25]=a(", the international standard for unit names is advisable. For multi-dimensional metrics, the API accepts any object as the tag value. However, collection tools typically expect numeric types and strings, making it crucial to provide these formats. Additionally, it’s recommended to follow the naming guidelines for tag names."))]),n[32]||(n[32]=s("hr",null,null,-1)),n[33]||(n[33]=s("h2",{id:"conclusion",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#conclusion"},[s("span",null,"Conclusion")])],-1)),n[34]||(n[34]=s("p",null,"In this article, we discussed how to set up IMeterFactory in an ASP.NET Core Web API to effectively track various metrics. We looked at how to display these metrics using the dotnet-counters tool and shared tips for choosing and using the different metrics. Finally, we wrapped up with a discussion of best practices and testing metric collection in our code.",-1)),h(" TODO: add ARTICLE CARD "),e(i,r(u({title:"Measure Application Performance in .NET Using IMeterFactory",desc:"In this article, we'll learn how to measure the performance an ASP.NET Core Web API application using IMeterFactory.",link:"https://chanhi2000.github.io/bookshelf/code-maze.com/dotnet-imeterfactory-application-performance.html",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16)])}const R=k(y,[["render",I]]),U=JSON.parse('{"path":"/code-maze.com/dotnet-imeterfactory-application-performance.html","title":"Measure Application Performance in .NET Using IMeterFactory","lang":"en-US","frontmatter":{"lang":"en-US","title":"Measure Application Performance in .NET Using IMeterFactory","description":"Article(s) > Measure Application Performance in .NET Using IMeterFactory","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","code-maze.com","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Measure Application Performance in .NET Using IMeterFactory\\",\\"image\\":[\\"https://code-maze.com/wp-content/uploads/2021/12/social-dotnet-core.png\\"],\\"datePublished\\":\\"2025-02-26T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Muhammed Saleem\\",\\"url\\":\\"https://code-maze.com/author/muhammed-saleem/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/dotnet-imeterfactory-application-performance.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Measure Application Performance in .NET Using IMeterFactory"}],["meta",{"property":"og:description","content":"Article(s) > Measure Application Performance in .NET Using IMeterFactory"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://code-maze.com/wp-content/uploads/2021/12/social-dotnet-core.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://code-maze.com/wp-content/uploads/2021/12/social-dotnet-core.png"}],["meta",{"name":"twitter:image:alt","content":"Measure Application Performance in .NET Using IMeterFactory"}],["meta",{"property":"article:author","content":"Muhammed Saleem"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-02-26T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Measure Application Performance in .NET Using IMeterFactory"},{"property":"og:description","content":"Measure Application Performance in .NET Using IMeterFactory"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/dotnet-imeterfactory-application-performance.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-02-26T00:00:00.000Z","isOriginal":false,"author":[{"name":"Muhammed Saleem","url":"https://code-maze.com/author/muhammed-saleem/"}],"cover":"https://code-maze.com/wp-content/uploads/2021/12/social-dotnet-core.png"},"git":{},"readingTime":{"minutes":9.94,"words":2981},"filePathRelative":"code-maze.com/dotnet-imeterfactory-application-performance.md","copyright":{"author":"Muhammed Saleem"}}');export{R as comp,U as data};
