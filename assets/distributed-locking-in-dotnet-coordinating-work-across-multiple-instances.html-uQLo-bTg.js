import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as e,b as c,a as b,t as h,n as r,g as u,w as o,e as a,r as i,o as y}from"./app-BVguHYKu.js";const w={},f={id:"frontmatter-title-관련",tabindex:"-1"},L={class:"header-anchor",href:"#frontmatter-title-관련"},D={class:"table-of-contents"},S={href:"https://learn.microsoft.com/en-us/dotnet/api/system.threading.lock",target:"_blank",rel:"noopener noreferrer"},A={href:"https://postgresql.org/docs/current/explicit-locking.html#ADVISORY-LOCKS",target:"_blank",rel:"noopener noreferrer"},I={href:"https://learn.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-getapplock-transact-sql",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/madelson/DistributedLock",target:"_blank",rel:"noopener noreferrer"},C={href:"https://redis.io/docs/latest/develop/clients/patterns/distributed-locks/",target:"_blank",rel:"noopener noreferrer"};function E(d,n){const p=i("VPCard"),l=i("router-link"),k=i("SiteInfo"),g=i("RouteLink"),t=i("VPIcon");return y(),v("div",null,[s("h1",f,[s("a",L,[s("span",null,h(d.$frontmatter.title)+" 관련",1)])]),e(p,r(u({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(p,r(u({title:"PostgreSQL > Article(s)",desc:"Article(s)",link:"/data-science/postgresql/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(p,r(u({title:"Redis > Article(s)",desc:"Article(s)",link:"/data-science/redis/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",D,[s("ul",null,[s("li",null,[e(l,{to:"#why-and-when-you-need-distributed-locking"},{default:o(()=>n[0]||(n[0]=[a("Why and When You Need Distributed Locking")])),_:1,__:[0]})]),s("li",null,[e(l,{to:"#diy-distributed-locking-with-postgresql-advisory-locks"},{default:o(()=>n[1]||(n[1]=[a("DIY Distributed Locking with PostgreSQL Advisory Locks")])),_:1,__:[1]})]),s("li",null,[e(l,{to:"#exploring-the-distributedlock-library"},{default:o(()=>n[2]||(n[2]=[a("Exploring the DistributedLock Library")])),_:1,__:[2]})]),s("li",null,[e(l,{to:"#wrapping-up"},{default:o(()=>n[3]||(n[3]=[a("Wrapping Up")])),_:1,__:[3]})])])]),n[30]||(n[30]=s("hr",null,null,-1)),e(k,{name:"Distributed Locking in .NET: Coordinating Work Across Multiple Instances",desc:"Learn how to coordinate work across multiple application instances using distributed locking in .NET, preventing race conditions and ensuring data consistency in scaled-out systems. Explore implementation approaches from PostgreSQL advisory locks to the DistributedLock library for production-ready solutions.",url:"https://milanjovanovic.tech/blog/distributed-locking-in-dotnet-coordinating-work-across-multiple-instances",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_160.png"}),n[31]||(n[31]=s("p",null,"When you build applications that run across multiple servers or processes, you eventually run into the problem of concurrent access. Multiple workers try to update the same resource at the same time, and you end up with race conditions, duplicated work, or corrupted data.",-1)),s("p",null,[n[5]||(n[5]=a(".NET provides excellent ")),e(g,{to:"/milanjovanovic.tech/introduction-to-locking-and-concurrency-control-in-dotnet-6.html"},{default:o(()=>n[4]||(n[4]=[s("strong",null,"concurrency control primitives",-1)])),_:1,__:[4]}),n[6]||(n[6]=a(" for single-process scenarios, like ")),n[7]||(n[7]=s("code",null,"lock",-1)),n[8]||(n[8]=a(", ")),n[9]||(n[9]=s("code",null,"SemaphoreSlim",-1)),n[10]||(n[10]=a(", and ")),n[11]||(n[11]=s("code",null,"Mutex",-1)),n[12]||(n[12]=a(". But when your application is scaled out across multiple instances, these primitives don't work anymore."))]),n[32]||(n[32]=s("p",null,[a("That's where "),s("strong",null,"distributed locking"),a(" comes in.")],-1)),n[33]||(n[33]=s("p",null,[a("Distributed locking provides a solution by ensuring "),s("strong",null,"only one node"),a(" (application instance) can access a critical section at a time, preventing race conditions and maintaining data consistency "),s("strong",null,"across your distributed system"),a(".")],-1)),n[34]||(n[34]=s("hr",null,null,-1)),n[35]||(n[35]=s("h2",{id:"why-and-when-you-need-distributed-locking",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#why-and-when-you-need-distributed-locking"},[s("span",null,"Why and When You Need Distributed Locking")])],-1)),s("p",null,[n[14]||(n[14]=a("In a single-process app, you can just use ")),n[15]||(n[15]=s("code",null,"lock",-1)),n[16]||(n[16]=a(" or the new ")),s("a",S,[e(t,{icon:"fa-brands fa-microsoft"}),n[13]||(n[13]=a("Lock class"))]),n[17]||(n[17]=a(" in .NET 10. But once you scale out, that's not enough, because each process has its own memory space."))]),n[36]||(n[36]=c('<p>A few common cases where distributed locks are valuable:</p><ul><li><strong>Background jobs</strong>: ensuring only one worker processes a particular job or resource at a time.</li><li><strong>Leader election</strong>: choosing a single process to perform periodic work (like applying async database projections).</li><li><strong>Avoiding double execution</strong>: ensuring scheduled tasks don&#39;t run multiple times when deployed to multiple instances.</li><li><strong>Coordinating shared resources</strong>: e.g., only one service instance performing a migration or cleanup at a time.</li><li><strong>Cache stampede prevention</strong>: ensuring only one instance refreshes the cache when a given cache key expires.</li></ul><p>The key value: consistency and safety across distributed environments. Without this, you risk duplicate operations, corrupted state, or unnecessary load.</p><p>Now you know why distributed locking is important.</p><p>Let&#39;s look at some implementation options.</p><hr><h2 id="diy-distributed-locking-with-postgresql-advisory-locks" tabindex="-1"><a class="header-anchor" href="#diy-distributed-locking-with-postgresql-advisory-locks"><span>DIY Distributed Locking with PostgreSQL Advisory Locks</span></a></h2>',7)),s("p",null,[n[19]||(n[19]=a("Let's start simple. PostgreSQL has a feature called ")),s("a",A,[e(t,{icon:"iconfont icon-postgresql"}),n[18]||(n[18]=a("advisory locks"))]),n[20]||(n[20]=a(" that's perfect for distributed locking. Unlike table locks, these don't interfere with your data - they're purely for coordination."))]),n[37]||(n[37]=c(`<p>Here&#39;s an example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NightlyReportService</span><span class="token punctuation">(</span><span class="token class-name">NpgsqlDataSource</span> dataSource<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ProcessNightlyReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">OpenConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> key <span class="token operator">=</span> <span class="token function">HashKey</span><span class="token punctuation">(</span><span class="token string">&quot;nightly-report&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> acquired <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ExecuteScalarAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">&quot;SELECT pg_try_advisory_lock(@key)&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token punctuation">{</span> key <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>acquired<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConflictException</span><span class="token punctuation">(</span><span class="token string">&quot;Another instance is already processing the nightly report&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">try</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">await</span> <span class="token function">DoWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">finally</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token string">&quot;SELECT pg_advisory_unlock(@key)&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token keyword">new</span> <span class="token punctuation">{</span> key <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token function">HashKey</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        BitConverter<span class="token punctuation">.</span><span class="token function">ToInt64</span><span class="token punctuation">(</span>SHA256<span class="token punctuation">.</span><span class="token function">HashData</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">Task</span> <span class="token function">DoWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Your actual work here</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here&#39;s what&#39;s happening under the hood.</p><p>First, we convert our lock name into a number. PostgreSQL <strong>advisory locks need numeric keys</strong>, so we hash <code>nightly-report</code> into a 64-bit integer. Every node (application instance) must generate the same number for the same string, or this won&#39;t work.</p><p>Next, <code>pg_try_advisory_lock()</code> attempts to grab an exclusive lock on that number. It returns <code>true</code> if successful, <code>false</code> if another connection already holds it. This call doesn&#39;t block - it tells you immediately whether you got the lock.</p><p>If we get the lock, we do our work. If not, we return a conflict response and let the other instance handle it.</p><p>The <code>finally</code> block ensures we always release the lock, even if something goes wrong. PostgreSQL also <strong>automatically releases advisory locks when connections close</strong>, which is a nice safety net.</p>`,7)),s("p",null,[n[22]||(n[22]=a("SQL Server has a similar feature with ")),s("a",I,[e(t,{icon:"iconfont icon-postgresql"}),n[21]||(n[21]=s("code",null,"sp_getapplock",-1))]),n[23]||(n[23]=a("."))]),n[38]||(n[38]=s("hr",null,null,-1)),n[39]||(n[39]=s("h2",{id:"exploring-the-distributedlock-library",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exploring-the-distributedlock-library"},[s("span",null,"Exploring the DistributedLock Library")])],-1)),s("p",null,[n[25]||(n[25]=a("While the DIY approach works, production applications need more sophisticated features. The ")),s("a",x,[e(t,{icon:"iconfont icon-github"}),n[24]||(n[24]=s("code",null,"madelson/DistributedLock",-1))]),n[26]||(n[26]=a(" library handles the edge cases and provides multiple backend options (Postgres, Redis, SqlServer, etc.). You know I'm a fan of not reinventing the wheel, so this is a great choice."))]),n[40]||(n[40]=c(`<p>Install the package:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> DistributedLock</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>I&#39;ll use the approach with <code>IDistributedLockProvider</code> which works nicely with DI. You can acquire a lock without having to know anything about the underlying infrastructure. All you have to do is register a lock provider implementation in your DI container.</p><p>For example, using Postgres:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Register the distributed lock provider</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDistributedLockProvider<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PostgresDistributedSynchronizationProvider</span><span class="token punctuation">(</span></span>
<span class="line">            builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;distributed-locking&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),s("p",null,[n[28]||(n[28]=a("Or if you want to use Redis with the ")),s("a",C,[e(t,{icon:"iconfont icon-redis"}),n[27]||(n[27]=a("Redlock algorithm"))]),n[29]||(n[29]=a(":"))]),n[41]||(n[41]=c(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Requires StackExchange.Redis</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IConnectionMultiplexer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> ConnectionMultiplexer<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span></span>
<span class="line">            builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;redis&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Register the distributed lock provider</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IDistributedLockProvider<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span>sp<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> connectionMultiplexer <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IConnectionMultiplexer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisDistributedSynchronizationProvider</span><span class="token punctuation">(</span>connectionMultiplexer<span class="token punctuation">.</span><span class="token function">GetDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The usage is straightforward:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// You can also pass in a timeout, where the provider will keep retrying to acquire the lock</span></span>
<span class="line"><span class="token comment">// until the timeout is reached.</span></span>
<span class="line"><span class="token class-name">IDistributedSynchronizationHandle<span class="token punctuation">?</span></span> distributedLock <span class="token operator">=</span> distributedLockProvider</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">TryAcquireLock</span><span class="token punctuation">(</span><span class="token string">&quot;nightly-report&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// If we didn&#39;t get the lock, the object will be null</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>distributedLock <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Conflict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// It&#39;s important to wrap the lock in a using statement to ensure it&#39;s released properly</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token punctuation">(</span>distributedLock<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">DoWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The library handles all the tricky parts: timeouts, retries, and ensuring locks are released even in failure scenarios.</p><p>It also supports many backends (SQL Server, Azure, ZooKeeper, etc.), making it a solid choice for production workloads.</p><hr><h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="#wrapping-up"><span>Wrapping Up</span></a></h2><p><strong>Distributed locking</strong> isn&#39;t something you need every day. But when you do, it saves you from subtle, painful bugs that only appear under load or in production.</p><p><strong>Start simple</strong>: if you&#39;re already using Postgres, <strong>advisory locks</strong> are a powerful tool.</p><p>For a cleaner developer experience, reach for the <strong>DistributedLock library</strong>.</p><p>Choose the backend that fits your infrastructure (Postgres, Redis, SQL Server, etc.).</p><p>The right lock at the right time ensures your system stays consistent, reliable, and resilient, even across multiple processes and servers.</p><hr>`,13)),b(" TODO: add ARTICLE CARD "),e(p,r(u({title:"Distributed Locking in .NET: Coordinating Work Across Multiple Instances",desc:"Learn how to coordinate work across multiple application instances using distributed locking in .NET, preventing race conditions and ensuring data consistency in scaled-out systems. Explore implementation approaches from PostgreSQL advisory locks to the DistributedLock library for production-ready solutions.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/distributed-locking-in-dotnet-coordinating-work-across-multiple-instances.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const P=m(w,[["render",E]]),N=JSON.parse('{"path":"/milanjovanovic.tech/distributed-locking-in-dotnet-coordinating-work-across-multiple-instances.html","title":"Distributed Locking in .NET: Coordinating Work Across Multiple Instances","lang":"en-US","frontmatter":{"lang":"en-US","title":"Distributed Locking in .NET: Coordinating Work Across Multiple Instances","description":"Article(s) > Distributed Locking in .NET: Coordinating Work Across Multiple Instances","icon":"iconfont icon-csharp","category":["C#","DotNet","Data Science","PostgreSQL","Redis","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet","data-science","sql","postgres","postgresql","redis"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Distributed Locking in .NET: Coordinating Work Across Multiple Instances\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_160.png\\"],\\"datePublished\\":\\"2025-09-20T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/distributed-locking-in-dotnet-coordinating-work-across-multiple-instances.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Distributed Locking in .NET: Coordinating Work Across Multiple Instances"}],["meta",{"property":"og:description","content":"Article(s) > Distributed Locking in .NET: Coordinating Work Across Multiple Instances"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_160.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_160.png"}],["meta",{"name":"twitter:image:alt","content":"Distributed Locking in .NET: Coordinating Work Across Multiple Instances"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:tag","content":"postgresql"}],["meta",{"property":"article:tag","content":"postgres"}],["meta",{"property":"article:tag","content":"sql"}],["meta",{"property":"article:tag","content":"data-science"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-09-20T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Distributed Locking in .NET: Coordinating Work Across Multiple Instances"},{"property":"og:description","content":"Distributed Locking in .NET: Coordinating Work Across Multiple Instances"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/distributed-locking-in-dotnet-coordinating-work-across-multiple-instances.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-09-20T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_160.png"},"git":{},"readingTime":{"minutes":4.3,"words":1289},"filePathRelative":"milanjovanovic.tech/distributed-locking-in-dotnet-coordinating-work-across-multiple-instances.md","copyright":{"author":"Milan Jovanović"}}');export{P as comp,N as data};
