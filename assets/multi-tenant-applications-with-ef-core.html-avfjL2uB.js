import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as a,b as i,t as m,n as k,g as v,w as e,e as t,r as p,o as h}from"./app-BVguHYKu.js";const b={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"};function C(l,n){const c=p("VPCard"),o=p("router-link"),r=p("SiteInfo"),u=p("RouteLink");return h(),g("div",null,[s("h1",y,[s("a",w,[s("span",null,m(l.$frontmatter.title)+" 관련",1)])]),a(c,k(v({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",f,[s("ul",null,[s("li",null,[a(o,{to:"#how-to-use-ef-core-query-filters"},{default:e(()=>n[0]||(n[0]=[t("How To Use EF Core Query Filters")])),_:1,__:[0]})]),s("li",null,[a(o,{to:"#single-database-multi-tenancy-with-ef-core"},{default:e(()=>n[1]||(n[1]=[t("Single Database Multi-Tenancy With EF Core")])),_:1,__:[1]})]),s("li",null,[a(o,{to:"#separate-databases-multi-tenancy-with-ef-core"},{default:e(()=>n[2]||(n[2]=[t("Separate Databases Multi-Tenancy With EF Core")])),_:1,__:[2]})]),s("li",null,[a(o,{to:"#closing-thoughts"},{default:e(()=>n[3]||(n[3]=[t("Closing Thoughts")])),_:1,__:[3]})])])]),n[8]||(n[8]=s("hr",null,null,-1)),a(r,{name:"Multi-Tenant Applications With EF Core",desc:"Most software applications today are built around the concept of multi-tenancy. One application serves multiple customers, while keeping their data isolated. You can approach multi-tenancy in two ways: - Single database & logical isolation of tenants - Multiple databases & physical isolation of tenants Which option you decide to use will depend mostly on your requirements. Some industries like healthcare require a high degree of data isolation, and using a database per tenant is a must. So how are we going to implement multi-tenancy support with EF Core? We can use Query Filters to apply a tenant filter to all database queries.",url:"https://milanjovanovic.tech/blog/multi-tenant-applications-with-ef-core/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_038.png"}),n[9]||(n[9]=i('<p>Most software applications today are built around the concept of <strong>multi-tenancy</strong>.</p><p>One application serves multiple customers, while keeping their data <strong>isolated</strong>.</p><p>You can approach <strong>multi-tenancy</strong> in two ways:</p><ul><li><strong>Single database</strong> and <strong>logical isolation</strong> of tenants</li><li><strong>Multiple databases</strong> and <strong>physical isolation</strong> of tenants</li></ul><p>Which option you decide to use will depend mostly on your requirements. Some industries like healthcare require a high degree of <strong>data isolation</strong>, and using a <strong>database per tenant</strong> is a must.</p><p>So how are we going to <strong>implement multi-tenancy</strong> support with <strong>EF Core</strong>?</p><p>We can use <strong>Query Filters</strong> to apply a <strong>tenant filter</strong> to all database queries.</p><p>Implement it once and you can almost forget about it.</p><p>Let&#39;s see what are some of the problems we need to solve.</p><hr><h2 id="how-to-use-ef-core-query-filters" tabindex="-1"><a class="header-anchor" href="#how-to-use-ef-core-query-filters"><span>How To Use EF Core Query Filters</span></a></h2>',11)),s("p",null,[n[5]||(n[5]=t("If you want an in-depth dive into ")),n[6]||(n[6]=s("strong",null,"Query filters",-1)),n[7]||(n[7]=t(", take a look at the newsletter issue where I talked about ")),a(u,{to:"/milanjovanovic.tech/how-to-use-global-query-filters-in-ef-core.html"},{default:e(()=>n[4]||(n[4]=[s("strong",null,"using query filters with EF Core.",-1)])),_:1,__:[4]})]),n[10]||(n[10]=i(`<p>Here&#39;s a quick refresher on <strong>Query filters</strong>:</p><ul><li>Configure the <strong>query filter</strong> by calling <code>HasQueryFilter</code> for your entity</li><li><strong>EF</strong> will apply it to all queries for that entity</li><li>You can turn it off with <code>IgnoreQueryFilters</code></li><li>Only <strong>one</strong> query filter <strong>per entity</strong> is allowed</li></ul><p>And here&#39;s a simple example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">modelBuilder</span>
<span class="line">   <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">HasQueryFilter</span><span class="token punctuation">(</span>order <span class="token operator">=&gt;</span> <span class="token operator">!</span>order<span class="token punctuation">.</span>IsDeleted<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All queries to the <code>Order</code> table will include an <code>IsDeleted = FALSE</code> condition.</p><hr><h2 id="single-database-multi-tenancy-with-ef-core" tabindex="-1"><a class="header-anchor" href="#single-database-multi-tenancy-with-ef-core"><span>Single Database Multi-Tenancy With EF Core</span></a></h2><p>You will need two things to <strong>implement multi-tenancy</strong> on a <strong>single database</strong>:</p><ul><li>A way to know <strong>who</strong> the <strong>current tenant</strong> is</li><li>A way to <strong>filter</strong> the <strong>data</strong> for that <strong>tenant</strong> only</li></ul><p>The typical approach for <strong>multi-tenancy</strong> on a <strong>single database</strong> is having a <code>TenantId</code> column in your tables. And then filtering on that column when querying the database.</p><p>You can use the <strong>Query filters</strong> feature in <strong>EF Core</strong> to apply a <strong>global filter</strong> for some entity.</p><p>Inside of the <code>OnModelCreating</code> method we configure the query filter on the <code>Order</code> entity:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrdersDbContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DbContext</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> _tenantId<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">OrdersDbContext</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">DbContextOptions<span class="token punctuation">&lt;</span>OrdersDbContext<span class="token punctuation">&gt;</span></span> options<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">TenantProvider</span> tenantProvider<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _tenantId <span class="token operator">=</span> tenantProvider<span class="token punctuation">.</span>TenantId<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span><span class="token class-name">ModelBuilder</span> modelBuilder<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        modelBuilder</span>
<span class="line">            <span class="token punctuation">.</span>Entity<span class="token operator">&lt;</span>Order<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">HasQueryFilter</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>TenantId <span class="token operator">==</span> _tenantId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;re using the <code>TenantProvider</code> class to get the <strong>current tenant</strong> value.</p><p>Here&#39;s what the <code>TenantProvider</code> implementation looks like:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">TenantProvider</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> TenantIdHeaderName <span class="token operator">=</span> <span class="token string">&quot;X-TenantId&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IHttpContextAccessor</span> _httpContextAccessor<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">TenantProvider</span><span class="token punctuation">(</span><span class="token class-name">IHttpContextAccessor</span> httpContextAccessor<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _httpContextAccessor <span class="token operator">=</span> httpContextAccessor<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> TenantId <span class="token operator">=&gt;</span> _httpContextAccessor</span>
<span class="line">        <span class="token punctuation">.</span>HttpContext</span>
<span class="line">        <span class="token punctuation">.</span>Request</span>
<span class="line">        <span class="token punctuation">.</span>Headers<span class="token punctuation">[</span>TenantIdHeaderName<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>TenantId</code> is coming from the HTTP request header in this example.</p><p>A few other options to get the <code>TenantId</code> are:</p><ul><li>Query string - <code>api/orders?tenantId=example-tenant-id</code></li><li>JWT Claim</li><li>API Key</li></ul><p>If you want a more <strong>secure implementation</strong> you should go with <strong>JWT Claims</strong> or <strong>API Keys</strong> to provide the <code>TenantId</code> value.</p><hr><h2 id="separate-databases-multi-tenancy-with-ef-core" tabindex="-1"><a class="header-anchor" href="#separate-databases-multi-tenancy-with-ef-core"><span>Separate Databases Multi-Tenancy With EF Core</span></a></h2><p>What if we want to <strong>isolate</strong> each tenant to a <strong>separate database</strong>?</p><p>Here are the changes we need to make:</p><ul><li>Applying different <strong>connection string per tenant</strong></li><li>Resolving the connection string for each tenant <em>somehow</em></li></ul><p>You can&#39;t use <strong>Query filters</strong> here, since we are working with different databases.</p><p>So you will need to store the <strong>tenant information</strong> and <strong>connection strings</strong> somewhere.</p><p>A simple example would be store them in the <strong>application settings</strong>:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token property">&quot;Tenants&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token property">&quot;Id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tenant-1&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;ConnectionString&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Host=tenant1.db;Database=tenant1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token property">&quot;Id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tenant-2&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;ConnectionString&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Host=tenant2.db;Database=tenant2&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can then register an <code>IOptions</code> instance with a list of <code>Tenant</code> objects.</p><p>And we need to slightly modify the <code>TenantProvider</code> class to return a <strong>connection string</strong> for the current tenant:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">TenantProvider</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> TenantIdHeaderName <span class="token operator">=</span> <span class="token string">&quot;X-TenantId&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IHttpContextAccessor</span> _httpContextAccessor<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">TenantSettings</span> _tenantSettings<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">TenantProvider</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">IHttpContextAccessor</span> httpContextAccessor<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">IOptions<span class="token punctuation">&lt;</span>TenantSettings<span class="token punctuation">&gt;</span></span> tenantsOptions<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _httpContextAccessor <span class="token operator">=</span> httpContextAccessor<span class="token punctuation">;</span></span>
<span class="line">        _tenants <span class="token operator">=</span> tenantsOptions<span class="token punctuation">.</span>Value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> TenantId <span class="token operator">=&gt;</span> _httpContextAccessor</span>
<span class="line">        <span class="token punctuation">.</span>HttpContext</span>
<span class="line">        <span class="token punctuation">.</span>Request</span>
<span class="line">        <span class="token punctuation">.</span>Headers<span class="token punctuation">[</span>TenantIdHeaderName<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> _tenantSettings<span class="token punctuation">.</span>Tenants<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Id <span class="token operator">==</span> TenantId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And the last part is registering your <code>DbContext</code> to <strong>dynamically resolve</strong> the <strong>connection string</strong> for the current <strong>tenant</strong>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrdersDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> o<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> tenantProvider <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TenantProvider<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> connectionString <span class="token operator">=</span> tenantProvider<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    o<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On every request, we create a new <code>OrdersDbContext</code> and connect to the appropriate database for that tenant.</p><p>You should definitely consider storing the tenant <strong>connection strings</strong> in a <strong>secure</strong> place like <strong>Azure Key Vault</strong>.</p><hr><h2 id="closing-thoughts" tabindex="-1"><a class="header-anchor" href="#closing-thoughts"><span>Closing Thoughts</span></a></h2><p>I hope you now have a better understanding of how to build a <strong>multi-tenant system</strong> with <strong>EF Core</strong>.</p><p>I showed you the bare bones implementation, which you can improve to make it more robust and secure.</p><p>Building <strong>multi-tenant systems</strong> isn&#39;t easy, but when you understand the basic principles it shouldn&#39;t be too difficult either.</p><p>That&#39;s all for this week.</p><p>See you next Saturday.</p>`,43))])}const q=d(b,[["render",C]]),x=JSON.parse('{"path":"/milanjovanovic.tech/multi-tenant-applications-with-ef-core.html","title":"Multi-Tenant Applications With EF Core","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Multi-Tenant Applications With EF Core","description":"Article(s) > Multi-Tenant Applications With EF Core","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Multi-Tenant Applications With EF Core\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_038.png\\"],\\"datePublished\\":\\"2023-05-20T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/multi-tenant-applications-with-ef-core.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Multi-Tenant Applications With EF Core"}],["meta",{"property":"og:description","content":"Article(s) > Multi-Tenant Applications With EF Core"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_038.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_038.png"}],["meta",{"name":"twitter:image:alt","content":"Multi-Tenant Applications With EF Core"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-05-20T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Multi-Tenant Applications With EF Core"},{"property":"og:description","content":"Multi-Tenant Applications With EF Core"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/multi-tenant-applications-with-ef-core.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-05-20T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_038.png"},"git":{},"readingTime":{"minutes":3.4,"words":1020},"filePathRelative":"milanjovanovic.tech/multi-tenant-applications-with-ef-core.md","copyright":{"author":"Milan Jovanović"}}');export{q as comp,x as data};
