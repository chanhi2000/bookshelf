import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as e,b as c,a as v,t as g,n as o,g as l,w as i,e as a,r,o as y}from"./app-BVguHYKu.js";const b={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},T={class:"hint-container info"},S={href:"https://css-tricks.com/almanac/properties/o/opacity/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://css-tricks.com/almanac/properties/b/background-image/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/cos",target:"_blank",rel:"noopener noreferrer"},D={class:"hint-container info"};function L(d,n){const p=r("VPCard"),t=r("router-link"),h=r("SiteInfo"),u=r("VPIcon");return y(),k("div",null,[s("h1",f,[s("a",w,[s("span",null,g(d.$frontmatter.title)+" 관련",1)])]),e(p,o(l({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(p,o(l({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[e(t,{to:"#clean-up"},{default:i(()=>n[0]||(n[0]=[a("Clean Up")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#scripting"},{default:i(()=>n[1]||(n[1]=[a("Scripting")])),_:1,__:[1]})]),s("li",null,[e(t,{to:"#fail-safe"},{default:i(()=>n[2]||(n[2]=[a("Fail Safe")])),_:1,__:[2]})]),s("li",null,[e(t,{to:"#counting-layers"},{default:i(()=>n[3]||(n[3]=[a("Counting Layers")])),_:1,__:[3]})]),s("li",null,[e(t,{to:"#adding-content"},{default:i(()=>n[4]||(n[4]=[a("Adding Content")])),_:1,__:[4]})]),s("li",null,[e(t,{to:"#normalizing-height"},{default:i(()=>n[5]||(n[5]=[a("Normalizing Height")])),_:1,__:[5]})]),s("li",null,[e(t,{to:"#counter-interaction"},{default:i(()=>n[6]||(n[6]=[a("Counter Interaction")])),_:1,__:[6]})]),s("li",null,[e(t,{to:"#hovering-links"},{default:i(()=>n[7]||(n[7]=[a("Hovering Links")])),_:1,__:[7]})]),s("li",null,[e(t,{to:"#mouse-position"},{default:i(()=>n[8]||(n[8]=[a("Mouse Position")])),_:1,__:[8]})]),s("li",null,[e(t,{to:"#position-elements"},{default:i(()=>n[9]||(n[9]=[a("Position Elements")])),_:1,__:[9]})]),s("li",null,[e(t,{to:"#the-moving-red-dot"},{default:i(()=>n[10]||(n[10]=[a("The Moving Red Dot")])),_:1,__:[10]})]),s("li",null,[e(t,{to:"#normalizing-mouse-position"},{default:i(()=>n[11]||(n[11]=[a("Normalizing Mouse Position")])),_:1,__:[11]})]),s("li",null,[e(t,{to:"#bulging-text"},{default:i(()=>n[12]||(n[12]=[a("Bulging Text")])),_:1,__:[12]})]),s("li",null,[e(t,{to:"#brighter-base"},{default:i(()=>n[13]||(n[13]=[a("Brighter Base")])),_:1,__:[13]})]),s("li",null,[e(t,{to:"#fixing-sizes"},{default:i(()=>n[14]||(n[14]=[a("Fixing Sizes")])),_:1,__:[14]})]),s("li",null,[e(t,{to:"#wrapping-up"},{default:i(()=>n[15]||(n[15]=[a("Wrapping Up")])),_:1,__:[15]})])])]),n[41]||(n[41]=s("hr",null,null,-1)),e(h,{name:"3D Layered Text: Interactivity and Dynamicism",desc:"In this third and final chapter, we’re stepping into interactivity by adding JavaScript, starting with a simple :hover effect, and ending with a fully responsive bulging text that follows your mouse in real time.",url:"https://css-tricks.com/3d-layered-text-interactivity-and-dynamism",logo:"https://css-tricks/favicon.svg",preview:"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/bulging-text.jpg"}),n[42]||(n[42]=s("p",null,"In the previous two chapters, we built a layered 3D text effect, added depth and color, and then brought it to life with motion. We explored static structure, animated variations, and even some clever decoration tricks. But everything so far has been hard-coded.",-1)),n[43]||(n[43]=s("p",null,"This time, we’re going dynamic.",-1)),n[44]||(n[44]=s("p",null,[a("In this final chapter, we’re stepping into the world of interactivity by adding JavaScript into the mix. We’ll start by generating the layers programmatically, giving us more flexibility and cleaner code (and we’ll never have to copy-paste divs again). Then, we’ll add some interaction. Starting with a simple "),s("code",null,":hover"),a(" effect, and ending with a fully responsive bulging text that follows your mouse in real time. Let’s go.")],-1)),s("div",T,[n[16]||(n[16]=s("p",{class:"hint-container-title"},"3D Layered Text Article Series",-1)),e(p,o(l({title:"3D Layered Text: The Basics",desc:"A client asked me to create a bulging text effect. With a bit of cleverness and some advanced CSS, I managed to get a result I’m genuinely proud of, which is covered in this three-part series.",link:"/css-tricks.com/3d-layered-text-the-basics.md",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16),e(p,o(l({title:"3D Layered Text: Motion and Variations",desc:"In this chapter, we will explore ways to animate the effect, add transitions, and play with different variations. We will look at how motion can enhance depth, and how subtle tweaks can create a whole new vibe.",link:"/css-tricks.com/3d-layered-text-motion-and-variations.md",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16),e(p,o(l({title:"3D Layered Text: Interactivity and Dynamicism",desc:"In this third and final chapter, we’re stepping into interactivity by adding JavaScript, starting with a simple :hover effect, and ending with a fully responsive bulging text that follows your mouse in real time.",link:"/css-tricks.com/3d-layered-text-interactivity-and-dynamism.md",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16)]),n[45]||(n[45]=c(`<hr><h2 id="clean-up" tabindex="-1"><a class="header-anchor" href="#clean-up"><span>Clean Up</span></a></h2><p>Before we jump into JavaScript, let us clean things up a bit. We will pause the animations for now and go back to the static example we wrapped up with in the first chapter. No need to touch the CSS just yet. Let us start with the HTML.</p><p>We will strip it down to the bare essentials. All we really need is one element with the text. The class stays. It is still the right one for the job.</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>layeredText<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Lorem Ipsum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="scripting" tabindex="-1"><a class="header-anchor" href="#scripting"><span>Scripting</span></a></h2><p>It is time. Let us start adding some JavaScript. Don’t worry, the impact on performance will be minimal. We’re only using JavaScript to set up the layers and define a few CSS variables. That’s it. All the actual style calculations still happen off the main thread, maintain high frames per second, and don’t stress the browser.</p><p>We will begin with a simple function called <code>generateLayers</code>. This is where all the magic of layer generation will happen. To work its magic, the function will receive the element we want to use as the container for the layers.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">generateLayers</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// magic goes here</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To trigger the function, we will first create a small variable that holds all the elements with the <code>layeredText</code> class. And yes, we can have more than one on the page, as we will see later. Then, we will pass each of these elements into the <code>generateLayers</code> function to generate the layers.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> layeredElements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.layeredText&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">layeredElements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>generateLayers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="fail-safe" tabindex="-1"><a class="header-anchor" href="#fail-safe"><span>Fail Safe</span></a></h2><p>Now let us dive into the <code>generateLayers</code> function itself and start with a small fail safe mechanism. There are situations, especially when working with frameworks or libraries that manage your DOM, where a component might get rendered more than once or a function might run multiple times. It should not happen, but we want to be ready just in case.</p><p>So, before we do anything, we will check if the element already contains a <code>div</code> with the <code>.layers</code> class. If it does, we will simply exit the function and do nothing:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">generateLayers</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.layers&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// rest of the logic goes here</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>In the real world, I would treat this as a chance to catch a rendering bug. Instead of silently returning, I would probably send a message back to the dev team with the relevant data and expect the issue to be fixed.</p></div><hr><h2 id="counting-layers" tabindex="-1"><a class="header-anchor" href="#counting-layers"><span>Counting Layers</span></a></h2><p>One last thing we need to cover before we start building the layers is the number of layers. If you remember, we have a CSS variable called <code>--layers-count</code>, but that will not help us here. Besides, we want this to be more dynamic than a single hardcoded value.</p><p>Here is what we will do. We will define a constant in our JavaScript called <code>DEFAULT_LAYERS_COUNT</code>. As the name suggests, this will be our default value. But we will also allow each element to override it by using an attribute like <code>data-layers=&quot;14&quot;</code>.</p><p>Then we will take that number and push it back into the CSS using <code>setProperty</code> on the parent element, since we rely on that variable in the styles.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token constant">DEFAULT_LAYERS_COUNT</span> <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">generateLayers</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.layers&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">const</span> layersCount <span class="token operator">=</span> element<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>layers <span class="token operator">||</span> <span class="token constant">DEFAULT_LAYERS_COUNT</span><span class="token punctuation">;</span></span>
<span class="line">  element<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;--layers-count&#39;</span><span class="token punctuation">,</span> layersCount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="adding-content" tabindex="-1"><a class="header-anchor" href="#adding-content"><span>Adding Content</span></a></h2><p>Now we have everything we need, and we can finally generate the layers. We will store the original text content in a variable. Then we will build the markup, setting the <code>innerHTML</code> of the parent element to match the structure we used in all the previous examples. That means a <code>span</code> with the original content, followed by a <code>div</code> with the <code>.layers</code> class.</p><p>Inside that <code>div</code>, we will run a loop based on the number of layers, adding a new layer in each iteration:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">generateLayers</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// previous code</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> content <span class="token operator">=</span> element<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;span&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;</span>
<span class="line">    &lt;div class=&quot;layers&quot; aria-hidden=&quot;true&quot;&gt;</span>
<span class="line">      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> layersCount<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div class=&quot;layer&quot; style=&quot;--i: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And that is it. Our 3D text is ready, and all the layers are now built entirely through JavaScript. Try playing around with it. Change the text inside the <code>layeredText</code> element. Add your name, your project name, your brand. Let me know how it looks.</p><p>CodePen Embed Fallback</p><p><strong>Quick note:</strong> I also removed the <code>--layers-count</code> variable from the CSS, since it is now set dynamically with JavaScript. While I was at it, I moved the font settings out of the <code>.layeredText</code> element, since they should be applied globally or to a more appropriate wrapper. Just a bit of housekeeping to keep things clean.</p><hr><h2 id="normalizing-height" tabindex="-1"><a class="header-anchor" href="#normalizing-height"><span>Normalizing Height</span></a></h2><p>Since we already added a way to set the number of layers dynamically, let us take advantage of it.</p><p>Here is an example with three different <code>div</code> elements, each using a different number of layers. The first one (A) has 8 layers, the second (B) has 16, and the third (C) has 24. CodePen Embed Fallback</p><p>You can clearly see the difference in height between the letters, since the total height depends on the number of layers. When it comes to color though, we used the normalized value (remember that?), so the gradient looks consistent regardless of height or layer count.</p><p>We can just as easily normalize the total height of the layers. All we need to do is replace the <code>--layer-offset</code> variable with a new one called <code>--text-height</code>. Instead of setting the distance between each layer, we define the total height for the full stack. That lets us multiply the normalized value by <code>--text-height</code>, and get a consistent size no matter how many layers we have.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.layeredText</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--text-height</span><span class="token punctuation">:</span> 36px<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token selector">.layer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">--n</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span> / <span class="token function">var</span><span class="token punctuation">(</span>--layers-count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--text-height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>200 30% <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span> * 100%<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CodePen Embed Fallback</p><hr><h2 id="counter-interaction" tabindex="-1"><a class="header-anchor" href="#counter-interaction"><span>Counter Interaction</span></a></h2><p>We are ready to start reacting to user input. But before we do anything, we need to think about the things we do <em>not</em> want to interact with, and that means the extra layers.</p><p>We already handled them for screen readers using <code>aria-hidden</code>, but even with regular mouse interactions, these layers can get in the way. In some cases, they might block access to clickable elements underneath.</p><p>To avoid all of that, we will add <code>pointer-events: none;</code> to the <code>.layers</code> element. This makes the layers completely ‘transparent’ to mouse clicks and hover effects.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.layers</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="hovering-links" tabindex="-1"><a class="header-anchor" href="#hovering-links"><span>Hovering Links</span></a></h2><p>Now we can finally start responding to user input and adding a bit of interaction. Let’s say I want to use this 3D effect on links, as a hover effect. It might be a little over the top, but we are here to have fun.</p><p>We will start with this simple markup, just a paragraph of Lorem ipsum, but with two links inside. Each link has the <code>.layeredText</code> class. Right now, those links will already have depth and layers applied, but that is not what we want. We want the 3D effect to appear only on hover.</p>`,50)),s("p",null,[n[18]||(n[18]=a("To make that happen, we will define a new ")),n[19]||(n[19]=s("code",null,":hover",-1)),n[20]||(n[20]=a(" block in ")),n[21]||(n[21]=s("code",null,".layeredText",-1)),n[22]||(n[22]=a(" and move all the 3D related styles into it. That includes the color and shadow of the ")),n[23]||(n[23]=s("code",null,"span",-1)),n[24]||(n[24]=a(", the color and ")),n[25]||(n[25]=s("code",null,"translateZ",-1)),n[26]||(n[26]=a(" of each ")),n[27]||(n[27]=s("code",null,".layer",-1)),n[28]||(n[28]=a(", and to make it look even better, we will also animate the ")),s("a",S,[e(u,{icon:"iconfont icon-css-tricks"}),n[17]||(n[17]=s("code",null,"opacity",-1))]),n[29]||(n[29]=a(" of the layers."))]),n[46]||(n[46]=c(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.layeredText</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">&amp;:hover</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token selector">span</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">text-shadow</span><span class="token punctuation">:</span> 0 0 0.1em #003<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token selector">.layer</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>200 30% <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span> * 100%<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--layer-offset<span class="token punctuation">)</span> + 0.5em<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we need to define the base appearance, the styles that apply when there is no hover. We will give the <code>span</code> and the layers a soft bluish color, apply a simple <code>transition</code>, and set the layers to be fully transparent by default.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.layeredText</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token selector">span, .layer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>200 100% 75%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token selector">.layer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Also, I added <code>display: inline-block;</code> to the <code>.layeredText</code> element. This helps prevent unwanted line breaks and allows us to apply transforms to the element, if needed. The result is a hover effect that literally makes each word pop right off the page:</p><p>CodePen Embed Fallback</p><p>Of course, if you are using this as a hover effect but you also have some elements that should always appear with full depth, you can easily define that in your CSS.</p><p>For example, let us say we have both a heading and a link with the <code>.layeredText</code> class, but we want the heading to always show the full 3D effect. In this case, we can update the hover block selector to target both:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.layeredText</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">&amp;:is(h1, :hover)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* full 3D styles here */</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This way, links will only show the effect on hover, while the heading stays bold and dimensional all the time.</p><p>CodePen Embed Fallback</p><hr><h2 id="mouse-position" tabindex="-1"><a class="header-anchor" href="#mouse-position"><span>Mouse Position</span></a></h2><p>Now we can start working with the mouse position in JavaScript. To do that, we need two things: the position of the mouse on the page, and the position of each element on the page.</p><p>We will start with the mouse position, since that part is easy. All we need to do is add a <code>mousemove</code> listener, and inside it, define two CSS variables on the <code>body</code>: <code>--mx</code> for the horizontal mouse position, and <code>--my</code> for the vertical position.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;--mx&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;--my&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice that I am using <code>e.pageX</code> and <code>e.pageY</code>, not <code>e.clientX</code> and <code>e.clientY</code>. That is because I want the mouse position relative to the entire page, not just the viewport. This way it works correctly even when the page is scrolled.</p><hr><h2 id="position-elements" tabindex="-1"><a class="header-anchor" href="#position-elements"><span>Position Elements</span></a></h2><p>Now we need to get the position of each element, specifically the <code>top</code> and <code>left</code> values. We will define a function called <code>setRects</code> that loops through all <code>layeredElements</code>, finds their position using a <code>getBoundingClientRect</code> function, and sets it to a couple of CSS custom properties.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">setRects</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  layeredElements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> rect <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    element<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;--top&#39;</span><span class="token punctuation">,</span> rect<span class="token punctuation">.</span>top <span class="token operator">+</span> window<span class="token punctuation">.</span>scrollY<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    element<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;--left&#39;</span><span class="token punctuation">,</span> rect<span class="token punctuation">.</span>left <span class="token operator">+</span> window<span class="token punctuation">.</span>scrollX<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once again, I am using <code>window.scrollX</code> and <code>scrollY</code> to get the position relative to the entire page, not just the viewport.</p><p>Keep in mind that reading layout values from the DOM can be expensive in terms of performance, so we want to do it as little as possible. We will run this function once after all the layers are in place, and again only when the page is resized, since that could change the position of the elements.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">setRects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> setRects<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="the-moving-red-dot" tabindex="-1"><a class="header-anchor" href="#the-moving-red-dot"><span>The Moving Red Dot</span></a></h2><p>That is it. We are officially done writing JavaScript for this article. At this point, we have the mouse position and the position of every element stored as CSS values.</p><p>Great. So, what do we do with them?</p>`,27)),s("p",null,[n[31]||(n[31]=a("Remember the examples from the previous chapter where we used ")),s("a",j,[e(u,{icon:"iconfont icon-css-tricks"}),n[30]||(n[30]=s("code",null,"background-image",-1))]),n[32]||(n[32]=a("? That is the key. Let us take that same idea and use a simple radial gradient, from red to white."))]),n[47]||(n[47]=c(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.layer</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background-clip</span><span class="token punctuation">:</span> text<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>circle at center<span class="token punctuation">,</span> red 24px<span class="token punctuation">,</span> white 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But instead of placing the center of the circle in the middle of the element, we will shift it based on the mouse position. To calculate the position of the mouse relative to the element, we simply subtract the element’s position from the mouse position. Then we multiply by <code>1px</code>, since the value must be in pixels, and plug it into the <code>at</code> part of the gradient.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.layer</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background-image</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">radial-gradient</span><span class="token punctuation">(</span></span>
<span class="line">      circle at <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--mx<span class="token punctuation">)</span> - <span class="token function">var</span><span class="token punctuation">(</span>--left<span class="token punctuation">)</span><span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--my<span class="token punctuation">)</span> - <span class="token function">var</span><span class="token punctuation">(</span>--top<span class="token punctuation">)</span><span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      red 24px<span class="token punctuation">,</span></span>
<span class="line">      white 0</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The result is text with depth and a small red dot that follows the movement of your mouse.</p><p>CodePen Embed Fallback</p><p>Okay, a small red dot is not exactly mind blowing. But remember, you are not limited to that. Once you have the mouse position, you can use it to drive all sorts of dynamic effects. In just a bit, we will start building the bulging effect that kicked off this entire series, but in other cases, depending on your needs, you might want to normalize the mouse values first.</p><hr><h2 id="normalizing-mouse-position" tabindex="-1"><a class="header-anchor" href="#normalizing-mouse-position"><span>Normalizing Mouse Position</span></a></h2><p>Just like we normalized the index of each layer earlier, we can normalize the mouse position by dividing it by the total width or height of the body. This gives us a value between <code>0</code> and <code>1</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;--nx&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>pageX <span class="token operator">/</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;--ny&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>pageY <span class="token operator">/</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Normalizing the mouse values lets us work with relative positioning that is independent of screen size. This is perfect for things like adding a responsive tilt to the text based on the mouse position.</p><p>CodePen Embed Fallback</p><hr><h2 id="bulging-text" tabindex="-1"><a class="header-anchor" href="#bulging-text"><span>Bulging Text</span></a></h2><p>Now we are finally ready to build the last example. The idea is very similar to the red dot example, but instead of applying the <code>background-image</code> only to the top layer, we will apply it across all the layers. The color is stored in a custom variable and used to paint the gradient.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.layer</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">--color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>200 30% <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span> * 100%<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background-clip</span><span class="token punctuation">:</span> text<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background-image</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">radial-gradient</span><span class="token punctuation">(</span></span>
<span class="line">      circle at <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--mx<span class="token punctuation">)</span> - <span class="token function">var</span><span class="token punctuation">(</span>--left<span class="token punctuation">)</span><span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--my<span class="token punctuation">)</span> - <span class="token function">var</span><span class="token punctuation">(</span>--top<span class="token punctuation">)</span><span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token function">var</span><span class="token punctuation">(</span>--color<span class="token punctuation">)</span> 24px<span class="token punctuation">,</span></span>
<span class="line">                transparent 0</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we get something similar to the red dot we saw earlier, but this time the effect spreads across all the layers.</p><p>CodePen Embed Fallback</p><hr><h2 id="brighter-base" tabindex="-1"><a class="header-anchor" href="#brighter-base"><span>Brighter Base</span></a></h2><p>We are almost there. Before we go any further with the layers, I want to make the base text look a bit weaker when the hover effect is not active. That way, we create a stronger contrast when the full effect kicks in.</p><p>So, we will make the <code>span</code> text transparent and increase the opacity of its shadow:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">span</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">text-shadow</span><span class="token punctuation">:</span> 0 0 0.1em #0004<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Keep in mind, this makes the text nearly unreadable when the hover effect is not active. That is why it is important to use a proper media query to detect whether the device supports hover. Apply this styling only when it does, and adjust it for devices that do not.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">hover</span><span class="token punctuation">:</span> hover<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* when hover is supported */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="fixing-sizes" tabindex="-1"><a class="header-anchor" href="#fixing-sizes"><span>Fixing Sizes</span></a></h2><p>This is it. The only thing left is to fine tune the size of the gradient for each layer. And we are done. But I do not want the bulge to have a linear shape. Using the normalized value alone will give me evenly spaced steps across all layers. That results in a shape with straight edges, like a cone.</p>`,28)),s("p",null,[n[34]||(n[34]=a("To get a more convex appearance, we can take advantage of the new trigonometric functions available in CSS. We will take the normalized value, multiply it by 90 degrees, and pass it through a ")),s("a",I,[e(u,{icon:"fa-brands fa-firefox"}),n[33]||(n[33]=s("code",null,"cos()",-1))]),n[35]||(n[35]=a(" function. Just like the normalized value, the cosine will return a number between ")),n[36]||(n[36]=s("code",null,"0",-1)),n[37]||(n[37]=a(" and ")),n[38]||(n[38]=s("code",null,"1",-1)),n[39]||(n[39]=a(", but with a very different distribution. The spacing between values is non-linear, which gives us that smooth convex curve."))]),n[48]||(n[48]=c(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">--cos</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--n<span class="token punctuation">)</span> * 90deg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now we can use this variable inside the gradient. Instead of giving the color a fixed radius, we will multiply <code>--cos</code> by whatever size we want the effect to be. I also added an absolute value to the calculation, so that even when <code>--cos</code> is very low (close to zero), the gradient still has a minimum visible size.</p><p>And, of course, we do not want sharp, distracting edges. We want a smooth fade. So, instead of giving the <code>transparent</code> a hard stop point, we will give it a larger value. The difference between the <code>var(--color)</code> and the <code>transparent</code> values will control how soft the transition is.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token property">background-image</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token function">radial-gradient</span><span class="token punctuation">(</span></span>
<span class="line">    circle at <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--mx<span class="token punctuation">)</span> - <span class="token function">var</span><span class="token punctuation">(</span>--left<span class="token punctuation">)</span><span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span></span>
<span class="line">              <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--my<span class="token punctuation">)</span> - <span class="token function">var</span><span class="token punctuation">(</span>--top<span class="token punctuation">)</span><span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">              <span class="token function">var</span><span class="token punctuation">(</span>--color<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--cos<span class="token punctuation">)</span> * 36px + 24px<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">              transparent <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--cos<span class="token punctuation">)</span> * 72px<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And just like that, we get an interactive effect that follows the mouse and gives the impression of bulging 3D text:</p><p>CodePen Embed Fallback</p><hr><h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="#wrapping-up"><span>Wrapping Up</span></a></h2><p>At this point, our 3D layered text has gone from a static stack of HTML elements to a fully interactive, mouse-responsive effect. We built dynamic layers with JavaScript, normalized depth and scale, added responsive hover effects, and used live input to shape gradients and create a bulging illusion that tracks the user’s every move.</p><p>But more than anything, this chapter was about control. Controlling structure through code. Controlling behavior through input. And controlling perception through light, color, and movement. And we did it all with native web technologies.</p><p>This is just the beginning. You can keep going with noise patterns, lighting, reflections, physics, or more advanced motion behaviors. Now you have the tools to explore them, and to create bold, animated, expressive typography that jumps right off the screen.</p><p>Now go make something that moves.</p>`,12)),s("div",D,[n[40]||(n[40]=s("p",{class:"hint-container-title"},"3D Layered Text Article Series",-1)),e(p,o(l({title:"3D Layered Text: The Basics",desc:"A client asked me to create a bulging text effect. With a bit of cleverness and some advanced CSS, I managed to get a result I’m genuinely proud of, which is covered in this three-part series.",link:"/css-tricks.com/3d-layered-text-the-basics.md",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16),e(p,o(l({title:"3D Layered Text: Motion and Variations",desc:"In this chapter, we will explore ways to animate the effect, add transitions, and play with different variations. We will look at how motion can enhance depth, and how subtle tweaks can create a whole new vibe.",link:"/css-tricks.com/3d-layered-text-motion-and-variations.md",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16),e(p,o(l({title:"3D Layered Text: Interactivity and Dynamicism",desc:"In this third and final chapter, we’re stepping into interactivity by adding JavaScript, starting with a simple :hover effect, and ending with a fully responsive bulging text that follows your mouse in real time.",link:"/css-tricks.com/3d-layered-text-interactivity-and-dynamism.md",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16)]),v(" TODO: add ARTICLE CARD "),e(p,o(l({title:"3D Layered Text: Interactivity and Dynamicism",desc:"In this third and final chapter, we’re stepping into interactivity by adding JavaScript, starting with a simple :hover effect, and ending with a fully responsive bulging text that follows your mouse in real time.",link:"https://chanhi2000.github.io/bookshelf/css-tricks.com/3d-layered-text-interactivity-and-dynamism.html",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16)])}const z=m(b,[["render",L]]),E=JSON.parse('{"path":"/css-tricks.com/3d-layered-text-interactivity-and-dynamism.html","title":"3D Layered Text: Interactivity and Dynamicism","lang":"en-US","frontmatter":{"lang":"en-US","title":"3D Layered Text: Interactivity and Dynamicism","description":"Article(s) > 3D Layered Text: Interactivity and Dynamicism","icon":"fa-brands fa-css3-alt","category":["CSS","JavaScript","Article(s)"],"tag":["blog","css-tricks.com","css","js","javascript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3D Layered Text: Interactivity and Dynamicism\\",\\"image\\":[\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/bulging-text.jpg\\"],\\"datePublished\\":\\"2025-08-22T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Amit Sheen\\",\\"url\\":\\"https://css-tricks.com/author/amitsheen/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/3d-layered-text-interactivity-and-dynamism.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"3D Layered Text: Interactivity and Dynamicism"}],["meta",{"property":"og:description","content":"Article(s) > 3D Layered Text: Interactivity and Dynamicism"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/bulging-text.jpg"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/bulging-text.jpg"}],["meta",{"name":"twitter:image:alt","content":"3D Layered Text: Interactivity and Dynamicism"}],["meta",{"property":"article:author","content":"Amit Sheen"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"css-tricks.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-08-22T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 3D Layered Text: Interactivity and Dynamicism"},{"property":"og:description","content":"3D Layered Text: Interactivity and Dynamicism"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/3d-layered-text-interactivity-and-dynamism.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-08-22T00:00:00.000Z","isOriginal":false,"author":[{"name":"Amit Sheen","url":"https://css-tricks.com/author/amitsheen/"}],"cover":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/bulging-text.jpg"},"git":{},"readingTime":{"minutes":12.13,"words":3638},"filePathRelative":"css-tricks.com/3d-layered-text-interactivity-and-dynamism.md","copyright":{"author":"Amit Sheen"}}');export{z as comp,E as data};
