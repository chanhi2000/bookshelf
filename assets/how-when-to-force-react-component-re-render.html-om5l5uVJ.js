import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as t,b as c,a as u,t as f,n as d,g as k,w as o,e as a,r as l,o as b}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/blog.logrocket.com/how-when-to-force-react-component-re-render/banner.avif",y={},x={id:"frontmatter-title-관련",tabindex:"-1"},R={class:"header-anchor",href:"#frontmatter-title-관련"},q={class:"table-of-contents"},j={class:"hint-container note"},T={href:"https://blog.logrocket.com/author/emmanuelodioko/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://react.dev/learn/render-and-commit",target:"_blank",rel:"noopener noreferrer"},C={href:"https://codesandbox.io/s/react-wrong-state-change-byx8f",target:"_blank",rel:"noopener noreferrer"},F={href:"https://reactjs.org/docs/shallow-compare.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://reactjs.org/docs/react-component.html#state",target:"_blank",rel:"noopener noreferrer"},S={href:"https://livecodestream.dev/post/how-to-use-the-spread-operator-in-javascript/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://codesandbox.io/s/react-correct-state-change-forked-f1wc7",target:"_blank",rel:"noopener noreferrer"},U={href:"https://codesandbox.io/s/react-props-not-state-ml872",target:"_blank",rel:"noopener noreferrer"},B={href:"https://codesandbox.io/s/react-props-as-state-forked-ii6cb",target:"_blank",rel:"noopener noreferrer"},N={href:"https://react.dev/reference/react/Component#setstate",target:"_blank",rel:"noopener noreferrer"},E={href:"https://react.dev/learn/rendering-lists#why-does-react-need-keys",target:"_blank",rel:"noopener noreferrer"},z={href:"https://react.dev/reference/react/useState#resetting-state-with-a-key",target:"_blank",rel:"noopener noreferrer"},M={href:"https://reactjs.org/docs/react-component.html#forceupdate",target:"_blank",rel:"noopener noreferrer"},P={href:"https://codesandbox.io/s/forcing-functional-component-re-render-5uj12",target:"_blank",rel:"noopener noreferrer"},J={href:"https://react.dev/reference/react/useTransition",target:"_blank",rel:"noopener noreferrer"};function W(m,n){const r=l("VPCard"),e=l("router-link"),g=l("SiteInfo"),p=l("VPIcon"),i=l("SandPack");return b(),v("div",null,[s("h1",x,[s("a",R,[s("span",null,f(m.$frontmatter.title)+" 관련",1)])]),t(r,d(k({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",q,[s("ul",null,[s("li",null,[t(e,{to:"#what-is-force-re-rendering"},{default:o(()=>n[0]||(n[0]=[a("What is force re-rendering?")])),_:1,__:[0]})]),s("li",null,[t(e,{to:"#understanding-react-s-rendering-behavior"},{default:o(()=>n[1]||(n[1]=[a("Understanding React’s rendering behavior")])),_:1,__:[1]})]),s("li",null,[t(e,{to:"#why-aren-t-react-components-re-rendering"},{default:o(()=>n[2]||(n[2]=[a("Why aren’t React components re-rendering?")])),_:1,__:[2]}),s("ul",null,[s("li",null,[t(e,{to:"#incorrectly-updated-state-in-react"},{default:o(()=>n[3]||(n[3]=[a("Incorrectly updated state in React")])),_:1,__:[3]})]),s("li",null,[t(e,{to:"#incorrectly-updated-props-without-state-change"},{default:o(()=>n[4]||(n[4]=[a("Incorrectly updated props without state change")])),_:1,__:[4]})])])]),s("li",null,[t(e,{to:"#methods-to-re-render-react-components"},{default:o(()=>n[5]||(n[5]=[a("Methods to re-render React components")])),_:1,__:[5]})]),s("li",null,[t(e,{to:"#forcing-a-react-component-to-re-render"},{default:o(()=>n[6]||(n[6]=[a("Forcing a React component to re-render")])),_:1,__:[6]}),s("ul",null,[s("li",null,[t(e,{to:"#forcing-an-update-on-a-react-class-component"},{default:o(()=>n[7]||(n[7]=[a("Forcing an update on a React class component")])),_:1,__:[7]})]),s("li",null,[t(e,{to:"#forcing-an-update-on-a-function-component"},{default:o(()=>n[8]||(n[8]=[a("Forcing an update on a function component")])),_:1,__:[8]})]),s("li",null,[t(e,{to:"#replace-state-objects-with-a-new-instance-of-themselves"},{default:o(()=>n[9]||(n[9]=[a("Replace state objects with a new instance of themselves")])),_:1,__:[9]})]),s("li",null,[t(e,{to:"#have-an-empty-state-variable-trigger-updates"},{default:o(()=>n[10]||(n[10]=[a("Have an empty state variable trigger updates")])),_:1,__:[10]})])])]),s("li",null,[t(e,{to:"#determining-when-a-render-is-completed-in-react"},{default:o(()=>n[11]||(n[11]=[a("Determining when a render is completed in React")])),_:1,__:[11]})]),s("li",null,[t(e,{to:"#the-impact-of-react-18-s-concurrent-rendering-on-re-renders"},{default:o(()=>n[12]||(n[12]=[a("The impact of React 18’s concurrent rendering on re-renders")])),_:1,__:[12]})]),s("li",null,[t(e,{to:"#the-impact-of-react-18-s-automatic-batching-on-renders"},{default:o(()=>n[13]||(n[13]=[a("The impact of React 18’s automatic batching on renders")])),_:1,__:[13]})]),s("li",null,[t(e,{to:"#when-not-to-force-a-react-component-to-re-render"},{default:o(()=>n[14]||(n[14]=[a("When not to force a React component to re-render")])),_:1,__:[14]})]),s("li",null,[t(e,{to:"#conclusion"},{default:o(()=>n[15]||(n[15]=[a("Conclusion")])),_:1,__:[15]})])])]),n[81]||(n[81]=s("hr",null,null,-1)),t(g,{name:"How and when to force a React component to re-render",desc:"Learn how to force a React component to re-render, how to determine when a render is complete, and the impact of React 18 on component rendering.",url:"https://blog.logrocket.com/how-when-to-force-react-component-re-render",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/how-when-to-force-react-component-re-render/banner.avif"}),s("div",j,[n[23]||(n[23]=s("p",{class:"hint-container-title"},"Editor’s note",-1)),s("p",null,[n[17]||(n[17]=a("This article was last updated by ")),s("a",T,[t(p,{icon:"fas fa-globe"}),n[16]||(n[16]=a("Emmanuel Odioko"))]),n[18]||(n[18]=a(" on 25 September 2024 to include a discussion on the impact of React 18’s concurrent rendering and automatic batching on re-renders. It also covers how to determine when a render is complete using tools such as React’s ")),n[19]||(n[19]=s("code",null,"<Profiler>",-1)),n[20]||(n[20]=a(" and ")),n[21]||(n[21]=s("code",null,"performance.now()",-1)),n[22]||(n[22]=a(" APIs."))])]),n[82]||(n[82]=c('<hr><h2 id="what-is-force-re-rendering" tabindex="-1"><a class="header-anchor" href="#what-is-force-re-rendering"><span>What is force re-rendering?</span></a></h2><figure><img src="'+w+'" alt="How And When To Force A React Component To Re-Render" tabindex="0" loading="lazy"><figcaption>How And When To Force A React Component To Re-Render</figcaption></figure><p>Force re-rendering in React is like pressing the refresh button on a webpage, even when the page seems just fine. In React, it means telling a component to update and redraw itself, even if nothing has really changed in the data (stat/props) it uses.</p><p>Although React is usually good at knowing when it is time to update a component, there are moments when you want to take the reins and tell it to refresh a certain part of the codebase. In this article, we will explore this in more detail.</p><hr><h2 id="understanding-react-s-rendering-behavior" tabindex="-1"><a class="header-anchor" href="#understanding-react-s-rendering-behavior"><span>Understanding React’s rendering behavior</span></a></h2><p>Let’s take a closer look at how React’s rendering process works by default. To understand when and why you might need to nudge React into re-rendering, you need to get familiar with its underlying architecture.</p>',8)),s("p",null,[n[25]||(n[25]=a("At the heart of ")),s("a",A,[t(p,{icon:"fa-brands fa-react"}),n[24]||(n[24]=a("React’s rendering"))]),n[26]||(n[26]=a(" magic lies the Virtual DOM. Imagine it as a clone of the actual DOM, the structure of your webpage. React uses this Virtual DOM to figure out what needs to be updated when your data changes. It’s like having a duplicate house to practice your painting skills on before touching the real thing."))]),n[83]||(n[83]=c('<p>So, how does React know when to refresh the Virtual DOM and make necessary changes to the actual webpage? This happens in three stages:</p><ol><li><strong>Render phase</strong>: In this initial stage, React figures out what part of your component’s UI should change due to data updates. It compares the new Virtual DOM with the previous one, finding the differences</li><li><strong>Reconciliation:</strong> Once the differences are identified, React calculates the most efficient way to update the actual DOM. This reconciliation process minimizes unnecessary work, making sure that only the elements affected by the data changes are updated</li><li><strong>Commit phase</strong>: In this final stage, React takes the calculated changes from the previous stage and applies them to the real DOM. It’s like the moment when your paintbrush touches the house, and the new paint is applied to the walls</li></ol><p>Understanding these stages is crucial because they provide insights into React’s default rendering behavior. And they also help us know when and how to intervene with force re-rendering when necessary. In the following sections, we’ll dive into when you might want to guide React through these stages and ensure your components stay in sync with your application’s state.</p><hr><h2 id="why-aren-t-react-components-re-rendering" tabindex="-1"><a class="header-anchor" href="#why-aren-t-react-components-re-rendering"><span>Why aren’t React components re-rendering?</span></a></h2><p>Generally, forcing a React component to re-render isn’t the best practice, even when React fails to update the components automatically. So, before considering forcing a re-render, we should analyze our code, as React depends on us being good hosts.</p><h3 id="incorrectly-updated-state-in-react" tabindex="-1"><a class="header-anchor" href="#incorrectly-updated-state-in-react"><span>Incorrectly updated state in React</span></a></h3><p>Let’s build a simple component to demonstrate one common reason components aren’t rendering. We will build a simple app that will show a username, <code>Juan</code>, and, after pressing a button, the name will change to <code>Peter</code>.</p>',8)),s("p",null,[s("a",C,[t(p,{icon:"iconfont icon-codesandbox"}),n[27]||(n[27]=a("Here is a demonstration of the app with the complete code"))]),n[28]||(n[28]=a(". If you click the ")),n[29]||(n[29]=s("strong",null,"Change user name",-1)),n[30]||(n[30]=a(" button, you will notice that nothing happens, even though we changed our state on the button:"))]),t(i,{rtl:"",theme:"dark",title:"bajcmartinez%20%2F%20Drafts%20%2F%20react-wrong-state-chnge%20",template:"react",files:"eJx1UE1LxDAQ/StDTl2QBq9rW5C9CSuCeDIeYjbrVruTkEzFpfS/O0lrV5G9hCTvzfuYQchb78v3KNaiPXoXCAboo30kTRZG2Ad3BCWC1YaUuFE4k5QoZaRTZ2NpYsyIQvuVsZ3d674j2PdoqHUI7FCsYFAIYBxGgmd2CFcQLT3x5QXqxbLILADUR7tml7teoxLpb1xlDzjLmoPGN5sU7pn94wBJK5RJgHWVeLBkQw6YsNmySJwkyLqTarDUB4RiolW79hNMp2NM0rUSXEGJZgIZ3p42jheBFinb1UM6R5BMWUivPRHHdLjpWvNRD3/zjs0mv/N87lvJaWK2qSSHyPcUNMdcqv/yL3xwPs7l/7c4Zz5cN9sTLHOV5I8F9E3KNa99yJLlssexkv5SKDF+A4m+wNI=",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),n[84]||(n[84]=c(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">changeUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Peter&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The component did not change, so there was no re-rendering trigger. Why?</p>`,2)),s("p",null,[n[32]||(n[32]=a("React evaluates state changes by checking its ")),s("a",F,[t(p,{icon:"fa-brands fa-react"}),n[31]||(n[31]=a("shallow equality"))]),n[33]||(n[33]=a(" (or reference equality), which checks to see if both the preview and new value for ")),n[34]||(n[34]=s("code",null,"state",-1)),n[35]||(n[35]=a(" reference the same object. In our example, we updated one of the properties of the ")),n[36]||(n[36]=s("code",null,"user",-1)),n[37]||(n[37]=a(" object, but we technically made ")),n[38]||(n[38]=s("code",null,"setUser",-1)),n[39]||(n[39]=a(" the same object reference, and thus, React didn’t perceive any change in its state."))]),s("p",null,[n[41]||(n[41]=a("State, as described in the ")),s("a",I,[t(p,{icon:"fa-brands fa-react"}),n[40]||(n[40]=a("React documentation"))]),n[42]||(n[42]=a(", should be treated as immutable. So, how do we fix it? We could create a new object with the correct values as follows:"))]),n[85]||(n[85]=c(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">changeUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span>user<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Peter&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[45]||(n[45]=a("Note that we are using the ")),s("a",S,[t(p,{icon:"fas fa-globe"}),n[43]||(n[43]=a("spread operator"))]),n[46]||(n[46]=a(" in JavaScript to preserve the properties of the original object while updating its ")),n[47]||(n[47]=s("code",null,"name",-1)),n[48]||(n[48]=a(" property under a new object. ")),s("a",D,[t(p,{icon:"iconfont icon-codesandbox"}),n[44]||(n[44]=a("The final result can be observed here"))]),n[49]||(n[49]=a("."))]),t(i,{rtl:"",theme:"dark",title:"bajcmartinez%20%2F%20Drafts%20%2F%20react-correct-state-change%20(forked)%20",template:"react",files:"eJx1kE1LxDAQhv/KkFMXJMHr2hZkb8KKIJ6Mh5jNutXuJCRTsZT+d5P0YxXxko/5eJ93ZmDi1jn+HtiWNWdnPcEAXTCPpMjACEdvzyCZN0qTZDcS5yLJuAjUtyZwHULOSDRfOXcwR9W1BMcONTUWIRKKDQwSAbTFQPAcCf4KgqGn+HiBakUWuQoA1dlsI+WuUyhZio2bzICLrD4pfDNJ4T5WLwRYZBcpAM55Bi7/RfzBkPGT+qwfrwniDXUeoZhy5aH5BN2qEBKpkixOJFm96JX7fmfjXtAgpUl8NaRzBBFL1qLXjii6trhrG/1RDb/tj/Uu/3N/dliKqWPGlCKayO9kNNtcN/GDXzhvXZh38XeKi+fTdb3vYe0rRQysSVcnX/OihiyZV8hTZCyF+88UG78Bp0HDSQ==",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),n[86]||(n[86]=s("h3",{id:"incorrectly-updated-props-without-state-change",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#incorrectly-updated-props-without-state-change"},[s("span",null,"Incorrectly updated props without state change")])],-1)),n[87]||(n[87]=s("p",null,"While it may seem impossible, incorrectly updating props without a state change can happen, and it usually leads to bugs. Let’s look at an example.",-1)),s("p",null,[n[51]||(n[51]=a("In this ")),s("a",U,[t(p,{icon:"iconfont icon-codesandbox"}),n[50]||(n[50]=a("demo"))]),n[52]||(n[52]=a(", I built a clock that has a major problem: the time doesn’t change after I first load the screen. Not a very useful clock, right?"))]),t(i,{rtl:"",theme:"dark",title:"bajcmartinez%20%2F%20Drafts%20%2F%20react-props-not-state%20",template:"react",files:"eJxVj81OxCAUhV/lhlUnMVC3I21ixq1udMmm6TAGpUDgok4a3l0KVDMrfs53zrl3JezROfoRyJGoxVmPIAhlAa9aBjqHIMiDMMLIn6Kd5WWKGuESzYzKGsjm7gCrMABaIizXN7XI4oB/KEh8LsKOQgNhACO/4WnCLGXXpmR4k2zELuPDuDuKssc0Nt3Bfd/39Zlq6y21/XiJ0Rvoqoef1RfMegrhZVrkIEheQZBxL+EnbefPNt+w1jMBawBn2V7uW3qp/FuzODvnrQttz9bM3XiK3kuDgDntCGuBaA2naF/RK/PeHRJnbqy5JP0C0P2G9w==",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),n[88]||(n[88]=c(`<p>Let’s take a look at the code responsible for calculating the current time:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">let</span> myTime<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">setMyTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  myTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setMyTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setMyTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>This code looks ugly and is generally not a great way to code for a React component, but it works. Every second, the runtime will call the <code>setMyTime</code> function and will update the <code>myTime</code> variable, which is then passed to our <code>Clock</code> component for rendering:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Clock</span></span> <span class="token attr-name">myTime</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>myTime<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,5)),s("p",null,[n[54]||(n[54]=a("This demo doesn’t work because props are a reflection of state, so a standalone change in props won’t trigger a re-render. To fix it, we need a total ")),s("a",B,[t(p,{icon:"iconfont icon-codesandbox"}),n[53]||(n[53]=a("rewrite"))]),n[55]||(n[55]=a("."))]),t(i,{rtl:"",theme:"dark",title:"bajcmartinez%20%2F%20Drafts%20%2F%20react-props-as-state%20(forked)%20",template:"react",files:"eJxdkDFvgzAQhf/KyRNIEaRrCkhV0iFDu6Rb3cFyjooGbMs+aCPEf6+xgUqdfNK9973nG1n+ZEz25diBNZ3RlmCE3uGFBOFunp7rGiXBBLXVHXBmUUji7JGrRc9Zlju6t+gy6VzYcIU/YXfFWvQtQd0rSY1W4MOSFEauAKRWjuC9u781nY9ySC9h/IBya5Ao/IbTPKRp4MJfpcSDyiqyAAZhgbzbnk/e72FnRWgH0S4yauQtSXfwsN/vVxSAReqtgiiRLQq72RbYrAWYVsv2kchb07fy/wp7Z/StQVFeXJvBxwnnXkWHJWf+LJxVcenXx1bLG8TLlGN8J8gXQZF7e5jniBCw1QrOxFht3FJuSS5MdeytRUXhTAcYgyiL8Iz0hWyjPpN0KnJTRS6bfgERIrRq",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),n[89]||(n[89]=c(`<p>Notice that we introduced state to manage <code>myTime</code> and <code>useEffect</code> to start and clear the timers to avoid bugs when the component re-renders. And it works:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>myTime<span class="token punctuation">,</span> setMyTime<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> timerID <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>timerID<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setMyTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="methods-to-re-render-react-components" tabindex="-1"><a class="header-anchor" href="#methods-to-re-render-react-components"><span>Methods to re-render React components</span></a></h2><p>React provides us with multiple ways to tell when to re-render the component. There are three ways we will discuss below:</p>`,5)),s("ol",null,[s("li",null,[n[57]||(n[57]=s("strong",null,[s("code",null,"setState"),a(" method")],-1)),n[58]||(n[58]=a(": This is the go-to method for most re-rendering scenarios. When you call ")),s("a",N,[t(p,{icon:"fa-brands fa-react"}),n[56]||(n[56]=s("code",null,"setState",-1))]),n[59]||(n[59]=a(", React takes notice and starts the re-rendering process for the component. It’s like telling your component, “Hey, something’s changed, time to update!” You typically use this method when your component’s state or props change"))]),n[66]||(n[66]=s("li",null,[s("strong",null,[s("code",null,"forceUpdate"),a("method")]),a(": Sometimes, you might have a good reason to bypass the usual state or prop changes and refresh your component entirely. The "),s("code",null,"forceUpdate"),a(" function does just that. It’s like giving your component a direct order to repaint itself, regardless of what’s happening in the background. Use this one sparingly, as it can disrupt React’s optimization")],-1)),s("li",null,[n[62]||(n[62]=s("strong",null,[s("code",null,"key"),a(" prop manipulation")],-1)),n[63]||(n[63]=a(": This is a more advanced technique. React relies on ")),s("a",E,[t(p,{icon:"fa-brands fa-react"}),n[60]||(n[60]=a("keys"))]),n[64]||(n[64]=a(" to determine which elements in a list have changed. By ")),s("a",z,[t(p,{icon:"fa-brands fa-react"}),n[61]||(n[61]=a("manipulating the key prop"))]),n[65]||(n[65]=a(", you can effectively force re-renders in components that rely on lists. It’s a bit like changing the name on the mailbox to get your mail forwarded to a different address. It’s useful in specific scenarios, but use it with care"))])]),n[90]||(n[90]=s("p",null,"These methods provide you with the means to control when and how your components re-render. But remember that with great power comes great responsibility — overusing these methods can lead to issues, which we will discuss later in this article.",-1)),n[91]||(n[91]=s("hr",null,null,-1)),n[92]||(n[92]=s("h2",{id:"forcing-a-react-component-to-re-render",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#forcing-a-react-component-to-re-render"},[s("span",null,"Forcing a React component to re-render")])],-1)),n[93]||(n[93]=s("p",null,"It’s typically frowned upon to force a component to re-render, and the failure of automatic re-rendering in React is often due to an underlying bug in our codebase. But, if you have a legitimate need to force a React component to re-render, there are a few ways to do it.",-1)),n[94]||(n[94]=s("h3",{id:"forcing-an-update-on-a-react-class-component",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#forcing-an-update-on-a-react-class-component"},[s("span",null,"Forcing an update on a React class component")])],-1)),s("p",null,[n[68]||(n[68]=a("If you are using class components in your code, you’re in luck. React provides an ")),s("a",M,[t(p,{icon:"fa-brands fa-react"}),n[67]||(n[67]=a("official API to force a re-render"))]),n[69]||(n[69]=a(", and it’s straightforward to implement:"))]),n[95]||(n[95]=c(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Force a render without state change...</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In any user or system event, you can call the method <code>this.forceUpdate()</code>, which will cause <code>render()</code> to be called on the component, skipping <code>shouldComponentUpdate()</code>, and thus, forcing React to re-evaluate the Virtual DOM and DOM state.</p><p>There are some caveats to this method:</p><ul><li>React will trigger the normal lifecycle methods for child components, including <code>shouldComponentUpdate()</code>, so we can only force the current component to be re-rendered</li><li>Virtual DOM will still validate its state with DOM, so React will only update the DOM if the markup changes</li></ul><h3 id="forcing-an-update-on-a-function-component" tabindex="-1"><a class="header-anchor" href="#forcing-an-update-on-a-function-component"><span>Forcing an update on a function component</span></a></h3><p>There’s no official API to re-render a function component, nor is there a <a href="https://blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems/" target="_blank" rel="noopener noreferrer"><strong>React Hook</strong></a> to do so. However, there are some clever tricks to signal to React that a component should be updated.</p>`,6)),u(" END: /blog.logrocket.com/react-hooks-cheat-sheet-unlock-solutions-to-common-problems.md "),n[96]||(n[96]=c(`<h3 id="replace-state-objects-with-a-new-instance-of-themselves" tabindex="-1"><a class="header-anchor" href="#replace-state-objects-with-a-new-instance-of-themselves"><span>Replace state objects with a new instance of themselves</span></a></h3><p>Let’s say we want to force a refresh on our change user example above. We could do something like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Force a render with a simulated state change</span></span>
<span class="line">  <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>user <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because <code>user</code> is an object, we could copy it to a new object and set it as the new state. The same could apply to any other object or array.</p><h3 id="have-an-empty-state-variable-trigger-updates" tabindex="-1"><a class="header-anchor" href="#have-an-empty-state-variable-trigger-updates"><span>Have an empty state variable trigger updates</span></a></h3><p>This method is interesting, as it creates a new object in the state. We only care about its <code>update</code> function as follows:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> updateState<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> forceUpdate <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">updateState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, we use <code>useCallback</code> to memoize our <code>forceUpdate</code> function, thus keeping it constant throughout the component lifecycle and making it safe to be passed to child components as <code>props</code>.</p><p>Here is an example of how to use it:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.js"><span>App.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> updateState<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> forceUpdate <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">updateState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;rendering...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>App<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Time to force some updates</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>forceUpdate<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Force re-render</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,10)),s("p",null,[n[71]||(n[71]=a("Now, each time we click on the ")),n[72]||(n[72]=s("strong",null,"Force re-render",-1)),n[73]||(n[73]=a(" button, the component will re-render. You can ")),s("a",P,[t(p,{icon:"iconfont icon-codesandbox"}),n[70]||(n[70]=a("access the live demo here"))]),n[74]||(n[74]=a("."))]),t(i,{rtl:"",theme:"dark",title:"bajcmartinez%20%2F%20Drafts%20%2F%20forcing-functional-component-re-render%20",template:"react",files:"eJxNkE1rxCAQhv/K4MnA1tBrmwTKQo899OO07sE1ZmvXaPCjFEL+e8fYlFxkxvedh3dmJvXTNLGvQB6IHifnI7wqISMM3o3Aic8NJ4/ccqt+Vr1Xg0gGHcnKqJ0FBNAKZm4BpLMhwukAaepFVG8RnzO0hclSKD+0Qt5mHpyX6mO1741HYcxFyBtFdNvteXReqgOczhmyYZxRzLgrzYFtr7y2V8YYJ5vHq5i8BZprgKbX3yCNCOFFjKrlBDfgpCsiyp/33bseFURX0kFw2JUIoalR/rdeUox4AmePRstbO++2WbrnddiruxKqqYv7b7qpMcZa55QLt2T5BSxdhXE=",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),n[97]||(n[97]=c(`<hr><h2 id="determining-when-a-render-is-completed-in-react" tabindex="-1"><a class="header-anchor" href="#determining-when-a-render-is-completed-in-react"><span>Determining when a render is completed in React</span></a></h2><p>To measure the rendering performance of components, we can use two APIs: <code>&lt;Profiler&gt;</code> and <code>performance.now()</code>.</p><p>If we wrap a component with the <code>&lt;Profiler&gt;</code> component, we can track the rendering duration and log the time it takes to complete. The <code>onRender()</code> callback of the Profiler provides details on each render, including the time it took. Let’s take a closer look at how it works:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Counter.js"><span>Counter.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">//In the code below I have been able to explain the properties in detail</span></span>
<span class="line"></span>
<span class="line"><span class="token string">&quot;use client&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Profiler<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> onRenderCallback <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">    id<span class="token punctuation">,</span> <span class="token comment">// the &quot;id&quot; prop of the Profiler tree that has just committed</span></span>
<span class="line">    phase<span class="token punctuation">,</span> <span class="token comment">// either &quot;mount&quot; (if the tree just mounted) or &quot;update&quot; (if it re-rendered)</span></span>
<span class="line">    actualDuration<span class="token punctuation">,</span> <span class="token comment">// time spent rendering the committed update</span></span>
<span class="line">    baseDuration<span class="token punctuation">,</span> <span class="token comment">// estimated time to render the entire subtree without memoization</span></span>
<span class="line">    startTime<span class="token punctuation">,</span> <span class="token comment">// when React began rendering this update</span></span>
<span class="line">    commitTime<span class="token punctuation">,</span> <span class="token comment">// when React committed this update</span></span>
<span class="line">    interactions <span class="token comment">// the Set of interactions belonging to this update</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Render ID: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, Duration: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>actualDuration<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Profiler</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Counter<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onRender</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onRenderCallback<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex flex-col items-center justify-center h-screen bg-gray-100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-xl font-bold text-blue-600 mb-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Count: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span></span>
<span class="line">          <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded<span class="token punctuation">&quot;</span></span></span>
<span class="line">          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          Increment</span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Profiler</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> Counter<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here is what we get in our console:</p><figure><img src="https://paper-attachments.dropboxusercontent.com/s_F0FB2803B848D13712B2405C7FAE99AE30631F59E9268BE6ECF922CFC09B4E96_1727996665922_Screenshot+280.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>As we can see above, the first render took approximately 1.9 milliseconds, while subsequent renders were faster. This is normal behavior, as the initial render typically involves more work. For more precise timing measurements, consider using the <code>performance.now()</code> API, a high-resolution timestamp method that measures the start and end times of specific code executions.</p><p>Let’s see how it works:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="DetailedCounter.js"><span>DetailedCounter.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token string">&quot;use client&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">DetailedCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> renderStartRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Store start time</span></span>
<span class="line">  <span class="token comment">// Capture the render start time</span></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    renderStartRef<span class="token punctuation">.</span>current <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Render start time:&quot;</span><span class="token punctuation">,</span> renderStartRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// After rendering, capture the end time and calculate render duration</span></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> renderEnd <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> renderDuration <span class="token operator">=</span> renderEnd <span class="token operator">-</span> renderStartRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Render end time:&quot;</span><span class="token punctuation">,</span> renderEnd<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Render duration:&quot;</span><span class="token punctuation">,</span> renderDuration<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">incrementCounter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>max-w-md mt-[60%] mx-auto p-6 bg-gray-100 rounded-lg shadow-md text-center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-2xl font-bold text-blue-600 mb-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Detailed Counter</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-xl mb-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Count: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span></span>
<span class="line">        <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-4<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>incrementCounter<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Increment</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> DetailedCounter<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here are the results:</p><figure><img src="https://paper-attachments.dropboxusercontent.com/s_F0FB2803B848D13712B2405C7FAE99AE30631F59E9268BE6ECF922CFC09B4E96_1727997779602_Screenshot+281.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>By combining React’s <code>&lt;Profiler&gt;</code> and <code>performance.now()</code> APIs, you can gain deeper insights into how long renders take and optimize performance accordingly.</p><hr><h2 id="the-impact-of-react-18-s-concurrent-rendering-on-re-renders" tabindex="-1"><a class="header-anchor" href="#the-impact-of-react-18-s-concurrent-rendering-on-re-renders"><span>The impact of React 18’s concurrent rendering on re-renders</span></a></h2><p>When React 18 was released, it introduced several optimization features, including concurrent rendering. This allows React to break down heavy renders into smaller bits, thereby improving the user experience.</p>`,16)),s("p",null,[n[77]||(n[77]=a("To achieve this, React does two things: first, it prioritizes more urgent updates; second, it attends to less critical updates afterward. The ")),s("a",J,[t(p,{icon:"fa-brands fa-react"}),n[75]||(n[75]=s("code",null,"UseTransition()",-1)),n[76]||(n[76]=a(" Hook"))]),n[78]||(n[78]=a(" helps manage these “non-urgent” updates. When state changes are wrapped in ")),n[79]||(n[79]=s("code",null,"startTransition()",-1)),n[80]||(n[80]=a(", React will delay lower-priority updates until the critical ones are complete."))]),n[98]||(n[98]=c(`<p>This feature can lead to more frequent re-renders — one for starting the transition and the other for completing it — the overall performance will remain smoother because less critical updates are handled in the background.</p><p>Let’s explore an example to understand how React should handle top-priority and lower-priority tasks using a to-do app. For the sake of users, we will prioritize some state updates (such as adding a new to-do) while postponing less critical updates (like filtering the to-do list):</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Todo.js"><span>Todo.js</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token string">&quot;use client&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useTransition <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">TodoApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Learn React&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Learn TypeScript&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>filter<span class="token punctuation">,</span> setFilter<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>deferredFilter<span class="token punctuation">,</span> setDeferredFilter<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>isPending<span class="token punctuation">,</span> startTransition<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">addTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newTodo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setTodos</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>todos<span class="token punctuation">,</span> newTodo<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleFilterChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setFilter</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setDeferredFilter</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> filteredTodos <span class="token operator">=</span> todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    todo<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>deferredFilter<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>max-w-md mx-auto p-4 bg-gray-100 rounded shadow-md<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-xl font-bold text-gray-700 mb-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Todo App</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span></span>
<span class="line">        <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>w-full p-2 border border-gray-300 rounded mb-4<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Filter todos...<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>filter<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleFilterChange<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span></span>
<span class="line">        <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded w-full mb-4<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token string">&quot;New Todo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Add Todo</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>isPending <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-gray-500 mb-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Updating list...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list-disc list-inside bg-white p-4 rounded<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token punctuation">{</span>filteredTodos<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">          filteredTodos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p-1 border-b border-gray-200<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">              </span><span class="token punctuation">{</span>todo<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-gray-500<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">No todos match the filter.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> TodoApp<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here, the <code>startTransition</code> method wraps the filtering of to-dos, marking it as a task. React will prioritize updating the input field immediately while postponing the aforementioned filtering. This helps maintain a responsive UI even when the to-do list becomes large.</p><p><code>useTransition()</code> ensures that when the user tries to filter their to-dos, the input remains responsive, thereby updating immediately. Without <code>useTransition()</code>, updating the filter and having to recalculate the filtered list could slow down the interface a bit, especially when we may have a large list of to-dos.</p><hr><h2 id="the-impact-of-react-18-s-automatic-batching-on-renders" tabindex="-1"><a class="header-anchor" href="#the-impact-of-react-18-s-automatic-batching-on-renders"><span>The impact of React 18’s automatic batching on renders</span></a></h2><p>Another important feature introduced in React 18 is automatic batching, which allows React to group multiple state updates into a single render. In React 17 and earlier versions, React would trigger separate re-renders for each state update in asynchronous code.</p><p>Think of automatic batching like a school teacher collecting students’ questions during class. Instead of answering these questions the moment they’re asked, the teacher waits until the end of the class to address them all at once. Similarly, React waits until all state changes are complete before re-rendering them, improving UI performance by reducing the number of renders.</p><hr><h2 id="when-not-to-force-a-react-component-to-re-render" tabindex="-1"><a class="header-anchor" href="#when-not-to-force-a-react-component-to-re-render"><span>When not to force a React component to re-render</span></a></h2><p>While we’ve learned that force re-rendering can be a handy tool, there are situations where you should think twice before hitting that refresh button. There are many unintended consequences to doing this, some of which are listed below:</p><ol><li><strong>Overdoing it</strong>: Overusing this technique can overload React’s reconciliation process, causing unnecessary work. It’s wasteful and can slow things down. Just like you wouldn’t repaint your house every day, you shouldn’t force re-render your components constantly</li><li><strong>Side effects</strong>: Force re-rendering can lead to unintended consequences. If you force a component to re-render when it shouldn’t, you might end up with issues like data inconsistencies or UI glitches</li><li><strong>Breakdown of optimizations</strong>: React is clever about optimizing the rendering process. It avoids unnecessary work by updating only what’s needed. When you force a re-render in React, you disrupt this optimization</li><li><strong>Debugging nightmares</strong>: Overusing force re-rendering can also make debugging a nightmare. When you’re trying to figure out why something isn’t working as expected, the last thing you want is the extra complexity of forced re-renders</li></ol><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>React’s re-rendering process is essential for keeping components in sync with state and props. However, forcing a re-render in React should be done sparingly, and only when necessary, to avoid performance issues.</p><p>This article explored methods like <code>setState()</code>, <code>forceUpdate()</code>, and key manipulation to force React components to re-render. While React 18 introduced features like concurrent rendering and automatic batching, which optimize rendering, developers can still encounter situations where manual re-rendering is necessary. By understanding when to force re-rendering and using tools like React’s <code>&lt;Profiler&gt;</code> or <code>peformance.now()</code> APIs, you can maintain an efficient and responsive UI in your React apps.</p>`,17)),u(" TODO: add ARTICLE CARD "),t(r,d(k({title:"How and when to force a React component to re-render",desc:"Learn how to force a React component to re-render, how to determine when a render is complete, and the impact of React 18 on component rendering.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/how-when-to-force-react-component-re-render.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const H=h(y,[["render",W]]),O=JSON.parse('{"path":"/blog.logrocket.com/how-when-to-force-react-component-re-render.html","title":"How and when to force a React component to re-render","lang":"en-US","frontmatter":{"lang":"en-US","title":"How and when to force a React component to re-render","description":"Article(s) > How and when to force a React component to re-render","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How and when to force a React component to re-render\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/how-when-to-force-react-component-re-render/banner.avif\\",\\"https://paper-attachments.dropboxusercontent.com/s_F0FB2803B848D13712B2405C7FAE99AE30631F59E9268BE6ECF922CFC09B4E96_1727996665922_Screenshot+280.png\\",\\"https://paper-attachments.dropboxusercontent.com/s_F0FB2803B848D13712B2405C7FAE99AE30631F59E9268BE6ECF922CFC09B4E96_1727997779602_Screenshot+281.png\\"],\\"datePublished\\":\\"2024-09-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Juan Cruz Martinez\\",\\"url\\":\\"https://blog.logrocket.com/author/juancruzmartinez/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/how-when-to-force-react-component-re-render.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How and when to force a React component to re-render"}],["meta",{"property":"og:description","content":"Article(s) > How and when to force a React component to re-render"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/how-when-to-force-react-component-re-render/banner.avif"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/how-when-to-force-react-component-re-render/banner.avif"}],["meta",{"name":"twitter:image:alt","content":"How and when to force a React component to re-render"}],["meta",{"property":"article:author","content":"Juan Cruz Martinez"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-09-25T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How and when to force a React component to re-render"},{"property":"og:description","content":"How and when to force a React component to re-render"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/how-when-to-force-react-component-re-render.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2024-09-25T00:00:00.000Z","isOriginal":false,"author":[{"name":"Juan Cruz Martinez","url":"https://blog.logrocket.com/author/juancruzmartinez/"}],"cover":"/assets/image/blog.logrocket.com/how-when-to-force-react-component-re-render/banner.avif"},"git":{},"readingTime":{"minutes":12.82,"words":3846},"filePathRelative":"blog.logrocket.com/how-when-to-force-react-component-re-render.md","copyright":{"author":"Juan Cruz Martinez"}}');export{H as comp,O as data};
