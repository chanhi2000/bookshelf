import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as e,b as c,a as g,t as b,n as r,g as d,w as i,e as a,r as p,o as y}from"./app-BVguHYKu.js";const f={},h={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},K={class:"hint-container info"},M={href:"http://linkedin.com/in/stefano-natali-q21",target:"_blank",rel:"noopener noreferrer"},A={class:"hint-container info"},I={href:"https://proandroiddev.com/koin-my-favorite-dependency-injection-library-for-android-776db4d455c8",target:"_blank",rel:"noopener noreferrer"};function j(k,n){const l=p("VPCard"),t=p("router-link"),u=p("SiteInfo"),o=p("VPIcon");return y(),m("div",null,[s("h1",h,[s("a",w,[s("span",null,b(k.$frontmatter.title)+" 관련",1)])]),e(l,r(d({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[e(t,{to:"#why-koin"},{default:i(()=>n[0]||(n[0]=[a("Why Koin?")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#getting-started-with-koin"},{default:i(()=>n[1]||(n[1]=[a("Getting Started with Koin")])),_:1,__:[1]})]),s("li",null,[e(t,{to:"#initializing-koin-application"},{default:i(()=>n[2]||(n[2]=[a("Initializing Koin Application")])),_:1,__:[2]})]),s("li",null,[e(t,{to:"#injecting-dependencies"},{default:i(()=>n[3]||(n[3]=[a("Injecting Dependencies")])),_:1,__:[3]})]),s("li",null,[e(t,{to:"#testing-with-koin"},{default:i(()=>n[4]||(n[4]=[a("Testing with Koin")])),_:1,__:[4]})]),s("li",null,[e(t,{to:"#koin-annotations-a-hilt-like-approach"},{default:i(()=>n[5]||(n[5]=[a("Koin Annotations: A Hilt-like Approach")])),_:1,__:[5]})]),s("li",null,[e(t,{to:"#conclusion"},{default:i(()=>n[6]||(n[6]=[a("Conclusion")])),_:1,__:[6]})])])]),n[26]||(n[26]=s("hr",null,null,-1)),e(u,{name:"Koin: My Favorite Dependency Injection Library for Android",desc:"In Android development, Hilt is often the go-to library for dependency injection due to its official support from Google and deep integration with Android libraries. However, I prefer Koin for its simplicity, fast adoption and Kotlin-first approach. In my experience, Koin’s lightweight design makes it easier to set up and maintain, while providing a powerful DI solution that doesn’t compromise on flexibility. Let’s explore why Koin is my favorite DI library and how you can use it effectively in your Android projects.",url:"https://droidcon.com/koin-my-favorite-dependency-injection-library-for-android",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",preview:"https://droidcon.com/wp-content/uploads/2024/11/1_vhOf2s2bGrVMycE24fzFPg-600x338.webp"}),n[27]||(n[27]=c(`<figure><img src="https://droidcon.com/wp-content/uploads/2024/11/1_vhOf2s2bGrVMycE24fzFPg-600x338.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>In Android development,<strong>Hilt</strong>is often the go-to library for dependency injection due to its official support from Google and deep integration with Android libraries. However, I prefer<strong>Koin</strong>for its simplicity, fast adoption and Kotlin-first approach. In my experience, Koin’s lightweight design makes it easier to set up and maintain, while providing a powerful DI solution that doesn’t compromise on flexibility. Let’s explore why Koin is my favorite DI library and how you can use it effectively in your Android projects.</p><hr><h2 id="why-koin" tabindex="-1"><a class="header-anchor" href="#why-koin"><span>Why Koin?</span></a></h2><p>There are a number of reasons why I love Koin. First, it’s easy to use. Koin has a simple and intuitive API that makes it easy to get started with dependency injection. Second, Koin is lightweight. It won’t add a lot of overhead to your application. Third, Koin is powerful. It provides a powerful set of features that can help you manage dependencies in complex applications. Finally, Koin offers direct integrations with<strong>Jetpack Compose.</strong></p><hr><h2 id="getting-started-with-koin" tabindex="-1"><a class="header-anchor" href="#getting-started-with-koin"><span>Getting Started with Koin</span></a></h2><p>Getting started with Koin is easy. You can add the Koin library to your project using the version catalog and the gradle file.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="libs.versions.toml"><span>libs.versions.toml</span></div><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">versions</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">koin</span> <span class="token punctuation">=</span> <span class="token string">&quot;4.0.0&quot;</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token table class-name">libraries</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">koin-android</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">&quot;io.insert-koin:koin-android&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;koin&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token key property">koin-androidx-compose</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">&quot;io.insert-koin:koin-androidx-compose&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;koin&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="build.gradle.kts"><span>build.gradle.kts</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token function">implementation</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>koin<span class="token punctuation">.</span>androidx<span class="token punctuation">.</span>compose<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">implementation</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>koin<span class="token punctuation">.</span>android<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Once you’ve added the libraries, you can start defining your dependencies. Koin uses modules to define dependencies. A module is a collection of dependencies that can be used together. Here’s an example:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> myModules <span class="token operator">=</span> module <span class="token punctuation">{</span></span>
<span class="line">    single <span class="token punctuation">{</span> <span class="token function">MyHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    factory <span class="token punctuation">{</span> <span class="token function">BookService</span><span class="token punctuation">(</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> IBookService <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">factoryOf</span><span class="token punctuation">(</span><span class="token operator">::</span>BookDownloader<span class="token punctuation">)</span></span>
<span class="line">    single <span class="token punctuation">{</span> BookDatabase<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">factoryOf</span><span class="token punctuation">(</span><span class="token operator">::</span>DatabaseRepository<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">factoryOf</span><span class="token punctuation">(</span><span class="token operator">::</span>BookRepository<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">singleOf</span><span class="token punctuation">(</span><span class="token operator">::</span>PrefsDataStore<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">viewModelOf</span><span class="token punctuation">(</span><span class="token operator">::</span>NavigationViewModel<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">viewModelOf</span><span class="token punctuation">(</span><span class="token operator">::</span>HomeViewModel<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">viewModelOf</span><span class="token punctuation">(</span><span class="token operator">::</span>LibraryViewModel<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">viewModelOf</span><span class="token punctuation">(</span><span class="token operator">::</span>ZoomBookViewModel<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">viewModelOf</span><span class="token punctuation">(</span><span class="token operator">::</span>ReaderEpubViewModel<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">viewModelOf</span><span class="token punctuation">(</span><span class="token operator">::</span>LanguagesSelectorViewModel<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">viewModelOf</span><span class="token punctuation">(</span><span class="token operator">::</span>TopicViewModel<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">viewModelOf</span><span class="token punctuation">(</span><span class="token operator">::</span>SettingsViewModel<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Within a module, you can declare various types of components:</p><ul><li>**Single:**Provides a single instance of a dependency throughout the application’s lifecycle.</li><li>**Factory:**Creates a new instance of a dependency each time it’s requested.</li><li><strong>ViewModel:</strong> Specifically designed for Android ViewModel instances, ensuring proper lifecycle management.</li></ul><p>With the standard component definition you can also use the extensions functions (<strong><code>singleOf</code>, <code>factoryOf</code> and <code>viewModelOf</code></strong> ) to provide a more concise syntax for creating instances.</p><hr><h2 id="initializing-koin-application" tabindex="-1"><a class="header-anchor" href="#initializing-koin-application"><span>Initializing Koin Application</span></a></h2><p>Once you’ve defined your modules, it’s time to integrate Koin with your application.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> MyApplication <span class="token operator">:</span> <span class="token function">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        startKoin <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">androidLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">androidContext</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">modules</span><span class="token punctuation">(</span>myModules<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19)),s("p",null,[n[7]||(n[7]=a("In your")),e(o,{icon:"fa-brands fa-android"}),n[8]||(n[8]=s("code",null,"AndroidManifest.xml",-1)),n[9]||(n[9]=a("file, update the")),n[10]||(n[10]=s("code",null,"application",-1)),n[11]||(n[11]=a(" tag to reference your custom application class:"))]),n[28]||(n[28]=c(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="AndroidManifest.xml"><span>AndroidManifest.xml</span></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/tools<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span></span>
<span class="line">        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.MyApplication<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token comment">&lt;!-- ... --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>By following these steps, you’ve successfully initialized Koin and made it ready to manage your application’s dependencies.</p><hr><h2 id="injecting-dependencies" tabindex="-1"><a class="header-anchor" href="#injecting-dependencies"><span>Injecting Dependencies</span></a></h2><p>Koin makes it straightforward to inject dependencies into your classes. By defining your modules and components, you can directly access them within your classes.</p><p>Here’s an example of a<code>HomeViewModel</code>using dependencies provided by Koin:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> <span class="token function">HomeViewModel</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> bookRepository<span class="token operator">:</span> BookRepository<span class="token punctuation">,</span></span>
<span class="line">    prefsDataStore<span class="token operator">:</span> PrefsDataStore<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> gutenbergRepository<span class="token operator">:</span> GutenbergRepository<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ViewModel logic here</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For a<strong>Jetpack Compose</strong>environment, the setup is slightly different. In your<strong>Activity</strong>, it’s helpful to wrap all Compose code inside a<code>KoinAndroidContext</code> to define the Koin Context and then use the dependencies:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">ComponentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span></span>
<span class="line">        setContent <span class="token punctuation">{</span></span>
<span class="line">            MyBooksTheme <span class="token punctuation">{</span></span>
<span class="line">                KoinAndroidContext <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">val</span> navigationViewModel <span class="token operator">=</span> koinViewModel<span class="token operator">&lt;</span>NavigationViewModel<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token comment">// Additional UI code here</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In your Composable functions, you can then easily inject your ViewModels with Koin:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Composable</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">HomeInitScreen</span><span class="token punctuation">(</span></span>
<span class="line">    navigationViewModel<span class="token operator">:</span> NavigationViewModel <span class="token operator">=</span> <span class="token function">koinViewModel</span><span class="token punctuation">(</span>viewModelStoreOwner <span class="token operator">=</span> LocalContext<span class="token punctuation">.</span>current <span class="token keyword">as</span> ComponentActivity<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    homeViewModel<span class="token operator">:</span> HomeViewModel <span class="token operator">=</span> <span class="token function">koinViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// UI code here</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example:</p><ul><li><code>NavigationViewModel</code>will follow the lifecycle of the<strong>Activity</strong>, making it suitable for app-wide navigation.</li><li><code>HomeViewModel</code> will be scoped to the<code>HomeInitScreen</code>Composable function, fitting the more transient lifecycle of UI elements in Compose.</li></ul><p>This setup allows for precise lifecycle management with minimal boilerplate, making Koin an excellent choice for<strong>Compose-based projects</strong>.</p><hr><h2 id="testing-with-koin" tabindex="-1"><a class="header-anchor" href="#testing-with-koin"><span>Testing with Koin</span></a></h2><p>Koin’s structure makes it highly testable and ideal for achieving high code coverage. Dependencies can be easily<strong>mocked or replaced</strong>, and you can even define custom Koin modules specifically for testing purposes.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> MyTest<span class="token operator">:</span> KoinTest <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token annotation builtin">@Before</span> </span>
<span class="line">  <span class="token keyword">fun</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token function">startkoin</span> <span class="token punctuation">(</span> <span class="token function">modules</span> <span class="token punctuation">(</span>testModule<span class="token punctuation">)</span><span class="token punctuation">)</span> </span>
<span class="line">  <span class="token punctuation">}</span> </span>
<span class="line"></span>
<span class="line">  <span class="token annotation builtin">@After</span> </span>
<span class="line">  <span class="token keyword">fun</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token function">stopKoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line">  <span class="token punctuation">}</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This flexibility allows you to isolate and test individual components effectively.</p><p>To ensure that your Koin modules are configured correctly, you can use the<strong>verify</strong> extension provided by Koin’s testing utilities:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> MyModulesTest<span class="token operator">:</span> KoinTest <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation builtin">@OptIn</span><span class="token punctuation">(</span>KoinExperimentalAPI<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token annotation builtin">@Test</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">testMyModules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        myModules<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span></span>
<span class="line">            extraTypes <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span></span>
<span class="line">                Application<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span></span>
<span class="line">                Context<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This test verifies the correctness of the<code>myModules</code> definition, ensuring that all dependencies are defined and can be resolved.</p><p>By following these guidelines, you can effectively test your Koin-based applications, improving code quality and reducing potential issues.</p><hr><h2 id="koin-annotations-a-hilt-like-approach" tabindex="-1"><a class="header-anchor" href="#koin-annotations-a-hilt-like-approach"><span>Koin Annotations: A Hilt-like Approach</span></a></h2><p>If you prefer Hilt’s annotation-based approach, Koin recently introduced annotations, allowing you to mark dependencies with simple annotations for a more declarative setup. This style lets you define dependencies similarly to Hilt.</p><p>One key difference is that Koin traditionally resolves dependencies at runtime. This means that if a dependency is missing, the error only appears when the dependency is requested. With the new annotation-based approach, Koin now offers<strong>compile-time checking</strong>for dependencies, which catches these issues during the build process. This extra validation is especially valuable for large apps with complex dependency trees, adding a layer of robustness and reliability to your project.</p><p>To update the implementation we already defined to Koin annotations, follow these steps:</p><ul><li>Include the Kotlin Symbol Processing (KSP) plugin:</li></ul><div class="code-block-with-title"><div class="code-block-title-bar" data-title="libs.versions.toml"><span>libs.versions.toml</span></div><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">versions</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">ksp</span> <span class="token punctuation">=</span> <span class="token string">&quot;2.0.20-1.0.25&quot;</span></span>
<span class="line"><span class="token key property">koinAnnotations</span> <span class="token punctuation">=</span> <span class="token string">&quot;2.0.0-Beta1&quot;</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token table class-name">plugins</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">googleDevtoolsKsp</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">id</span> <span class="token punctuation">=</span> <span class="token string">&quot;com.google.devtools.ksp&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;ksp&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="app/build.gradle.kts"><span>app/build.gradle.kts</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">plugins <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">alias</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>googleDevtoolsKsp<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><ul><li>Include the extra Koin dependencies for annotations, and the KSP compiler:</li></ul><div class="code-block-with-title"><div class="code-block-title-bar" data-title="libs.versions.toml"><span>libs.versions.toml</span></div><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">versions</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">koinAnnotations</span> <span class="token punctuation">=</span> <span class="token string">&quot;2.0.0-Beta1&quot;</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token table class-name">libraries</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">koin-annotations</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">&quot;io.insert-koin:koin-annotations&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;koinAnnotations&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token key property">koin-ksp-compiler</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">&quot;io.insert-koin:koin-ksp-compiler&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;koinAnnotations&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="app/build.gradle.kts"><span>app/build.gradle.kts</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">dependencies <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">ksp</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>koin<span class="token punctuation">.</span>ksp<span class="token punctuation">.</span>compiler<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">implementation</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>koin<span class="token punctuation">.</span>annotations<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,34)),s("ul",null,[s("li",null,[n[12]||(n[12]=a("Enable compile-time safety checks in your")),e(o,{icon:"iconfont icon-kotlin"}),n[13]||(n[13]=s("code",null,"build.gradle.kts",-1)),n[14]||(n[14]=a(":"))])]),n[29]||(n[29]=c(`<div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">ksp <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">arg</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;KOIN_CONFIG_CHECK&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;true&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With this configuration in place, you can remove your modules definition:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MyApplication.kt"><span>MyApplication.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">import</span> org<span class="token punctuation">.</span>koin<span class="token punctuation">.</span>ksp<span class="token punctuation">.</span>generated<span class="token punctuation">.</span><span class="token operator">*</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> MyApplication <span class="token operator">:</span> <span class="token function">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        startKoin <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">androidLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">androidContext</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">modules</span><span class="token punctuation">(</span>defaultModule<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>and start migrating your dependencies by using Koin’s annotations:<code>@Single</code>,<code>@Factory</code>, and<code>@KoinViewModel</code>. Simply add the relevant annotation on top of each class to define its lifecycle and scope.</p><div class="hint-container tip"><p class="hint-container-title">Example</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Single</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token function">PrefsDataStore</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//logic here</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token annotation builtin">@Factory</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token function">BookRepository</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> bookService<span class="token operator">:</span> IBookService<span class="token punctuation">,</span> <span class="token keyword">private</span> <span class="token keyword">val</span> prefsDataStore<span class="token operator">:</span> PrefsDataStore</span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//logic here</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@KoinViewModel</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token function">HomeViewModel</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> bookRepository<span class="token operator">:</span> BookRepository<span class="token punctuation">,</span></span>
<span class="line">    prefsDataStore<span class="token operator">:</span> PrefsDataStore<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> gutenbergRepository<span class="token operator">:</span> GutenbergRepository<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ViewModel logic here</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Once you’ve annotated your dependencies, Koin will verify them at compile time. If any dependencies are missing or misconfigured, you’ll receive an error during the build process, allowing you to catch issues early. This<strong>compile-time validation</strong>makes your app more robust, especially as it scales and new dependencies are added.</p>`,6)),s("div",K,[n[15]||(n[15]=s("p",{class:"hint-container-title"},"Migrating from Hilt to Koin",-1)),n[16]||(n[16]=s("p",null,"If you’re convinced about Koin’s benefits and want to migrate your Hilt project, a helpful guide can be found here:",-1)),e(l,r(d({title:"How To Migrate from Hilt to Koin - A Detailed Guide",desc:"Migrate from Hilt to Koin for Android devs. A step-by-step guide to cover setup, annotation replacements, module migration, testing, & Compose previews.",link:"/blog.kotzilla.io/migrate-from-hilt-to-koin.md",logo:"https://blog.kotzilla.io/hubfs/favicon.png",background:"rgba(238,181,80,0.2)"})),null,16),n[17]||(n[17]=s("p",null,"This guide walks you through the process of translating Hilt annotations to their Koin counterparts.",-1))]),n[30]||(n[30]=s("hr",null,null,-1)),n[31]||(n[31]=s("h2",{id:"conclusion",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#conclusion"},[s("span",null,"Conclusion")])],-1)),n[32]||(n[32]=s("p",null,[a("Now you know why"),s("strong",null,"Koin"),a(" is my favorite"),s("strong",null,"Dependency Injection library for Android"),a(". I really like its simplicity, flexibility, and Kotlin-centric approach. Its easy setup and clear lifecycle management make it ideal for both small and large applications.")],-1)),n[33]||(n[33]=s("p",null,"With Koin, you have the flexibility to define dependencies in a straightforward syntax, while also benefiting from recent advancements like annotation support and compile-time checks. These features allow you to ensure dependency correctness during the build process, enhancing the reliability of your app as it grows in complexity.",-1)),n[34]||(n[34]=s("p",null,"Whether you’re building a new project or considering a DI solution for an existing one, Koin’s simplicity and power make it an excellent choice. By following the guidelines in this article, you can take advantage of Koin’s capabilities to create a clean, maintainable, and testable codebase for your Android apps.",-1)),s("p",null,[n[21]||(n[21]=a("If you found this article interesting, feel free to follow me for more insightful content on Android development and Jetpack Compose. I publish new articles almost every week. Don’t hesitate to share your comments or reach out to me on")),s("a",M,[n[18]||(n[18]=a("LinkedIn (")),e(o,{icon:"fa-brands fa-linkedin"}),n[19]||(n[19]=s("code",null,"stefano-natali-q21",-1)),n[20]||(n[20]=a(")"))]),n[22]||(n[22]=a(" for further discussions."))]),n[35]||(n[35]=s("p",null,"Have a great day!",-1)),s("div",A,[n[25]||(n[25]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[24]||(n[24]=a("This article is previously published on ")),s("a",I,[e(o,{icon:"fa-brands fa-medium"}),n[23]||(n[23]=a("proandroiddev.com"))])]),e(u,{name:"Koin: My Favorite Dependency Injection Library for Android",desc:"Easy to set up, Lightweight and Kotlin-centric",url:"https://proandroiddev.com/koin-my-favorite-dependency-injection-library-for-android-776db4d455c8/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1024/1*vhOf2s2bGrVMycE24fzFPg.jpeg"})]),g(" TODO: add ARTICLE CARD "),e(l,r(d({title:"Koin: My Favorite Dependency Injection Library for Android",desc:"In Android development, Hilt is often the go-to library for dependency injection due to its official support from Google and deep integration with Android libraries. However, I prefer Koin for its simplicity, fast adoption and Kotlin-first approach. In my experience, Koin’s lightweight design makes it easier to set up and maintain, while providing a powerful DI solution that doesn’t compromise on flexibility. Let’s explore why Koin is my favorite DI library and how you can use it effectively in your Android projects.",link:"https://chanhi2000.github.io/bookshelf/droidcon.com/koin-my-favorite-dependency-injection-library-for-android.html",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",background:"rgba(4,20,221,0.2)"})),null,16)])}const D=v(f,[["render",j]]),C=JSON.parse('{"path":"/droidcon.com/koin-my-favorite-dependency-injection-library-for-android.html","title":"Koin: My Favorite Dependency Injection Library for Android","lang":"en-US","frontmatter":{"lang":"en-US","title":"Koin: My Favorite Dependency Injection Library for Android","description":"Article(s) > Koin: My Favorite Dependency Injection Library for Android","icon":"fa-brands fa-android","category":["Java","Kotlin","Android","Article(s)"],"tag":["blog","droidcon.com","java","kotlin","android"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Koin: My Favorite Dependency Injection Library for Android\\",\\"image\\":[\\"https://droidcon.com/wp-content/uploads/2024/11/1_vhOf2s2bGrVMycE24fzFPg-600x338.webp\\"],\\"datePublished\\":\\"2024-11-06T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Stefano Natali\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/koin-my-favorite-dependency-injection-library-for-android.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Koin: My Favorite Dependency Injection Library for Android"}],["meta",{"property":"og:description","content":"Article(s) > Koin: My Favorite Dependency Injection Library for Android"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://droidcon.com/wp-content/uploads/2024/11/1_vhOf2s2bGrVMycE24fzFPg-600x338.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://droidcon.com/wp-content/uploads/2024/11/1_vhOf2s2bGrVMycE24fzFPg-600x338.webp"}],["meta",{"name":"twitter:image:alt","content":"Koin: My Favorite Dependency Injection Library for Android"}],["meta",{"property":"article:author","content":"Stefano Natali"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"droidcon.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-06T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Koin: My Favorite Dependency Injection Library for Android"},{"property":"og:description","content":"Koin: My Favorite Dependency Injection Library for Android"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/koin-my-favorite-dependency-injection-library-for-android.html"}]],"prev":"/programming/java-android/articles/README.md","date":"2024-11-06T00:00:00.000Z","isOriginal":false,"author":"Stefano Natali","cover":"https://droidcon.com/wp-content/uploads/2024/11/1_vhOf2s2bGrVMycE24fzFPg-600x338.webp"},"git":{},"readingTime":{"minutes":6.45,"words":1934},"filePathRelative":"droidcon.com/koin-my-favorite-dependency-injection-library-for-android.md","copyright":{"author":"Stefano Natali"}}');export{D as comp,C as data};
