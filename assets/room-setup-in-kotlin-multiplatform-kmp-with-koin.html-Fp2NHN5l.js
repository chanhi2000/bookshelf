import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as s,f as t,b as e,a as o,t as f,n as r,g as d,w as l,e as a,r as c,o as g}from"./app-BVguHYKu.js";const h={},w={id:"frontmatter-title-관련",tabindex:"-1"},M={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},x={href:"https://unsplash.com/@draufsicht",target:"_blank",rel:"noopener noreferrer"},q={href:"https://unsplash.com/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://developer.android.com/kotlin/multiplatform/room#database-instantiation",target:"_blank",rel:"noopener noreferrer"},S={href:"https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-i-o.html",target:"_blank",rel:"noopener noreferrer"},K={href:"https://proandroiddev.com/basictextfield2-a-textfield-of-dreams-1-2-0103fd7cc0ec",target:"_blank",rel:"noopener noreferrer"},A={href:"https://developer.android.com/topic/architecture/ui-layer/state-production#stream-apis",target:"_blank",rel:"noopener noreferrer"},C={href:"https://developer.android.com/jetpack/compose/state#stateful-vs-stateless",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/shorthouse",target:"_blank",rel:"noopener noreferrer"},T={class:"hint-container info"},R={href:"https://proandroiddev.com/room-in-kotlin-multiplatform-kmp-with-koin-d7716bdd8783",target:"_blank",rel:"noopener noreferrer"};function V(m,n){const u=c("VPCard"),i=c("router-link"),k=c("SiteInfo"),p=c("VPIcon");return g(),b("div",null,[s("h1",w,[s("a",M,[s("span",null,f(m.$frontmatter.title)+" 관련",1)])]),t(u,r(d({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t(u,r(d({title:"Swift > Article(s)",desc:"Article(s)",link:"/programming/swift/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",y,[s("ul",null,[s("li",null,[t(i,{to:"#getting-started"},{default:l(()=>n[0]||(n[0]=[a("Getting started")])),_:1,__:[0]})]),s("li",null,[t(i,{to:"#room-setup"},{default:l(()=>n[1]||(n[1]=[a("Room setup")])),_:1,__:[1]}),s("ul",null,[s("li",null,[t(i,{to:"#database-builder"},{default:l(()=>n[2]||(n[2]=[a("Database builder")])),_:1,__:[2]})]),s("li",null,[t(i,{to:"#database-creation"},{default:l(()=>n[3]||(n[3]=[a("Database creation")])),_:1,__:[3]})])])]),s("li",null,[t(i,{to:"#koin-setup"},{default:l(()=>n[4]||(n[4]=[a("Koin setup")])),_:1,__:[4]}),s("ul",null,[s("li",null,[t(i,{to:"#initialising-koin"},{default:l(()=>n[5]||(n[5]=[a("Initialising Koin")])),_:1,__:[5]})])])]),s("li",null,[t(i,{to:"#complete-room"},{default:l(()=>n[6]||(n[6]=[a("Complete Room")])),_:1,__:[6]}),s("ul",null,[s("li",null,[t(i,{to:"#crafting-a-ui"},{default:l(()=>n[7]||(n[7]=[a("Crafting a UI")])),_:1,__:[7]})]),s("li",null,[t(i,{to:"#state-production"},{default:l(()=>n[8]||(n[8]=[a("State production")])),_:1,__:[8]})]),s("li",null,[t(i,{to:"#finalising-the-viewmodel"},{default:l(()=>n[9]||(n[9]=[a("Finalising the ViewModel")])),_:1,__:[9]})]),s("li",null,[t(i,{to:"#movie-screen"},{default:l(()=>n[10]||(n[10]=[a("Movie screen")])),_:1,__:[10]})])])]),s("li",null,[t(i,{to:"#app-deployment"},{default:l(()=>n[11]||(n[11]=[a("App deployment")])),_:1,__:[11]})]),s("li",null,[t(i,{to:"#conclusion"},{default:l(()=>n[12]||(n[12]=[a("Conclusion")])),_:1,__:[12]})])])]),n[119]||(n[119]=s("hr",null,null,-1)),t(k,{name:"Room setup in Kotlin Multiplatform (KMP) with Koin",desc:"In this article, we’ll explore the recommended approach for implementing Room in Kotlin Multiplatform (KMP) with Koin for dependency injection and the motivations behind each decision.",url:"https://droidcon.com/2025/02/14/room-setup-in-kotlin-multiplatform-kmp-with-koin",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",preview:"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*AqbaidgCIsZmKZM8"}),s("figure",null,[n[17]||(n[17]=s("img",{src:"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*AqbaidgCIsZmKZM8",alt:'Photo by<VPIcon icon="fas fa-globe"/>Andreas Gücklhornon<VPIcon icon="fas fa-globe"/>Unsplash',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[15]||(n[15]=a("Photo by")),s("a",x,[t(p,{icon:"fas fa-globe"}),n[13]||(n[13]=a("Andreas Gücklhorn"))]),n[16]||(n[16]=a("on")),s("a",q,[t(p,{icon:"fas fa-globe"}),n[14]||(n[14]=a("Unsplash"))])])]),n[120]||(n[120]=s("p",null,"In this article, we’ll explore the recommended approach for implementing Room in Kotlin Multiplatform (KMP) with Koin for dependency injection and the motivations behind each decision.",-1)),n[121]||(n[121]=s("p",null,"To visualise the Room implementation, we’ll build a screen using Compose Multiplatform (CMP) and launch the app on Android and iOS.",-1)),n[122]||(n[122]=s("hr",null,null,-1)),n[123]||(n[123]=s("h2",{id:"getting-started",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#getting-started"},[s("span",null,"Getting started")])],-1)),s("p",null,[n[18]||(n[18]=a("To begin, we add the required dependencies to our")),t(p,{icon:"iconfont icon-toml"}),n[19]||(n[19]=s("code",null,"libs.versions.toml",-1)),n[20]||(n[20]=a("file."))]),n[124]||(n[124]=e(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="libs.versions.toml"><span>libs.versions.toml</span></div><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">versions</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">room</span> <span class="token punctuation">=</span> <span class="token string">&quot;2.7.0-alpha13&quot;</span></span>
<span class="line"><span class="token key property">ksp</span> <span class="token punctuation">=</span> <span class="token string">&quot;2.1.10-1.0.29&quot;</span></span>
<span class="line"><span class="token key property">sqlite</span> <span class="token punctuation">=</span> <span class="token string">&quot;2.4.0&quot;</span></span>
<span class="line"><span class="token key property">koin</span> <span class="token punctuation">=</span> <span class="token string">&quot;4.0.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span><span class="token table class-name">libraries</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">androidx-room-compiler</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">group</span> <span class="token punctuation">=</span> <span class="token string">&quot;androidx.room&quot;</span><span class="token punctuation">,</span> <span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;room-compiler&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;room&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token key property">androidx-room-runtime</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">group</span> <span class="token punctuation">=</span> <span class="token string">&quot;androidx.room&quot;</span><span class="token punctuation">,</span> <span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;room-runtime&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;room&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token key property">sqlite-bundled</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">&quot;androidx.sqlite:sqlite-bundled&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;sqlite&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token key property">koin-android</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">&quot;io.insert-koin:koin-android&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;koin&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token key property">koin-core</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">&quot;io.insert-koin:koin-core&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;koin&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token key property">koin-compose</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">&quot;io.insert-koin:koin-compose&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;koin&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token key property">koin-compose-viewmodel</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">&quot;io.insert-koin:koin-compose-viewmodel&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;koin&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span><span class="token table class-name">plugins</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">ksp</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">id</span> <span class="token punctuation">=</span> <span class="token string">&quot;com.google.devtools.ksp&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;ksp&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token key property">room</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">id</span> <span class="token punctuation">=</span> <span class="token string">&quot;androidx.room&quot;</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">&quot;room&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),o(" @import https://gist.github.com/shorthouse/66ca4e96086a7f9e2bc6a2fcfcf99677/raw/ae577326fa17133e656da167d368e99e1ff6e450/libs.versions.toml "),s("p",null,[n[21]||(n[21]=a("We then use these dependencies in our")),t(p,{icon:"iconfont icon-kotlin"}),n[22]||(n[22]=s("code",null,"build.gradle.kts",-1)),n[23]||(n[23]=a("file, alongside using the Room plugin to declare the database schema directory."))]),n[125]||(n[125]=e(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="build.gradle.kts"><span>build.gradle.kts</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line">plugins <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">alias</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>room<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">alias</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>ksp<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">kotlin <span class="token punctuation">{</span></span>
<span class="line">    sourceSets <span class="token punctuation">{</span></span>
<span class="line">        androidMain<span class="token punctuation">.</span><span class="token function">dependencies</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">implementation</span><span class="token punctuation">(</span>compose<span class="token punctuation">.</span>preview<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">implementation</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>androidx<span class="token punctuation">.</span>activity<span class="token punctuation">.</span>compose<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">implementation</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>koin<span class="token punctuation">.</span>android<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        commonMain<span class="token punctuation">.</span><span class="token function">dependencies</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">implementation</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>androidx<span class="token punctuation">.</span>room<span class="token punctuation">.</span>runtime<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">implementation</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>sqlite<span class="token punctuation">.</span>bundled<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">api</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>koin<span class="token punctuation">.</span>core<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">implementation</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>koin<span class="token punctuation">.</span>compose<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">implementation</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>koin<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>viewmodel<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">dependencies <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;kspAndroid&quot;</span></span><span class="token punctuation">,</span> libs<span class="token punctuation">.</span>androidx<span class="token punctuation">.</span>room<span class="token punctuation">.</span>compiler<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;kspIosSimulatorArm64&quot;</span></span><span class="token punctuation">,</span> libs<span class="token punctuation">.</span>androidx<span class="token punctuation">.</span>room<span class="token punctuation">.</span>compiler<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;kspIosX64&quot;</span></span><span class="token punctuation">,</span> libs<span class="token punctuation">.</span>androidx<span class="token punctuation">.</span>room<span class="token punctuation">.</span>compiler<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;kspIosArm64&quot;</span></span><span class="token punctuation">,</span> libs<span class="token punctuation">.</span>androidx<span class="token punctuation">.</span>room<span class="token punctuation">.</span>compiler<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">room <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">schemaDirectory</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">projectDir</span></span><span class="token string">/schemas&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),o(" @import https://gist.github.com/shorthouse/411083b0bce7741f27fa17be76c77920/raw/5dc461a561bce3d7d6fd1b41c4d874e69ea49464/build.gradle.kts "),n[126]||(n[126]=e(`<hr><h2 id="room-setup" tabindex="-1"><a class="header-anchor" href="#room-setup"><span>Room setup</span></a></h2><p>In common code, we create an entity to define the structure of the database table. In this article, we’re storing a list of movies.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Movie.kt"><span>Movie.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Entity</span></span>
<span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Movie</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token annotation builtin">@PrimaryKey</span><span class="token punctuation">(</span>autoGenerate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> id<span class="token operator">:</span> Long <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,4)),o(" @import https://gist.github.com/shorthouse/5de3b9046556c10eb9c6cd7e82f57f85/raw/a17105ffaea5ad940d63c85368ace0a2549b6c4f/Movie.kt "),n[127]||(n[127]=e(`<p>Next, we set up a<code>MovieDao</code>to interact with the database. Using<code>Flow</code>makes the movie list reactive, and<code>suspend</code>functions ensure we don’t block the UI thread during database operations.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MovieDao.kt"><span>MovieDao.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Dao</span></span>
<span class="line"><span class="token keyword">interface</span> MovieDao <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;SELECT * FROM movie&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">getMovies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Movie<span class="token operator">&gt;</span><span class="token operator">&gt;</span></span>
<span class="line">  </span>
<span class="line">    <span class="token annotation builtin">@Insert</span></span>
<span class="line">    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">insert</span><span class="token punctuation">(</span>movie<span class="token operator">:</span> Movie<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;DELETE FROM movie&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">deleteMovies</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),o(" @import https://gist.github.com/shorthouse/9371fea0278637bbd7e84b15e8c1c4c6/raw/5f5353c0c46986fab82fdc3fe73fd0fa1c794f9d/MovieDao.kt "),n[128]||(n[128]=e(`<p>Still in common code, we create an<code>abstract</code>class that extends<code>RoomDatabase</code>and incorporates the entity and DAO. We also define a database constructor and link this to the database using the<code>@ConstructedBy</code>annotation.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MovieDatabase.kt"><span>MovieDatabase.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Database</span><span class="token punctuation">(</span>entities <span class="token operator">=</span> <span class="token punctuation">[</span>Movie<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation builtin">@ConstructedBy</span><span class="token punctuation">(</span>MovieDatabaseConstructor<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">abstract</span> <span class="token keyword">class</span> MovieDatabase<span class="token operator">:</span> <span class="token function">RoomDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">getMovieDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> MovieDao</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Room compiler generates the \`actual\` implementations</span></span>
<span class="line"><span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;NO_ACTUAL_FOR_EXPECT&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">expect</span> <span class="token keyword">object</span> MovieDatabaseConstructor <span class="token operator">:</span> RoomDatabaseConstructor<span class="token operator">&lt;</span>MovieDatabase<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> MovieDatabase</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),o(" @import https://gist.github.com/shorthouse/62ad3237a64ed3f159eb4d68fb327d46/raw/500f60df86093d574c5e50458bf75a1e4f3afb05/MovieDatabase.kt "),n[129]||(n[129]=s("p",null,[a("The Room compiler will generate the"),s("code",null,"actual"),a("implementations of the database constructor for us, so we add a"),s("code",null,"@Suppress"),a("annotation to ignore any warnings related to this.")],-1)),n[130]||(n[130]=s("h3",{id:"database-builder",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#database-builder"},[s("span",null,"Database builder")])],-1)),n[131]||(n[131]=s("p",null,"The database requires a builder, and this is the only component in Room for KMP that requires platform-specific logic.",-1)),s("p",null,[n[24]||(n[24]=a("In")),t(p,{icon:"fas fa-folder-open"}),n[25]||(n[25]=s("code",null,"androidMain",-1)),n[26]||(n[26]=a(", we create a function that takes in an Android")),n[27]||(n[27]=s("code",null,"Context",-1)),n[28]||(n[28]=a("to define a database path and uses this to return a database builder."))]),n[132]||(n[132]=e(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="getDatabaseBuilder.android.kt"><span>getDatabaseBuilder.android.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">getDatabaseBuilder</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> RoomDatabase<span class="token punctuation">.</span>Builder<span class="token operator">&lt;</span>MovieDatabase<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> appContext <span class="token operator">=</span> context<span class="token punctuation">.</span>applicationContext</span>
<span class="line">    <span class="token keyword">val</span> dbFile <span class="token operator">=</span> appContext<span class="token punctuation">.</span><span class="token function">getDatabasePath</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;movie_database.db&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Room<span class="token punctuation">.</span>databaseBuilder<span class="token operator">&lt;</span>MovieDatabase<span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">        context <span class="token operator">=</span> appContext<span class="token punctuation">,</span></span>
<span class="line">        name <span class="token operator">=</span> dbFile<span class="token punctuation">.</span>absolutePath<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),o(" @import https://gist.github.com/shorthouse/bb5d91b7d8328afb8dae780d375f3e3b/raw/9c541d2504981537ea5c69279b1162898b5ca878/getDatabaseBuilder.android.kt "),s("p",null,[n[29]||(n[29]=a("Similarly, in")),t(p,{icon:"fas fa-folder-open"}),n[30]||(n[30]=s("code",null,"iosMain",-1)),n[31]||(n[31]=a("we create a function that uses")),n[32]||(n[32]=s("code",null,"NSFileManager",-1)),n[33]||(n[33]=a("and")),n[34]||(n[34]=s("code",null,"NSDocumentDirectory",-1)),n[35]||(n[35]=a("to define a database path and return a database builder."))]),n[133]||(n[133]=e(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="getDatabaseBuilder.ios.kt"><span>getDatabaseBuilder.ios.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">getDatabaseBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> RoomDatabase<span class="token punctuation">.</span>Builder<span class="token operator">&lt;</span>MovieDatabase<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> dbFilePath <span class="token operator">=</span> <span class="token function">documentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">&quot;/movie_database.db&quot;</span></span></span>
<span class="line">    <span class="token keyword">return</span> Room<span class="token punctuation">.</span>databaseBuilder<span class="token operator">&lt;</span>MovieDatabase<span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">        name <span class="token operator">=</span> dbFilePath<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@OptIn</span><span class="token punctuation">(</span>ExperimentalForeignApi<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">documentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> documentDirectory <span class="token operator">=</span> NSFileManager<span class="token punctuation">.</span>defaultManager<span class="token punctuation">.</span><span class="token function">URLForDirectory</span><span class="token punctuation">(</span></span>
<span class="line">        directory <span class="token operator">=</span> NSDocumentDirectory<span class="token punctuation">,</span></span>
<span class="line">        inDomain <span class="token operator">=</span> NSUserDomainMask<span class="token punctuation">,</span></span>
<span class="line">        appropriateForURL <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">        create <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">        error <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">requireNotNull</span><span class="token punctuation">(</span>documentDirectory<span class="token operator">?</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),o(" @import https://gist.github.com/shorthouse/bc6a6e1af24424b818902d346c53ad1e/raw/aa6991ea74d2c7df9b4f6a848b63652a110005ec/getDatabaseBuilder.ios.kt "),n[134]||(n[134]=s("h3",{id:"database-creation",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#database-creation"},[s("span",null,"Database creation")])],-1)),s("p",null,[n[37]||(n[37]=a("Back in")),t(p,{icon:"fas fa-folder-open"}),n[38]||(n[38]=s("code",null,"commonMain",-1)),n[39]||(n[39]=a(", we define a function that takes in the platform-specific database builders and creates the database. For the database driver, we use the")),n[40]||(n[40]=s("code",null,"BundledSQLiteDriver",-1)),n[41]||(n[41]=a("— this is the")),s("a",D,[t(p,{icon:"fa-brands fa-android"}),n[36]||(n[36]=a("recommended"))]),n[42]||(n[42]=a(" driver for Room KMP as it provides the most consistent and up-to-date version of SQLite across all platforms. The")),n[43]||(n[43]=s("code",null,"BundledSQLiteDriver",-1)),n[44]||(n[44]=a("also has the benefit of being usable in common code, which means we don’t have to specify a driver for each platform."))]),n[135]||(n[135]=e(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="getMovieDatabase.kt"><span>getMovieDatabase.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">getMovieDatabase</span><span class="token punctuation">(</span>builder<span class="token operator">:</span> RoomDatabase<span class="token punctuation">.</span>Builder<span class="token operator">&lt;</span>MovieDatabase<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> MovieDatabase <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> builder</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">setDriver</span><span class="token punctuation">(</span><span class="token function">BundledSQLiteDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">setQueryCoroutineContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),o(" @import https://gist.github.com/shorthouse/d14a567bd1e94b9cc60b027da463f3d0/raw/dbc05be6efaee599ad6fa430a2a9ce2521b5fb75/getMovieDatabase.kt "),s("p",null,[n[46]||(n[46]=a("We also configure the database to use")),n[47]||(n[47]=s("code",null,"Dispatchers.IO",-1)),n[48]||(n[48]=a("for executing asynchronous queries, which is the")),s("a",S,[t(p,{icon:"iconfont icon-kotlin"}),n[45]||(n[45]=a("recommended"))]),n[49]||(n[49]=s("code",null,"Dispatcher",-1)),n[50]||(n[50]=a("for database IO operations and ensures the queries won’t block the UI thread."))]),n[136]||(n[136]=s("hr",null,null,-1)),n[137]||(n[137]=s("h2",{id:"koin-setup",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#koin-setup"},[s("span",null,"Koin setup")])],-1)),s("p",null,[n[51]||(n[51]=a("The final part of this Room KMP setup is using Koin to tie everything together. To start, we create a")),n[52]||(n[52]=s("code",null,"commonModule",-1)),n[53]||(n[53]=a("in")),t(p,{icon:"fas fa-folder-open"}),n[54]||(n[54]=s("code",null,"commonMain",-1)),n[55]||(n[55]=a("to manage shared dependencies."))]),n[138]||(n[138]=e(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="CommonModule.kt"><span>CommonModule.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">commonModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Module <span class="token operator">=</span> module <span class="token punctuation">{</span></span>
<span class="line">    single<span class="token operator">&lt;</span>MovieDao<span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token operator">&lt;</span>MovieDatabase<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMovieDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),o(" @import https://gist.github.com/shorthouse/9ec1dcedf5e233154fa9825f996c0d95/raw/6a2c392f34364cefee98dd9ec77bc28d44994323/CommonModule.kt "),s("p",null,[n[56]||(n[56]=a("For platform-specific dependencies, we create a")),n[57]||(n[57]=s("code",null,"platformModule",-1)),n[58]||(n[58]=a("in")),t(p,{icon:"fas fa-folder-open"}),n[59]||(n[59]=s("code",null,"commonMain",-1)),n[60]||(n[60]=a("using the")),n[61]||(n[61]=s("code",null,"expect",-1)),n[62]||(n[62]=a("/")),n[63]||(n[63]=s("code",null,"actual",-1)),n[64]||(n[64]=a("mechanism."))]),n[139]||(n[139]=e(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="PlatformModule.kt"><span>PlatformModule.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">expect</span> <span class="token keyword">fun</span> <span class="token function">platformModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Module</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div>`,1)),o(" @import https://gist.github.com/shorthouse/a18bd7b37e0ad7710594ccf5ed119a42/raw/8a70a36b9c36db07aef94efda16e944c8593fd44/PlatformModule.kt "),n[140]||(n[140]=e(`<p>We implement this<code>platformModule</code>in<code>androidMain</code>using a provided<code>Context</code>value to create the database.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="PlatformModule.android.kt"><span>PlatformModule.android.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">actual</span> <span class="token keyword">fun</span> <span class="token function">platformModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Module <span class="token operator">=</span> module <span class="token punctuation">{</span></span>
<span class="line">    single<span class="token operator">&lt;</span>MovieDatabase<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">val</span> builder <span class="token operator">=</span> <span class="token function">getDatabaseBuilder</span><span class="token punctuation">(</span>context <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">getMovieDatabase</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),o(" @import https://gist.github.com/shorthouse/f80b9531220bd1c6a0724c59b36d1d22/raw/ede41fc89e0f8fb3e79c8b44bd8d209209370cfd/PlatformModule.android.kt "),s("p",null,[n[65]||(n[65]=a("Implementing the")),n[66]||(n[66]=s("code",null,"platformModule",-1)),n[67]||(n[67]=a("in")),t(p,{icon:"fas fa-folder-op"}),n[68]||(n[68]=s("code",null,"iosMain",-1)),n[69]||(n[69]=a("is simpler since it does not require a")),n[70]||(n[70]=s("code",null,"Context",-1)),n[71]||(n[71]=a("value."))]),n[141]||(n[141]=e(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="PlatformModule.ios.kt"><span>PlatformModule.ios.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">actual</span> <span class="token keyword">fun</span> <span class="token function">platformModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Module <span class="token operator">=</span> module <span class="token punctuation">{</span></span>
<span class="line">    single<span class="token operator">&lt;</span>MovieDatabase<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">val</span> builder <span class="token operator">=</span> <span class="token function">getDatabaseBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">getMovieDatabase</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),o("@import https://gist.github.com/shorthouse/271e444c067f11c4b44a0e490a966fc7/raw/92a8381e0c103af6d8e4fa1ec5e3b84509ef691f/PlatformModule.ios.kt "),n[142]||(n[142]=e(`<h3 id="initialising-koin" tabindex="-1"><a class="header-anchor" href="#initialising-koin"><span>Initialising Koin</span></a></h3><p>Next, we define functions to initialise Koin on both platforms in our common code. As seen above, our Android<code>platformModule</code>requires a<code>Context</code>for the database builder. To provide this, we add a<code>KoinAppDeclaration</code>parameter to our<code>initKoin</code>function. We use this inside the<code>startKoin</code>function, which gives Koin modules access to the<code>Context</code>value.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Koin.kt"><span>Koin.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">initKoin</span><span class="token punctuation">(</span>appDeclaration<span class="token operator">:</span> KoinAppDeclaration <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    startKoin <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">appDeclaration</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">modules</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token function">commonModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">platformModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),o(" @import https://gist.github.com/shorthouse/97b27f9614478f05923f94e3f4721abd/raw/9b8ee7212e6bfd1428a76940de907fcbf1737951/Koin.kt "),n[143]||(n[143]=e(`<p>We then create a new class in<code>androidMain</code>that extends<code>Application</code>and calls the<code>initKoin</code>function, passing the Android<code>Context</code> in.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MainApplication.kt"><span>MainApplication.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> MainApplication <span class="token operator">:</span> <span class="token function">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">initKoin</span><span class="token punctuation">(</span></span>
<span class="line">            appDeclaration <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">androidContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token label symbol">@MainApplication</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),o(" @import https://gist.github.com/shorthouse/b39ece9874aa74604fc8353bfae8ed22/raw/1bea3e6aa396b8fc06fd016081580b0c5d97fb23/MainApplication.kt "),s("p",null,[n[72]||(n[72]=a("To use this new")),n[73]||(n[73]=s("code",null,"MainApplication",-1)),n[74]||(n[74]=a("class, we are required to update the")),t(p,{icon:"fa-brands fa-android"}),n[75]||(n[75]=s("code",null,"AndroidManifest.xml",-1)),n[76]||(n[76]=a("file."))]),n[144]||(n[144]=e(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="AndroidManifest.xml"><span>AndroidManifest.xml</span></div><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    </span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span></span>
<span class="line">    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.MainApplication<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">&lt;!--</span> <span class="token attr-name">Rest</span> <span class="token attr-name">of</span> <span class="token attr-name">manifest</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),o(" @import https://gist.github.com/shorthouse/5e67fccac6e58c05cb1754297ff55dee/raw/16f66133200f61b5271ff900528557f9548bf26b/AndroidManifest.xml "),n[145]||(n[145]=e(`<p>Now we can define a function to initialise Koin for iOS, which doesn’t require a<code>Context</code>value. We encounter a quirk in KMP here, as function default values do not work in native iOS code, so we can’t simply call the<code>initKoin</code>function. To solve this, we define an<code>initKoinIos</code>function that passes in an empty lambda value for the<code>appDeclaration</code>parameter.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Koin.kt"><span>Koin.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">initKoinIos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">initKoin</span><span class="token punctuation">(</span>appDeclaration <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div>`,2)),o(" @import https://gist.github.com/shorthouse/20aa85ab00edd2f1d0143a6d0c010a22/raw/81aef0dae3e6c820d7ac91b109518907c42fd47b/Koin.kt "),n[146]||(n[146]=e(`<p>The<code>initKoinIos</code>function has to be called in native Swift code. To do this, we use the file name of the function and the function name with the<code>do</code>value prepended. We also import<code>ComposeApp</code>to give the Swift code access to the function.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="iOSApp.swift"><span>iOSApp.swift</span></div><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token class-name">ComposeApp</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@main</span></span>
<span class="line"><span class="token keyword">struct</span> iOSApp<span class="token punctuation">:</span> <span class="token class-name">App</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">KoinKt</span><span class="token punctuation">.</span><span class="token function">doInitKoinIos</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">Scene</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">WindowGroup</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),o(" @import https://gist.github.com/shorthouse/0c04cea45b5a05ed25bee7dd79dc0ace/raw/932bd831434298a30208d26a6cacd704cce2f7dd/iOSApp.swift "),n[147]||(n[147]=s("hr",null,null,-1)),n[148]||(n[148]=s("h2",{id:"complete-room",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#complete-room"},[s("span",null,"Complete Room")])],-1)),n[149]||(n[149]=s("p",null,[a("That’s it! We can now inject the"),s("code",null,"MovieDao"),a("in common code, giving us access to our Room database on both platforms.")],-1)),n[150]||(n[150]=s("h3",{id:"crafting-a-ui",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#crafting-a-ui"},[s("span",null,"Crafting a UI")])],-1)),n[151]||(n[151]=s("p",null,"To visualise the Room implementation, we’ll build a movie list screen using Compose Multiplatform and launch the app on both Android and iOS, all within our common code.",-1)),s("p",null,[n[80]||(n[80]=a("We start by defining a")),n[81]||(n[81]=s("code",null,"MovieUiState",-1)),n[82]||(n[82]=a("for the screen, which holds a movie name the user can enter, and a list of movies to display. For the movie name, we use the")),s("a",K,[n[77]||(n[77]=a("recommended (")),t(p,{icon:"fa-brands fa-medium"}),n[78]||(n[78]=s("code",null,"proandroiddev",-1)),n[79]||(n[79]=a(")"))]),n[83]||(n[83]=s("code",null,"TextFieldValue",-1)),n[84]||(n[84]=a("instead of a simple")),n[85]||(n[85]=s("code",null,"String",-1)),n[86]||(n[86]=a("value."))]),n[152]||(n[152]=e(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="MovieUiState.kt"><span>MovieUiState.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">MovieUiState</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">val</span> movieName<span class="token operator">:</span> TextFieldValue <span class="token operator">=</span> <span class="token function">TextFieldValue</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> movies<span class="token operator">:</span> List<span class="token operator">&lt;</span>Movie<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),o(" @import https://gist.github.com/shorthouse/9d13f0a75045d312603f8e8f91ee84ba/raw/8a56397551c12aeb62657f6a12c6818a196ed56c/MovieUiState.kt "),n[153]||(n[153]=e(`<p>Next, we create a<code>MovieViewModel</code>and inject our<code>MovieDao</code>in. The<code>MovieDao</code>is injected straight into the<code>ViewModel</code>here to keep things simple for this article. In production code, the app layering would be more robust, and the<code>MovieDao</code>would be injected into a repository or a data source.</p><p>We also add a private<code>MutableStateFlow</code>backing field to store the movie name value.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MovieViewModel.kt"><span>MovieViewModel.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> <span class="token function">MovieViewModel</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> movieDao<span class="token operator">:</span> MovieDao<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> _movieName <span class="token operator">=</span> <span class="token function">MutableStateFlow</span><span class="token punctuation">(</span><span class="token function">TextFieldValue</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),o(" @import https://gist.github.com/shorthouse/fc52096d35fcaea24eb69facc8d64aa5/raw/bd26a0a230097907c6ad57492ba0c24cf8ca52e7/MovieViewModel.kt "),n[154]||(n[154]=e(`<h3 id="state-production" tabindex="-1"><a class="header-anchor" href="#state-production"><span>State production</span></a></h3><p>To produce the UI state, we combine the<code>Flow</code>list of movies with the<code>MutableStateFlow</code>movie name field.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MovieViewModel.kt"><span>MovieViewModel.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> <span class="token function">MovieViewModel</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> movieDao<span class="token operator">:</span> MovieDao<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> _movieName <span class="token operator">=</span> <span class="token function">MutableStateFlow</span><span class="token punctuation">(</span><span class="token function">TextFieldValue</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">val</span> uiState<span class="token operator">:</span> StateFlow<span class="token operator">&lt;</span>MovieUiState<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">combine</span><span class="token punctuation">(</span></span>
<span class="line">        movieDao<span class="token punctuation">.</span><span class="token function">getMovies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        _movieName</span>
<span class="line">    <span class="token punctuation">)</span> <span class="token punctuation">{</span> movies<span class="token punctuation">,</span> movieText <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token function">MovieUiState</span><span class="token punctuation">(</span>movieName <span class="token operator">=</span> movieText<span class="token punctuation">,</span> movies <span class="token operator">=</span> movies<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">stateIn</span><span class="token punctuation">(</span></span>
<span class="line">        scope <span class="token operator">=</span> viewModelScope<span class="token punctuation">,</span></span>
<span class="line">        started <span class="token operator">=</span> SharingStarted<span class="token punctuation">.</span><span class="token function">WhileSubscribed</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        initialValue <span class="token operator">=</span> <span class="token function">MovieUiState</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),o(" @import https://gist.github.com/shorthouse/52216e4f0881a0eb80775d9801405284/raw/5e798082e4d65d5deacf0f8a6fc286c757e4a18b/MovieViewModel.kt "),s("p",null,[n[88]||(n[88]=a("The")),n[89]||(n[89]=s("code",null,"stateIn",-1)),n[90]||(n[90]=a("operator is the")),s("a",A,[t(p,{icon:"fa-brands fa-android"}),n[87]||(n[87]=a("recommended"))]),n[91]||(n[91]=a("way to produce UI state from reactive streams. A key reason for this is because it allows state production to start only when collection begins in the UI, instead of occurring as soon as the")),n[92]||(n[92]=s("code",null,"ViewModel",-1)),n[93]||(n[93]=a("is created if the")),n[94]||(n[94]=s("code",null,"init{}",-1)),n[95]||(n[95]=a("function is used. This gives you more control over the")),n[96]||(n[96]=s("code",null,"ViewModel",-1)),n[97]||(n[97]=a("and")),n[98]||(n[98]=s("code",null,"uiState",-1)),n[99]||(n[99]=a(", making it easier to test."))]),n[155]||(n[155]=e(`<p>The<code>stateIn</code>operator also gives us finer-grained control over the state production behaviour through the<code>started</code>parameter. This can be set to either<code>SharingStarted.WhileSubscribed</code>if the state should only be active when the UI is visible, or<code>SharingStarted.Lazily</code>if the state should be active as long as the user may return to the UI.</p><h3 id="finalising-the-viewmodel" tabindex="-1"><a class="header-anchor" href="#finalising-the-viewmodel"><span>Finalising the ViewModel</span></a></h3><p>To complete the<code>ViewModel</code>, we provide three functions to update the state.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MovieViewModel.kt"><span>MovieViewModel.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> <span class="token function">MovieViewModel</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> movieDao<span class="token operator">:</span> MovieDao<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">updateMovieName</span><span class="token punctuation">(</span>newText<span class="token operator">:</span> TextFieldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        _movieName<span class="token punctuation">.</span>value <span class="token operator">=</span> newText</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">insertMovie</span><span class="token punctuation">(</span>movieName<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        viewModelScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span></span>
<span class="line">            movieDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">Movie</span><span class="token punctuation">(</span>name <span class="token operator">=</span> movieName<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">deleteMovies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        viewModelScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span></span>
<span class="line">            movieDao<span class="token punctuation">.</span><span class="token function">deleteMovies</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,4)),o(" @import https://gist.github.com/shorthouse/f81ab94ef7ecd95202b6230b5564bb80/raw/8ca6e93689defa8a16a77d3fd67e17ab4c3a0e89/MovieViewModel.kt "),n[156]||(n[156]=e(`<p>We also add the<code>ViewModel</code>to our Koin<code>commonModule</code>, allowing us to inject it into our screen.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="CommonModule.kt"><span>CommonModule.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token function">commonModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Module <span class="token operator">=</span> module <span class="token punctuation">{</span></span>
<span class="line">    single<span class="token operator">&lt;</span>MovieDao<span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token operator">&lt;</span>MovieDatabase<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMovieDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">singleOf</span><span class="token punctuation">(</span><span class="token operator">::</span>MovieViewModel<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),o(" @import https://gist.github.com/shorthouse/e6680d8c5a142463bce4efd9077bda6a/raw/c78329267b08fe5a1c299bef4576c5d446cf6575/CommonModule.kt "),n[157]||(n[157]=s("h3",{id:"movie-screen",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#movie-screen"},[s("span",null,"Movie screen")])],-1)),s("p",null,[n[101]||(n[101]=a("With the")),n[102]||(n[102]=s("code",null,"ViewModel",-1)),n[103]||(n[103]=a("set up, the next step is to create the screen. It is")),s("a",C,[t(p,{icon:"fa-brands fa-android"}),n[100]||(n[100]=a("recommended practice"))]),n[104]||(n[104]=a("to create both a")),n[105]||(n[105]=s("em",null,"stateful",-1)),n[106]||(n[106]=a("and a")),n[107]||(n[107]=s("em",null,"stateless",-1)),n[108]||(n[108]=a("version of each screen in your app, as it makes them more reusable, easier to test, and simpler to preview."))]),n[158]||(n[158]=e(`<p>We first create the<em>stateful</em>screen by injecting the<code>ViewModel</code>using Koin and collecting the UI state. We then pass the UI state and the state updating functions into the<em>stateless</em>screen.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MovieScreen.kt"><span>MovieScreen.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Composable</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">MovieScreen</span><span class="token punctuation">(</span>viewModel<span class="token operator">:</span> MovieViewModel <span class="token operator">=</span> <span class="token function">koinViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> uiState <span class="token keyword">by</span> viewModel<span class="token punctuation">.</span>uiState<span class="token punctuation">.</span><span class="token function">collectAsStateWithLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">MovieScreen</span><span class="token punctuation">(</span></span>
<span class="line">        movies <span class="token operator">=</span> uiState<span class="token punctuation">.</span>movies<span class="token punctuation">,</span></span>
<span class="line">        movieName <span class="token operator">=</span> uiState<span class="token punctuation">.</span>movieName<span class="token punctuation">,</span></span>
<span class="line">        onUpdateMovieName <span class="token operator">=</span> viewModel<span class="token operator">::</span>updateMovieName<span class="token punctuation">,</span></span>
<span class="line">        onAddMovie <span class="token operator">=</span> viewModel<span class="token operator">::</span>insertMovie<span class="token punctuation">,</span></span>
<span class="line">        onDeleteMovies <span class="token operator">=</span> viewModel<span class="token operator">::</span>deleteMovies</span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),o(" @import https://gist.github.com/shorthouse/dd507bbd7d796a3f931334b547ffb649/raw/e8674d831f9b38500a1dba5f646affe59228ffff/MovieScreen.kt "),n[159]||(n[159]=e(`<p>We then create the<em>stateless</em>screen, using a<code>Scaffold</code>to ensure proper inset padding.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MovieScreen.kt"><span>MovieScreen.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Composable</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">MovieScreen</span><span class="token punctuation">(</span></span>
<span class="line">    movies<span class="token operator">:</span> List<span class="token operator">&lt;</span>Movie<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">    movieName<span class="token operator">:</span> TextFieldValue<span class="token punctuation">,</span></span>
<span class="line">    onUpdateMovieName<span class="token operator">:</span> <span class="token punctuation">(</span>TextFieldValue<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">,</span></span>
<span class="line">    onAddMovie<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">,</span></span>
<span class="line">    onDeleteMovies<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit</span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Scaffold</span><span class="token punctuation">(</span>modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">fillMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> scaffoldPadding <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token function">Column</span><span class="token punctuation">(</span></span>
<span class="line">            verticalArrangement <span class="token operator">=</span> Arrangement<span class="token punctuation">.</span><span class="token function">spacedBy</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            modifier <span class="token operator">=</span> Modifier</span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>scaffoldPadding<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// ...</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),o(" @import https://gist.github.com/shorthouse/89ae0490487e76c469ba6eea3be9d964/raw/80222c114cf9819ab06bedefd2ea0056f4c80771/MovieScreen.kt "),n[160]||(n[160]=e(`<p>Inside the<code>Column</code>, we add two Composables that enable the user to add a movie to the Room database.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MovieScreen.kt"><span>MovieScreen.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token function">OutlinedTextField</span><span class="token punctuation">(</span></span>
<span class="line">    value <span class="token operator">=</span> movieName<span class="token punctuation">,</span></span>
<span class="line">    onValueChange <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">onUpdateMovieName</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    label <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Enter movie name&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">fillMaxWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token function">Button</span><span class="token punctuation">(</span></span>
<span class="line">    onClick <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>movieName<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">onAddMovie</span><span class="token punctuation">(</span>movieName<span class="token punctuation">.</span>text<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">onUpdateMovieName</span><span class="token punctuation">(</span><span class="token function">TextFieldValue</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">fillMaxWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Add Movie&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),o(" @import https://gist.github.com/shorthouse/53b90f5e035120c4850ae359a9b06763/raw/0489e0f743e8f0c72e06decebd429599df4ae3f0/MovieScreen.kt "),n[161]||(n[161]=e(`<p>To display the movies, we define a<code>MovieItem</code>and use this within a<code>LazyColumn</code>to create a scrollable list of movies.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MovieScreen.kt"><span>MovieScreen.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Composable</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">MovieItem</span><span class="token punctuation">(</span></span>
<span class="line">    movie<span class="token operator">:</span> Movie<span class="token punctuation">,</span></span>
<span class="line">    modifier<span class="token operator">:</span> Modifier <span class="token operator">=</span> Modifier</span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Card</span><span class="token punctuation">(</span></span>
<span class="line">        modifier <span class="token operator">=</span> modifier</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">fillMaxWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        elevation <span class="token operator">=</span> CardDefaults<span class="token punctuation">.</span><span class="token function">cardElevation</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">Text</span><span class="token punctuation">(</span></span>
<span class="line">            text <span class="token operator">=</span> movie<span class="token punctuation">.</span>name<span class="token punctuation">,</span></span>
<span class="line">            modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),o(" @import https://gist.github.com/shorthouse/e49ee1ed2d12edfabfad2004e6ae0be4/raw/56cb579e59160db903395fd675fcc63328e1b6a7/MovieScreen.kt "),n[162]||(n[162]=e(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="MovieScreen.kt"><span>MovieScreen.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token function">LazyColumn</span><span class="token punctuation">(</span>modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token number">1f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">items</span><span class="token punctuation">(</span>movies<span class="token punctuation">)</span> <span class="token punctuation">{</span> movie <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token function">MovieItem</span><span class="token punctuation">(</span>movie<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),o(" @import https://gist.github.com/shorthouse/0997decbb8e6f1314eb7011654f2fc1b/raw/25307230d2258295d21c0b816c66c0e2e750dce6/MovieScreen.kt "),n[163]||(n[163]=e(`<p>To clear the movies list, we create a button and hook this up to the<code>onDeleteMovies</code>function.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MovieScreen.kt"><span>MovieScreen.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token function">Button</span><span class="token punctuation">(</span></span>
<span class="line">    onClick <span class="token operator">=</span> onDeleteMovies<span class="token punctuation">,</span></span>
<span class="line">    colors <span class="token operator">=</span> ButtonDefaults<span class="token punctuation">.</span><span class="token function">buttonColors</span><span class="token punctuation">(</span></span>
<span class="line">        containerColor <span class="token operator">=</span> MaterialTheme<span class="token punctuation">.</span>colorScheme<span class="token punctuation">.</span>tertiary<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">fillMaxWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Delete Movies&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),o(" @import https://gist.github.com/shorthouse/7f93b31be191dcd6d9e1af81dee3bf3b/raw/9bda7899619dc6151005180faa4219184d3ea8ca/MovieScreen.kt "),n[164]||(n[164]=e(`<p>To make the<code>MovieScreen</code>reachable within the app, we simply add it to the base<code>App</code>Composable. In a production app, you would instead integrate this<code>MovieScreen</code>into your existing navigation logic.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.kt"><span>App.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Composable</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    MaterialTheme <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">MovieScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),o(" @import https://gist.github.com/shorthouse/caf2ec1b1f897306b6cfee06581e0b45/raw/7ab286fa62b7b74723b5f0cecb4ae328a087c29b/App.kt "),n[165]||(n[165]=e('<hr><h2 id="app-deployment" tabindex="-1"><a class="header-anchor" href="#app-deployment"><span>App deployment</span></a></h2><figure><img src="https://miro.medium.com/v2/resize:fit:712/format:webp/1*7LVjO1Pf8HN-74MTV7p41w.gif" alt="We can now deploy the finished app to both platforms, starting with Android." tabindex="0" loading="lazy"><figcaption>We can now deploy the finished app to both platforms, starting with Android.</figcaption></figure><figure><img src="https://miro.medium.com/v2/resize:fit:778/format:webp/1*hK-QzXlCThtmFxumrMh3MQ.gif" alt="Running the app on iOS produces the same behaviour, and validates that the Room implementation is functioning correctly on both platforms! 🎉s" tabindex="0" loading="lazy"><figcaption>Running the app on iOS produces the same behaviour, and validates that the Room implementation is functioning correctly on both platforms! 🎉s</figcaption></figure><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>That wraps up this article — I hope it has given you a better understanding of how to use Room in Kotlin Multiplatform with Koin.</p>',7)),s("p",null,[n[112]||(n[112]=a("You can find my app projects on")),s("a",I,[n[109]||(n[109]=a("GitHub (")),t(p,{icon:"iconfont icon-github"}),n[110]||(n[110]=s("code",null,"shorthouse",-1)),n[111]||(n[111]=a(")"))]),n[113]||(n[113]=a("— feel free to reach out with any questions or feedback."))]),n[166]||(n[166]=s("p",null,"Happy coding!",-1)),s("div",T,[n[118]||(n[118]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[117]||(n[117]=a("This article is previously published on ")),s("a",R,[n[114]||(n[114]=a("proandroiddev.com (")),t(p,{icon:"fa-brands fa-medium"}),n[115]||(n[115]=s("code",null,"proandroiddev",-1)),n[116]||(n[116]=a(")"))])]),t(k,{name:"Room setup in Kotlin Multiplatform (KMP) with Koin",desc:"In this article, we’ll explore the recommended approach for implementing Room in Kotlin Multiplatform (KMP) with Koin",url:"https://proandroiddev.com/room-in-kotlin-multiplatform-kmp-with-koin-d7716bdd8783/",logo:"https://miro.medium.com/v2/resize:fill:128:128/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/da:true/resize:fit:1200/0*AqbaidgCIsZmKZM8"})]),o(" TODO: add ARTICLE CARD "),t(u,r(d({title:"Room setup in Kotlin Multiplatform (KMP) with Koin",desc:"In this article, we’ll explore the recommended approach for implementing Room in Kotlin Multiplatform (KMP) with Koin for dependency injection and the motivations behind each decision.",link:"https://chanhi2000.github.io/bookshelf/droidcon.com/room-setup-in-kotlin-multiplatform-kmp-with-koin.html",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",background:"rgba(4,20,221,0.2)"})),null,16)])}const N=v(h,[["render",V]]),U=JSON.parse('{"path":"/droidcon.com/room-setup-in-kotlin-multiplatform-kmp-with-koin.html","title":"Room setup in Kotlin Multiplatform (KMP) with Koin","lang":"en-US","frontmatter":{"lang":"en-US","title":"Room setup in Kotlin Multiplatform (KMP) with Koin","description":"Article(s) > Room setup in Kotlin Multiplatform (KMP) with Koin","icon":"fa-brands fa-android","category":["Java","Kotlin","Android","Swift","SwiftUI","Article(s)"],"tag":["blog","droidcon.com","java","kotlin","android","swift","swiftui","swift-ui"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Room setup in Kotlin Multiplatform (KMP) with Koin\\",\\"image\\":[\\"https://unsplash.com/@draufsicht\\",\\"https://miro.medium.com/v2/resize:fit:712/format:webp/1*7LVjO1Pf8HN-74MTV7p41w.gif\\",\\"https://miro.medium.com/v2/resize:fit:778/format:webp/1*hK-QzXlCThtmFxumrMh3MQ.gif\\"],\\"datePublished\\":\\"2025-02-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Harry\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/room-setup-in-kotlin-multiplatform-kmp-with-koin.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Room setup in Kotlin Multiplatform (KMP) with Koin"}],["meta",{"property":"og:description","content":"Article(s) > Room setup in Kotlin Multiplatform (KMP) with Koin"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*AqbaidgCIsZmKZM8"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*AqbaidgCIsZmKZM8"}],["meta",{"name":"twitter:image:alt","content":"Room setup in Kotlin Multiplatform (KMP) with Koin"}],["meta",{"property":"article:author","content":"Harry"}],["meta",{"property":"article:tag","content":"swift-ui"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"droidcon.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-02-14T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Room setup in Kotlin Multiplatform (KMP) with Koin"},{"property":"og:description","content":"Room setup in Kotlin Multiplatform (KMP) with Koin"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/room-setup-in-kotlin-multiplatform-kmp-with-koin.html"}]],"prev":"/programming/java-android/articles/README.md","date":"2025-02-14T00:00:00.000Z","isOriginal":false,"author":"Harry","cover":"https://miro.medium.com/v2/resize:fit:1400/format:webp/0*AqbaidgCIsZmKZM8"},"git":{},"readingTime":{"minutes":8.54,"words":2562},"filePathRelative":"droidcon.com/room-setup-in-kotlin-multiplatform-kmp-with-koin.md","copyright":{"author":"Harry"}}');export{N as comp,U as data};
