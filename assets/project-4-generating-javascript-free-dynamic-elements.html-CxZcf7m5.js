import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,d as n,f as e,b as g,t as m,n as k,g as d,e as s,r as t,o as h}from"./app-BVguHYKu.js";const b="/bookshelf/assets/image/blog.logrocket.com/how-to-use-css-variables/img8-Colorful-checkbox-styles-CSS-variables.png",v={},y={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},w={href:"https://codepen.io/shalithasuranga/pen/YzgjegB",target:"_blank",rel:"noopener noreferrer"};function S(o,a){const p=t("VPCard"),l=t("SiteInfo"),c=t("VPIcon"),i=t("CodePen");return h(),u("div",null,[n("h1",y,[n("a",f,[n("span",null,m(o.$frontmatter.title)+" 관련",1)])]),e(p,k(d({title:"How to use CSS variables like a pro",desc:"Build four simple projects to learn how CSS variables can help you write reusable, elegant code and streamline the way you build websites.",link:"/blog.logrocket.com/how-to-use-css-variables/README.md",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16),a[7]||(a[7]=n("nav",{class:"table-of-contents"},[n("ul")],-1)),a[8]||(a[8]=n("hr",null,null,-1)),e(l,{name:"How to use CSS variables like a pro",desc:"Build four simple projects to learn how CSS variables can help you write reusable, elegant code and streamline the way you build websites.",url:"https://blog.logrocket.com/how-to-use-css-variables#project-4-generating-javascript-free-dynamic-elements",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/how-to-use-css-variables/banner.png"}),a[9]||(a[9]=g(`<p>Imagine that you need to create a colorful native checkbox list with multiple accent colors. Using different values for <code>accent-color</code> via the inline style attribute is undoubtedly time-consuming since you have to define colors yourself. Hence, you may create this checkbox list dynamically with JavaScript.</p><p>However, what if this list gets rendered in a JavaScript-disabled environment, like inside a Markdown document? We can use CSS variables to generate JavaScript-free dynamic elements.</p><p>Let’s create a colorful native checkbox list with CSS variables. Create a new HTML document and add the following style tag:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">input[type=&quot;checkbox&quot;]</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">--hue</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--i<span class="token punctuation">)</span> * 50 + 100<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">accent-color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--hue<span class="token punctuation">)</span><span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, we calculate a dynamic color for the <code>accent-color</code> property using the <code>hsl</code> color function.</p><p>For the hue input parameter, we use the <code>--hue</code> variable which gets a dynamically calculated value using the <code>--i</code> variable. This implementation lets us generate multiple colors by using different numbers for <code>--i</code>.</p><p>Use the following HTML snippet to get multiple colorful native checkboxes:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">checked</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 0</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">checked</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 1</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">checked</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 2</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">checked</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--i</span><span class="token punctuation">:</span> 3</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here we set an index manually for the <code>--i</code> variable via inline style attributes to generate a dynamic accent color. This approach is more productive than setting colors yourself for each checkbox element. Look at the following preview of the fourth project:</p><figure><img src="`+b+'" alt="Colorful Checkbox Styles Using Css Variables" tabindex="0" loading="lazy"><figcaption>Colorful Checkbox Styles Using Css Variables</figcaption></figure>',10)),n("p",null,[a[3]||(a[3]=s("You can browse the complete source code and see a live preview from ")),n("a",w,[a[0]||(a[0]=s("this CodePen (")),e(c,{icon:"fa-brands fa-codepen"}),a[1]||(a[1]=n("code",null,"shalithasuranga",-1)),a[2]||(a[2]=s(")"))]),a[4]||(a[4]=s(". It’s possible to use the same strategy to generate JavaScript-free dynamic elements by adjusting any standard CSS property value, i.e., using ")),a[5]||(a[5]=n("code",null,"--i",-1)),a[6]||(a[6]=s(" to set dynamic image filter configurations."))]),e(i,{user:"shalithasuranga","slug-hash":"YzgjegB",title:"Project #4: Dynamic elements with CSS variables","default-tab":["css","result"],theme:o.$isDarkmode?"dark":"light"},null,8,["theme"])])}const j=r(v,[["render",S]]),x=JSON.parse('{"path":"/blog.logrocket.com/how-to-use-css-variables/project-4-generating-javascript-free-dynamic-elements.html","title":"Project 4: Generating JavaScript-free dynamic elements","lang":"en-US","frontmatter":{"lang":"en-US","title":"Project 4: Generating JavaScript-free dynamic elements","description":"Article(s) > (5/9) How to use CSS variables like a pro","category":["CSS","Article(s)"],"tag":["blog","blog.logrocket.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Project 4: Generating JavaScript-free dynamic elements\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/how-to-use-css-variables/img8-Colorful-checkbox-styles-CSS-variables.png\\"],\\"datePublished\\":\\"2025-03-20T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Idorenyin Obong\\",\\"url\\":\\"https://blog.logrocket.com/author/idorenyinobong/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/how-to-use-css-variables/project-4-generating-javascript-free-dynamic-elements.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Project 4: Generating JavaScript-free dynamic elements"}],["meta",{"property":"og:description","content":"Article(s) > (5/9) How to use CSS variables like a pro"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/how-to-use-css-variables/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/how-to-use-css-variables/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Project 4: Generating JavaScript-free dynamic elements"}],["meta",{"property":"article:author","content":"Idorenyin Obong"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-03-20T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > (5/9) How to use CSS variables like a pro"},{"property":"og:description","content":"Project 4: Generating JavaScript-free dynamic elements"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/how-to-use-css-variables/project-4-generating-javascript-free-dynamic-elements.html"}]],"date":"2025-03-20T00:00:00.000Z","isOriginal":false,"author":[{"name":"Idorenyin Obong","url":"https://blog.logrocket.com/author/idorenyinobong/"}],"cover":"/assets/image/blog.logrocket.com/how-to-use-css-variables/banner.png"},"git":{},"readingTime":{"minutes":1.86,"words":557},"filePathRelative":"blog.logrocket.com/how-to-use-css-variables/project-4-generating-javascript-free-dynamic-elements.md","copyright":{"author":"Idorenyin Obong"}}');export{j as comp,x as data};
