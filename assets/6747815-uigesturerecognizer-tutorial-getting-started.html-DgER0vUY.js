import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,d as s,f as a,b as o,t as d,n as g,g as k,e,r as i,o as m}from"./app-BVguHYKu.js";const h={},v={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},w={href:"https://koenig-media.raywenderlich.com/uploads/2020/01/MonkeyPinch.zip",target:"_blank",rel:"noopener noreferrer"},y={href:"https://koenig-media.raywenderlich.com/uploads/2020/01/MonkeyPinch.zip",target:"_blank",rel:"noopener noreferrer"};function b(p,n){const l=i("VPCard"),r=i("SiteInfo"),t=i("VPIcon");return m(),u("div",null,[s("h1",v,[s("a",f,[s("span",null,d(p.$frontmatter.title)+" 관련",1)])]),a(l,g(k({title:"Swift > Article(s)",desc:"Article(s)",link:"/programming/swift/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n[106]||(n[106]=s("hr",null,null,-1)),a(r,{name:"UIGestureRecognizer Tutorial - Getting Started",desc:"In this tutorial, you’ll learn how to configure UIGestureRecognizer objects and how to create custom recognizers in code.",url:"https://kodeco.com/6747815-uigesturerecognizer-tutorial-getting-started",logo:"https://assets.carolus.kodeco.com/assets/murakami/category-icons/category-user-interface-ios-21d0f43f2b43d30763411dc88f25ae51608b428e8a186f1cd5468dcf58496168.svg",preview:"https://koenig-media.raywenderlich.com/uploads/2020/01/UIGestureRecognizer-twitter.png"}),n[107]||(n[107]=o('<div class="hint-container note"><p class="hint-container-title">Update note</p><p>Ryan Ackermann updated this tutorial for Xcode 11, Swift 5 and iOS 13. Caroline Begbie and Brody Eller wrote earlier updates and Ray Wenderlich wrote the original.</p></div><p>In iOS, gestures like taps, pinches, pans or rotations are used for user input. In your app, you can react to gestures, like a tap on button, without ever thinking about how to detect them. But in case you want to use gestures on views that don’t support them, you can easily do it with the built-in <code>UIGestureRecognizer</code> classes.</p><p>In this tutorial, you’ll learn how to add gesture recognizers to your app, both within the storyboard editor in Xcode and programmatically.</p><p>You’ll do this by creating an app where you can move a monkey and a banana around by dragging, pinching and rotating with the help of gesture recognizers.</p><p>You’ll also try out some cool extra features like:</p><ul><li>Adding deceleration for movement.</li><li>Setting dependencies between gesture recognizers.</li><li>Creating a custom <code>UIGestureRecognizer</code> so you can tickle the monkey.</li></ul><p>This tutorial assumes you’re familiar with the basic concepts of <strong>storyboards</strong>. If you’re new to them, you may wish to check out our <a href="https://www.raywenderlich.com/5055364-ios-storyboards-getting-started" target="_blank" rel="noopener noreferrer">storyboard</a> tutorials first.</p><p>The monkey just gave you the thumbs-up gesture, so it’s time to get started!</p><p>Getting Started</p><h2 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started"><span>Getting Started</span></a></h2>',10)),s("p",null,[n[1]||(n[1]=e("To get started, click the ")),s("a",w,[a(t,{icon:"fas fa-download"}),n[0]||(n[0]=s("code",null,"[Download Materials]",-1))]),n[2]||(n[2]=e(" button at the top or bottom of this tutorial. Inside the zip file, you’ll find two folders: ")),a(t,{icon:"fas fa-folder-open"}),n[3]||(n[3]=s("code",null,"begin",-1)),n[4]||(n[4]=e(" and ")),a(t,{icon:"fas fa-folder-open"}),n[5]||(n[5]=s("code",null,"end",-1)),n[6]||(n[6]=e("."))]),s("p",null,[n[7]||(n[7]=e("Open the ")),a(t,{icon:"fas fa-folder-open"}),n[8]||(n[8]=s("code",null,"begin",-1)),n[9]||(n[9]=e(" folder in Xcode, then build and run the project."))]),n[108]||(n[108]=o('<p>You should see the following in your device or simulator:</p><p>![Screen with a monkey and a](https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_01-281x500.png =240x)</p><hr><h2 id="uigesturerecognizer-overview" tabindex="-1"><a class="header-anchor" href="#uigesturerecognizer-overview"><span>UIGestureRecognizer Overview</span></a></h2><p>Before you get started, here’s a brief overview of why <code>UIGestureRecognizers</code> are so handy and how to use them.</p><p>Detecting gestures required a lot more work before <code>UIGestureRecognizers</code> were available. If you wanted to detect a swipe, for example, you had to register for notifications — like <code>touchesBegan</code>, <code>touchesMoved</code> and <code>touchesEnded</code> — on every touch in a <code>UIView</code>. This created subtle bugs and inconsistencies across apps because each programmer wrote slightly different code to detect those touches.</p><p>In iOS 3.0, Apple came to the rescue with <code>UIGestureRecognizer</code> classes. These provide a default implementation to detect common gestures like taps, pinches, rotations, swipes, pans and long presses. Using them not only saves a ton of code, but it also makes your apps work properly. Of course, you can still use the old touch notifications if your app requires them.</p><p>To use <code>UIGestureRecognizer</code>, perform the following steps:</p><ol><li><strong>Create a gesture recognizer</strong>: When you create a gesture recognizer, you specify a target and action so the gesture recognizer can send you updates when the gesture starts, changes or ends.</li><li><strong>Add the gesture recognizer to a view</strong>: You associate each gesture recognizer with one, and only one, view. When a touch occurs within the bounds of that view, the gesture recognizer will check if it matches the type of touch it’s looking for. If it finds a match, it notifies the target.</li></ol><p>You can perform these two steps programmatically, which you’ll do later in this tutorial. But it’s even easier to do with the storyboard editor, which you’ll use next.</p><hr><h2 id="using-the-uipangesturerecognizer" tabindex="-1"><a class="header-anchor" href="#using-the-uipangesturerecognizer"><span>Using the UIPanGestureRecognizer</span></a></h2>',12)),s("p",null,[n[10]||(n[10]=e("Open ")),a(t,{icon:"fas fa-file-lines"}),n[11]||(n[11]=s("code",null,"Main.storyboard",-1)),n[12]||(n[12]=e(". Click ")),a(t,{icon:"iconfont icon-select"}),n[13]||(n[13]=s("code",null,"[+]",-1)),n[14]||(n[14]=e(" button at the top to open the Library."))]),n[109]||(n[109]=s("p",null,[e("Inside the "),s("strong",null,"Library"),e(" panel, look for the "),s("strong",null,"pan gesture recognizer"),e(" object and drag it onto the monkey image view. This creates both the pan gesture recognizer and its association with the monkey image view:")],-1)),n[110]||(n[110]=s("figure",null,[s("img",{src:"https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_02.gif",alt:"Implementing the pan gesture recognizer",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Implementing the pan gesture recognizer")],-1)),s("p",null,[n[15]||(n[15]=e("You can verify the connection by clicking on the monkey image view, looking at the ")),n[16]||(n[16]=s("strong",null,"Connections inspector",-1)),n[17]||(n[17]=e(" in ")),a(t,{icon:"iconfont icon-select"}),n[18]||(n[18]=s("code",null,"[View > Inspectors > Show Connections Inspector]",-1)),n[19]||(n[19]=e(", and making sure the pan gesture recognizer is in the ")),n[20]||(n[20]=s("code",null,"gestureRecognizers",-1)),n[21]||(n[21]=e("‘s ")),n[22]||(n[22]=s("strong",null,"Outlet Collection",-1)),n[23]||(n[23]=e("."))]),n[111]||(n[111]=o('<figure><img src="https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_03-1-650x389.png" alt="Verifying the connection between the monkey and the pan gesture recognizer" tabindex="0" loading="lazy"><figcaption>Verifying the connection between the monkey and the pan gesture recognizer</figcaption></figure><p>The begin project connected two other gesture recognizers for you: the <strong>Pinch Gesture Recognizer</strong> and <strong>Rotation Gesture Recognizer</strong>. It also connected the pan, pinch and rotation gesture recognizers to the banana image view.</p><p>So why did you associate the <code>UIGestureRecognizer</code> with the image view instead of the view itself?</p><p>You could connect it to the view if that makes the most sense for your project. But since you tied it to the monkey, you know that any touches are within the bounds of the monkey. If this is what you want, you’re good to go.</p><p>If you want to detect touches beyond the bounds of the image, you’ll need to add the gesture recognizer to the view itself. But note that you’ll need to write additional code to check if the user is touching within the bounds of the image itself and to react accordingly.</p><p>Now that you’ve created the pan gesture recognizer and associated it with the image view, you have to write the action so something actually happens when the pan occurs.</p><h3 id="implementing-the-panning-gesture" tabindex="-1"><a class="header-anchor" href="#implementing-the-panning-gesture"><span>Implementing the Panning Gesture</span></a></h3>',7)),s("p",null,[n[24]||(n[24]=e("Open ")),a(t,{icon:"fa-brands fa-swift"}),n[25]||(n[25]=s("code",null,"ViewController.swift",-1)),n[26]||(n[26]=e(" and add the following method right below ")),n[27]||(n[27]=s("code",null,"viewDidLoad()",-1)),n[28]||(n[28]=e(", inside the ")),n[29]||(n[29]=s("code",null,"ViewController",-1)),n[30]||(n[30]=e(":"))]),n[112]||(n[112]=o(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token attribute atrule">@IBAction</span> <span class="token keyword">func</span> <span class="token function-definition function">handlePan</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> gesture<span class="token punctuation">:</span> <span class="token class-name">UIPanGestureRecognizer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 1</span></span>
<span class="line">  <span class="token keyword">let</span> translation <span class="token operator">=</span> gesture<span class="token punctuation">.</span><span class="token function">translation</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> view<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2</span></span>
<span class="line">  <span class="token keyword">guard</span> <span class="token keyword">let</span> gestureView <span class="token operator">=</span> gesture<span class="token punctuation">.</span>view <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  gestureView<span class="token punctuation">.</span>center <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span></span>
<span class="line">    x<span class="token punctuation">:</span> gestureView<span class="token punctuation">.</span>center<span class="token punctuation">.</span>x <span class="token operator">+</span> translation<span class="token punctuation">.</span>x<span class="token punctuation">,</span></span>
<span class="line">    y<span class="token punctuation">:</span> gestureView<span class="token punctuation">.</span>center<span class="token punctuation">.</span>y <span class="token operator">+</span> translation<span class="token punctuation">.</span>y</span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 3</span></span>
<span class="line">  gesture<span class="token punctuation">.</span><span class="token function">setTranslation</span><span class="token punctuation">(</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> view<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>UIPanGestureRecognizer</code> calls this method when it first detects a pan gesture, then continuously as the user continues to pan and one last time when the pan completes — usually when the user’s finger lifts.</p><p>Here’s what’s going on in this code:</p><ol><li>The <code>UIPanGestureRecognizer</code> passes itself as an argument to this method. You can retrieve the amount the user’s finger moved by calling <code>translation(in:)</code>. You then use that amount to move the center of the monkey the same distance.</li><li>Note that instead of hard-coding the monkey image view into this method, you get a reference to the monkey image view by calling <code>gesture.view</code>. This makes your code more generic so that you can re-use this same routine for the banana image view later on.</li><li>It’s important to set the translation back to zero once you finish. Otherwise, the translation will keep compounding each time and you’ll see your monkey move rapidly off the screen!</li></ol><p>Now that this method is complete, you’ll hook it up to the <code>UIPanGestureRecognizer</code>.</p><h3 id="connecting-the-panning-gesture-to-the-recognizer" tabindex="-1"><a class="header-anchor" href="#connecting-the-panning-gesture-to-the-recognizer"><span>Connecting the Panning Gesture to the Recognizer</span></a></h3>`,6)),s("p",null,[n[31]||(n[31]=e("In the ")),n[32]||(n[32]=s("strong",null,"document outline",-1)),n[33]||(n[33]=e(" for ")),a(t,{icon:"fas fa-file-lines"}),n[34]||(n[34]=s("code",null,"Main.storyboard",-1)),n[35]||(n[35]=e(", control-drag from the monkey’s ")),n[36]||(n[36]=s("strong",null,"pan gesture recognizer",-1)),n[37]||(n[37]=e(" to the ")),n[38]||(n[38]=s("strong",null,"view controller",-1)),n[39]||(n[39]=e(". Select ")),n[40]||(n[40]=s("code",null,"handlePan",-1)),n[41]||(n[41]=e(": from the pop-up."))]),n[113]||(n[113]=o('<figure><img src="https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_04.gif" alt="Connecting the  method to " tabindex="0" loading="lazy"><figcaption>Connecting the <code>handlePan</code> method to <code>UIPanGestureRecognizer</code></figcaption></figure><p>At this point your <strong>Connections inspector</strong> for the <strong>pan gesture recognizer</strong> should look like this:</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_05.png" alt="Current state of Connections Inspector" tabindex="0" loading="lazy"><figcaption>Current state of Connections Inspector</figcaption></figure><p>Build and run and try to drag the monkey. It doesn’t work?! This is because Xcode disables touches by default on views that normally don’t accept touches — like image views.</p><h3 id="letting-the-image-views-accept-touches" tabindex="-1"><a class="header-anchor" href="#letting-the-image-views-accept-touches"><span>Letting the Image Views Accept Touches</span></a></h3><p>Fix this by selecting both image views, opening the <strong>Attributes inspector</strong> and checking <strong>User Interaction Enabled</strong>.</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_06.png" alt="Selecting the User Interaction Enabled checkbox" tabindex="0" loading="lazy"><figcaption>Selecting the User Interaction Enabled checkbox</figcaption></figure><p>Build and run again. This time, you can drag the monkey around the screen!</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_07-1.gif" alt="Dragging the monkey around the screen" tabindex="0" loading="lazy"><figcaption>Dragging the monkey around the screen</figcaption></figure><p>Notice that you still can’t drag the banana because you need to connect its own <strong>pan gesture recognizer</strong> to <code>handlePan(_:)</code>. You’ll do that now.</p><ol><li>Control-drag from the banana <strong>pan gesture recognizer</strong> to the <strong>view controller</strong> and select <code>handlePan</code>:.</li><li>Double-check to make sure you’ve checked <strong>User Interaction Enabled</strong> on the banana as well.</li></ol><p>Build and run. You can now drag both image views across the screen. It’s pretty easy to implement such a cool and fun effect, eh?</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_08.gif" alt="Dragging both images" tabindex="0" loading="lazy"><figcaption>Dragging both images</figcaption></figure><hr><h2 id="adding-deceleration-to-the-images" tabindex="-1"><a class="header-anchor" href="#adding-deceleration-to-the-images"><span>Adding Deceleration to the Images</span></a></h2><p>Apple apps and controls typically have a bit of deceleration before an animation finishes. You see this when scrolling a web view, for example. You’ll often want to use this type of behavior in your apps.</p><p>There are many ways of doing this. The approach you’ll use for this tutorial produces a nice effect without much effort. Here’s what you’ll do:</p><ol><li>Detect when the gesture ends.</li><li>Calculate the speed of the touch.</li><li>Animate the object moving to a final destination based on the touch speed.</li></ol><p>And here’s how you’ll accomplish those goals:</p><ul><li><strong>To detect when the gesture ends</strong>: Multiple calls to the gesture recognizer’s callback occur as the gesture recognizer’s state changes. Examples of those states are: <code>began</code>, <code>changed</code> or <code>ended</code>. You can find the current state of a gesture recognizer by looking at its <code>state</code> property.</li><li><strong>To detect the touch velocity</strong>: Some gesture recognizers return additional information. For example, <code>UIPanGestureRecognizer</code> has a handy method called <code>velocity(in:)</code> that returns, you guessed it, the velocity!</li></ul><div class="hint-container tip"><p class="hint-container-title">Note</p><p>You can view a full list of the methods for each gesture recognizer in <a href="https://developer.apple.com/documentation/uikit/uipangesturerecognizer" target="_blank" rel="noopener noreferrer">the API guide</a>.</p></div><h3 id="easing-out-your-animations" tabindex="-1"><a class="header-anchor" href="#easing-out-your-animations"><span>Easing Out Your Animations</span></a></h3>',22)),s("p",null,[n[42]||(n[42]=e("Start by adding the following to the bottom of ")),n[43]||(n[43]=s("code",null,"handlePan(_:)",-1)),n[44]||(n[44]=e(" in ")),a(t,{icon:"fa-brands fa-swift"}),n[45]||(n[45]=s("code",null,"ViewController.swift",-1)),n[46]||(n[46]=e(":"))]),n[114]||(n[114]=o(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">guard</span> gesture<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token punctuation">.</span>ended <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1</span></span>
<span class="line"><span class="token keyword">let</span> velocity <span class="token operator">=</span> gesture<span class="token punctuation">.</span><span class="token function">velocity</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> view<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> magnitude <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>velocity<span class="token punctuation">.</span>x <span class="token operator">*</span> velocity<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>velocity<span class="token punctuation">.</span>y <span class="token operator">*</span> velocity<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> slideMultiplier <span class="token operator">=</span> magnitude <span class="token operator">/</span> <span class="token number">200</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2</span></span>
<span class="line"><span class="token keyword">let</span> slideFactor <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">*</span> slideMultiplier</span>
<span class="line"><span class="token comment">// 3</span></span>
<span class="line"><span class="token keyword">var</span> finalPoint <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span></span>
<span class="line">  x<span class="token punctuation">:</span> gestureView<span class="token punctuation">.</span>center<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token punctuation">(</span>velocity<span class="token punctuation">.</span>x <span class="token operator">*</span> slideFactor<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  y<span class="token punctuation">:</span> gestureView<span class="token punctuation">.</span>center<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token punctuation">(</span>velocity<span class="token punctuation">.</span>y <span class="token operator">*</span> slideFactor<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4</span></span>
<span class="line">finalPoint<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>finalPoint<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> view<span class="token punctuation">.</span>bounds<span class="token punctuation">.</span>width<span class="token punctuation">)</span></span>
<span class="line">finalPoint<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>finalPoint<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> view<span class="token punctuation">.</span>bounds<span class="token punctuation">.</span>height<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 5</span></span>
<span class="line"><span class="token class-name">UIView</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span></span>
<span class="line">  withDuration<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>slideFactor <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  delay<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 6</span></span>
<span class="line">  options<span class="token punctuation">:</span> <span class="token punctuation">.</span>curveEaseOut<span class="token punctuation">,</span></span>
<span class="line">  animations<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">    gestureView<span class="token punctuation">.</span>center <span class="token operator">=</span> finalPoint</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This simple deceleration equation uses the following strategy:</p><ol><li>Calculates the length of the velocity vector (<em>i.e.</em> the magnitude).</li><li>Decreases the speed if the length is <code>&lt; 200</code>. Otherwise, it increases it.</li><li>Calculates a final point based on the velocity and the slideFactor.</li><li>Makes sure the final point is within the view’s bounds</li><li>Animates the view to the final resting place.</li><li>Uses the <strong>ease out</strong> animation option to slow the movement over time.</li></ol><p>Build and run to try it out. You should now have some basic but nice deceleration! Feel free to play around with it and improve it. If you come up with a better implementation, please share it in the forum discussion at the end of this article.</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_09.gif" alt="Dragging animations with deceleration" tabindex="0" loading="lazy"><figcaption>Dragging animations with deceleration</figcaption></figure><hr><h2 id="pinch-and-rotation-gestures" tabindex="-1"><a class="header-anchor" href="#pinch-and-rotation-gestures"><span>Pinch and Rotation Gestures</span></a></h2><p>Your app is coming along great so far, but it would be even cooler if you could scale and rotate the image views by using pinch and rotation gestures as well!</p><p>The begin project gives you a great start. It created <code>handlePinch(_:)</code> and <code>handleRotate(_:)</code> for you. It also connected those methods to the monkey image view and the banana image view. Now, you’ll complete the implementation.</p><h3 id="implementing-the-pinch-and-rotation-gestures" tabindex="-1"><a class="header-anchor" href="#implementing-the-pinch-and-rotation-gestures"><span>Implementing the Pinch and Rotation Gestures</span></a></h3>`,10)),s("p",null,[n[47]||(n[47]=e("Open ")),a(t,{icon:"fa-brands fa-swift"}),n[48]||(n[48]=s("code",null,"ViewController.swift",-1)),n[49]||(n[49]=e(". Add the following to ")),n[50]||(n[50]=s("code",null,"handlePinch(_:)",-1)),n[51]||(n[51]=e(":"))]),n[115]||(n[115]=o(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">guard</span> <span class="token keyword">let</span> gestureView <span class="token operator">=</span> gesture<span class="token punctuation">.</span>view <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">gestureView<span class="token punctuation">.</span>transform <span class="token operator">=</span> gestureView<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">scaledBy</span><span class="token punctuation">(</span></span>
<span class="line">  x<span class="token punctuation">:</span> gesture<span class="token punctuation">.</span>scale<span class="token punctuation">,</span></span>
<span class="line">  y<span class="token punctuation">:</span> gesture<span class="token punctuation">.</span>scale</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line">gesture<span class="token punctuation">.</span>scale <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next add the following to <code>handleRotate(_:)</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">guard</span> <span class="token keyword">let</span> gestureView <span class="token operator">=</span> gesture<span class="token punctuation">.</span>view <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">gestureView<span class="token punctuation">.</span>transform <span class="token operator">=</span> gestureView<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">rotated</span><span class="token punctuation">(</span></span>
<span class="line">  by<span class="token punctuation">:</span> gesture<span class="token punctuation">.</span>rotation</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line">gesture<span class="token punctuation">.</span>rotation <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Just like you got the translation from the <code>UIPanGestureRecognizer</code>, you get the scale and rotation from the <code>UIPinchGestureRecognizer</code> and <code>UIRotationGestureRecognizer</code>.</p><p>Every view has a transform applied to it, which gives information on the rotation, scale and translation that the view should have. Apple has many built-in methods to make working with a transform easier. These include <code>CGAffineTransform.scaledBy(x:y:)</code> to scale a given transform and <code>CGAffineTransform.rotated(by:)</code> to rotate a given transform.</p><p>Here, you use these methods to update the view’s transform based on the user’s gestures.</p><p>Again, since you’re updating the view each time the gesture updates, it’s very important to set the scale and rotation back to the default state so you don’t have craziness going on.</p>`,7)),s("p",null,[n[52]||(n[52]=e("Now, hook these methods up in the storyboard editor. Open ")),a(t,{icon:"fas fa-file-lines"}),n[53]||(n[53]=s("code",null,"Main.storyboard",-1)),n[54]||(n[54]=e(" and perform the following steps:"))]),n[116]||(n[116]=o('<ol><li>As you did previously, connect the two pinch gesture recognizers to the view controller’s <code>handlePinch:</code>.</li><li>Connect the two rotation gesture recognizers to the view controller’s <code>handleRotate:</code>.</li></ol><p>Your view controller connections should now look like this:</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2017/07/Screen-Shot-2017-07-27-at-4.30.25-PM.png" alt="View controller with connections" tabindex="0" loading="lazy"><figcaption>View controller with connections</figcaption></figure><p>Build and run on a device, if possible, because pinches and rotations are hard to do on the simulator.</p><p>If you are running on the simulator, hold down the <kbd>Option</kbd> key and drag to simulate two fingers. Then hold down <kbd>Shift</kbd> and <kbd>Option</kbd> at the same time to move the simulated fingers together to a different position.</p><p>You can now scale and rotate the monkey and the banana!</p><p>Monkey and banana respond to pinch and rotate gestures</p><hr><h2 id="simultaneous-gesture-recognizers" tabindex="-1"><a class="header-anchor" href="#simultaneous-gesture-recognizers"><span>Simultaneous Gesture Recognizers</span></a></h2><p>You may notice that if you put one finger on the monkey and one on the banana, you can drag them around at the same time. Kinda cool, eh?</p><p>However, you’ll notice that if you try to drag the monkey around and in the middle of dragging, bring down a second finger to pinch to zoom, it doesn’t work. By default, once one gesture recognizer on a view “claims” the gesture, other gesture recognizers can’t take over.</p><p>However, you can change this by overriding a method in the <code>UIGestureRecognizer</code> delegate.</p><h3 id="allowing-two-gestures-to-happen-at-once" tabindex="-1"><a class="header-anchor" href="#allowing-two-gestures-to-happen-at-once"><span>Allowing Two Gestures to Happen at Once</span></a></h3>',13)),s("p",null,[n[55]||(n[55]=e("Open ")),a(t,{icon:"fa-brands fa-swift"}),n[56]||(n[56]=s("code",null,"ViewController.swift",-1)),n[57]||(n[57]=e(". Below the ")),n[58]||(n[58]=s("code",null,"ViewController",-1)),n[59]||(n[59]=e(", create a ")),n[60]||(n[60]=s("code",null,"ViewController",-1)),n[61]||(n[61]=e(" class extension and conform it to ")),n[62]||(n[62]=s("code",null,"UIGestureRecognizerDelegate",-1)),n[63]||(n[63]=e(":"))]),n[117]||(n[117]=o(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">extension</span> <span class="token class-name">ViewController</span><span class="token punctuation">:</span> <span class="token class-name">UIGestureRecognizerDelegate</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, implement one of the delegate’s optional methods:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">gestureRecognizer</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token omit keyword">_</span> gestureRecognizer<span class="token punctuation">:</span> <span class="token class-name">UIGestureRecognizer</span><span class="token punctuation">,</span></span>
<span class="line">  shouldRecognizeSimultaneouslyWith otherGestureRecognizer<span class="token punctuation">:</span> <span class="token class-name">UIGestureRecognizer</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This method tells the gesture recognizer whether it’s OK to recognize a gesture if another recognizer has already detected a gesture. The default implementation always returns <code>false</code>, but you’ve switched it to always return <code>true</code>.</p>`,4)),s("p",null,[n[64]||(n[64]=e("Next, open ")),a(t,{icon:"fas fa-file-lines"}),n[65]||(n[65]=s("code",null,"Main.storyboard",-1)),n[66]||(n[66]=e(" and connect each gesture recognizer’s delegate outlet to the view controller. You’ll connect six gesture recognizers in total."))]),n[118]||(n[118]=s("figure",null,[s("img",{src:"https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_11.gif",alt:"Connecting the delegate outlets",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Connecting the delegate outlets")],-1)),n[119]||(n[119]=s("p",null,"Build and run again. Now, you can drag the monkey, pinch to scale it and continue dragging afterward! You can even scale and rotate at the same time in a natural way. This makes for a much nicer experience for the user.",-1)),n[120]||(n[120]=s("hr",null,null,-1)),n[121]||(n[121]=s("h2",{id:"programmatic-uigesturerecognizers",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#programmatic-uigesturerecognizers"},[s("span",null,"Programmatic UIGestureRecognizers")])],-1)),n[122]||(n[122]=s("p",null,"So far, you’ve created gesture recognizers with the storyboard editor, but what if you wanted to do things programmatically?",-1)),n[123]||(n[123]=s("p",null,"Well, why not try it out? You’ll do so by adding a tap gesture recognizer to play a sound effect when you tap either of the image views.",-1)),s("p",null,[n[67]||(n[67]=e("To play a sound, you’ll need to access ")),n[68]||(n[68]=s("code",null,"AVFoundation",-1)),n[69]||(n[69]=e(". At the top of ")),a(t,{icon:"fa-brands fa-swift"}),n[70]||(n[70]=s("code",null,"ViewController.swift",-1)),n[71]||(n[71]=e(", add:"))]),n[124]||(n[124]=o(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">import</span> <span class="token class-name">AVFoundation</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),s("p",null,[n[72]||(n[72]=e("Add the following changes to ")),a(t,{icon:"fa-brands fa-swift"}),n[73]||(n[73]=s("code",null,"ViewController.swift",-1)),n[74]||(n[74]=e(", just before ")),n[75]||(n[75]=s("code",null,"viewDidLoad()",-1)),n[76]||(n[76]=e(":"))]),n[125]||(n[125]=o(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">private</span> <span class="token keyword">var</span> chompPlayer<span class="token punctuation">:</span> <span class="token class-name">AVAudioPlayer</span><span class="token operator">?</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">createPlayer</span><span class="token punctuation">(</span>from filename<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">AVAudioPlayer</span><span class="token operator">?</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">guard</span> <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token class-name">Bundle</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span></span>
<span class="line">    forResource<span class="token punctuation">:</span> filename<span class="token punctuation">,</span></span>
<span class="line">    withExtension<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;caf&quot;</span></span></span>
<span class="line">    <span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token nil constant">nil</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">var</span> player <span class="token operator">=</span> <span class="token class-name">AVAudioPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> player <span class="token operator">=</span> <span class="token class-name">AVAudioPlayer</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> url<span class="token punctuation">)</span></span>
<span class="line">    player<span class="token punctuation">.</span><span class="token function">prepareToPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Error loading </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">url<span class="token punctuation">.</span>absoluteString</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">error</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> player</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Add the following code at the end of <code>viewDidLoad()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token comment">// 1</span></span>
<span class="line"><span class="token keyword">let</span> imageViews <span class="token operator">=</span> view<span class="token punctuation">.</span>subviews<span class="token punctuation">.</span>filter <span class="token punctuation">{</span></span>
<span class="line">  <span class="token short-argument">$0</span> <span class="token keyword">is</span> <span class="token class-name">UIImageView</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2</span></span>
<span class="line"><span class="token keyword">for</span> imageView <span class="token keyword">in</span> imageViews <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 3</span></span>
<span class="line">  <span class="token keyword">let</span> tapGesture <span class="token operator">=</span> <span class="token class-name">UITapGestureRecognizer</span><span class="token punctuation">(</span></span>
<span class="line">    target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span></span>
<span class="line">    action<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>handleTap<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 4</span></span>
<span class="line">  tapGesture<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span></span>
<span class="line">  imageView<span class="token punctuation">.</span><span class="token function">addGestureRecognizer</span><span class="token punctuation">(</span>tapGesture<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// TODO: Add a custom gesture recognizer too</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">chompPlayer <span class="token operator">=</span> <span class="token function">createPlayer</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;chomp&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The begin project contains <code>handleTap(_:)</code>. Add the following inside of this method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line">chompPlayer<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The audio playing code is outside the scope of this tutorial, but if you want to learn more check out our <a href="https://kodeco.com/3879-beginning-audio-with-avfoundation/lessons/1" target="_blank" rel="noopener noreferrer">AVFoundation Course</a>. The important part is in <code>viewDidLoad()</code>:</p><ol><li>Create an array of image views — in this case, the monkey and banana.</li><li>Cycle through the array.</li><li>Create a <code>UITapGestureRecognizer</code> for each image view, specifying the callback. This is an alternate way of adding gesture recognizers. Previously, you added the recognizers to the storyboard.</li><li>Set the delegate of the recognizer programmatically and add the recognizer to the image view.</li></ol><p>That’s it! Build and run. You can now tap the image views for a sound effect!</p><hr><h2 id="setting-uigesturerecognizer-dependencies" tabindex="-1"><a class="header-anchor" href="#setting-uigesturerecognizer-dependencies"><span>Setting <code>UIGestureRecognizer</code> Dependencies</span></a></h2><p>Everything works pretty well, except for one minor annoyance. Dragging an object very slightly causes it to both pan and play the sound effect. You really want the sound effect to play only when you tap an object, not when you pan it.</p><p>To solve this, you could remove or modify the delegate callback to behave differently when a touch and pinch coincide. But there’s another approach you can use with gesture recognizers: setting dependencies.</p><p>You can call a method called <code>require(toFail:)</code> on a gesture recognizer. Can you guess what it does?</p>`,13)),s("p",null,[n[77]||(n[77]=e("Open ")),a(t,{icon:"fas fa-file-lines"}),n[78]||(n[78]=s("code",null,"Main.storyboard",-1)),n[79]||(n[79]=e(" and another editor on the right by clicking the button on the top-right of the storyboard panel."))]),s("p",null,[n[80]||(n[80]=e("On the left of the new panel that just opened, click the button with four squares. Finally, select the third item from the list, ")),n[81]||(n[81]=s("strong",null,"Automatic",-1)),n[82]||(n[82]=e(", which will ensure that ")),a(t,{icon:"fa-brands fa-swift"}),n[83]||(n[83]=s("code",null,"ViewController.swift",-1)),n[84]||(n[84]=e(" shows there."))]),n[126]||(n[126]=o(`<figure><img src="https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_13-1.gif" alt="Setting up your editor" tabindex="0" loading="lazy"><figcaption>Setting up your editor</figcaption></figure><p>Now <kbd>Control</kbd>-drag from the monkey pan gesture recognizer to below the class declaration and connect it to an outlet named <code>monkeyPan</code>. Repeat this for the banana pan gesture recognizer, but name the outlet <code>bananaPan</code>.</p><p>Make sure you add the correct names to the recognizers to prevent mixing them up! You can check this in the <strong>Connections inspector</strong>.</p><figure><img src="https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_12.gif" alt="Checking the names in the Connections Inspector" tabindex="0" loading="lazy"><figcaption>Checking the names in the Connections Inspector</figcaption></figure><p>Next, add these two lines to <code>viewDidLoad()</code>, right before the <strong>TODO</strong>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line">tapGesture<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>toFail<span class="token punctuation">:</span> monkeyPan<span class="token punctuation">)</span></span>
<span class="line">tapGesture<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>toFail<span class="token punctuation">:</span> bananaPan<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, the app will only call the tap gesture recognizer if it doesn’t detect a pan. Pretty cool, eh?</p><hr><h2 id="creating-custom-uigesturerecognizers" tabindex="-1"><a class="header-anchor" href="#creating-custom-uigesturerecognizers"><span>Creating Custom <code>UIGestureRecognizers</code></span></a></h2><p>At this point, you know pretty much everything you need to know to use the built-in gesture recognizers in your apps. But what if you want to detect some kind of gesture that the built-in recognizers don’t support?</p><p>Well, you can always write your own! For example, what if you wanted to detect a “tickle” when the user rapidly moves the object left and right several times? Ready to do this?</p><hr><h2 id="tickling-the-monkey" tabindex="-1"><a class="header-anchor" href="#tickling-the-monkey"><span>“Tickling” the Monkey</span></a></h2>`,13)),s("p",null,[n[85]||(n[85]=e("Create a new file via ")),a(t,{icon:"iconfont icon-select"}),n[86]||(n[86]=s("code",null,"[File ▸ New ▸ File…]",-1)),n[87]||(n[87]=e(" and pick the ")),a(t,{icon:"iconfont icon-select"}),n[88]||(n[88]=s("code",null,"[iOS ▸ Source ▸ Swift File]",-1)),n[89]||(n[89]=e(" template. Name the file ")),n[90]||(n[90]=s("code",null,"TickleGestureRecognizer",-1)),n[91]||(n[91]=e("."))]),s("p",null,[n[92]||(n[92]=e("Then replace the ")),n[93]||(n[93]=s("code",null,"import",-1)),n[94]||(n[94]=e(" statement in ")),a(t,{icon:"fa-brands fa-swift"}),n[95]||(n[95]=s("code",null,"TickleGestureRecognizer.swift",-1)),n[96]||(n[96]=e(" with the following:"))]),n[127]||(n[127]=o(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">import</span> <span class="token class-name">UIKit</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">TickleGestureRecognizer</span><span class="token punctuation">:</span> <span class="token class-name">UIGestureRecognizer</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 1</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">let</span> requiredTickles <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">let</span> distanceForTickleGesture<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">25</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2</span></span>
<span class="line">  <span class="token keyword">enum</span> <span class="token class-name">TickleDirection</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> unknown</span>
<span class="line">    <span class="token keyword">case</span> <span class="token keyword">left</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token keyword">right</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 3</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">var</span> tickleCount <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">var</span> tickleStartLocation<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span> <span class="token operator">=</span> <span class="token punctuation">.</span>zero</span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">var</span> latestDirection<span class="token punctuation">:</span> <span class="token class-name">TickleDirection</span> <span class="token operator">=</span> <span class="token punctuation">.</span>unknown</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here’s what you just declared, step-by-step:</p><ul><li><code>tickleCount</code>: How many times the user switches the direction of the gesture, while moving a minimum number of points. Once the user changes gesture direction three times, you count it as a tickle gesture.</li><li><code>tickleStartLocation</code>: The point where the user started moving in this tickle. You’ll update this each time the user switches direction, while moving a minimum number of points.</li><li><code>latestDirection</code> : The latest direction the finger moved, which starts as unknown. After the user moves a minimum amount, you’ll check whether the gesture went left or right and update this appropriately.</li></ul><ol><li>The constants that define what the gesture will need. Note that you infer <code>requiredTickles</code> as an <code>Int</code>, but you need to specify <code>distanceForTickleGesture</code> as a <code>CGFloat</code>. If you don’t, then the app will infer it as an Int, which causes difficulties when calculating with <code>CGPoints</code> later.</li><li>The possible tickle directions.</li><li>Three properties to keep track of this gesture, which are:</li></ol><p>Of course, these properties are specific to the gesture you’re detecting here. You’ll create your own if you’re making a recognizer for a different type of gesture.</p><h3 id="managing-the-gesture-s-state" tabindex="-1"><a class="header-anchor" href="#managing-the-gesture-s-state"><span>Managing the Gesture’s State</span></a></h3><p>One of the things that you’ll change is the state of the gesture. When a tickle completes, you’ll change the <code>state</code> of the gesture to <code>ended</code>.</p>`,7)),s("p",null,[n[97]||(n[97]=e("Switch to ")),a(t,{icon:"fa-brands fa-swift"}),n[98]||(n[98]=s("code",null,"TickleGestureRecognizer.swift",-1)),n[99]||(n[99]=e(" and add the following methods to the class:"))]),n[128]||(n[128]=o(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  tickleCount <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">  latestDirection <span class="token operator">=</span> <span class="token punctuation">.</span>unknown</span>
<span class="line">  tickleStartLocation <span class="token operator">=</span> <span class="token punctuation">.</span>zero</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> state <span class="token operator">==</span> <span class="token punctuation">.</span>possible <span class="token punctuation">{</span></span>
<span class="line">    state <span class="token operator">=</span> <span class="token punctuation">.</span>failed</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">touchesBegan</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> touches<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">UITouch</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">guard</span> <span class="token keyword">let</span> touch <span class="token operator">=</span> touches<span class="token punctuation">.</span>first <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  tickleStartLocation <span class="token operator">=</span> touch<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> view<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">touchesMoved</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> touches<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">UITouch</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">guard</span> <span class="token keyword">let</span> touch <span class="token operator">=</span> touches<span class="token punctuation">.</span>first <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> tickleLocation <span class="token operator">=</span> touch<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> view<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> horizontalDifference <span class="token operator">=</span> tickleLocation<span class="token punctuation">.</span>x <span class="token operator">-</span> tickleStartLocation<span class="token punctuation">.</span>x</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token function">abs</span><span class="token punctuation">(</span>horizontalDifference<span class="token punctuation">)</span> <span class="token operator">&lt;</span> distanceForTickleGesture <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> direction<span class="token punctuation">:</span> <span class="token class-name">TickleDirection</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> horizontalDifference <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    direction <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">left</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    direction <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">right</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> latestDirection <span class="token operator">==</span> <span class="token punctuation">.</span>unknown <span class="token operator">||</span></span>
<span class="line">    <span class="token punctuation">(</span>latestDirection <span class="token operator">==</span> <span class="token punctuation">.</span><span class="token keyword">left</span> <span class="token operator">&amp;&amp;</span> direction <span class="token operator">==</span> <span class="token punctuation">.</span><span class="token keyword">right</span><span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">    <span class="token punctuation">(</span>latestDirection <span class="token operator">==</span> <span class="token punctuation">.</span><span class="token keyword">right</span> <span class="token operator">&amp;&amp;</span> direction <span class="token operator">==</span> <span class="token punctuation">.</span><span class="token keyword">left</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    tickleStartLocation <span class="token operator">=</span> tickleLocation</span>
<span class="line">    latestDirection <span class="token operator">=</span> direction</span>
<span class="line">    tickleCount <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> state <span class="token operator">==</span> <span class="token punctuation">.</span>possible <span class="token operator">&amp;&amp;</span> tickleCount <span class="token operator">&gt;</span> requiredTickles <span class="token punctuation">{</span></span>
<span class="line">      state <span class="token operator">=</span> <span class="token punctuation">.</span>ended</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">touchesEnded</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> touches<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">UITouch</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">touchesCancelled</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> touches<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">UITouch</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There’s a lot of code here and you don’t need to know the specifics for this tutorial.</p><p>To give you a general idea of how it works, you’re overriding the <code>UIGestureRecognizer</code>‘s <code>reset()</code>, <code>touchesBegan(_:with:)</code>, <code>touchesMoved(_:with:)</code>, <code>touchesEnded(_:with:)</code> and <code>touchesCancelled(_:with:)</code> methods. And you’re writing custom code to look at the touches and detect the gesture.</p><p>Once you’ve found the gesture, you’ll want to send updates to the callback method. You do this by changing the <code>state</code> property of the gesture recognizer.</p><p>Once the gesture begins, you’ll usually set the state to <code>.began</code>. After that, you’ll send any updates with <code>.changed</code> and finalize it with <code>.ended</code>.</p><p>For this simple gesture recognizer, once the user has tickled the object, that’s it. You’ll just mark it as <code>.ended</code>.</p><p>OK, now to use this new recognizer!</p><h3 id="implementing-your-custom-recognizer" tabindex="-1"><a class="header-anchor" href="#implementing-your-custom-recognizer"><span>Implementing Your Custom Recognizer</span></a></h3>`,8)),s("p",null,[n[100]||(n[100]=e("Open ")),a(t,{icon:"fa-brands fa-swift"}),n[101]||(n[101]=s("code",null,"ViewController.swift",-1)),n[102]||(n[102]=e(" and make the following changes."))]),n[129]||(n[129]=o(`<p>Add the following code to the top of the class, right after <code>chompPlayer</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">private</span> <span class="token keyword">var</span> laughPlayer<span class="token punctuation">:</span> <span class="token class-name">AVAudioPlayer</span><span class="token operator">?</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In <code>viewDidLoad()</code>, add the gesture recognizer to the image view by replacing the <strong>TODO</strong>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">let</span> tickleGesture <span class="token operator">=</span> <span class="token class-name">TickleGestureRecognizer</span><span class="token punctuation">(</span></span>
<span class="line">  target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span></span>
<span class="line">  action<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>handleTickle<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line">tickleGesture<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span></span>
<span class="line">imageView<span class="token punctuation">.</span><span class="token function">addGestureRecognizer</span><span class="token punctuation">(</span>tickleGesture<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>At end of <code>viewDidLoad()</code> add:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line">laughPlayer <span class="token operator">=</span> <span class="token function">createPlayer</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;laugh&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Finally, create a new method at the end of the class to handle your tickle gesture:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">handleTickle</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> gesture<span class="token punctuation">:</span> <span class="token class-name">TickleGestureRecognizer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  laughPlayer<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Using this custom gesture recognizer is as simple as using the built-in ones!</p><p>Build and run. “Hehe, that tickles!”</p><p>![Testing the tickle gesture recognizer](https://koenig-media.raywenderlich.com/uploads/2019/12/Bildschirmvideo-aufnehmen-2019-12-28-um-10.51.33.gif 240x)</p><hr><h2 id="where-to-go-from-here" tabindex="-1"><a class="header-anchor" href="#where-to-go-from-here"><span>Where to Go From Here?</span></a></h2>`,13)),s("p",null,[n[104]||(n[104]=e("Download the completed version of the project using the ")),s("a",y,[a(t,{icon:"fas fa-download"}),n[103]||(n[103]=s("code",null,"[Download Materials]",-1))]),n[105]||(n[105]=e(" button at the top or bottom of this tutorial."))]),n[130]||(n[130]=s("p",null,[e("Congrats, you’re now a master of gesture recognizers — both built-in and custom ones! Touch interaction is such an important part of iOS devices and "),s("code",null,"UIGestureRecognizer"),e(" is the key to adding easy-to-use gestures beyond simple button taps.")],-1)),n[131]||(n[131]=s("p",null,"I hope you enjoyed this tutorial! If you have any questions or comments, please join the discussion below.",-1)),n[132]||(n[132]=s("hr",null,null,-1))])}const x=c(h,[["render",b]]),G=JSON.parse('{"path":"/kodeco.com/6747815-uigesturerecognizer-tutorial-getting-started.html","title":"UIGestureRecognizer Tutorial: Getting Started","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"UIGestureRecognizer Tutorial: Getting Started","description":"Article(s) > UIGestureRecognizer Tutorial: Getting Started","icon":"fa-brands fa-swift","category":["Swift","Article(s)"],"tag":["blog","kodeco.com","swift","ios","xcode"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"UIGestureRecognizer Tutorial: Getting Started\\",\\"image\\":[\\"https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_01-281x500.png =240x\\",\\"https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_02.gif\\",\\"https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_03-1-650x389.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_04.gif\\",\\"https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_05.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_06.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_07-1.gif\\",\\"https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_08.gif\\",\\"https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_09.gif\\",\\"https://koenig-media.raywenderlich.com/uploads/2017/07/Screen-Shot-2017-07-27-at-4.30.25-PM.png\\",\\"https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_11.gif\\",\\"https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_13-1.gif\\",\\"https://koenig-media.raywenderlich.com/uploads/2019/11/monkey_pinch_12.gif\\",\\"https://koenig-media.raywenderlich.com/uploads/2019/12/Bildschirmvideo-aufnehmen-2019-12-28-um-10.51.33.gif 240x\\"],\\"datePublished\\":\\"2020-01-20T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/kodeco.com/6747815-uigesturerecognizer-tutorial-getting-started.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"UIGestureRecognizer Tutorial: Getting Started"}],["meta",{"property":"og:description","content":"Article(s) > UIGestureRecognizer Tutorial: Getting Started"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://koenig-media.raywenderlich.com/uploads/2020/01/UIGestureRecognizer-twitter.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://koenig-media.raywenderlich.com/uploads/2020/01/UIGestureRecognizer-twitter.png"}],["meta",{"name":"twitter:image:alt","content":"UIGestureRecognizer Tutorial: Getting Started"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"kodeco.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2020-01-20T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > UIGestureRecognizer Tutorial: Getting Started"},{"property":"og:description","content":"UIGestureRecognizer Tutorial: Getting Started"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/kodeco.com/6747815-uigesturerecognizer-tutorial-getting-started.html"}]],"prev":"/programming/swift/articles/README.md","date":"2020-01-20T00:00:00.000Z","isOriginal":false,"cover":"https://koenig-media.raywenderlich.com/uploads/2020/01/UIGestureRecognizer-twitter.png"},"git":{},"readingTime":{"minutes":13.9,"words":4170},"filePathRelative":"kodeco.com/6747815-uigesturerecognizer-tutorial-getting-started.md"}');export{x as comp,G as data};
