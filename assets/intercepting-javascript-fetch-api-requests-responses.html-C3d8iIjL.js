import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as f,d as s,f as e,b as i,a as y,t as w,n as d,g as k,w as t,e as a,r as l,o as j}from"./app-BVguHYKu.js";const I="/bookshelf/assets/image/blog.logrocket.com/intercepting-javascript-fetch-api-requests/banner.png",q={},P={id:"frontmatter-title-관련",tabindex:"-1"},A={class:"header-anchor",href:"#frontmatter-title-관련"},F={class:"table-of-contents"},x={href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",target:"_blank",rel:"noopener noreferrer"},S={href:"https://developer.mozilla.org/en-US/docs/Web/API/Request",target:"_blank",rel:"noopener noreferrer"},T={href:"https://developer.mozilla.org/en-US/docs/Web/API/fetch",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/werk85/fetch-intercept",target:"_blank",rel:"noopener noreferrer"},J={href:"https://developer.mozilla.org/en-US/docs/Web/API/Response",target:"_blank",rel:"noopener noreferrer"},N={class:"hint-container note"},U={href:"https://developer.mozilla.org/en-US/docs/Web/API/Response/clone",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/nodejs/node/pull/41749",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/node-fetch/node-fetch",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/werk85/fetch-intercept",target:"_blank",rel:"noopener noreferrer"},H={class:"hint-container note"},V={href:"https://github.com/whatwg/fetch",target:"_blank",rel:"noopener noreferrer"},W={href:"https://axios-http.com/docs/interceptors",target:"_blank",rel:"noopener noreferrer"};function z(m,n){const u=l("VPCard"),o=l("router-link"),v=l("SiteInfo"),h=l("RouteLink"),p=l("VPIcon"),g=l("CodeTabs");return j(),f("div",null,[s("h1",P,[s("a",A,[s("span",null,w(m.$frontmatter.title)+" 관련",1)])]),e(u,d(k({title:"Node.js > Article(s)",desc:"Article(s)",link:"/programming/js-node/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",F,[s("ul",null,[s("li",null,[e(o,{to:"#the-javascript-fetch-api"},{default:t(()=>n[0]||(n[0]=[a("The JavaScript Fetch API")])),_:1,__:[0]})]),s("li",null,[e(o,{to:"#implementing-interceptors"},{default:t(()=>n[1]||(n[1]=[a("Implementing interceptors")])),_:1,__:[1]})]),s("li",null,[e(o,{to:"#monkey-patching-with-fetch"},{default:t(()=>n[2]||(n[2]=[a("Monkey patching with Fetch")])),_:1,__:[2]}),s("ul",null,[s("li",null,[e(o,{to:"#request-interceptor"},{default:t(()=>n[3]||(n[3]=[a("Request interceptor")])),_:1,__:[3]})]),s("li",null,[e(o,{to:"#response-interceptor"},{default:t(()=>n[4]||(n[4]=[a("Response interceptor")])),_:1,__:[4]})]),s("li",null,[e(o,{to:"#handling-errors"},{default:t(()=>n[5]||(n[5]=[a("Handling errors")])),_:1,__:[5]})]),s("li",null,[e(o,{to:"#node-js"},{default:t(()=>n[6]||(n[6]=[a("Node.js")])),_:1,__:[6]})])])]),s("li",null,[e(o,{to:"#using-fetch-intercept-library"},{default:t(()=>n[7]||(n[7]=[a("Using fetch-intercept library")])),_:1,__:[7]})]),s("li",null,[e(o,{to:"#summary"},{default:t(()=>n[8]||(n[8]=[a("Summary")])),_:1,__:[8]})])])]),n[64]||(n[64]=s("hr",null,null,-1)),e(v,{name:"Intercepting JavaScript Fetch API requests and responses",desc:"We demonstrate intercepting JavaScript Fetch API calls using monkey patching and the fetch-intercept library.",url:"https://blog.logrocket.com/intercepting-javascript-fetch-api-requests-responses",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/intercepting-javascript-fetch-api-requests/banner.png"}),s("p",null,[n[10]||(n[10]=a("Interceptors are code blocks that you can use to preprocess or post-process HTTP calls, helping with global error handling, authentication, logging, and more.In this article, you’ll learn how to ")),e(h,{to:"/blog.logrocket.com/axios-vs-fetch-best-http-requests.html"},{default:t(()=>n[9]||(n[9]=[s("strong",null,"intercept JavaScript Fetch API calls",-1)])),_:1,__:[9]}),n[11]||(n[11]=a("."))]),n[65]||(n[65]=s("figure",null,[s("img",{src:I,alt:"JavaScript Intercept Fetch API Responses",tabindex:"0",loading:"lazy"}),s("figcaption",null,"JavaScript Intercept Fetch API Responses")],-1)),n[66]||(n[66]=s("p",null,"There are two types of events for which you may want to intercept HTTP calls, request and response events. The request interceptor should be executed before the actual HTTP request is sent, whereas the response interceptor should be executed before it reaches the application code that made the call.",-1)),s("p",null,[n[13]||(n[13]=a("Before diving into the code, we need to understand a few important factors. For one, the ")),s("a",x,[e(p,{icon:"fa-brands fa-firefox"}),n[12]||(n[12]=a("Fetch API"))]),n[14]||(n[14]=a(" doesn’t support interceptors natively. Additionally, extra packages are required to ")),n[15]||(n[15]=s("a",{href:"#node"},"use the Fetch API in Node.js",-1)),n[16]||(n[16]=a("."))]),n[67]||(n[67]=i(`<hr><h2 id="the-javascript-fetch-api" tabindex="-1"><a class="header-anchor" href="#the-javascript-fetch-api"><span>The JavaScript Fetch API</span></a></h2><p>First, let’s cover some fundamentals of the Fetch API, for example, the syntax:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> fetchResponsePromise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>resource <span class="token punctuation">[</span><span class="token punctuation">,</span> init<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,4)),s("p",null,[n[19]||(n[19]=s("code",null,"resource",-1)),n[20]||(n[20]=a(" defines the resource you want to fetch, which can be either a ")),s("a",S,[e(p,{icon:"fa-brands fa-firefox"}),n[17]||(n[17]=s("code",null,"Request",-1)),n[18]||(n[18]=a("object"))]),n[21]||(n[21]=a(") or a URL. ")),n[22]||(n[22]=s("code",null,"init",-1)),n[23]||(n[23]=a(" is an optional object that will contain any custom configuration you want to apply to this particular request."))]),n[68]||(n[68]=i(`<p>The Fetch API is promise-based. Therefore, when you call the Fetch method, you’ll get a response promise back. Here, it is referred to as <code>fetchResponsePromise</code>, as seen in the example above.</p><p>By default, Fetch uses the <code>GET</code> method for API calls, as shown below:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://jsonplaceholder.typicode.com/todos/1&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Below is an example of a <code>POST</code> request with Fetch:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://jsonplaceholder.typicode.com/todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;New Todo&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">userId</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json; charset=UTF-8&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),s("p",null,[n[25]||(n[25]=a("The ")),n[26]||(n[26]=s("code",null,"POST",-1)),n[27]||(n[27]=a(" call must have a ")),n[28]||(n[28]=s("code",null,"body",-1)),n[29]||(n[29]=a(". Take a look at the ")),s("a",T,[e(p,{icon:"fa-brands fa-firefox"}),n[24]||(n[24]=a("Fetch documentation"))]),n[30]||(n[30]=a(" for more details."))]),n[69]||(n[69]=s("hr",null,null,-1)),n[70]||(n[70]=s("h2",{id:"implementing-interceptors",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#implementing-interceptors"},[s("span",null,"Implementing interceptors")])],-1)),s("p",null,[n[32]||(n[32]=a("There are two ways to add interceptors to our Fetch API calls; we can either use monkey patching or the ")),s("a",R,[e(p,{icon:"iconfont icon-github"}),n[31]||(n[31]=s("code",null,"werk85/fetch-intercept",-1))]),n[33]||(n[33]=a("."))]),n[71]||(n[71]=i(`<hr><h2 id="monkey-patching-with-fetch" tabindex="-1"><a class="header-anchor" href="#monkey-patching-with-fetch"><span>Monkey patching with Fetch</span></a></h2><p>One way to create an interceptor for any JavaScript function or method is to monkey patch it. Monkey patching is an approach to override the original functionality with your version of the function.</p><p>Let’s take a step-by-step look at how you can create an interceptor for the Fetch API with monkey patching:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">fetch</span><span class="token operator">:</span> originalFetch <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function-variable function">fetch</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> <span class="token punctuation">[</span>resource<span class="token punctuation">,</span> config <span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// request interceptor here</span></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">originalFetch</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// response interceptor here</span></span>
<span class="line">  <span class="token keyword">return</span> response<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The code above overrides the original Fetch method with a custom implementation and calls the original Fetch method inside it. You’ll use this boilerplate code to create request and response interceptors.</p><h3 id="request-interceptor" tabindex="-1"><a class="header-anchor" href="#request-interceptor"><span>Request interceptor</span></a></h3><p>In the following example, we’ll create a simple request interceptor that changes the resource URL of an illustration:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">fetch</span><span class="token operator">:</span> originalFetch <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">;</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function-variable function">fetch</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> <span class="token punctuation">[</span>resource<span class="token punctuation">,</span> config <span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// request interceptor starts</span></span>
<span class="line">  resource <span class="token operator">=</span> <span class="token string">&#39;https://jsonplaceholder.typicode.com/todos/2&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// request interceptor ends</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">originalFetch</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// response interceptor here</span></span>
<span class="line">  <span class="token keyword">return</span> response<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://jsonplaceholder.typicode.com/todos/1&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// {</span></span>
<span class="line"><span class="token comment">//   &quot;userId&quot;: 1,</span></span>
<span class="line"><span class="token comment">//   &quot;id&quot;: 2,</span></span>
<span class="line"><span class="token comment">//   &quot;title&quot;: &quot;quis ut nam facilis et officia qui&quot;,</span></span>
<span class="line"><span class="token comment">//   &quot;completed&quot;: false</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This API call would fetch data from <code>https://jsonplaceholder.typicode.com/todos/2</code> instead of <code>https://jsonplaceholder.typicode.com/todos/1</code>, as shown by the ID <code>2</code> of the <code>todo</code>.</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>One of the most common use cases for request interceptors is to change the headers for authentication.</p></div><h3 id="response-interceptor" tabindex="-1"><a class="header-anchor" href="#response-interceptor"><span>Response interceptor</span></a></h3><p>The response interceptor would intercept the API response before it is delivered to the actual caller. Let’s take a look at the following code:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">fetch</span><span class="token operator">:</span> originalFetch <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">;</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function-variable function">fetch</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> <span class="token punctuation">[</span>resource<span class="token punctuation">,</span> config<span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">originalFetch</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// response interceptor</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">json</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    response</span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>data<span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Intercepted: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  response<span class="token punctuation">.</span>json <span class="token operator">=</span> json<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> response<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://jsonplaceholder.typicode.com/todos/1&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// {</span></span>
<span class="line"><span class="token comment">//     &quot;userId&quot;: 1,</span></span>
<span class="line"><span class="token comment">//     &quot;id&quot;: 1,</span></span>
<span class="line"><span class="token comment">//     &quot;title&quot;: &quot;Intercepted: delectus aut autem&quot;,</span></span>
<span class="line"><span class="token comment">//     &quot;completed&quot;: false</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14)),s("p",null,[n[35]||(n[35]=a("In the code above, we changed the JSON method to return some custom data instead of the original data. Check out the documentation to learn more about the ")),s("a",J,[e(p,{icon:"fa-brands fa-firefox"}),n[34]||(n[34]=a("properties that you can change"))]),n[36]||(n[36]=a("."))]),s("div",N,[n[40]||(n[40]=s("p",{class:"hint-container-title"},"Note",-1)),s("p",null,[n[38]||(n[38]=a("Responses are only allowed to be consumed once. Therefore, you need to ")),s("a",U,[e(p,{icon:"fa-brands fa-firefox"}),n[37]||(n[37]=a("clone the response"))]),n[39]||(n[39]=a(" each time you want to use it."))])]),n[72]||(n[72]=i(`<h3 id="handling-errors" tabindex="-1"><a class="header-anchor" href="#handling-errors"><span>Handling errors</span></a></h3><p>You can easily handle errors for requests by checking the values for <code>response.ok</code> and <code>response.status</code>. In the code snippet below, you can intercept <code>404</code> errors:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">fetch</span><span class="token operator">:</span> originalFetch <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">;</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function-variable function">fetch</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> <span class="token punctuation">[</span>resource<span class="token punctuation">,</span> config<span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">originalFetch</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 404 error handling</span></span>
<span class="line">    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> response<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://jsonplaceholder.typicode.com/todos/1000000&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="node-js" tabindex="-1"><a class="header-anchor" href="#node-js"><span>Node.js</span></a></h3>`,4)),s("p",null,[n[45]||(n[45]=a("You can use the same approach in Node.js. However, Node.js doesn’t support the Fetch API natively (though native support for the Fetch API will be ")),s("a",O,[n[41]||(n[41]=a("available in future versions of Node.js (")),e(p,{icon:"iconfont icon-github"}),n[42]||(n[42]=s("code",null,"nodejs/node",-1)),n[43]||(n[43]=a(")"))]),n[46]||(n[46]=a("). For now, you need to install the ")),s("a",C,[e(p,{icon:"iconfont icon-github"}),n[44]||(n[44]=s("code",null,"node-fetch/node-fetch",-1))]),n[47]||(n[47]=a(" package, then monkey patch the ")),n[48]||(n[48]=s("code",null,"fetch",-1)),n[49]||(n[49]=a(" method."))]),n[73]||(n[73]=s("hr",null,null,-1)),n[74]||(n[74]=s("h2",{id:"using-fetch-intercept-library",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#using-fetch-intercept-library"},[s("span",null,"Using fetch-intercept library")])],-1)),s("p",null,[n[51]||(n[51]=a("If you’re not a fan of doing the ")),n[52]||(n[52]=s("code",null,"dirty",-1)),n[53]||(n[53]=a(" work (pun intended), the ")),s("a",E,[e(p,{icon:"iconfont icon-github"}),n[50]||(n[50]=s("code",null,"werk85/fetch-intercept",-1))]),n[54]||(n[54]=a(" library allows you to register interceptors with a cleaner API. You can use npm or Yarn to install the library as follows:"))]),e(g,{data:[{id:'<VPIcon icon="fa-brands fa-yarn"/>'},{id:'<VPIcon icon="fa-brands fa-npm"/>'}],active:0,"tab-id":"sh"},{title0:t(({value:c,isActive:r})=>[e(p,{icon:"fa-brands fa-yarn"})]),title1:t(({value:c,isActive:r})=>[e(p,{icon:"fa-brands fa-npm"})]),tab0:t(({value:c,isActive:r})=>n[55]||(n[55]=[s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[s("pre",null,[s("code",{class:"language-bash"},[s("span",{class:"line"},[s("span",{class:"token function"},"yarn"),a(),s("span",{class:"token function"},"install"),a(" fetch-intercept whatwg-fetch")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),tab1:t(({value:c,isActive:r})=>n[56]||(n[56]=[s("div",{class:"language-javascript line-numbers-mode","data-highlighter":"prismjs","data-ext":"js"},[s("pre",null,[s("code",{class:"language-javascript"},[s("span",{class:"line"},[a("npm install fetch"),s("span",{class:"token operator"},"-"),a("intercept whatwg"),s("span",{class:"token operator"},"-"),a("fetch "),s("span",{class:"token operator"},"--"),a("save")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),_:1}),s("div",H,[n[60]||(n[60]=s("p",{class:"hint-container-title"},"Note",-1)),s("p",null,[n[58]||(n[58]=a("The fetch-intercept library only supports browsers and won’t work in Node.js. Also, it requires ")),s("a",V,[e(p,{icon:"iconfont icon-github"}),n[57]||(n[57]=s("code",null,"whatwg/fetch",-1))]),n[59]||(n[59]=a(" as dependency to work."))])]),n[75]||(n[75]=i(`<p>With the code below, we can implement the same request and response interceptors as in our monkey patching example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> fetchIntercept <span class="token keyword">from</span> <span class="token string">&#39;fetch-intercept&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> unregister <span class="token operator">=</span> fetchIntercept<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">request</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> modifiedUrl <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://jsonplaceholder.typicode.com/todos/2</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span>modifiedUrl<span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">requestError</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">response</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> clonedResponse <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">json</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">      clonedResponse</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>data<span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Intercepted: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    response<span class="token punctuation">.</span>json <span class="token operator">=</span> json<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> response<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">responseError</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://jsonplaceholder.typicode.com/todos/1&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// unregister interceptors</span></span>
<span class="line"><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>register</code> method allows you to register the interceptors for Fetch API calls. It takes an object with the <code>request</code>, <code>requestError</code>, <code>response</code>, and <code>responseError</code> callbacks. The <code>register</code> method returns another method that can be used to unregister the interceptors.</p>`,3)),s("p",null,[n[62]||(n[62]=a("The Fetch API doesn’t support interceptors natively. However, there are other libraries for making HTTP calls that support interceptors. Take a look at ")),s("a",W,[e(p,{icon:"fas fa-globe"}),n[61]||(n[61]=a("Axios"))]),n[63]||(n[63]=a(", which provides this functionality out of the box."))]),n[76]||(n[76]=s("hr",null,null,-1)),n[77]||(n[77]=s("h2",{id:"summary",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#summary"},[s("span",null,"Summary")])],-1)),n[78]||(n[78]=s("p",null,"In this article, we covered what JavaScript interceptors are, learning how to create interceptors both by monkey patching the Fetch API and using the fetch-intercept library.",-1)),n[79]||(n[79]=s("p",null,"Originally introduced by Angular, interceptors are helpful for a wide variety of use cases, like helping with global error handling, authentication, logging, and more. You can use the methods described in this article to add interceptors to your JavaScript applications, however, keep in mind the additional required dependencies for Node.js.",-1)),n[80]||(n[80]=s("p",null,"I hope you enjoyed this article, be sure to leave a comment if you have any questions. Happy coding!",-1)),y(" TODO: add ARTICLE CARD "),e(u,d(k({title:"Intercepting JavaScript Fetch API requests and responses",desc:"We demonstrate intercepting JavaScript Fetch API calls using monkey patching and the fetch-intercept library.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/intercepting-javascript-fetch-api-requests-responses.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const D=b(q,[["render",z]]),M=JSON.parse('{"path":"/blog.logrocket.com/intercepting-javascript-fetch-api-requests-responses.html","title":"Intercepting JavaScript Fetch API requests and responses","lang":"en-US","frontmatter":{"lang":"en-US","title":"Intercepting JavaScript Fetch API requests and responses","description":"Article(s) > Intercepting JavaScript Fetch API requests and responses","icon":"fa-brands fa-node","category":["Node.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","axios"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Intercepting JavaScript Fetch API requests and responses\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/intercepting-javascript-fetch-api-requests/banner.png\\"],\\"datePublished\\":\\"2022-02-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Indermohan Singh\\",\\"url\\":\\"https://blog.logrocket.com/author/indermohansingh/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/intercepting-javascript-fetch-api-requests-responses.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Intercepting JavaScript Fetch API requests and responses"}],["meta",{"property":"og:description","content":"Article(s) > Intercepting JavaScript Fetch API requests and responses"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/intercepting-javascript-fetch-api-requests/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/intercepting-javascript-fetch-api-requests/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Intercepting JavaScript Fetch API requests and responses"}],["meta",{"property":"article:author","content":"Indermohan Singh"}],["meta",{"property":"article:tag","content":"axios"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-02-08T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Intercepting JavaScript Fetch API requests and responses"},{"property":"og:description","content":"Intercepting JavaScript Fetch API requests and responses"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/intercepting-javascript-fetch-api-requests-responses.html"}]],"prev":"/programming/js-node/articles/README.md","date":"2022-02-08T00:00:00.000Z","isOriginal":false,"author":[{"name":"Indermohan Singh","url":"https://blog.logrocket.com/author/indermohansingh/"}],"cover":"/assets/image/blog.logrocket.com/intercepting-javascript-fetch-api-requests/banner.png"},"git":{},"readingTime":{"minutes":5.1,"words":1530},"filePathRelative":"blog.logrocket.com/intercepting-javascript-fetch-api-requests-responses.md","copyright":{"author":"Indermohan Singh"}}');export{D as comp,M as data};
