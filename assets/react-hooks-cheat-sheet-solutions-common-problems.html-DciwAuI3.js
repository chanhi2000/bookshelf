import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as n,f as e,b as l,a as f,t as h,n as u,g as k,w as t,e as a,r as i,o as y}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems/banner.png",x={},j={id:"frontmatter-title-관련",tabindex:"-1"},S={class:"header-anchor",href:"#frontmatter-title-관련"},C={class:"table-of-contents"},A={href:"https://github.com/ohansemmanuel/react-hooks-cheatsheet",target:"_blank",rel:"noopener noreferrer"},q={class:"hint-container info"},R={href:"https://reactjs.org/docs/hooks-reference.html#usestate",target:"_blank",rel:"noopener noreferrer"},T={href:"https://linguinecode.com/post/why-react-setstate-usestate-does-not-update-immediately",target:"_blank",rel:"noopener noreferrer"},E={href:"https://react-hooks-cheatsheet.com/usestate",target:"_blank",rel:"noopener noreferrer"},I={href:"https://reactjs.org/docs/hooks-reference.html#useeffect",target:"_blank",rel:"noopener noreferrer"},H={href:"https://react-hooks-cheatsheet.com/useeffect",target:"_blank",rel:"noopener noreferrer"},D={href:"https://reactjs.org/docs/hooks-reference.html#usecontext",target:"_blank",rel:"noopener noreferrer"},V={href:"https://react-hooks-cheatsheet.com/usecontext",target:"_blank",rel:"noopener noreferrer"},M={href:"https://reactjs.org/docs/hooks-reference.html#uselayouteffect",target:"_blank",rel:"noopener noreferrer"},z={href:"https://react-hooks-cheatsheet.com/uselayoutEffect",target:"_blank",rel:"noopener noreferrer"},B={href:"https://reactjs.org/docs/hooks-reference.html#usereducer",target:"_blank",rel:"noopener noreferrer"},F={href:"https://react-hooks-cheatsheet.com/usereducer",target:"_blank",rel:"noopener noreferrer"},L={href:"https://reactjs.org/docs/hooks-reference.html#usecallback",target:"_blank",rel:"noopener noreferrer"},N={href:"https://en.wikipedia.org/wiki/Memoization",target:"_blank",rel:"noopener noreferrer"},G={href:"https://react-hooks-cheatsheet.com/usecallback",target:"_blank",rel:"noopener noreferrer"},O={href:"https://reactjs.org/docs/hooks-reference.html#usememo",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://react-hooks-cheatsheet.com/usememo",target:"_blank",rel:"noopener noreferrer"},P={href:"https://reactjs.org/docs/hooks-reference.html#useref",target:"_blank",rel:"noopener noreferrer"},U={href:"https://react-hooks-cheatsheet.com/useRef",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://codesandbox.io/s/compassionate-browser-ieidgo?file=/src/App.js",target:"_blank",rel:"noopener noreferrer"},W={href:"https://codesandbox.io/s/nostalgic-cdn-002eg9?file=/src/App.js",target:"_blank",rel:"noopener noreferrer"};function J(d,s){const r=i("VPCard"),p=i("router-link"),v=i("SiteInfo"),o=i("VPIcon"),c=i("RouteLink"),m=i("VidStack");return y(),g("div",null,[n("h1",j,[n("a",S,[n("span",null,h(d.$frontmatter.title)+" 관련",1)])]),e(r,u(k({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",C,[n("ul",null,[n("li",null,[e(p,{to:"#usestate"},{default:t(()=>s[0]||(s[0]=[a("useState")])),_:1,__:[0]}),n("ul",null,[n("li",null,[e(p,{to:"#declare-statevariable"},{default:t(()=>s[1]||(s[1]=[a("Declare statevariable")])),_:1,__:[1]})]),n("li",null,[e(p,{to:"#update-statevariable"},{default:t(()=>s[2]||(s[2]=[a("Update statevariable")])),_:1,__:[2]})]),n("li",null,[e(p,{to:"#why-does-the-react-usestate-hook-not-update-immediately"},{default:t(()=>s[3]||(s[3]=[a("Why does the React useState Hook not update immediately?")])),_:1,__:[3]})]),n("li",null,[e(p,{to:"#react-hooks-and-multiple-state-variables"},{default:t(()=>s[4]||(s[4]=[a("React Hooks and multiple state variables")])),_:1,__:[4]})]),n("li",null,[e(p,{to:"#use-object-statevariable"},{default:t(()=>s[5]||(s[5]=[a("Use object statevariable")])),_:1,__:[5]})]),n("li",null,[e(p,{to:"#initialize-state-fromfunction"},{default:t(()=>s[6]||(s[6]=[a("Initialize state fromfunction")])),_:1,__:[6]})]),n("li",null,[e(p,{to:"#functional-setstate"},{default:t(()=>s[7]||(s[7]=[a("Functional setState")])),_:1,__:[7]})])])]),n("li",null,[e(p,{to:"#useeffect"},{default:t(()=>s[8]||(s[8]=[a("useEffect")])),_:1,__:[8]}),n("ul",null,[n("li",null,[e(p,{to:"#basic-sideeffect"},{default:t(()=>s[9]||(s[9]=[a("Basic sideeffect")])),_:1,__:[9]})]),n("li",null,[e(p,{to:"#effect-withcleanup"},{default:t(()=>s[10]||(s[10]=[a("Effect withcleanup")])),_:1,__:[10]})]),n("li",null,[e(p,{to:"#multiple-effects"},{default:t(()=>s[11]||(s[11]=[a("Multiple effects")])),_:1,__:[11]})]),n("li",null,[e(p,{to:"#skipping-effects-array-dependency"},{default:t(()=>s[12]||(s[12]=[a("Skipping effects (array dependency)")])),_:1,__:[12]})]),n("li",null,[e(p,{to:"#skipping-effects-empty-array-dependency"},{default:t(()=>s[13]||(s[13]=[a("Skipping effects (empty array dependency)")])),_:1,__:[13]})]),n("li",null,[e(p,{to:"#skipping-effects-no-array-dependency"},{default:t(()=>s[14]||(s[14]=[a("Skipping effects (no array dependency)")])),_:1,__:[14]})])])]),n("li",null,[e(p,{to:"#usecontext"},{default:t(()=>s[15]||(s[15]=[a("useContext")])),_:1,__:[15]})]),n("li",null,[e(p,{to:"#uselayouteffect"},{default:t(()=>s[16]||(s[16]=[a("useLayoutEffect")])),_:1,__:[16]}),n("ul",null,[n("li",null,[e(p,{to:"#similar-usage-as-useeffect"},{default:t(()=>s[17]||(s[17]=[a("Similar usage as useEffect")])),_:1,__:[17]})]),n("li",null,[e(p,{to:"#uselayouteffect-vs-useeffect"},{default:t(()=>s[18]||(s[18]=[a("useLayoutEffect vs. useEffect")])),_:1,__:[18]})])])]),n("li",null,[e(p,{to:"#usereducer"},{default:t(()=>s[19]||(s[19]=[a("useReducer")])),_:1,__:[19]}),n("ul",null,[n("li",null,[e(p,{to:"#basic-usage"},{default:t(()=>s[20]||(s[20]=[a("Basic usage")])),_:1,__:[20]})]),n("li",null,[e(p,{to:"#initialize-statelazily"},{default:t(()=>s[21]||(s[21]=[a("Initialize statelazily")])),_:1,__:[21]})]),n("li",null,[e(p,{to:"#imitate-the-behavior-of-this-setstate"},{default:t(()=>s[22]||(s[22]=[a("Imitate the behavior of this.setState")])),_:1,__:[22]})])])]),n("li",null,[e(p,{to:"#usecallback"},{default:t(()=>s[23]||(s[23]=[a("useCallback")])),_:1,__:[23]}),n("ul",null,[n("li",null,[e(p,{to:"#usecallback-example"},{default:t(()=>s[24]||(s[24]=[a("useCallback example")])),_:1,__:[24]})]),n("li",null,[e(p,{to:"#usecallback-with-referenced-function"},{default:t(()=>s[25]||(s[25]=[a("useCallback with referenced function")])),_:1,__:[25]})]),n("li",null,[e(p,{to:"#usecallback-with-inlinefunction"},{default:t(()=>s[26]||(s[26]=[a("useCallback with inlinefunction")])),_:1,__:[26]})])])]),n("li",null,[e(p,{to:"#usememo"},{default:t(()=>s[27]||(s[27]=[a("useMemo")])),_:1,__:[27]}),n("ul",null,[n("li",null,[e(p,{to:"#usememo-example"},{default:t(()=>s[28]||(s[28]=[a("useMemo example")])),_:1,__:[28]})]),n("li",null,[e(p,{to:"#basic-usage-1"},{default:t(()=>s[29]||(s[29]=[a("Basic usage")])),_:1,__:[29]})])])]),n("li",null,[e(p,{to:"#useref"},{default:t(()=>s[30]||(s[30]=[a("useRef")])),_:1,__:[30]}),n("ul",null,[n("li",null,[e(p,{to:"#accessing-thedom"},{default:t(()=>s[31]||(s[31]=[a("Accessing theDOM")])),_:1,__:[31]})]),n("li",null,[e(p,{to:"#instance-like-variables-generic-container"},{default:t(()=>s[32]||(s[32]=[a("Instance-like variables (generic container)")])),_:1,__:[32]})]),n("li",null,[e(p,{to:"#other-examples"},{default:t(()=>s[33]||(s[33]=[a("Other examples")])),_:1,__:[33]})])])]),n("li",null,[e(p,{to:"#usetransition"},{default:t(()=>s[34]||(s[34]=[a("useTransition")])),_:1,__:[34]}),n("ul",null,[n("li",null,[e(p,{to:"#marking-state-as-transition"},{default:t(()=>s[35]||(s[35]=[a("Marking state as transition")])),_:1,__:[35]})]),n("li",null,[e(p,{to:"#difference-between-usetransition-and-regular-state-update"},{default:t(()=>s[36]||(s[36]=[a("Difference between useTransition and regular state update")])),_:1,__:[36]})])])]),n("li",null,[e(p,{to:"#usedeferredvalue"},{default:t(()=>s[37]||(s[37]=[a("useDeferredValue")])),_:1,__:[37]})]),n("li",null,[e(p,{to:"#useid"},{default:t(()=>s[38]||(s[38]=[a("useId")])),_:1,__:[38]})]),n("li",null,[e(p,{to:"#conclusion"},{default:t(()=>s[39]||(s[39]=[a("Conclusion")])),_:1,__:[39]})])])]),s[175]||(s[175]=n("hr",null,null,-1)),e(v,{name:"React Hooks cheat sheet: Best practices with examples",desc:"Editor’s note: This React Hooks tutorial was last updated on 6 March 2023 to include more React Hooks best practices […]",url:"https://blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems/banner.png"}),s[176]||(s[176]=n("div",{class:"hint-container note"},[n("p",{class:"hint-container-title"},"Editor’s note"),n("p",null,"This React Hooks tutorial was last updated on 6 March 2023 to include more React Hooks best practices and examples.")],-1)),s[177]||(s[177]=n("figure",null,[n("img",{src:w,alt:"React Hooks Cheat Sheet Best Practices Examples",tabindex:"0",loading:"lazy"}),n("figcaption",null,"React Hooks Cheat Sheet Best Practices Examples")],-1)),s[178]||(s[178]=n("p",null,"React Hooks have a very simple API, but given its massive community and variety of use cases, questions are bound to arise around React Hooks best practices and how to solve common problems.",-1)),n("p",null,[s[43]||(s[43]=a("In this tutorial, we’ll outline some React Hooks best practices and highlight some use cases with examples, from simple to advanced scenarios. To help demonstrate how to solve common React Hooks questions, I built an ")),n("a",A,[s[40]||(s[40]=a("accompanying web app (")),e(o,{icon:"iconfont icon-github"}),s[41]||(s[41]=n("code",null,"ohansemmanuel/react-hooks-cheatsheet",-1)),s[42]||(s[42]=a(")"))]),s[44]||(s[44]=a(" for live interaction with some of the examples from this article."))]),n("div",q,[s[48]||(s[48]=n("p",{class:"hint-container-title"},"React Hooks cheat sheet: Best practices and examples",-1)),n("p",null,[s[46]||(s[46]=a("This React Hooks cheat sheet includes a lot of code snippets and assumes some Hooks fluency. If you’re completely new to Hooks, you may want to start with our ")),e(c,{to:"/blog.logrocket.com/react-reference-guide-hooks-api.html"},{default:t(()=>s[45]||(s[45]=[n("strong",null,"React Hooks API reference guide",-1)])),_:1,__:[45]}),s[47]||(s[47]=a("."))])]),s[179]||(s[179]=n("hr",null,null,-1)),s[180]||(s[180]=n("h2",{id:"usestate",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#usestate"},[n("span",null,[n("code",null,"useState")])])],-1)),n("p",null,[n("a",R,[e(o,{icon:"fa-brands fa-react"}),s[49]||(s[49]=n("code",null,"useState",-1))]),s[50]||(s[50]=a(" lets you use local state within a function component. You pass the initial state to this function and it returns a variable with the current state value (not necessarily the initial state) and another function to update this value."))]),s[181]||(s[181]=n("p",null,[a("Check out this React "),n("code",null,"useState"),a(" video tutorial:")],-1)),e(m,{src:"youtube/4qVNaohzDWU"}),s[182]||(s[182]=l(`<h3 id="declare-statevariable" tabindex="-1"><a class="header-anchor" href="#declare-statevariable"><span>Declare statevariable</span></a></h3><p>Declaring a state variable is as simple as calling <code>useState</code> with some initial state value, like so: <code>useState(initialStateValue)</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">DeclareStateVar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span> State variable is <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="update-statevariable" tabindex="-1"><a class="header-anchor" href="#update-statevariable"><span>Update statevariable</span></a></h3><p>Updating a state variable is as simple as invoking the updater function returned by the <code>useState</code> invocation: <code>const [stateValue, updaterFn] = useState(initialStateValue);</code>.</p><figure><img src="https://storage.googleapis.com/blog-images-backup/1*xKBiQT_91AU-PlNLGjv0Yg.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Note how the age state variable is beingupdated.</p><p>Here’s the code responsible for the screencast above:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="UpdateStateVar.js"><span>UpdateStateVar.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">UpdateStateVar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setAge</span><span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      Today <span class="token constant">I</span> am <span class="token punctuation">{</span>age<span class="token punctuation">}</span> Years <span class="token keyword">of</span> Age</span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Get older<span class="token operator">!</span> <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="why-does-the-react-usestate-hook-not-update-immediately" tabindex="-1"><a class="header-anchor" href="#why-does-the-react-usestate-hook-not-update-immediately"><span>Why does the React <code>useState</code> Hook not update immediately?</span></a></h3>`,10)),n("p",null,[s[55]||(s[55]=a("If you find that ")),n("a",T,[e(o,{icon:"fas fa-globe"}),s[51]||(s[51]=n("code",null,"useState",-1)),s[52]||(s[52]=a("/")),s[53]||(s[53]=n("code",null,"setState",-1)),s[54]||(s[54]=a(" are not updating immediately"))]),s[56]||(s[56]=a(", the answer is simple: they’re just queues."))]),s[183]||(s[183]=l(`<p>React <code>useState</code> and <code>setState</code> don’t make changes directly to the state object; they create queues to optimize performance, which is why the changes don’t update immediately.</p><h3 id="react-hooks-and-multiple-state-variables" tabindex="-1"><a class="header-anchor" href="#react-hooks-and-multiple-state-variables"><span>React Hooks and multiple state variables</span></a></h3><p>Multiple state variables may be used and updated from within a functional component, as shown below:</p><figure><img src="https://storage.googleapis.com/blog-images-backup/1*1MFDgE1LQuAc1_wyBgyVNQ.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Here’s the code responsible for the screencast above:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MultipleStateVars.js"><span>MultipleStateVars.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">MultipleStateVars</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>siblingsNum<span class="token punctuation">,</span> setSiblingsNum<span class="token punctuation">]</span> <span class="token operator">=</span> </span>
<span class="line">    <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleAge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setAge</span><span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleSiblingsNum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> </span>
<span class="line">      <span class="token function">setSiblingsNum</span><span class="token punctuation">(</span>siblingsNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Today <span class="token constant">I</span> am <span class="token punctuation">{</span>age<span class="token punctuation">}</span> Years <span class="token keyword">of</span> Age<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token constant">I</span> have <span class="token punctuation">{</span>siblingsNum<span class="token punctuation">}</span> siblings<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleAge<span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">          Get older<span class="token operator">!</span> </span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleSiblingsNum<span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">            More siblings<span class="token operator">!</span> </span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="use-object-statevariable" tabindex="-1"><a class="header-anchor" href="#use-object-statevariable"><span>Use object statevariable</span></a></h3><p>As opposed to strings and numbers, you could also use an object as the initial value passed to <code>useState</code>.</p><p>Note that you have to pass the entire object to the <code>useState</code> updater function because the object is replaced, not merged.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 🐢 setState (object merge) vs useState (object replace)</span></span>
<span class="line"><span class="token comment">// assume initial state is {name: &quot;Ohans&quot;}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&#39;unknown&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// new state object will be</span></span>
<span class="line"><span class="token comment">// {name: &quot;Ohans&quot;, age: &quot;unknown&quot;}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">useStateUpdater</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">&#39;unknown&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// new state object will be</span></span>
<span class="line"><span class="token comment">// {age: &quot;unknown&quot;} - initial object is replaced</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://storage.googleapis.com/blog-images-backup/1*wYJuoTiiarplOkwoG36I2A.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Multiple state objects updated via a state object variable.</p><p>Here’s the code for the screencast above:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="StateObject.js"><span>StateObject.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">StateObject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token literal-property property">siblingsNum</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span>state<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token operator">:</span> state<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> age<span class="token punctuation">,</span> siblingsNum <span class="token punctuation">}</span> <span class="token operator">=</span> state</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Today <span class="token constant">I</span> am <span class="token punctuation">{</span>age<span class="token punctuation">}</span> Years <span class="token keyword">of</span> Age<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token constant">I</span> have <span class="token punctuation">{</span>siblingsNum<span class="token punctuation">}</span> siblings<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>Get older<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;siblingsNum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">          More siblings<span class="token operator">!</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="initialize-state-fromfunction" tabindex="-1"><a class="header-anchor" href="#initialize-state-fromfunction"><span>Initialize state fromfunction</span></a></h3><p>As opposed to just passing an initial state value, state could also be initialized from a function, as shown below:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="StateFromFn.js"><span>StateFromFn.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">StateFromFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>token<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> token <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&quot;my-token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> token <span class="token operator">||</span> <span class="token string">&quot;default#-token#&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Token is <span class="token punctuation">{</span>token<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="functional-setstate" tabindex="-1"><a class="header-anchor" href="#functional-setstate"><span>Functional <code>setState</code></span></a></h3><p>The updater function returned from invoking <code>useState</code> can also take a function similar to the good ol’ <code>setState</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> updateValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// both forms of invoking &quot;updateValue&quot; below are valid 👇</span></span>
<span class="line"><span class="token function">updateValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">updateValue</span><span class="token punctuation">(</span><span class="token parameter">previousValue</span> <span class="token operator">=&gt;</span> previousValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is ideal when the state update depends on some previous value of state.</p><figure><img src="https://storage.googleapis.com/blog-images-backup/1*uAEGQN-IESENc82FnkJUfA.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>A counter with functional setStateupdates.</p><p>Here’s the code for the screencast above:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="CounterFnSetState.js"><span>CounterFnSetState.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">CounterFnSetState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Count value is<span class="token operator">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>Reset<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>button </span>
<span class="line">        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">prevCount</span> <span class="token operator">=&gt;</span> prevCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token function">Plus</span> <span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>button </span>
<span class="line">        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">prevCount</span> <span class="token operator">=&gt;</span> prevCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">       <span class="token function">Minus</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,25)),n("p",null,[s[60]||(s[60]=a("Here’s a ")),n("a",E,[e(o,{icon:"fas fa-globe"}),s[57]||(s[57]=a("live, editable ")),s[58]||(s[58]=n("code",null,"useState",-1)),s[59]||(s[59]=a(" cheat sheet"))]),s[61]||(s[61]=a(" if you want to dive deeper on your own."))]),s[184]||(s[184]=n("hr",null,null,-1)),s[185]||(s[185]=n("h2",{id:"useeffect",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#useeffect"},[n("span",null,[n("code",null,"useEffect")])])],-1)),n("p",null,[s[64]||(s[64]=a("With")),n("a",I,[e(o,{icon:"fa-brands fa-react"}),s[62]||(s[62]=n("code",null,"useEffect",-1))]),s[65]||(s[65]=a(", you invoke ")),e(c,{to:"/blog.logrocket.com/useeffect-react-hook-complete-guide.html"},{default:t(()=>s[63]||(s[63]=[n("strong",null,"side effects from within functional components",-1)])),_:1,__:[63]}),s[66]||(s[66]=a(", which is an important concept to understand in the React Hooks era."))]),s[186]||(s[186]=l(`<h3 id="basic-sideeffect" tabindex="-1"><a class="header-anchor" href="#basic-sideeffect"><span>Basic sideeffect</span></a></h3><figure><img src="https://storage.googleapis.com/blog-images-backup/1*RdkmsjpFV1_KRxtk1pRFlw.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Watch the title of the documentupdate.</p><p>Here’s the code responsible for the screencast above:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="BasicEffect.js"><span>BasicEffect.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">BasicEffect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setAge</span><span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;You are &#39;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">&#39; years old!&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span> Look at the title <span class="token keyword">of</span> the current tab <span class="token keyword">in</span> your browser <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Update Title<span class="token operator">!</span><span class="token operator">!</span> <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="effect-withcleanup" tabindex="-1"><a class="header-anchor" href="#effect-withcleanup"><span>Effect withcleanup</span></a></h3><p>It’s pretty common to clean up an effect after some time. This is possible by returning a function from within the effect function passed to <code>useEffect</code>. Below is an example with <code>addEventListener</code>.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="EffectCleanup.js"><span>EffectCleanup.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">EffectCleanup</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">clicked</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;window clicked&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> clicked<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// return a clean-up function</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> clicked<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      When you click the window you&#39;ll </span>
<span class="line">      find a message logged to the console</span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="multiple-effects" tabindex="-1"><a class="header-anchor" href="#multiple-effects"><span>Multiple effects</span></a></h3><p>Multiple <code>useEffect</code> calls can happen within a functional component, as shown below:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MultipleEffects.js"><span>MultipleEffects.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">MultipleEffects</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 🍟</span></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">clicked</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;window clicked&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> clicked<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> clicked<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 🍟 another useEffect hook </span></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;another useEffect call&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      Check your console logs</span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Note that<code>useEffect</code> calls can be skipped — i.e., not invoked on every render. This is done by passing a second array argument to the effect function.</p><h3 id="skipping-effects-array-dependency" tabindex="-1"><a class="header-anchor" href="#skipping-effects-array-dependency"><span>Skipping effects (array dependency)</span></a></h3><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ArrayDepMount.js"><span>ArrayDepMount.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">ArrayDepMount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>randomNumber<span class="token punctuation">,</span> setRandomNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>effectLogs<span class="token punctuation">,</span> setEffectLogs<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setEffectLogs</span><span class="token punctuation">(</span><span class="token parameter">prevEffectLogs</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token operator">...</span>prevEffectLogs<span class="token punctuation">,</span> <span class="token string">&#39;effect fn has been invoked&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span>randomNumber<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>button</span>
<span class="line">        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">setRandomNumber</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">        Generate random number<span class="token operator">!</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span>effectLogs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token string">&#39;🍔&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> effect<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In the example above, <code>useEffect</code> is passed an array of one value: <code>[randomNumber]</code>.</p><p>Thus, the effect function will be called on mount <em>and</em> whenever a new random number is generated.</p><p>Here’s the <strong>Generate random number</strong> button being clicked and the effect function being rerun upon generating a new random number:</p><figure><img src="https://storage.googleapis.com/blog-images-backup/1*mSqiFgHeY6k84us2RBnLkg.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="skipping-effects-empty-array-dependency" tabindex="-1"><a class="header-anchor" href="#skipping-effects-empty-array-dependency"><span>Skipping effects (empty array dependency)</span></a></h3><p>In this example, <code>useEffect</code> is passed an empty array, <code>[]</code>. Therefore, the effect function will be called only on mount.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ArrayDepMount.js"><span>ArrayDepMount.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">ArrayDepMount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>randomNumber<span class="token punctuation">,</span> setRandomNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>effectLogs<span class="token punctuation">,</span> setEffectLogs<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setEffectLogs</span><span class="token punctuation">(</span><span class="token parameter">prevEffectLogs</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token operator">...</span>prevEffectLogs<span class="token punctuation">,</span> <span class="token string">&#39;effect fn has been invoked&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span>randomNumber<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>button</span>
<span class="line">        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">setRandomNumber</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">        Generate random number<span class="token operator">!</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span>effectLogs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token string">&#39;🍔&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> effect<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here’s the button being clicked and the effect function not invoked:</p><figure><img src="https://storage.googleapis.com/blog-images-backup/1*VVxa13t8u8oobG_1GIM1Qw.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="skipping-effects-no-array-dependency" tabindex="-1"><a class="header-anchor" href="#skipping-effects-no-array-dependency"><span>Skipping effects (no array dependency)</span></a></h3><p>Without an array dependency, the effect function will be run after every single render.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>“This will be logged after every render<span class="token operator">!</span>”<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26)),n("p",null,[s[70]||(s[70]=a("Here’s a ")),n("a",H,[e(o,{icon:"fas fa-globe"}),s[67]||(s[67]=a("live, editable ")),s[68]||(s[68]=n("code",null,"useEffect",-1)),s[69]||(s[69]=a(" cheat sheet"))]),s[71]||(s[71]=a(" if you’d like to explore further."))]),s[187]||(s[187]=n("hr",null,null,-1)),s[188]||(s[188]=n("h2",{id:"usecontext",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#usecontext"},[n("span",null,[n("code",null,"useContext")])])],-1)),n("p",null,[n("a",D,[e(o,{icon:"fa-brands fa-react"}),s[72]||(s[72]=n("code",null,"useContext",-1))]),s[73]||(s[73]=a(" saves you the stress of having to rely on a Context consumer. React Context has a simpler API when compared to ")),s[74]||(s[74]=n("code",null,"MyContext.Consumer",-1)),s[75]||(s[75]=a(" and the render props API it exposes."))]),n("p",null,[s[77]||(s[77]=a("Context is React’s way of ")),e(c,{to:"/blog.logrocket.com/react-reference-guide-context-api.html"},{default:t(()=>s[76]||(s[76]=[n("strong",null,"handling shared data between multiple components",-1)])),_:1,__:[76]}),s[78]||(s[78]=a("."))]),s[189]||(s[189]=l(`<p>The following example highlights the difference between consuming a context object value via <code>useContext</code> or <code>Context.Consumer</code>:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Button.js"><span>Button.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// example Context object</span></span>
<span class="line"><span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">&quot;dark&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// usage with context Consumer</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">&lt;</span>ThemeContext<span class="token punctuation">.</span>Consumer<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span><span class="token parameter">theme</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>button className<span class="token operator">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span><span class="token operator">&gt;</span> Amazing button <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext<span class="token punctuation">.</span>Consumer<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// usage with useContext hook </span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>useContext<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">ButtonHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">&lt;</span>button className<span class="token operator">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span><span class="token operator">&gt;</span>Amazing button<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here’s a live example with <code>useContext</code>:</p><figure><img src="https://storage.googleapis.com/blog-images-backup/1*sJEVsJmB2vHc8vqqP4nAJA.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>And here’s the code responsible for the example above:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Display.js"><span>Display.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">&#39;light&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Display</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div</span>
<span class="line">      style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">background</span><span class="token operator">:</span> theme <span class="token operator">===</span> <span class="token string">&#39;dark&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;black&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;papayawhip&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">color</span><span class="token operator">:</span> theme <span class="token operator">===</span> <span class="token string">&#39;dark&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;white&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;palevioletred&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">&#39;100%&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">minHeight</span><span class="token operator">:</span> <span class="token string">&#39;200px&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span><span class="token string">&#39;The theme here is &#39;</span> <span class="token operator">+</span> theme<span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,6)),n("p",null,[s[80]||(s[80]=a("Here’s a live, editable ")),n("a",V,[e(o,{icon:"fas fa-globe"}),s[79]||(s[79]=a("React Context cheat sheet"))]),s[81]||(s[81]=a(" if you’d like to tinker around yourself."))]),s[190]||(s[190]=n("hr",null,null,-1)),s[191]||(s[191]=n("h2",{id:"uselayouteffect",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#uselayouteffect"},[n("span",null,[n("code",null,"useLayoutEffect")])])],-1)),n("p",null,[n("a",M,[e(o,{icon:"fa-brands fa-react"}),s[82]||(s[82]=n("code",null,"useLayoutEffect",-1))]),s[83]||(s[83]=a(" has the very same signature as ")),s[84]||(s[84]=n("code",null,"useEffect",-1)),s[85]||(s[85]=a(". We’ll discuss the difference between ")),s[86]||(s[86]=n("code",null,"useLayoutEffect",-1)),s[87]||(s[87]=a(" and ")),s[88]||(s[88]=n("code",null,"useEffect",-1)),s[89]||(s[89]=a(" below."))]),s[192]||(s[192]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do something</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>arrayDependency<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="similar-usage-as-useeffect" tabindex="-1"><a class="header-anchor" href="#similar-usage-as-useeffect"><span>Similar usage as <code>useEffect</code></span></a></h3><p>Here’s the same example for <code>useEffect</code> built with <code>useLayoutEffect</code>:</p><figure><img src="https://storage.googleapis.com/blog-images-backup/1*a7MsYcXko93rq_9KtjiXpg.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>And here’s the code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ArrayDep.js"><span>ArrayDep.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">ArrayDep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>randomNumber<span class="token punctuation">,</span> setRandomNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>effectLogs<span class="token punctuation">,</span> setEffectLogs<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  </span>
<span class="line">  <span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setEffectLogs</span><span class="token punctuation">(</span><span class="token parameter">prevEffectLogs</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token operator">...</span>prevEffectLogs<span class="token punctuation">,</span> <span class="token string">&#39;effect fn has been invoked&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>randomNumber<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span>randomNumber<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>button</span>
<span class="line">        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">setRandomNumber</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">        Generate random number<span class="token operator">!</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span>effectLogs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token string">&#39;🍔&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> effect<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="uselayouteffect-vs-useeffect" tabindex="-1"><a class="header-anchor" href="#uselayouteffect-vs-useeffect"><span><code>useLayoutEffect</code> vs. <code>useEffect</code></span></a></h3>`,7)),n("p",null,[s[91]||(s[91]=a("What’s the ")),e(c,{to:"/blog.logrocket.com/react-useeffect-vs-uselayouteffect-hooks-examples.html"},{default:t(()=>s[90]||(s[90]=[n("strong",null,[a("difference between "),n("code",null,"useEffect"),a(" and "),n("code",null,"useLayoutEffect")],-1)])),_:1,__:[90]}),s[92]||(s[92]=a("? The function passed to ")),s[93]||(s[93]=n("code",null,"useEffect",-1)),s[94]||(s[94]=a(" fires after layout and paint — i.e., after the render has been committed to the screen. This is OK for most side effects that shouldn’t block the browser from updating the screen."))]),s[193]||(s[193]=n("p",null,[a("There are cases where you may not want the behavior "),n("code",null,"useEffect"),a(" provides, though; for example, if you need to make a visual change to the DOM as a side effect, "),n("code",null,"useEffect"),a(" won’t be the best choice.")],-1)),s[194]||(s[194]=n("p",null,[a("To prevent the user from seeing flickers of changes, you can use "),n("code",null,"useLayoutEffect"),a(". The function passed to "),n("code",null,"useLayoutEffect"),a(" will be run before the browser updates the screen.")],-1)),n("p",null,[s[96]||(s[96]=a("You can ")),e(c,{to:"/blog.logrocket.com/react-useeffect-vs-uselayouteffect-hooks-examples.html"},{default:t(()=>s[95]||(s[95]=[n("strong",null,"read my follow-up piece",-1)])),_:1,__:[95]}),s[97]||(s[97]=a(" for a deep dive on the differences between ")),s[98]||(s[98]=n("code",null,"useEffect",-1)),s[99]||(s[99]=a(" and ")),s[100]||(s[100]=n("code",null,"useLayoutEffect",-1)),s[101]||(s[101]=a("."))]),n("p",null,[s[104]||(s[104]=a("Here’s a live, editable ")),n("a",z,[e(o,{icon:"fas fa-globe"}),s[102]||(s[102]=n("code",null,"useLayoutEffect",-1)),s[103]||(s[103]=a(" cheat sheet"))]),s[105]||(s[105]=a("."))]),s[195]||(s[195]=n("hr",null,null,-1)),s[196]||(s[196]=n("h2",{id:"usereducer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#usereducer"},[n("span",null,[n("code",null,"useReducer")])])],-1)),n("p",null,[n("a",B,[e(o,{icon:"fa-brands fa-react"}),s[106]||(s[106]=n("code",null,"useReducer",-1))]),s[107]||(s[107]=a(" may be used as an alternative to ")),s[108]||(s[108]=n("code",null,"useState",-1)),s[109]||(s[109]=a(". It’s ideal for complex state logic where there’s a dependency on previous state values or a lot of state sub-values."))]),s[197]||(s[197]=l(`<p>Depending on your use case, you may find <code>useReducer</code> quite testable.</p><h3 id="basic-usage" tabindex="-1"><a class="header-anchor" href="#basic-usage"><span>Basic usage</span></a></h3><p>As opposed to calling <code>useState</code>, call <code>useReducer</code> with a <code>reducer</code> and <code>initialState</code>, as shown below. The <code>useReducer</code> call returns the state property and a <code>dispatch</code> function.</p><figure><img src="https://storage.googleapis.com/blog-images-backup/1*BSkGtn-NIHGDIwd67NZoYQ.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Increase/decrease bar size by managing state with useReducer.</p><p>Here’s the code responsible for the above screencast:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Bar.js"><span>Bar.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;plus&#39;</span><span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> state<span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token number">15</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;minus&#39;</span><span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>width <span class="token operator">-</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;what&#39;s going on?&quot;</span> <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Bar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> </span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div </span>
<span class="line">        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&#39;teal&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">&#39;30px&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">width</span><span class="token operator">:</span> state<span class="token punctuation">.</span>width <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div </span>
<span class="line">        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span> <span class="token string">&#39;3rem&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;plus&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>Increase bar size<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;minus&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>Decrease bar size<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Bar <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="initialize-statelazily" tabindex="-1"><a class="header-anchor" href="#initialize-statelazily"><span>Initialize statelazily</span></a></h3><p><code>useReducer</code> takes a third function parameter. You may initialize state from this function, and whatever’s returned from this function is returned as the state object. This function will be called with <code>initialState</code> — the second parameter.</p><figure><img src="https://storage.googleapis.com/blog-images-backup/1*a39ldAuvYbSZ8Ney_sXaYg.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Same increase/decrease bar size, with state initialized lazily.</p><p>Here’s the code for the example above:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Bar.js"><span>Bar.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">initializeState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ note how the value returned from the fn above overrides initialState below: </span></span>
<span class="line"><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;plus&#39;</span><span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> state<span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token number">15</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;minus&#39;</span><span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>width <span class="token operator">-</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;what&#39;s going on?&quot;</span> <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Bar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">,</span> initializeState<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> </span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div </span>
<span class="line">        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&#39;teal&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">&#39;30px&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">width</span><span class="token operator">:</span> state<span class="token punctuation">.</span>width <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div </span>
<span class="line">        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span> <span class="token string">&#39;3rem&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;plus&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>Increase bar size<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;minus&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>Decrease bar size<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>Bar<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="imitate-the-behavior-of-this-setstate" tabindex="-1"><a class="header-anchor" href="#imitate-the-behavior-of-this-setstate"><span>Imitate the behavior of <code>this.setState</code></span></a></h3><p><code>useReducer</code> uses a reducer that isn’t as strict as Redux’s. For example, the second parameter passed to the reducer, <code>action</code>, doesn’t need to have a <code>type</code> property.</p><p>This allows for interesting manipulations, such as renaming the second parameter and doing the following:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Bar.js"><span>Bar.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> newState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token operator">...</span>state<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">width</span><span class="token operator">:</span> newState<span class="token punctuation">.</span>width</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Bar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div </span>
<span class="line">        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&#39;teal&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">&#39;30px&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">width</span><span class="token operator">:</span> state<span class="token punctuation">.</span>width <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div </span>
<span class="line">        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token literal-property property">marginTop</span><span class="token operator">:</span> <span class="token string">&#39;3rem&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>Increase bar size<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>Decrease bar size<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>Bar<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><figure><img src="https://storage.googleapis.com/blog-images-backup/1*WbbJWr-_PGYXndcFEZVQUw.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>The results remain the same with a setState-like API imitated.</p>`,19)),n("p",null,[s[112]||(s[112]=a("Here’s an editable ")),n("a",F,[e(o,{icon:"fas fa-globe"}),s[110]||(s[110]=n("code",null,"useReducer",-1)),s[111]||(s[111]=a(" cheat sheet"))]),s[113]||(s[113]=a("."))]),s[198]||(s[198]=n("hr",null,null,-1)),s[199]||(s[199]=n("h2",{id:"usecallback",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#usecallback"},[n("span",null,[n("code",null,"useCallback")])])],-1)),n("p",null,[n("a",L,[e(o,{icon:"fa-brands fa-react"}),s[114]||(s[114]=n("code",null,"useCallback",-1))]),s[116]||(s[116]=a(" returns a ")),n("a",N,[e(o,{icon:"fa-brands fa-wikipedia-w"}),s[115]||(s[115]=a("memoized"))]),s[117]||(s[117]=a(" callback. Wrapping a component with")),s[118]||(s[118]=n("code",null,"React.Memo()",-1)),s[119]||(s[119]=a(" signals the intent to reuse code. This does not automatically extend to functions passed as parameters."))]),n("p",null,[s[121]||(s[121]=a("React ")),e(c,{to:"/blog.logrocket.com/react-usememo-vs-usecallback-a-pragmatic-guide.html#whatis"},{default:t(()=>s[120]||(s[120]=[n("strong",null,[a("saves a reference to the function when wrapped with"),n("code",null,"useCallback")],-1)])),_:1,__:[120]}),s[122]||(s[122]=a(". Pass this reference as a property to new components to reduce rendering time."))]),s[200]||(s[200]=l(`<h3 id="usecallback-example" tabindex="-1"><a class="header-anchor" href="#usecallback-example"><span><code>useCallback</code> example</span></a></h3><p>The following example will form the basis of the explanations and code snippets that follow.</p><figure><img src="https://storage.googleapis.com/blog-images-backup/1*Iy316AxOQNNXEcMHKeGw7w.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>And here’s the code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.js"><span>App.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setAge</span><span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> someValue <span class="token operator">=</span> <span class="token string">&quot;someValue&quot;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">doSomething</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> someValue</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Age age<span class="token operator">=</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span> handleClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Instructions doSomething<span class="token operator">=</span><span class="token punctuation">{</span>doSomething<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Age</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> age<span class="token punctuation">,</span> handleClick <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div </span>
<span class="line">        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">border</span><span class="token operator">:</span> <span class="token string">&#39;2px&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&quot;papayawhip&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">&quot;1rem&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">        Today <span class="token constant">I</span> am <span class="token punctuation">{</span>age<span class="token punctuation">}</span> Years <span class="token keyword">of</span> Age</span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>pre<span class="token operator">&gt;</span> <span class="token operator">-</span> click the button below 👇 <span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Get older<span class="token operator">!</span> <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> Instructions <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div </span>
<span class="line">      style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">&quot;1rem&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Follow the instructions above <span class="token keyword">as</span> closely <span class="token keyword">as</span> possible<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In the example above, the parent component, <code>&lt;Age /&gt;</code>, is updated (and re-rendered) whenever the <strong>Get older</strong> button is clicked.</p><p>Consequently, the <code>&lt;Instructions /&gt;</code> child component is also re-rendered because the <code>doSomething</code> prop is passed a new callback with a new reference.</p><p>Note that even though the <code>Instructions</code> child component uses <code>React.memo</code> to optimize performance, it is still re-rendered.</p><p>How can this be fixed to prevent <code>&lt;Instructions /&gt;</code> from re-rendering needlessly?</p><h3 id="usecallback-with-referenced-function" tabindex="-1"><a class="header-anchor" href="#usecallback-with-referenced-function"><span><code>useCallback</code> with referenced function</span></a></h3><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.js"><span>App.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setAge</span><span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> someValue <span class="token operator">=</span> <span class="token string">&quot;someValue&quot;</span></span>
<span class="line">  <span class="token keyword">const</span> doSomething <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> someValue</span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>someValue<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Age age<span class="token operator">=</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span> handleClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Instructions doSomething<span class="token operator">=</span><span class="token punctuation">{</span>doSomething<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Age</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> age<span class="token punctuation">,</span> handleClick <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div </span>
<span class="line">        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">border</span><span class="token operator">:</span> <span class="token string">&#39;2px&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&quot;papayawhip&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">&quot;1rem&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">        Today <span class="token constant">I</span> am <span class="token punctuation">{</span>age<span class="token punctuation">}</span> Years <span class="token keyword">of</span> Age</span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>pre<span class="token operator">&gt;</span> <span class="token operator">-</span> click the button below 👇 <span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Get older<span class="token operator">!</span> <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> Instructions <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div </span>
<span class="line">      style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">&quot;1rem&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Follow the instructions above <span class="token keyword">as</span> closely <span class="token keyword">as</span> possible<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="usecallback-with-inlinefunction" tabindex="-1"><a class="header-anchor" href="#usecallback-with-inlinefunction"><span><code>useCallback</code> with inlinefunction</span></a></h3><p><code>useCallback</code> also works with an inline function as well. Here’s the same solution with an inline <code>useCallback</code> call:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.js"><span>App.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setAge</span><span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> someValue <span class="token operator">=</span> <span class="token string">&quot;someValue&quot;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Age age<span class="token operator">=</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span> handleClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Instructions doSomething<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> someValue</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>someValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Age</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> age<span class="token punctuation">,</span> handleClick <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div </span>
<span class="line">        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">border</span><span class="token operator">:</span> <span class="token string">&#39;2px&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&quot;papayawhip&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">&quot;1rem&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">        Today <span class="token constant">I</span> am <span class="token punctuation">{</span>age<span class="token punctuation">}</span> Years <span class="token keyword">of</span> Age</span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>pre<span class="token operator">&gt;</span> <span class="token operator">-</span> click the button below 👇 <span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Get older<span class="token operator">!</span> <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> Instructions <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div </span>
<span class="line">      style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">&quot;1rem&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Follow the instructions above <span class="token keyword">as</span> closely <span class="token keyword">as</span> possible<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,14)),n("p",null,[s[126]||(s[126]=a("Here’s ")),n("a",G,[e(o,{icon:"fas fa-globe"}),s[123]||(s[123]=a("live, editable ")),s[124]||(s[124]=n("code",null,"useCallback",-1)),s[125]||(s[125]=a(" cheat sheet"))]),s[127]||(s[127]=a("."))]),s[201]||(s[201]=n("hr",null,null,-1)),s[202]||(s[202]=n("h2",{id:"usememo",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#usememo"},[n("span",null,[n("code",null,"useMemo")])])],-1)),n("p",null,[s[130]||(s[130]=a("The ")),n("a",O,[e(o,{icon:"fa-brands fa-react"}),s[128]||(s[128]=n("code",null,"useMemo",-1))]),s[131]||(s[131]=a(" function returns a memoized value.")),e(c,{to:"/blog.logrocket.com/react-usememo-vs-usecallback-a-pragmatic-guide.html"},{default:t(()=>s[129]||(s[129]=[n("strong",null,[n("code",null,"useMemo"),a(" is different from "),n("code",null,"useCallback")],-1)])),_:1,__:[129]}),s[132]||(s[132]=a("in that it internalizes return values instead of entire functions. Rather than passing a handle to the same function, React skips the function and returns the previous result, until the parameters change."))]),s[203]||(s[203]=l(`<p>This allows you to avoid repeatedly performing potentially costly operations until necessary. Use this method with care, as any changing variables defined in the function do not affect the behavior of<code>useMemo</code>. If you’re performing timestamp additions, for instance, this method does not care that the time changes, only that the function parameters differ.</p><h3 id="usememo-example" tabindex="-1"><a class="header-anchor" href="#usememo-example"><span><code>useMemo</code> example</span></a></h3><p>The following example will form the basis of the explanations and code snippets that follow.</p><figure><img src="https://storage.googleapis.com/blog-images-backup/1*jlGFv-2D2Yu6VoSGx5Fu3w.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Here’s the code responsible for the screenshot above:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setAge</span><span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> someValue <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;someValue&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">doSomething</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> someValue</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>Age age<span class="token operator">=</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span> handleClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>Instructions doSomething<span class="token operator">=</span><span class="token punctuation">{</span>doSomething<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Age</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> age<span class="token punctuation">,</span> handleClick <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div </span>
<span class="line">        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">border</span><span class="token operator">:</span> <span class="token string">&#39;2px&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&quot;papayawhip&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">&quot;1rem&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">       Today <span class="token constant">I</span> am <span class="token punctuation">{</span>age<span class="token punctuation">}</span> Years <span class="token keyword">of</span> Age</span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>pre<span class="token operator">&gt;</span> <span class="token operator">-</span> click the button below 👇 <span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Get older<span class="token operator">!</span> <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> Instructions <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div</span>
<span class="line">      style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">&quot;1rem&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Follow the instructions above <span class="token keyword">as</span> closely <span class="token keyword">as</span> possible<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The example above is similar to the one for <code>useCallback</code>. The only difference here is that <code>someValue</code> is an object, <em>not</em> a string. Owing to this, the <code>Instructions</code> component still re-renders despite the use of <code>React.memo</code>.</p><p>Why? Objects are compared by reference, and the reference to <code>someValue</code> changes whenever <code>&lt;App /&gt;</code> re-renders.</p><p>Any solutions?</p><h3 id="basic-usage-1" tabindex="-1"><a class="header-anchor" href="#basic-usage-1"><span>Basic usage</span></a></h3><p>The object <code>someValue</code> may be memoized using <code>useMemo</code>. This prevents the needless re-render.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setAge</span><span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> someValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;someValue&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">doSomething</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> someValue</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Age age<span class="token operator">=</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span> handleClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>Instructions doSomething<span class="token operator">=</span><span class="token punctuation">{</span>doSomething<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Age</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> age<span class="token punctuation">,</span> handleClick <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div </span>
<span class="line">        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">border</span><span class="token operator">:</span> <span class="token string">&#39;2px&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&quot;papayawhip&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">&quot;1rem&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">        Today <span class="token constant">I</span> am <span class="token punctuation">{</span>age<span class="token punctuation">}</span> Years <span class="token keyword">of</span> Age</span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>pre<span class="token operator">&gt;</span> <span class="token operator">-</span> click the button below 👇 <span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Get older<span class="token operator">!</span> <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> Instructions <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div</span>
<span class="line">      style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">&quot;1rem&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Follow the instructions above <span class="token keyword">as</span> closely <span class="token keyword">as</span> possible<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)),n("p",null,[s[136]||(s[136]=a("Here’s a ")),n("a",Y,[e(o,{icon:"fas fa-globe"}),s[133]||(s[133]=a("live, editable ")),s[134]||(s[134]=n("code",null,"useMemo",-1)),s[135]||(s[135]=a(" demo"))]),s[137]||(s[137]=a("."))]),s[204]||(s[204]=n("hr",null,null,-1)),s[205]||(s[205]=n("h2",{id:"useref",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#useref"},[n("span",null,[n("code",null,"useRef")])])],-1)),n("p",null,[n("a",P,[e(o,{icon:"fa-brands fa-react"}),s[138]||(s[138]=n("code",null,"useRef",-1))]),s[139]||(s[139]=a(" returns a “ref” object. Values are accessed from the")),s[140]||(s[140]=n("code",null,".current",-1)),s[141]||(s[141]=a(" property of the returned object. The ")),s[142]||(s[142]=n("code",null,".current",-1)),s[143]||(s[143]=a(" property could be initialized to an initial value — ")),s[144]||(s[144]=n("code",null,"useRef(initialValue)",-1)),s[145]||(s[145]=a(", for example. The object is persisted for the entire lifetime of the component."))]),n("p",null,[s[147]||(s[147]=a("Learn more in this ")),e(c,{to:"/blog.logrocket.com/complete-guide-react-refs.html"},{default:t(()=>s[146]||(s[146]=[n("strong",null,[a("comprehensive "),n("code",null,"useRefs"),a(" guide")],-1)])),_:1,__:[146]}),s[148]||(s[148]=a(" or check out our ")),s[149]||(s[149]=n("code",null,"useRefs",-1)),s[150]||(s[150]=a(" video tutorial:"))]),s[206]||(s[206]=l(`<h3 id="accessing-thedom" tabindex="-1"><a class="header-anchor" href="#accessing-thedom"><span>Accessing theDOM</span></a></h3><p>Consider the sample application below:</p><figure><img src="https://storage.googleapis.com/blog-images-backup/1*HpWEeuuijusQkO9mT5ohXw.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Accessing the DOM viauseRef.</p><p>Here’s the code responsible for the screencast above:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="AccessDOM.jsx"><span>AccessDOM.jsx</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">AccessDOM</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> textAreaEl <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleBtnClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    textAreaEl<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value <span class="token operator">=</span></span>
<span class="line">    <span class="token string">&quot;The is the story of your life. You are an human being, and you&#39;re on a website about React Hooks&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    textAreaEl<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>section </span>
<span class="line">      style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">textAlign</span><span class="token operator">:</span> <span class="token string">&quot;center&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleBtnClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Focus and Populate Text Field<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>label</span>
<span class="line">        htmlFor<span class="token operator">=</span><span class="token string">&quot;story&quot;</span></span>
<span class="line">        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">&quot;block&quot;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&quot;olive&quot;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token string">&quot;1em&quot;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">&quot;1em&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">        The input box below will be focused and populated <span class="token keyword">with</span> some <span class="token function">text</span></span>
<span class="line">        <span class="token punctuation">(</span>imperatively<span class="token punctuation">)</span> upon clicking the button above<span class="token punctuation">.</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>textarea ref<span class="token operator">=</span><span class="token punctuation">{</span>textAreaEl<span class="token punctuation">}</span> id<span class="token operator">=</span><span class="token string">&quot;story&quot;</span> rows<span class="token operator">=</span><span class="token string">&quot;5&quot;</span> cols<span class="token operator">=</span><span class="token string">&quot;33&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="instance-like-variables-generic-container" tabindex="-1"><a class="header-anchor" href="#instance-like-variables-generic-container"><span>Instance-like variables (generic container)</span></a></h3><p>Other than just holding DOM refs, the “ref” object can hold any value. Consider a similar application below, where the ref object holds a string value:</p><figure><img src="https://storage.googleapis.com/blog-images-backup/1*jLxqYWFdw0LDl8_axo5hMw.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Here’s the code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="HoldStringVal.jsx"><span>HoldStringVal.jsx</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">HoldStringVal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> textAreaEl <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> stringVal <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token string">&quot;This is a string saved via the ref object --- &quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">handleBtnClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      textAreaEl<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value <span class="token operator">=</span></span>
<span class="line">      stringVal<span class="token punctuation">.</span>current <span class="token operator">+</span> <span class="token string">&quot;The is the story of your life. You are an human being, and you&#39;re on a website about React Hooks&quot;</span><span class="token punctuation">;</span></span>
<span class="line">      textAreaEl<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token operator">&lt;</span>section style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">textAlign</span><span class="token operator">:</span> <span class="token string">&quot;center&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleBtnClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Focus and Populate Text Field<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>label</span>
<span class="line">          htmlFor<span class="token operator">=</span><span class="token string">&quot;story&quot;</span></span>
<span class="line">          style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">&quot;block&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&quot;olive&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token string">&quot;1em&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">&quot;1em&quot;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&gt;</span></span>
<span class="line">          Prepare to see text from the ref object here<span class="token punctuation">.</span> Click button above<span class="token punctuation">.</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>textarea ref<span class="token operator">=</span><span class="token punctuation">{</span>textAreaEl<span class="token punctuation">}</span> id<span class="token operator">=</span><span class="token string">&quot;story&quot;</span> rows<span class="token operator">=</span><span class="token string">&quot;5&quot;</span> cols<span class="token operator">=</span><span class="token string">&quot;33&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>You could do the same as storing the return value from a <code>setInterval</code> for cleanup.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="TimerWithRefID.jsx"><span>TimerWithRefID.jsx</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">TimerWithRefID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> setIntervalRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> intervalID <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// something to be done every 100ms</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// this is where the interval ID is saved in the ref object </span></span>
<span class="line">    setIntervalRef<span class="token punctuation">.</span>current <span class="token operator">=</span> intervalID<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">clearInterval</span><span class="token punctuation">(</span>setIntervalRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="other-examples" tabindex="-1"><a class="header-anchor" href="#other-examples"><span>Other examples</span></a></h3><p>Working on a near-real-world example can help bring your knowledge of Hooks to life. Until data fetching with React Suspense is released, fetching data via Hooks proves to be a good exercise for more Hooks practice.</p><p>Below’s an example of fetching data with a loading indicator:</p><figure><img src="https://storage.googleapis.com/blog-images-backup/1*sr9I9TkSj8GCgSI411rGPA.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>The code appears below:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">stringifyData</span> <span class="token operator">=</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> initialData <span class="token operator">=</span> <span class="token function">stringifyData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> loadingData <span class="token operator">=</span> <span class="token function">stringifyData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;loading...&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialData<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>gender<span class="token punctuation">,</span> setGender<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;female&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>loading<span class="token punctuation">,</span> setLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> uri <span class="token operator">=</span> <span class="token string">&#39;https://randomuser.me/api/?gender=&#39;</span> <span class="token operator">+</span> gender</span>
<span class="line">        <span class="token function">fetch</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> results <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> dob <span class="token punctuation">}</span> <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">            <span class="token keyword">const</span> dataVal <span class="token operator">=</span> <span class="token function">stringifyData</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">              <span class="token operator">...</span>name<span class="token punctuation">,</span></span>
<span class="line">              gender<span class="token punctuation">,</span></span>
<span class="line">              <span class="token literal-property property">age</span><span class="token operator">:</span> dob<span class="token punctuation">.</span>age</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">setData</span><span class="token punctuation">(</span>dataVal<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>gender<span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>button</span>
<span class="line">        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">outline</span><span class="token operator">:</span> gender <span class="token operator">===</span> <span class="token string">&#39;male&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;1px solid&#39;</span> <span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">        Fetch Male User</span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>button</span>
<span class="line">        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">&#39;female&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">outline</span><span class="token operator">:</span> gender <span class="token operator">===</span> <span class="token string">&#39;female&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;1px solid&#39;</span> <span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">        Fetch Female User</span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line">      <span class="token operator">&lt;</span>section<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span>loading <span class="token operator">?</span> <span class="token operator">&lt;</span>pre<span class="token operator">&gt;</span><span class="token punctuation">{</span>loadingData<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token operator">&lt;</span>pre<span class="token operator">&gt;</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19)),n("p",null,[s[154]||(s[154]=a("Here’ a ")),n("a",U,[e(o,{icon:"fas fa-globe"}),s[151]||(s[151]=a("live, editable ")),s[152]||(s[152]=n("code",null,"useRef",-1)),s[153]||(s[153]=a(" cheat sheet"))]),s[155]||(s[155]=a("."))]),s[207]||(s[207]=l(`<hr><h2 id="usetransition" tabindex="-1"><a class="header-anchor" href="#usetransition"><span><code>useTransition</code></span></a></h2><p>The key to understanding the <code>useTransition</code> Hook is that it prioritizes state change. By default, any state change in React is given a high priority. However, when you transition a state change (maybe because of heavy computation), you’re telling React to give that state change a lower priority, meaning all other state change would run and render on the screen before the transitioned state change would run.</p><h3 id="marking-state-as-transition" tabindex="-1"><a class="header-anchor" href="#marking-state-as-transition"><span>Marking state as transition</span></a></h3><p>Marking a state as transition is as simple as passing a synchronous function with the state you want to transition into the <code>startTransition</code> function returned by the <code>useTransition</code> Hook:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.js"><span>App.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useTransition <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>timeUpdate<span class="token punctuation">,</span> setTimeUpdate<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>isPending<span class="token punctuation">,</span> startTransition<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// handle state change in here</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The <code>isPending</code> flag returns <code>true</code> or <code>false</code> indicating whether or not there is a pending transition, and we use the <code>startTransition</code> function to mark a state change as a transition.</p><h3 id="difference-between-usetransition-and-regular-state-update" tabindex="-1"><a class="header-anchor" href="#difference-between-usetransition-and-regular-state-update"><span>Difference between <code>useTransition</code> and regular state update</span></a></h3><p>State updates placed inside the <code>useTransition</code> Hook are given a low priority, while regular state updates are given a higher priority.</p><p>So think of <code>useTransition</code> as a React Hook that lets you update the state without blocking the UI.</p><p>Let’s take a look at an example.</p><h4 id="changing-state-without-transition" tabindex="-1"><a class="header-anchor" href="#changing-state-without-transition"><span>Changing state without transition</span></a></h4>`,12)),n("p",null,[s[157]||(s[157]=a("I have created a ")),n("a",Q,[e(o,{icon:"iconfont icon-codesandbox"}),s[156]||(s[156]=a("CodeSandbox"))]),s[158]||(s[158]=a(" that makes two state updates:"))]),s[208]||(s[208]=l('<ol><li>Updating the <code>textInput</code> state upon user input</li><li>Looping and updating the <code>listItems</code> state with the currently entered user input</li></ol><p><code>React</code> has a mechanism called “batching” that allows it to combine multiple state changes into a single update to the component’s state.</p><p>When you call <code>setState</code> in a React component, React does not immediately update the component’s state. Instead, it schedules a state update to be processed later. If you call <code>setState</code> multiple times within the same event loop, React will batch these updates together into a single update before applying them to the component’s state and triggering a re-render.</p><p>That’s why in this example our <code>setTextInput</code> state doesn’t trigger a re-render until after we’re done looping and updating the <code>setListItems</code> state then a render is triggered. This makes our application act a bit sluggish.</p><p>Now, let’s look at the same example but this time, we’ll transition the state change that has heavy computation.</p><h4 id="changing-state-with-transition" tabindex="-1"><a class="header-anchor" href="#changing-state-with-transition"><span>Changing state with transition</span></a></h4>',6)),n("p",null,[s[160]||(s[160]=a("As we can see in this ")),n("a",W,[e(o,{icon:"iconfont icon-codesandbox"}),s[159]||(s[159]=a("CodeSandbox"))]),s[161]||(s[161]=a(", there’s a significant improvement in our application. In this example we’re telling ")),s[162]||(s[162]=n("code",null,"react",-1)),s[163]||(s[163]=a(" to give ")),s[164]||(s[164]=n("code",null,"setListItems",-1)),s[165]||(s[165]=a(" state update a lower priority seeing as it requires a heavy computation. This means that ")),s[166]||(s[166]=n("code",null,"setTextInput",-1)),s[167]||(s[167]=a(" state would trigger a re-render upon state change and not have to be batched with the ")),s[168]||(s[168]=n("code",null,"setListItem",-1)),s[169]||(s[169]=a(" state change."))]),s[209]||(s[209]=l(`<div class="hint-container note"><p class="hint-container-title">N.B.</p><p>If a state update causes a component to suspend, that state update should be wrapped in a transition</p></div><hr><h2 id="usedeferredvalue" tabindex="-1"><a class="header-anchor" href="#usedeferredvalue"><span><code>useDeferredValue</code></span></a></h2><p>The <code>useDeferredValue</code> Hook is a new addition to React 18, and it offers developers a powerful new tool for optimizing their applications. <code>useDeferredValue</code> allows you to defer the rendering of a value until a future point in time, which can be incredibly useful in situations where you want to avoid unnecessary rendering.</p><p>Here’s the sample syntax code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.js"><span>App.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useDeferredValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>valueToDefer<span class="token punctuation">,</span> setValueToDefer<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> deferredValue <span class="token operator">=</span> <span class="token function">useDeferredValue</span><span class="token punctuation">(</span>valueToDefer<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>deferredValue<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>All we have to do is pass the value we want to defer into the <code>useDeferredValue</code> Hook.</p><p>One of the most common use cases for the <code>useDeferredValue</code> Hook is when you have a large number of updates occurring at once. For example, imagine you have a search bar in your application that updates in real time as the user types. If the user is a fast typist, this could result in dozens, or even hundreds, of updates occurring in rapid succession. Without any optimization, this could cause your application to slow down.</p>`,8)),n("p",null,[s[171]||(s[171]=a("By using the ")),s[172]||(s[172]=n("code",null,"useDeferredValue",-1)),s[173]||(s[173]=a(" Hook, you can avoid this problem by deferring the rendering of the search results until the user stops typing. This is similar to how ")),e(c,{to:"/freecodecamp.org/debouncing-explained.html"},{default:t(()=>s[170]||(s[170]=[n("strong",null,"debouncing",-1)])),_:1,__:[170]}),s[174]||(s[174]=a(" works; it can dramatically improve performance."))]),s[210]||(s[210]=l(`<p>Let’s demonstrates this use case with an example:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Search.jsx"><span>Search.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Search</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>searchQuery<span class="token punctuation">,</span> setSearchQuery<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>searchResults<span class="token punctuation">,</span> setSearchResults<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> deferredSearchQuery <span class="token operator">=</span> <span class="token function">useDeferredValue</span><span class="token punctuation">(</span>searchQuery<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Fetch search results using deferredSearchQuery</span></span>
<span class="line">    <span class="token comment">// Update setSearchResults with the new results</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>deferredSearchQuery<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleSearchInputChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setSearchQuery</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>searchQuery<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleSearchInputChange<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token punctuation">{</span>searchResults<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>result<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>result<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here, we’re using the <code>useDeferredValue</code> Hook to defer the rendering of the search results until after the user stops typing in the search bar. This helps to reduce unnecessary re-renders and improve performance.</p><hr><h2 id="useid" tabindex="-1"><a class="header-anchor" href="#useid"><span><code>useId</code></span></a></h2><p><code>useId</code> is a React Hook that is used to generate unique IDs. This can be valuable in a number of scenarios, such as generating unique IDs for accessibility attributes.</p><p>Here’s the sample syntax code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.jsx"><span>App.jsx</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useId <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">useId</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> id<span class="token operator">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now, let’s look at a use case. Here’s an example of a scenario using the <code>useId</code> Hook with a <code>TextField</code> component:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="TextField.jsx"><span>TextField.jsx</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">TextField</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">&quot;name&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span> </span>
<span class="line">      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;name&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>We’ll use the <code>TextField</code> component a couple times in our <code>App</code> component below:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.js"><span>App.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;inputs&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>TextField <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>TextField <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>To link a <code>label</code> element to an <code>input</code> field, we use the <code>id</code> and <code>htmlFor</code> attribute. This will cause the browser to associate a particular <code>label</code> element with a particular <code>input</code> field. If we were working with plain <code>HTML</code>, this wouldn’t be necessary — instead, we could simply duplicate the elements and change the attributes.</p><p>However, in our example above we created a reusable <code>TextField</code> component and we’re using this component twice in our <code>App</code> component. Since the attributes on the element in the <code>TextField</code><br> are static, every time we render the component, the attributes remain the same.</p><p>We can fix this by using the <code>useId</code> Hook. Let’s modify the <code>TextField</code> component, like so:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="TextField.jsx"><span>TextField.jsx</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">TextField</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">useId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span> </span>
<span class="line">      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> id<span class="token operator">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now, every time we call the <code>TextInput</code> component, a unique ID will be associated with the elements that are rendered.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Hooks give a lot of power to functional components. I hope this cheat sheet proves useful in your day-to-day use of React Hooks.</p><figure><img src="https://storage.googleapis.com/blog-images-backup/1*ag8EVnHaBiQECo2yXC49Mw.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong><em>Thanks to Hooks and a couple other new React features. Illustration by me</em></strong></p><p>Cheers!</p>`,23)),f(" TODO: add ARTICLE CARD "),e(r,u(k({title:"React Hooks cheat sheet: Best practices with examples",desc:"Editor’s note: This React Hooks tutorial was last updated on 6 March 2023 to include more React Hooks best practices […]",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const Z=b(x,[["render",J]]),$=JSON.parse('{"path":"/blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems.html","title":"React Hooks cheat sheet: Best practices with examples","lang":"en-US","frontmatter":{"lang":"en-US","title":"React Hooks cheat sheet: Best practices with examples","description":"Article(s) > React Hooks cheat sheet: Best practices with examples","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React Hooks cheat sheet: Best practices with examples\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems/banner.png\\",\\"https://storage.googleapis.com/blog-images-backup/1*xKBiQT_91AU-PlNLGjv0Yg.gif\\",\\"https://storage.googleapis.com/blog-images-backup/1*1MFDgE1LQuAc1_wyBgyVNQ.gif\\",\\"https://storage.googleapis.com/blog-images-backup/1*wYJuoTiiarplOkwoG36I2A.gif\\",\\"https://storage.googleapis.com/blog-images-backup/1*uAEGQN-IESENc82FnkJUfA.gif\\",\\"https://storage.googleapis.com/blog-images-backup/1*RdkmsjpFV1_KRxtk1pRFlw.gif\\",\\"https://storage.googleapis.com/blog-images-backup/1*mSqiFgHeY6k84us2RBnLkg.gif\\",\\"https://storage.googleapis.com/blog-images-backup/1*VVxa13t8u8oobG_1GIM1Qw.gif\\",\\"https://storage.googleapis.com/blog-images-backup/1*sJEVsJmB2vHc8vqqP4nAJA.png\\",\\"https://storage.googleapis.com/blog-images-backup/1*a7MsYcXko93rq_9KtjiXpg.gif\\",\\"https://storage.googleapis.com/blog-images-backup/1*BSkGtn-NIHGDIwd67NZoYQ.gif\\",\\"https://storage.googleapis.com/blog-images-backup/1*a39ldAuvYbSZ8Ney_sXaYg.gif\\",\\"https://storage.googleapis.com/blog-images-backup/1*WbbJWr-_PGYXndcFEZVQUw.gif\\",\\"https://storage.googleapis.com/blog-images-backup/1*Iy316AxOQNNXEcMHKeGw7w.gif\\",\\"https://storage.googleapis.com/blog-images-backup/1*jlGFv-2D2Yu6VoSGx5Fu3w.png\\",\\"https://storage.googleapis.com/blog-images-backup/1*HpWEeuuijusQkO9mT5ohXw.gif\\",\\"https://storage.googleapis.com/blog-images-backup/1*jLxqYWFdw0LDl8_axo5hMw.gif\\",\\"https://storage.googleapis.com/blog-images-backup/1*sr9I9TkSj8GCgSI411rGPA.gif\\",\\"https://storage.googleapis.com/blog-images-backup/1*ag8EVnHaBiQECo2yXC49Mw.png\\"],\\"datePublished\\":\\"2023-02-20T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ohans Emmanuel\\",\\"url\\":\\"https://blog.logrocket.com/author/ohansemmanuel/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"React Hooks cheat sheet: Best practices with examples"}],["meta",{"property":"og:description","content":"Article(s) > React Hooks cheat sheet: Best practices with examples"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems/banner.png"}],["meta",{"name":"twitter:image:alt","content":"React Hooks cheat sheet: Best practices with examples"}],["meta",{"property":"article:author","content":"Ohans Emmanuel"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-02-20T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > React Hooks cheat sheet: Best practices with examples"},{"property":"og:description","content":"React Hooks cheat sheet: Best practices with examples"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2023-02-20T00:00:00.000Z","isOriginal":false,"author":[{"name":"Ohans Emmanuel","url":"https://blog.logrocket.com/author/ohansemmanuel/"}],"cover":"/assets/image/blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems/banner.png"},"git":{},"readingTime":{"minutes":17.65,"words":5294},"filePathRelative":"blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems.md","copyright":{"author":"Ohans Emmanuel"}}');export{Z as comp,$ as data};
