import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as w,d as n,f as o,b as a,a as b,t as y,n as m,g as p,w as r,e as i,r as g,o as k}from"./app-BVguHYKu.js";const h={},_={id:"frontmatter-title-관련",tabindex:"-1"},z={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},F={href:"http://figma.com",target:"_blank",rel:"noopener noreferrer"},S={href:"https://figma.com/community/plugin/959795830541939498/Figma-to-React-(React-Native)-Code",target:"_blank",rel:"noopener noreferrer"},C={href:"https://figma.com/community/plugin/857346721138427857/Anima",target:"_blank",rel:"noopener noreferrer"},I={href:"https://figma.com/community/plugin/735098390272716381/Iconify",target:"_blank",rel:"noopener noreferrer"},v={href:"https://figma.com/community/plugin/738454987945972471/Unsplash",target:"_blank",rel:"noopener noreferrer"},A={href:"https://figma.com/community/plugin/731627216655469013/Content-Reel",target:"_blank",rel:"noopener noreferrer"},V={href:"https://figma.com/community/plugin/736000994034548392/Lorem-ipsum",target:"_blank",rel:"noopener noreferrer"};function R(d,t){const l=g("VPCard"),s=g("router-link"),f=g("SiteInfo"),e=g("VPIcon");return k(),w("div",null,[n("h1",_,[n("a",z,[n("span",null,y(d.$frontmatter.title)+" 관련",1)])]),o(l,m(p({title:"Figma > Article(s)",desc:"Article(s)",link:"/tool/figma/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",x,[n("ul",null,[n("li",null,[o(s,{to:"#피그마-기본-개념"},{default:r(()=>t[0]||(t[0]=[i("피그마 기본 개념")])),_:1,__:[0]}),n("ul",null,[n("li",null,[o(s,{to:"#_1-인터페이스-구성"},{default:r(()=>t[1]||(t[1]=[i("1) 인터페이스 구성")])),_:1,__:[1]})]),n("li",null,[o(s,{to:"#_2-피그마-파일-구조"},{default:r(()=>t[2]||(t[2]=[i("2) 피그마 파일 구조")])),_:1,__:[2]})]),n("li",null,[o(s,{to:"#_3-컴포넌트와-인스턴스"},{default:r(()=>t[3]||(t[3]=[i("3) 컴포넌트와 인스턴스")])),_:1,__:[3]})])])]),n("li",null,[o(s,{to:"#개발자가-자주-사용하는-피그마-기능"},{default:r(()=>t[4]||(t[4]=[i("개발자가 자주 사용하는 피그마 기능")])),_:1,__:[4]}),n("ul",null,[n("li",null,[o(s,{to:"#_1-프론트엔드-개발을-위한-에셋-추출"},{default:r(()=>t[5]||(t[5]=[i("1) 프론트엔드 개발을 위한 에셋 추출")])),_:1,__:[5]})]),n("li",null,[o(s,{to:"#_2-대량-내보내기와-슬라이스-기능"},{default:r(()=>t[6]||(t[6]=[i("2) 대량 내보내기와 슬라이스 기능")])),_:1,__:[6]})]),n("li",null,[o(s,{to:"#_3-디자인-요소-선택과-유용한-단축키"},{default:r(()=>t[7]||(t[7]=[i("3) 디자인 요소 선택과 유용한 단축키")])),_:1,__:[7]})])])]),n("li",null,[o(s,{to:"#개발자가-알아두면-좋은-피그마-활용-팁"},{default:r(()=>t[8]||(t[8]=[i("개발자가 알아두면 좋은 피그마 활용 팁")])),_:1,__:[8]}),n("ul",null,[n("li",null,[o(s,{to:"#_1-반응형-디자인-구현을-위한-오토-레이아웃-활용"},{default:r(()=>t[9]||(t[9]=[i("1) 반응형 디자인 구현을 위한 오토 레이아웃 활용")])),_:1,__:[9]})]),n("li",null,[o(s,{to:"#_2-개발자-모드-dev-mode"},{default:r(()=>t[10]||(t[10]=[i("2) 개발자 모드(Dev Mode)")])),_:1,__:[10]})]),n("li",null,[o(s,{to:"#_3-플러그인과-확장-프로그램-활용"},{default:r(()=>t[11]||(t[11]=[i("3) 플러그인과 확장 프로그램 활용")])),_:1,__:[11]})])])]),n("li",null,[o(s,{to:"#마치며"},{default:r(()=>t[12]||(t[12]=[i("마치며")])),_:1,__:[12]})])])]),t[74]||(t[74]=n("hr",null,null,-1)),o(f,{name:"개발자를 위한 피그마(Figma) 사용 방법과 활용 팁",desc:"개발자는 소프트웨어 개발 프로젝트에서 디자이너와 협업할 일이 많습니다. 피그마(Figma)는 이러한 협업을 원활하게 해주는 툴로서 현재 다양한 UI/UX 디자인에 사용되고 있는데요. 개발자가 피그마를 활용하면, 디자인을 코드로 변환하는 작업을 더 효율적으로 할 수 있어 개발 생산성을 높일 수 있습니다. 또한 피그마는 1인 개발이나 소규모 프로젝트에서 빠르게 아이디어를 구체화할 때 유용하게 활용할 수 있는 도구이기도 합니다. 이번 글에서는 피그마의 기본 개념을 살펴보고, 개발자 관점에서 자주 사용하는 기능과 활용 팁을 정리해 보았습니다.",url:"https://yozm.wishket.com/magazine/detail/2802/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/2802/1__3_.gif"}),t[75]||(t[75]=a('<p>개발자는 소프트웨어 개발 프로젝트에서 디자이너와 협업할 일이 많습니다. 피그마(Figma)는 이러한 협업을 원활하게 해주는 툴로서 현재 다양한 UI/UX 디자인에 사용되고 있는데요. 개발자가 피그마를 활용하면, 디자인을 코드로 변환하는 작업을 더 효율적으로 할 수 있어 개발 생산성을 높일 수 있습니다.</p><p>또한 피그마는 1인 개발이나 소규모 프로젝트에서 빠르게 아이디어를 구체화할 때 유용하게 활용할 수 있는 도구이기도 합니다. 이번 글에서는 <strong>피그마의 기본 개념</strong>을 살펴보고, <strong>개발자 관점</strong>에서 자주 사용하는 <strong>기능과 활용 팁</strong>을 정리해 보았습니다.</p><hr><h2 id="피그마-기본-개념" tabindex="-1"><a class="header-anchor" href="#피그마-기본-개념"><span>피그마 기본 개념</span></a></h2><h3 id="_1-인터페이스-구성" tabindex="-1"><a class="header-anchor" href="#_1-인터페이스-구성"><span>1) 인터페이스 구성</span></a></h3>',5)),n("p",null,[t[14]||(t[14]=i("피그마는 ")),t[15]||(t[15]=n("strong",null,"클라우드 기반 서비스",-1)),t[16]||(t[16]=i("이기 때문에 운영체제 등의 제약 없이 어디서나 실시간으로 작업할 수 있습니다. 따라서 보통은 웹 ")),n("a",F,[o(e,{icon:"fa-brands fa-figma"}),t[13]||(t[13]=i("브라우저"))]),t[17]||(t[17]=i("에 접속해서 사용하는데요. 개인적으로는 반응 속도 등을 이유로 각 운영체제에 맞는 데스크탑 앱을 설치해서 사용하는 것을 선호합니다. 그래서 이 글에서는 ")),t[18]||(t[18]=n("strong",null,"피그마 데스크탑 앱",-1)),t[19]||(t[19]=i("(macOS용)을 위주로 전반적인 구성을 살펴보겠습니다."))]),t[76]||(t[76]=a('<figure><img src="https://yozm.wishket.com/media/news/2802/1__1_.png" alt="피그마 인터페이스 구성" tabindex="0" loading="lazy"><figcaption>피그마 인터페이스 구성</figcaption></figure><p>피그마 인터페이스는 캔버스, 내비게이션 패널, 속성 패널, 툴바로 구성되어 있습니다. <strong>캔버스</strong>는 디자인 작업이 이루어지는 메인 영역으로 실제 디자인 요소를 배치하고 편집하는 공간입니다. <strong>내비게이션 패널</strong>은 화면 왼쪽에 위치하며, 작업 중인 모든 요소를 계층 구조로 보여줍니다. <strong>속성 패널은</strong>화면 오른쪽에 위치하며, 선택된 디자인 요소의 색상, 크기, 여백 등의 속성을 확인하고 조정할 수 있습니다. 상단에 있는 <strong>툴바</strong>는 파일 저장, 화면 조정 등 기본적인 기능이 배치되어 있습니다.</p><h3 id="_2-피그마-파일-구조" tabindex="-1"><a class="header-anchor" href="#_2-피그마-파일-구조"><span>2) 피그마 파일 구조</span></a></h3>',3)),n("p",null,[t[20]||(t[20]=i("피그마에서 작업한 내용은 클라우드에 자동으로 저장되지만, 별도의 파일 형태로 저장할 수도 있습니다. 피그마 파일의 확장자는 ")),o(e,{icon:"fa-brands fa-figma"}),t[21]||(t[21]=n("code",null,".fig",-1)),t[22]||(t[22]=i("이며, 내보내기(export)와 가져오기(import)로 다른 사용자와 파일을 공유하거나, 로컬에 백업할 수도 있습니다."))]),t[77]||(t[77]=a('<p>피그마 파일의 구조는 <strong>프레임, 섹션, 페이지</strong>로 이루어져 있습니다. 즉, 하나의 페이지 내에 여러 개의 섹션이 있고, 섹션 안에는 여러 개의 프레임이 있는 형태입니다.</p><figure><img src="https://yozm.wishket.com/media/news/2802/1__2_.png" alt="피그마 주요 구성 요소" tabindex="0" loading="lazy"><figcaption>피그마 주요 구성 요소</figcaption></figure><p>피그마에서 **프레임(Frame)**은 디자인의 기본 단위입니다. 프레임은 단축키 ‘F’로 만들 수 있으며, 우측 속성 패널에서 다양한 디바이스의 규격에 맞는 프리셋(preset)을 선택할 수 있습니다. 프리셋에는 각종 모바일, 태블릿, 데스크톱 등의 기종에 따른 사이즈가 있습니다. 프레임 안에는 여러 층의 **레이어(Layer)**가 있으며, 프레임 내에 디자인 요소를 계층 구조로 정리하여 디자인 작업을 더욱 체계적으로 할 수 있도록 합니다.</p><figure><img src="https://yozm.wishket.com/media/news/2802/1__3_.png" alt="피그마 프레임 생성 예시" tabindex="0" loading="lazy"><figcaption>피그마 프레임 생성 예시</figcaption></figure><p>**섹션(Section)**은 여러 개의 프레임을 하나의 그룹으로 묶는 역할을 합니다. 섹션을 사용하면 관련된 프레임들을 시각적으로 구분하고 조직화할 수 있어, 더욱 효율적으로 작업할 수 있습니다. 섹션을 생성하는 단축키는 <kbd>Shift</kbd>+<kbd>S</kbd>이며, 우측에 있는 속성 패널에서 레이아웃과 위치 등의 세부 설정을 할 수 있습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2802/1__4_.png" alt="피그마 섹션 생성 예시 " tabindex="0" loading="lazy"><figcaption>피그마 섹션 생성 예시 </figcaption></figure><p>피그마에서 **페이지(Page)**는 디자인 프로젝트를 구분하고 관리하는 단위로 활용됩니다. 하나의 피그마 파일 안에는 여러 페이지를 추가할 수 있으며, 이를 통해 반응형 웹, 모바일(iOS, Android) 등 여러 디바이스나 버전별 디자인을 별도로 구성할 수 있습니다. 페이지는 좌측 내비게이션 패널 상단에 있는 페이지 추가 버튼으로 생성할 수 있으며, 페이지 목록을 통해 원하는 페이지를 선택할 수 있습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2802/1__5_.png" alt="피그마 페이지 예시" tabindex="0" loading="lazy"><figcaption>피그마 페이지 예시</figcaption></figure><h3 id="_3-컴포넌트와-인스턴스" tabindex="-1"><a class="header-anchor" href="#_3-컴포넌트와-인스턴스"><span>3) 컴포넌트와 인스턴스</span></a></h3><p>피그마에서 컴포넌트(Component)란 <strong>재사용 가능한 디자인 요소</strong>를 말합니다. 컴포넌트를 이용하면 동일한 디자인 요소를 여러 곳에서 편리하게 사용할 수 있으며, 변형(Variants)을 통해 버튼의 활성화/비활성화와 같은 다양한 상태를 하나의 컴포넌트로 관리할 수도 있습니다. 컴포넌트를 지정하려면 디자인 요소를 선택하고 우클릭하여 Create Component 메뉴를 선택하거나, 속성 패널 상단에 있는 다이아몬드 모양의 컴포넌트 아이콘을 클릭하면 됩니다.</p><figure><img src="https://yozm.wishket.com/media/news/2802/1__6_.png" alt="컴포넌트 지정 방법" tabindex="0" loading="lazy"><figcaption>컴포넌트 지정 방법</figcaption></figure><p>컴포넌트를 지정하면 해당 디자인 요소는 <strong>마스터 컴포넌트</strong>로 등록됩니다. 그러면 내비게이션 패널에서는 보라색 이름으로 표시되며, 캔버스에서도 보라색 테두리가 생기죠. 또한 내비게이션 패널에 있는 Assets 탭의 Local assets에도 등록됩니다. 여기서 Insert Instance 버튼을 클릭하면, 컴포넌트가 복제된 **인스턴스(Instance)**가 캔버스에 삽입됩니다. 또는 캔버스에서 마스터 컴포넌트를 선택한 상태에서 <kbd>Option</kbd> 키를 누르고 드래그하면, 복제된 인스턴스를 만들 수 있습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2802/1__7_.png" alt="컴포넌트 지정 후 인스턴스 삽입" tabindex="0" loading="lazy"><figcaption>컴포넌트 지정 후 인스턴스 삽입</figcaption></figure><p>마스터 컴포넌트와 달리 인스턴스는 레이어 패널에서 가운데가 비어 있는 다이아몬드 아이콘으로 표시됩니다. 그리고 만약 마스터 컴포넌트를 수정하면 삽입된 모든 인스턴스가 동일하게 수정됩니다. 즉, 마스터 컴포넌트와 인스턴스를 통해 다양한 디자인 요소를 <strong>일관성 있게 관리</strong>할 수 있는 것이죠.</p><hr><h2 id="개발자가-자주-사용하는-피그마-기능" tabindex="-1"><a class="header-anchor" href="#개발자가-자주-사용하는-피그마-기능"><span>개발자가 자주 사용하는 피그마 기능</span></a></h2><h3 id="_1-프론트엔드-개발을-위한-에셋-추출" tabindex="-1"><a class="header-anchor" href="#_1-프론트엔드-개발을-위한-에셋-추출"><span>1) 프론트엔드 개발을 위한 에셋 추출</span></a></h3><p>프론트엔드 개발을 위해서는 UI 디자인에 쓰인 이미지, 아이콘, 색상 같은 디자인 에셋(assets)이 필요합니다. 예전에는 보통 디자이너가 에셋을 정리해서 파일로 전달해 주었지만, 최근에는 피그마에서 <strong>직접 필요한 에셋을 추출</strong>해야 하는 경우가 많습니다.</p><p>피그마에서는 단일 이미지나 아이콘 뿐만 아니라, 레이어, 프레임, 섹션 등 다양한 디자인 요소를 추출할 수 있습니다. 아울러 PNG, SVG, JPG와 같은 포맷을 지원하며, 고해상도의 스크린샷이나 특정 디자인 부분을 선택적으로 추출할 수도 있습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2802/1__1_.gif" alt="피그마 에셋 추출 방법&lt;br/&gt;&lt;출처: Figma&gt;" tabindex="0" loading="lazy"><figcaption>피그마 에셋 추출 방법<br>&lt;출처: Figma&gt;</figcaption></figure><p>에셋을 추출하기 위한 설정은 우측 사이드바의 **내보내기(Export)**항목에서 할 수 있습니다. 먼저 추출하고자 하는 디자인 요소를 선택한 후 내보내기 설정에서 포맷과 해상도를 지정하면, 미리보기를 통해 추출된 에셋이 어떻게 보이는지 확인할 수 있습니다. 또한 선택된 객체의 채우기(fill) 항목을 제거하는 옵션 등을 통해 추출 방식을 조정할 수도 있죠.</p><p>다만 추출할 수 있는 디자인 에셋의 범위는 접근 권한에 따라 다르므로, 필요한 경우 디자이너에게 에셋 추출을 위한 권한을 요청해야 합니다.</p><figure><img src="https://yozm.wishket.com/media/news/2802/1__8_.png" alt="에셋 파일명 지정" tabindex="0" loading="lazy"><figcaption>에셋 파일명 지정</figcaption></figure><p>추출된 에셋 파일은 피그마 브라우저 또는 데스크탑 앱에서 자동으로 다운로드되며, 사용자가 지정한 위치에 저장됩니다. 이때 한 가지 팁은 에셋의 파일명을 지정할 때 <strong>슬래시를 이용</strong>하면 폴더 구조를 자동으로 생성해 주는데, 개인적으로 꽤 유용하게 사용하고 있는 기능입니다.</p>',24)),n("p",null,[t[23]||(t[23]=i("예를 들어, 위 그림처럼 ")),t[24]||(t[24]=n("code",null,"button/light/continue",-1)),t[25]||(t[25]=i("으로 에셋 이름을 지정하면 각 단계가 폴더로 구분되어 ")),o(e,{icon:"fas fa-folder-open"}),t[26]||(t[26]=n("code",null,"button/light",-1)),t[27]||(t[27]=i(" 폴더 아래 continue라는 이름으로 에셋이 저장됩니다. 또한 Export 메뉴에서 각 에셋에 대한 **Suffix(접미사)**를 지정해서 파일을 관리할 수도 있습니다."))]),t[78]||(t[78]=n("h3",{id:"_2-대량-내보내기와-슬라이스-기능",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-대량-내보내기와-슬라이스-기능"},[n("span",null,"2) 대량 내보내기와 슬라이스 기능")])],-1)),n("p",null,[t[28]||(t[28]=i("대량 내보내기(Bulk Export) 기능을 사용하면 여러 레이어에 적용된 내보내기 설정을 한 번에 처리할 수 있습니다. 단축키는 ")),o(e,{icon:"iconfont icon-macos"}),t[29]||(t[29]=n("kbd",null,"Shift",-1)),t[30]||(t[30]=i("+")),t[31]||(t[31]=n("kbd",null,"Cmd",-1)),t[32]||(t[32]=i("+")),t[33]||(t[33]=n("kbd",null,"E",-1)),t[34]||(t[34]=i(" (Windows는 ")),o(e,{icon:"fa-brands fa-windows"}),t[35]||(t[35]=n("kbd",null,"Shift",-1)),t[36]||(t[36]=i("+")),t[37]||(t[37]=n("kbd",null,"Ctrl",-1)),t[38]||(t[38]=i("+")),t[39]||(t[39]=n("kbd",null,"E",-1)),t[40]||(t[40]=i(") 이며, 대량 내보내기를 실행하면 ")),t[41]||(t[41]=n("strong",null,"내보내기 창",-1)),t[42]||(t[42]=i("이 열리고, 각 디자인 요소에 적용된 포맷, 해상도, 크기 등을 확인할 수 있습니다."))]),t[79]||(t[79]=a('<figure><img src="https://yozm.wishket.com/media/news/2802/1__9_.png" alt="대량 내보내기 기능" tabindex="0" loading="lazy"><figcaption>대량 내보내기 기능</figcaption></figure><p>또한 피그마에는 슬라이스(Slice) 도구도 있는데, 이 기능은 <strong>특정 영역만을 추출</strong>하고자 할 때 유용한 기능입니다. 슬라이스 도구를 사용하려면 상단 툴바에서 Slice를 선택하거나, **단축키 <kbd>S</kbd>**를 누르고 드래그하면 됩니다. 참고로 슬라이스를 이용하면 특정 부분의 패딩을 조절하여, 콘텐츠 외부의 여백을 조정할 수 있는데요. 이는 웹 프로젝트나 반응형 디자인에서 유용하게 활용되기도 합니다.</p><figure><img src="https://yozm.wishket.com/media/news/2802/1__10_.png" alt="슬라이스 기능 예시" tabindex="0" loading="lazy"><figcaption>슬라이스 기능 예시</figcaption></figure><h3 id="_3-디자인-요소-선택과-유용한-단축키" tabindex="-1"><a class="header-anchor" href="#_3-디자인-요소-선택과-유용한-단축키"><span>3) 디자인 요소 선택과 유용한 단축키</span></a></h3><p>디자인을 코드로 변환하는 작업을 할 때 디자인 요소를 자유자재로 선택할 수 있어야 작업 속도를 높일 수 있습니다. 디자인 요소를 선택하려면 캔버스에서 직접 마우스로 클릭하면 됩니다. 하지만 여러 디자인 요소가 <strong>그룹</strong>으로 묶여있거나, <strong>중첩된 레이어</strong>로 구성되면 원하는 대로 선택할 수 없는 경우가 있는데요.</p><p>이럴 땐 아래 그림처럼 디자인 요소를 <strong>더블 클릭</strong>하거나, <strong><kbd>Enter</kbd> 키</strong>를 눌러 중첩된 객체를 차례대로 선택할 수 있습니다. 또는 직접 좌측 레이어 패널에서 해당 디자인 요소의 이름을 찾아 선택하는 방법도 있습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2802/1__2_.gif" alt="중첩된 디자인 요소 선택" tabindex="0" loading="lazy"><figcaption>중첩된 디자인 요소 선택</figcaption></figure><p>특정 디자인 요소의 <strong>최상위 프레임</strong>을 선택하고자 할 때는 <strong>Cmd</strong>(윈도우의 경우 Ctrl)를 누르고 해당 디자인 요소를 클릭하면 됩니다. 이때 프레임을 선택한 다음에 <strong>Shift + 2</strong>를 누르면, 캔버스 정가운데 확대되서 나타는데요. 페이지 내에 수많은 프레임이 있는 경우 굉장히 유용한 단축키입니다.</p>',8)),n("p",null,[t[48]||(t[48]=i("다시 ")),n("strong",null,[t[44]||(t[44]=n("kbd",null,"Shift",-1)),t[45]||(t[45]=i("+")),t[46]||(t[46]=n("kbd",null,"1",-1)),n("strong",null,[t[43]||(t[43]=i("을 누르면 기존 화면으로 돌아갈 수 있습니다. 아울러 캔버스에서 ")),o(e,{icon:"iconfont icon-macos"})]),t[47]||(t[47]=n("kbd",null,"Cmd",-1))]),t[49]||(t[49]=i("(윈도우의 경우 ")),o(e,{icon:"fa-brands fa-windows"}),t[50]||(t[50]=n("kbd",null,"Ctrl",-1)),t[51]||(t[51]=i(")를 누르고, 여러 요소를 선택하면 ")),t[52]||(t[52]=n("strong",null,"다중 선택",-1)),t[53]||(t[53]=i("할 수도 있습니다. 참고로 단축키 목록은 다음 그림과 같이 **")),t[54]||(t[54]=n("kbd",null,"Cmd",-1)),t[55]||(t[55]=i("+")),t[56]||(t[56]=n("kbd",null,"Shift",-1)),t[57]||(t[57]=i("+")),t[58]||(t[58]=n("kbd",null,"?",-1)),t[59]||(t[59]=i("**로 확인할 수 있으며, 한 번이라도 사용한 단축키는 파란색 버튼으로 표시됩니다."))]),t[80]||(t[80]=a('<figure><img src="https://yozm.wishket.com/media/news/2802/1__11_.png" alt="피그마 단축키 목록" tabindex="0" loading="lazy"><figcaption>피그마 단축키 목록</figcaption></figure><hr><h2 id="개발자가-알아두면-좋은-피그마-활용-팁" tabindex="-1"><a class="header-anchor" href="#개발자가-알아두면-좋은-피그마-활용-팁"><span>개발자가 알아두면 좋은 피그마 활용 팁</span></a></h2><h3 id="_1-반응형-디자인-구현을-위한-오토-레이아웃-활용" tabindex="-1"><a class="header-anchor" href="#_1-반응형-디자인-구현을-위한-오토-레이아웃-활용"><span>1) 반응형 디자인 구현을 위한 오토 레이아웃 활용</span></a></h3><p>피그마의 오토 레이아웃 기능은 디자인 요소 사이의 간격, 정렬, 패딩을 직관적으로 조절하고, 다양한 화면 크기에 맞춰 유연하게 디자인을 조정할 수 있는 기능입니다. 오토 레이아웃은 <strong>CSS의 flexbox</strong>와 유사하여, 개발자가 이 기능을 잘 활용하면, 디자인 요소의 동적인 배치와 반응형 디자인을 더 쉽게 구현할 수 있습니다. 특정 디자인 요소에 오토 레이아웃을 적용하려면, 속성 패널 중간의 오토 레이아웃 아이콘을 클릭하거나 단축키 **<kbd>Shift</kbd>+<kbd>A</kbd>**를 누르면 됩니다.</p><figure><img src="https://yozm.wishket.com/media/news/2802/1__12_.png" alt="오토 레이아웃 사용 설정" tabindex="0" loading="lazy"><figcaption>오토 레이아웃 사용 설정</figcaption></figure><p>오토 레이아웃을 사용하면 디자인 요소들을 수직(Vertical), 수평(Horizontal) 또는 줄 바꿈(Wrap)으로 자동 배치할 수 있습니다. 예를 들어, <strong>수직 방향</strong>은 리스트 형태의 메뉴를 만들 때, <strong>수평 방향</strong>은 버튼 그룹을 만들 때 유용하며, <strong>줄 바꿈</strong> 설정은 갤러리나 태그와 같은 구성 요소에 적합합니다. 이러한 방향 설정은 요소들이 화면 크기에 따라 자연스럽게 재배치되도록 해줍니다.</p><figure><img src="https://yozm.wishket.com/media/news/2802/1__13_.png" alt="오토 레이아웃 방향 설정 예시&lt;br/&gt;&lt;출처: Figma&gt;" tabindex="0" loading="lazy"><figcaption>오토 레이아웃 방향 설정 예시<br>&lt;출처: Figma&gt;</figcaption></figure><p>오토 레이아웃에는 이외에도 다양한 기능이 있지만, 그중에서 특히 **자동 크기 조정(Resizing)**은 반응형 레이아웃에서 필수적인 기능입니다. 자동 크기 조절 기능은 오토 레이아웃 프레임 내 요소들이 부모 프레임의 크기에 맞춰 Hug contents(콘텐츠에 맞추기), Fill container(컨테이너에 맞추기), Fixed size(고정 크기) 등의 방식으로 크기가 변경되도록 제어합니다.</p><p>예를 들어, <strong>Hug contents</strong>는 자식 요소의 크기에 맞게 프레임이 조정되고, <strong>Fill container</strong>는 부모 프레임의 크기에 맞춰 자식 요소가 늘어나거나 줄어들며, <strong>Fixed size</strong>는 고정된 크기로 변경되는 방식입니다. 이는 CSS의 flex-grow나 flex-shrink 등과 유사하여, 다양한 화면 크기에 대응하는 반응형 레이아웃을 편리하게 구현할 수 있습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2802/1__3_.gif" alt="자동 크기 조정이 적용된 UI 예시&lt;br/&gt;&lt;출처: Figma&gt;" tabindex="0" loading="lazy"><figcaption>자동 크기 조정이 적용된 UI 예시<br>&lt;출처: Figma&gt;</figcaption></figure><h3 id="_2-개발자-모드-dev-mode" tabindex="-1"><a class="header-anchor" href="#_2-개발자-모드-dev-mode"><span>2) 개발자 모드(Dev Mode)</span></a></h3><p>개발자 모드는 디자인 관련된 개발 업무에 초점을 맞추어 2023년 6월에 출시된 기능입니다. 개발자 모드를 사용하면 디자인 사양을 더 정확하게 확인할 수 있으며, 자동 생성된 코드 스니펫으로 <strong>코드 작업의 효율</strong>을 높일 수 있습니다.</p><p>다만 현재 피그마에서는 <strong>유료 플랜</strong>에서만 개발자 모드를 지원하고 있으며, 피그마를 통한 디자이너와의 협업 프로세스가 제대로 셋업되어 있지 않거나, 디자이너의 <strong>설정이 미흡한 경우</strong>, 개발자가 수동으로 작업할 때보다 오히려 업무 효율이 떨어질 수 있다는 단점이 있습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2802/1__14_.png" alt="개발자 모드 인터페이스" tabindex="0" loading="lazy"><figcaption>개발자 모드 인터페이스</figcaption></figure><p>참고로 개발자 모드를 사용하면 디자인 파일의 <strong>각 버전 간 차이</strong>를 코드로 비교할 수 있는데요. 이를 통해 디자인 시안 중에서 업데이트된 부분을 빠르게 확인할 수 있으며, 특히 개발 중에 디자이너와 불필요한 커뮤니케이션을 줄일 수 있습니다. 또한 여러 변형(Variants)을 가진 컴포넌트 세트를 미리 보고 테스트할 수 있어, 코드 변환 시 UI 요소를 정확하게 반영할 수 있습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2802/1__15_.png" alt="디자인 요소 간 버전 비교 예시" tabindex="0" loading="lazy"><figcaption>디자인 요소 간 버전 비교 예시</figcaption></figure><h3 id="_3-플러그인과-확장-프로그램-활용" tabindex="-1"><a class="header-anchor" href="#_3-플러그인과-확장-프로그램-활용"><span>3) 플러그인과 확장 프로그램 활용</span></a></h3>',18)),n("p",null,[t[62]||(t[62]=i("피그마에는 작업의 효율성을 높일 수 있는 다양한 플러그인이 있습니다. 특히 개발자가 자주 사용하는 플러그인으로는 ")),n("a",S,[o(e,{icon:"fa-brands fa-figma"}),t[60]||(t[60]=i("Figma to React"))]),t[63]||(t[63]=i(", ")),n("a",C,[o(e,{icon:"fa-brands fa-figma"}),t[61]||(t[61]=i("Anima"))]),t[64]||(t[64]=i(" 등이 있으며, 주로 디자인 요소를 코드로 변환할 때 자주 사용합니다."))]),n("p",null,[t[69]||(t[69]=i("또한 ")),n("a",I,[o(e,{icon:"fa-brands fa-figma"}),t[65]||(t[65]=i("Iconify"))]),t[70]||(t[70]=i("나 ")),n("a",v,[o(e,{icon:"fa-brands fa-figma"}),t[66]||(t[66]=i("Unsplash"))]),t[71]||(t[71]=i("와 같은 플러그인은 디자인 리소스를 쉽게 추가할 수 있게 해주며, ")),n("a",A,[o(e,{icon:"fa-brands fa-figma"}),t[67]||(t[67]=i("Content Reel"))]),t[72]||(t[72]=i("이나 ")),n("a",V,[o(e,{icon:"fa-brands fa-figma"}),t[68]||(t[68]=i("Lorem ipsum"))]),t[73]||(t[73]=i("은 더미 데이터 생성에 유용한 플러그인입니다. 이러한 플러그인을 사용하면 디자인을 코드로 변환하거나 레이아웃을 테스트할 때 조금 더 개발 생산성을 높일 수 있습니다."))]),t[81]||(t[81]=a('<figure><img src="https://yozm.wishket.com/media/news/2802/1__16_.png" alt="플러그인을 활용한 코드 변환 예시" tabindex="0" loading="lazy"><figcaption>플러그인을 활용한 코드 변환 예시</figcaption></figure><p>이 밖에도 유료 플랜의 경우, 피그마의 <strong>VS Code 확장 프로그램</strong>(Figma for VS Code)을 사용할 수 있는데요. VS Code에 피그마 확장 프로그램을 설치하면 코드 편집기 내에서 직접 디자인 파일을 확인할 수 있으며, 주석을 남기거나 변경 사항을 추적할 수도 있습니다. 또한 디자인을 기반으로 한 코드 제안 기능이 제공되며, 코드 파일을 디자인 컴포넌트와 연결하여 개발 속도를 향상시킬 수 있습니다.</p><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>지금까지 개발자를 위한 피그마 사용 방법과 활용 팁에 대해 살펴보았습니다. 피그마는 디자인에서 개발로의 전달 과정인 <strong>핸드오프</strong>(Hand off)를 간소화하며, 별도의 파일이나 정보를 준비할 필요 없이 디자인, 이미지, 폰트, 간격, 인터랙션 등을 개발자가 한 번에 전달받을 수 있도록 해줍니다.</p><p>이를 통해 디자이너와 개발자 간의 협업이 훨씬 원활해졌으며, 현재는 소프트웨어 개발 프로세스에서도 중요한 역할을 차지하고 있습니다. 개인적인 생각으로는 앞으로 AI를 활용한 1인 개발 및 소규모 조직의 개발이 활발해지면서 피그마는 점차 <strong>개발자에게도 필수적인 도구</strong>가 되지 않을까 싶습니다. 특히 미래에는 디자인과 개발에 대한 통합적인 관점이 강조될 것으로 보여, 미리 대비해 두면 좋겠습니다.</p><p>요즘IT의 모든 콘텐츠는 저작권법의 보호를 받는 바, 무단 전재와 복사, 배포 등을 금합니다.</p>',7)),b(" TODO: add ARTICLE CARD "),o(l,m(p({title:"개발자를 위한 피그마(Figma) 사용 방법과 활용 팁",desc:"개발자는 소프트웨어 개발 프로젝트에서 디자이너와 협업할 일이 많습니다. 피그마(Figma)는 이러한 협업을 원활하게 해주는 툴로서 현재 다양한 UI/UX 디자인에 사용되고 있는데요. 개발자가 피그마를 활용하면, 디자인을 코드로 변환하는 작업을 더 효율적으로 할 수 있어 개발 생산성을 높일 수 있습니다. 또한 피그마는 1인 개발이나 소규모 프로젝트에서 빠르게 아이디어를 구체화할 때 유용하게 활용할 수 있는 도구이기도 합니다. 이번 글에서는 피그마의 기본 개념을 살펴보고, 개발자 관점에서 자주 사용하는 기능과 활용 팁을 정리해 보았습니다.",link:"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2802.html",logo:"https://yozm.wishket.com/favicon.ico",background:"rgba(84,7,224,0.2)"})),null,16)])}const T=u(h,[["render",R]]),U=JSON.parse('{"path":"/yozm.wishket.com/2802.html","title":"개발자를 위한 피그마(Figma) 사용 방법과 활용 팁","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"개발자를 위한 피그마(Figma) 사용 방법과 활용 팁","description":"Article(s) > 개발자를 위한 피그마(Figma) 사용 방법과 활용 팁","icon":"fa-brands fa-figma","category":["Design","Figma","Article(s)"],"tag":["blog","yozm.wishket.com","design","figma"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"개발자를 위한 피그마(Figma) 사용 방법과 활용 팁\\",\\"image\\":[\\"https://yozm.wishket.com/media/news/2802/1__1_.png\\",\\"https://yozm.wishket.com/media/news/2802/1__2_.png\\",\\"https://yozm.wishket.com/media/news/2802/1__3_.png\\",\\"https://yozm.wishket.com/media/news/2802/1__4_.png\\",\\"https://yozm.wishket.com/media/news/2802/1__5_.png\\",\\"https://yozm.wishket.com/media/news/2802/1__6_.png\\",\\"https://yozm.wishket.com/media/news/2802/1__7_.png\\",\\"https://yozm.wishket.com/media/news/2802/1__1_.gif\\",\\"https://yozm.wishket.com/media/news/2802/1__8_.png\\",\\"https://yozm.wishket.com/media/news/2802/1__9_.png\\",\\"https://yozm.wishket.com/media/news/2802/1__10_.png\\",\\"https://yozm.wishket.com/media/news/2802/1__2_.gif\\",\\"https://yozm.wishket.com/media/news/2802/1__11_.png\\",\\"https://yozm.wishket.com/media/news/2802/1__12_.png\\",\\"https://yozm.wishket.com/media/news/2802/1__13_.png\\",\\"https://yozm.wishket.com/media/news/2802/1__3_.gif\\",\\"https://yozm.wishket.com/media/news/2802/1__14_.png\\",\\"https://yozm.wishket.com/media/news/2802/1__15_.png\\",\\"https://yozm.wishket.com/media/news/2802/1__16_.png\\"],\\"datePublished\\":\\"2024-10-16T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"곰씨네 IT 블로그\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2802.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"개발자를 위한 피그마(Figma) 사용 방법과 활용 팁"}],["meta",{"property":"og:description","content":"Article(s) > 개발자를 위한 피그마(Figma) 사용 방법과 활용 팁"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/2802/1__3_.gif"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/2802/1__3_.gif"}],["meta",{"name":"twitter:image:alt","content":"개발자를 위한 피그마(Figma) 사용 방법과 활용 팁"}],["meta",{"property":"article:author","content":"곰씨네 IT 블로그"}],["meta",{"property":"article:tag","content":"figma"}],["meta",{"property":"article:tag","content":"design"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-10-16T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 개발자를 위한 피그마(Figma) 사용 방법과 활용 팁"},{"property":"og:description","content":"개발자를 위한 피그마(Figma) 사용 방법과 활용 팁"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2802.html"}]],"prev":"/tool/figma/articles/README.md","date":"2024-10-16T00:00:00.000Z","isOriginal":false,"author":"곰씨네 IT 블로그","cover":"https://yozm.wishket.com/media/news/2802/1__3_.gif"},"git":{},"readingTime":{"minutes":1.83,"words":550},"filePathRelative":"yozm.wishket.com/2802.md","copyright":{"author":"곰씨네 IT 블로그"}}');export{T as comp,U as data};
