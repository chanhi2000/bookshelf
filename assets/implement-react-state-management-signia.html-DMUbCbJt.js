import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as t,b as i,a as v,t as b,n as r,g as d,w as e,e as a,r as l,o as f}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/banner.png",y="/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/signia-create-atom-diagram.png",x="/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/signia-update-atom.png",j="/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/signia-atom-recalculated-computed-signals-process.png",S="/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/signia-vite-boilerplate-app-configuration-settings.png",T="/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/testing-vite-signia-example-application-ui.png",I="/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/vite-signia-counter-value-increment-ui.gif",A="/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/testing-signia-react-to-do-list-changes.png",C="/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/react-signia-to-do-list-demo-gif.gif",R="/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/signia-react-complete-to-do-list-state-updates.webp",q="/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/react-vite-signia-final-to-do-list-application.gif",L={},U={id:"frontmatter-title-관련",tabindex:"-1"},W={class:"header-anchor",href:"#frontmatter-title-관련"},D={class:"table-of-contents"},B={href:"https://redux.js.org/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/reduxjs/reselect",target:"_blank",rel:"noopener noreferrer"},N={href:"https://redux-saga.js.org/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://signia.tldraw.dev/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://signia.tldraw.dev/docs/using-signals",target:"_blank",rel:"noopener noreferrer"},M={href:"https://tldraw.dev/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://signia.tldraw.dev/docs/react-bindings",target:"_blank",rel:"noopener noreferrer"},E={href:"https://rxjs.dev/",target:"_blank",rel:"noopener noreferrer"},H={href:"https://signia.tldraw.dev/docs/API/signia/interfaces/Atom",target:"_blank",rel:"noopener noreferrer"},F={href:"https://signia.tldraw.dev/docs/react-bindings",target:"_blank",rel:"noopener noreferrer"},G={href:"https://chakra-ui.com/",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/kokanek/todo-list-with-signia",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://react.dev/reference/react/createContext",target:"_blank",rel:"noopener noreferrer"};function J(k,n){const u=l("VPCard"),p=l("router-link"),g=l("SiteInfo"),c=l("RouteLink"),o=l("VPIcon");return f(),h("div",null,[s("h1",U,[s("a",W,[s("span",null,b(k.$frontmatter.title)+" 관련",1)])]),t(u,r(d({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",D,[s("ul",null,[s("li",null,[t(p,{to:"#what-is-signia"},{default:e(()=>n[0]||(n[0]=[a("What is Signia?")])),_:1,__:[0]})]),s("li",null,[t(p,{to:"#what-exactly-are-signals"},{default:e(()=>n[1]||(n[1]=[a("What exactly are signals?")])),_:1,__:[1]})]),s("li",null,[t(p,{to:"#signia-core-concepts"},{default:e(()=>n[2]||(n[2]=[a("Signia core concepts")])),_:1,__:[2]}),s("ul",null,[s("li",null,[t(p,{to:"#atom"},{default:e(()=>n[3]||(n[3]=[a("Atom")])),_:1,__:[3]})]),s("li",null,[t(p,{to:"#creating-an-atom"},{default:e(()=>n[4]||(n[4]=[a("Creating an Atom")])),_:1,__:[4]})]),s("li",null,[t(p,{to:"#updating-an-atom"},{default:e(()=>n[5]||(n[5]=[a("Updating an Atom")])),_:1,__:[5]})]),s("li",null,[t(p,{to:"#computed-signals"},{default:e(()=>n[6]||(n[6]=[a("Computed signals")])),_:1,__:[6]})]),s("li",null,[t(p,{to:"#creating-a-computed-signal"},{default:e(()=>n[7]||(n[7]=[a("Creating a computed signal")])),_:1,__:[7]})]),s("li",null,[t(p,{to:"#updating-a-computed-signal"},{default:e(()=>n[8]||(n[8]=[a("Updating a computed signal")])),_:1,__:[8]})])])]),s("li",null,[t(p,{to:"#react-bindings-for-signia"},{default:e(()=>n[9]||(n[9]=[a("React bindings for Signia")])),_:1,__:[9]})]),s("li",null,[t(p,{to:"#getting-hands-on-with-signia"},{default:e(()=>n[10]||(n[10]=[a("Getting hands-on with Signia")])),_:1,__:[10]}),s("ul",null,[s("li",null,[t(p,{to:"#setting-up-signia"},{default:e(()=>n[11]||(n[11]=[a("Setting up Signia")])),_:1,__:[11]})]),s("li",null,[t(p,{to:"#setting-up-chakra-ui"},{default:e(()=>n[12]||(n[12]=[a("Setting up Chakra UI")])),_:1,__:[12]})]),s("li",null,[t(p,{to:"#testing-reactivity-with-signia"},{default:e(()=>n[13]||(n[13]=[a("Testing reactivity with Signia")])),_:1,__:[13]})]),s("li",null,[t(p,{to:"#designing-the-state"},{default:e(()=>n[14]||(n[14]=[a("Designing the state")])),_:1,__:[14]})]),s("li",null,[t(p,{to:"#creating-the-ui"},{default:e(()=>n[15]||(n[15]=[a("Creating the UI")])),_:1,__:[15]})]),s("li",null,[t(p,{to:"#testing-the-ui"},{default:e(()=>n[16]||(n[16]=[a("Testing the UI")])),_:1,__:[16]})]),s("li",null,[t(p,{to:"#sharing-state-between-react-components"},{default:e(()=>n[17]||(n[17]=[a("Sharing state between React components")])),_:1,__:[17]})])])]),s("li",null,[t(p,{to:"#conclusion"},{default:e(()=>n[18]||(n[18]=[a("Conclusion")])),_:1,__:[18]})])])]),n[84]||(n[84]=s("hr",null,null,-1)),t(g,{name:"Implementing React state management with Signia",desc:"Explore Signia, a state management library that uses signals to solve the same problems as Redux, Jotai, Zustand, and MobX.",url:"https://blog.logrocket.com/implement-react-state-management-signia",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/implement-react-state-management-signia/banner.png"}),s("p",null,[n[20]||(n[20]=a("If you’ve developed any React application with a decent level of complexity in the recent past, you probably already understand how state management can pretty quickly become a major concern. The ")),t(c,{to:"/blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems.html"},{default:e(()=>n[19]||(n[19]=[s("strong",null,[a("native tools provided by React, like "),s("code",null,"useState"),a(" and "),s("code",null,"useContext")],-1)])),_:1,__:[19]}),n[21]||(n[21]=a(", turn out to be inadequate when trying to implement common design patterns, like a central, shared state that is consumed and updated by several components."))]),n[85]||(n[85]=s("figure",null,[s("img",{src:w,alt:"React State Management Signia",tabindex:"0",loading:"lazy"}),s("figcaption",null,"React State Management Signia")],-1)),s("p",null,[s("a",B,[t(o,{icon:"fas fa-globe"}),n[22]||(n[22]=a("Redux"))]),n[28]||(n[28]=a(" is the most popular library that helped to solve this problem; it had a great run for several years, and, to overcome the minor gaps that it had, a great ecosystem grew around it in the form of libraries like ")),s("a",V,[t(o,{icon:"iconfont icon-github"}),n[23]||(n[23]=s("code",null,"reduxjs/reselect",-1))]),n[29]||(n[29]=a(" and ")),s("a",N,[t(o,{icon:"fas fa-globe"}),n[24]||(n[24]=a("Redux-Saga"))]),n[30]||(n[30]=a(". More recently, other alternatives like ")),t(c,{to:"/blog.logrocket.com/guide-choosing-right-react-state-management-solution.html"},{default:e(()=>n[25]||(n[25]=[s("strong",null,"MobX, Zustand, and Jotai",-1)])),_:1,__:[25]}),n[31]||(n[31]=a(" have gained popularity. In this article, we’ll learn about ")),s("a",P,[t(o,{icon:"fas fa-globe"}),n[26]||(n[26]=a("Signia"))]),n[32]||(n[32]=a(", a state management library that uses ")),s("a",z,[t(o,{icon:"fas fa-globe"}),n[27]||(n[27]=a("signals"))]),n[33]||(n[33]=a(" to solve the same problems."))]),n[86]||(n[86]=s("hr",null,null,-1)),n[87]||(n[87]=s("h2",{id:"what-is-signia",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#what-is-signia"},[s("span",null,"What is Signia?")])],-1)),s("p",null,[n[35]||(n[35]=a("As mentioned in the announcement blog post by the ")),s("a",M,[t(o,{icon:"fas fa-globe"}),n[34]||(n[34]=a("tldraw"))]),n[36]||(n[36]=a(" team, “Signia is an original library for working with fine-grained reactive values, called signals, using a new lazy reactivity model based on logical clocks”."))]),n[88]||(n[88]=s("p",null,"In simpler terms, Signia uses primitives called signals for state management, which can efficiently calculate computed values by performing incremental calculations. In addition, with the help of internal clocks that provide support for the rollback of the entire transaction, they can implement the concept of transactions if required.",-1)),s("p",null,[n[38]||(n[38]=a("Although the core library is framework agnostic, the tldraw team has also released a set of ")),s("a",O,[t(o,{icon:"fas fa-globe"}),n[37]||(n[37]=a("React bindings"))]),n[39]||(n[39]=a(" that make integrating Signia into a React application a breeze."))]),n[89]||(n[89]=s("hr",null,null,-1)),n[90]||(n[90]=s("h2",{id:"what-exactly-are-signals",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#what-exactly-are-signals"},[s("span",null,"What exactly are signals?")])],-1)),n[91]||(n[91]=s("p",null,"Let’s first understand what a signal is conceptually before getting into Signia’s functionality. According to the official documentation, “a signal is a value that changes over time and whose change events can trigger side effects”. In other words, a signal is a pure, reactive value that can be observed for changes. It is then the responsibility of the signal’s library to observe these changes, notify the subscribers, and trigger the required side effects.",-1)),s("p",null,[n[41]||(n[41]=a("In theory, signals are somewhat similar to the concept of observables provided by the ")),s("a",E,[t(o,{icon:"fas fa-globe"}),n[40]||(n[40]=a("RxJS"))]),n[42]||(n[42]=a(" library, but with a few fundamental differences. One of them is the need to create a subscription and pass a callback function to access the value of the observable."))]),n[92]||(n[92]=s("hr",null,null,-1)),n[93]||(n[93]=s("h2",{id:"signia-core-concepts",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#signia-core-concepts"},[s("span",null,"Signia core concepts")])],-1)),n[94]||(n[94]=s("p",null,"Let’s review a few concepts that are necessary to understand Signia.",-1)),n[95]||(n[95]=s("h3",{id:"atom",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#atom"},[s("span",null,"Atom")])],-1)),s("p",null,[n[44]||(n[44]=a("An ")),s("a",H,[t(o,{icon:"fas fa-globe"}),n[43]||(n[43]=a("Atom in Signia"))]),n[45]||(n[45]=a(" represents the signals that correspond to the root state, i.e., the source of truth for your app. Its value can be read and updated as well as built upon to create computed values."))]),n[96]||(n[96]=i('<h3 id="creating-an-atom" tabindex="-1"><a class="header-anchor" href="#creating-an-atom"><span>Creating an Atom</span></a></h3><figure><img src="'+y+`" alt="Signia Create Atom Diagram" tabindex="0" loading="lazy"><figcaption>Signia Create Atom Diagram</figcaption></figure><p>To create an Atom, the Signia library provides the <code>atom</code> function:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> atom <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;signia&#39;</span></span>
<span class="line"><span class="token keyword">const</span> fruit <span class="token operator">=</span> <span class="token function">atom</span><span class="token punctuation">(</span><span class="token string">&#39;fruit&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Apple&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The code above creates a signal called <code>fruit</code> with the value of <code>Apple</code>. We also pass <code>fruit</code> as the first argument to the <code>atom</code> function because it is helpful for debugging purposes.</p><h3 id="updating-an-atom" tabindex="-1"><a class="header-anchor" href="#updating-an-atom"><span>Updating an Atom</span></a></h3><figure><img src="`+x+`" alt="Signia Update Atom" tabindex="0" loading="lazy"><figcaption>Signia Update Atom</figcaption></figure><p>To update an Atom, we use the <code>set</code> function as follows:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">fruit<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;Banana&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruit<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Banana</span></span>
<span class="line">fruit<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> current <span class="token operator">+</span> <span class="token string">&#39;s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruit<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Bananas</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)),s("p",null,[n[47]||(n[47]=a("Similar to the ")),t(c,{to:"/blog.logrocket.com/using-setstate-react-components.html"},{default:e(()=>n[46]||(n[46]=[s("strong",null,[a("React "),s("code",null,"setState")],-1)])),_:1,__:[46]}),n[48]||(n[48]=a(" function, there is an alternate version of ")),n[49]||(n[49]=s("code",null,"set",-1)),n[50]||(n[50]=a(" that accepts a function as the argument. It then calls that function with the current value of the signal and computes the updated value."))]),n[97]||(n[97]=i('<h3 id="computed-signals" tabindex="-1"><a class="header-anchor" href="#computed-signals"><span>Computed signals</span></a></h3><figure><img src="'+j+`" alt="Signia Atom Recalculated Computed Signals Process" tabindex="0" loading="lazy"><figcaption>Signia Atom Recalculated Computed Signals Process</figcaption></figure><p>Computed signals are derived from Atoms and therefore have a dependency on them; their values are recomputed whenever the Atoms they depend on change.</p><h3 id="creating-a-computed-signal" tabindex="-1"><a class="header-anchor" href="#creating-a-computed-signal"><span>Creating a computed signal</span></a></h3><p>You can create a computed signal using the <code>computed</code> function as follows:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> computed<span class="token punctuation">,</span> atom <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;signia&#39;</span></span>
<span class="line"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token function">atom</span><span class="token punctuation">(</span><span class="token string">&#39;fruits&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Apples&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> numberOf <span class="token operator">=</span> <span class="token function">atom</span><span class="token punctuation">(</span><span class="token string">&#39;numberOf&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> display <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token string">&#39;display&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>numberOf<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>fruits<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>display<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 10 Apples</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="updating-a-computed-signal" tabindex="-1"><a class="header-anchor" href="#updating-a-computed-signal"><span>Updating a computed signal</span></a></h3><p>There is no direct way to update a computed signal. But, updating any of its root atoms will automatically update the computed signal:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">fruits<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;Bananas&#39;</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>display<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 10 Bananas</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>As shown above, the value of the computed signal is updated to reflect the latest value set on the <code>fruit</code>‘s root atom.</p><hr><h2 id="react-bindings-for-signia" tabindex="-1"><a class="header-anchor" href="#react-bindings-for-signia"><span>React bindings for Signia</span></a></h2>`,12)),s("p",null,[n[54]||(n[54]=a("The code examples we’ve reviewed so far are generic, using the Signia core library. But, as mentioned earlier, the tldraw team has also released a set of React bindings that make it easier to integrate Signia into a React application. The official React bindings are shipped in two packages, namely, ")),s("a",F,[t(o,{icon:"fas fa-globe"}),n[51]||(n[51]=s("code",null,"signia-react",-1)),n[52]||(n[52]=a(" and ")),n[53]||(n[53]=s("code",null,"signia-react-jsx",-1))]),n[55]||(n[55]=a("."))]),n[98]||(n[98]=i(`<p><code>signia-react</code> provides Hooks like <code>useAtom</code> and <code>useComputed</code>, which help with managing local state in a React component.<code>signia-react</code> also provides utilities like <code>track</code> and <code>useValue</code>, which you can use to provide reactivity to components but aren’t required if you’re using the <code>signia-react-jsx</code> library.</p><p><code>signia-react-jsx</code> provides configuration options that cause all functional components to become tracked and reactive. It also unpacks every signal, so we don’t need to wrap a signal inside of <code>useValue</code>. Now, let’s create a React to-do list app using Signia for its state management.</p><hr><h2 id="getting-hands-on-with-signia" tabindex="-1"><a class="header-anchor" href="#getting-hands-on-with-signia"><span>Getting hands-on with Signia</span></a></h2><p>Signia has out-of-the-box support for Vite, so we’ll use Vite as our bundler. To create a new Vite project, run the following command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> create vite@latest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>When the interface comes up, provide a name for the new project, select <strong>React</strong> as the framework, and select <strong>TypeScript</strong> as the language. When the project is created, you should see something similar to the following:</p><figure><img src="`+S+`" alt="Signia Vite Boilerplate App Configuration Settings" tabindex="0" loading="lazy"><figcaption>Signia Vite Boilerplate App Configuration Settings</figcaption></figure><p>We need to work in the directory where our project is created, which is the <code>todo-list-signia</code> directory in our case.</p><h3 id="setting-up-signia" tabindex="-1"><a class="header-anchor" href="#setting-up-signia"><span>Setting up Signia</span></a></h3><p>Now, let’s install the Signia-specific libraries:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> signia-react signia-react-jsx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,12)),s("p",null,[n[56]||(n[56]=a("We’ll set up reactivity for our components so that we don’t need to manually wrap each component in a ")),n[57]||(n[57]=s("code",null,"track",-1)),n[58]||(n[58]=a(" function. To set this up, we open the ")),t(o,{icon:"iconfont icon-json"}),n[59]||(n[59]=s("code",null,"tsconfig.json",-1)),n[60]||(n[60]=a(" file in our newly created boilerplate Vite project and add the following code to the ")),n[61]||(n[61]=s("code",null,"compilerOptions",-1)),n[62]||(n[62]=a(" object:"))]),n[99]||(n[99]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="tsconfig.json"><span>tsconfig.json</span></div><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;jsx&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react-jsx&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;jsxImportSource&quot;</span><span class="token operator">:</span> <span class="token string">&quot;signia-react-jsx&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now, we can start working with Signia in our boilerplate.</p><h3 id="setting-up-chakra-ui" tabindex="-1"><a class="header-anchor" href="#setting-up-chakra-ui"><span>Setting up Chakra UI</span></a></h3>`,3)),s("p",null,[n[65]||(n[65]=a("Let’s also install a component library called ")),s("a",G,[t(o,{icon:"fas fa-globe"}),n[63]||(n[63]=a("Chakra UI"))]),n[66]||(n[66]=a(", which we’ll use to ")),t(c,{to:"/blog.logrocket.com/building-responsive-components-chakra-ui.html"},{default:e(()=>n[64]||(n[64]=[s("strong",null,"build our UI components",-1)])),_:1,__:[64]}),n[67]||(n[67]=a(", making them look clean and organized. To install Chakra UI and its peer dependencies, run the following command:"))]),n[100]||(n[100]=i(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> i @chakra-ui/react @emotion/react @emotion/styled framer-motion react-icons</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),s("p",null,[n[68]||(n[68]=a("Make the following changes in ")),t(o,{icon:"fa-brands fa-react"}),n[69]||(n[69]=s("code",null,"App.tsx",-1)),n[70]||(n[70]=a(":"))]),n[101]||(n[101]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.tsx"><span>App.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ChakraProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@chakra-ui/react&#39;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChakraProvider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>App<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Heading</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Testing Vite!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Heading</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">colorScheme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>blue<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Button</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ChakraProvider</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Next, we run the local dev server using the command below:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> run dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We can see that the app is up and running on <code>localhost</code>, showing the following:</p><figure><img src="`+T+`" alt="Testing Vite Signia Example Application UI" tabindex="0" loading="lazy"><figcaption>Testing Vite Signia Example Application UI</figcaption></figure><h3 id="testing-reactivity-with-signia" tabindex="-1"><a class="header-anchor" href="#testing-reactivity-with-signia"><span>Testing reactivity with Signia</span></a></h3><p>Before creating the actual app, let’s test if we have everything set up correctly. We’ll create a simple counter app that uses Signia for state management. We’ll create a local state variable with <code>useAtom</code> that will hold the value of the count and an increment function to add to it every time the button is clicked:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.tsx"><span>App.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useAtom <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;signia-react&#39;</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">useAtom</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">onButtonClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    count<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChakraProvider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>App<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Heading</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Counter value: </span><span class="token punctuation">{</span>count<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Heading</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">colorScheme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>blue<span class="token punctuation">&#39;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">onButtonClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ChakraProvider</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>When we click the button, we can see that the counter value is updated correctly. Therefore, our setup is working as expected:</p><figure><img src="`+I+`" alt="Vite Signia Counter Value Increment UI" tabindex="0" loading="lazy"><figcaption>Vite Signia Counter Value Increment UI</figcaption></figure><h3 id="designing-the-state" tabindex="-1"><a class="header-anchor" href="#designing-the-state"><span>Designing the state</span></a></h3><p>Now that we can store simple values as Signia atoms, we can move on to the next step, designing the state for our to-do list app. The requirement is to store two entities, the list of items and the title of the list. We can use the class-based design that is recommended by the Signia team and create two separate Atoms for storing these entities. The class would look something like this:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span></span>
<span class="line">  metadata <span class="token operator">=</span> <span class="token function">atom</span><span class="token punctuation">(</span><span class="token string">&#39;metadata&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Groceries&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  items <span class="token operator">=</span> <span class="token function">atom</span><span class="token punctuation">(</span><span class="token string">&#39;items&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;Milk&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how our <code>items</code> class property is an object that holds other objects corresponding to the individual items, which will help us to efficiently update the state. We don’t need to loop through items to find the one we’re looking for, and we can use the <code>spread</code> operator over the items and update only the ones we’re interested in</p><p>Also notice how each of our to-do list items has three keys, <code>id</code>, <code>text</code>, and <code>completed</code>. We need to add functions to this class that will be able to modify this state, namely, <code>addItems</code>, <code>markItemAsDone</code>, and <code>setTitle</code>:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line">  <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">todoText</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> listItem <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">id</span><span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">text</span><span class="token operator">:</span> todoText<span class="token punctuation">,</span></span>
<span class="line">     <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>items<span class="token punctuation">,</span> <span class="token punctuation">[</span>listItem<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">:</span> listItem <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">markItemAsDone</span><span class="token punctuation">(</span><span class="token parameter">itemId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> updatedItem <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>value<span class="token punctuation">[</span>itemId<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>items<span class="token punctuation">,</span> <span class="token punctuation">[</span>itemId<span class="token punctuation">]</span><span class="token operator">:</span> updatedItem <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">title</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>metadata<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">metadata</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>metadata<span class="token punctuation">,</span> title <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The code above provides us with all the minimal functionality required to implement the UX.</p><h3 id="creating-the-ui" tabindex="-1"><a class="header-anchor" href="#creating-the-ui"><span>Creating the UI</span></a></h3><p>For our to-do list app’s UI, we’ll display the title at the top. To implement functionality to rename the list, you’ll simply providean <code>edit</code> button and call the <code>setTitle</code> function that we’ve already defined in our state class.</p><p>Below the <code>Title</code>, we can have our <code>input box</code> with a <code>button</code> that you can use to add items to the list. Using Chakra UI, the code for the title along with the input box looks something like the following:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Heading</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Todo Title</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Heading</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">InputGroup</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>md<span class="token punctuation">&#39;</span></span> <span class="token attr-name">mt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>2rem<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span></span>
<span class="line">    <span class="token attr-name">pr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>4.5rem<span class="token punctuation">&#39;</span></span></span>
<span class="line">    <span class="token attr-name">type</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>todoText<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onTodoItemChange<span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>Enter item to add<span class="token punctuation">&#39;</span></span></span>
<span class="line">  <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">InputRightElement</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>4.5rem<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">h</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>1.75rem<span class="token punctuation">&#39;</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>sm<span class="token punctuation">&#39;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onAddClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      Add</span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">InputRightElement</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">InputGroup</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To get hold of the state inside of the React component, we’d have to instantiate the <code>Todo</code> class. For that, we create a memoized version of the state with the <code>useMemo</code> Hook, like so:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">useNewTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Todo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We can now use this custom hook inside of the App component:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> todo <span class="token operator">=</span> <span class="token function">useNewTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We also need to create a local state variable that will keep a track of the text being typed inside of the <code>input box</code>. We can leverage <code>useAtom</code> for that purpose:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> todoText <span class="token operator">=</span> <span class="token function">useAtom</span><span class="token punctuation">(</span><span class="token string">&#39;todoText&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">onTodoItemChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  todoText<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We need two more handlers, one to handle the addition of a <code>todo</code> item and another to mark it as done:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">onAddClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  todo<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span>todoText<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  todoText<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">onDoneClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  todo<span class="token punctuation">.</span><span class="token function">markItemAsDone</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the <strong>add</strong> button is clicked, we call the <code>addItem</code> method on the instantiated state class. When the checkbox is checked, we call the <code>markItemAsDone</code> method with the ID.</p><p>There’s one thing left; we iterate over the list of to-do items and display them in the UI. For that, we‘ll use the <code>List</code> and the <code>ListItem</code> components along with the <code>Object.values</code> helper to iterate over the object values:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">List</span></span> <span class="token attr-name">spacing</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span></span> <span class="token attr-name">textAlign</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">}</span></span> <span class="token attr-name">mt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>2rem<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  </span><span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>items<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ListItem</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span> <span class="token attr-name">alignItems</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">&#39;center&#39;</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Checkbox</span></span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">}</span></span> <span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">}</span></span> <span class="token attr-name">mt</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">&#39;4px&#39;</span><span class="token punctuation">}</span></span> <span class="token attr-name">mr</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">onDoneClick</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">as</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>completed <span class="token operator">?</span> <span class="token string">&#39;s&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ListItem</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">List</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32)),s("p",null,[n[74]||(n[74]=a("That completes all of the code changes required for our minimal to-do list app to work. You can check the complete set of code changes and even run it yourself by cloning this GitHub ")),s("a",K,[n[71]||(n[71]=a("repo (")),t(o,{icon:"iconfont icon-github"}),n[72]||(n[72]=s("code",null,"kokanek/todo-list-with-signia",-1)),n[73]||(n[73]=a(")"))]),n[75]||(n[75]=a("."))]),n[102]||(n[102]=i('<h3 id="testing-the-ui" tabindex="-1"><a class="header-anchor" href="#testing-the-ui"><span>Testing the UI</span></a></h3><p>Let’s test out the code changes. When we run the app for the first time, we can see the <code>Milk</code> item present in the to-do list because we hardcoded that in the state:</p><figure><img src="'+A+'" alt="Testing Signia React To Do List Changes" tabindex="0" loading="lazy"><figcaption>Testing Signia React To Do List Changes</figcaption></figure><p>We can play around with the app by adding more items:</p><figure><img src="'+C+'" alt="React Signia To Do List Demo Gif" tabindex="0" loading="lazy"><figcaption>React Signia To Do List Demo Gif</figcaption></figure><p>We can check off tasks by clicking on the checkbox:</p><figure><img src="'+R+'" alt="Signia React Complete To Do List State Updates" tabindex="0" loading="lazy"><figcaption>Signia React Complete To Do List State Updates</figcaption></figure><p>Our UI is working as expected, and we can add more tasks as desired.</p><h3 id="sharing-state-between-react-components" tabindex="-1"><a class="header-anchor" href="#sharing-state-between-react-components"><span>Sharing state between React components</span></a></h3><p>One last thing that we need to explore is sharing state among different React components. The example that we’ve built in this tutorial has the state class as well as the consumers of that state in the same file.</p>',10)),s("p",null,[n[77]||(n[77]=a("But, in real-life use cases, the point of storage of state and consumption are far apart. How do we manage sharing state in those scenarios? Signia recommends using ")),s("a",Z,[t(o,{icon:"fa-brands fa-react"}),n[76]||(n[76]=a("React.context"))]),n[78]||(n[78]=a(". We first create a context using the state class, then, we wrap our entire application in that context provider, passing the instantiated state class as the value:"))]),n[103]||(n[103]=i(`<div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> TodoContext <span class="token operator">=</span> React<span class="token punctuation">.</span>createContext<span class="token operator">&lt;</span>Todo <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">TodoHelper</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function-variable function">useNewTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> todoState <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Todo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> todoState</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> todo <span class="token operator">=</span> TodoHelper<span class="token punctuation">.</span><span class="token function">useNewTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TodoContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    ...other components get access to the state</span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TodoContext.Provider</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[79]||(n[79]=a("Let’s make these changes in our example and test it out. To do so, we make the changes above in the ")),n[80]||(n[80]=s("code",null,"App",-1)),n[81]||(n[81]=a(" component. We then create a new file named ")),t(o,{icon:"fa-brands fa-react"}),n[82]||(n[82]=s("code",null,"TodoList.jsx",-1)),n[83]||(n[83]=a(" and duplicate the code to render the list items inside of it. We also place the code to consume the state object from the context inside of this file:"))]),n[104]||(n[104]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="TodoList.jsx"><span>TodoList.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> TodoContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./App&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">useTodoFromContext</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> doc <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>TodoContext<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>doc<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;No document found in context&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> doc</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">TodoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> todo <span class="token operator">=</span> <span class="token function">useTodoFromContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">List</span></span> <span class="token attr-name">spacing</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span></span> <span class="token attr-name">textAlign</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">}</span></span> <span class="token attr-name">mt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>2rem<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>items<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ListItem</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span> <span class="token attr-name">alignItems</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">&#39;center&#39;</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Checkbox</span></span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">}</span></span> <span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">}</span></span> <span class="token attr-name">mt</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">&#39;4px&#39;</span><span class="token punctuation">}</span></span> <span class="token attr-name">mr</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">as</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>completed <span class="token operator">?</span> <span class="token string">&#39;s&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ListItem</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">List</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The <code>useTodoFromContext</code> helper is responsible for fetching the context and returning the latest instantiation of the state to this component. Now, we’ll place this component inside of a blue <code>&lt;div&gt;</code> in the <code>App.tsx</code> file. We can place it anywhere in the UX, even on a new route.</p><p>Now, when we add a new to-do item, we see that the <code>TodoList</code> component that reads this state from the context also displays the latest item added to the list:</p><figure><img src="`+q+'" alt="React Vite Signia Final To Do List Application" tabindex="0" loading="lazy"><figcaption>React Vite Signia Final To Do List Application</figcaption></figure><p>In the demo above, we’re reading the list items in the <code>TodoList</code> component. Because we have access to the <code>todo</code> object from the context, we can call the <code>addItem</code> and <code>markItemAsDone</code> methods too, and it would reflect across both of the lists. Therefore, we’ve effectively achieved the sharing of state from a central source.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, we built an application that uses the Signia library and its React helpers to manage state. The <code>useAtom</code> Hook provides an alternative to <code>useState</code>, and the class-based architecture with atoms as class properties provides a way to structure more complex state.</p><p>We also explored a way to share the common state between different components with <code>React.createContext</code> and <code>useContext</code>, all without the initial setup for reactivity and the boilerplate that libraries like Redux expect. Therefore, Signia could be the library that you use for state management the next time you build a React application. I hope you enjoyed this article, and be sure to leave a comment if you have any questions.</p>',9)),v(" TODO: add ARTICLE CARD "),t(u,r(d({title:"Implementing React state management with Signia",desc:"Explore Signia, a state management library that uses signals to solve the same problems as Redux, Jotai, Zustand, and MobX.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/implement-react-state-management-signia.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const Y=m(L,[["render",J]]),Q=JSON.parse('{"path":"/blog.logrocket.com/implement-react-state-management-signia.html","title":"Implementing React state management with Signia","lang":"en-US","frontmatter":{"lang":"en-US","title":"Implementing React state management with Signia","description":"Article(s) > Implementing React state management with Signia","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Implementing React state management with Signia\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/signia-create-atom-diagram.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/signia-update-atom.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/signia-atom-recalculated-computed-signals-process.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/signia-vite-boilerplate-app-configuration-settings.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/testing-vite-signia-example-application-ui.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/vite-signia-counter-value-increment-ui.gif\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/testing-signia-react-to-do-list-changes.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/react-signia-to-do-list-demo-gif.gif\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/signia-react-complete-to-do-list-state-updates.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/react-vite-signia-final-to-do-list-application.gif\\"],\\"datePublished\\":\\"2023-05-10T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kapeel Kokane\\",\\"url\\":\\"https://blog.logrocket.com/author/kapeelkokane/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/implement-react-state-management-signia.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Implementing React state management with Signia"}],["meta",{"property":"og:description","content":"Article(s) > Implementing React state management with Signia"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/implement-react-state-management-signia/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Implementing React state management with Signia"}],["meta",{"property":"article:author","content":"Kapeel Kokane"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-05-10T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Implementing React state management with Signia"},{"property":"og:description","content":"Implementing React state management with Signia"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/implement-react-state-management-signia.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2023-05-10T00:00:00.000Z","isOriginal":false,"author":[{"name":"Kapeel Kokane","url":"https://blog.logrocket.com/author/kapeelkokane/"}],"cover":"/assets/image/blog.logrocket.com/implement-react-state-management-signia/banner.png"},"git":{},"readingTime":{"minutes":10.21,"words":3063},"filePathRelative":"blog.logrocket.com/implement-react-state-management-signia.md","copyright":{"author":"Kapeel Kokane"}}');export{Y as comp,Q as data};
