import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as y,d as s,f as e,b as o,a as f,t as w,n as d,g as m,w as t,e as a,r as l,o as A}from"./app-BVguHYKu.js";const T={},C={id:"frontmatter-title-관련",tabindex:"-1"},D={class:"header-anchor",href:"#frontmatter-title-관련"},E={class:"table-of-contents"},I={href:"https://en.wikipedia.org/wiki/CI/CD",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/features/actions",target:"_blank",rel:"noopener noreferrer"},S={href:"https://azure.microsoft.com/en-us/products/app-service",target:"_blank",rel:"noopener noreferrer"},_={href:"https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions",target:"_blank",rel:"noopener noreferrer"},N={href:"https://about.codecov.io/",target:"_blank",rel:"noopener noreferrer"};function j(v,n){const c=l("VPCard"),i=l("router-link"),b=l("SiteInfo"),p=l("VPIcon"),k=l("RouteLink"),g=l("Tabs");return A(),y("div",null,[s("h1",C,[s("a",D,[s("span",null,w(v.$frontmatter.title)+" 관련",1)])]),e(c,d(m({title:"Github > Article(s)",desc:"Article(s)",link:"/devops/github/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(c,d(m({title:"Azure > Article(s)",desc:"Article(s)",link:"/devops/azure/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",E,[s("ul",null,[s("li",null,[e(i,{to:"#what-is-ci-cd-and-why-should-you-care"},{default:t(()=>n[0]||(n[0]=[a("What is CI/CD and Why Should You Care?")])),_:1,__:[0]})]),s("li",null,[e(i,{to:"#my-github-actions-workflow-for-net-9"},{default:t(()=>n[1]||(n[1]=[a("My GitHub Actions Workflow for .NET 9")])),_:1,__:[1]})]),s("li",null,[e(i,{to:"#extending-your-ci-cd-pipeline"},{default:t(()=>n[2]||(n[2]=[a("Extending Your CI/CD Pipeline")])),_:1,__:[2]}),s("ul",null,[s("li",null,[e(i,{to:"#_1-running-database-migrations"},{default:t(()=>n[3]||(n[3]=[a("1. Running Database Migrations")])),_:1,__:[3]})]),s("li",null,[e(i,{to:"#_2-code-coverage-reports"},{default:t(()=>n[4]||(n[4]=[a("2. Code Coverage Reports")])),_:1,__:[4]})]),s("li",null,[e(i,{to:"#_3-multi-environment-deployment"},{default:t(()=>n[5]||(n[5]=[a("3. Multi-Environment Deployment")])),_:1,__:[5]})])])]),s("li",null,[e(i,{to:"#final-thoughts"},{default:t(()=>n[6]||(n[6]=[a("Final Thoughts")])),_:1,__:[6]})])])]),n[32]||(n[32]=s("hr",null,null,-1)),e(b,{name:"Streamlining .NET 9 Deployment With GitHub Actions and Azure",desc:"Build a robust, automated CI/CD pipeline for .NET 9 applications using GitHub Actions and Azure App Service to transform deployments from stressful events into reliable, repeatable processes.",url:"https://milanjovanovic.tech/blog/streamlining-dotnet-9-deployment-with-github-actions-and-azure",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_133.png"}),n[33]||(n[33]=s("p",null,"I remember the days of deploying .NET applications by hand: publishing locally, copying files to servers, running scripts, and crossing my fingers that nothing would break. It was stressful, time-consuming, and honestly, a bit scary.",-1)),n[34]||(n[34]=s("p",null,"But those days are over.",-1)),s("p",null,[n[8]||(n[8]=a("After implementing ")),s("a",I,[e(p,{icon:"fa-brands fa-wikipedia-w"}),n[7]||(n[7]=a("CI/CD"))]),n[9]||(n[9]=a(" pipelines for dozens of projects, I've seen firsthand how automation transforms the deployment process from a dreaded chore into a reliable, even boring, part of development."))]),n[35]||(n[35]=s("p",null,"And boring deployments are good deployments.",-1)),s("p",null,[n[12]||(n[12]=a("In this article, I'll walk you through setting up a robust CI/CD pipeline for .NET 9 applications using ")),s("a",P,[e(p,{icon:"iconfont icon-github"}),n[10]||(n[10]=a("GitHub Actions"))]),n[13]||(n[13]=a(" and ")),s("a",S,[e(p,{icon:"iconfont icon-microsoftazure"}),n[11]||(n[11]=a("Azure App Service"))]),n[14]||(n[14]=a(". I'll cover:"))]),n[36]||(n[36]=o(`<ul><li>What CI/CD is and why it matters for .NET developers</li><li>A complete workflow that builds, tests, and deploys your application</li><li>How to extend your pipeline with database migrations, code coverage, and more</li><li>Practical tips I&#39;ve learned from real-world deployments</li></ul><p>Whether you&#39;re tired of manual deployments or looking to improve your existing automation, this guide will help you build a robust CI/CD pipeline that you can easily extend to fit your needs.</p><hr><h2 id="what-is-ci-cd-and-why-should-you-care" tabindex="-1"><a class="header-anchor" href="#what-is-ci-cd-and-why-should-you-care"><span>What is CI/CD and Why Should You Care?</span></a></h2><p>CI/CD stands for <strong>Continuous Integration</strong> and <strong>Continuous Delivery/Deployment</strong>.</p><p>In simple terms:</p><ul><li><strong>Continuous Integration (CI)</strong> means frequently merging code changes and running automated tests to catch issues early</li><li><strong>Continuous Delivery (CD)</strong> means getting those changes to production-ready environments quickly and safely</li><li><strong>Continuous Deployment (CD)</strong> is an extension of Continuous Delivery where every change that passes automated tests is deployed to production automatically</li></ul><p>The main benefits I&#39;ve seen:</p><ol><li><strong>Faster feedback</strong>: Find bugs within minutes instead of days</li><li><strong>More stable releases</strong>: Small, incremental changes are easier to fix</li><li><strong>Time savings</strong>: Let automation handle repetitive tasks while you focus on writing code</li><li><strong>Consistent deployment</strong>: No more &quot;it works on my machine&quot; problems</li></ol><hr><h2 id="my-github-actions-workflow-for-net-9" tabindex="-1"><a class="header-anchor" href="#my-github-actions-workflow-for-net-9"><span>My GitHub Actions Workflow for .NET 9</span></a></h2><p>Here&#39;s the workflow I use to deploy a simple time service API to Azure App Service:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title=".github/workflows/time.yaml"><span>.github/workflows/time.yaml</span></div><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token comment"># Name of the workflow as it appears in GitHub Actions UI</span></span>
<span class="line"><span class="token key atrule">name</span><span class="token punctuation">:</span> Time Service CI</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Define when this workflow will run</span></span>
<span class="line"><span class="token key atrule">on</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span> <span class="token comment"># Allow manual triggering from GitHub UI</span></span>
<span class="line">  <span class="token key atrule">push</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">branches</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> main <span class="token comment"># Run automatically when code is pushed to main branch</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Environment variables used throughout the workflow</span></span>
<span class="line"><span class="token key atrule">env</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">AZURE_WEBAPP_NAME</span><span class="token punctuation">:</span> time<span class="token punctuation">-</span>service</span>
<span class="line">  <span class="token key atrule">AZURE_WEBAPP_PACKAGE_PATH</span><span class="token punctuation">:</span> <span class="token string">&#39;./Time.Api/publish&#39;</span></span>
<span class="line">  <span class="token key atrule">DOTNET_VERSION</span><span class="token punctuation">:</span> <span class="token string">&#39;9.x&#39;</span></span>
<span class="line">  <span class="token key atrule">SOLUTION_PATH</span><span class="token punctuation">:</span> <span class="token string">&#39;Time.Api.sln&#39;</span></span>
<span class="line">  <span class="token key atrule">API_PROJECT_PATH</span><span class="token punctuation">:</span> <span class="token string">&#39;Time.Api&#39;</span></span>
<span class="line">  <span class="token key atrule">PUBLISH_DIR</span><span class="token punctuation">:</span> <span class="token string">&#39;./publish&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Define the separate jobs that make up this workflow</span></span>
<span class="line"><span class="token key atrule">jobs</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token comment"># First job: build and test the application</span></span>
<span class="line">  <span class="token key atrule">build-and-test</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> Build and Test</span>
<span class="line">    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest <span class="token comment"># Use Ubuntu runner for this job</span></span>
<span class="line"></span>
<span class="line">    <span class="token key atrule">steps</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v4</span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup .NET</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>dotnet@v4</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">dotnet-version</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.DOTNET_VERSION <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Restore</span>
<span class="line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> dotnet restore $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.SOLUTION_PATH <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build</span>
<span class="line">      <span class="token key atrule">run</span><span class="token punctuation">:</span> dotnet build $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.SOLUTION_PATH <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">-</span><span class="token punctuation">-</span>configuration Release</span>
<span class="line">        <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>restore</span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Test</span>
<span class="line">      <span class="token key atrule">run</span><span class="token punctuation">:</span> dotnet test $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.SOLUTION_PATH <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">-</span><span class="token punctuation">-</span>configuration Release</span>
<span class="line">        <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>restore</span>
<span class="line">        <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>build</span>
<span class="line">        <span class="token punctuation">-</span><span class="token punctuation">-</span>verbosity normal</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Publish</span>
<span class="line">      <span class="token key atrule">run</span><span class="token punctuation">:</span> dotnet publish $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.API_PROJECT_PATH <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">-</span><span class="token punctuation">-</span>configuration Release</span>
<span class="line">        <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>restore</span>
<span class="line">        <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>build</span>
<span class="line">        <span class="token punctuation">-</span><span class="token punctuation">-</span>property<span class="token punctuation">:</span>PublishDir=$<span class="token punctuation">{</span><span class="token punctuation">{</span> env.PUBLISH_DIR <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Store the published output as an artifact for later jobs</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Publish Artifacts</span>
<span class="line">      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/upload<span class="token punctuation">-</span>artifact@v4</span>
<span class="line">      <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">name</span><span class="token punctuation">:</span> webapp  <span class="token comment"># Name of the artifact</span></span>
<span class="line">        <span class="token key atrule">path</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.AZURE_WEBAPP_PACKAGE_PATH <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># Second job: deploy the application to Azure</span></span>
<span class="line">  <span class="token key atrule">deploy</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy to Azure</span>
<span class="line">    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest</span>
<span class="line">    <span class="token key atrule">needs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>build<span class="token punctuation">-</span>and<span class="token punctuation">-</span>test<span class="token punctuation">]</span> <span class="token comment"># This job depends on the build-and-test job</span></span>
<span class="line"></span>
<span class="line">    <span class="token key atrule">steps</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token comment"># Retrieve the artifacts from the build job</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Download artifact from build job</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/download<span class="token punctuation">-</span>artifact@v4</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">name</span><span class="token punctuation">:</span> webapp</span>
<span class="line">          <span class="token key atrule">path</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.AZURE_WEBAPP_PACKAGE_PATH <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment"># Deploy to Azure App Service using publish profile credentials</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> azure/webapps<span class="token punctuation">-</span>deploy@v2</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">app-name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.AZURE_WEBAPP_NAME <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token comment"># Authentication credentials stored as a secret</span></span>
<span class="line">          <span class="token key atrule">publish-profile</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.AZURE_WEBAPP_PUBLISH_PROFILE <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token key atrule">package</span><span class="token punctuation">:</span> <span class="token string">&#39;\${{ env.AZURE_WEBAPP_PACKAGE_PATH }}&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This workflow does two main things: it builds and tests the code and then deploys it to Azure.</p><p>The first job checks out our repository, sets up .NET 9, and runs through a standard build process: restore packages, build the solution, run tests, and publish the application. The detailed comments in the YAML explain each step. Once everything passes, it packages the application as an artifact for the next job.</p>`,15)),s("p",null,[n[16]||(n[16]=a("The second job takes that artifact and deploys it to Azure App Service using a publish profile. I store the publish profile as a ")),s("a",_,[e(p,{icon:"iconfont icon-github"}),n[15]||(n[15]=a("GitHub secret"))]),n[17]||(n[17]=a(" for security. The ")),n[18]||(n[18]=s("code",null,"needs: [build-and-test]",-1)),n[19]||(n[19]=a(" line ensures deployment only happens if all tests pass, which protects our production environment from broken code."))]),n[37]||(n[37]=o(`<figure><img src="https://milanjovanovic.tech/blogs/mnw_133/ci_cd_pipeline.png?imwidth=3840" alt="An example of what a workflow run looks like from the GitHub UI." tabindex="0" loading="lazy"><figcaption>An example of what a workflow run looks like from the GitHub UI.</figcaption></figure><p>Here&#39;s an example of what a workflow run looks like from the GitHub UI.</p><hr><h2 id="extending-your-ci-cd-pipeline" tabindex="-1"><a class="header-anchor" href="#extending-your-ci-cd-pipeline"><span>Extending Your CI/CD Pipeline</span></a></h2><p>While the basic workflow gets your application deployed, most real-world projects need more sophisticated pipelines. As your project grows, so should your CI/CD process. Extensions to your pipeline could help catch issues earlier, ensure quality standards, and provide better visibility into your development process.</p><p>Here are some valuable additions to consider:</p><h3 id="_1-running-database-migrations" tabindex="-1"><a class="header-anchor" href="#_1-running-database-migrations"><span>1. Running Database Migrations</span></a></h3><p>Database schema changes can be tricky to coordinate with code deployments. There are several approaches to handling this:</p><p><strong>Using EF Core Migration Bundles</strong>:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Create migration bundle</span>
<span class="line">  <span class="token key atrule">run</span><span class="token punctuation">:</span> dotnet ef migrations bundle <span class="token punctuation">-</span><span class="token punctuation">-</span>project $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.DATA_PROJECT <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>output $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.MIGRATIONS_BUNDLE <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Apply migrations</span>
<span class="line">  <span class="token key atrule">run</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.MIGRATIONS_BUNDLE <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)),s("p",null,[e(k,{to:"/milanjovanovic.tech/efcore-migrations-a-detailed-guide.html"},{default:t(()=>n[20]||(n[20]=[s("strong",null,"Migration bundles",-1)])),_:1,__:[20]}),n[21]||(n[21]=a(" (introduced in EF Core 6.0) package your migrations into a standalone executable, making them easier to run in deployment pipelines."))]),n[38]||(n[38]=o(`<p><strong>Adding Manual Review for Migrations</strong>:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">deploy-database</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy Database Changes</span>
<span class="line">  <span class="token key atrule">environment</span><span class="token punctuation">:</span> production</span>
<span class="line">  <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest</span>
<span class="line">  <span class="token key atrule">needs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>build<span class="token punctuation">-</span>and<span class="token punctuation">-</span>test<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This approach adds an environment with protection rules, requiring a DBA to review and approve migration scripts before they run. This is safer for production databases with valuable data.</p>`,3)),e(g,{data:[{id:"Pros"},{id:"Cons"}],active:0},{title0:t(({value:u,isActive:r})=>n[22]||(n[22]=[a("Pros")])),title1:t(({value:u,isActive:r})=>n[23]||(n[23]=[a("Cons")])),tab0:t(({value:u,isActive:r})=>n[24]||(n[24]=[s("ul",null,[s("li",null,"No manual migration steps"),s("li",null,"Schema and code changes deploy together"),s("li",null,"Database changes are versioned with code")],-1)])),tab1:t(({value:u,isActive:r})=>n[25]||(n[25]=[s("ul",null,[s("li",null,"Failed migrations can be hard to roll back"),s("li",null,"Might need extra handling for production data"),s("li",null,"Requires secure database credentials in CI")],-1)])),_:1}),n[39]||(n[39]=s("p",null,"To minimize risks, I test migrations in a staging environment first and always back up production databases before deployment.",-1)),n[40]||(n[40]=s("h3",{id:"_2-code-coverage-reports",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-code-coverage-reports"},[s("span",null,"2. Code Coverage Reports")])],-1)),s("p",null,[n[27]||(n[27]=a("I like knowing how much of my code is covered by tests. Here's an example of how to generate and publish code coverage reports to ")),s("a",N,[e(p,{icon:"fas fa-globe"}),n[26]||(n[26]=a("Codecov"))]),n[28]||(n[28]=a(":"))]),n[41]||(n[41]=o(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Generate coverage report</span>
<span class="line">  <span class="token key atrule">run</span><span class="token punctuation">:</span> dotnet test $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.SOLUTION_PATH <span class="token punctuation">}</span><span class="token punctuation">}</span> /p<span class="token punctuation">:</span>CollectCoverage=true /p<span class="token punctuation">:</span>CoverletOutputFormat=cobertura</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Publish coverage report</span>
<span class="line">  <span class="token key atrule">uses</span><span class="token punctuation">:</span> codecov/codecov<span class="token punctuation">-</span>action@v5</span>
<span class="line">  <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">files</span><span class="token punctuation">:</span> ./<span class="token important">**/coverage.cobertura.xml</span></span>
<span class="line">    <span class="token key atrule">fail_ci_if_error</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">    <span class="token key atrule">token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.CODECOV_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Adding minimum coverage requirements prevents drops in test coverage and encourages the team to maintain quality standards. You can also configure it to fail builds when coverage falls below a threshold.</p><h3 id="_3-multi-environment-deployment" tabindex="-1"><a class="header-anchor" href="#_3-multi-environment-deployment"><span>3. Multi-Environment Deployment</span></a></h3><p>For larger projects, deploying to multiple environments with approval gates provides better control:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">deploy-staging</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy to Staging</span>
<span class="line">  <span class="token key atrule">environment</span><span class="token punctuation">:</span> staging</span>
<span class="line">  <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest</span>
<span class="line">  <span class="token key atrule">needs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>build<span class="token punctuation">-</span>and<span class="token punctuation">-</span>test<span class="token punctuation">]</span></span>
<span class="line">  <span class="token key atrule">steps</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># Deployment steps...</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">deploy-production</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy to Production</span>
<span class="line">  <span class="token key atrule">environment</span><span class="token punctuation">:</span> production</span>
<span class="line">  <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest</span>
<span class="line">  <span class="token key atrule">needs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>deploy<span class="token punctuation">-</span>staging<span class="token punctuation">]</span></span>
<span class="line">  <span class="token key atrule">steps</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># Deployment steps...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Adding protection rules to your production environment creates checkpoints where team members can verify changes before they reach users.</p><p>Here&#39;s an example of some GitHub Environment protection rules:</p><ul><li><strong>Required reviewers</strong>: Specify team members who must approve deployments</li><li><strong>Wait timers</strong>: Add a delay before deployments to give time for review</li><li><strong>Deployment branches</strong>: Restrict which branches can deploy to production</li></ul><p>These guardrails are especially important for critical environments where downtime can be costly.</p><hr><h2 id="final-thoughts" tabindex="-1"><a class="header-anchor" href="#final-thoughts"><span>Final Thoughts</span></a></h2><p>A good CI/CD pipeline evolves with your project. Start simple, focus on automating the most painful manual tasks first, then gradually add more features as needed.</p><p>The initial setup takes time, but the long-term benefits are huge. My team now deploys multiple times per day instead of once every few weeks, with fewer bugs reaching production.</p>`,13)),s("p",null,[n[30]||(n[30]=a("If you want to learn more about building robust APIs that complement your CI/CD process, check out my ")),e(k,{to:"/milanjovanovic.tech/pragmatic-rest-apis/"},{default:t(()=>n[29]||(n[29]=[s("strong",null,"Pragmatic REST APIs",-1)])),_:1,__:[29]}),n[31]||(n[31]=a(" course. It covers designing, implementing, and deploying production-ready APIs with best practices that work perfectly with the deployment pipeline we've discussed here."))]),n[42]||(n[42]=s("p",null,"What's your CI/CD setup like? I'd love to hear how you've customized your workflows for .NET applications.",-1)),n[43]||(n[43]=s("hr",null,null,-1)),f(" TODO: add ARTICLE CARD "),e(c,d(m({title:"Streamlining .NET 9 Deployment With GitHub Actions and Azure",desc:"Build a robust, automated CI/CD pipeline for .NET 9 applications using GitHub Actions and Azure App Service to transform deployments from stressful events into reliable, repeatable processes.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/streamlining-dotnet-9-deployment-with-github-actions-and-azure.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const R=h(T,[["render",j]]),z=JSON.parse('{"path":"/milanjovanovic.tech/streamlining-dotnet-9-deployment-with-github-actions-and-azure.html","title":"Streamlining .NET 9 Deployment With GitHub Actions and Azure","lang":"en-US","frontmatter":{"lang":"en-US","title":"Streamlining .NET 9 Deployment With GitHub Actions and Azure","description":"Article(s) > Streamlining .NET 9 Deployment With GitHub Actions and Azure","icon":"iconfont icon-github","category":["DevOps","Github","Github Actions","Microsoft","Azure","Article(s)"],"tag":["blog","milanjovanovic.tech","devops","github","github-actions","microsoft","azure"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Streamlining .NET 9 Deployment With GitHub Actions and Azure\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_133/ci_cd_pipeline.png?imwidth=3840\\"],\\"datePublished\\":\\"2025-03-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/streamlining-dotnet-9-deployment-with-github-actions-and-azure.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Streamlining .NET 9 Deployment With GitHub Actions and Azure"}],["meta",{"property":"og:description","content":"Article(s) > Streamlining .NET 9 Deployment With GitHub Actions and Azure"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_133.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_133.png"}],["meta",{"name":"twitter:image:alt","content":"Streamlining .NET 9 Deployment With GitHub Actions and Azure"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"azure"}],["meta",{"property":"article:tag","content":"microsoft"}],["meta",{"property":"article:tag","content":"github-actions"}],["meta",{"property":"article:tag","content":"github"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-03-15T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Streamlining .NET 9 Deployment With GitHub Actions and Azure"},{"property":"og:description","content":"Streamlining .NET 9 Deployment With GitHub Actions and Azure"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/streamlining-dotnet-9-deployment-with-github-actions-and-azure.html"}]],"prev":"/devops/github/articles/README.md","date":"2025-03-15T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_133.png"},"git":{},"readingTime":{"minutes":5.51,"words":1652},"filePathRelative":"milanjovanovic.tech/streamlining-dotnet-9-deployment-with-github-actions-and-azure.md","copyright":{"author":"Milan Jovanović"}}');export{R as comp,z as data};
