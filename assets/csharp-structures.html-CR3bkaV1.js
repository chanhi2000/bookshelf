import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as n,f as a,b as g,a as b,t as v,n as c,g as r,w as e,e as o,r as i,o as f}from"./app-BVguHYKu.js";const y="/bookshelf/assets/image/code-maze.com/csharp-structures/10.1-Table-Structures.png",w="/bookshelf/assets/image/code-maze.com/csharp-structures/10-Structure_Initialization_Error.png",C={},S={id:"frontmatter-title-관련",tabindex:"-1"},z={class:"header-anchor",href:"#frontmatter-title-관련"},T={class:"table-of-contents"},I={class:"hint-container details"},_={class:"hint-container info"},x={href:"https://github.com/CodeMazeBlog/csharp-intermediate-module/tree/structures",target:"_blank",rel:"noopener noreferrer"};function A(u,s){const p=i("VPCard"),l=i("router-link"),d=i("SiteInfo"),t=i("RouteLink"),m=i("VPIcon");return f(),h("div",null,[n("h1",S,[n("a",z,[n("span",null,v(u.$frontmatter.title)+" 관련",1)])]),a(p,c(r({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",T,[n("ul",null,[n("li",null,[a(l,{to:"#working-with-structures"},{default:e(()=>s[0]||(s[0]=[o("Working with Structures")])),_:1,__:[0]})]),n("li",null,[a(l,{to:"#structure-declaration"},{default:e(()=>s[1]||(s[1]=[o("Structure Declaration")])),_:1,__:[1]})]),n("li",null,[a(l,{to:"#differences-between-classes-and-structures"},{default:e(()=>s[2]||(s[2]=[o("Differences Between Classes and Structures")])),_:1,__:[2]})]),n("li",null,[a(l,{to:"#when-to-use-structure-instead-of-a-class"},{default:e(()=>s[3]||(s[3]=[o("When to Use Structure Instead of a Class")])),_:1,__:[3]})]),n("li",null,[a(l,{to:"#conclusion"},{default:e(()=>s[4]||(s[4]=[o("Conclusion")])),_:1,__:[4]})])])]),s[34]||(s[34]=n("hr",null,null,-1)),a(d,{name:"C# Intermediate - Structures",desc:"We are going to learn about Structures in C#, how to use them, what are the constraints, and when to use structs instead of a classes.",url:"https://code-maze.com/csharp-structures/",logo:"/assets/image/code-maze.com/favicon.png",preview:"/assets/image/csharp-structures/banner.png"}),s[35]||(s[35]=n("p",null,"In the previous articles, we have learned about classes, how to use them and how to create an object as an instance of a class. In this article, we are going to talk about structures that are similar to classes but have some differences as well.",-1)),n("details",I,[s[18]||(s[18]=n("summary",null,"This article is part of the series",-1)),n("ul",null,[n("li",null,[a(t,{to:"/code-maze.com/csharp-classes-constructors.html"},{default:e(()=>s[5]||(s[5]=[n("strong",null,"Classes and Constructors",-1)])),_:1,__:[5]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-properties.html"},{default:e(()=>s[6]||(s[6]=[n("strong",null,"Properties",-1)])),_:1,__:[6]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-static-members-constants-extension-methods.html"},{default:e(()=>s[7]||(s[7]=[n("strong",null,"Static Members, Constants, and Extension Methods",-1)])),_:1,__:[7]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-anonymous-nullable-types.html"},{default:e(()=>s[8]||(s[8]=[n("strong",null,"Anonymous and Nullable Types",-1)])),_:1,__:[8]})]),s[17]||(s[17]=n("li",null,"Structures (Current article)",-1)),n("li",null,[a(t,{to:"/code-maze.com/csharp-enumerations.html"},{default:e(()=>s[9]||(s[9]=[n("strong",null,"Enumerations",-1)])),_:1,__:[9]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-inheritance.html"},{default:e(()=>s[10]||(s[10]=[n("strong",null,"Inheritance",-1)])),_:1,__:[10]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-interfaces.html"},{default:e(()=>s[11]||(s[11]=[n("strong",null,"Interfaces",-1)])),_:1,__:[11]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-abstract-classes.html"},{default:e(()=>s[12]||(s[12]=[n("strong",null,"Abstract Classes",-1)])),_:1,__:[12]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-generics.html"},{default:e(()=>s[13]||(s[13]=[n("strong",null,"Generics",-1)])),_:1,__:[13]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-queue-stack-hashtable.html"},{default:e(()=>s[14]||(s[14]=[n("strong",null,"Queue, Stack, Hashtable",-1)])),_:1,__:[14]})]),n("li",null,[a(t,{to:"/code-maze.com/cshart-generic-list-dictionary.html"},{default:e(()=>s[15]||(s[15]=[n("strong",null,"Generic List and Dictionary",-1)])),_:1,__:[15]})]),n("li",null,[a(t,{to:"/code-maze.com/csharp-delegates.html"},{default:e(()=>s[16]||(s[16]=[n("strong",null,"Delegates",-1)])),_:1,__:[16]})])])]),n("p",null,[s[20]||(s[20]=o("If you want to see the complete navigation of this tutorial, you can do that here ")),a(t,{to:"/code-maze.com/csharp-intermediate-tutorial-oop.html"},{default:e(()=>s[19]||(s[19]=[n("strong",null,"C# Intermediate Tutorial",-1)])),_:1,__:[19]}),s[21]||(s[21]=o("."))]),n("div",_,[s[27]||(s[27]=n("p",{class:"hint-container-title"},"Info",-1)),n("p",null,[s[25]||(s[25]=o("To download the source code, you can visit ")),n("a",x,[s[22]||(s[22]=o("Structures in C# Source Code (")),a(m,{icon:"iconfont icon-github"}),s[23]||(s[23]=n("code",null,"CodeMazeBlog/csharp-intermediate-module",-1)),s[24]||(s[24]=o(")"))]),s[26]||(s[26]=o("."))])]),s[36]||(s[36]=n("hr",null,null,-1)),s[37]||(s[37]=n("h2",{id:"working-with-structures",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#working-with-structures"},[n("span",null,"Working with Structures")])],-1)),s[38]||(s[38]=n("p",null,"A structure is a value type, in the opposite of a class which is a reference type, and it has its own fields, methods, and constructors like a class.",-1)),n("p",null,[s[29]||(s[29]=o("Maybe you didn’t realize, but we have worked with structures in our previous articles, especially in ")),a(t,{to:"/code-maze.com/csharp-back-to-basics.html"},{default:e(()=>s[28]||(s[28]=[n("strong",null,"module 1 C# basics",-1)])),_:1,__:[28]}),s[30]||(s[30]=o(". Int, double, decimal, bool type etc. are all aliases for the structures System.Int32, System.Int64 etc. In a table below, we can see the primitive types and what are they built from (class or structure):"))]),s[39]||(s[39]=g('<figure><img src="'+y+`" alt="Table - Structures in C#" tabindex="0" loading="lazy"><figcaption>Table - Structures in C#</figcaption></figure><hr><h2 id="structure-declaration" tabindex="-1"><a class="header-anchor" href="#structure-declaration"><span>Structure Declaration</span></a></h2><p>To declare our own structure, we need to use the <code>struct</code> keyword followed by the name of the type and then the body of the structure between two curly braces:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">Time</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _hours<span class="token punctuation">,</span> _minutes<span class="token punctuation">,</span> _seconds<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can create our own constructor to initialize our private fields:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">Time</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _hours<span class="token punctuation">,</span> _minutes<span class="token punctuation">,</span> _seconds<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">Time</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> hours<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> minutes<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> seconds<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _hours <span class="token operator">=</span> hours<span class="token punctuation">;</span></span>
<span class="line">        _minutes <span class="token operator">=</span> minutes<span class="token punctuation">;</span></span>
<span class="line">        _seconds <span class="token operator">=</span> seconds<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Hours: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_hours</span><span class="token punctuation">}</span></span><span class="token string">, Minutes: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_minutes</span><span class="token punctuation">}</span></span><span class="token string">, Seconds: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_seconds</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To access our structure we can use this syntax:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Time</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Time</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    time<span class="token punctuation">.</span><span class="token function">PrintTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="differences-between-classes-and-structures" tabindex="-1"><a class="header-anchor" href="#differences-between-classes-and-structures"><span>Differences Between Classes and Structures</span></a></h2><ul><li>The structure is a value type, while the class is a reference type</li><li>We <strong>can’t</strong> declare our own default constructor in a structure. That’s because a structure is always generating a default constructor for us. In a class, we <strong>can</strong> create a default constructor because a class won’t generate one for us</li><li>We can initialize fields in our structure by creating a non-default constructor, but we must initialize all of the fields inside that constructor (Before C# 11). It is not allowed to leave a single field without a value:</li></ul><figure><img src="`+w+`" alt="Error - Structures in C#" tabindex="0" loading="lazy"><figcaption>Error - Structures in C#</figcaption></figure><p>But, from C# 11 the situation is a bit different. The C# 11 compiler ensures that all fields of a struct type are initialized to their default value as part of executing a constructor. This change means any field or auto property not initialized by a constructor is automatically initialized by the compiler.</p><ul><li>An instance of a class lives on a heap memory while the instance of a structure lives on a stack</li><li>In a structure, we can create a non-default constructor, but nevertheless, the compiler will always generate the default one. This is not the case with a class.</li></ul><hr><h2 id="when-to-use-structure-instead-of-a-class" tabindex="-1"><a class="header-anchor" href="#when-to-use-structure-instead-of-a-class"><span>When to Use Structure Instead of a Class</span></a></h2><p>The general rule that we can follow is that our structures need to be small and simple types and above all immutable. For anything else, we should use a class.</p><p>Why is immutability so important?</p><p>Well let’s take a look at this example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Test</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Number <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> number<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Number <span class="token operator">=</span> number<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Program</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">ChangeNumber</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ChangeNumber</span><span class="token punctuation">(</span><span class="token class-name">Test</span> test<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        test<span class="token punctuation">.</span>Number <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we inspect the result, we will see printed out 10 and 45. And that is the correct result. But if we change our Test class to be a structure and then inspect the result, we will see 10 and 10. This can lead to confusion and problems as well, because the consumer may expect that the <code>ChangeNumber</code> method would modify the <code>Number</code> property because we allowed it in the code. But if we create properties or fields immutably (as read-only in a structure) then we can avoid this kind of confusion. The consumer can assign values to the properties by calling the constructor method but after that those properties need to stay immutable.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, we have learned:</p><ul><li>What structures in C# are and how to create them</li><li>About structures limitations</li><li>When to use structures in your C# code</li></ul>`,26)),n("p",null,[s[32]||(s[32]=o("In the next article, we are going to talk about ")),a(t,{to:"/code-maze.com/csharp-enumerations.html"},{default:e(()=>s[31]||(s[31]=[n("strong",null,"Enumerations in C#",-1)])),_:1,__:[31]}),s[33]||(s[33]=o("."))]),b(" TODO: add ARTICLE CARD "),a(p,c(r({title:"C# Intermediate - Structures",desc:"We are going to learn about Structures in C#, how to use them, what are the constraints, and when to use structs instead of a classes.",link:"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-structures.html",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16)])}const M=k(C,[["render",A]]),E=JSON.parse('{"path":"/code-maze.com/csharp-structures.html","title":"C# Intermediate - Structures","lang":"en-US","frontmatter":{"lang":"en-US","title":"C# Intermediate - Structures","description":"Article(s) > C# Intermediate - Structures","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","code-maze.com","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C# Intermediate - Structures\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-structures/10.1-Table-Structures.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-structures/10-Structure_Initialization_Error.png\\"],\\"datePublished\\":\\"2018-10-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marinko Spasojević\\",\\"url\\":\\"https://code-maze.com/author/marinko/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-structures.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"C# Intermediate - Structures"}],["meta",{"property":"og:description","content":"Article(s) > C# Intermediate - Structures"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-structures/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-structures/banner.png"}],["meta",{"name":"twitter:image:alt","content":"C# Intermediate - Structures"}],["meta",{"property":"article:author","content":"Marinko Spasojević"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2018-10-03T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > C# Intermediate - Structures"},{"property":"og:description","content":"C# Intermediate - Structures"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-structures.html"}]],"prev":"/programming/cs/articles/README.md","date":"2018-10-03T00:00:00.000Z","isOriginal":false,"author":[{"name":"Marinko Spasojević","url":"https://code-maze.com/author/marinko/"}],"cover":"/assets/image/code-maze.com/csharp-structures/banner.png"},"git":{},"readingTime":{"minutes":3.51,"words":1052},"filePathRelative":"code-maze.com/csharp-structures.md","copyright":{"author":"Marinko Spasojević"}}');export{M as comp,E as data};
