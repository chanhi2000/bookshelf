import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as l,b as a,t as k,n as b,g as f,w as o,e,r,o as v}from"./app-BVguHYKu.js";const y={},j={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},z={class:"table-of-contents"},E={href:"https://github.com/aquasecurity/trivy",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/madler/zlib/pull/843",target:"_blank",rel:"noopener noreferrer"},c={class:"hint-container note"},B={href:"http://gcr.io/distroless/java21-debian12",target:"_blank",rel:"noopener noreferrer"},A={href:"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-35937",target:"_blank",rel:"noopener noreferrer"},C={href:"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-35937",target:"_blank",rel:"noopener noreferrer"},R={href:"https://chainguard.dev",target:"_blank",rel:"noopener noreferrer"},q={href:"https://aws.amazon.com/ko/blogs/tech/amazon-corretto-base-container-diet/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://wishket-team.notion.site/02d7c1eff70d44d689c7a12b8f3aae30?pvs=4",target:"_blank",rel:"noopener noreferrer"},V={href:"https://wishket-team.notion.site/02d7c1eff70d44d689c7a12b8f3aae30?pvs=4",target:"_blank",rel:"noopener noreferrer"};function I(p,n){const d=r("VPCard"),i=r("router-link"),m=r("SiteInfo"),t=r("VPIcon");return v(),g("div",null,[s("h1",j,[s("a",w,[s("span",null,k(p.$frontmatter.title)+" 관련",1)])]),l(d,b(f({title:"Docker > Article(s)",desc:"Article(s)",link:"/devops/docker/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",z,[s("ul",null,[s("li",null,[l(i,{to:"#디스트로리스-distroless-이미지의-주요-2가지-이점"},{default:o(()=>n[0]||(n[0]=[e("디스트로리스(Distroless) 이미지의 주요 2가지 이점")])),_:1,__:[0]})]),s("li",null,[l(i,{to:"#일반-openjdk-이미지와-디스트로리스-형태의-openjdk-이미지를-사용한-빌드-비교"},{default:o(()=>n[1]||(n[1]=[e("일반 openjdk 이미지와 디스트로리스 형태의 openjdk 이미지를 사용한 빌드 비교")])),_:1,__:[1]})]),s("li",null,[l(i,{to:"#일반-openjdk-이미지와-디스트로리스-형태의-openjdk-이미지-구성-비교"},{default:o(()=>n[2]||(n[2]=[e("일반 openjdk 이미지와 디스트로리스 형태의 openjdk 이미지 구성 비교")])),_:1,__:[2]})]),s("li",null,[l(i,{to:"#디스트로리스-이미지의-현재와-미래"},{default:o(()=>n[3]||(n[3]=[e("디스트로리스 이미지의 현재와 미래")])),_:1,__:[3]})]),s("li",null,[l(i,{to:"#마치며"},{default:o(()=>n[4]||(n[4]=[e("마치며")])),_:1,__:[4]})]),s("li",null,[l(i,{to:"#참고"},{default:o(()=>n[5]||(n[5]=[e("참고")])),_:1,__:[5]})])])]),n[149]||(n[149]=s("hr",null,null,-1)),l(m,{name:"비용&보안 두 마리 토끼 잡는 디스트로리스 이미지 이용법 | 요즘IT",desc:"애플리케이션 현대화에 따라 컨테이너 기반의 마이크로서비스 아키텍처가 많은 부분에서 적용되고 있습니다. 이러한 기반 아키텍처는 컨테이너를 기반으로 한 배포 파이프라인이 필요한 경우가 많습니다. 그리고 이러한 배포 파이프라인으로 전달되는 최종 결과물은 컨테이너 이미지이며, 이 결과물을 어떻게 만들어 내는가에 따라서 효율적인 파이프라인을 가지고 있다와 아니다를 말할 수 있습니다. 하지만 우리가 여기서 중요하게 봐야 하는 또 다른 지점이 있는데, 바로 파이프라인등을 통해서 컨테이너가 빌드될 때 컨테이너의 용량을 줄이는 것입니다.",url:"https://yozm.wishket.com/magazine/detail/2527/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/2425/%EA%B7%B8%EB%A6%BC2.png"}),n[150]||(n[150]=a('<p>애플리케이션 현대화에 따라 컨테이너 기반의 마이크로서비스 아키텍처가 많은 부분에서 적용되고 있습니다. 이러한 기반 아키텍처는 컨테이너를 기반으로 한 배포 파이프라인이 필요한 경우가 많습니다. 그리고 이러한 배포 파이프라인으로 전달되는 최종 결과물은 컨테이너 이미지이며, 이 결과물을 어떻게 만들어 내는가에 따라서 효율적인 파이프라인을 가지고 있다와 아니다를 말할 수 있습니다. 하지만 우리가 여기서 중요하게 봐야 하는 또 다른 지점이 있는데, 바로 파이프라인등을 통해서 컨테이너가 빌드될 때 컨테이너의 용량을 줄이는 것입니다.</p><p>컨테이너의 용량을 줄이는 것은 다음의 주요 2가지 이점이 있습니다.</p><ol><li><strong>총비용 감소</strong>: 컨테이너 빌드, 구동 그리고 운영에 필요한 리소스를 줄여서 결과적으로 비용이 감소됨</li><li><strong>보안적인 측면</strong>: 용량을 줄이는 과정에서 패키지를 최소화함으로써 공격받을 지점이 줄어듦</li></ol><p>이렇게 컨테이너 이미지 용량을 줄이는 방법들은 여러 가지가 있지만, 그중에 가장 효과적인 방법은 컨테이너 빌드를 위해서 사용하는 기초 이미지를 <strong>디스트로리스(Distroless) 이미지</strong>로 사용하는 것입니다.</p><p>디스트로리스 이미지는 리눅스 배포판에서 포함되어 배포되는 패키지 매니저, 셸(Shell), 기타 관리 프로그램 등이 포함되어 있지 않고 오직 애플리케이션이 동작하기 위한 런타임 관련 내용만이 포함됩니다. 따라서 대부분의 디스트로리스 이미지는 배포판의 이미지보다 훨씬 적은 이미지 용량을 가지고 있습니다.</p><hr><h2 id="디스트로리스-distroless-이미지의-주요-2가지-이점" tabindex="-1"><a class="header-anchor" href="#디스트로리스-distroless-이미지의-주요-2가지-이점"><span>디스트로리스(Distroless) 이미지의 주요 2가지 이점</span></a></h2><p>디스트로리스 이미지는 위에 설명했던 것처럼 애플리케이션을 구동할 수 있는 최소한의 환경만을 가지는 이미지입니다. 그렇다면 과연 디스트로리스 이미지가 일반 이미지에 비해 얼마나 용량이 더 작은지를 확인해 보도록 하겠습니다.</p>',8)),s("p",null,[n[6]||(n[6]=e(".")),l(t,{icon:"fa-brands fa-docker"}),n[7]||(n[7]=s("code",null,"openjdk:21",-1)),n[8]||(n[8]=e(" 이미지와 구글 컨테이너 도구들(GoogleContainerTools)에서 제공하는 디스트로리스 이미지 중에서 ")),l(t,{icon:"fa-brands fa-docker"}),n[9]||(n[9]=s("code",null,"gcr.io/distroless/java21-debian12",-1)),n[10]||(n[10]=e("를 이용해서 용량을 비교해 보겠습니다."))]),n[151]||(n[151]=a(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> images</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("figure",null,[n[15]||(n[15]=s("img",{src:"https://yozm.wishket.com/media/news/2527/1.png",alt:'<VPIcon icon="fa-brands fa-docker"/>과 <VPIcon icon="fa-brands fa-docker"/> 이미지의 용량 비교',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[l(t,{icon:"fa-brands fa-docker"}),n[11]||(n[11]=s("code",null,"openjdk:21",-1)),n[12]||(n[12]=e("과 ")),l(t,{icon:"fa-brands fa-docker"}),n[13]||(n[13]=s("code",null,"gcr.io/distroless/java21-debian12",-1)),n[14]||(n[14]=e(" 이미지의 용량 비교"))])]),s("p",null,[n[16]||(n[16]=e(".")),l(t,{icon:"fa-brands fa-docker"}),n[17]||(n[17]=s("code",null,"openjdk:21",-1)),n[18]||(n[18]=e(" 이미지는 504MB, ")),l(t,{icon:"fa-brands fa-docker"}),n[19]||(n[19]=s("code",null,"gcr.io/distroless/java21-debian12",-1)),n[20]||(n[20]=e(" 이미지는 191MB로 313MB의 용량 차이가 있습니다. 이 차이는 크지 않은 것 같지만, 이 이미지를 이용하는 컨테이너의 개수가 많아지면 많아질수록 누적해서 늘어나게 될 것입니다. 따라서 이 용량을 최소화 시키는 것은 매우 중요한 부분입니다."))]),s("p",null,[n[22]||(n[22]=e("이번에는 보안 관점에서 컨테이너 이미지를 살펴보겠습니다. 이를 위해서 CNCF(Cloud Native Computing Foundation, 클라우드 네이티브 컴퓨팅 재단)의 랜드스케이프에서 확인되는 보안 스캔 도구 중에 trivy를 사용하도록 하겠습니다. ")),s("a",E,[l(t,{icon:"iconfont icon-github"}),n[21]||(n[21]=s("code",null,"aquasecurity/trivy",-1))]),n[23]||(n[23]=e("는 컨테이너 이미지 취약점 검증 도구로써, 컨테이너 이미지 취약점 검증 이외에 도커(Docker), 테라폼(Terraform)등에 대한 파일 검증도 수행이 가능합니다. NSA(National Security Agency)와 FIPS(Federal Information Processing Standards) 등의 기준에 맞게 보안 검증을 진행합니다. 그러면 이제 trivy를 통해 일반컨테이너 이미지와 디스트로리스 이미지를 각각 스캔해 보도록 하겠습니다."))]),s("figure",null,[n[26]||(n[26]=s("img",{src:"https://yozm.wishket.com/media/news/2527/2.png",alt:'<VPIcon icon="fa-brands fa-docker"/>의 취약점 점검 결과',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[l(t,{icon:"fa-brands fa-docker"}),n[24]||(n[24]=s("code",null,"openjdk:21",-1)),n[25]||(n[25]=e("의 취약점 점검 결과"))])]),s("figure",null,[n[29]||(n[29]=s("img",{src:"https://yozm.wishket.com/media/news/2527/3.png",alt:'<VPIcon icon="fa-brands fa-docker"/>의 취약점 점검 결과',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[l(t,{icon:"fa-brands fa-docker"}),n[27]||(n[27]=s("code",null,"gcr.io/distroless/java21-debian12",-1)),n[28]||(n[28]=e("의 취약점 점검 결과"))])]),s("p",null,[n[31]||(n[31]=e("취약점을 검증한 결과 이미지의 용량이 월등하게 큰 openjdk:21의 이미지가 ")),l(t,{icon:"fa-brands fa-docker"}),n[32]||(n[32]=s("code",null,"gcr.io/distroless/java21-debian12",-1)),n[33]||(n[33]=e(" 이미지에 비해 보안 상으로 취약한 요소들이 많은 것으로 확인되었습니다. (디스트로리스 이미지에 있는 CRITICAL은 MiniZip 관련 이슈로 Zlib 1.3.1에서 해결되었지만 아직 적용되지 않은 것으로 보입니다. 상세 내용은 ")),s("a",x,[l(t,{icon:"fas fa-globe"}),n[30]||(n[30]=e("다음"))]),n[34]||(n[34]=e("을 참고하세요.) 그 외에 전반적인 모든 취약점 검증 내용은 끝에 표로 정리해 두었으니 해당 내용을 살펴보시기 바랍니다."))]),n[152]||(n[152]=s("p",null,"디스트로리스 이미지가 어떻게 용량을 줄이는 이미지가 될 수 있었는지 직접 해당 이미지의 내부를 탐색하고 제공하는 기능들을 살펴봄으로써 이해를 높이도록 하겠습니다.",-1)),n[153]||(n[153]=s("hr",null,null,-1)),n[154]||(n[154]=s("h2",{id:"일반-openjdk-이미지와-디스트로리스-형태의-openjdk-이미지를-사용한-빌드-비교",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#일반-openjdk-이미지와-디스트로리스-형태의-openjdk-이미지를-사용한-빌드-비교"},[s("span",null,"일반 openjdk 이미지와 디스트로리스 형태의 openjdk 이미지를 사용한 빌드 비교")])],-1)),n[155]||(n[155]=s("p",null,"빌드는 여러 가지 방법이 있지만 개발 도구가 설치되어 있지 않은 디스트로리스 이미지를 사용한 빌드 결과물을 비교하려면 멀티 스테이지 빌드를 사용해야 합니다. 일반적인 빌드 방식과 멀티 스테이지 빌드 방식을 그림을 통해 구조를 간단히 알아봅니다.",-1)),n[156]||(n[156]=s("figure",null,[s("img",{src:"https://yozm.wishket.com/media/news/2527/4.png",alt:"빌드 방식 비교(출처: 작가)",tabindex:"0",loading:"lazy"}),s("figcaption",null,"빌드 방식 비교(출처: 작가)")],-1)),s("p",null,[n[35]||(n[35]=e("일반적인 빌드 방식에서는 openjdk:21 이미지를 사용하고, 멀티 스테이지 빌드 방식에서는 첫 번째 단계에서 ")),l(t,{icon:"fa-brands fa-docker"}),n[36]||(n[36]=s("code",null,"openjdk:21",-1)),n[37]||(n[37]=e("(이하 openjdk) 이미지를 사용한 후 두 번째 단계에서 ")),l(t,{icon:"fa-brands fa-docker"}),n[38]||(n[38]=s("code",null,"gcr.io/distroless/java21-debian12",-1)),n[39]||(n[39]=e("(이하 디스트로리스) 이미지를 사용합니다. openjdk 이미지는 자바 소스 코드를 빌드해 패키지를 만드는 데 필요한 도구와 해당 패키지를 실행하는 도구가 모두 포함되어 있고, 디스트로리스 이미지는 자바 패키지를 실행하는 데 필요한 도구만 포함되어 있다는 차이가 있습니다. 이러한 차이로 인하여 디스트로리스 이미지는 openjdk 이미지보다 용량이 작으며 첫 번째 단계에서 빌드한 패키지를 두 번째 단계로 복사하여 사용하는 멀티 스테이지 방식의 최종 이미지 용량이 더 작습니다."))]),s("p",null,[n[40]||(n[40]=e("이렇듯 멀티 스테이지 빌드 방식을 이용하면 컨테이너 기반의 편리한 빌드 환경과 가벼운 최종 이미지 두 가지 장점을 모두 살릴 수 있습니다. 실제 ")),l(t,{icon:"fa-brands fa-docker"}),n[41]||(n[41]=s("code",null,"Dockerfile",-1)),n[42]||(n[42]=e(" 을 살펴보며 멀티 스테이지 방식을 자세히 알아보겠습니다. 두 가지 경우의 ")),l(t,{icon:"fa-brands fa-docker"}),n[43]||(n[43]=s("code",null,"Dockerfile",-1)),n[44]||(n[44]=e(" 및 빌드 실행 결과를 살펴보며 자세히 알아보도록 하겠습니다."))]),s("p",null,[n[45]||(n[45]=e("먼저 멀티 스테이지 빌드를 사용하지 않는 경우의 ")),l(t,{icon:"fa-brands fa-docker"}),n[46]||(n[46]=s("code",null,"Dockerfile",-1)),n[47]||(n[47]=e("입니다."))]),n[157]||(n[157]=a(`<div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> openjdk:21</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">LABEL</span> description=<span class="token string">&quot;Echo IP Java Application&quot;</span></span></span>
<span class="line"><span class="token instruction"><span class="token keyword">EXPOSE</span> 80</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> microdnf install git &amp;&amp; git clone https://github.com/iac-sources/inbuilder.git</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> inbuilder</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> chmod 700 mvnw <span class="token operator">\\</span></span>
<span class="line">  &amp;&amp; ./mvnw clean package <span class="token operator">\\</span></span>
<span class="line">  &amp;&amp; mv target/app-in-host.jar /opt/app-in-image.jar</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /opt</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [ <span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;-jar&quot;</span>, <span class="token string">&quot;app-in-image.jar&quot;</span>  ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[48]||(n[48]=e("기반 이미지로 ")),l(t,{icon:"fa-brands fa-docker"}),n[49]||(n[49]=s("code",null,"openjdk:21",-1)),n[50]||(n[50]=e(" 이미지를 사용하면서 소스 코드를 내려 받는데 필요한 ")),n[51]||(n[51]=s("code",null,"git",-1)),n[52]||(n[52]=e("까지 설치한 후 메이븐을 이용하여 자바 소스 코드를 빌드하여 ")),l(t,{icon:"fa-brands fa-java"}),n[53]||(n[53]=s("code",null,"app-in-image.jar",-1)),n[54]||(n[54]=e("패키지 파일을 만든 후 해당 파일을 컨테이너 내부에서 실행합니다. 이러한 빌드 방식은 별도의 빌드 환경 구축 없이 컨테이너 내부에서 편리하게 빌드할 수 있다는 장점을 가지지만 기반 이미지의 용량이 크고 설치한 추가 도구와 빌드 과정에서 내려 받는 파일들의 용량까지 최종 이미지에 반영되는 단점이 있습니다."))]),s("p",null,[n[55]||(n[55]=e("그럼 멀티 스테이지 빌드에서 사용하는 ")),l(t,{icon:"fa-brands fa-docker"}),n[56]||(n[56]=s("code",null,"Dockerfile",-1)),n[57]||(n[57]=e(" 을 살펴 보겠습니다."))]),n[158]||(n[158]=a(`<div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> openjdk:21 <span class="token keyword">AS</span> int-build</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> microdnf install git &amp;&amp; git clone https://github.com/iac-sources/inbuilder.git</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> inbuilder</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> chmod 700 mvnw <span class="token operator">\\</span></span>
<span class="line">  &amp;&amp; ./mvnw clean package</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">FROM</span> gcr.io/distroless/java21-debian12</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">LABEL</span> description=<span class="token string">&quot;Echo IP Java Application&quot;</span></span></span>
<span class="line"><span class="token instruction"><span class="token keyword">EXPOSE</span> 80</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">int-build</span></span> inbuilder/target/app-in-host.jar /opt/app-in-image.jar</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /opt</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [ <span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;-jar&quot;</span>, <span class="token string">&quot;app-in-image.jar&quot;</span>  ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>첫 번째 단계에서 자바 소스 코드를 빌드하여 패키지를 만드는 과정은 일반적인 빌드 과정과 동일합니다. 그렇지만 두 번째 단계에서 첫 번째 단계 중 생성한 app-in-image.jar 파일을 복사하여 실행하는 것을 볼 수 있습니다. 이러한 과정을 통해 컨테이너 기반의 빌드 환경의 장점은 유지하면서 최종 이미지의 용량은 작게 하는 디스트로리스 이미지의 장점까지 추가로 가질 수 있습니다.</p>`,2)),s("p",null,[n[58]||(n[58]=e("실제로 openjdk 이미지와 디스트로리스 이미지를 만들어 본 후 용량을 비교해 보겠습니다. 아래의 명령을 실행하여 ")),l(t,{icon:"fas fa-folder-open"}),n[59]||(n[59]=s("code",null,"openjdk-dockerfile",-1)),n[60]||(n[60]=e(" 디렉터리와 ")),l(t,{icon:"fas fa-folder-open"}),n[61]||(n[61]=s("code",null,"distroless-dockerfile",-1)),n[62]||(n[62]=e(" 디렉터리를 만들고, openjdk 이미지를 빌드하는 ")),l(t,{icon:"fa-brands fa-docker"}),n[63]||(n[63]=s("code",null,"Dockerfile",-1)),n[64]||(n[64]=e("과 디스트로리스 이미지를 빌드하는 ")),l(t,{icon:"fa-brands fa-docker"}),n[65]||(n[65]=s("code",null,"Dockerfile",-1)),n[66]||(n[66]=e("을 생성한 후 확인합니다. ")),l(t,{icon:"fas fa-terminal"}),n[67]||(n[67]=s("code",null,"cat <<EOF>> [파일이름] [파일내용] EOF",-1)),n[68]||(n[68]=e(" 구문을 사용하면 EOF 위 줄까지 내용을 파일로 생성할 수 있습니다."))]),n[159]||(n[159]=s("figure",null,[s("img",{src:"https://yozm.wishket.com/media/news/2527/7.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),s("p",null,[n[69]||(n[69]=e(".")),l(t,{icon:"fa-brands fa-docker"}),n[70]||(n[70]=s("code",null,"Dockerfile",-1)),n[71]||(n[71]=e(" 생성을 확인하였으니 생성한 디렉터리로 이동하여 openjdk 이미지와 디스트로리스 이미지를 기반으로 하는 애플리케이션 이미지들을 생성해봅시다. 먼저 openjdk 이미지를 기반으로 하는 이미지를 생성합니다."))]),n[160]||(n[160]=s("figure",null,[s("img",{src:"https://yozm.wishket.com/media/news/2527/8.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),s("p",null,[n[72]||(n[72]=e("디스트로리스 기반의 이미지를 만들기 위한 ")),l(t,{icon:"fa-brands fa-docker"}),n[73]||(n[73]=s("code",null,"Dockerfile",-1)),n[74]||(n[74]=e("이 있는 디렉터리로 이동해 이미지를 생성합니다."))]),n[161]||(n[161]=s("figure",null,[s("img",{src:"https://yozm.wishket.com/media/news/2527/스크린샷_2024-04-01_오후_6_17_33.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),s("p",null,[n[75]||(n[75]=e("이미지 생성 작업을 마쳤으니 ")),l(t,{icon:"fa-brands fa-docker"}),n[76]||(n[76]=s("code",null,"Dockerfile",-1)),n[77]||(n[77]=e("이 있는 디렉터리에서 빠져나와 홈 디렉터리로 이동한 후 두 경우의 최종 이미지 용량을 비교하면 아래와 같이 멀티 스테이지 빌드를 통해 디스트로리스 이미지를 사용한 경우 용량이 현저히 줄어듦을 알 수 있습니다."))]),n[162]||(n[162]=s("figure",null,[s("img",{src:"https://yozm.wishket.com/media/news/2527/10.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),s("div",c,[n[81]||(n[81]=s("p",{class:"hint-container-title"},"비지박스(Busybox), 알파인(Alpine) 그리고 디스트로리스에 대한 구분점",-1)),n[82]||(n[82]=s("p",null,"디스트로리스 이미지가 다른 이미지에 비해 가벼운 이미지라고 말씀드렸습니다. 그런데 가벼운 컨테이너 이미지를 알아볼 때 많이 언급되는 다른 이미지가 있습니다. 즉 비지박스와 알파인 이미지입니다. 이것들의 특징에 대해서 알아보도록 하겠습니다.",-1)),n[83]||(n[83]=s("p",null,"먼저 아래의 그림을 통해 세 가지를 한 눈에 알아봅시다.",-1)),n[84]||(n[84]=s("figure",null,[s("img",{src:"https://yozm.wishket.com/media/news/2527/11.png",alt:"비지박스, 알파인, 디스트로리스의 내부 비교",tabindex:"0",loading:"lazy"}),s("figcaption",null,"비지박스, 알파인, 디스트로리스의 내부 비교")],-1)),s("p",null,[n[78]||(n[78]=a("<strong>비지박스</strong>는 350개 이상의 리눅스 명령어를 내장하고 있는 매우 가벼운 단일 실행 파일입니다. <code>cd</code>, <code>ls</code>, <code>rm</code> 등의 기본 리눅스 명령어 뿐 아니라 <code>unzip</code>, <code>tar</code>, <code>telnet</code> 등과 같은 유용한 명령어들을 내장하고 있어 ",14)),l(t,{icon:"fas fa-terminal"}),n[79]||(n[79]=s("code",null,"busybox <명령어>",-1)),n[80]||(n[80]=e(" 와 같은 형식으로 다양한 명령어를 호출할 수 있습니다. 이러한 특징 때문에 비지박스는 임베디드 리눅스를 위한 스위스 군용 칼이란 별명으로 불리며 수많은 임베디드 기기에 내장되어 있습니다. 컨테이너 기반 시스템에서는 컨테이너 내부에서 디버깅이 필요할 때 비지박스 이미지를 이용해 각종 리눅스 명령어를 수행합니다."))]),n[85]||(n[85]=a('<p><strong>알파인 리눅스</strong>는 가벼운 리눅스 배포판으로 유명합니다. 각종 기본 명령어를 직접 내장하지 않고 비지박스를 사용하여 용량을 줄였으며 바이너리를 실행하기 위해 필요한 C언어 라이브러리를 musl libc라는 가벼운 라이브러리로 사용하였습니다. 또한 사용자가 별도의 프로그램을 추가할 수 있도록 <code>apk-tools</code>라는 패키지 관리자를 추가하여 가벼운 용량이지만 일반적인 리눅스 사용을 가능하도록 만들었습니다. 알파인 리눅스는 범용 사용 환경이 필요하면서 용량도 가벼워야 하는 경우에 많이 사용합니다. 알파인 리눅스의 컨테이너 이미지는 3MB내외의 용량 밖에 차지하지 않으며, 알파인 리눅스를 기반으로 애플리케이션 실행 환경이 필요하면 apk 명령어를 사용하여 내부에 각종 언어의 실행 환경을 설치하여 사용할 수 있습니다. 다만 알파인 리눅스의 특징인 musl libc로 인해 호환이 되지 않는 도구가 있을 수 있어 주의가 필요합니다.</p><p><strong>디스트로리스</strong>는 앞에서 설명한 것들과 달리 애플리케이션의 실행에만 집중합니다. 디스트로리스 이미지는 리눅스의 핵심 기능만 최소한으로 포함하는 스태틱 데비안(Static Debian)이라는 가벼운 이미지를 기반으로 하고 있으며 자바 실행 환경 또한 개발에 필요한 기능을 배제하고 실행에 필요한 최소한의 기능만을 가집니다. 그래서 개발 도구나 셸을 실행할 수 없으며 외부 접근으로부터 격리된 환경에서 애플리케이션을 실행할 수 있습니다. 디스트로리스는 자바 이외에도 노드제이에스(Node.js), 파이썬(Python) 등의 실행 환경를 포함한 이미지를 제공하고 있으며, 필요한 경우 스태틱 데비안 이미지를 기반으로 디스트로리스 이미지를 생성할 수 있는 가이드를 제공하고 있습니다.</p><p>위의 특징을 요약하면 아래와 같습니다.</p><table><thead><tr><th style="text-align:center;">항목</th><th style="text-align:center;">구성</th><th style="text-align:center;">용도</th><th style="text-align:center;">용량</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>비지박스</strong></td><td style="text-align:center;">리눅스 명령어 세트</td><td style="text-align:center;">임베디드, 디버깅</td><td style="text-align:center;">1MB 내외</td></tr><tr><td style="text-align:center;"><strong>알파일 리눅스</strong></td><td style="text-align:center;">비지박스, 패키지 매니저</td><td style="text-align:center;">범용 리눅스 환경</td><td style="text-align:center;">3MB 내외</td></tr><tr><td style="text-align:center;"><strong>디스트로리스</strong></td><td style="text-align:center;">애플리케이션 실행 환경</td><td style="text-align:center;">애플리케이션 실행</td><td style="text-align:center;">100MB 내외</td></tr></tbody></table>',4))]),n[163]||(n[163]=a(`<hr><h2 id="일반-openjdk-이미지와-디스트로리스-형태의-openjdk-이미지-구성-비교" tabindex="-1"><a class="header-anchor" href="#일반-openjdk-이미지와-디스트로리스-형태의-openjdk-이미지-구성-비교"><span>일반 openjdk 이미지와 디스트로리스 형태의 openjdk 이미지 구성 비교</span></a></h2><p>디스트로리스 이미지가 일반 openjdk 이미지와 비교하여 어떤 특성을 가지고 있는지 살펴봅시다. 일반 openjdk 이미지는 오라클 리눅스와 자바의 빌드 도구와 실행 환경이 모두 포함된 JDK(Java Development Kit)를 포함하는 이미지입니다. 셸 접속이 가능하며 openjdk 이미지로 만든 컨테이너 내부에서 자바 소스 코드 빌드 및 패키지 생성까지 가능합니다. openjdk 이미지 내부를 확인해봅시다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run  <span class="token parameter variable">-t</span> <span class="token parameter variable">--rm</span> openjdk:21 /bin/bash</span>
<span class="line"><span class="token function">java</span> <span class="token parameter variable">-version</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># openjdk version &quot;21&quot; 2023-09-19</span></span>
<span class="line"><span class="token comment"># OpenJDK Runtime Environment (build 21+35-2513)</span></span>
<span class="line"><span class="token comment"># OpenJDK 64-Bit Server VM (build 21+35-2513, mixed mode, sharing)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("p",null,[n[86]||(n[86]=e("openjdk 이미지 내부의 자바 관련 파일들이 무엇이 있는지 ")),l(t,{icon:"fas fa-folder-open"}),n[87]||(n[87]=s("code",null,"/usr/java/openjdk-21/bin",-1)),n[88]||(n[88]=e(" 내용을 살펴보면 굉장히 많은 파일들(총 29개)이 있음을 알 수 있습니다. 해당 파일들이 무엇인지 자세히 설명하지는 않지만 자바 실행에 필요한 ")),l(t,{icon:"fa-brands fa-java"}),n[89]||(n[89]=s("code",null,"java",-1)),n[90]||(n[90]=e(" 파일 이외에도 자바의 빌드 및 디버깅 도구 다수가 포함되어 있습니다."))]),n[164]||(n[164]=a(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">ls</span> /usr/java/openjdk-21/bin</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># jar  jarsinger  java  javac  javadoc  javap  jcmd  jconsole  jdb  jdeprscan  jdeps  jfr  jhsdb  jimage  jinfo  jlink  jmap  jmod  jpackage  jps  jrunscript  jshell  jstack  jstat  jstatd  jwebserver  keytool  rmiregistry  serialver</span></span>
<span class="line"><span class="token builtin class-name">exit</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># exit</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>셸 접속이 가능하며 내부에서 openjdk를 사용하는 것 또한 확인할 수 있습니다. 디스트로리스 이미지는 어떻게 되어 있을지 확인해봅시다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-t</span> <span class="token parameter variable">--rm</span> gcr.io/distroless/java21-debian21 /bin/bash</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># Error: Unable to access jarfile /bin/bash</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[91]||(n[91]=s("code",null,"/bin/bash",-1)),n[92]||(n[92]=e(" 명령어로 셸에 접근해보려 했으나 ")),n[93]||(n[93]=s("code",null,"jarfile",-1)),n[94]||(n[94]=e(" 에 접근할 수 없다는 에러 메시지가 나타납니다. 왜 이런 메시지가 발생하는지 확인해보기 위해 디스트로리스 이미지를 통해 만든 컨테이너가 구동할 때 어떤 명령어를 실행하는지 알아보겠습니다. 컨테이너 구동 시 실행할 명령어는 엔트리포인트(")),n[95]||(n[95]=s("code",null,"ENTRYPOINT",-1)),n[96]||(n[96]=e(")로 정의하므로 이 부분을 이미지의 상세 명세를 확인하는 ")),l(t,{icon:"fas fa-terminal"}),n[97]||(n[97]=s("code",null,"docker inspect",-1)),n[98]||(n[98]=e(" 명령어를 통해 확인해보겠습니다."))]),n[165]||(n[165]=a(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> gcr.io/distroless/java21-debian12:latest <span class="token operator">|</span> <span class="token function">grep</span> Entrypoint <span class="token parameter variable">-A</span> <span class="token number">3</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment">#       &quot;Entrypoint&quot;: null,</span></span>
<span class="line"><span class="token comment">#       &quot;OnBuild&quot;: null,</span></span>
<span class="line"><span class="token comment">#       &quot;Labels&quot;: null,</span></span>
<span class="line"><span class="token comment">#    },</span></span>
<span class="line"><span class="token comment"># --</span></span>
<span class="line"><span class="token comment">#       &quot;Entrypoint&quot;: [</span></span>
<span class="line"><span class="token comment">#           &quot;/usr/bin/java&quot;,</span></span>
<span class="line"><span class="token comment">#           &quot;-jar&quot;</span></span>
<span class="line"><span class="token comment">#       ]</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[99]||(n[99]=e("엔트리포인트에 정의된 내용을 확인하니 컨테이너를 구동할 할 때 ")),l(t,{icon:"fas fa-terminal"}),n[100]||(n[100]=s("code",null,"/usr/bin/java -jar",-1)),n[101]||(n[101]=e(" 명령어를 실행하는 것을 알 수 있습니다. 이를 통해 디스트로리스 이미지는 자바를 실행하는 것을 의도한 이미지라는 것을 알 수 있습니다. 앞에서 컨테이너를 구동할 때 인자로 전달했던 ")),n[102]||(n[102]=s("code",null,"/bin/bash",-1)),n[103]||(n[103]=e(" 는 컨테이너 내부에서 ")),l(t,{icon:"fas fa-terminal"}),n[104]||(n[104]=s("code",null,"/usr/bin/java -jar /bin/bash",-1)),n[105]||(n[105]=e(" 의 형태로 실행되었을 것이며 그래서 ")),n[106]||(n[106]=s("code",null,"/bin/bash",-1)),n[107]||(n[107]=e("라는 jarfile에 접근할 수 없다는 에러가 발생하였습니다."))]),s("p",null,[n[108]||(n[108]=e("그렇다면 엔트리포인트를 재정의하여 컨테이너 내부의 셸로 접근하여 내용을 볼 수 있을지 확인해보겠습니다. ")),l(t,{icon:"fas fa-terminal"}),n[109]||(n[109]=s("code",null,"docker run",-1)),n[110]||(n[110]=e(" 명령어를 실행할 때 ")),n[111]||(n[111]=s("code",null,"--entrypoint",-1)),n[112]||(n[112]=e(" 옵션으로 엔트리포인트를 재정의할 수 있습니다."))]),n[166]||(n[166]=s("figure",null,[s("img",{src:"https://yozm.wishket.com/media/news/2527/16.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),n[167]||(n[167]=s("p",null,[s("code",null,"bash"),e("와 "),s("code",null,"sh"),e(" 명령어 모두 그러한 파일이 없다는 오류가 출력되어 디스트로리스 이미지는 셸과 관련된 내용이 전혀 없음을 알 수 있습니다. 디스트로리스 이미지로 만든 컨테이너는 한 번 구동되면 컨테이너 내부에 셸로 접근하여 조작을 할 수 없음을 의미합니다.")],-1)),s("p",null,[n[113]||(n[113]=e("그렇다면 디스트로리스 이미지는 어떤 구조를 가지고 있을지 한 번 알아봅시다. 이를 위해서는 약간의 우회 방법이 필요합니다. 디스트로리스 이미지는 내부에 셸이나 명령어가 없어 컨테이너를 실행한 이후 컨테이너에 ")),n[114]||(n[114]=s("code",null,"exec",-1)),n[115]||(n[115]=e(" 명령을 사용하여 내부의 파일 시스템 구조를 알아낼 수 없습니다. 그렇지만 리눅스 배포판들은 리눅스 파일시스템 계층 구조 표준(Filesystem Hierarchy Standard, FHS)를 준수하고 있습니다. 이를 이용하여 컨테이너 내부의 파일 시스템을 볼륨에 마운트하면 내부 파일 구조를 확인할 수 있습니다. 단 도커의 제약으로 인해 ")),l(t,{icon:"fas fa-folder-open"}),n[116]||(n[116]=s("code",null,"/",-1)),n[117]||(n[117]=e(" 디렉터리의 마운트는 허용하지 않으므로 FHS에서 정의한 디렉터리를 모두 볼륨으로 만들어 마운트 해야 합니다."))]),n[168]||(n[168]=s("figure",null,[s("img",{src:"https://yozm.wishket.com/media/news/2527/17.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),n[169]||(n[169]=s("p",null,"다소 많은 내용들이 포함되어 있지만, 리눅스 파일시스템 계층 구조 표준에 정의된 디렉터리를 모두 볼륨으로 만들어주었습니다.",-1)),s("p",null,[n[119]||(n[119]=e("이제 위의 볼륨을 사용하여 위에서 만든 디스트로리스 기반의 이미지를 이용하여 컨테이너를 구동해봅시다. 이때 ")),s("a",B,[l(t,{icon:"fa-brands fa-google"}),n[118]||(n[118]=s("code",null,"gcr.io/distroless/java21-debian12",-1))]),n[120]||(n[120]=e(" 이미지가 아닌 직접 빌드한 이미지를 사용하는 이유는 java21-debian12 이미지는 엔트리포인트에 ")),l(t,{icon:"fas fa-terminal"}),n[121]||(n[121]=s("code",null,"/usr/bin/java -jar",-1)),n[122]||(n[122]=e(" 명령어만 정의되어 이 이미지로 컨테이너를 구동할 경우 실행할 자바 애플리케이션이 없어서 오류 메시지와 명령어 사용법만 출력한 후 컨테이너가 종료되어 버리기 때문입니다. 그러므로 직접 이미지를 빌드하여 내부로 JAR를 복사해준 후 엔트리포인트를 재정의해 컨테이너가 구동될 때 자바 애플리케이션을 실행할 수 있도록 해야 합니다."))]),n[170]||(n[170]=s("figure",null,[s("img",{src:"https://yozm.wishket.com/media/news/2527/18.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),s("p",null,[n[123]||(n[123]=e("컨테이너가 구동되고 나면 ")),l(t,{icon:"fas fa-folder-open"}),n[124]||(n[124]=s("code",null,"/var/lib/docker/volumes/",-1)),n[125]||(n[125]=e(" 디렉터리에서 파일 시스템 구조를 확인할 수 있습니다."))]),n[171]||(n[171]=s("figure",null,[s("img",{src:"https://yozm.wishket.com/media/news/2527/19.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),s("p",null,[n[126]||(n[126]=e("볼륨 하위의 ")),l(t,{icon:"fas fa-folder-open"}),n[127]||(n[127]=s("code",null,"bin",-1)),n[128]||(n[128]=e(" 디렉터리는 컨테이너 내부의 ")),l(t,{icon:"fas fa-folder-open"}),n[129]||(n[129]=s("code",null,"bin",-1)),n[130]||(n[130]=e(" 디렉터리와 같습니다. 디스트로리스 이미지는 어떤 명령어를 가지고 있을지 확인해봅시다."))]),n[172]||(n[172]=a(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">ls</span> /var/lib/docker/volumes/bin/_data/</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>아무런 명령어가 없는 것을 알 수 있습니다. 이 컨테이너 내부로 접근하여도 아무런 작업을 할 수 없다는 의미이므로 컨테이너 내부에서 정보를 조작하거나 탈취하는 등의 명령어를 수행하는 것도 불가능합니다. 그렇다면 디스트로리스 내부의 자바 실행 환경은 무엇을 사용하고 있을지 알아봅시다.</p><figure><img src="https://yozm.wishket.com/media/news/2527/21.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>디렉터리 이름과 출력 결과에서 Temurin 이라는 것과 JRE라는 것을 확인할 수 있습니다. Temurin은 openjdk 의 배포판의 일종입니다. openjdk 는 오픈 소스 프로젝트로 일종의 표준 역할을 하며 여러 회사와 커뮤니티가 openjdk의 소스를 이용하여 자신들의 특화 도구를 추가하거나 최적화를 시킨 후 각자의 배포판을 만들고 있습니다. 이러한 배포판으로는 Amazon Corretto, Azul Zulu 등이 있으며 Temurin 은 이클립스(Eclipse) 재단의 지원을 받는 openjdk 배포판입니다. 또한 JRE(Java Runtime Environment) 라는 부분에서 개발 관련 도구들이 제외된 실행 환경만을 포함하는 것을 알 수 있습니다. 어떤 실행 파일을 가지고 있는지 확인해봅시다.</p><figure><img src="https://yozm.wishket.com/media/news/2527/22.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,5)),s("p",null,[n[132]||(n[132]=e("openjdk 이미지(총 29개)와 비교하여 실행 파일의 수(총 6개)가 굉장히 적은 것을 확인할 수 있습니다. 이렇게 수가 줄어드는 것이 어떻게 공격받을 지점이 줄어드는지 1가지 예를 좀 더 자세히 살펴보겠습니다. ")),n[133]||(n[133]=s("code",null,"trivy",-1)),n[134]||(n[134]=e("를 통해서 검출된 취약점 중에 Medium 등급의 ")),s("a",A,[l(t,{icon:"fas fa-globe"}),n[131]||(n[131]=e("CVE-2021-35937"))]),n[135]||(n[135]=e(" 있습니다."))]),n[173]||(n[173]=s("p",null,"해당 취약점은 리눅스에서 설치를 담당하는 rpm과 관련된 것으로 리눅스 권한 관리 체계의 충돌을 유발하여 부여된 권한을 벗어난 작업을 수행하도록 하는 위험성을 가졌습니다.",-1)),s("figure",null,[n[138]||(n[138]=s("img",{src:"https://yozm.wishket.com/media/news/2527/23.png",alt:'<VPIcon icon="fas fa-globe"/>CVE-2021-35937취약점(출처: CVE)',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[s("a",C,[l(t,{icon:"fas fa-globe"}),n[136]||(n[136]=e("CVE-2021-35937"))]),n[137]||(n[137]=e("취약점(출처: CVE)"))])]),n[174]||(n[174]=s("p",null,"이러한 취약점을 가진 패키지는 디스트리로스 이미지에 포함되어 있지 않기 때문에 해당 취약점에서 디스트로리스 이미지는 자유롭습니다. 그뿐만 아니라, 이미 살펴본 것처럼 외부에서 접근할 수 있는 셸 또는각종 명령어를 포함하지 않으며, 애플리케이션 실행을 위한 최소한의 도구에만 집중하고 있어 여러 가지 취약점 및 위험에 노출될 가능성이 적습니다. 물론 디스트로리스 이미지가 공격 지점을 최소화하려고 노력하지만, 배포된 애플리케이션은 늘 공격의 대상이 될 수 있는 가능성이 있으므로 보안을 위해서는 애플리케이션을 개발 단계에서부터 안전하게 코딩하고 운영 단계에서는 침입을 감지하고 이를 빠르게 조치할 수 있는 대안을 수립하는 것도 중요합니다.",-1)),n[175]||(n[175]=s("div",{class:"hint-container note"},[s("p",{class:"hint-container-title"},"CVE(Common Vulnerabilities and Exposures, 공통 취약점 및 노출)"),s("p",null,"trivy를 통해 점검된 취약점은 CVE를 기반으로 해당 내용을 정리해서 보여줍니다. CVE는 전 세계 보안 관련 기관들이 발견한 보안 취약점을 미국 정부의 지원을 받는 비영리 기관 MITRE가 취합하여 고유 번호를 부여하여 관리하는 것으로 전 세계적으로 보안 취약점 관리의 표준으로 여겨지고 있습니다.")],-1)),n[176]||(n[176]=s("hr",null,null,-1)),n[177]||(n[177]=s("h2",{id:"디스트로리스-이미지의-현재와-미래",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#디스트로리스-이미지의-현재와-미래"},[s("span",null,"디스트로리스 이미지의 현재와 미래")])],-1)),s("p",null,[n[140]||(n[140]=e("GoogleContainerTools의 디스트로리스 이미지는 오랜 시간동안 널리 사용되어 왔습니다. 그리고 이 컨셉을 이용해서")),l(t,{icon:"fa-brands fa-docker"}),n[141]||(n[141]=s("a",{href:"https://hub.docker.com/r/azul/zulu-openjdk-distroless",target:"_blank",rel:"noopener noreferrer"},[s("code",null,"azul/zulu-openjdk-distroless")],-1)),n[142]||(n[142]=e("와 같은 이미지를 제공하는 곳도 생겨났으며 GoogleContainerTools의 디스트로리스의 핵심 기여자 중 일부는 ")),s("a",R,[l(t,{icon:"fas fa-globe"}),n[139]||(n[139]=e("Chainguard"))]),n[143]||(n[143]=e("를 창업하기도 하였습니다. 이와 같은 흐름에 힘입어 컨테이너 인프라가 활성화되는 만큼 디스트로리스는 더욱더 인기를 끌게 될 것입니다. 현재 디스트로리스를 제공하는 gcr.io는 2024년 5월부터 더 이상 사용되지 않을 예정이지만, 도메인이 변경되더라도 일정 기간 리다이렉트를 제공할 것으로 예상되며, 이를 사용할 것으로 예상되는구글 제품들에게도 중요한 포지션을 차지하고 있기 때문에 이에 대한 지원을 이어나갈 것으로 예상됩니다."))]),n[178]||(n[178]=s("p",null,[e("실제로 "),s("code",null,"gcr.io"),e("는 구글 내부 제품인 Google Container Registry를 이용했던 것이고 이 백엔드가 Artifact Registry로 바뀌는 부분에 영향을 받는 것으로 보입니다. 따라서 앞으로도 구글에서 제공하는 디스트로리스 이미지를 이용하는 것에는 큰 문제가 발생하지 않을 전망입니다.")],-1)),n[179]||(n[179]=s("hr",null,null,-1)),n[180]||(n[180]=s("h2",{id:"마치며",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#마치며"},[s("span",null,"마치며")])],-1)),n[181]||(n[181]=s("p",null,"컨테이너 이미지의 용량을 줄이는 것은 단순히 용량만 줄어드는 게 아닌 여러 이점이 있다는 것을 이제 알게 되었을 것입니다. 그중에 특히 비용과 보안은 현대적인 애플리케이션 설계 및 배포에 매우 중요한 요소입니다. 따라서 디스트로리스 이미지를 사용할 수 있는 환경이라면 이를 적극적으로 활용하여 보다 성숙된 인프라를 구성하여 사용하길 바랍니다.",-1)),s("p",null,[n[145]||(n[145]=e("물론 디스트로리스 이미지만이 이를 구현할 수 있는 유일한 방법이 아니며, AWS사에서는 ")),s("a",q,[l(t,{icon:"fa-brands fa-aws"}),n[144]||(n[144]=e("좀 더 다른 방법으로 컨테이너 이미지를 줄이는 방법"))]),n[146]||(n[146]=e("을 제시하고 있습니다. 이 방법을 요약하면 실제 빌드에 필요한 부분만 기초 이미지에 넣고, 빌드 완료된 결과를 가지고 최종 이미지를 빌드하는 관점입니다. 즉 디스트로리스와 유사하지만 좀 더 자체적인 성격의 디스트로리스 이미지를 만들어서 사용하는 것입니다. 조직의 성숙도가 높다면 이러한 방법도 매우 좋으나 컨테이너 인프라를 설계하며 병행하기에는 어려운 부분이 많이 있으니 성숙도가 충분하지 않은 경우에는 디스트로리스 이미지를 활용하는 것이 더 쉽고 효과적인 방법일 것입니다."))]),n[182]||(n[182]=s("p",null,"정답은 없습니다. 하지만 이미지의 용량을 줄이는 것은 단순하지만 강력한 힘이 있습니다. 그러니 오늘 바로 시작해 보시면 어떨까요?",-1)),n[183]||(n[183]=s("hr",null,null,-1)),n[184]||(n[184]=s("h2",{id:"참고",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#참고"},[s("span",null,"참고")])],-1)),s("ul",null,[s("li",null,[s("a",D,[l(t,{icon:"fas fa-globe"}),n[147]||(n[147]=e("<표1>: openjdk:21의 취약점 상세 내용 (2024년 2월 24일 기준)"))])]),s("li",null,[s("a",V,[l(t,{icon:"fas fa-globe"}),n[148]||(n[148]=e("<표2>: gcr.io/distroless/java21-debian12의 취약점 상세 내용 (2024년 2월 24일 기준)"))])])])])}const T=u(y,[["render",I]]),N=JSON.parse('{"path":"/yozm.wishket.com/2527.html","title":"비용&보안 두 마리 토끼 잡는 디스트로리스 이미지 이용법","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"비용&보안 두 마리 토끼 잡는 디스트로리스 이미지 이용법","description":"Article(s) > 비용&보안 두 마리 토끼 잡는 디스트로리스 이미지 이용법","icon":"fa-brands fa-docker","category":["Docker","Java","Article(s)"],"tag":["blog","yozm.wishket.com","docker","dockerfile","java"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"비용&보안 두 마리 토끼 잡는 디스트로리스 이미지 이용법\\",\\"image\\":[\\"https://yozm.wishket.com/media/news/2527/1.png\\",\\"https://yozm.wishket.com/media/news/2527/2.png\\",\\"https://yozm.wishket.com/media/news/2527/3.png\\",\\"https://yozm.wishket.com/media/news/2527/4.png\\",\\"https://yozm.wishket.com/media/news/2527/7.png\\",\\"https://yozm.wishket.com/media/news/2527/8.png\\",\\"https://yozm.wishket.com/media/news/2527/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2024-04-01_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_6_17_33.png\\",\\"https://yozm.wishket.com/media/news/2527/10.png\\",\\"https://yozm.wishket.com/media/news/2527/11.png\\",\\"https://yozm.wishket.com/media/news/2527/16.png\\",\\"https://yozm.wishket.com/media/news/2527/17.png\\",\\"https://yozm.wishket.com/media/news/2527/18.png\\",\\"https://yozm.wishket.com/media/news/2527/19.png\\",\\"https://yozm.wishket.com/media/news/2527/21.png\\",\\"https://yozm.wishket.com/media/news/2527/22.png\\",\\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-35937\\"],\\"datePublished\\":\\"2024-04-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2527.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"비용&보안 두 마리 토끼 잡는 디스트로리스 이미지 이용법"}],["meta",{"property":"og:description","content":"Article(s) > 비용&보안 두 마리 토끼 잡는 디스트로리스 이미지 이용법"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/2425/%EA%B7%B8%EB%A6%BC2.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/2425/%EA%B7%B8%EB%A6%BC2.png"}],["meta",{"name":"twitter:image:alt","content":"비용&보안 두 마리 토끼 잡는 디스트로리스 이미지 이용법"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"dockerfile"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-04-03T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 비용&보안 두 마리 토끼 잡는 디스트로리스 이미지 이용법"},{"property":"og:description","content":"비용&보안 두 마리 토끼 잡는 디스트로리스 이미지 이용법"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2527.html"}]],"prev":"/devops/docker/articles/README.md","date":"2024-04-03T00:00:00.000Z","isOriginal":false,"cover":"https://yozm.wishket.com/media/news/2425/%EA%B7%B8%EB%A6%BC2.png"},"git":{},"readingTime":{"minutes":3.75,"words":1124},"filePathRelative":"yozm.wishket.com/2527.md"}');export{T as comp,N as data};
