import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as a,b as g,a as v,t as b,n as c,g as r,w as e,e as l,r as p,o as y}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/code-maze.com/csharp-generics/16-Generic_example.png",f={},C={id:"frontmatter-title-관련",tabindex:"-1"},z={class:"header-anchor",href:"#frontmatter-title-관련"},T={class:"table-of-contents"},I={class:"hint-container details"},x={class:"hint-container info"},G={href:"https://github.com/CodeMazeBlog/csharp-intermediate-module/tree/generics",target:"_blank",rel:"noopener noreferrer"};function _(u,n){const o=p("VPCard"),i=p("router-link"),d=p("SiteInfo"),t=p("RouteLink"),m=p("VPIcon");return y(),h("div",null,[s("h1",C,[s("a",z,[s("span",null,b(u.$frontmatter.title)+" 관련",1)])]),a(o,c(r({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",T,[s("ul",null,[s("li",null,[a(i,{to:"#generic-type-t"},{default:e(()=>n[0]||(n[0]=[l("Generic Type T")])),_:1,__:[0]})]),s("li",null,[a(i,{to:"#constraints-with-generics"},{default:e(()=>n[1]||(n[1]=[l("Constraints with Generics")])),_:1,__:[1]})]),s("li",null,[a(i,{to:"#generic-methods"},{default:e(()=>n[2]||(n[2]=[l("Generic Methods")])),_:1,__:[2]})]),s("li",null,[a(i,{to:"#conclusion"},{default:e(()=>n[3]||(n[3]=[l("Conclusion")])),_:1,__:[3]})])])]),n[30]||(n[30]=s("hr",null,null,-1)),a(d,{name:"C# Intermediate - Generics",desc:"In this article you will learn more about Generics in C#. We will talk about Generic Types, whata are the constraints and generic methods.",url:"https://code-maze.com/csharp-generics/",logo:"/assets/image/code-maze.com/favicon.png",preview:"/assets/image/csharp-generics/banner.png"}),n[31]||(n[31]=s("p",null,"C# provides generics to help us remove the need for casting, to improve type safety and make it easier to create generic classes and generic methods.",-1)),s("details",I,[n[17]||(n[17]=s("summary",null,"This article is part of the series",-1)),s("ul",null,[s("li",null,[a(t,{to:"/code-maze.com/csharp-classes-constructors.html"},{default:e(()=>n[4]||(n[4]=[s("strong",null,"Classes and Constructors",-1)])),_:1,__:[4]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-properties.html"},{default:e(()=>n[5]||(n[5]=[s("strong",null,"Properties",-1)])),_:1,__:[5]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-static-members-constants-extension-methods.html"},{default:e(()=>n[6]||(n[6]=[s("strong",null,"Static Members, Constants, and Extension Methods",-1)])),_:1,__:[6]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-anonymous-nullable-types.html"},{default:e(()=>n[7]||(n[7]=[s("strong",null,"Anonymous and Nullable Types",-1)])),_:1,__:[7]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-structures.html"},{default:e(()=>n[8]||(n[8]=[s("strong",null,"Structures",-1)])),_:1,__:[8]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-enumerations.html"},{default:e(()=>n[9]||(n[9]=[s("strong",null,"Enumerations",-1)])),_:1,__:[9]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-inheritance.html"},{default:e(()=>n[10]||(n[10]=[s("strong",null,"Inheritance",-1)])),_:1,__:[10]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-interfaces.html"},{default:e(()=>n[11]||(n[11]=[s("strong",null,"Interfaces",-1)])),_:1,__:[11]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-abstract-classes.html"},{default:e(()=>n[12]||(n[12]=[s("strong",null,"Abstract Classes",-1)])),_:1,__:[12]})]),n[16]||(n[16]=s("li",null,"Generics (Current article)",-1)),s("li",null,[a(t,{to:"/code-maze.com/csharp-queue-stack-hashtable.html"},{default:e(()=>n[13]||(n[13]=[s("strong",null,"Queue, Stack, Hashtable",-1)])),_:1,__:[13]})]),s("li",null,[a(t,{to:"/code-maze.com/cshart-generic-list-dictionary.html"},{default:e(()=>n[14]||(n[14]=[s("strong",null,"Generic List and Dictionary",-1)])),_:1,__:[14]})]),s("li",null,[a(t,{to:"/code-maze.com/csharp-delegates.html"},{default:e(()=>n[15]||(n[15]=[s("strong",null,"Delegates",-1)])),_:1,__:[15]})])])]),s("p",null,[n[19]||(n[19]=l("If you want to see complete navigation of this tutorial, you can do that here ")),a(t,{to:"/code-maze.com/csharp-intermediate-tutorial-oop.html"},{default:e(()=>n[18]||(n[18]=[s("strong",null,"C# Intermediate Tutorial",-1)])),_:1,__:[18]}),n[20]||(n[20]=l("."))]),s("div",x,[n[26]||(n[26]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[24]||(n[24]=l("To download the source code, you can visit ")),s("a",G,[n[21]||(n[21]=l("Generics in C# Source Code (")),a(m,{icon:"iconfont icon-github"}),n[22]||(n[22]=s("code",null,"CodeMazeBlog/csharp-intermediate-module",-1)),n[23]||(n[23]=l(")"))]),n[25]||(n[25]=l("."))])]),n[32]||(n[32]=g(`<hr><h2 id="generic-type-t" tabindex="-1"><a class="header-anchor" href="#generic-type-t"><span>Generic Type T</span></a></h2><p>To create a generic class, we need to provide a type between angle brackets:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionInitializer<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token range operator">..</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>T</code> in this example acts as a placeholder for a type we want to work with. We need to provide that type once we instantiate this generic class. So let’s see this with a simple example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionInitializer<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> collection<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">CollectionInitializer</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> collectionLength<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">T</span><span class="token punctuation">[</span>collectionLength<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddElementsToCollection</span><span class="token punctuation">(</span><span class="token keyword">params</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span>elements<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>elements<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            collection<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">RetrieveAllElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> collection<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token function">RetreiveElementOnIndex</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> collection<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And to use this generic class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Program</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">CollectionInitializer<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> initializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CollectionInitializer<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        initializer<span class="token punctuation">.</span><span class="token function">AddElementsToCollection</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> collection <span class="token operator">=</span> initializer<span class="token punctuation">.</span><span class="token function">RetrieveAllElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">int</span></span> number <span class="token operator">=</span> initializer<span class="token punctuation">.</span><span class="token function">RetreiveElementOnIndex</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> element <span class="token keyword">in</span> collection<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Element on the selected index is: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">number</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As we can see in our <code>CollectionInitializer</code> class, we need to provide the type which we want to work with. Then, we can just call the methods implemented within our generic class. Of course, we didn’t implement safety checks (if we send more elements than the array length is etc) just for a sake of simplicity. Now we can see the result:</p><figure><img src="`+w+`" alt="Generic example - Generics in C#" tabindex="0" loading="lazy"><figcaption>Generic example - Generics in C#</figcaption></figure><p>A generic class can have more than one type parameter:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionKeyValueInitializer<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TValue<span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="constraints-with-generics" tabindex="-1"><a class="header-anchor" href="#constraints-with-generics"><span>Constraints with Generics</span></a></h2><p>Sometimes, we want to ensure that just certain types can be invoked with our generic class. It is often useful while working with classes or interfaces. We can do that by using the where keyword:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionInitializer<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Student</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>or we can limit our generic class to work only with classes:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionInitializer<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>There are different variations for this constraints, they depend on the situation we are working in. It is important to know that if we constraint our generic class to work only with classes, we will get an error if we provide value type. If we want to work only with value types, we can constraint our generic class like this:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionInitializer<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">struct</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="generic-methods" tabindex="-1"><a class="header-anchor" href="#generic-methods"><span>Generic Methods</span></a></h2><p>In the same way that we can create a generic class, we can create a generic method. We just need to set a type parameter in angle brackets right behind a method name:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">ExampleMethod</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> param1<span class="token punctuation">,</span> <span class="token class-name">T</span> param2<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//Methods body</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We must pay attention to the type parameter identifier if our generic method exists inside a generic class. If that class has a type T then, our method needs to have a different type (U, Y, R…). Otherwise, the type T from a method will hide the type T from a class.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this article, we have learned:</p><ul><li>How to use Generics in C#</li><li>How to implement constraints in our generic classes</li><li>The way to create generic methods</li></ul>`,29)),s("p",null,[n[28]||(n[28]=l("In the next article, we are going to talk about ")),a(t,{to:"/code-maze.com/csharp-queue-stack-hashtable.html"},{default:e(()=>n[27]||(n[27]=[s("strong",null,"Queue, Stack, and Hashtable in C#",-1)])),_:1,__:[27]}),n[29]||(n[29]=l("."))]),v(" TODO: add ARTICLE CARD "),a(o,c(r({title:"C# Intermediate - Generics",desc:"In this article you will learn more about Generics in C#. We will talk about Generic Types, whata are the constraints and generic methods.",link:"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-generics.html",logo:"/assets/image/code-maze.com/favicon.png",background:"rgba(22,22,22,0.2)"})),null,16)])}const j=k(f,[["render",_]]),E=JSON.parse('{"path":"/code-maze.com/csharp-generics.html","title":"C# Intermediate - Generics","lang":"en-US","frontmatter":{"lang":"en-US","title":"C# Intermediate - Generics","description":"Article(s) > C# Intermediate - Generics","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","code-maze.com","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C# Intermediate - Generics\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/csharp-generics/16-Generic_example.png\\"],\\"datePublished\\":\\"2018-10-19T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Marinko Spasojević\\",\\"url\\":\\"https://code-maze.com/author/marinko/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-generics.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"C# Intermediate - Generics"}],["meta",{"property":"og:description","content":"Article(s) > C# Intermediate - Generics"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://code-maze.com/wp-content/uploads/2018/10/10-Generics.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://code-maze.com/wp-content/uploads/2018/10/10-Generics.png"}],["meta",{"name":"twitter:image:alt","content":"C# Intermediate - Generics"}],["meta",{"property":"article:author","content":"Marinko Spasojević"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2018-10-19T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > C# Intermediate - Generics"},{"property":"og:description","content":"C# Intermediate - Generics"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/csharp-generics.html"}]],"prev":"/programming/cs/articles/README.md","date":"2018-10-19T00:00:00.000Z","isOriginal":false,"author":[{"name":"Marinko Spasojević","url":"https://code-maze.com/author/marinko/"}],"cover":"https://code-maze.com/wp-content/uploads/2018/10/10-Generics.png"},"git":{},"readingTime":{"minutes":2.95,"words":886},"filePathRelative":"code-maze.com/csharp-generics.md","copyright":{"author":"Marinko Spasojević"}}');export{j as comp,E as data};
