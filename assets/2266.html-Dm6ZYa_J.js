import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as a,b as l,a as c,t as v,n as r,g as m,w as p,e as t,r as o,o as y}from"./app-BVguHYKu.js";const f={},w={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},z={href:"https://randerson112358.medium.com/algorithm-analysis-time-complexity-simplified-cd39a81fec71",target:"_blank",rel:"noopener noreferrer"};function _(u,n){const i=o("VPCard"),e=o("router-link"),d=o("SiteInfo"),k=o("VPIcon");return y(),h("div",null,[s("h1",w,[s("a",b,[s("span",null,v(u.$frontmatter.title)+" 관련",1)])]),a(i,r(m({title:"Java > Article(s)",desc:"Article(s)",link:"/programming/java/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[a(e,{to:"#삽입-정렬-알고리즘-insert-sort"},{default:p(()=>n[0]||(n[0]=[t("삽입 정렬 알고리즘(Insert Sort)")])),_:1,__:[0]}),s("ul",null,[s("li",null,[a(e,{to:"#_1-동작-원리"},{default:p(()=>n[1]||(n[1]=[t("1) 동작 원리")])),_:1,__:[1]})]),s("li",null,[a(e,{to:"#_2-코드-예시"},{default:p(()=>n[2]||(n[2]=[t("2) 코드 예시")])),_:1,__:[2]})])])]),s("li",null,[a(e,{to:"#병합-정렬-알고리즘-merge-sort"},{default:p(()=>n[3]||(n[3]=[t("병합 정렬 알고리즘(Merge Sort)")])),_:1,__:[3]}),s("ul",null,[s("li",null,[a(e,{to:"#_1-동작-원리-1"},{default:p(()=>n[4]||(n[4]=[t("1) 동작 원리")])),_:1,__:[4]})]),s("li",null,[a(e,{to:"#_2-코드-예시-1"},{default:p(()=>n[5]||(n[5]=[t("2) 코드 예시")])),_:1,__:[5]})])])]),s("li",null,[a(e,{to:"#퀵-정렬-알고리즘-quick-sort"},{default:p(()=>n[6]||(n[6]=[t("퀵 정렬 알고리즘(Quick Sort)")])),_:1,__:[6]}),s("ul",null,[s("li",null,[a(e,{to:"#_1-동작-원리-2"},{default:p(()=>n[7]||(n[7]=[t("1) 동작 원리")])),_:1,__:[7]})]),s("li",null,[a(e,{to:"#_2-코드-예시-2"},{default:p(()=>n[8]||(n[8]=[t("2) 코드 예시")])),_:1,__:[8]})])])]),s("li",null,[a(e,{to:"#각-정렬-알고리즘-시간-복잡도-비교-분석"},{default:p(()=>n[9]||(n[9]=[t("각 정렬 알고리즘 시간 복잡도 비교 분석")])),_:1,__:[9]}),s("ul",null,[s("li",null,[a(e,{to:"#_1-시간-복잡도-분석"},{default:p(()=>n[10]||(n[10]=[t("1) 시간 복잡도 분석")])),_:1,__:[10]})]),s("li",null,[a(e,{to:"#_2-각-알고리즘의-시간-복잡도-비교"},{default:p(()=>n[11]||(n[11]=[t("2) 각 알고리즘의 시간 복잡도 비교")])),_:1,__:[11]})]),s("li",null,[a(e,{to:"#_3-장단점-및-사용-방법"},{default:p(()=>n[12]||(n[12]=[t("3) 장단점 및 사용 방법")])),_:1,__:[12]})])])]),s("li",null,[a(e,{to:"#마치며"},{default:p(()=>n[13]||(n[13]=[t("마치며")])),_:1,__:[13]})])])]),n[19]||(n[19]=s("hr",null,null,-1)),a(d,{name:"알아두면 유용한 정렬 알고리즘과 시간 복잡도 분석 | 요즘IT",desc:"정렬 알고리즘은 데이터베이스 시스템, 검색 엔진, 머신러닝 알고리즘, 일상생활의 다양한 디지털 서비스에서 활용됩니다. 알고리즘의 효율성은 보통 시간 복잡도(Time Complexity)로 나타내며, 프로그램 성능에 큰 영향을 미칠 수 있으므로 최적화하는 것이 중요합니다. 이번 글에서는 정렬 알고리즘의 종류 중 삽입 정렬, 병합 정렬, 퀵 정렬에 대해 살펴보고, 각 알고리즘의 시간 복잡도를 비교하여 어떤 경우에 사용해야 하는지 알아보도록 하겠습니다.",url:"https://yozm.wishket.com/magazine/detail/2266/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/2266/time-money-concept-with-keyboard-calculator-magnifier-notebook-watch-navy-gree_lxKmfSf.jpg"}),n[20]||(n[20]=l(`<p>정렬 알고리즘은 데이터베이스 시스템, 검색 엔진, 머신러닝 알고리즘, 일상생활의 다양한 디지털 서비스에서 활용됩니다. 알고리즘의 효율성은 보통 **시간 복잡도(Time Complexity)**로 나타내며, 프로그램 성능에 큰 영향을 미칠 수 있으므로 최적화하는 것이 중요합니다.</p><p>이번 글에서는 정렬 알고리즘의 종류 중 <strong>삽입 정렬, 병합 정렬, 퀵 정렬</strong>에 대해 살펴보고, 각 알고리즘의 시간 복잡도를 비교하여 어떤 경우에 사용해야 하는지 알아보도록 하겠습니다.</p><hr><h2 id="삽입-정렬-알고리즘-insert-sort" tabindex="-1"><a class="header-anchor" href="#삽입-정렬-알고리즘-insert-sort"><span>삽입 정렬 알고리즘(Insert Sort)</span></a></h2><h3 id="_1-동작-원리" tabindex="-1"><a class="header-anchor" href="#_1-동작-원리"><span>1) 동작 원리</span></a></h3><p>삽입 정렬(Insertion Sort) 알고리즘은 배열의 각 요소를 적절한 위치에 <strong>삽입</strong>하는 방식으로 동작합니다. 초기에는 배열의 첫 번째 요소를 이미 정렬된 것으로 간주하고, 2번째 요소부터 시작합니다. 그리고 반복문으로 해당 요소와 가장 가까운 좌측 요소부터 비교하면서 삽입 위치를 확인합니다.</p><figure><img src="https://yozm.wishket.com/media/news/2266/image7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>예를 들어, 위 그림과 같이 [3, 2, 1, 4, 5]이라는 배열이 있는 경우, 첫 번째 단계에서는 2번째 요소인 <code>[2]</code>를 먼저 선택합니다. 다음으로 <code>[2]</code>를 좌측에 있는 요소와 하나씩 비교합니다. 여기서는 <code>[3] &gt; [2]</code>이기 때문에 두 위치를 바꿔줍니다. <code>[2]</code>의 좌측에는 더이상 숫자가 없기 때문에 비교를 종료합니다.</p><figure><img src="https://yozm.wishket.com/media/news/2266/image13.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>다음에는 3번째 요소인 <code>[1]</code>을 선택하여 좌측에 있는 숫자들과 비교합니다. 먼저 <code>[3]</code>과 비교해서 자리를 바꾸고 다음으로 <code>[2]</code> 비교해서 자리를 바꿉니다. 그리고 다음 4번째 요소인 <code>[4]</code>로 이동합니다. <code>[4]</code>부터는 좌측에 있는 숫자 중 큰 숫자가 없기 때문에 그 자리를 그대로 유지합니다. 삽입 정렬 알고리즘은 이러한 방식으로 숫자 배열을 정렬합니다.</p><h3 id="_2-코드-예시" tabindex="-1"><a class="header-anchor" href="#_2-코드-예시"><span>2) 코드 예시</span></a></h3><p>다음은 삽입 정렬 알고리즘을 구현한 자바 코드 예시입니다. for문에서는 <code>i=1</code>로 설정하여 배열의2번째 요소부터 시작합니다. 그리고 while문으로 좌측에 있는 숫자와 비교하여 큰 숫자가 있는 경우 위치를 바꿉니다.</p><figure><img src="https://yozm.wishket.com/media/news/2266/image4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이제 <strong>클라이언트 코드</strong>에서 <code>insertSort()</code> 메서드를 호출하여 임의의 숫자 배열을 정렬해 보도록 하겠습니다. 코드를 실행하면 아래 그림과 같이 배열이 정렬되는 것을 확인해 볼 수 있습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2266/image1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="병합-정렬-알고리즘-merge-sort" tabindex="-1"><a class="header-anchor" href="#병합-정렬-알고리즘-merge-sort"><span>병합 정렬 알고리즘(Merge Sort)</span></a></h2><h3 id="_1-동작-원리-1" tabindex="-1"><a class="header-anchor" href="#_1-동작-원리-1"><span>1) 동작 원리</span></a></h3><p>병합 정렬(Merge Sort)은 대표적인 <strong>분할 정복</strong>(Divide and Conquer) 알고리즘 중 하나입니다. 병합 정렬에서는 먼저 배열을 두 개의 부분 배열로 분할하고, 각 부분 배열을 정렬하는 분할 정복 단계를 거칩니다. 그리고 두 개의 정렬된 부분 배열을 병합하여 최종적으로 하나의 정렬된 배열을 만드는 방식으로 동작합니다.</p><h4 id="분할-divide" tabindex="-1"><a class="header-anchor" href="#분할-divide"><span>분할(Divide)</span></a></h4><p>주어진 배열을 두 개의 동일한 크기의 <strong>부분 배열로 분할</strong>합니다. 만약 배열의 크기가 홀수라면, 부분 배열은 다른 부분 배열보다 원소가 하나 더 많을 수 있습니다.</p><h4 id="정복-conquer" tabindex="-1"><a class="header-anchor" href="#정복-conquer"><span>정복(Conquer)</span></a></h4><p>정복 단계에서는 두 개의 부분 배열을 정렬합니다. 만약 두 배열의 크기를 다시 나눌 수 있다면, 다시 분할 단계로 <strong>재귀적 호출</strong>(recursive call)을 진행합니다.</p><h4 id="병합-merge" tabindex="-1"><a class="header-anchor" href="#병합-merge"><span>병합(Merge)</span></a></h4><p>두 개의 정렬된 부분 배열을 병합하여 <strong>하나의 정렬된 배열</strong>로 만듭니다. 이 과정은 두 부분 배열의 첫 번째 요소부터 비교하여 작은 숫자를 병합된 배열에 차례대로 넣는 방식으로 진행됩니다. 결과적으로 두 부분 배열의 모든 원소가 병합된 배열로 이동할 때까지 병합 단계를 반복합니다.</p><figure><img src="https://yozm.wishket.com/media/news/2266/image2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-코드-예시-1" tabindex="-1"><a class="header-anchor" href="#_2-코드-예시-1"><span>2) 코드 예시</span></a></h3><p>다음 코드는 병합 정렬 알고리즘을 구현한 자바 코드입니다. <code>mergeSort()</code> 메서드에서 먼저 배열의 크기를 체크하여, 가장 작은 단위의 배열 크기가 되면 재귀 호출에서 빠져나오도록 조건(Base Case)을 설정합니다. 그리고 기존 배열을 2개로 분할하고, 각 배열에 대한 <code>mergeSort()</code> 재귀 호출과 병합 메서드인 <code>merge()</code>를 호출하도록 합니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token doc-comment comment">/** Merge Sort **/</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputArray<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> inputLength <span class="token operator">=</span> inputArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputLength <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 배열 크기가 2보다 작으면 분할 종료</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span> midIndex <span class="token operator">=</span> inputLengtn <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 배열을 2개로 나누기</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> leftHalf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>midIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rightHalf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>inputLength <span class="token operator">-</span> midIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">1</span><span class="token operator">&lt;</span>midIndex<span class="token punctuation">;</span> <span class="token number">1</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 좌측 배열 생성</span></span>
<span class="line">        leftHalf <span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> inputArray <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token number">1</span><span class="token operator">=</span> midIndex<span class="token punctuation">;</span> <span class="token number">1</span><span class="token operator">&lt;</span> inputLengtn<span class="token punctuation">;</span> <span class="token number">1</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 우측 배열 생성</span></span>
<span class="line">        rightHalf<span class="token punctuation">[</span>i <span class="token operator">-</span> midIndex<span class="token punctuation">]</span> <span class="token operator">=</span> inputArray <span class="token punctuation">(</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token class-name">LeftHalf</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">// 좌측 배열을 재귀 호출로 분할</span></span>
<span class="line">    <span class="token function">mergeSort</span><span class="token punctuation">(</span>rightHalf<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">// 우측 배열을 재귀 호출로 분할</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">merge</span><span class="token punctuation">(</span>inputArray<span class="token punctuation">,</span> leftHalf<span class="token punctuation">,</span> nightHalf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 분할된 배열을 병합</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>merge()</code> 메서드에서는 두 배열의 좌측 숫자부터 비교하여 작은 숫자를 차례대로 병합된 배열에 넣습니다. 만약 한 쪽 배열의 숫자가 남아 있으면 while loop로 병합된 배열에 남은 숫자들을 채워줍니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputArray<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> leftHalf<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rightHalf<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> leftLength <span class="token operator">=</span> leftHalf<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> rightLength <span class="token operator">=</span> rightHalf<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">int</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 좌측 배열과 우측 배열을 비교하여 병합</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> leftLength <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> rightLength<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftHalf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> rightHalf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            inputArray<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> leftHalf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            inputArray <span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> rightHalfli<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            j<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        k<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token class-name">LeftLength</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 좌측 배열에 남은 요소가 있는 경우</span></span>
<span class="line">        inputArray<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> leftHalf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        k<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> nightLength<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 우측 배열에 남은 요소가 있는 경우</span></span>
<span class="line">        inputArray<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> rightHalf<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        j<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        k<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 앞선 삽입 정렬과 마찬가지로 <strong>클라이언트 코드</strong>에서 병합 정렬 메서드를 호출하여 결과를 확인해 보면, 다음 그림과 같이 배열이 잘 정렬되는 것을 볼 수 있습니다.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Client.java"><span>Client.java</span></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i ‹ inputArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            inputArray <span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span> bound<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Before sorted: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>inputArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Sorting</span> sorting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sorting</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 병합 정렬 호출</span></span>
<span class="line">        sorting<span class="token operator">-</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>inputArray<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;After sorted: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>inputArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// Before sorted:</span></span>
<span class="line"><span class="token comment">// [62, 5, 40, 46, 26, 11, 53, 8, 71, 41</span></span>
<span class="line"><span class="token comment">// After sorted:</span></span>
<span class="line"><span class="token comment">// [4, 5, 8, 11, 26, 40, 46, 53, 62, 71]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="퀵-정렬-알고리즘-quick-sort" tabindex="-1"><a class="header-anchor" href="#퀵-정렬-알고리즘-quick-sort"><span>퀵 정렬 알고리즘(Quick Sort)</span></a></h2><h3 id="_1-동작-원리-2" tabindex="-1"><a class="header-anchor" href="#_1-동작-원리-2"><span>1) 동작 원리</span></a></h3><p>퀵 정렬(Quick Sort)도 분할 정복 전략을 사용하는 정렬 알고리즘입니다. 퀵 정렬은 배열에서 **피벗(Pivot)**을 선택하고, 피벗을 기준으로 **파티션(Partition)**을 나누어 배열을 정렬하는 방식으로 진행됩니다. 병합 정렬과 다른 점은 퀵 정렬에서는 병합 과정이 필요하지 않다는 것입니다. 분할 과정에서 피벗으로 선택된 요소들이 배열 내에서 <strong>자신의 최종 위치</strong>에 배치되기 때문입니다.</p><h4 id="피벗-선택-pivot-selection" tabindex="-1"><a class="header-anchor" href="#피벗-선택-pivot-selection"><span>피벗 선택(Pivot Selection)</span></a></h4><p>배열에서 요소 하나를 피벗으로 선택합니다. 피벗 선택 방법은 여러 가지가 있으며, 이에 따라 알고리즘의 성능이 달라지기도 합니다.</p><h4 id="분할-partition" tabindex="-1"><a class="header-anchor" href="#분할-partition"><span>분할(Partition)</span></a></h4><p>선택한 피벗을 기준으로 배열을 두 개의 부분 배열로 분할합니다. 피벗보다 작거나 같은 원소들은 좌측 부분 배열에, 피벗보다 큰 원소들은 우측 부분 배열에 위치하게 됩니다.</p><h4 id="정복-conquer-1" tabindex="-1"><a class="header-anchor" href="#정복-conquer-1"><span>정복(Conquer)</span></a></h4><p>두 개의 부분 배열을 재귀적으로 호출하며, 부분 배열의 크기가 0 또는 1이 될 때까지 반복합니다.</p><figure><img src="https://yozm.wishket.com/media/news/2266/image14.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>예를 들어, 위 그림처럼 <code>[2, 5, 1, 4, 3]</code> 배열을 퀵 정렬로 정렬하는 경우 우선 배열의 가장 마지막 요소인 <code>[3]</code>을 피벗으로 선택합니다. 그다음 피벗 <code>[3]</code>을 기준으로 <code>[2, 1]</code>과 <code>[4, 5]</code> 두 개의 파티션으로 분할합니다. 각 파티션에 대해 재귀 호출을 하여 앞선 과정을 반복하면서 전체 배열을 정렬합니다.</p><h3 id="_2-코드-예시-2" tabindex="-1"><a class="header-anchor" href="#_2-코드-예시-2"><span>2) 코드 예시</span></a></h3><p>다음은 퀵 정렬을 구현한 자바 코드 예시입니다. <code>quickSort()</code> 메서드에서는 정렬 시킬 배열과 배열의 최소 최대 인덱스(low, high index)를 인자(Parameter)로 같이 넘겨줍니다. <code>quickSort()</code> 메서드에서는 다음 피벗을 리턴하는 <code>partition()</code>를 호출하고, 리턴 받은 피벗을 기준으로 분할된 좌측, 우측 배열을 재귀 호출합니다.</p><figure><img src="https://yozm.wishket.com/media/news/2266/image10.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>partition()</code> 메서드에서는 배열의 마지막 요소를 피벗으로 설정하고, 반복문으로 피벗보다 작은 요소는 좌측 부분 배열에 배치하고, 큰 요소는 우측 부분 배열에 배치합니다. 반복문이 끝나면 해당 피벗을 좌측 배열의 마지막, 즉 좌측 배열과 우측 배열의 사이에 위치 시켜 최종적인 위치를 확정합니다.</p><figure><img src="https://yozm.wishket.com/media/news/2266/image5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이제 클라이언트 코드에서 앞서 구현한 퀵 정렬을 실행합니다. 그러면 다음 그림과 같이 퀵 정렬도 정상적으로 동작하는 것을 살펴볼 수 있습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2266/image12.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="각-정렬-알고리즘-시간-복잡도-비교-분석" tabindex="-1"><a class="header-anchor" href="#각-정렬-알고리즘-시간-복잡도-비교-분석"><span>각 정렬 알고리즘 시간 복잡도 비교 분석</span></a></h2><h3 id="_1-시간-복잡도-분석" tabindex="-1"><a class="header-anchor" href="#_1-시간-복잡도-분석"><span>1) 시간 복잡도 분석</span></a></h3><p>시간 복잡도는 <strong>알고리즘의 효율성</strong>을 측정하는 지표이며, 어떤 문제를 해결하는 데 어느 정도 시간이 걸리는지를 나타냅니다. 일반적으로 <strong>빅 오(Big O) 표기법</strong>으로 시간 복잡도를 표현하며, 입력 크기에 대한 함수로 나타냅니다.</p><p class="katex-block"><span class="katex-error" title="ParseError: KaTeX parse error: Expected &#39;\\right&#39;, got &#39;EOF&#39; at end of input: …\\right)\\right)
" style="color:#cc0000;">F\\left(right) = O\\left(G\\left(n\\right)\\right) </span></p><p>여기서 수학적으로 깊게 들어가면 조금 복잡해지지만, 간단하게 표현하자면 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">G\\left(n\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>이 1차 다항식이면 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\\left(n\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>으로 표기하고, 2차 다항식이면 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\\left(n^{2}\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span>으로 표기합니다. 시간 복잡도는 아래 그림과 같이 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mn>1</mn><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\\left(1\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>이 가장 효율적이며, 다음으로 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mrow></mrow></msub><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\\left(\\log_{}{n}\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.2441em;"><span style="top:-1.7559em;margin-right:0.05em;"><span class="pstrut" style="height:2em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\\left(n\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span> 등이 따릅니다. <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\\left(n\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span> 이후부터는 입력 크기가 커질수록 처리 시간이 급격히 늘기 때문에 비효율적인 알고리즘으로 여겨집니다.</p>`,58)),s("figure",null,[n[18]||(n[18]=s("img",{src:"https://yozm.wishket.com/media/news/2266/image3.png",alt:'출처: Algorithm Analysis & Time Complexity Simplified, Medium (<VPIcon icon="fa-brands fa-medium"/>)',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[17]||(n[17]=t("출처: ")),s("a",z,[n[14]||(n[14]=t("Algorithm Analysis & Time Complexity Simplified, Medium (")),a(k,{icon:"fa-brands fa-medium"}),n[15]||(n[15]=s("code",null,"randerson112358",-1)),n[16]||(n[16]=t(")"))])])]),n[21]||(n[21]=s("h3",{id:"_2-각-알고리즘의-시간-복잡도-비교",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-각-알고리즘의-시간-복잡도-비교"},[s("span",null,"2) 각 알고리즘의 시간 복잡도 비교")])],-1)),n[22]||(n[22]=s("p",null,"알고리즘 시간 복잡도는 최선(Best case), 최악(Worst case), 평균(Average case)으로 나눠서 분석할 수 있습니다. 삽입 정렬, 병합 정렬, 퀵 정렬에 대한 최선, 최악, 평균 시간 복잡도는 다음 표와 같습니다.",-1)),n[23]||(n[23]=s("figure",null,[s("img",{src:"https://yozm.wishket.com/media/news/2266/image6.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),c(" TODO: 테이블화 "),n[24]||(n[24]=l('<h3 id="_3-장단점-및-사용-방법" tabindex="-1"><a class="header-anchor" href="#_3-장단점-및-사용-방법"><span>3) 장단점 및 사용 방법</span></a></h3><p><strong>삽입 정렬</strong>은 구현이 간단한 정렬 알고리즘입니다. 하지만, 평균적으로 O(n2)의 시간 복잡도를 가지기 때문에 일반적으로 비효율적인 알고리즘이라고 할 수 있습니다. 따라서 삽입 정렬 알고리즘은 데이터셋이 극히 제한적인 경우 외에는 잘 사용하지 않습니다.</p><p><strong>병합 정렬</strong>은 최악의 경우에도 어느 정도 성능을 보장하는 정렬 알고리즘입니다. 다만 부분 배열을 저장할 추가적인 메모리가 필요하므로, 데이터셋이 커질수록 공간 복잡도에 대한 고려가 필요합니다. 병합 정렬은 특별히 공간적인 부분에 문제가 없다면, 최악의 경우에도 좋은 성능을 보이기 위해 사용할 수 있습니다.</p><p><strong>퀵 정렬</strong>은 병합 정렬과 달리 추가 메모리가 거의 필요하지 않습니다. 다만 최악의 경우 성능이 떨어질 수 있다는 단점이 있습니다. 따라서 메모리가 제한적인 환경에서 데이터셋이 너무 크지 않을 때 사용하는 것이 좋습니다.</p><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>지금까지 정렬 알고리즘 중 삽입 정렬, 병합 정렬, 퀵 정렬 알고리즘에 대해서 알아보고, 각 알고리즘의 시간 복잡도를 비교해 보았습니다. 정렬 알고리즘의 시간 복잡도에 대해 알고 있으면 특정 조건 하에 가장 적합한 알고리즘을 선택할 수 있으니, 각 알고리즘의 <strong>시간 복잡도 표</strong>는 어느 정도 암기해 두는 것이 좋습니다. 추가로, 위에서 살펴본 정렬 알고리즘 외에도 힙 정렬, 블록 병합 정렬, 인트로 정렬 같은 다양한 정렬 알고리즘도 있으니 참고하길 바랍니다.</p>',7)),c(" TODO: add ARTICLE CARD "),a(i,r(m({title:"알아두면 유용한 정렬 알고리즘과 시간 복잡도 분석",desc:"정렬 알고리즘은 데이터베이스 시스템, 검색 엔진, 머신러닝 알고리즘, 일상생활의 다양한 디지털 서비스에서 활용됩니다. 알고리즘의 효율성은 보통 시간 복잡도(Time Complexity)로 나타내며, 프로그램 성능에 큰 영향을 미칠 수 있으므로 최적화하는 것이 중요합니다. 이번 글에서는 정렬 알고리즘의 종류 중 삽입 정렬, 병합 정렬, 퀵 정렬에 대해 살펴보고, 각 알고리즘의 시간 복잡도를 비교하여 어떤 경우에 사용해야 하는지 알아보도록 하겠습니다.",link:"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2266.html",logo:"https://yozm.wishket.com/favicon.ico",background:"rgba(84,7,224,0.2)"})),null,16)])}const M=g(f,[["render",_]]),j=JSON.parse('{"path":"/yozm.wishket.com/2266.html","title":"알아두면 유용한 정렬 알고리즘과 시간 복잡도 분석","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"알아두면 유용한 정렬 알고리즘과 시간 복잡도 분석","description":"Article(s) > 알아두면 유용한 정렬 알고리즘과 시간 복잡도 분석","icon":"fa-brands fa-java","category":["Java","Algorithms","Article(s)"],"tag":["blog","yozm.wishket.com","java","jdk","algorithms","algorithms-sort","merge-sort"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"알아두면 유용한 정렬 알고리즘과 시간 복잡도 분석\\",\\"image\\":[\\"https://yozm.wishket.com/media/news/2266/image7.png\\",\\"https://yozm.wishket.com/media/news/2266/image13.png\\",\\"https://yozm.wishket.com/media/news/2266/image4.png\\",\\"https://yozm.wishket.com/media/news/2266/image1.png\\",\\"https://yozm.wishket.com/media/news/2266/image2.png\\",\\"https://yozm.wishket.com/media/news/2266/image14.png\\",\\"https://yozm.wishket.com/media/news/2266/image10.png\\",\\"https://yozm.wishket.com/media/news/2266/image5.png\\",\\"https://yozm.wishket.com/media/news/2266/image12.png\\",\\"https://randerson112358.medium.com/algorithm-analysis-time-complexity-simplified-cd39a81fec71\\",\\"https://yozm.wishket.com/media/news/2266/image6.png\\"],\\"datePublished\\":\\"2023-10-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"곰씨네 IT 블로그\\",\\"url\\":\\"https://yozm.wishket.com/magazine/@wisizkai/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2266.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"알아두면 유용한 정렬 알고리즘과 시간 복잡도 분석"}],["meta",{"property":"og:description","content":"Article(s) > 알아두면 유용한 정렬 알고리즘과 시간 복잡도 분석"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/2266/time-money-concept-with-keyboard-calculator-magnifier-notebook-watch-navy-gree_lxKmfSf.jpg"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/2266/time-money-concept-with-keyboard-calculator-magnifier-notebook-watch-navy-gree_lxKmfSf.jpg"}],["meta",{"name":"twitter:image:alt","content":"알아두면 유용한 정렬 알고리즘과 시간 복잡도 분석"}],["meta",{"property":"article:author","content":"곰씨네 IT 블로그"}],["meta",{"property":"article:tag","content":"merge-sort"}],["meta",{"property":"article:tag","content":"algorithms-sort"}],["meta",{"property":"article:tag","content":"algorithms"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-10-12T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 알아두면 유용한 정렬 알고리즘과 시간 복잡도 분석"},{"property":"og:description","content":"알아두면 유용한 정렬 알고리즘과 시간 복잡도 분석"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2266.html"}]],"prev":"/programming/java/articles/README.md","date":"2023-10-12T00:00:00.000Z","isOriginal":false,"author":[{"name":"곰씨네 IT 블로그","url":"https://yozm.wishket.com/magazine/@wisizkai/"}],"cover":"https://yozm.wishket.com/media/news/2266/time-money-concept-with-keyboard-calculator-magnifier-notebook-watch-navy-gree_lxKmfSf.jpg"},"git":{},"readingTime":{"minutes":2.11,"words":633},"filePathRelative":"yozm.wishket.com/2266.md","copyright":{"author":"곰씨네 IT 블로그"}}');export{M as comp,j as data};
