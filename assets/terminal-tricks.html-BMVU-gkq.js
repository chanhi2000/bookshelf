import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as e,f as s,b as r,a as u,t as b,n as h,g as v,w as t,r as l,o as k,e as i}from"./app-BVguHYKu.js";const g={},f={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"};function x(o,n){const c=l("VPCard"),a=l("router-link"),d=l("SiteInfo");return k(),m("div",null,[e("h1",f,[e("a",y,[e("span",null,b(o.$frontmatter.title)+" 관련",1)])]),s(c,h(v({title:"Shell > Article(s)",desc:"Article(s)",link:"/programming/sh/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e("nav",w,[e("ul",null,[e("li",null,[s(a,{to:"#using-ctrl-keys"},{default:t(()=>n[0]||(n[0]=[i("Using Ctrl keys")])),_:1,__:[0]})]),e("li",null,[s(a,{to:"#change-case"},{default:t(()=>n[1]||(n[1]=[i("Change case")])),_:1,__:[1]})]),e("li",null,[s(a,{to:"#run-history-number"},{default:t(()=>n[2]||(n[2]=[i("Run history number")])),_:1,__:[2]})]),e("li",null,[s(a,{to:"#run-last-command"},{default:t(()=>n[3]||(n[3]=[i("Run last command")])),_:1,__:[3]})]),e("li",null,[s(a,{to:"#run-last-command-and-change-some-parameter-using-caret-substitution"},{default:t(()=>n[4]||(n[4]=[i("Run last command and change some parameter using caret substitution")])),_:1,__:[4]})]),e("li",null,[s(a,{to:"#run-past-command-that-began-with"},{default:t(()=>n[5]||(n[5]=[i("Run past command that began with")])),_:1,__:[5]})]),e("li",null,[s(a,{to:"#bash-globbing"},{default:t(()=>n[6]||(n[6]=[i("Bash globbing")])),_:1,__:[6]})]),e("li",null,[s(a,{to:"#some-handy-environment-variables"},{default:t(()=>n[7]||(n[7]=[i("Some handy environment variables")])),_:1,__:[7]})]),e("li",null,[s(a,{to:"#using-vi-mode-in-your-shell"},{default:t(()=>n[8]||(n[8]=[i("Using vi-mode in your shell")])),_:1,__:[8]})])])]),n[9]||(n[9]=e("hr",null,null,-1)),s(d,{name:"Terminal Tricks | Bash-Oneliner",desc:"A collection of handy Bash One-Liners and terminal tricks for data processing and Linux system maintenance.",url:"https://onceupon.github.io/Bash-Oneliner/#terminal-tricks",logo:"https://avatars.githubusercontent.com/u/7253159?v=4",preview:"https://repository-images.githubusercontent.com/61099017/cde6c580-765d-11e9-9f0a-9d94f2bdf421"}),n[10]||(n[10]=r('<h2 id="using-ctrl-keys" tabindex="-1"><a class="header-anchor" href="#using-ctrl-keys"><span>Using Ctrl keys</span></a></h2><ul><li><kbd>Ctrl</kbd>+<kbd>a</kbd>: move to the beginning of line.</li><li><kbd>Ctrl</kbd>+<kbd>d</kbd>: if you&#39;ve type something, Ctrl + d deletes the character under the cursor, else, it escapes the current shell.</li><li><kbd>Ctrl</kbd>+<kbd>e</kbd>: move to the end of line.</li><li><kbd>Ctrl</kbd>+<kbd>k</kbd>: delete all text from the cursor to the end of line.</li><li><kbd>Ctrl</kbd>+<kbd>l</kbd>: equivalent to clear.</li><li><kbd>Ctrl</kbd>+<kbd>n</kbd>: same as Down arrow.</li><li><kbd>Ctrl</kbd>+<kbd>p</kbd>: same as Up arrow.</li><li><kbd>Ctrl</kbd>+<kbd>q</kbd>: to resume output to terminal after Ctrl + s.</li><li><kbd>Ctrl</kbd>+<kbd>r</kbd>: begins a backward search through command history.(keep pressing Ctrl + r to move backward)</li><li><kbd>Ctrl</kbd>+<kbd>s</kbd>: to stop output to terminal.</li><li><kbd>Ctrl</kbd>+<kbd>t</kbd>: transpose the character before the cursor with the one under the cursor, press Esc + t to transposes the two words before the cursor.</li><li><kbd>Ctrl</kbd>+<kbd>u</kbd>: cut the line before the cursor; then Ctrl + y paste it</li><li><kbd>Ctrl</kbd>+<kbd>w</kbd>: cut the word before the cursor; then Ctrl + y paste it</li><li><kbd>Ctrl</kbd>+<kbd>x</kbd>+<kbd>backspace</kbd> : delete all text from the beginning of line to the cursor.</li><li><kbd>Ctrl</kbd>+<kbd>x</kbd>+<kbd>Ctrl</kbd>+<kbd>e</kbd> : launch editor defined by $EDITOR to input your command. Useful for multi-line commands.</li><li><kbd>Ctrl</kbd>+<kbd>z</kbd>: stop current running process and keep it in background. You can use <code>fg</code> to continue the process in the foreground, or <code>bg</code> to continue the process in the background.</li><li><kbd>Ctrl</kbd>+<kbd>_</kbd>: undo typing.</li></ul><hr><h2 id="change-case" tabindex="-1"><a class="header-anchor" href="#change-case"><span>Change case</span></a></h2><ul><li><kbd>Esc</kbd>+<kbd>u</kbd>: converts text from cursor to the end of the word to uppercase.</li><li><kbd>Esc</kbd>+<kbd>l</kbd>: converts text from cursor to the end of the word to lowercase.</li><li><kbd>Esc</kbd>+<kbd>c</kbd>: converts letter under the cursor to uppercase, rest of the word to lowercase.</li></ul>',5)),u(" https://raw.githubusercontent.com/onceupon/Bash-Oneliner/master/README.md "),n[11]||(n[11]=r(`<hr><h2 id="run-history-number" tabindex="-1"><a class="header-anchor" href="#run-history-number"><span>Run history number</span></a></h2><blockquote><p><em>e.g.</em> <code>53</code></p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token operator">!</span><span class="token number">53</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="run-last-command" tabindex="-1"><a class="header-anchor" href="#run-last-command"><span>Run last command</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token operator">!</span><span class="token operator">!</span></span>
<span class="line"><span class="token comment"># run the previous command using sudo</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token operator">!</span><span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="run-last-command-and-change-some-parameter-using-caret-substitution" tabindex="-1"><a class="header-anchor" href="#run-last-command-and-change-some-parameter-using-caret-substitution"><span>Run last command and change some parameter using caret substitution</span></a></h2><blockquote><p><em>e.g.</em> last command: <code>echo &#39;aaa&#39;</code> -&gt; rerun as: <code>echo &#39;bbb&#39;</code></p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment">#last command: echo &#39;aaa&#39;</span></span>
<span class="line">^aaa^bbb</span>
<span class="line"></span>
<span class="line"><span class="token comment">#echo &#39;bbb&#39;</span></span>
<span class="line"><span class="token comment">#bbb</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#Notice that only the first aaa will be replaced, if you want to replace all &#39;aaa&#39;, use &#39;:&amp;&#39; to repeat it:</span></span>
<span class="line">^aaa^bbb^:<span class="token operator">&amp;</span></span>
<span class="line"><span class="token comment">#or</span></span>
<span class="line"><span class="token operator">!</span><span class="token operator">!</span>:gs/aaa/bbb/</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="run-past-command-that-began-with" tabindex="-1"><a class="header-anchor" href="#run-past-command-that-began-with"><span>Run past command that began with</span></a></h2><blockquote><p><em>e.g.</em> <code>cat filename</code></p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token operator">!</span>cat</span>
<span class="line"><span class="token comment"># or</span></span>
<span class="line"><span class="token operator">!</span>c</span>
<span class="line"><span class="token comment"># run cat filename again</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="bash-globbing" tabindex="-1"><a class="header-anchor" href="#bash-globbing"><span>Bash globbing</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment"># &#39;*&#39; serves as a &quot;wild card&quot; for filename expansion.</span></span>
<span class="line">/etc/pa*wd    <span class="token comment">#/etc/passwd</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># &#39;?&#39; serves as a single-character &quot;wild card&quot; for filename expansion.</span></span>
<span class="line">/b?n/?at      <span class="token comment">#/bin/cat</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># &#39;[]&#39; serves to match the character from a range.</span></span>
<span class="line"><span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token punctuation">[</span>a-z<span class="token punctuation">]</span>*   <span class="token comment">#list all files with alphabet in its filename.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># &#39;{}&#39; can be used to match filenames with more than one patterns</span></span>
<span class="line"><span class="token function">ls</span> *.<span class="token punctuation">{</span>sh,py<span class="token punctuation">}</span>   <span class="token comment">#list all .sh and .py files</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="some-handy-environment-variables" tabindex="-1"><a class="header-anchor" href="#some-handy-environment-variables"><span>Some handy environment variables</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$0   :name of shell or shell script.</span>
<span class="line">$1, $2, $3, ... :positional parameters.</span>
<span class="line">$#   :number of positional parameters.</span>
<span class="line">$?   :most recent foreground pipeline exit status.</span>
<span class="line">$-   :current options set for the shell.</span>
<span class="line">$$   :pid of the current shell (not subshell).</span>
<span class="line">$!   :is the PID of the most recent background command.</span>
<span class="line">$_   :last argument of the previously executed command, or the path of the bash script.</span>
<span class="line"></span>
<span class="line">$DESKTOP_SESSION     current display manager</span>
<span class="line">$EDITOR   preferred text editor.</span>
<span class="line">$LANG   current language.</span>
<span class="line">$PATH   list of directories to search for executable files (i.e. ready-to-run programs)</span>
<span class="line">$PWD    current directory</span>
<span class="line">$SHELL  current shell</span>
<span class="line">$USER   current username</span>
<span class="line">$HOSTNAME   current hostname</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="using-vi-mode-in-your-shell" tabindex="-1"><a class="header-anchor" href="#using-vi-mode-in-your-shell"><span>Using vi-mode in your shell</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token builtin class-name">set</span> <span class="token parameter variable">-o</span> <span class="token function">vi</span></span>
<span class="line"><span class="token comment"># change bash shell to vi mode</span></span>
<span class="line"><span class="token comment"># then hit the Esc key to change to vi edit mode (when \`set -o vi\` is set)</span></span>
<span class="line">k               <span class="token comment"># in vi edit mode - previous command</span></span>
<span class="line">j               <span class="token comment"># in vi edit mode - next command</span></span>
<span class="line"><span class="token number">0</span>               <span class="token comment"># in vi edit mode - beginning of the command</span></span>
<span class="line">R               <span class="token comment"># in vi edit mode - replace current characters of command</span></span>
<span class="line">2w              <span class="token comment"># in vi edit mode - next to 2nd word</span></span>
<span class="line">b               <span class="token comment"># in vi edit mode - previous word</span></span>
<span class="line">i               <span class="token comment"># in vi edit mode - go to insert mode</span></span>
<span class="line"><span class="token function">v</span>               <span class="token comment"># in vi edit mode - edit current command in vi</span></span>
<span class="line"><span class="token function">man</span> <span class="token number">3</span> readline  <span class="token comment"># man page for complete readline mapping</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24))])}const T=p(g,[["render",x]]),$=JSON.parse('{"path":"/onceupon.github.io/terminal-tricks.html","title":"Terminal Tricks","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Terminal Tricks","description":"Article(s) > Terminal Tricks","icon":"iconfont icon-shell","category":["Shell","Article(s)"],"tag":["blog","onceupon.github.io","system-design"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Terminal Tricks\\",\\"image\\":[\\"https://repository-images.githubusercontent.com/61099017/cde6c580-765d-11e9-9f0a-9d94f2bdf421\\"],\\"datePublished\\":\\"2023-08-11T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/onceupon.github.io/terminal-tricks.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Terminal Tricks"}],["meta",{"property":"og:description","content":"Article(s) > Terminal Tricks"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://repository-images.githubusercontent.com/61099017/cde6c580-765d-11e9-9f0a-9d94f2bdf421"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://repository-images.githubusercontent.com/61099017/cde6c580-765d-11e9-9f0a-9d94f2bdf421"}],["meta",{"name":"twitter:image:alt","content":"Terminal Tricks"}],["meta",{"property":"article:tag","content":"system-design"}],["meta",{"property":"article:tag","content":"onceupon.github.io"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-08-11T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Terminal Tricks"},{"property":"og:description","content":"Terminal Tricks"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/onceupon.github.io/terminal-tricks.html"}]],"prev":"/programming/sh/articles/README.md","date":"2023-08-11T00:00:00.000Z","isOriginal":false,"cover":"https://repository-images.githubusercontent.com/61099017/cde6c580-765d-11e9-9f0a-9d94f2bdf421"},"git":{},"readingTime":{"minutes":2.85,"words":854},"filePathRelative":"onceupon.github.io/terminal-tricks.md"}');export{T as comp,$ as data};
