import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as s,f as t,b as u,a as h,t as f,n as k,g as m,w as e,e as a,r as o,o as y}from"./app-BVguHYKu.js";const w={},q={id:"frontmatter-title-관련",tabindex:"-1"},j={class:"header-anchor",href:"#frontmatter-title-관련"},I={class:"table-of-contents"},x={class:"hint-container info"},C={href:"https://developer.mozilla.org/en-US/docs/Web/API/ClipboardItem",target:"_blank",rel:"noopener noreferrer"},S={href:"https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/write",target:"_blank",rel:"noopener noreferrer"},P={href:"https://stackoverflow.com/a/62911176/52160",target:"_blank",rel:"noopener noreferrer"},T={class:"hint-container info"};function A(i,n){const d=o("VPCard"),l=o("router-link"),g=o("SiteInfo"),p=o("RouteLink"),c=o("CodePen"),r=o("VPIcon");return y(),b("div",null,[s("h1",q,[s("a",j,[s("span",null,f(i.$frontmatter.title)+" 관련",1)])]),t(d,k(m({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",I,[s("ul",null,[s("li",null,[t(l,{to:"#before-we-begin"},{default:e(()=>n[0]||(n[0]=[a("Before we begin…")])),_:1,__:[0]})]),s("li",null,[t(l,{to:"#the-clipboard-api"},{default:e(()=>n[1]||(n[1]=[a("The Clipboard API")])),_:1,__:[1]})]),s("li",null,[t(l,{to:"#writing-to-the-clipboard"},{default:e(()=>n[2]||(n[2]=[a("Writing to the Clipboard")])),_:1,__:[2]})]),s("li",null,[t(l,{to:"#with-great-power"},{default:e(()=>n[3]||(n[3]=[a("With great power…")])),_:1,__:[3]})])])]),n[29]||(n[29]=s("hr",null,null,-1)),t(g,{name:"Writing to the Clipboard in JavaScript",desc:"The most basic use case, writing a bit of text to the user's clipboard, is mercifully easy. But there is plenty more to know. Did you know writing image data to the clipboard ONLY works with PNG?",url:"https://frontendmasters.com/blog/writing-to-the-clipboard-in-javascript",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3629"}),s("p",null,[n[5]||(n[5]=a("In my ")),t(p,{to:"/frontendmasters.com/reading-from-the-clipboard-in-javascript.html"},{default:e(()=>n[4]||(n[4]=[a("last article")])),_:1,__:[4]}),n[6]||(n[6]=a(", I showed you how to enable your website to read a visitor's clipboard. Now I'm going to follow up that guide with a look at ")),n[7]||(n[7]=s("em",null,"writing",-1)),n[8]||(n[8]=a(" to the clipboard. It goes without saying that in any use of this type of functionality, you should proceed with care and, most of all, respect for your visitors. I'll talk a bit about what that means later in the article, but for now, let's look at the API."))]),s("div",x,[n[12]||(n[12]=s("p",{class:"hint-container-title"},"Article Series",-1)),s("ol",null,[s("li",null,[t(p,{to:"/frontendmasters.com/reading-from-the-clipboard-in-javascript.html"},{default:e(()=>n[9]||(n[9]=[a("Reading from the Clipboard in JavaScript")])),_:1,__:[9]})]),s("li",null,[t(p,{to:"/frontendmasters.com/writing-to-the-clipboard-in-javascript.html"},{default:e(()=>n[10]||(n[10]=[a("Writing to the Clipboard in JavaScript")])),_:1,__:[10]})]),s("li",null,[t(p,{to:"/frontendmasters.com/handling-paste-events-in-javascript.html"},{default:e(()=>n[11]||(n[11]=[a("Handling Paste Events in JavaScript")])),_:1,__:[11]})])])]),n[30]||(n[30]=u(`<hr><h2 id="before-we-begin" tabindex="-1"><a class="header-anchor" href="#before-we-begin"><span>Before we begin…</span></a></h2><p>As I said last time, clipboard functionality on the web requires a “secure context”. So if you&#39;re running an http site (as opposed to an https site), these features will not work. I&#39;d highly encourage you to get your site on https. That being said, these features, and others like them that require secure contexts, will still work on <code>http://localhost</code>. There&#39;s no need to set up a temporary certificate when doing local testing.</p><hr><h2 id="the-clipboard-api" tabindex="-1"><a class="header-anchor" href="#the-clipboard-api"><span>The Clipboard API</span></a></h2><p>I covered this last time, but in case you didn&#39;t read the previous article in this series, the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard" target="_blank" rel="noopener noreferrer">Clipboard API</a> is supported in JavaScript via <code>navigator.clipboard</code> and has excellent cross-platform support:</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/08/write-clipboard-browser-support.webp?resize=788%2C975&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>This feature will also prompt the user for permission so remember to handle cases where they reject the request.</p><hr><h2 id="writing-to-the-clipboard" tabindex="-1"><a class="header-anchor" href="#writing-to-the-clipboard"><span>Writing to the Clipboard</span></a></h2><p>When I last discussed the clipboard API, I mentioned how it had two APIs for reading from the clipboard, we had a <code>readText</code> method tailored for, you guessed it, reading text, and a more generic <code>read</code> method for handling complex data. Unsurprisingly, we&#39;ve got the same on the write side:</p><ul><li><code>write</code></li><li><code>writeText</code></li></ul><p>And just like before, <code>writeText</code> is specifically for writing text to the clipboard while <code>write</code> gives you additional flexibility.</p><p>At the simplest, you can use it like so:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That&#39;s literally it. Here&#39;s a Pen demonstrating an example of this, but you will most likely need to make use of <a href="https://codepen.io/pen/debug/xxojZOL" target="_blank" rel="noopener noreferrer">the &#39;debug&#39; link</a> to see this in action due to the permissions complication of cross-domain iframes:</p>`,16)),t(c,{user:"chriscoyier","slug-hash":"xxojZOL",title:"Clipboard Writing","default-tab":["css","result"],theme:i.$isDarkmode?"dark":"light"},null,8,["theme"]),n[31]||(n[31]=u(`<p>One pretty simple and actually practical use-case for something like this is quickly copying links to the user&#39;s clipboard. Let&#39;s consider some simple HTML:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.raymondcamden.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>My blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://frontendmasters.com/blog/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Frontend Masters blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What I want to do is:</p><ol><li>Pick up all the links (filtered by something logical)</li><li>Automatically add a UI item that will copy the URL to the clipboard</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">links <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;div.example p:first-child a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">links<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> copy <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  copy<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&quot;[Copy]&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  copy<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  a<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I begin with a selector for the links I care about, and for each, I append a <code>&lt;button&gt;</code> element with <code>&quot;Copy URL of Link&quot;</code> as the text. Each new element has a click handler to support copying its related URL to the clipboard. As before, here&#39;s the CodePen but expect to need <a href="https://codepen.io/pen/debug/bGPMEvN" target="_blank" rel="noopener noreferrer">the debug link</a>:</p>`,6)),t(c,{user:"chriscoyier","slug-hash":"bGPMEvN",title:"Clipboard Writing 2","default-tab":["css","result"],theme:i.$isDarkmode?"dark":"light"},null,8,["theme"]),n[32]||(n[32]=s("p",null,"As a quick note, the UX of this demo could be improved, for example, notifying the user in some small way that the text was successfully copied.",-1)),n[33]||(n[33]=s("p",null,[a("Now let's kick it up a notch and look into how to support binary data with the "),s("code",null,"write"),a(" method.")],-1)),s("p",null,[n[15]||(n[15]=a("The basic interface for ")),n[16]||(n[16]=s("code",null,"write",-1)),n[17]||(n[17]=a(" is to pass an array of ")),s("a",C,[t(r,{icon:"fa-brands fa-firefox"}),n[13]||(n[13]=s("code",null,"ClipboardItem",-1))]),n[18]||(n[18]=a(" objects. The MDN docs for ")),s("a",S,[t(r,{icon:"fa-brands fa-firefox"}),n[14]||(n[14]=a("write"))]),n[19]||(n[19]=a(" provide this example:"))]),n[34]||(n[34]=u(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>text<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">ClipboardItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token operator">:</span> blob <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That seems sensible. For my first attempt, I decided to add simple “click to copy” support to an image. So consider this HTML:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>house.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a house<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>I could support this like so:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> init<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> copyImagetoCB<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">copyImagetoCB</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// should be dynamic</span></span>
<span class="line">  <span class="token keyword">let</span> type <span class="token operator">=</span> <span class="token string">&#39;image/jpeg&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> dataReq <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> dataReq<span class="token punctuation">.</span><span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> cbData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">ClipboardItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token operator">:</span> blob <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cbData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Done&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This code picks up the one and only image, adds a click handler, and makes use of the MDN sample code, updated to use a hard-coded type (JPG) and to fetch the binary data. (This kind of bugs me. I know the image is loaded in the DOM so it feels like I should be able to get access to the bits without another network call, but from what I can see, you can only do this by using a Canvas object.)</p><p>But when run, you get something interesting:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="log"><span>log</span></div><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">Uncaught (in promise) DOMException: Failed to execute &#39;write&#39; on &#39;Clipboard&#39;: Type image/jpeg not supported on write.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>What??? Turns out, this is actually documented on MDN:</p><blockquote><p>Browsers commonly support writing text, HTML, and PNG image data</p></blockquote><p>This seems… crazy. I mean I definitely get having some restrictions, but it feels odd for only one type of image to be supported. However, changing my HTML:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>house.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a house<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And the type in my JavaScript:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> type <span class="token operator">=</span> <span class="token string">&#39;image/png&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Confirms that it works. You can see this yourself below (and again, <a href="https://codepen.io/pen/debug/XWLqXqe" target="_blank" rel="noopener noreferrer">hit that ‘Debug&#39; link</a>):</p>`,15)),t(c,{user:"chriscoyier","slug-hash":"XWLqXqe",title:"Clipboard Writing <img>","default-tab":["css","result"],theme:i.$isDarkmode?"dark":"light"},null,8,["theme"]),s("p",null,[n[21]||(n[21]=a("So remember above when I said I didn't want to use a canvas? I did some Googling and turns out: I need to use a canvas. I found an excellent example of this on StackOverflow in this ")),s("a",P,[t(r,{icon:"fa-brands fa-stack-overflow"}),n[20]||(n[20]=a("answer"))]),n[22]||(n[22]=a(". In it, the author uses a temporary canvas, writes the image data to it, and uses ")),n[23]||(n[23]=s("code",null,"toBlob",-1)),n[24]||(n[24]=a(" while specifying a PNG image type. Whew. So let's see if we can build a generic solution."))]),n[35]||(n[35]=u(`<p>First, I updated my HTML to support two images:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>photos<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    JPG:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>house.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a house<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    PNG:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>house.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a house<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I labeled them as I was using the same picture each and needed a simple way to know which was which.</p><p>Next, I updated my code to pick up <em>all</em> images in that particular div:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> init<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> imgs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;div.photos img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  imgs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    i<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> copyImagetoCB<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now for the fun part. I&#39;m going to update my code to detect the type of the image. For PNG&#39;s, it will use what I showed before, and for JPGs, I&#39;m using a modified version of the StackOverflow answer. Here&#39;s the updated code:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">copyImagetoCB</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> type <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> blob<span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// support JPG/PNG only</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&quot;jpg&quot;</span> <span class="token operator">||</span> type <span class="token operator">===</span> <span class="token string">&quot;jpeg&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    blob <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">setCanvasImage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> dataReq <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> dataReq<span class="token punctuation">.</span><span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;image/png&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> cbData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">ClipboardItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&quot;image/png&quot;</span><span class="token operator">:</span> blob <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cbData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">setCanvasImage</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;canvas&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> ctx <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      c<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>naturalWidth<span class="token punctuation">;</span></span>
<span class="line">      c<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>naturalHeight<span class="token punctuation">;</span></span>
<span class="line">      ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      c<span class="token punctuation">.</span><span class="token function">toBlob</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">resolve</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;image/png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    img<span class="token punctuation">.</span>src <span class="token operator">=</span> path<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You&#39;ll note that the main difference is how we get the blob. For JPGs, we&#39;re using <code>setCanvasImage</code> to handle the canvas shenanigans (that&#39;s what I&#39;m calling it) and return a PNG blob.</p><p>You can see this in the CodePen below, if, again, you click out to the debug view. Note that I had to add one additional line:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">img<span class="token punctuation">.</span>crossOrigin <span class="token operator">=</span> <span class="token string">&quot;anonymous&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>As without it, you get a tainted canvas error. Sounds dirty.</p>`,11)),t(c,{user:"chriscoyier","slug-hash":"dyBeGeg",title:"Clipboard Writing Img 2","default-tab":["css","result"],theme:i.$isDarkmode?"dark":"light"},null,8,["theme"]),n[36]||(n[36]=s("hr",null,null,-1)),n[37]||(n[37]=s("h2",{id:"with-great-power",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#with-great-power"},[s("span",null,"With great power…")])],-1)),n[38]||(n[38]=s("p",null,"It goes without saying that this API could be abused, or, more likely, used in kind of a jerky manner. So for example, if you give the user the ability to click to copy a URL, don't do sneaky crap like:",-1)),n[39]||(n[39]=s("p",null,'"(url here) - This URL comes from the awesome site X and you should visit it for deals!"',-1)),n[40]||(n[40]=s("p",null,"If you are expressing to the user that you are copying something in particular, adding to it or modifying it is simply rude. I'd even suggest that copying a short URL link instead of the original would be bad form as well.",-1)),s("div",T,[n[28]||(n[28]=s("p",{class:"hint-container-title"},"Article Series",-1)),s("ol",null,[s("li",null,[t(p,{to:"/frontendmasters.com/reading-from-the-clipboard-in-javascript.html"},{default:e(()=>n[25]||(n[25]=[a("Reading from the Clipboard in JavaScript")])),_:1,__:[25]})]),s("li",null,[t(p,{to:"/frontendmasters.com/writing-to-the-clipboard-in-javascript.html"},{default:e(()=>n[26]||(n[26]=[a("Writing to the Clipboard in JavaScript")])),_:1,__:[26]})]),s("li",null,[t(p,{to:"/frontendmasters.com/handling-paste-events-in-javascript.html"},{default:e(()=>n[27]||(n[27]=[a("Handling Paste Events in JavaScript")])),_:1,__:[27]})])])]),h(" TODO: add ARTICLE CARD "),t(d,k(m({title:"Writing to the Clipboard in JavaScript",desc:"The most basic use case, writing a bit of text to the user's clipboard, is mercifully easy. But there is plenty more to know. Did you know writing image data to the clipboard ONLY works with PNG?",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/writing-to-the-clipboard-in-javascript.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const J=v(w,[["render",A]]),N=JSON.parse('{"path":"/frontendmasters.com/writing-to-the-clipboard-in-javascript.html","title":"Writing to the Clipboard in JavaScript","lang":"en-US","frontmatter":{"lang":"en-US","title":"Writing to the Clipboard in JavaScript","description":"Article(s) > Writing to the Clipboard in JavaScript","icon":"fa-brands fa-js","category":["JavaScript","Article(s)"],"tag":["blog","frontendmasters.com","js","javascript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Writing to the Clipboard in JavaScript\\",\\"image\\":[\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/08/write-clipboard-browser-support.webp?resize=788%2C975&ssl=1\\"],\\"datePublished\\":\\"2024-08-23T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Raymond Camden\\",\\"url\\":\\"https://frontendmasters.com/blog/author/raymondcamden/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/writing-to-the-clipboard-in-javascript.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Writing to the Clipboard in JavaScript"}],["meta",{"property":"og:description","content":"Article(s) > Writing to the Clipboard in JavaScript"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3629"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3629"}],["meta",{"name":"twitter:image:alt","content":"Writing to the Clipboard in JavaScript"}],["meta",{"property":"article:author","content":"Raymond Camden"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-08-23T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Writing to the Clipboard in JavaScript"},{"property":"og:description","content":"Writing to the Clipboard in JavaScript"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/writing-to-the-clipboard-in-javascript.html"}]],"prev":"/programming/js/articles/README.md","date":"2024-08-23T00:00:00.000Z","isOriginal":false,"author":[{"name":"Raymond Camden","url":"https://frontendmasters.com/blog/author/raymondcamden/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/3629"},"git":{},"readingTime":{"minutes":6.07,"words":1820},"filePathRelative":"frontendmasters.com/writing-to-the-clipboard-in-javascript.md","copyright":{"author":"Raymond Camden"}}');export{J as comp,N as data};
