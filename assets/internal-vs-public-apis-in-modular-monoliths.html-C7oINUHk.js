import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as a,b as i,a as v,t as g,n as r,g as u,w as t,e,r as p,o as b}from"./app-BVguHYKu.js";const y={},w={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"};function I(d,n){const c=p("VPCard"),o=p("router-link"),m=p("SiteInfo"),l=p("RouteLink");return b(),h("div",null,[s("h1",w,[s("a",f,[s("span",null,g(d.$frontmatter.title)+" 관련",1)])]),a(c,r(u({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a(c,r(u({title:"System Design > Article(s)",desc:"Article(s)",link:"/academics/system-design/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",A,[s("ul",null,[s("li",null,[a(o,{to:"#the-reality-of-module-communication"},{default:t(()=>n[0]||(n[0]=[e("The Reality of Module Communication")])),_:1,__:[0]})]),s("li",null,[a(o,{to:"#why-we-need-public-apis"},{default:t(()=>n[1]||(n[1]=[e("Why We Need Public APIs")])),_:1,__:[1]})]),s("li",null,[a(o,{to:"#controlling-what-gets-exposed"},{default:t(()=>n[2]||(n[2]=[e("Controlling What Gets Exposed")])),_:1,__:[2]})]),s("li",null,[a(o,{to:"#protecting-your-module-s-data"},{default:t(()=>n[3]||(n[3]=[e("Protecting Your Module's Data")])),_:1,__:[3]}),s("ul",null,[s("li",null,[a(o,{to:"#_1-separate-schemas"},{default:t(()=>n[4]||(n[4]=[e("1. Separate Schemas")])),_:1,__:[4]})]),s("li",null,[a(o,{to:"#_2-different-connection-strings"},{default:t(()=>n[5]||(n[5]=[e("2. Different Connection Strings")])),_:1,__:[5]})]),s("li",null,[a(o,{to:"#_3-read-models"},{default:t(()=>n[6]||(n[6]=[e("3. Read Models")])),_:1,__:[6]})])])]),s("li",null,[a(o,{to:"#dealing-with-cross-cutting-concerns"},{default:t(()=>n[7]||(n[7]=[e("Dealing with Cross-Cutting Concerns")])),_:1,__:[7]})]),s("li",null,[a(o,{to:"#summary"},{default:t(()=>n[8]||(n[8]=[e("Summary")])),_:1,__:[8]})])])]),n[21]||(n[21]=s("hr",null,null,-1)),a(m,{name:"Internal vs. Public APIs in Modular Monoliths",desc:"Every article about modular monoliths tells you to use public APIs between modules, but they rarely explain why these APIs exist or how to design them properly. After building several large-scale modular monoliths, I've learned that public APIs are not just about clean code - they're about controlling chaos.",url:"https://milanjovanovic.tech/blog/internal-vs-public-apis-in-modular-monoliths",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_120.png"}),n[22]||(n[22]=i('<p>Every article about modular monoliths tells you to use public APIs between modules. But they rarely tell you why these APIs exist or how to design them properly.</p><p>A modular monolith organizes an application into independent modules that have clear boundaries. The module boundaries are logical and group related business capabilities together.</p><p>After building several large-scale modular monoliths, I&#39;ve learned that public APIs are not just about clean code - they&#39;re about controlling chaos. Let me show you what I mean.</p><hr><h2 id="the-reality-of-module-communication" tabindex="-1"><a class="header-anchor" href="#the-reality-of-module-communication"><span>The Reality of Module Communication</span></a></h2><p>Here&#39;s what nobody tells you about public APIs in modular monoliths: they represent intentional coupling points. Yes, you read that right. Public APIs don&#39;t eliminate coupling - they make it explicit and controllable.</p><p>When Module A needs something from Module B, you have three options:</p><ol><li>Let Module A read directly from Module B&#39;s database</li><li>Let Module A access Module B&#39;s internal services</li><li>Create a public API that explicitly defines what Module A can do</li></ol><figure><img src="https://milanjovanovic.tech/blogs/mnw_120/module_communication_options.png?imwidth=3840" alt="Module communication options: direct database access, calling internal services, calling public API." tabindex="0" loading="lazy"><figcaption>Module communication options: direct database access, calling internal services, calling public API.</figcaption></figure><p>The first two options lead to chaos. I&#39;ve seen entire systems become unmaintainable because every module was freely accessing the data and services of other modules.</p>',10)),s("p",null,[n[10]||(n[10]=e("The previous options are examples of synchronous communication between modules. But you can also implement ")),a(l,{to:"/milanjovanovic.tech/modular-monolith-communication-patterns.html"},{default:t(()=>n[9]||(n[9]=[s("strong",null,"asynchonrous module communication",-1)])),_:1,__:[9]}),n[11]||(n[11]=e(" using messaging. We have to adjust the technical implementation. However, modules still have a public API in message contracts."))]),n[23]||(n[23]=i(`<hr><h2 id="why-we-need-public-apis" tabindex="-1"><a class="header-anchor" href="#why-we-need-public-apis"><span>Why We Need Public APIs</span></a></h2><p>Public APIs serve three critical purposes:</p><ol><li><strong>Contract Definition</strong>: They explicitly state what other modules can and cannot do</li><li><strong>Dependency Control</strong>: They force you to think about module dependencies</li><li><strong>Change Management</strong>: They provide a stable interface while allowing internal changes</li></ol><p>Here&#39;s a practical example. Imagine you have an Orders module and a Shipping module.</p><p>This is what you want to avoid:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShippingService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">OrdersDbContext</span> _ordersDb<span class="token punctuation">;</span> <span class="token comment">// Direct database access</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ShipOrder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> orderId<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Directly reading from another module&#39;s database</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> <span class="token keyword">await</span> _ordersDb<span class="token punctuation">.</span>Orders</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>Lines<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">FirstOrDefaultAsync</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>Id <span class="token operator">==</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// What happens if the Orders module changes its schema?</span></span>
<span class="line">        <span class="token comment">// What if it moves to a different database?</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is what you want to achieve instead:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShippingService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IOrdersModule</span> _orders<span class="token punctuation">;</span> <span class="token comment">// Public API access</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ShipOrder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> orderId<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Using the public API</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> <span class="token keyword">await</span> _orders<span class="token punctuation">.</span><span class="token function">GetOrderForShippingAsync</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// The Orders module can change its internals</span></span>
<span class="line">        <span class="token comment">// as long as it maintains this contract</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="controlling-what-gets-exposed" tabindex="-1"><a class="header-anchor" href="#controlling-what-gets-exposed"><span>Controlling What Gets Exposed</span></a></h2><p>The hardest part of designing public APIs is deciding what to expose. Here&#39;s my rule of thumb:</p><ol><li>Start with nothing public</li><li>Expose only what other modules actually need</li><li>Design the API around use cases, not data</li></ol><p>Here&#39;s how this looks in practice:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IOrdersModule</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Don&#39;t expose generic CRUD operations</span></span>
<span class="line">    <span class="token comment">// Task&lt;Order&gt; GetOrderAsync(string orderId); // Bad</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Instead, expose specific use cases</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>OrderShippingInfo<span class="token punctuation">&gt;</span></span> <span class="token function">GetOrderForShippingAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>OrderPaymentInfo<span class="token punctuation">&gt;</span></span> <span class="token function">GetOrderForPaymentAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>OrderSummary<span class="token punctuation">&gt;</span></span> <span class="token function">GetOrderForCustomerAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="protecting-your-module-s-data" tabindex="-1"><a class="header-anchor" href="#protecting-your-module-s-data"><span>Protecting Your Module&#39;s Data</span></a></h2>`,17)),s("p",null,[n[13]||(n[13]=e("Public APIs aren't enough. You also need to ")),a(l,{to:"/milanjovanovic.tech/modular-monolith-data-isolation.html"},{default:t(()=>n[12]||(n[12]=[s("strong",null,"protect your module's data",-1)])),_:1,__:[12]}),n[14]||(n[14]=e(". Here's what I've found works:"))]),n[24]||(n[24]=i(`<h3 id="_1-separate-schemas" tabindex="-1"><a class="header-anchor" href="#_1-separate-schemas"><span>1. Separate Schemas</span></a></h3><p>Each module gets its own database schema</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">SCHEMA</span> Orders<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">SCHEMA</span> Shipping<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Orders module can only access its schema</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> OrdersUser <span class="token keyword">WITH</span> DEFAULT_SCHEMA <span class="token operator">=</span> Orders<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span><span class="token punctuation">,</span> <span class="token keyword">UPDATE</span><span class="token punctuation">,</span> <span class="token keyword">DELETE</span> <span class="token keyword">ON</span> <span class="token keyword">SCHEMA</span>::Orders <span class="token keyword">TO</span> OrdersUser<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Shipping module can only access its schema</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> ShippingUser <span class="token keyword">WITH</span> DEFAULT_SCHEMA <span class="token operator">=</span> Shipping<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span><span class="token punctuation">,</span> <span class="token keyword">UPDATE</span><span class="token punctuation">,</span> <span class="token keyword">DELETE</span> <span class="token keyword">ON</span> <span class="token keyword">SCHEMA</span>::Shipping <span class="token keyword">TO</span> ShippingUser<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can also lock down the user&#39;s access to a given schema to only allow reading and writing data.</p><h3 id="_2-different-connection-strings" tabindex="-1"><a class="header-anchor" href="#_2-different-connection-strings"><span>2. Different Connection Strings</span></a></h3><p>Each module gets its own database user with a respective connection string.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrdersDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line">    options<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;OrdersConnection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ShippingDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span></span>
<span class="line">    options<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;ShippingConnection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)),s("p",null,[n[16]||(n[16]=e("If you want to learn more about this, check out this article about ")),a(l,{to:"/milanjovanovic.tech/using-multiple-ef-core-dbcontext-in-single-application.html"},{default:t(()=>n[15]||(n[15]=[s("strong",null,"using multiple EF Core DbContexts",-1)])),_:1,__:[15]}),n[17]||(n[17]=e("."))]),n[25]||(n[25]=i(`<h3 id="_3-read-models" tabindex="-1"><a class="header-anchor" href="#_3-read-models"><span>3. Read Models</span></a></h3><p>Create specific read models for other modules.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Order</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Internal domain model with full complexity</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderShippingInfo</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Public DTO with only what shipping needs</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Address</span> ShippingAddress <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>ShippingItem<span class="token punctuation">&gt;</span></span> Items <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="dealing-with-cross-cutting-concerns" tabindex="-1"><a class="header-anchor" href="#dealing-with-cross-cutting-concerns"><span>Dealing with Cross-Cutting Concerns</span></a></h2><p>Some features naturally span multiple modules. For example, when a customer views their order history, you might need data from the Orders, Shipping, and Payments modules.</p><p>Don&#39;t try to force this through module APIs. Instead:</p><ol><li>Create a separate query model</li><li>Use event-driven patterns to keep it updated</li><li>Own it in a dedicated module or one of the existing modules</li></ol><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderHistoryModule</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>CustomerOrderHistory<span class="token punctuation">&gt;</span></span> <span class="token function">GetOrderHistoryAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> customerId<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Read from a dedicated read model that&#39;s kept</span></span>
<span class="line">        <span class="token comment">// updated through events from other modules</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">await</span> _orderHistoryRepository<span class="token punctuation">.</span><span class="token function">GetCustomerHistoryAsync</span><span class="token punctuation">(</span>customerId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Public APIs in modular monoliths are not about preventing coupling - they&#39;re about controlling it. Every public API is a contract that says: &quot;Yes, these modules are coupled, and this is exactly how they depend on each other.&quot;</p><p>The goal isn&#39;t to eliminate dependencies between modules. The goal is to make them explicit, controlled, and maintainable.</p><p>Get this right, and your modular monolith will be easier to maintain, test, and evolve. Get it wrong, and you&#39;ll end up with a distributed big ball of mud.</p>`,14)),s("p",null,[n[19]||(n[19]=e("Want to master building modular monoliths with clean APIs and event-driven patterns? Check out my ")),a(l,{to:"/milanjovanovic.tech/modular-monolith-architecture/"},{default:t(()=>n[18]||(n[18]=[s("strong",null,"Modular Monolith Architecture",-1)])),_:1,__:[18]}),n[20]||(n[20]=e(" course, where I'll show you how to build maintainable systems using practical examples from real projects."))]),n[26]||(n[26]=s("p",null,"That's all for today. Stay awesome, and I'll see you next week.",-1)),n[27]||(n[27]=s("hr",null,null,-1)),v(" TODO: add ARTICLE CARD "),a(c,r(u({title:"Internal vs. Public APIs in Modular Monoliths",desc:"Every article about modular monoliths tells you to use public APIs between modules, but they rarely explain why these APIs exist or how to design them properly. After building several large-scale modular monoliths, I've learned that public APIs are not just about clean code - they're about controlling chaos.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/internal-vs-public-apis-in-modular-monoliths.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const M=k(y,[["render",I]]),C=JSON.parse('{"path":"/milanjovanovic.tech/internal-vs-public-apis-in-modular-monoliths.html","title":"Internal vs. Public APIs in Modular Monoliths","lang":"en-US","frontmatter":{"lang":"en-US","title":"Internal vs. Public APIs in Modular Monoliths","description":"Article(s) > Internal vs. Public APIs in Modular Monoliths","icon":"iconfont icon-csharp","category":["C#","DotNet","Design","System","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet","design","system"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Internal vs. Public APIs in Modular Monoliths\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_120/module_communication_options.png?imwidth=3840\\"],\\"datePublished\\":\\"2024-12-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/internal-vs-public-apis-in-modular-monoliths.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Internal vs. Public APIs in Modular Monoliths"}],["meta",{"property":"og:description","content":"Article(s) > Internal vs. Public APIs in Modular Monoliths"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_120.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_120.png"}],["meta",{"name":"twitter:image:alt","content":"Internal vs. Public APIs in Modular Monoliths"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"system"}],["meta",{"property":"article:tag","content":"design"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-12-14T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Internal vs. Public APIs in Modular Monoliths"},{"property":"og:description","content":"Internal vs. Public APIs in Modular Monoliths"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/internal-vs-public-apis-in-modular-monoliths.html"}]],"prev":"/programming/cs/articles/README.md","date":"2024-12-14T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_120.png"},"git":{},"readingTime":{"minutes":4.27,"words":1280},"filePathRelative":"milanjovanovic.tech/internal-vs-public-apis-in-modular-monoliths.md","copyright":{"author":"Milan Jovanović"}}');export{M as comp,C as data};
