import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as t,b as i,t as m,n as g,g as v,w as p,e as a,r as l,o as f}from"./app-BVguHYKu.js";const b={},w={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},I={href:"https://lunrjs.com/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://en.wikipedia.org/wiki/Inverted_index",target:"_blank",rel:"noopener noreferrer"},S={href:"https://en.wikipedia.org/wiki/Tf-idf",target:"_blank",rel:"noopener noreferrer"},T={href:"https://en.wikipedia.org/wiki/Brotli",target:"_blank",rel:"noopener noreferrer"},q={href:"https://lucene.apache.org/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://solr.apache.org/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://postgresql.org/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://postgresql.org/docs/current/textsearch.html",target:"_blank",rel:"noopener noreferrer"},N={href:"https://npgsql.org/efcore/mapping/full-text-search.html",target:"_blank",rel:"noopener noreferrer"};function W(c,n){const r=l("VPCard"),o=l("router-link"),u=l("SiteInfo"),e=l("VPIcon"),d=l("RouteLink");return f(),h("div",null,[s("h1",w,[s("a",y,[s("span",null,m(c.$frontmatter.title)+" 관련",1)])]),t(r,g(v({title:"Node.js > Article(s)",desc:"Article(s)",link:"/programming/js-node/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[t(o,{to:"#the-old-search-approach"},{default:p(()=>n[0]||(n[0]=[a("The Old Search Approach")])),_:1,__:[0]})]),s("li",null,[t(o,{to:"#introducing-full-text-search"},{default:p(()=>n[1]||(n[1]=[a("Introducing Full-Text Search")])),_:1,__:[1]})]),s("li",null,[t(o,{to:"#implementing-full-text-search"},{default:p(()=>n[2]||(n[2]=[a("Implementing Full-Text Search")])),_:1,__:[2]})]),s("li",null,[t(o,{to:"#optimizing-the-search"},{default:p(()=>n[3]||(n[3]=[a("Optimizing The Search")])),_:1,__:[3]})]),s("li",null,[t(o,{to:"#server-side-options-for-full-text-search"},{default:p(()=>n[4]||(n[4]=[a("Server-Side Options for Full-Text Search")])),_:1,__:[4]})]),s("li",null,[t(o,{to:"#wrapping-up"},{default:p(()=>n[5]||(n[5]=[a("Wrapping Up")])),_:1,__:[5]})])])]),n[35]||(n[35]=s("hr",null,null,-1)),t(u,{name:"How I Implemented Full-Text Search On My Website",desc:"This article walks you through how I used Lunr.js to add powerful search capabilities to a Next.js static site, dealing with challenges like client-side processing and optimizing for performance along the way.",url:"https://milanjovanovic.tech/blog/how-i-implemented-full-text-search-on-my-website",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_108.png"}),n[36]||(n[36]=i(`<p>So, I&#39;ve got this blog I&#39;ve been running for a couple of years now. It&#39;s a Next.js and TypeScript static site, all optimized for SEO. Sounds pretty standard, right? Well, it was, until I ran into a problem.</p><p>As my content grew, finding specific articles became a real pain. It wasn&#39;t just me - readers were struggling too. What&#39;s the point of writing all this stuff if no one can find it when they need it?</p><p>That&#39;s when I decided to look into full-text search. Now, implementing full-text search on a static site isn&#39;t exactly straightforward. It&#39;s not like you can just slap a database on there and call it a day. You&#39;ve got to get creative.</p><p>In this article, I&#39;ll walk you through how I turned my site&#39;s search from useless to actually functional.</p><hr><h2 id="the-old-search-approach" tabindex="-1"><a class="header-anchor" href="#the-old-search-approach"><span>The Old Search Approach</span></a></h2><p>Here&#39;s how the search function worked before:</p><ol><li>I would generate a JSON document at build time containing each blog post&#39;s metadata. This document contains the data needed to perform the search and render the results.</li><li>When searching the articles, I would fetch the JSON document on the client and perform the search. Since this document changes only once a week, I can cache it on the client to improve performance.</li></ol><p>Here&#39;s the code that would generate the search data JSON document:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">generateSearchData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token function">getAllPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> searchData <span class="token operator">=</span> posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">slug</span><span class="token operator">:</span> post<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>slug<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">title</span><span class="token operator">:</span> post<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">excerpt</span><span class="token operator">:</span> post<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>excerpt<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">coverImage</span><span class="token operator">:</span> post<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>coverImage<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">date</span><span class="token operator">:</span> post<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>date<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">searchableContent</span><span class="token operator">:</span></span>
<span class="line">      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>post<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>post<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>excerpt<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>post<span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./search&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span></span>
<span class="line">    path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;search&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;search-data.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>searchData<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And then the search function is pretty simple (but not very smart):</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function">search</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/search/search-data.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> searchData <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> searchData<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    p<span class="token punctuation">.</span>searchableContent<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This approach has a few issues:</p><ul><li>The search data JSON document is large (861KB) and will continue to grow</li><li>It&#39;s slow on large datasets and won&#39;t scale well</li><li>It uses an exact match to find results</li><li>It doesn&#39;t rank results by relevance</li></ul><p>I wasn&#39;t happy with this, so here&#39;s how I implemented a much better solution.</p><hr><h2 id="introducing-full-text-search" tabindex="-1"><a class="header-anchor" href="#introducing-full-text-search"><span>Introducing Full-Text Search</span></a></h2>`,17)),s("p",null,[n[7]||(n[7]=a("To fix these problems, I turned to ")),n[8]||(n[8]=s("strong",null,"full-text search",-1)),n[9]||(n[9]=a(" using ")),s("a",I,[t(e,{icon:"fas fa-globe"}),n[6]||(n[6]=a("Lunr.js"))]),n[10]||(n[10]=a(". But what exactly is full-text search?"))]),n[37]||(n[37]=s("p",null,"Full-text search is a technique that allows fast and efficient searching of large volumes of text by creating an index of all words in a document collection and returning ranked results based on relevance to the search query.",-1)),n[38]||(n[38]=s("p",null,"Full-text search works by:",-1)),n[39]||(n[39]=s("ol",null,[s("li",null,[s("strong",null,"Indexing"),a(": Breaking down text into individual words (tokens)")]),s("li",null,[s("strong",null,"Stemming"),a(': Reducing words to their base form (e.g., "running" to "run")')]),s("li",null,[s("strong",null,"Ranking"),a(": Scoring results based on relevance")])],-1)),n[40]||(n[40]=s("p",null,`Another common operation is stop word removal. Common words that don't add much meaning (like "the", "and", "is") are often removed to save space and improve relevance.`,-1)),s("p",null,[n[12]||(n[12]=a("At the heart of full-text search is an ")),s("a",j,[t(e,{icon:"fa-brands fa-wikipedia-w"}),n[11]||(n[11]=a("inverted index"))]),n[13]||(n[13]=a(`. It's a data structure that maps each unique term to the documents containing it. It's "inverted" because it goes from terms to documents, rather than documents to terms.`))]),s("p",null,[n[15]||(n[15]=a("When searching, results are often ranked using ")),s("a",S,[t(e,{icon:"fa-brands fa-wikipedia-w"}),n[14]||(n[14]=a("TF-IDF"))]),n[16]||(n[16]=a(" (Term Frequency-Inverse Document Frequency). This gives higher scores to terms that are frequent in a document but rare across all documents."))]),n[41]||(n[41]=i(`<p>That&#39;s the rundown on full-text search. Let&#39;s see how to implement it.</p><hr><h2 id="implementing-full-text-search" tabindex="-1"><a class="header-anchor" href="#implementing-full-text-search"><span>Implementing Full-Text Search</span></a></h2><p>I chose Lunr.js because it&#39;s lightweight and works great for static websites. No server required.</p><p>I updated the <code>generateSearchData</code> function to create and store a full-text search index. This function runs once at build time, so it&#39;s not expensive.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">generateSearchData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token function">getAllPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Generate search data as before.</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">lunr</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;slug&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">boost</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">boost</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    searchData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">doc</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Store search data as before.</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// And store the search index.</span></span>
<span class="line">  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span></span>
<span class="line">    path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;search&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;search-index.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I&#39;m <strong>boosting</strong> the title with a factor of 10 and the content with a factor of 5. If the search term matches the title, it will have a higher relevance score.</p><p>The downside (for now) is that the index file is big, 2.5MB. If I were to download this on the client every time, the costs would quickly add up. I have 100,000 unique visitors per month, which would equate to <code>250GB</code> of network egress.</p><p>Now, I have to update the search function to use the full-text index:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function">search</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/search/search-data.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> searchData <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/search/search-index.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> searchIndex <span class="token operator">=</span> lunr<span class="token punctuation">.</span>Index<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>indexJson<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> searchIndex</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> post <span class="token operator">=</span> searchData<span class="token operator">?.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> post<span class="token punctuation">.</span>slug <span class="token operator">===</span> result<span class="token punctuation">.</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> post <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token operator">...</span>post<span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> result<span class="token punctuation">.</span>score <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> result <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>score <span class="token operator">-</span> a<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What&#39;s happening here:</p><ul><li>We&#39;re loading the search index from a JSON document using <code>lunr.Index.load</code></li><li>The index has a <code>search</code> function allowing us to perform full-text search</li><li>We&#39;re expanding the result to also include the relevance score</li></ul><p>This allows me to sort the search results based on relevance instead of chronologically.</p><p>Here&#39;s what the old search implementation returns when searching for &quot;resilience&quot;:</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_108/old_search.png?imwidth=1920" alt="The web page showing search results for the keyword &#39;resilience&#39; with the most relevant result highlighted." tabindex="0" loading="lazy"><figcaption>The web page showing search results for the keyword &#39;resilience&#39; with the most relevant result highlighted.</figcaption></figure><p>The most relevant article is at the fourth spot, sorted chronologically. You can see how this isn&#39;t a good user experience.</p><p>But with full-text search, when you search for a keyword like &quot;resilience&quot;, you get nicer results:</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_108/full_text_search.png?imwidth=1920" alt="The web page showing full-text search results for the keyword &#39;resilience&#39; with the most relevant result highlighted." tabindex="0" loading="lazy"><figcaption>The web page showing full-text search results for the keyword &#39;resilience&#39; with the most relevant result highlighted.</figcaption></figure><p>I also added a relevance score next to each article because it looks cool.</p><hr><h2 id="optimizing-the-search" tabindex="-1"><a class="header-anchor" href="#optimizing-the-search"><span>Optimizing The Search</span></a></h2><p>Now, I have a powerful search, but the index was huge (a whopping 2.5MB) and will continue to grow. The search data file is also 861KB.</p>`,22)),s("p",null,[n[18]||(n[18]=a("Enter ")),s("a",T,[t(e,{icon:"fa-brands fa-wikipedia-w"}),n[17]||(n[17]=a("Brotli"))]),n[19]||(n[19]=a(" compression:"))]),n[42]||(n[42]=i(`<ul><li>I compressed the search index and data using Brotli on the server side</li><li>In the browser, I decompress the files before using them to perform the search</li></ul><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> compress <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;brotli&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">generateSearchData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Create the search data and index</span></span>
<span class="line"></span>
<span class="line">  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span></span>
<span class="line">    path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;search&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;search-index.br&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">compress</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span></span>
<span class="line">    path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;search&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;search-data.br&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">compress</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>searchData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The results:</p><ul><li>2.5MB → 193KB <strong>(-92%)</strong></li><li>861KB → 180KB <strong>(-79%)</strong></li></ul>`,4)),s("p",null,[n[21]||(n[21]=a("If you want to learn more about compression algorithms, check out this ")),t(d,{to:"/milanjovanovic.tech/response-compression-in-aspnetcore.html"},{default:p(()=>n[20]||(n[20]=[s("strong",null,"article about response compression",-1)])),_:1,__:[20]}),n[22]||(n[22]=a("."))]),n[43]||(n[43]=s("p",null,"After fetching the compressed search data and full-text index on the client, I cache them for subsequent searches.",-1)),n[44]||(n[44]=s("p",null,"The searches are lightning-fast now, and the results are more relevant.",-1)),n[45]||(n[45]=s("hr",null,null,-1)),n[46]||(n[46]=s("h2",{id:"server-side-options-for-full-text-search",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#server-side-options-for-full-text-search"},[s("span",null,"Server-Side Options for Full-Text Search")])],-1)),n[47]||(n[47]=s("p",null,"While Lunr.js works great for my static site, larger apps with more data need a robust full-text search solution. So, here are some some server-side options you could explore.",-1)),s("p",null,[s("a",q,[t(e,{icon:"fas fa-globe"}),n[23]||(n[23]=a("Lucene"))]),n[24]||(n[24]=a(" is the foundation of many search engines. It's written in Java but has ports to other languages. Lucene provides robust full-text indexing and search capabilities. It is also highly efficient and customizable, making it a popular choice for developers who need fine-grained control over their search functionality."))]),s("p",null,[s("a",F,[t(e,{icon:"fas fa-globe"}),n[25]||(n[25]=a("Apache Solr"))]),n[26]||(n[26]=a(" builds on top of Lucene, offering additional features like distributed indexing, replication, and load-balanced querying. Solr includes powerful capabilities such as faceting and highlighting, which can greatly enhance the search experience."))]),s("p",null,[n[29]||(n[29]=a("If you're already using ")),s("a",O,[t(e,{icon:"iconfont icon-postgresql"}),n[27]||(n[27]=a("PostgreSQL"))]),n[30]||(n[30]=a(", the built-in ")),s("a",B,[t(e,{icon:"iconfont icon-postgresql"}),n[28]||(n[28]=a("full-text search"))]),n[31]||(n[31]=a(" is worth considering. PostgreSQL uses its own text search engine, which supports multiple languages and custom dictionaries. While not as feature-rich as dedicated search engines, it can be a convenient option for applications that want to keep their stack simple."))]),s("p",null,[n[33]||(n[33]=a("I've been tinkering with PostgreSQL ")),s("a",N,[t(e,{icon:"fas fa-globe"}),n[32]||(n[32]=a("full-text search using EF Core"))]),n[34]||(n[34]=a(". Here's what a full-text search query looks like:"))]),n[48]||(n[48]=i(`<div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">var</span> blogs <span class="token operator">=</span> context</span>
<span class="line">    <span class="token punctuation">.</span>BlogPosts</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token parameter">b</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token constant">EF</span><span class="token punctuation">.</span>Functions<span class="token punctuation">.</span><span class="token function">ToTsVector</span><span class="token punctuation">(</span><span class="token string">&quot;english&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>Title <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> b<span class="token punctuation">.</span>Excerpt <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> b<span class="token punctuation">.</span>Content<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span><span class="token constant">EF</span><span class="token punctuation">.</span>Functions<span class="token punctuation">.</span><span class="token function">PhraseToTsQuery</span><span class="token punctuation">(</span><span class="token string">&quot;english&quot;</span><span class="token punctuation">,</span> searchTerm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token parameter">b</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        b<span class="token punctuation">.</span>Slug<span class="token punctuation">,</span></span>
<span class="line">        b<span class="token punctuation">.</span>Title<span class="token punctuation">,</span></span>
<span class="line">        b<span class="token punctuation">.</span>Excerpt<span class="token punctuation">,</span></span>
<span class="line">        b<span class="token punctuation">.</span>Date<span class="token punctuation">,</span></span>
<span class="line">        Rank <span class="token operator">=</span> <span class="token constant">EF</span><span class="token punctuation">.</span>Functions<span class="token punctuation">.</span><span class="token function">ToTsVector</span><span class="token punctuation">(</span><span class="token string">&quot;english&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>Title <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> b<span class="token punctuation">.</span>Excerpt <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> b<span class="token punctuation">.</span>Content<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Rank</span><span class="token punctuation">(</span><span class="token constant">EF</span><span class="token punctuation">.</span>Functions<span class="token punctuation">.</span><span class="token function">PhraseToTsQuery</span><span class="token punctuation">(</span><span class="token string">&quot;english&quot;</span><span class="token punctuation">,</span> searchTerm<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span><span class="token parameter">b</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>Rank<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But I&#39;ll have to write a dedicated article to cover this, so let&#39;s wrap it up.</p><hr><h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="#wrapping-up"><span>Wrapping Up</span></a></h2><p>The old search functionality was, frankly, embarrassing.</p><p>It was slow, dumb as a rock, and about as useful as a chocolate teapot.</p><p>Now? It&#39;s actually not half bad.</p><ul><li>Searches are lightning-fast</li><li>Results are more relevant</li><li>The user experience is much smoother</li></ul><p>I&#39;m not gonna lie, there was a moment of frustration when I thought about giving up. But I&#39;m glad I stuck with it. There&#39;s something satisfying about building it yourself, you know?</p><p>It might not be pretty, but it works. And sometimes, that&#39;s all that matters.</p><p>The Brotli compression bit was a pleasant surprise. I thought I&#39;d end up with a massive index file that would make mobile users cry. But nope, it all works smoothly. Go figure.</p><p>Have you tried implementing search on your site? How&#39;d it go?</p><p>That&#39;s all for today.</p><p>See you next week.</p>`,14))])}const D=k(b,[["render",W]]),P=JSON.parse('{"path":"/milanjovanovic.tech/how-i-implemented-full-text-search-on-my-website.html","title":"How I Implemented Full-Text Search On My Website","lang":"en-US","frontmatter":{"lang":"en-US","title":"How I Implemented Full-Text Search On My Website","description":"Article(s) > How I Implemented Full-Text Search On My Website","icon":"iconfont icon-nextjs","category":["Article(s)","Node.js"],"tag":["blog","freecodecamp.org","node","nodejs","node-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How I Implemented Full-Text Search On My Website\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_108/old_search.png?imwidth=1920\\",\\"https://milanjovanovic.tech/blogs/mnw_108/full_text_search.png?imwidth=1920\\"],\\"datePublished\\":\\"2024-09-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-i-implemented-full-text-search-on-my-website.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How I Implemented Full-Text Search On My Website"}],["meta",{"property":"og:description","content":"Article(s) > How I Implemented Full-Text Search On My Website"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_108.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_108.png"}],["meta",{"name":"twitter:image:alt","content":"How I Implemented Full-Text Search On My Website"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"freecodecamp.org"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-09-21T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How I Implemented Full-Text Search On My Website"},{"property":"og:description","content":"How I Implemented Full-Text Search On My Website"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-i-implemented-full-text-search-on-my-website.html"}]],"prev":"/programming/js-node/articles/README.md","date":"2024-09-21T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_108.png"},"git":{},"readingTime":{"minutes":6.03,"words":1809},"filePathRelative":"milanjovanovic.tech/how-i-implemented-full-text-search-on-my-website.md","copyright":{"author":"Milan Jovanović"}}');export{D as comp,P as data};
