import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as e,b as i,a as b,t as f,n as r,g as c,w as l,e as a,r as u,o as y}from"./app-BVguHYKu.js";const v={},h={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},D={href:"https://fly.io/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://fly.io/docs/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://frontendmasters.com/courses/complete-intro-containers-v2/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://nextjs.org/docs/app/api-reference/cli/create-next-app",target:"_blank",rel:"noopener noreferrer"},q={href:"https://fly.io/docs/getting-started/launch/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://fly.io/docs/about/pricing/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://fly.io/dashboard",target:"_blank",rel:"noopener noreferrer"},T={href:"https://hub.docker.com/_/node",target:"_blank",rel:"noopener noreferrer"},N={href:"https://x.com/leeerob/status/1862312276985868783",target:"_blank",rel:"noopener noreferrer"},A={href:"https://frontendmasters.com/courses/complete-intro-containers-v2/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://fly.io/docs/reference/configuration/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://fly.io/docs/postgres/connecting/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://fly.io/docs/postgres/connecting/connecting-external/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://fly.io/docs/postgres/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://fly.io/docs/postgres/getting-started/what-you-should-know/#heres-what-you-manage",target:"_blank",rel:"noopener noreferrer"},z={href:"https://supabase.com/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://fly.io/docs/supabase/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/arackaf/booklist/tree/master/data/my-library-pg-backup",target:"_blank",rel:"noopener noreferrer"},U={href:"https://fly.io/docs/flyctl/machine-run/",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/fly-apps/cron-manager",target:"_blank",rel:"noopener noreferrer"},V={href:"https://fly.io/docs/networking/custom-domain/",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://fly.io/docs/js/the-basics/secrets/",target:"_blank",rel:"noopener noreferrer"},$={href:"https://frontendmasters.com/courses/fullstack-v3/",target:"_blank",rel:"noopener noreferrer"};function G(m,n){const p=u("VPCard"),o=u("router-link"),d=u("SiteInfo"),t=u("VPIcon");return y(),g("div",null,[s("h1",h,[s("a",w,[s("span",null,f(m.$frontmatter.title)+" 관련",1)])]),e(p,r(c({title:"Fly > Article(s)",desc:"Article(s)",link:"/devops/fly/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(p,r(c({title:"Docker > Article(s)",desc:"Article(s)",link:"/devops/docker/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(p,r(c({title:"Next.js > Article(s)",desc:"Article(s)",link:"/programming/js-next/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[e(o,{to:"#what-is-fly"},{default:l(()=>n[0]||(n[0]=[a("What is Fly?")])),_:1,__:[0]})]),s("li",null,[e(o,{to:"#why-vms"},{default:l(()=>n[1]||(n[1]=[a("Why VMs?")])),_:1,__:[1]})]),s("li",null,[e(o,{to:"#but-i-don-t-know-docker"},{default:l(()=>n[2]||(n[2]=[a("But… I don’t know Docker")])),_:1,__:[2]})]),s("li",null,[e(o,{to:"#let-s-launch-an-app"},{default:l(()=>n[3]||(n[3]=[a("Let’s launch an app!")])),_:1,__:[3]})]),s("li",null,[e(o,{to:"#looking-closer"},{default:l(()=>n[4]||(n[4]=[a("Looking closer")])),_:1,__:[4]}),s("ul",null,[s("li",null,[e(o,{to:"#a-quick-detour-to-understand-docker"},{default:l(()=>n[5]||(n[5]=[a("A Quick Detour to Understand Docker")])),_:1,__:[5]})])])]),s("li",null,[e(o,{to:"#fly-toml"},{default:l(()=>n[6]||(n[6]=[a("Fly.toml")])),_:1,__:[6]}),s("ul",null,[s("li",null,[e(o,{to:"#machines-won-t-bill-you-if-they-re-not-running"},{default:l(()=>n[7]||(n[7]=[a("Machines won’t bill you if they’re not running")])),_:1,__:[7]})])])]),s("li",null,[e(o,{to:"#adding-a-database"},{default:l(()=>n[8]||(n[8]=[a("Adding a database")])),_:1,__:[8]}),s("ul",null,[s("li",null,[e(o,{to:"#making-your-database-publicly-available"},{default:l(()=>n[9]||(n[9]=[a("Making your database publicly available")])),_:1,__:[9]})]),s("li",null,[e(o,{to:"#consider-using-a-dedicated-host-for-serious-applications"},{default:l(()=>n[10]||(n[10]=[a("Consider using a dedicated host for serious applications")])),_:1,__:[10]})])])]),s("li",null,[e(o,{to:"#interlude"},{default:l(()=>n[11]||(n[11]=[a("Interlude")])),_:1,__:[11]})]),s("li",null,[e(o,{to:"#having-fun"},{default:l(()=>n[12]||(n[12]=[a("Having Fun")])),_:1,__:[12]}),s("ul",null,[s("li",null,[e(o,{to:"#scheduling-a-custom-job"},{default:l(()=>n[13]||(n[13]=[a("Scheduling a custom job")])),_:1,__:[13]})])])]),s("li",null,[e(o,{to:"#odds-and-ends"},{default:l(()=>n[14]||(n[14]=[a("Odds and ends")])),_:1,__:[14]}),s("ul",null,[s("li",null,[e(o,{to:"#custom-domains"},{default:l(()=>n[15]||(n[15]=[a("Custom domains")])),_:1,__:[15]})]),s("li",null,[e(o,{to:"#secrets"},{default:l(()=>n[16]||(n[16]=[a("Secrets")])),_:1,__:[16]})])])]),s("li",null,[e(o,{to:"#learning-more"},{default:l(()=>n[17]||(n[17]=[a("Learning More")])),_:1,__:[17]})]),s("li",null,[e(o,{to:"#wrapping-up"},{default:l(()=>n[18]||(n[18]=[a("Wrapping Up")])),_:1,__:[18]})])])]),n[138]||(n[138]=s("hr",null,null,-1)),e(d,{name:"Introducing Fly.io",desc:"If it can go in a Docker, Fly can host it, and they'll help you with that. Adam Rackis takes a look at the platform and shows off all the things he likes about it.",url:"https://frontendmasters.com/blog/introducing-fly-io/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/4742"}),s("p",null,[s("a",D,[e(t,{icon:"fa-brands fa-fly"}),n[19]||(n[19]=a("Fly.io"))]),n[20]||(n[20]=a("is an increasingly popular infrastructure platform. Fly is a place to deploy your applications, similar to Vercel or Netlify, but with some different tradeoffs."))]),s("p",null,[n[22]||(n[22]=a("This post will introduce the platform, show how to deploy web apps, stand up databases, and some other fun things. If you leave here wanting to learn more, ")),s("a",I,[e(t,{icon:"fa-brands fa-fly"}),n[21]||(n[21]=a("the docsare here"))]),n[23]||(n[23]=a("and are outstanding."))]),n[139]||(n[139]=i('<hr><h2 id="what-is-fly" tabindex="-1"><a class="header-anchor" href="#what-is-fly"><span>What is Fly?</span></a></h2><p>Where platforms like Vercel and Netlify run your app on serverless functions which spin up and die off as needed (typically running on AWS Lambda), Fly runs your machines on actual VM’s, running in their infrastructure. These VMs can be configured to scale up as your app’s traffic grows, just like with serverless functions. But as the continuously run, there is no cold start issues. That said, if you’re on a budget, or your app isn’t that important (or both) you can also configure Fly to scale your app down to zero machines when traffic dies. You’ll be billed essentially nothing during those periods of inactivity, though your users will see a cold start time if they’re the first to hit your app during an inactive period.</p><p>To be perfectly frank, the cold start problem has been historically exaggerated, so please don’t pick a platform just to avoid cold starts.</p><hr><h2 id="why-vms" tabindex="-1"><a class="header-anchor" href="#why-vms"><span>Why VMs?</span></a></h2><p>You might be wondering why, if cold starts aren’t a big deal in practice, one should care about Fly using VMs instead of cloud functions. For me there’s two reasons: the ability to execute long-running processes, and the ability to run anything that will run in a Docker image. Let’s dive into both.</p><p>The ability to handle long-running processes greatly expands the range of apps Fly can run. They have turn-key solutions for Phoenix LiveView, Laravel, Django, Postgres, and lots more. Anything you ship on Fly will be via a Dockerfile (don’t worry, they’ll help you generate them). That means anything you can put into a Dockerfile, can be run by Fly. If there’s a niche database you’ve been wanting to try (Neo4J, CouchDB, etc), just stand one up via a Dockerfile (and both of those DBs have official images), and you’re good to go. New databases, new languages, new anything: if there’s something you’ve been wanting to try, you can run it on Fly if you can containerize it; and anything can be containerized.</p><hr><h2 id="but-i-don-t-know-docker" tabindex="-1"><a class="header-anchor" href="#but-i-don-t-know-docker"><span>But… I don’t know Docker</span></a></h2><p>Don’t worry, Fly will, as you’re about to see, help you scaffold a Dockerfile from any common app framework. We’ll take a quick look at what’s generated, and explain the high points.</p><p>That said, Docker is one of the most valuable tools for a new engineer to get familiar with, so if Fly motivates you to learn more, so much the better!</p>',12)),s("p",null,[n[25]||(n[25]=a("If you’d like to go deeper on Docker, our course ")),s("a",F,[e(t,{icon:"fas fa-globe"}),n[24]||(n[24]=a("Complete Intro to Containers"))]),n[26]||(n[26]=a(" from Brian Holt is fantastic."))]),n[140]||(n[140]=s("hr",null,null,-1)),n[141]||(n[141]=s("h2",{id:"let-s-launch-an-app",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#let-s-launch-an-app"},[s("span",null,"Let’s launch an app!")])],-1)),s("p",null,[n[28]||(n[28]=a("Let’s ship something. We’ll create a brand new Next.js app, using the standard scaffolding")),s("a",j,[e(t,{icon:"iconfont icon-nextjs"}),n[27]||(n[27]=a("here"))]),n[29]||(n[29]=a("."))]),n[142]||(n[142]=s("p",null,[a("We’ll create an app, run"),s("code",null,"npm i"),a("and then"),s("code",null,"npm run dev"),a("and verify that it works.")],-1)),n[143]||(n[143]=s("figure",null,[s("img",{src:"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-1-next-app.png?resize=1024%2C764&ssl=1",alt:"screenshot of a running Next.js app",tabindex:"0",loading:"lazy"}),s("figcaption",null,"screenshot of a running Next.js app")],-1)),s("p",null,[n[31]||(n[31]=a("Now let’s deploy it to Fly. If you haven’t already, install the Fly CLI, and sign up for an account. Instructions can be found in the first few steps of the")),s("a",q,[e(t,{icon:"fa-brands fa-fly"}),n[30]||(n[30]=a("quick start guide"))]),n[32]||(n[32]=a("."))]),n[144]||(n[144]=s("p",null,[a("To deploy an app on Fly, you need to containerize your app. We"),s("em",null,"could"),a("manually piece together a valid Dockerfile that would run our Next app, and then run"),s("code",null,"fly deploy"),a(". But that’s a tedious process. Thankfully Fly has made life easier for us. Instead, we can just run"),s("code",null,"fly launch"),a("from our app’s root directory.")],-1)),n[145]||(n[145]=s("figure",null,[s("img",{src:"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-2-fly-launch-initial.png?resize=1024%2C419&ssl=1",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),s("p",null,[n[34]||(n[34]=a("Fly easily ")),n[35]||(n[35]=s("em",null,"detected",-1)),n[36]||(n[36]=a(" Next.js, and then made some best guesses as to deployment settings. It opted for the third cheapest deployment option. Here’s ")),s("a",C,[e(t,{icon:"fa-brands fa-fly"}),n[33]||(n[33]=a("Fly’s full pricing information"))]),n[37]||(n[37]=a(". Fly let’s us accept these defaults, or tweak them. Let’s hit yes to tweak. We should be taken to the fly.io site, where our app is in the process of being set up."))]),n[146]||(n[146]=s("figure",null,[s("img",{src:"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-3-default-settings.png?resize=1024%2C751&ssl=1",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),n[147]||(n[147]=s("p",null,"For fun, let’s switch to the cheapest option, and change the region to Virginia (what AWS would call us-east-1).",-1)),n[148]||(n[148]=s("figure",null,[s("img",{src:"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-4-updated-settings.png?resize=1024%2C751&ssl=1",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),n[149]||(n[149]=s("p",null,"Hit confirm, and return to your command line. It should finish setting everything up, which should look like this, in part.",-1)),n[150]||(n[150]=s("figure",null,[s("img",{src:"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-5-cli-finish.png?resize=1024%2C454&ssl=1",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1)),s("p",null,[n[39]||(n[39]=a("If we head over to our")),s("a",R,[e(t,{icon:"fa-brands fa-fly"}),n[38]||(n[38]=a("Fly dashboard"))]),n[40]||(n[40]=a(", we should see something like this:"))]),n[151]||(n[151]=i('<figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-6-fly-dashboard.png?resize=1024%2C349&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>We can then click that app and see the app’s details</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-7-app-in-dashboard.png?resize=1024%2C1018&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>And lastly, we can go to the URL listed, and see the app actually running!</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-8-app-running.png?resize=1024%2C866&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="looking-closer" tabindex="-1"><a class="header-anchor" href="#looking-closer"><span>Looking closer</span></a></h2>',7)),s("p",null,[n[41]||(n[41]=a("There’s a number of files that Fly created for us. The two most important are the ")),e(t,{icon:"fa-brands fa-docker"}),n[42]||(n[42]=s("code",null,"Dockerfile",-1)),n[43]||(n[43]=a(", and ")),e(t,{icon:"iconfont icon-toml"}),n[44]||(n[44]=s("code",null,"fly.toml",-1)),n[45]||(n[45]=a(". Let’s take a look at each. We’ll start with the ")),e(t,{icon:"fa-brands fa-docker"}),n[46]||(n[46]=s("code",null,"Dockerfile",-1)),n[47]||(n[47]=a("."))]),n[152]||(n[152]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token comment"># syntax = docker/dockerfile:1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Adjust NODE_VERSION as desired</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ARG</span> NODE_VERSION=20.18.1</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">FROM</span> node:<span class="token variable">\${NODE_VERSION}</span>-slim <span class="token keyword">as</span> base</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">LABEL</span> fly_launch_runtime=<span class="token string">&quot;Next.js&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Next.js app lives here</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Set production environment</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENV</span> NODE_ENV=<span class="token string">&quot;production&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Throw-away build stage to reduce size of final image</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">FROM</span> base <span class="token keyword">as</span> build</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Install packages needed to build node modules</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> apt-get update -qq &amp;&amp; <span class="token operator">\\</span></span>
<span class="line">    apt-get install --no-install-recommends -y build-essential node-gyp pkg-config python-is-python3</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Install node modules</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> package-lock.json package.json ./</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> npm ci --include=dev</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Copy application code</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> . .</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Build application</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> npm run build</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Remove development dependencies</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> npm prune --omit=dev</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Final stage for app image</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">FROM</span> base</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Copy built application</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">build</span></span> /app /app</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Start the server by default, this can be overwritten at runtime</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">EXPOSE</span> 3000</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">&quot;npm&quot;</span>, <span class="token string">&quot;run&quot;</span>, <span class="token string">&quot;start&quot;</span> ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="a-quick-detour-to-understand-docker" tabindex="-1"><a class="header-anchor" href="#a-quick-detour-to-understand-docker"><span>A Quick Detour to Understand Docker</span></a></h3><p>Docker is a book unto its own, but as an extremely quick intro: Docker allows us to package our app into an “image.” Containers allow you to start with an entire operating system (almost always a minimal Linux distro), and allow you to do whatever you want with it. Docker then packages whatever you create, and allows it to be run. The Docker image is completely self-contained. You choose the whatever goes into it, from the base operating system, down to whatever you install into the image. Again, they’re self-contained.</p><p>Now let’s take a quick tour of the important pieces of our Dockerfile.</p><p>After some comments and labels, we find what will always be present at the top of a Dockerfile: the <code>FROM</code> command.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> node:<span class="token variable">\${NODE_VERSION}</span>-slim <span class="token keyword">as</span> base</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div>`,6)),s("p",null,[n[49]||(n[49]=a("This tells us the base of the image. We could start with any random Linux distro, and then install Node and npm, but unsurprisingly there’s already an officially maintained Node image: there will almost always be officially maintained Docker images for almost any technology. In fact, ")),s("a",T,[e(t,{icon:"fa-brands fa-docker"}),n[48]||(n[48]=a("there’s many different Node images to choose from"))]),n[50]||(n[50]=a(", many with different underlying base Linux distro’s."))]),n[153]||(n[153]=i(`<p>There’s a <code>LABEL</code> that’s added, likely for use with Fly. Then we set the working directory in our image.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div>`,2)),s("p",null,[n[51]||(n[51]=a("We copy the ")),e(t,{icon:"iconfont icon-json"}),n[52]||(n[52]=s("code",null,"package.json",-1)),n[53]||(n[53]=a(" and lockfiles."))]),n[154]||(n[154]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token comment"># Install node modules</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> package-lock.json package.json ./</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Then run<code>npm i</code>(but <em>in</em> our Docker image):</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">RUN</span> npm ci --include=dev</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>Then we copy the rest of the application code:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token comment"># Copy application code</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> . .</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Hopefully you get the point. We won’t go over every line, here. But hopefully the general idea is clear enough, and hopefully you’d feel comfortable tweaking this if you wanted to. Two last points though. See this part:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token comment"># Install packages needed to build node modules</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> apt-get update -qq &amp;&amp; <span class="token operator">\\</span></span>
<span class="line">    apt-get install --no-install-recommends -y build-essential node-gyp pkg-config python-is-python3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,7)),s("p",null,[n[57]||(n[57]=a("That tells the Linux package manager to install some things Fly thinks Next might need, but in actuality")),s("a",N,[n[54]||(n[54]=a("probably doesn’t (")),e(t,{icon:"fa-brands fa-x-twitter"}),n[55]||(n[55]=s("code",null,"leeerob",-1)),n[56]||(n[56]=a(")"))]),n[58]||(n[58]=a(". Don’t be surprised if these lines are absent when you read this, and try for yourself."))]),s("p",null,[n[59]||(n[59]=a("Lastly, if you were wondering why the ")),e(t,{icon:"iconfont icon-json"}),n[60]||(n[60]=s("code",null,"package.json",-1)),n[61]||(n[61]=a(" and lockfiles were copied, followed by")),n[62]||(n[62]=s("code",null,"npm install",-1)),n[63]||(n[63]=s("em",null,"and then",-1)),n[64]||(n[64]=a("followed by copying the rest of the application code, the reason is (Docker) performance. Briefly, each line in the Dockerfile creates a “layer.” These layers can be cached and re-used if nothing has changed. If anything")),n[65]||(n[65]=s("em",null,"has",-1)),n[66]||(n[66]=a("changed, that invalidates the cache for that layer,")),n[67]||(n[67]=s("em",null,"and also",-1)),n[68]||(n[68]=a("all layers after it. So you’ll want to push your likely-to-change work as low as possible. Your application code will almost always change between deployments; the dependencies in your ")),e(t,{icon:"iconfont icon-json"}),n[69]||(n[69]=s("code",null,"package.json",-1)),n[70]||(n[70]=a(" will change much less frequently. So we do that install first, by itself, so it will be more likely to be cached, and speed up our builds."))]),s("p",null,[n[72]||(n[72]=a("I tried my best to provide the absolute minimal amount of a Docker intro to make this post make sense, without being overhwelming. I hope I’ve succeeded. If you’d like to learn more, there’s tons of books and YouTube videos, and even an entire course")),s("a",A,[e(t,{icon:"fas fa-globe"}),n[71]||(n[71]=a("here on Frontend Masters"))]),n[73]||(n[73]=a("."))]),n[155]||(n[155]=s("hr",null,null,-1)),n[156]||(n[156]=s("h2",{id:"fly-toml",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#fly-toml"},[s("span",null,"Fly.toml")])],-1)),s("p",null,[n[74]||(n[74]=a("Now let’s take a peek at the ")),e(t,{icon:"iconfont icon-toml"}),n[75]||(n[75]=s("code",null,"fly.toml",-1)),n[76]||(n[76]=a(" file."))]),n[157]||(n[157]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="fly.toml"><span>fly.toml</span></div><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token comment"># fly.toml app configuration file generated for next-fly-test on 2024-11-28T19:04:19-06:00</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># See https://fly.io/docs/reference/configuration/ for information about how to use this file.</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"></span>
<span class="line"><span class="token key property">app</span> <span class="token punctuation">=</span> <span class="token string">&#39;next-fly-test&#39;</span></span>
<span class="line"><span class="token key property">primary_region</span> <span class="token punctuation">=</span> <span class="token string">&#39;iad&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span><span class="token table class-name">build</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span><span class="token table class-name">http_service</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token key property">internal_port</span> <span class="token punctuation">=</span> <span class="token number">3000</span></span>
<span class="line">  <span class="token key property">force_https</span> <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token key property">auto_stop_machines</span> <span class="token punctuation">=</span> <span class="token string">&#39;stop&#39;</span></span>
<span class="line">  <span class="token key property">auto_start_machines</span> <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token key property">min_machines_running</span> <span class="token punctuation">=</span> <span class="token number">0</span></span>
<span class="line">  <span class="token key property">processes</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">vm</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token key property">size</span> <span class="token punctuation">=</span> <span class="token string">&#39;shared-cpu-1x&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),s("p",null,[n[78]||(n[78]=a("This is basically the config file for the Fly app. The options for this file are almost endless, and are documented")),s("a",O,[e(t,{icon:"fa-brands fa-fly"}),n[77]||(n[77]=a("here"))]),n[79]||(n[79]=a(". The three most important lines are the next three."))]),n[158]||(n[158]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="fly.toml"><span>fly.toml</span></div><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token key property">auto_stop_machines</span> <span class="token punctuation">=</span> <span class="token string">&#39;stop&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>This tells Fly to automatically kill machines when they’re not needed, when traffic is low on our app.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="fly.toml"><span>fly.toml</span></div><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token key property">auto_start_machines</span> <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>The line above tells Fly to automatically spin up new machines when it detects it needs to do so, given your traffic. Lastly, this line</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="fly.toml"><span>fly.toml</span></div><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token key property">min_machines_running</span> <span class="token punctuation">=</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>That line allows us to tell Fly to always keep a minimum number of machines running, no matter how minimal your current traffic is. Setting it to zero allows for no machines to be running, which means your next visitor will see a slow response as the first machine spins up.</p><p>You may have noticed above that Fly spun up two machines initially, even though there was no traffic at all. It does this by default to give your app a higher availability, that is, in case anything happens to the one machine, the other will (hopefully) still be up and running. If you don’t want or need this, you can prevent it by passing<code>--ha=false</code>when you run<code>fly launch</code>or<code>fly deploy</code>(or you can just kill one of the machines in the dashboard - Fly will not re-create it on subsequent deploys).</p><h3 id="machines-won-t-bill-you-if-they-re-not-running" tabindex="-1"><a class="header-anchor" href="#machines-won-t-bill-you-if-they-re-not-running"><span>Machines won’t bill you if they’re not running</span></a></h3><p>When a machine is not running, you’ll be billed<em>essentially</em>zero for it. You’ll just pay $0.15 per GB, per month, per machine (machines will usually have only one GB).</p><hr><h2 id="adding-a-database" tabindex="-1"><a class="header-anchor" href="#adding-a-database"><span>Adding a database</span></a></h2><p>You can launch a Fly app anytime with just a Dockerfile. You could absolutely find an official Postgres Docker image and deploy from that. But it turns out Fly has this built in. Let’s run<code>fly postgres create</code>in a terminal, and see what happens</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-10-fly-pg-created.png?resize=1024%2C381&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-9-fly-postgres-create.png?resize=1024%2C299&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>It’ll ask you for a name and a region, and then how serious of a Postgres setup you want. Once it’s done, it’ll show you something like this.</p><figure><img src="https://i0.wp.com/adam-rackis-blog-staging.fly.dev/fly-io/img-10-fly-pg-created.png?ssl=1" alt="Fly postgres create" tabindex="0" loading="lazy"><figcaption>Fly postgres create</figcaption></figure><p>The connection string listed at the bottom can be used to connect to your db<em>from within another Fly app</em>(which you own). But to run database creation and migration scripts, and for local development you’ll need to connect to this db on your local machine. To do that, you can run this:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">fly proxy <span class="token number">5432</span> <span class="token parameter variable">-a</span> <span class="token operator">&lt;</span>YOUR_APP_NAME<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-11-fly-proxy.png?resize=902%2C122&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,19)),s("p",null,[s("a",B,[e(t,{icon:"fa-brands fa-fly"}),n[80]||(n[80]=a("Now you can connect"))]),n[81]||(n[81]=a(" via the same connection string on your local machine, but on")),n[82]||(n[82]=s("code",null,"localhost:5432",-1)),n[83]||(n[83]=a("instead of")),n[84]||(n[84]=s("code",null,"flycast:5432",-1)),n[85]||(n[85]=a("."))]),n[159]||(n[159]=s("h3",{id:"making-your-database-publicly-available",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#making-your-database-publicly-available"},[s("span",null,"Making your database publicly available")])],-1)),s("p",null,[n[87]||(n[87]=a("It’s not ideal, but if you want to ")),s("a",E,[e(t,{icon:"fa-brands fa-fly"}),n[86]||(n[86]=a("make your Fly pg box publicly available"))]),n[88]||(n[88]=a(", you can. You basically have to add a dedicated ipv4 address to it (at a cost of $2 per month), and then tweak your config."))]),n[160]||(n[160]=s("h3",{id:"consider-using-a-dedicated-host-for-serious-applications",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#consider-using-a-dedicated-host-for-serious-applications"},[s("span",null,"Consider using a dedicated host for serious applications")])],-1)),s("p",null,[n[93]||(n[93]=a("Fly’s")),s("a",P,[e(t,{icon:"fa-brands fa-fly"}),n[89]||(n[89]=a("built-in Postgres support"))]),n[94]||(n[94]=a("is superb, but there’s some things you’ll have to")),s("a",S,[e(t,{icon:"fa-brands fa-fly"}),n[90]||(n[90]=a("manage yourself"))]),n[95]||(n[95]=a(". If that’s not for you,")),s("a",z,[e(t,{icon:"iconfont icon-supabase"}),n[91]||(n[91]=a("Supabase"))]),n[96]||(n[96]=a("is a fully managed pg host, and it’s also superb. Fly even has")),s("a",L,[e(t,{icon:"fa-brands fa-fly"}),n[92]||(n[92]=a("a service"))]),n[97]||(n[97]=a("for creating Supabase db’s on Fly infra, for extra low latency. It’s currently only in public alpha, but it might be worth keeping an eye on."))]),n[161]||(n[161]=i(`<hr><h2 id="interlude" tabindex="-1"><a class="header-anchor" href="#interlude"><span>Interlude</span></a></h2><p>If you just want a nice place to deploy your apps, what we’ve covered will suffice for the vast majority of use cases. I could stop this post here, but I’d be remiss if I didn’t show some of the cooler things you can do with Fly. Please don’t let what follows be indicative of the complexity you’ll normally deal with. We’ll be putting together a cron job for running Postgres backups. In practice, you’ll just use a mature DB provider like Supabase or PlanetScale, which will handle things like this for you.</p><p>But sometimes it’s fun to tinker, especially for side projects. So let’s kick the tires a bit and see what we can come up with.</p><hr><h2 id="having-fun" tabindex="-1"><a class="header-anchor" href="#having-fun"><span>Having Fun</span></a></h2><p>One of Fly’s greatest strengths is its flexibility. You give it a Dockerfile, and it’ll run it. To drive that point home, let’s conclude this post with a fun example.</p><p>As much as I love Fly, it makes me a<em>little</em>uneasy that my database is running isolated in some VM under my account. Accidents happen, and I’d want automatic backups. Why don’t we build a Docker image to do just that?</p><p>I’ll want to run a script, written in TypeScript, preferably without hating my life: Bun is ideal for this. I’ll also need to run the actual<code>pg_dump</code>command. So what should I build my Dockerfile from: the bun image, which would lack to pg utilities, or the pg base, which wouldn’t have bun installed. I could do either, and use the Linux package manager to install what I need. But really, there’s a simpler way: use a multi-stage Docker build. Let’s see the whole Dockerfile</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> oven/bun:latest <span class="token keyword">AS</span> BUILDER</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> . .</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> [<span class="token string">&quot;bun&quot;</span>, <span class="token string">&quot;install&quot;</span>]</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> [<span class="token string">&quot;bun&quot;</span>, <span class="token string">&quot;build&quot;</span>, <span class="token string">&quot;index.ts&quot;</span>, <span class="token string">&quot;--compile&quot;</span>, <span class="token string">&quot;--outfile&quot;</span>, <span class="token string">&quot;run-pg_dump&quot;</span>]</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">FROM</span> postgres:16.4</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">BUILDER</span></span> /app/run-pg_dump .</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">BUILDER</span></span> /app/run-backup.sh .</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> chmod +x ./run-backup.sh</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;./run-backup.sh&quot;</span>]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>We start with a Bun image. We run a<code>bun install</code>to tell Bun to install what we need: aws sdk’s and such. Then we tell Bun to compile our script into a standalone executable: yes, Bun can do that, and yes: it’s that easy.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> postgres:16.4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>Tells Docker to start a new stage, from a new (Postgres) base.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Dockerfile"><span>Dockerfile</span></div><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker"><pre><code class="language-docker"><span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">BUILDER</span></span> /app/run-pg_dump .</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">BUILDER</span></span> /app/run-backup.sh .</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> chmod +x ./run-backup.sh</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;./run-backup.sh&quot;</span>]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,14)),s("p",null,[n[98]||(n[98]=a("This drops into the ")),e(t,{icon:"fas fa-folder-open"}),n[99]||(n[99]=s("code",null,"/app",-1)),n[100]||(n[100]=a(" folder from the prior step, and copies over the")),n[101]||(n[101]=s("code",null,"run-pg_dump",-1)),n[102]||(n[102]=a("file, which Bun compiled for us, and also copies over")),e(t,{icon:"iconfont icon-shell"}),n[103]||(n[103]=s("code",null,"run-backup.sh",-1)),n[104]||(n[104]=a(". This is a shell script I wrote. It runs")),n[105]||(n[105]=s("code",null,"pg_dump",-1)),n[106]||(n[106]=a("a few times, to generate the files the Bun script (")),n[107]||(n[107]=s("code",null,"run-pg_dump",-1)),n[108]||(n[108]=a(") is expecting, and then calls it. Here’s what that file looks like:"))]),n[162]||(n[162]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="run-backup.sh"><span>run-backup.sh</span></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line highlighted"><span class="token shebang important">#!/bin/sh</span></span>
<span class="line"></span>
<span class="line"><span class="token assign-left variable">PG_URI_CLEANED</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">{</span>PG_URI<span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/^&quot;//&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/&quot;$//&#39;</span><span class="token variable">)</span></span></span>
<span class="line"></span>
<span class="line">pg_dump <span class="token variable">\${PG_URI_CLEANED}</span> <span class="token parameter variable">-Fc</span> <span class="token operator">&gt;</span> ./backup.dump</span>
<span class="line"></span>
<span class="line">pg_dump <span class="token variable">\${PG_URI_CLEANED}</span> <span class="token parameter variable">-f</span> ./backup.sql</span>
<span class="line"></span>
<span class="line">./run-pg_dump</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This unhinged line:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">PG_URI_CLEANED</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">{</span>PG_URI<span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/^&quot;//&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/&quot;$//&#39;</span><span class="token variable">)</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>is something ChatGPT helped me write, to strip the double quotes from my connection string environment variable.</p>`,4)),s("p",null,[n[109]||(n[109]=a("Lastly, if you’re curious about the ")),e(t,{icon:"iconfont icon-typescript"}),n[110]||(n[110]=s("code",null,"index.ts",-1)),n[111]||(n[111]=a(" file Bun compiled into a standalone executable, this is it:"))]),n[163]||(n[163]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="index.ts"><span>index.ts</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&quot;fs&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> S3Client<span class="token punctuation">,</span> PutObjectCommand <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@aws-sdk/client-s3&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">numToDisplay</span> <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">numToDisplay</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">numToDisplay</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>today<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">numToDisplay</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">numToDisplay</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> filename <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>date<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">REGION</span> <span class="token operator">=</span> <span class="token string">&quot;us-east-1&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> dumpParams <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  Bucket<span class="token operator">:</span> <span class="token string">&quot;my-library-backups&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  Key<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.dump</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  Body<span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;backup.dump&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> sqlParams <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  Bucket<span class="token operator">:</span> <span class="token string">&quot;my-library-backups&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  Key<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.sql</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  Body<span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;backup.sql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">S3Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  region<span class="token operator">:</span> <span class="token constant">REGION</span><span class="token punctuation">,</span></span>
<span class="line">  credentials<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    accessKeyId<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">AWS_ID</span><span class="token operator">!</span><span class="token punctuation">,</span></span>
<span class="line">    secretAccessKey<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">AWS_SECRET</span><span class="token operator">!</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">s3<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PutObjectCommand</span><span class="token punctuation">(</span>sqlParams<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;SQL Backup Uploaded!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>err <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Error: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">s3<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PutObjectCommand</span><span class="token punctuation">(</span>dumpParams<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Dump Backup Uploaded!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>err <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Error: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\`</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>I’m sure someone who’s actually good with Docker could come up with something better, but this works well enough.</p>`,2)),s("p",null,[n[115]||(n[115]=a("To see this whole thing all together, in one place, you can ")),s("a",M,[n[112]||(n[112]=a("see it in my GitHub (")),e(t,{icon:"iconfont icon-github"}),n[113]||(n[113]=s("code",null,"arackaf/booklist",-1)),n[114]||(n[114]=a(")"))]),n[116]||(n[116]=a("."))]),n[164]||(n[164]=s("h3",{id:"scheduling-a-custom-job",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#scheduling-a-custom-job"},[s("span",null,"Scheduling a custom job")])],-1)),s("p",null,[n[118]||(n[118]=a("We have a working, valid Docker image. How do we tell Fly to run it on an interval? Fly has a command just for that:")),s("a",U,[e(t,{icon:"fa-brands fa-fly"}),n[117]||(n[117]=s("code",null,"fly machine run",-1))]),n[119]||(n[119]=a(". In fact, it can take a")),n[120]||(n[120]=s("code",null,"schedule",-1)),n[121]||(n[121]=a("argument, to have Fly run it on an interval. Unfortunately, the options are horribly limited: only hourly, daily, and monthly. But, as a workaround you can run this command at different times: this will set up executions at whatever interval you selected, scheduled off of when you ran the command."))]),n[165]||(n[165]=i(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">fly machine run <span class="token builtin class-name">.</span> <span class="token parameter variable">--schedule</span><span class="token operator">=</span>daily</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you ran that command at noon, that will schedule a daily task that runs at noon every day. If you run that command again at 5pm, it will schedule a<em>second</em>task to run daily, at 5pm (without interfering with the first). Each job will have a dedicated machine, but will be idle when not running, which means it will cost you almost nothing; you’ll pay the normal $0.15 per month, per GB on the machine.</p>`,2)),s("p",null,[n[125]||(n[125]=a("I hate this limitation in scheduling machines. In theory there’s ")),s("a",W,[n[122]||(n[122]=a("a true cron job templatehere (")),e(t,{icon:"iconfont icon-github"}),n[123]||(n[123]=s("code",null,"fly-apps/cron-manager",-1)),n[124]||(n[124]=a(")"))]),n[126]||(n[126]=a(", but it’s not the simplest thing to look through."))]),e(d,{name:"fly-apps/cron-manager",desc:"Cron Manager is designed to enhance the way you manage Cron jobs on Fly.io.",url:"https://github.com/fly-apps/cron-manager/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/4ce864029beedfc4a95adffa8b9eea931eb501593e4475abbffa8046c23af0f6/fly-apps/cron-manager"}),n[166]||(n[166]=s("hr",null,null,-1)),n[167]||(n[167]=s("h2",{id:"odds-and-ends",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#odds-and-ends"},[s("span",null,"Odds and ends")])],-1)),n[168]||(n[168]=s("p",null,"That was a lot. Let’s lighten things up a bit with some happy odds and ends, before we wrap up.",-1)),n[169]||(n[169]=s("h3",{id:"custom-domains",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#custom-domains"},[s("span",null,"Custom domains")])],-1)),s("p",null,[n[128]||(n[128]=a("Fly makes it easy to add a custom domain to your app. You’ll just need to add the right records. ")),s("a",V,[e(t,{icon:"fa-brands fa-fly"}),n[127]||(n[127]=a("Full instructions arehere"))]),n[129]||(n[129]=a("."))]),n[170]||(n[170]=s("h3",{id:"secrets",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#secrets"},[s("span",null,"Secrets")])],-1)),s("p",null,[n[131]||(n[131]=a("You’ll probably have some secrets you want run in your app, in production. If you’re thinking you could just bundle a ")),n[132]||(n[132]=s("code",null,".env.prod",-1)),n[133]||(n[133]=a(" file into your Docker image, yes, you could. But that’s considered a bad idea. Instead, leverage ")),s("a",Y,[e(t,{icon:"fa-brands fa-fly"}),n[130]||(n[130]=a("Fly’s secret management"))]),n[134]||(n[134]=a("."))]),n[171]||(n[171]=s("hr",null,null,-1)),n[172]||(n[172]=s("h2",{id:"learning-more",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#learning-more"},[s("span",null,"Learning More")])],-1)),s("p",null,[n[136]||(n[136]=a("This post started brushing up against some full-stack topics. If this sparked your interest, be sure to check out the")),s("a",$,[e(t,{icon:"fas fa-globe"}),n[135]||(n[135]=a("entire courseon full-stack engineering"))]),n[137]||(n[137]=a(" here on Frontend Masters."))]),n[173]||(n[173]=s("hr",null,null,-1)),n[174]||(n[174]=s("h2",{id:"wrapping-up",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#wrapping-up"},[s("span",null,"Wrapping Up")])],-1)),n[175]||(n[175]=s("p",null,"The truth is we’ve truly, barely scratched the surface of Fly. For simple side projects what we’ve covered here is probably more than you’d need. But Fly also has power tools available for advanced use cases. The sky’s the limit!",-1)),n[176]||(n[176]=s("p",null,"Fly.io is a wonderful platform. It’s fun to work with, will scale to your application’s changing load, and is incredibly flexible. I urge you to give it a try for your next project.",-1)),b(" TODO: add ARTICLE CARD "),e(p,r(c({title:"Introducing Fly.io",desc:"If it can go in a Docker, Fly can host it, and they'll help you with that. Adam Rackis takes a look at the platform and shows off all the things he likes about it.",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/introducing-fly-io.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const Q=k(v,[["render",G]]),Z=JSON.parse('{"path":"/frontendmasters.com/introducing-fly-io.html","title":"Introducing Fly.io","lang":"en-US","frontmatter":{"lang":"en-US","title":"Introducing Fly.io","description":"Article(s) > Introducing Fly.io","icon":"fa-brands fa-fly","category":["DevOps","Fly","Docker","Node.js","Next.js","Article(s)"],"tag":["blog","frontendmasters.com","devops","fly","fly-io","docker","node","nodejs","node-js","next","nextjs","next-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Introducing Fly.io\\",\\"image\\":[\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-1-next-app.png?resize=1024%2C764&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-2-fly-launch-initial.png?resize=1024%2C419&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-3-default-settings.png?resize=1024%2C751&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-4-updated-settings.png?resize=1024%2C751&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-5-cli-finish.png?resize=1024%2C454&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-6-fly-dashboard.png?resize=1024%2C349&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-7-app-in-dashboard.png?resize=1024%2C1018&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-8-app-running.png?resize=1024%2C866&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-10-fly-pg-created.png?resize=1024%2C381&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-9-fly-postgres-create.png?resize=1024%2C299&ssl=1\\",\\"https://i0.wp.com/adam-rackis-blog-staging.fly.dev/fly-io/img-10-fly-pg-created.png?ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/img-11-fly-proxy.png?resize=902%2C122&ssl=1\\"],\\"datePublished\\":\\"2024-12-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Adam Rackis\\",\\"url\\":\\"https://frontendmasters.com/blog/author/adamrackis/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/introducing-fly-io.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Introducing Fly.io"}],["meta",{"property":"og:description","content":"Article(s) > Introducing Fly.io"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/4742"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/4742"}],["meta",{"name":"twitter:image:alt","content":"Introducing Fly.io"}],["meta",{"property":"article:author","content":"Adam Rackis"}],["meta",{"property":"article:tag","content":"next-js"}],["meta",{"property":"article:tag","content":"nextjs"}],["meta",{"property":"article:tag","content":"next"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"fly-io"}],["meta",{"property":"article:tag","content":"fly"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-12-12T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Introducing Fly.io"},{"property":"og:description","content":"Introducing Fly.io"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/introducing-fly-io.html"}]],"prev":"/devops/fly/articles/README.md","date":"2024-12-12T00:00:00.000Z","isOriginal":false,"author":[{"name":"Adam Rackis","url":"https://frontendmasters.com/blog/author/adamrackis/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/4742"},"git":{},"readingTime":{"minutes":13.59,"words":4078},"filePathRelative":"frontendmasters.com/introducing-fly-io.md","copyright":{"author":"Adam Rackis"}}');export{Q as comp,Z as data};
