import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as t,b as u,a as y,t as f,n as k,g as d,w as e,e as a,r as i,o as w}from"./app-BVguHYKu.js";const q="/bookshelf/assets/image/blog.logrocket.com/mocking-complex-apis-mirage-js/banner.png",j="/bookshelf/assets/image/blog.logrocket.com/mocking-complex-apis-mirage-js/bookvault-demo-application.gif",x="/bookshelf/assets/image/blog.logrocket.com/mocking-complex-apis-mirage-js/api-entity-relationship-diagram.png",S="/bookshelf/assets/image/blog.logrocket.com/mocking-complex-apis-mirage-js/network-error-frontend-bookvault-app.png",M={},I={id:"frontmatter-title-관련",tabindex:"-1"},A={class:"header-anchor",href:"#frontmatter-title-관련"},P={class:"table-of-contents"},T={href:"https://github.com/emmanuelhashy/mirage-demo",target:"_blank",rel:"noopener noreferrer"},J={href:"https://linkedin.com/in/emmanuel-john-a17526335",target:"_blank",rel:"noopener noreferrer"};function R(m,n){const r=i("VPCard"),p=i("router-link"),v=i("SiteInfo"),o=i("VPIcon"),g=i("CodeTabs");return w(),h("div",null,[s("h1",I,[s("a",A,[s("span",null,f(m.$frontmatter.title)+" 관련",1)])]),t(r,k(d({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js-node/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",P,[s("ul",null,[s("li",null,[t(p,{to:"#setting-up-mirage-js-in-a-frontend-project"},{default:e(()=>n[0]||(n[0]=[a("Setting up Mirage JS in a frontend project")])),_:1,__:[0]})]),s("li",null,[t(p,{to:"#an-overview-of-our-demo-application"},{default:e(()=>n[1]||(n[1]=[a("An overview of our demo application")])),_:1,__:[1]})]),s("li",null,[t(p,{to:"#mocking-complex-api-relationships"},{default:e(()=>n[2]||(n[2]=[a("Mocking complex API relationships")])),_:1,__:[2]})]),s("li",null,[t(p,{to:"#serializing-response-data"},{default:e(()=>n[3]||(n[3]=[a("Serializing response data")])),_:1,__:[3]})]),s("li",null,[t(p,{to:"#seeding-data-into-mirage-s-database"},{default:e(()=>n[4]||(n[4]=[a("Seeding data into Mirage’s database")])),_:1,__:[4]})]),s("li",null,[t(p,{to:"#improve-mirage-s-database-seeding-with-factories"},{default:e(()=>n[5]||(n[5]=[a("Improve Mirage’s database seeding with factories")])),_:1,__:[5]})]),s("li",null,[t(p,{to:"#defining-routes-for-the-api-endpoints"},{default:e(()=>n[6]||(n[6]=[a("Defining routes for the API endpoints")])),_:1,__:[6]}),s("ul",null,[s("li",null,[t(p,{to:"#fetching-a-single-book"},{default:e(()=>n[7]||(n[7]=[a("Fetching a single book")])),_:1,__:[7]})]),s("li",null,[t(p,{to:"#fetching-a-categories-endpoint"},{default:e(()=>n[8]||(n[8]=[a("Fetching a categories endpoint")])),_:1,__:[8]})]),s("li",null,[t(p,{to:"#fetching-authors-endpoint"},{default:e(()=>n[9]||(n[9]=[a("Fetching authors endpoint")])),_:1,__:[9]})]),s("li",null,[t(p,{to:"#fetching-books-by-author-endpoint"},{default:e(()=>n[10]||(n[10]=[a("Fetching books by author endpoint")])),_:1,__:[10]})])])]),s("li",null,[t(p,{to:"#mocking-jwt-authentication-endpoints"},{default:e(()=>n[11]||(n[11]=[a("Mocking JWT authentication endpoints")])),_:1,__:[11]}),s("ul",null,[s("li",null,[t(p,{to:"#user-login-endpoint"},{default:e(()=>n[12]||(n[12]=[a("User login endpoint")])),_:1,__:[12]})]),s("li",null,[t(p,{to:"#fetching-authorized-user-profiles"},{default:e(()=>n[13]||(n[13]=[a("Fetching authorized user profiles")])),_:1,__:[13]})])])]),s("li",null,[t(p,{to:"#mocking-role-based-access-api-endpoints"},{default:e(()=>n[14]||(n[14]=[a("Mocking role-based access API endpoints")])),_:1,__:[14]}),s("ul",null,[s("li",null,[t(p,{to:"#submit-a-review-only-users-endpoint"},{default:e(()=>n[15]||(n[15]=[a("Submit a review (only users) endpoint")])),_:1,__:[15]})]),s("li",null,[t(p,{to:"#add-an-author-only-admins-endpoint"},{default:e(()=>n[16]||(n[16]=[a("Add an author (only admins) endpoint")])),_:1,__:[16]})]),s("li",null,[t(p,{to:"#add-a-category-only-admins-endpoint"},{default:e(()=>n[17]||(n[17]=[a("Add a category (only admins) endpoint")])),_:1,__:[17]})]),s("li",null,[t(p,{to:"#add-a-book-only-admins-endpoint"},{default:e(()=>n[18]||(n[18]=[a("Add a book (only admins) endpoint")])),_:1,__:[18]})])])]),s("li",null,[t(p,{to:"#conclusion"},{default:e(()=>n[19]||(n[19]=[a("Conclusion")])),_:1,__:[19]})])])]),n[38]||(n[38]=s("hr",null,null,-1)),t(v,{name:"Mocking complex APIs with Mirage JS",desc:"Mock complex APIs with JavaScript's Mirage JS library including JWT authentication, relational data, role-based access control, and more.",url:"https://blog.logrocket.com/mocking-complex-apis-mirage-js",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/mocking-complex-apis-mirage-js/banner.png"}),n[39]||(n[39]=u('<div class="hint-container info"><p class="hint-container-title">Info</p><p>Mirage JS is an API mocking library that helps frontend developers simulate complex backend behavior without a real server. This article explores how to mock relational data models, JWT authentication, and role-based access control using Mirage’s ORM, serializers, factories, and route handlers. You’ll also learn how to seed user data and build realistic mock APIs to test features like user roles, permissions, and loading states.</p></div><figure><img src="'+q+'" alt="Mocking Complex APIs With Mirage JS" tabindex="0" loading="lazy"><figcaption>Mocking Complex APIs With Mirage JS</figcaption></figure><p>API integration in frontend applications today goes beyond the simple GET, POST, and PUT requests. Most frontend applications integrate APIs for authentication, role-based permissions, pagination, and other advanced features with complex API relationships.</p><p>However, relying on a real backend to test these features can be slow and unreliable, especially in the early stages of development. While the mock responses for some of these features can be hard-coded, this doesn’t scale and often isn’t sufficient for testing features effectively.</p><p>Mirage JS is an API mocking library that helps simulate real-world backend complexity with its support for one-to-many and many-to-many relationships, mimicking real database operations. In this tutorial, we’ll use Mirage to explore mocking complex relationship APIs, mocking JWT authentication, and learn how to use Mirage factories to mock multiple server states, including:</p><ul><li>Simulating loading, success, empty, and error states</li><li>Mocking different user roles and permissions</li><li>Testing how your UI reacts to various API responses</li></ul><div class="hint-container note"><p class="hint-container-title">Prerequisites</p><p>Before following this tutorial, you should have:</p><ul><li>Knowledge of JavaScript</li><li>Experience building web apps with frontend frameworks; we’ll use React for this project</li><li>Node.js v21 installed</li><li>An understanding of how backend APIs work is beneficial but not required</li></ul></div><hr><h2 id="setting-up-mirage-js-in-a-frontend-project" tabindex="-1"><a class="header-anchor" href="#setting-up-mirage-js-in-a-frontend-project"><span>Setting up Mirage JS in a frontend project</span></a></h2><p>Run the following commands to add Mirage to your project:</p>',10)),t(g,{data:[{id:'<VPIcon icon="fa-brands fa-yarn"/>'},{id:'<VPIcon icon="fa-brands fa-npm"/>'}],active:0,"tab-id":"sh"},{title0:e(({value:c,isActive:l})=>[t(o,{icon:"fa-brands fa-yarn"})]),title1:e(({value:c,isActive:l})=>[t(o,{icon:"fa-brands fa-npm"})]),tab0:e(({value:c,isActive:l})=>n[20]||(n[20]=[s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[s("pre",null,[s("code",{class:"language-bash"},[s("span",{class:"line"},[s("span",{class:"token function"},"yarn"),a(),s("span",{class:"token function"},"add"),a(),s("span",{class:"token parameter variable"},"--dev"),a(" miragejs")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),tab1:e(({value:c,isActive:l})=>n[21]||(n[21]=[s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh"},[s("pre",null,[s("code",{class:"language-bash"},[s("span",{class:"line"},[s("span",{class:"token function"},"npm"),a(),s("span",{class:"token function"},"install"),a(" --save-dev miragejs")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),_:1}),n[40]||(n[40]=s("p",null,[a("Mirage lets you fake a backend server with API responses using route handlers, which are just JavaScript functions that return a response data or object. With "),s("code",null,"createServer()"),a(" and route handlers, you can create your mock API server.")],-1)),s("p",null,[n[22]||(n[22]=a("Create a ")),t(o,{icon:"fas fa-folder-open"}),n[23]||(n[23]=s("code",null,"mirage/",-1)),t(o,{icon:"fa-brands fa-js"}),n[24]||(n[24]=s("code",null,"books.js",-1)),n[25]||(n[25]=a(" file in your project’s ")),t(o,{icon:"fas fa-folder-open"}),n[26]||(n[26]=s("code",null,"src",-1)),n[27]||(n[27]=a(" folder and add the following:"))]),n[41]||(n[41]=u(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="mirage/books.js"><span>mirage/books.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createServer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;miragejs&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>namespace <span class="token operator">=</span> <span class="token string">&quot;api&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/books&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">books</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Think Big&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token string">&quot;Ben Carson&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Rich Dad&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token string">&quot;Robert Kiyosaki&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Things fall apart&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token string">&quot;Chinua Achebe&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Next, run the Mirage server in your project’s entry file as follows:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">...</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> makeServer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./mirage/books.js&#39;</span></span>
<span class="line"><span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token operator">&lt;</span>StrictMode<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>StrictMode<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, if your app makes a GET request to <code>api/books</code>, Mirage will respond with the <code>books</code> array.</p><hr><h2 id="an-overview-of-our-demo-application" tabindex="-1"><a class="header-anchor" href="#an-overview-of-our-demo-application"><span>An overview of our demo application</span></a></h2><p>When building modern web applications, working with relational data and handling complex API relationships is inevitable. To better understand Mirage’s mocking utilities and their use cases, we’ll get hands-on practice building a real-life application.</p><p>We’ll build a book app called BookVault — a platform for book reviews and discussions with authentication and role-based access control. To achieve this, we’ll create a fully functional mock API using Mirage JS, modeling key relationships like users, books, authors, categories, and reviews.</p><p>The mock API will handle authentication and user roles (<code>admin</code>, <code>editor</code>, and <code>user</code>), ensuring proper role-based access control. Admins can add books, authors, and categories, while users can submit reviews. The API will also provide endpoints for fetching books, categories, authors, and user profiles, simulating a real-world backend environment.</p><p>Here is what the complete BookVault application will look like:</p><figure><img src="`+j+'" alt="BookVault Demo Application" tabindex="0" loading="lazy"><figcaption>BookVault Demo Application</figcaption></figure>',11)),s("p",null,[n[31]||(n[31]=a("We’ll mainly focus on mocking the API endpoints with Mirage; you can follow the ")),s("a",T,[n[28]||(n[28]=a("complete source code here (")),t(o,{icon:"iconfont icon-github"}),n[29]||(n[29]=s("code",null,"emmanuelhashy/mirage-demo",-1)),n[30]||(n[30]=a(")"))]),n[32]||(n[32]=a("."))]),n[42]||(n[42]=u('<hr><h2 id="mocking-complex-api-relationships" tabindex="-1"><a class="header-anchor" href="#mocking-complex-api-relationships"><span>Mocking complex API relationships</span></a></h2><p>Mocking API endpoints with complex relationships is always tricky. Fortunately, Mirage has a built-in ORM to mock relationships of any complexity.</p><p>Here is the diagram for the models and relationship of the BookVault app:</p><figure><img src="'+x+`" alt="API Entity Relationship Diagram" tabindex="0" loading="lazy"><figcaption>API Entity Relationship Diagram</figcaption></figure><p>This models the relationships between users, books, authors, categories, and reviews. A <code>User</code> can write multiple <code>Review</code>s, while each <code>Review</code> belongs to a single <code>User</code> and a specific <code>Book</code>. A <code>Book</code> belongs to one <code>Author</code> and one <code>Category</code> but can have multiple <code>Review</code>s. Meanwhile, an <code>Author</code> can write multiple <code>Book</code>s, and a <code>Category</code> can contain multiple <code>Book</code>s.</p><p>You can declare this relationship in your models as follows:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="mirage/books.js"><span>mirage/books.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createServer<span class="token punctuation">,</span> hasMany<span class="token punctuation">,</span> belongsTo<span class="token punctuation">,</span> Model <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;miragejs&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">models</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">user</span><span class="token operator">:</span> Model<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">reviews</span><span class="token operator">:</span> <span class="token function">hasMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">book</span><span class="token operator">:</span> Model<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token function">belongsTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">category</span><span class="token operator">:</span> <span class="token function">belongsTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">reviews</span><span class="token operator">:</span> <span class="token function">hasMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">author</span><span class="token operator">:</span> Model<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">books</span><span class="token operator">:</span> <span class="token function">hasMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">category</span><span class="token operator">:</span> Model<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">books</span><span class="token operator">:</span> <span class="token function">hasMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">review</span><span class="token operator">:</span> Model<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token function">belongsTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">book</span><span class="token operator">:</span> <span class="token function">belongsTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>With this setup, Mirage knows about the relationship between these models.</p><hr><h2 id="serializing-response-data" tabindex="-1"><a class="header-anchor" href="#serializing-response-data"><span>Serializing response data</span></a></h2><p>Most complex API endpoints return nested relational data. Mirage provides a serializer layer that we’ll use to transform our response data to include related data from different models.</p><p>Import <code>RestSerializer</code> and configure serializers for the Book and Review models. The <code>book</code> serializer should embed its related models (<code>Author</code>, <code>Category</code>, and <code>Reviews</code>) whenever book data is returned. Similarly, the <code>review</code> serializer should embed the <code>User</code> model since reviews are linked to users:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createServer<span class="token punctuation">,</span> hasMany<span class="token punctuation">,</span> belongsTo<span class="token punctuation">,</span> RestSerializer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;miragejs&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">serializers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">book</span><span class="token operator">:</span> RestSerializer<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;category&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;reviews&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">embed</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">review</span><span class="token operator">:</span> RestSerializer<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">embed</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, the GET request to <code>/api/books</code> will return each book’s <code>Author</code> embedded alongside it, like this:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="GET /api/books"><span>GET /api/books</span></div><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;books&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Think Big&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Ben Carson&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Things fall apart&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Chinua Achebe&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="seeding-data-into-mirage-s-database" tabindex="-1"><a class="header-anchor" href="#seeding-data-into-mirage-s-database"><span>Seeding data into Mirage’s database</span></a></h2><p>Mirage provides the <code>seeds</code> hook to seed its database with some initial data once the server is started.</p><p>Let’s pre-populate Mirage’s database with sample data for our models:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createServer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;miragejs&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">seeds</span><span class="token punctuation">(</span><span class="token parameter">server</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      server<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&quot;admin@gmail.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      server<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;editor&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&quot;editor@gmail.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;editor&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> user <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;reader&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&quot;reader@gmail.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">let</span> fiction <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;category&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Fiction&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> author <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;J.K. Rowling&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> author1 <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;P.J. Jones&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">let</span> book1 <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;book&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Harry Potter&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        author<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">category</span><span class="token operator">:</span> fiction<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> book2 <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;book&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Fantastic Beasts&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">author</span><span class="token operator">:</span> author1<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">category</span><span class="token operator">:</span> fiction<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      server<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;review&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;Amazing book!&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token literal-property property">book</span><span class="token operator">:</span> book1 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      server<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;review&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;Nice read!&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token literal-property property">book</span><span class="token operator">:</span> book2 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The seed hook creates a user with the role of <code>user</code> and then adds a <code>fiction</code> category. Two authors, <code>J.K. Rowling</code> and <code>P.J. Jones</code>, are created, followed by two books, <code>Harry Potter</code> and <code>Fantastic Beasts</code>, each assigned to an author and categorized under <code>fiction</code>. Lastly, the hook creates reviews for both books, linking them to the previously created user.</p><hr><h2 id="improve-mirage-s-database-seeding-with-factories" tabindex="-1"><a class="header-anchor" href="#improve-mirage-s-database-seeding-with-factories"><span>Improve Mirage’s database seeding with factories</span></a></h2><p>Notice how we had to seed every single data for each model in the previous section. Imagine doing the same for hundreds of data points for each model — it would be pretty tedious!</p><p>Fortunately, Mirage also includes the <code>factory</code> hook to simplify Mirage’s database seeding with some relational data once the server is started.</p><p>We can create a factory for our <code>user</code> model like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token literal-property property">factories</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">user</span><span class="token operator">:</span> Factory<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here is a factory implementation for the seeding logic covered in the previous section:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createServer<span class="token punctuation">,</span> Factory<span class="token punctuation">,</span> association <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;miragejs&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">factories</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">user</span><span class="token operator">:</span> Factory<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">username</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;editor&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;reader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function">email</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&quot;admin@gmail.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;editor@gmail.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;reader@gmail.com&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function">role</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;editor&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">category</span><span class="token operator">:</span> Factory<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Fiction </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">author</span><span class="token operator">:</span> Factory<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&quot;J.K. Rowling&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;P.J. Jones&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">book</span><span class="token operator">:</span> Factory<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">title</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&quot;Harry Potter&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fantastic Beasts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function">author</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token function">association</span><span class="token punctuation">(</span><span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function">category</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token function">association</span><span class="token punctuation">(</span><span class="token string">&quot;category&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">review</span><span class="token operator">:</span> Factory<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">content</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&quot;Amazing book!&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Nice read!&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token function">association</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function">book</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token function">association</span><span class="token punctuation">(</span><span class="token string">&quot;book&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each factory defines how Mirage should dynamically generate randomized, structured data.</p><p>Mirage’s <code>association</code> function is used to link related models. The <code>i</code> parameter allows indexing for dynamic data. It is used to generate unique values.</p><p>Now, we can use the <code>createList</code> method to generate three users with a few lines of code:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">seeds</span><span class="token punctuation">(</span><span class="token parameter">server</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  server<span class="token punctuation">.</span><span class="token function">createList</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here is a refactor of the seeding logic covered in the previous section using the factory:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">seeds</span><span class="token punctuation">(</span><span class="token parameter">server</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> users <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">createList</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> fiction <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;category&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> authors <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">createList</span><span class="token punctuation">(</span><span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">        server<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;book&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Harry Potter&quot;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">author</span><span class="token operator">:</span> authors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">category</span><span class="token operator">:</span> fiction<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        server<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;book&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Fantastic Beasts&quot;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">author</span><span class="token operator">:</span> authors<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">category</span><span class="token operator">:</span> fiction<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      server<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;review&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;Amazing book!&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">user</span><span class="token operator">:</span> users<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">book</span><span class="token operator">:</span> books<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      server<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;review&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;Nice read!&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">user</span><span class="token operator">:</span> users<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">book</span><span class="token operator">:</span> books<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above seed hook generates three users (<code>admin</code>, <code>editor</code>, <code>reader</code>), a single category (<code>Fiction</code>), and two authors (<code>J.K. Rowling</code> and <code>P.J. Jones</code>). It then creates two books (<code>Harry Potter</code> and <code>Fantastic Beasts</code>), linking them to their respective authors and category. Finally, it adds two reviews, both assigned to the <code>reader</code> user and linked to their respective books.</p><hr><h2 id="defining-routes-for-the-api-endpoints" tabindex="-1"><a class="header-anchor" href="#defining-routes-for-the-api-endpoints"><span>Defining routes for the API endpoints</span></a></h2><p>So far, we’ve architected the structure of our models and their relationships. At this point, if we run our frontend application, we’ll have the following error:</p><figure><img src="`+S+`" alt="Network Error In Our Frontend BookVault App" tabindex="0" loading="lazy"><figcaption>Network Error In Our Frontend BookVault App</figcaption></figure><p>This is because we haven’t defined routes for the endpoints that the app is trying to access.</p><p>We can mock API endpoints using the <code>routes()</code> hook to define our route handlers. Update the server with the following:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>namespace <span class="token operator">=</span> <span class="token string">&quot;api&quot;</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// Fetch Books</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/books&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">schema</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> schema<span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>this.get()</code> method lets us mock out GET requests. The first argument is the URL we’re handling (<code>/books</code>) and the second argument is a function that handles the data manipulation logic and responds to our app with some data. The <code>namespace</code> appends <code>/api</code> to all the endpoint URLs like <code>/api/books</code>.</p><h3 id="fetching-a-single-book" tabindex="-1"><a class="header-anchor" href="#fetching-a-single-book"><span>Fetching a single book</span></a></h3><p>This route handles <code>GET /api/books/:id</code> requests by retrieving a book from Mirage’s database using the provided <code>id</code> (a dynamic segment in our URL):</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/books/:id&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">schema<span class="token punctuation">,</span> request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> book <span class="token operator">=</span> schema<span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> book <span class="token operator">?</span> book <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&quot;Book not found&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fetching-a-categories-endpoint" tabindex="-1"><a class="header-anchor" href="#fetching-a-categories-endpoint"><span>Fetching a categories endpoint</span></a></h3><p>This route handler defines a <code>GET /categories</code> API endpoint in Mirage. It retrieves and returns all category records stored in Mirage’s mock database:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/categories&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">schema</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> schema<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fetching-authors-endpoint" tabindex="-1"><a class="header-anchor" href="#fetching-authors-endpoint"><span>Fetching authors endpoint</span></a></h3><p>This route handler defines a <code>GET /authors</code> API endpoint in Mirage. It retrieves and returns all author records stored in Mirage’s mock database when a request is made to this endpoint:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/authors&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">schema</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> schema<span class="token punctuation">.</span>authors<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fetching-books-by-author-endpoint" tabindex="-1"><a class="header-anchor" href="#fetching-books-by-author-endpoint"><span>Fetching books by author endpoint</span></a></h3><p>This endpoint retrieves all books written by a specific author, based on the author’s ID:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/authors/:id/books&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">schema<span class="token punctuation">,</span> request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> authorId <span class="token operator">=</span> request<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> author <span class="token operator">=</span> schema<span class="token punctuation">.</span>authors<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>authorId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> author<span class="token punctuation">.</span>books<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When a <code>GET</code> request is made to this route, the <code>id</code> parameter is extracted from the URL (<code>request.params.id</code>). The ID is used to find the corresponding author from Mirage’s database. Finally, it returns the list of books associated with that author.</p><hr><h2 id="mocking-jwt-authentication-endpoints" tabindex="-1"><a class="header-anchor" href="#mocking-jwt-authentication-endpoints"><span>Mocking JWT authentication endpoints</span></a></h2><p>Mocking JWT authentication endpoints is usually tricky because the <code>jsonwebtoken</code> package, a popular library for working with JWTs, only supports Node.js and doesn’t work on the browser. In this section, we’ll explore a simple trick to effectively mock JWT authentication endpoints.</p><h3 id="user-login-endpoint" tabindex="-1"><a class="header-anchor" href="#user-login-endpoint"><span>User login endpoint</span></a></h3><p>This endpoint handles user authentication by checking the provided email and password against stored user data:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">schema<span class="token punctuation">,</span> request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> user <span class="token operator">=</span> schema<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">findBy</span><span class="token punctuation">(</span><span class="token punctuation">{</span> email <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user <span class="token operator">||</span> user<span class="token punctuation">.</span>password <span class="token operator">!==</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;Invalid credentials&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token string">&quot;valid-token&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">          token<span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> user<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token literal-property property">email</span><span class="token operator">:</span> user<span class="token punctuation">.</span>email<span class="token punctuation">,</span> <span class="token literal-property property">role</span><span class="token operator">:</span> user<span class="token punctuation">.</span>role <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The endpoint first extracts the credentials from the request body and searches for a matching user in the database. If no user is found or the password is incorrect, it returns a <code>401 Unauthorized</code> response with an error message. If the credentials are valid, it generates a mock JWT (<code>&quot;valid-token&quot;</code>) and returns it with the user’s ID, email, and role.</p><h3 id="fetching-authorized-user-profiles" tabindex="-1"><a class="header-anchor" href="#fetching-authorized-user-profiles"><span>Fetching authorized user profiles</span></a></h3><p>This route handler retrieves a user’s profile based on their ID while enforcing JWT authentication:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/user-profile/:id&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">schema<span class="token punctuation">,</span> request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> id <span class="token operator">=</span> request<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> authHeader <span class="token operator">=</span> request<span class="token punctuation">.</span>requestHeaders<span class="token punctuation">.</span>Authorization<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>authHeader<span class="token punctuation">)</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;No token provided&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> user <span class="token operator">=</span> schema<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">return</span> user <span class="token operator">?</span> user <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&quot;User not found&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> error<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;Invalid token&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It first extracts the <code>id</code> from the request parameters and checks for an <code>Authorization</code> header. If no token is provided, it returns a <code>401 Unauthorized</code> response. Then, it attempts to find the user in Mirage’s database using <code>schema.users.find(id)</code>. If the user exists, it returns the user data. Otherwise, it returns a <code>404 Not Found</code> error. If any error occurs (such as an invalid token), it responds with a <code>403 Forbidden</code> status.</p><p>You can apply the same logic for protected API routes requiring authentication.</p><p>Here is how the <code>user-profile</code> endpoint is accessed:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/user-profile/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">Authorization</span><span class="token operator">:</span> token<span class="token punctuation">,</span> <span class="token comment">// Attach token here</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setProfile</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>user<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>First, we retrieve the JWT token stored in <code>localStorage</code> after the user logs in and sends a <code>GET</code> request to <code>/api/user-profile/\${userId}</code> with the token in the <code>Authorization</code> header.</p><hr><h2 id="mocking-role-based-access-api-endpoints" tabindex="-1"><a class="header-anchor" href="#mocking-role-based-access-api-endpoints"><span>Mocking role-based access API endpoints</span></a></h2><p>Mirage JS also makes it easy to mock role-based access API endpoints, allowing you to simulate different user roles and permissions.</p><h3 id="submit-a-review-only-users-endpoint" tabindex="-1"><a class="header-anchor" href="#submit-a-review-only-users-endpoint"><span>Submit a review (only users) endpoint</span></a></h3><p>This route handles <code>POST /api/books/:id/review</code>, allowing only users with the <code>user</code> role to submit reviews for a specific book:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/books/:id/review&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">schema<span class="token punctuation">,</span> request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token punctuation">{</span> user<span class="token punctuation">,</span> content<span class="token punctuation">,</span> userId <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>role <span class="token operator">!==</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token number">403</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">{</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&quot;Only users can review books&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">let</span> book <span class="token operator">=</span> schema<span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> book</span>
<span class="line">          <span class="token operator">?</span> schema<span class="token punctuation">.</span>reviews<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> book <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&quot;Book not found&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It checks if the user has the <code>user</code> role; otherwise, it returns a <code>403 Forbidden</code> error. If the book exists, it creates a new review linked to the book and user; otherwise, it returns a <code>404 Not Found</code> error.</p><h3 id="add-an-author-only-admins-endpoint" tabindex="-1"><a class="header-anchor" href="#add-an-author-only-admins-endpoint"><span>Add an author (only admins) endpoint</span></a></h3><p>This route handles <code>POST /authors</code> requests, allowing only users with the <code>admin</code> role to add authors:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/authors&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">schema<span class="token punctuation">,</span> request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> author <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>author<span class="token punctuation">.</span>user<span class="token punctuation">.</span>role <span class="token operator">!==</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&quot;Permission denied&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> schema<span class="token punctuation">.</span>authors<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The endpoint checks if the <code>user.role</code> is <code>admin</code>. If the user is not, it returns a <code>403 Forbidden</code> response with an error message <code>Permission denied</code>. Otherwise, it creates a new author entry in the Mirage JS database.</p><h3 id="add-a-category-only-admins-endpoint" tabindex="-1"><a class="header-anchor" href="#add-a-category-only-admins-endpoint"><span>Add a category (only admins) endpoint</span></a></h3><p>This route handles <code>POST /categories</code> requests allowing only users with the <code>admin</code> role to add new categories:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/categories&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">schema<span class="token punctuation">,</span> request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> category <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>category<span class="token punctuation">.</span>user<span class="token punctuation">.</span>role <span class="token operator">!==</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&quot;Permission denied&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> schema<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The endpoint checks if the <code>user.role</code> is <code>admin</code>. If the user is not, it returns a <code>403 Forbidden</code> response with an error message. Otherwise, it creates a new category entry in the Mirage database.</p><h3 id="add-a-book-only-admins-endpoint" tabindex="-1"><a class="header-anchor" href="#add-a-book-only-admins-endpoint"><span>Add a book (only admins) endpoint</span></a></h3><p>This route handles a <code>POST /books</code> request, allowing users with the <code>admin</code> role to add a new book:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">makeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/books&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">schema<span class="token punctuation">,</span> request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> book <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">.</span>user<span class="token punctuation">.</span>role <span class="token operator">!==</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&quot;Permission denied&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> schema<span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The endpoint first parses the request body to extract the book data. If the user’s role is not <code>admin</code>, it returns a <code>403 Forbidden</code> response with an error message. Otherwise, it creates and stores the book in Mirage’s database.</p><p>Now, run the app and everything should be working as expected!</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>In this tutorial, we explored mocking complex relationship APIs using Mirage JS, mocking JWT authentication, and how to use Mirage JS factories to mock multiple server states. We also covered mocking role-based access API endpoints that allow you to simulate different user roles and permissions.</p><p>With this tutorial, you can build MVPs of any complexity without a backend. The most exciting experience is that whenever your backend API is stable, all you have to do is remove the mock server from your app and replace the API URLs with that of your backend API.</p>`,97)),s("p",null,[n[36]||(n[36]=a("If you encounter any issues while following this tutorial or need expert help with web/mobile development, don’t hesitate to reach out on ")),s("a",J,[n[33]||(n[33]=a("LinkedIn (")),t(o,{icon:"fa-brands fa-linkedin"}),n[34]||(n[34]=s("code",null,"emmanuel-john-a17526335",-1)),n[35]||(n[35]=a(")"))]),n[37]||(n[37]=a(". I’d love to connect and am always happy to assist!"))]),y(" TODO: add ARTICLE CARD "),t(r,k(d({title:"Mocking complex APIs with Mirage JS",desc:"Mock complex APIs with JavaScript's Mirage JS library including JWT authentication, relational data, role-based access control, and more.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/mocking-complex-apis-mirage-js.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const z=b(M,[["render",R]]),E=JSON.parse('{"path":"/blog.logrocket.com/mocking-complex-apis-mirage-js.html","title":"Mocking complex APIs with Mirage JS","lang":"en-US","frontmatter":{"lang":"en-US","title":"Mocking complex APIs with Mirage JS","description":"Article(s) > Mocking complex APIs with Mirage JS","icon":"fa-brands fa-node","category":["Node.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Mocking complex APIs with Mirage JS\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/mocking-complex-apis-mirage-js/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/mocking-complex-apis-mirage-js/bookvault-demo-application.gif\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/mocking-complex-apis-mirage-js/api-entity-relationship-diagram.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/mocking-complex-apis-mirage-js/network-error-frontend-bookvault-app.png\\"],\\"datePublished\\":\\"2025-04-04T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Emmanuel John\\",\\"url\\":\\"https://blog.logrocket.com/author/emmanueljohn/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/mocking-complex-apis-mirage-js.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Mocking complex APIs with Mirage JS"}],["meta",{"property":"og:description","content":"Article(s) > Mocking complex APIs with Mirage JS"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/mocking-complex-apis-mirage-js/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/mocking-complex-apis-mirage-js/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Mocking complex APIs with Mirage JS"}],["meta",{"property":"article:author","content":"Emmanuel John"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-04-04T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Mocking complex APIs with Mirage JS"},{"property":"og:description","content":"Mocking complex APIs with Mirage JS"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/mocking-complex-apis-mirage-js.html"}]],"prev":"/programming/js-node/articles/README.md","date":"2025-04-04T00:00:00.000Z","isOriginal":false,"author":[{"name":"Emmanuel John","url":"https://blog.logrocket.com/author/emmanueljohn/"}],"cover":"/assets/image/blog.logrocket.com/mocking-complex-apis-mirage-js/banner.png"},"git":{},"readingTime":{"minutes":10.53,"words":3160},"filePathRelative":"blog.logrocket.com/mocking-complex-apis-mirage-js.md","copyright":{"author":"Emmanuel John"}}');export{z as comp,E as data};
