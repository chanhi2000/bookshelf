import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as s,f as e,b as p,t as g,n as c,g as r,w as o,e as a,r as u,o as h}from"./app-BVguHYKu.js";const y="/bookshelf/assets/image/d2.naver.com/1203723/1.png",f="/bookshelf/assets/image/d2.naver.com/1203723/2.png",j="/bookshelf/assets/image/d2.naver.com/1203723/3.png",w="/bookshelf/assets/image/d2.naver.com/1203723/4.png",T="/bookshelf/assets/image/d2.naver.com/1203723/5.png",x="/bookshelf/assets/image/d2.naver.com/1203723/6.png",N="/bookshelf/assets/image/d2.naver.com/1203723/7.png",V="/bookshelf/assets/image/d2.naver.com/1203723/8.png",J="/bookshelf/assets/image/d2.naver.com/1203723/9.png",I={},E={id:"frontmatter-title-관련",tabindex:"-1"},q={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},M={href:"https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/DynamicLibraryDesignGuidelines.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/openjdk/jdk21/blob/master/src/java.base/share/native/libjava/Thread.c#L39",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/openjdk/jdk21/blob/master/src/hotspot/share/prims/jvm.cpp#L2928",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/openjdk/jdk21/blob/master/src/hotspot/share/runtime/javaThread.hpp#L78",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/openjdk/jdk21/blob/master/src/java.base/share/classes/java/lang/VirtualThread.java#L91",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/openjdk/jdk21/blob/master/src/java.base/share/classes/java/lang/BaseVirtualThread.java#L30",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/openjdk/jdk21/blob/master/src/java.base/share/classes/java/lang/VirtualThread.java#L581",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/openjdk/jdk21/blob/master/src/java.base/share/classes/java/lang/VirtualThread.java#L733",target:"_blank",rel:"noopener noreferrer"},F={href:"https://github.com/openjdk/jdk21/blob/master/src/java.base/share/classes/java/lang/VirtualThread.java#L1113",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/openjdk/jdk21/blob/master/src/java.base/share/classes/java/lang/VirtualThread.java#L131",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/openjdk/jdk21/blob/master/src/java.base/share/classes/java/lang/VirtualThread.java#L351",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/mysql/mysql-connector-j/pull/95",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/f4b6a3/uuid-creator/commit/3e684b1dec472b51a641bbd1762b33c9ea62bc77",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/openjdk/jdk21/blob/master/src/java.base/share/classes/java/lang/Thread.java#L498",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/openjdk/jdk21/blob/master/src/java.base/share/classes/java/lang/VirtualThread.java#L791",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/openjdk/jdk21/blob/master/src/java.base/share/classes/java/lang/VirtualThread.java#L628",target:"_blank",rel:"noopener noreferrer"};function $(d,n){const i=u("VPCard"),l=u("router-link"),k=u("SiteInfo"),v=u("VidStack"),t=u("VPIcon");return h(),b("div",null,[s("h1",E,[s("a",q,[s("span",null,g(d.$frontmatter.title)+" 관련",1)])]),e(i,c(r({title:"Spring > Article(s)",desc:"Article(s)",link:"/programming/java-spring/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[e(l,{to:"#jni"},{default:o(()=>n[0]||(n[0]=[a("JNI")])),_:1,__:[0]})]),s("li",null,[e(l,{to:"#java-스레드"},{default:o(()=>n[1]||(n[1]=[a("Java 스레드")])),_:1,__:[1]})]),s("li",null,[e(l,{to:"#virtualthread-virtual-thread"},{default:o(()=>n[2]||(n[2]=[a('virtualthread">Virtual Thread')])),_:1,__:[2]}),s("ul",null,[s("li",null,[e(l,{to:"#virtual-thread-concepts"},{default:o(()=>n[3]||(n[3]=[a("Virtual Thread concepts")])),_:1,__:[3]})]),s("li",null,[e(l,{to:"#virtual-thread-states"},{default:o(()=>n[4]||(n[4]=[a("Virtual Thread states")])),_:1,__:[4]})]),s("li",null,[e(l,{to:"#virtual-thread-pinning"},{default:o(()=>n[5]||(n[5]=[a("Virtual Thread pinning")])),_:1,__:[5]})]),s("li",null,[e(l,{to:"#virtual-thread-blocking"},{default:o(()=>n[6]||(n[6]=[a("Virtual Thread blocking")])),_:1,__:[6]})])])]),s("li",null,[e(l,{to:"#마치며"},{default:o(()=>n[7]||(n[7]=[a("마치며")])),_:1,__:[7]})]),s("li",null,[e(l,{to:"#참고-자료"},{default:o(()=>n[8]||(n[8]=[a("참고 자료")])),_:1,__:[8]})])])]),n[89]||(n[89]=s("hr",null,null,-1)),e(k,{name:"Virtual Thread의 기본 개념 이해하기 | NAVER D2",desc:"Virtual Thread의 기본 개념 이해하기",url:"https://d2.naver.com/helloworld/1203723",logo:"/assets/image/d2.naver.com/favicon.ico",preview:"/assets/image/d2.naver.com/1203723/banner.png"}),e(v,{src:"https://tv.naver.com/embed/47860127?autoPlay=true"}),n[90]||(n[90]=p(`<p>JDK에 정식 도입된 Virtual Thread는 기존의 KLT(kernel-level thread)와 ULT(user-level thread)를 1:1 매핑하여 사용하는 JVM의 스레드 모델을 개선한, 여러 개의 가상 스레드를 하나의 네이티브 스레드에 할당하여 사용하는 모델입니다. 이 글에서는 Virtual Thread가 기존 스레드 모델과 어떤 점이 다른지 알아보겠습니다.</p><h2 id="jni" tabindex="-1"><a class="header-anchor" href="#jni"><span>JNI</span></a></h2><p>Java Native Interface(이하 JNI)는 C, C++처럼 인터프리터 없이 OS가 바로 읽을 수 있는 형태의 네이티브 코드를 JVM이 호출할 수 있게 하는 인터페이스다. 쉽게 말해, JVM에서 다른 언어를 사용할 수 있게 한다. 이 JNI 덕분에 Java가 머신 플랫폼에 상관없이 동작할 수 있다. 이 호출은 Java에서 메서드 앞에 <code>native</code> 키워드를 붙여 해당 메서드가 JNI를 사용함을 나타낸다.</p><p>직접 사용하면서 이해해 보자(macOS 기준).</p><p>hoyoungjni라는 라이브러를 동적으로 읽어오게 하고, hyNativeMethod의 메서드는 JNI를 사용하도록 선언한다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HoyoungJNI</span> <span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">HoyoungJNI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">hyNativeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var0<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">HoyoungJNI</span> var1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HoyoungJNI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    var1<span class="token punctuation">.</span><span class="token function">hyNativeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">&quot;hoyoungjni&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hyNativeMethod를 구현해 보자. 헤더 파일을 만든다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">javac HoyoungJNI.java</span>
<span class="line">javah <span class="token parameter variable">-classpath</span> <span class="token variable">\${경로}</span> org.example.HoyoungJNI</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;jni.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_Included_org_example_HoyoungJNI</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_Included_org_example_HoyoungJNI</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token punctuation">{</span>  </span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span>
<span class="line">JNIEXPORT <span class="token keyword">void</span> JNICALL <span class="token function">Java_org_example_HoyoungJNI_hyNativeMethod</span>  </span>
<span class="line">  <span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span><span class="token punctuation">,</span> jobject<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이를 구현한다.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;jni.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;org_example_HoyoungJNI.h&quot;</span></span></span>
<span class="line"></span>
<span class="line">JNIEXPORT <span class="token keyword">void</span> JNICALL <span class="token function">Java_org_example_HoyoungJNI_hyNativeMethod</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;JNI는 이렇게 동작해요&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>컴파일한다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">gcc -I<span class="token variable">$JAVA_HOME</span>/include -I<span class="token variable">$JAVA_HOME</span>/include/darwin -I<span class="token string">&quot;<span class="token variable">\${만든javah헤더파일경로}</span>&quot;</span> <span class="token parameter variable">-shared</span> <span class="token parameter variable">-m64</span>  <span class="token variable">\${경로}</span>/HoyoungJNI.c <span class="token parameter variable">-o</span> libhoyoungjni.dylib  </span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># The filename of a dynamic library normally contains the library’s name with the lib prefix and the .dylib extension</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)),s("p",null,[n[10]||(n[10]=a(".")),s("a",M,[e(t,{icon:"fa-brands fa-apple"}),n[9]||(n[9]=a("Dynamic Library Design Guidelines"))]),n[11]||(n[11]=a("의 다음 규약에 따라 앞의 ")),n[12]||(n[12]=s("code",null,"lib",-1)),n[13]||(n[13]=a("와 뒤의 ")),n[14]||(n[14]=s("code",null,".dylib",-1)),n[15]||(n[15]=a("를 제외한 ")),n[16]||(n[16]=s("code",null,"hoyoungjni",-1)),n[17]||(n[17]=a("가 라이브러리 이름으로 인식된다."))]),n[91]||(n[91]=p(`<p>공유 라이브러리 파일을 만들었으니, 환경변수를 주입하여 실행해 보자.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment"># JNI는 이렇게 동작해요</span></span>
<span class="line"><span class="token function">java</span> <span class="token parameter variable">-Djava.library.path</span><span class="token operator">=</span><span class="token variable">\${dylib파일경로}</span>  <span class="token parameter variable">-classpath</span> <span class="token variable">\${classpath}</span> org.example.HoyoungJNI</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>즉, 이렇게 JVM은 JNI를 사용하여 별도 인터프리터 없이 C로 작성된 코드를 실행한다.</p><h2 id="java-스레드" tabindex="-1"><a class="header-anchor" href="#java-스레드"><span>Java 스레드</span></a></h2><p>Java는 <code>java.util.concurrent.ExecutorService</code>를 두어 JVM 내부에서 스레드를 관리/실행한다. 여러 <code>ExecutorService</code> 중 <code>ThreadPoolExecutor</code>로 실제 스레드가 실행되는 부분만 간단히 살펴보자.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">threadPoolExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>submit</code>을 하면 무슨 일이 일어나는 걸까?</p><p>다음은 <code>ThreadPoolExecutor</code>의 <code>execute</code> 함수의 일부이다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * java.util.concurrent.ThreadPoolExecutor.java</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line">  <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">// 현재 RUNNUNG 상태인 스레드 수를 가져오고</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 풀 수보다 작으면 워커에 추가한다.</span></span>
<span class="line">      <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> firstTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> core<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ThreadPoolExecutor가 실행해도 된다고 판단하면</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>workerAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    container<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 실행한다.</span></span>
<span class="line">    workerStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>워커에 추가된 스레드는 결국 <code>Thread.start</code>를 실행한다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * java.lang.Thread.java</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 실제 실행은 결국 JNI를 통한다.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// zero status corresponds to state &quot;NEW&quot;.</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>holder<span class="token punctuation">.</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>즉, <code>ExecutorService</code>의 스케줄링 정책에 따라 JNI로 스레드를 실행하는 방식이다.</p><p>JDK 21을 기준으로 살펴보자.</p>`,13)),s("blockquote",null,[s("p",null,[n[22]||(n[22]=a("(")),s("a",P,[e(t,{icon:"iconfont icon-github"}),n[18]||(n[18]=s("code",null,"openjdk/jdk21",-1)),n[19]||(n[19]=a(" - ")),e(t,{icon:"fas fa-folder-open"}),n[20]||(n[20]=s("code",null,"/src/java.base/share/native/libjava/",-1)),e(t,{icon:"iconfont icon-c"}),n[21]||(n[21]=s("code",null,"Thread.c",-1))]),n[23]||(n[23]=a(")"))])]),n[92]||(n[92]=p(`<div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">static</span> JNINativeMethod methods<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token punctuation">{</span><span class="token string">&quot;start0&quot;</span><span class="token punctuation">,</span>           <span class="token string">&quot;()V&quot;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_StartThread<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span><span class="token string">&quot;setPriority0&quot;</span><span class="token punctuation">,</span>     <span class="token string">&quot;(I)V&quot;</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>JVM_SetThreadPriority<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>start0</code>는 <code>JVM_StartThread</code> 메서드이고 <code>JavaThread</code>를 생성한다.</p>`,2)),s("blockquote",null,[s("p",null,[n[28]||(n[28]=a("(")),s("a",L,[e(t,{icon:"iconfont icon-github"}),n[24]||(n[24]=s("code",null,"openjdk/jdk21",-1)),n[25]||(n[25]=a(" - ")),e(t,{icon:"fas fa-folder-open"}),n[26]||(n[26]=s("code",null,"/src/hotspot/share/prims/",-1)),e(t,{icon:"iconfont icon-cpp"}),n[27]||(n[27]=s("code",null,"jvm.cpp",-1))]),n[29]||(n[29]=a(")"))])]),n[93]||(n[93]=p(`<div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token function">JVM_ENTRY</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token function">JVM_StartThread</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject jthread<span class="token punctuation">)</span><span class="token punctuation">)</span>  </span>
<span class="line">  <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line">  native_thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">JavaThread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread_entry<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line">JVM_END</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>JavaThread</code>는 <code>Thread</code>의 하위 클래스이다.</p>`,2)),s("blockquote",null,[s("p",null,[n[34]||(n[34]=a("(")),s("a",R,[e(t,{icon:"iconfont icon-github"}),n[30]||(n[30]=s("code",null,"openjdk/jdk21",-1)),n[31]||(n[31]=a(" - ")),e(t,{icon:"fas fa-folder-open"}),n[32]||(n[32]=s("code",null,"src/hotspot/share/runtime/",-1)),e(t,{icon:"iconfont icon-cpp"}),n[33]||(n[33]=s("code",null,"javaThread.hpp",-1))]),n[35]||(n[35]=a(")"))])]),n[94]||(n[94]=p(`<div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">JavaThread</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Thread</span></span> <span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">VMStructs</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">JVMCIVMStructs</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">WhiteBox</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>결국, Java 단의 <code>ExecutorService</code>를 통해 스케줄링되는 여러 <code>java.lang.Thread</code> 객체는 JVM에 존재하는 start0 함수를 JNI를 통해 호출하고, 각 머신 OS에 맞게 설치된 JVM은 커널 스레드를 만들어 실행한다. 이러한 네이티브 메서드 호출은 JVM 내에서 스택과 분리되어 있는 네이티브 메서드 스택을 사용한다.</p><figure><img src="`+y+'" alt="출처: https://usemynotes.com/what-is-jvm-jit/" tabindex="0" loading="lazy"><figcaption>출처: https://usemynotes.com/what-is-jvm-jit/</figcaption></figure><p>즉, 스케줄링은 Java에서, 실제 실행은 JNI를 통해 커널에서 실행된다. Java의 스레드 모델을 도식화하면 다음과 같다.</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Heap에 존재하는 많은 ULT 중 하나가 JVM의 스케줄링에 따라 KLT에 매핑되어 실행하는 형태가 기존의 Java 스레드 모델이다.</p><h2 id="virtualthread-virtual-thread" tabindex="-1"><a class="header-anchor" href="#virtualthread-virtual-thread"><span>virtualthread&quot;&gt;Virtual Thread</span></a></h2><p>기존의 Java 스레드를 알아보았으니 이제 JDK 21에 새로 도입된 Virtual Thread를 알아보자.</p><h3 id="virtual-thread-concepts" tabindex="-1"><a class="header-anchor" href="#virtual-thread-concepts"><span>Virtual Thread concepts</span></a></h3><figure><img src="'+j+'" alt="출처: https://jenkov.com/tutorials/java-concurrency/java-virtual-threads.html" tabindex="0" loading="lazy"><figcaption>출처: https://jenkov.com/tutorials/java-concurrency/java-virtual-threads.html</figcaption></figure><p>Virtual Thread는 기존 KLT(1) : ULT(1)의 구조가 아닌 KLT(1) : ULT(1) : Virtual Thread(N)의 구조로 사용된다. KLT와 Virtual Thread 사이의 ULT는 플랫폼 스레드라고 한다.</p><p>위 그림과 같이 Heap에 수많은 Virtual Thread를 할당해놓고, 플랫폼 스레드에 대상 Virtual Thread를 마운트/언마운트하여 컨텍스트 스위칭을 수행한다. 따라서 컨텍스트 스위칭 비용이 작아질 수 밖에 없다.</p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>스레드의 크기와 컨텍스트 스위칭 비용이 많이 감소한 모델이기 때문에 Spring MVC/Tomcat 등의 모델이 Netty/WebFlux에 비해 가진 단점이 많이 희석되었다.</p><h3 id="virtual-thread-states" tabindex="-1"><a class="header-anchor" href="#virtual-thread-states"><span>Virtual Thread states</span></a></h3><p>Virtual Thread에는 9개의 상태가 있다.</p>',16)),s("blockquote",null,[s("p",null,[n[40]||(n[40]=a("(")),s("a",A,[e(t,{icon:"iconfont icon-github"}),n[36]||(n[36]=s("code",null,"openjdk/jdk21",-1)),n[37]||(n[37]=a(" - ")),e(t,{icon:"fas fa-folder-open"}),n[38]||(n[38]=s("code",null,"/src/java.base/share/classes/java/lang/",-1)),e(t,{icon:"fa-brands fa-java"}),n[39]||(n[39]=s("code",null,"VirtualThread.java",-1))]),n[41]||(n[41]=a(")"))])]),n[95]||(n[95]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Virtual thread state and transitions:</span>
<span class="line"> *</span>
<span class="line"> *      NEW -&gt; STARTED         // Thread.start</span>
<span class="line"> *  STARTED -&gt; TERMINATED      // failed to start</span>
<span class="line"> *  STARTED -&gt; RUNNING         // first run</span>
<span class="line"> *</span>
<span class="line"> *  RUNNING -&gt; PARKING         // Thread attempts to park</span>
<span class="line"> *  PARKING -&gt; PARKED          // cont.yield successful, thread is parked</span>
<span class="line"> *  PARKING -&gt; PINNED          // cont.yield failed, thread is pinned</span>
<span class="line"> *</span>
<span class="line"> *   PARKED -&gt; RUNNABLE        // unpark or interrupted</span>
<span class="line"> *   PINNED -&gt; RUNNABLE        // unpark or interrupted</span>
<span class="line"> *</span>
<span class="line"> * RUNNABLE -&gt; RUNNING         // continue execution</span>
<span class="line"> *</span>
<span class="line"> *  RUNNING -&gt; YIELDING        // Thread.yield</span>
<span class="line"> * YIELDING -&gt; RUNNABLE        // yield successful</span>
<span class="line"> * YIELDING -&gt; RUNNING         // yield failed</span>
<span class="line"> *</span>
<span class="line"> *  RUNNING -&gt; TERMINATED      // done</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NEW</span>      <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STARTED</span>  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">RUNNABLE</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment">// runnable-unmounted</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">RUNNING</span>  <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>     <span class="token comment">// runnable-mounted</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">PARKING</span>  <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">PARKED</span>   <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>     <span class="token comment">// unmounted</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">PINNED</span>   <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>     <span class="token comment">// mounted</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">YIELDING</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>     <span class="token comment">// Thread.yield</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TERMINATED</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>  <span class="token comment">// final state</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다음과 같이 Virtual Thread의 상태에 따라 플랫폼 스레드에 마운트/언마운트해 실행을 관리한다.</p><figure><img src="`+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>플랫폼 스레드에 언마운트/마운트할 때에는 park/unpark 메서드를 사용한다.</p>',4)),s("blockquote",null,[s("p",null,[n[46]||(n[46]=a("(")),s("a",D,[e(t,{icon:"iconfont icon-github"}),n[42]||(n[42]=s("code",null,"openjdk/jdk21",-1)),n[43]||(n[43]=a(" - ")),e(t,{icon:"fas fa-folder-open"}),n[44]||(n[44]=s("code",null,"/src/java.base/share/classes/java/lang/",-1)),e(t,{icon:"fa-brands fa-java"}),n[45]||(n[45]=s("code",null,"BaseVirtualThread.java",-1))]),n[47]||(n[47]=a(")"))])]),n[96]||(n[96]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">sealed</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseVirtualThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span>  </span>
<span class="line">        <span class="token keyword">permits</span> <span class="token class-name">VirtualThread</span><span class="token punctuation">,</span> <span class="token class-name">ThreadBuilders<span class="token punctuation">.</span>BoundVirtualThread</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * Initializes a virtual Thread.</span>
<span class="line">   *</span>
<span class="line">   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hljs-doctag<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>@param name thread name, can be null</span>
<span class="line">   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hljs-doctag<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>@param characteristics thread characteristics</span>
<span class="line">   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hljs-doctag<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>@param bound true when bound to an OS thread</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token class-name">BaseVirtualThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> characteristics<span class="token punctuation">,</span> <span class="token keyword">boolean</span> bound<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> characteristics<span class="token punctuation">,</span> bound<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * Parks the current virtual thread until the parking permit is available or</span>
<span class="line">   * the thread is interrupted.</span>
<span class="line">   *</span>
<span class="line">   * The behavior of this method when the current thread is not this thread</span>
<span class="line">   * is not defined.</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * Parks current virtual thread up to the given waiting time until the parking</span>
<span class="line">   * permit is available or the thread is interrupted.</span>
<span class="line">   *</span>
<span class="line">   * The behavior of this method when the current thread is not this thread</span>
<span class="line">   * is not defined.</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">long</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * Makes available the parking permit to the given this virtual thread.</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">unpark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위 상태 그림처럼 Virtual Thread의 <code>state</code>를 변경시켜가며 상태를 관리한다.</p>`,2)),s("blockquote",null,[s("p",null,[n[52]||(n[52]=a("(")),s("a",C,[e(t,{icon:"iconfont icon-github"}),n[48]||(n[48]=s("code",null,"openjdk/jdk21",-1)),n[49]||(n[49]=a(" - ")),e(t,{icon:"fas fa-folder-open"}),n[50]||(n[50]=s("code",null,"/src/java.base/share/classes/java/lang/",-1)),e(t,{icon:"fa-brands fa-java"}),n[51]||(n[51]=s("code",null,"VirtualThread.java",-1))]),n[53]||(n[53]=a(")"))])]),n[97]||(n[97]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line">  <span class="token comment">// park on the carrier thread when pinned</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>yielded<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">parkOnCarrierThread</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parkOnCarrierThread</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">assert</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">RUNNING</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line">  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token constant">PINNED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// RUNNING -&gt; PINNED 로 전환</span></span>
<span class="line">  <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>플랫폼 스레드에 마운트하여 실행하는 <code>unpark</code> 메서드를 보자.</p>`,2)),s("blockquote",null,[s("p",null,[n[58]||(n[58]=a("(")),s("a",U,[e(t,{icon:"iconfont icon-github"}),n[54]||(n[54]=s("code",null,"openjdk/jdk21",-1)),n[55]||(n[55]=a(" - ")),e(t,{icon:"fas fa-folder-open"}),n[56]||(n[56]=s("code",null,"/src/java.base/share/classes/java/lang/",-1)),e(t,{icon:"fa-brands fa-java"}),n[57]||(n[57]=s("code",null,"VirtualThread.java",-1))]),n[59]||(n[59]=a(")"))])]),n[98]||(n[98]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">void</span> <span class="token function">unpark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">PARKED</span> <span class="token operator">&amp;</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token constant">PARKED</span><span class="token punctuation">,</span> <span class="token constant">RUNNABLE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentThread <span class="token keyword">instanceof</span> <span class="token class-name">VirtualThread</span> vthread<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      vthread<span class="token punctuation">.</span><span class="token function">switchToCarrierThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">submitRunContinuation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">switchToVirtualThread</span><span class="token punctuation">(</span>vthread<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">submitRunContinuation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">submitRunContinuation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    scheduler<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>runContinuation<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RejectedExecutionException</span> ree<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">submitFailed</span><span class="token punctuation">(</span>ree<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">throw</span> ree<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>보다시피 <code>scheduler</code>로 실제 실행을 넘기며, <code>scheduler</code>는 <code>ForkJoinPool</code>이다.</p>`,2)),s("blockquote",null,[s("p",null,[n[64]||(n[64]=a("(")),s("a",F,[e(t,{icon:"iconfont icon-github"}),n[60]||(n[60]=s("code",null,"openjdk/jdk21",-1)),n[61]||(n[61]=a(" - ")),e(t,{icon:"fas fa-folder-open"}),n[62]||(n[62]=s("code",null,"/src/java.base/share/classes/java/lang/",-1)),e(t,{icon:"fa-brands fa-java"}),n[63]||(n[63]=s("code",null,"VirtualThread.java",-1))]),n[65]||(n[65]=a(")"))])]),n[99]||(n[99]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ForkJoinPool</span> <span class="token function">createDefaultScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">ForkJoinWorkerThreadFactory</span> factory <span class="token operator">=</span> pool <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ForkJoinWorkerThread</span><span class="token punctuation">&gt;</span></span> pa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">CarrierThread</span><span class="token punctuation">(</span>pool<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Virtual Thread는 플랫폼 스레드를 참조하고 있으며 이는 <code>carrierThread</code>라고 한다.</p>`,2)),s("blockquote",null,[s("p",null,[n[67]||(n[67]=a("(")),s("a",B,[e(t,{icon:"iconfont icon-github"}),n[66]||(n[66]=s("code",null,"openjdk/jdk21",-1))]),n[68]||(n[68]=a(")"))])]),n[100]||(n[100]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// carrier thread when mounted, accessed by VM</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Thread</span> carrierThread<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>즉, JVM이 직접 접근하는 스레드는 플랫폼 스레드이며, 플랫폼 스레드에 마운트하여 실행하는 과정은 <code>carrierThread</code>에 실행 대상 Virtual Thread를 할당하는 방식이다.</p>`,2)),s("blockquote",null,[s("p",null,[n[70]||(n[70]=a("(")),s("a",z,[e(t,{icon:"iconfont icon-github"}),n[69]||(n[69]=s("code",null,"openjdk/jdk21",-1))]),n[71]||(n[71]=a(")"))])]),n[101]||(n[101]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line">  carrier<span class="token punctuation">.</span><span class="token function">setCurrentThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// -&gt; 플랫폼 스레드에 실행할 Virtual Thread 할당</span></span>
<span class="line">  <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Thread</span> carrier <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>carrierThread<span class="token punctuation">;</span></span>
<span class="line">  carrier<span class="token punctuation">.</span><span class="token function">setCurrentThread</span><span class="token punctuation">(</span>carrier<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>interruptLock<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setCarrierThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// -&gt; Virtual Thread에서 Virtual Thread 제거</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  carrier<span class="token punctuation">.</span><span class="token function">clearInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Virtual Thread는 플랫폼 스레드를 참조하고 있으며 실제 실행 시에는 플랫폼 스레드에 마운트되어 <code>ForkJoinPool</code>의 큐에 들어가 스케줄링된다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ForkJoinTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">poolSubmit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> signalIfEmpty<span class="token punctuation">,</span>  </span>
<span class="line">                                       <span class="token class-name">ForkJoinTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">WorkQueue</span> q<span class="token punctuation">;</span> <span class="token class-name">Thread</span> t<span class="token punctuation">;</span> <span class="token class-name">ForkJoinWorkerThread</span> wt<span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">storeStoreFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ensure safely publishable</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ForkJoinWorkerThread</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span></span>
<span class="line">      <span class="token punctuation">(</span>wt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ForkJoinWorkerThread</span><span class="token punctuation">)</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span>pool <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">      q <span class="token operator">=</span> wt<span class="token punctuation">.</span>workQueue<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      task<span class="token punctuation">.</span><span class="token function">markPoolSubmission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      q <span class="token operator">=</span> <span class="token function">submissionQueue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> signalIfEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> task<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="virtual-thread-pinning" tabindex="-1"><a class="header-anchor" href="#virtual-thread-pinning"><span>Virtual Thread pinning</span></a></h3><p>Virtual Thread의 장점은, JVM이 자체적으로 Virtual Thread를 스케줄링하고 컨텍스트 스위칭 비용이 줄어들어 효율적으로 운영할 수 있다는 것이다. 하지만 Virtual Thread가 플랫폼 스레드에 고정되어 장점을 활용할 수 없는 경우가 있다. Virtual Thread 내에서 synchronized block을 사용하거나, JNI를 통해 네이티브 메서드를 사용하는 경우다.</p><figure><img src="`+x+`" alt="출처: https://docs.oracle.com/en/java/javase/21/core/virtual-threads.html#GUID-704A716D-0662-4BC7-8C7F-66EE74B1EDAD" tabindex="0" loading="lazy"><figcaption>출처: https://docs.oracle.com/en/java/javase/21/core/virtual-threads.html#GUID-704A716D-0662-4BC7-8C7F-66EE74B1EDAD</figcaption></figure><p>Virtual Thread는 <a href="https://spring.io/blog/2023/09/09/all-together-now-spring-boot-3-2-graalvm-native-images-java-21-and-virtual" target="_blank" rel="noopener noreferrer">Spring Boot 3.2.x에서 공식적으로 지원</a>하지만 <a href="https://spring.io/blog/2022/10/11/embracing-virtual-threads" target="_blank" rel="noopener noreferrer">2.x에서도 별도로 설정해서 사용</a>할 수 있다</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">TomcatProtocolHandlerCustomizer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">protocolHandlerVirtualThreadExecutorCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> protocolHandler <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      protocolHandler<span class="token punctuation">.</span><span class="token function">setExecutor</span><span class="token punctuation">(</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newVirtualThreadPerTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다만, 공식 블로그에 따르면 Spring 로직 내에 많은 <code>synchronized</code>가 있어 효율이 좋지 않다.</p><figure><img src="`+N+`" alt="출처: https://spring.io/blog/2022/10/11/embracing-virtual-threads#mitigating-limitations" tabindex="0" loading="lazy"><figcaption>출처: https://spring.io/blog/2022/10/11/embracing-virtual-threads#mitigating-limitations</figcaption></figure><p>실제로 Spring Boot 2.7.17에서 Virtual Thread를 사용하도록 설정하고 <code>-Djdk.tracePinnedThreads=short</code> 옵션과 함께 구동한 후 <code>synchronized</code>를 사용하는 컨트롤러를 호출하면 다음과 같은 로그를 많이 볼 수 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">&quot;테스트&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;테스트&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000l</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;HELLO&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line">Thread<span class="token punctuation">[</span><span class="token comment">#185,ForkJoinPool-1-worker-1,5,CarrierThreads]  </span></span>
<span class="line">    com.example.test.TestController.test(TestController.java<span class="token punctuation">:</span>22) &lt;== monitors<span class="token punctuation">:</span><span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>또한 Spring 구동 시 다음과 같은 로그도 볼 수 있다.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line">Thread<span class="token punctuation">[</span><span class="token comment">#184,ForkJoinPool-1-worker-2,5,CarrierThreads]  </span></span>
<span class="line">    com.mysql.cj.protocol.ReadAheadInputStream.read(ReadAheadInputStream.java<span class="token punctuation">:</span>180) &lt;== monitors<span class="token punctuation">:</span><span class="token number">1</span></span>
<span class="line">    com.mysql.cj.jdbc.ConnectionImpl.commit(ConnectionImpl.java<span class="token punctuation">:</span>791) &lt;== monitors<span class="token punctuation">:</span><span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MySQL 패키지에 사용된 <code>synchronized</code>가 pinning을 유발하고 있는 것이다.</p><p>따라서 Spring은 <code>synchronized</code>를 <code>ReentrantLock</code>으로 마이그레이션하는 방향으로 가고 있다.</p><figure><img src="`+V+'" alt="출처: https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.2.0-M2-Release-Notes#support-for-virtual-threads" tabindex="0" loading="lazy"><figcaption>출처: https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.2.0-M2-Release-Notes#support-for-virtual-threads</figcaption></figure><p>그 밖에도 많은 진영에서 Virtual Thread를 지원하기 위해 <code>synchronized</code>에서 <code>ReentrantLock</code>으로 마이그레이션이 진행되고 있다.</p>',19)),s("ul",null,[s("li",null,[s("a",O,[n[72]||(n[72]=s("code",null,"MySQL",-1)),n[73]||(n[73]=a(" (")),e(t,{icon:"iconfont icon-github"}),n[74]||(n[74]=s("code",null,"mysql/mysql-connector-j",-1)),n[75]||(n[75]=a(")"))])]),s("li",null,[s("a",G,[n[76]||(n[76]=s("code",null,"UUId",-1)),n[77]||(n[77]=a(" (")),e(t,{icon:"iconfont icon-github"}),n[78]||(n[78]=s("code",null,"f4b6a3/uuid-creator",-1)),n[79]||(n[79]=a(")"))])])]),n[102]||(n[102]=s("p",null,[s("code",null,"synchronized"),a("가 많이 남아있는 Spring Boot 2.x에서는 Virtual Thread를 잘 사용하기 위해서는 여러 의존 모듈의 마이그레이션이 선행되어야 할 것 같다. 앞으로 미래 Java 버전에서는 "),s("code",null,"synchronized"),a("는 점점 사라질 것으로 예상한다.")],-1)),n[103]||(n[103]=s("h3",{id:"virtual-thread-blocking",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#virtual-thread-blocking"},[s("span",null,"Virtual Thread blocking")])],-1)),n[104]||(n[104]=s("p",null,"기존 Java 스레드는 sleep 실행 시 blocking 상태가 되며 다른 스레드와 컨텍스트 스위칭을 한다. Virtual Thread의 sleep을 살펴보자.",-1)),s("blockquote",null,[s("p",null,[n[81]||(n[81]=a("(")),s("a",K,[e(t,{icon:"iconfont icon-github"}),n[80]||(n[80]=s("code",null,"openjdk/jdk21",-1))]),n[82]||(n[82]=a(")"))])]),n[105]||(n[105]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;timeout value is negative&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">long</span> nanos <span class="token operator">=</span> <span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>millis<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">ThreadSleepEvent</span> event <span class="token operator">=</span> <span class="token function">beforeSleep</span><span class="token punctuation">(</span>nanos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">VirtualThread</span> vthread<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        vthread<span class="token punctuation">.</span><span class="token function">sleepNanos</span><span class="token punctuation">(</span>nanos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">sleep0</span><span class="token punctuation">(</span>nanos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">afterSleep</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>기존 스레드의 경우 sleep0 JNI 호출로 KLT와 함께 block 상태로 변경되고 Virtual Thread의 경우 다른 동작을 하는 것을 볼 수 있다.</p>`,2)),s("blockquote",null,[s("p",null,[n[84]||(n[84]=a("(")),s("a",H,[e(t,{icon:"iconfont icon-github"}),n[83]||(n[83]=s("code",null,"openjdk/jdk21",-1))]),n[85]||(n[85]=a(")"))])]),n[106]||(n[106]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">void</span> <span class="token function">sleepNanos</span><span class="token punctuation">(</span><span class="token keyword">long</span> nanos<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line">  <span class="token function">parkNanos</span><span class="token punctuation">(</span>remainingNanos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("blockquote",null,[s("p",null,[n[87]||(n[87]=a("(")),s("a",W,[e(t,{icon:"iconfont icon-github"}),n[86]||(n[86]=s("code",null,"openjdk/jdk21",-1))]),n[88]||(n[88]=a(")"))])]),n[107]||(n[107]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">long</span> nanos<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line">  <span class="token keyword">boolean</span> yielded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> unparker <span class="token operator">=</span> <span class="token function">scheduleUnpark</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">unpark</span><span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token constant">PARKING</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    yielded <span class="token operator">=</span> <span class="token function">yieldContinuation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// may throw</span></span>
<span class="line">    <span class="token comment">/* ... 생략 ... */</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token comment">/* ... 생략 ... */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">yieldContinuation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// unmount</span></span>
<span class="line">  <span class="token function">notifyJvmtiUnmount</span><span class="token punctuation">(</span><span class="token comment">/*hide*/</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">Continuation</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token constant">VTHREAD_SCOPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// re-mount</span></span>
<span class="line">    <span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">notifyJvmtiMount</span><span class="token punctuation">(</span><span class="token comment">/*hide*/</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>스레드를 언마운트/park하고 다시 마운트/unpark하는 것은 Future로 돌리는 것을 알 수 있다. 즉, 명시적인 KLT의 sleep/block을 수행하지 않는다.</p><p>Spring MVC Tomcat 하에서 테스트를 해보자. Virtual Thread를 사용하지 않는 Tomcat의 threads를 1로 설정하여 커널 스레드를 하나만 사용하게 하고, Virtual Thread에서도 커널 스레드를 하나만 사용하게 하여 처리량을 비교해 보겠다. 또한 호출은 100개의 요청을 동시에 보내 보겠다.</p><p>다음 컨트롤러를 호출한다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">&quot;테스트&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;테스트&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000l</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tomcat은 다음 설정으로 스레드를 제한한다.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span>  </span>
<span class="line">  <span class="token key atrule">tomcat</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">threads</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">max</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Virtual Thread는 가이드에 따라 다음 환경변수를 통해 스레드를 제한한다.</p><figure><img src="`+J+`" alt="출처: https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Thread.html" tabindex="0" loading="lazy"><figcaption>출처: https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Thread.html</figcaption></figure><p>Virtual Thread를 사용하지 않은 환경에서는 100개의 호출이 동시에 발생했으나, Tomcat 스레드가 1이므로 호출 처리에 최대 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1000</mn><mi>m</mi><mi>s</mi><mo>×</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">1000ms\\times{100}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1000</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord"><span class="mord">100</span></span></span></span></span> 의 처리 시간이 걸리고 1TPS의 처리량을 넘지 못한다. 즉, 동시성이 거의 없는 것을 볼 수 있다.</p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;"># reqs</th><th style="text-align:left;"># fails</th><th style="text-align:left;">Avg</th><th style="text-align:left;">Min</th><th style="text-align:left;">Max</th><th style="text-align:left;">Median</th><th style="text-align:left;">req/s</th><th style="text-align:left;">failures/s</th></tr></thead><tbody><tr><td style="text-align:left;">GET /test</td><td style="text-align:left;">23</td><td style="text-align:left;">0(0.00%)</td><td style="text-align:left;">11986</td><td style="text-align:left;">1021</td><td style="text-align:left;">22943</td><td style="text-align:left;">12000</td><td style="text-align:left;">0.99</td><td style="text-align:left;">0.00</td></tr></tbody></table><p>Virtual Thread를 사용한 환경에서는 높은 TPS 처리량을 보인다. 100개의 호출이 동시에 발생했으나, non-blocking 방식으로 처리되어 최대 처리 시간 또한 1000l 정도다. 또한 로그에서 커널 스레드는 하나만 사용하는 것을 알 수 있다.</p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;"># reqs</th><th style="text-align:left;"># fails</th><th style="text-align:left;">Avg</th><th style="text-align:left;">Min</th><th style="text-align:left;">Max</th><th style="text-align:left;">Median</th><th style="text-align:left;">req/s</th><th style="text-align:left;">failures/s</th></tr></thead><tbody><tr><td style="text-align:left;">GET /test</td><td style="text-align:left;">928</td><td style="text-align:left;">0(0.00%)</td><td style="text-align:left;">1005</td><td style="text-align:left;">1001</td><td style="text-align:left;">1031</td><td style="text-align:left;">1001</td><td style="text-align:left;">89.19</td><td style="text-align:left;">0.00</td></tr></tbody></table><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line">2024<span class="token punctuation">-</span>02<span class="token punctuation">-</span>05 13<span class="token punctuation">:</span>17<span class="token punctuation">:</span>26.329  INFO 70581 <span class="token punctuation">---</span> <span class="token punctuation">[</span>               <span class="token punctuation">]</span> VirtualThread<span class="token punctuation">[</span><span class="token comment">#312]/runnable@ForkJoinPool-1-worker-1  </span></span>
<span class="line">2024<span class="token punctuation">-</span>02<span class="token punctuation">-</span>05 13<span class="token punctuation">:</span>17<span class="token punctuation">:</span>26.336  INFO 70581 <span class="token punctuation">---</span> <span class="token punctuation">[</span>               <span class="token punctuation">]</span> VirtualThread<span class="token punctuation">[</span><span class="token comment">#313]/runnable@ForkJoinPool-1-worker-1  </span></span>
<span class="line">2024<span class="token punctuation">-</span>02<span class="token punctuation">-</span>05 13<span class="token punctuation">:</span>17<span class="token punctuation">:</span>26.339  INFO 70581 <span class="token punctuation">---</span> <span class="token punctuation">[</span>               <span class="token punctuation">]</span> VirtualThread<span class="token punctuation">[</span><span class="token comment">#314]/runnable@ForkJoinPool-1-worker-1  </span></span>
<span class="line">2024<span class="token punctuation">-</span>02<span class="token punctuation">-</span>05 13<span class="token punctuation">:</span>17<span class="token punctuation">:</span>26.349  INFO 70581 <span class="token punctuation">---</span> <span class="token punctuation">[</span>               <span class="token punctuation">]</span> VirtualThread<span class="token punctuation">[</span><span class="token comment">#315]/runnable@ForkJoinPool-1-worker-1  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>따라서 Tomcat, Spring MVC 하에서도 Netty/WebFlux와 처리 방식과 효율이 같으며, 네트워크 I/O처럼 CPU를 사용하지 않는 스레드 blocking 환경에서 사용하면 좋은 효율을 보여줄 수 있다고 판단할 수 있다.</p><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>CPU intensive 환경이 아닌, 네트워크 I/O가 다수 발생하는 웹서버 환경에서는 하나의 호출에 하나의 스레드를 점유하는 기존 Spring MVC/Tomcat 모델은 큰 부담으로 작용했고, non-blocking single thread 모델인 Netty/WebFlux 모델이 그 단점을 해결하며 부상했다. 하지만 학습이 어렵고, 숙련도가 부족해 block을 한 번이라도 잘못 사용하는 순간 전체 서비스가 망가지기 때문에 쉽게 도입하긴 쉽지 않다고 생각한다. 레거시 서비스의 경우 webflux로 마이그레이션하기도 어려울 것이다.</p><p>Virtual Thread의 등장은 non-blocking single thread 모델을 사용하지 않아도 된다고 말하고 있다. 실제로 CPU intensive 환경이 아니라면 non-blocking single thread 모델만큼이나 효율을 잘 내고 있다.</p><p>추후 많은 Java 진영에서 synchronized를 제거하는 등, Virtual Thread를 사용하기 위한 준비가 된다면 Java 진영의 non-blocking single thread 모델의 자리에 Virtual Thread가 들어갈지도 모르겠다.</p><hr><h2 id="참고-자료" tabindex="-1"><a class="header-anchor" href="#참고-자료"><span>참고 자료</span></a></h2>`,22)),e(i,c(r({title:"openjdk/jdk21",desc:"https://openjdk.org/projects/jdk/21 released 2023-09-19",link:"https://github.com/openjdk/jdk21",logo:"https://avatars.githubusercontent.com/u/41768318?s=200&v=4",background:"rgba(10,10,10,0.2)"})),null,16),e(i,c(r({title:"JDK 21 Documentation - Home",desc:"The documentation for JDK 21 includes developer guides, API documentation, and release notes.",link:"https://docs.oracle.com/en/java/javase/21",logo:"https://docs.oracle.com/sp_common/site-template/ohc-common/img/favicon.ico",background:"rgba(0,104,140,0.2)"})),null,16),e(i,c(r({title:"Spring | Blog",desc:"Level up your Java code and explore what Spring can do for you.",link:"https://spring.io/blog",logo:"https://spring.io/favicon.svg?v=96334d577af708644f6f0495dd1c7bc8",background:"rgba(109,179,63,0.2)"})),null,16),e(i,c(r({title:"What is JVM (Java Virtual Machine)? - UseMyNotes",desc:"In this tutorial, we will unfold two of the most important questions of the Java programming environment i.e What is JVM (Java Virtual Machine)? and What is",link:"https://usemynotes.com/what-is-jvm-jit/",logo:"https://usemynotes.com/wp-content/uploads/2020/10/cropped-fevicon-2-192x192.png",background:"rgba(45,201,151,0.2)"})),null,16),e(i,c(r({title:"Java Virtual Threads",desc:"From Java 19 virtual threads were added to Java. This tutorial explains how to create Java virtual threads, and how they differ from system threads in Java",link:"https://jenkov.com/tutorials/java-concurrency/java-virtual-threads.html",logo:"https://jenkov.com/favicon.ico",background:"rgba(10,10,10,0.2)"})),null,16)])}const X=m(I,[["render",$]]),Z=JSON.parse('{"path":"/d2.naver.com/1203723.html","title":"Virtual Thread의 기본 개념 이해하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Virtual Thread의 기본 개념 이해하기","description":"Article(s) > Virtual Thread의 기본 개념 이해하기","icon":"iconfont icon-spring","category":["Java","Spring","C++","Java Native Interface","Article(s)"],"tag":["blog","d2.naver.com","java","spring","cpp","c++","jni","virtual-tread"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Virtual Thread의 기본 개념 이해하기\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/1203723/1.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/1203723/2.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/1203723/3.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/1203723/4.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/1203723/5.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/1203723/6.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/1203723/7.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/1203723/8.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/1203723/9.png\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/d2.naver.com/1203723.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Virtual Thread의 기본 개념 이해하기"}],["meta",{"property":"og:description","content":"Article(s) > Virtual Thread의 기본 개념 이해하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/d2.naver.com/1203723/1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"virtual-tread"}],["meta",{"property":"article:tag","content":"jni"}],["meta",{"property":"article:tag","content":"c++"}],["meta",{"property":"article:tag","content":"cpp"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"d2.naver.com"}],["meta",{"property":"article:tag","content":"blog"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Virtual Thread의 기본 개념 이해하기"},{"property":"og:description","content":"Virtual Thread의 기본 개념 이해하기"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/d2.naver.com/1203723.html"}]],"prev":"/programming/java-spring/articles/README.md"},"git":{},"readingTime":{"minutes":7.02,"words":2107},"filePathRelative":"d2.naver.com/1203723.md"}');export{X as comp,Z as data};
