import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as a,b as v,a as h,t as g,n as c,g as l,w as t,e,r as i,o as b}from"./app-BVguHYKu.js";const f={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},D={class:"table-of-contents"};function I(r,n){const p=i("VPCard"),o=i("router-link"),u=i("SiteInfo"),d=i("RouteLink");return b(),m("div",null,[s("h1",y,[s("a",w,[s("span",null,g(r.$frontmatter.title)+" 관련",1)])]),a(p,c(l({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",D,[s("ul",null,[s("li",null,[a(o,{to:"#starting-point-god-like-service-class"},{default:t(()=>n[0]||(n[0]=[e("Starting Point: God-like Service Class")])),_:1,__:[0]}),s("ul",null,[s("li",null,[a(o,{to:"#what-s-wrong-here"},{default:t(()=>n[1]||(n[1]=[e("What's Wrong Here?")])),_:1,__:[1]})])])]),s("li",null,[a(o,{to:"#guiding-principles-before-we-touch-code"},{default:t(()=>n[2]||(n[2]=[e("Guiding Principles Before We Touch Code")])),_:1,__:[2]})]),s("li",null,[a(o,{to:"#step-by-step-refactor"},{default:t(()=>n[3]||(n[3]=[e("Step-by-Step Refactor")])),_:1,__:[3]}),s("ul",null,[s("li",null,[a(o,{to:"#embed-creation-validation-logic"},{default:t(()=>n[4]||(n[4]=[e("Embed Creation & Validation Logic")])),_:1,__:[4]})]),s("li",null,[a(o,{to:"#guard-the-aggregate-s-internal-state"},{default:t(()=>n[5]||(n[5]=[e("Guard the Aggregate's Internal State")])),_:1,__:[5]})]),s("li",null,[a(o,{to:"#shrink-the-application-layer-to-pure-orchestration"},{default:t(()=>n[6]||(n[6]=[e("Shrink the Application Layer to Pure Orchestration")])),_:1,__:[6]})])])]),s("li",null,[a(o,{to:"#what-we-gained"},{default:t(()=>n[7]||(n[7]=[e("What We Gained")])),_:1,__:[7]}),s("ul",null,[s("li",null,[a(o,{to:"#before-the-refactor"},{default:t(()=>n[8]||(n[8]=[e("Before the refactor")])),_:1,__:[8]})]),s("li",null,[a(o,{to:"#after-the-refactor"},{default:t(()=>n[9]||(n[9]=[e("After the refactor")])),_:1,__:[9]})])])]),s("li",null,[a(o,{to:"#wrapping-up"},{default:t(()=>n[10]||(n[10]=[e("Wrapping Up")])),_:1,__:[10]})])])]),n[14]||(n[14]=s("hr",null,null,-1)),a(u,{name:"From Anemic Models to Behavior-Driven Models: A Practical DDD Refactor in C#",desc:"A practical guide to transforming anemic domain models into behavior-rich aggregates in C# through incremental refactoring, enhancing code maintainability and business rule clarity.",url:"https://milanjovanovic.tech/blog/from-anemic-models-to-behavior-driven-models-a-practical-ddd-refactor-in-csharp",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_141.png"}),n[15]||(n[15]=v(`<p>If you&#39;ve ever worked with a legacy C# codebase, you know the pain of an anemic domain model. You have probably opened an <code>OrderService</code> (<em>all similarities to production code are merely a coincidence</em>) and thought <em>&quot;this file does everything.&quot;</em> Pricing logic, discount rules, stock checks, database writes — <strong>all jam-packed into one class</strong>. It works — until it doesn&#39;t. New features turn into <strong>regression roulette</strong>, and test coverage plummets because the domain is buried under infrastructure.</p><p>This is the classic symptom of an anemic domain model, where entities are nothing but data holders, and all logic lives elsewhere. It makes the system harder to reason about, and every change becomes a guessing game. But what if we could push behavior back into the domain, one rule at a time?</p><p>In this article, we&#39;ll:</p><ol><li><strong>Inspect</strong> a typical anemic implementation.</li><li><strong>Identify</strong> hidden business rules that make it brittle.</li><li><strong>Refactor</strong> toward a behavior-rich aggregate one refactor at a time.</li><li><strong>Highlight</strong> the concrete payoffs so you can justify the change to teammates.</li></ol><p>Everything fits in a 6-minute read, but the pattern scales to any legacy system.</p><hr><h2 id="starting-point-god-like-service-class" tabindex="-1"><a class="header-anchor" href="#starting-point-god-like-service-class"><span>Starting Point: God-like Service Class</span></a></h2><p>Below is an (unfortunately common) <code>OrderService</code>. Besides calculating totals it also:</p><ul><li>applies a <strong>5 % VIP discount</strong>,</li><li>throws if any product is <strong>out of stock</strong>, and</li><li>rejects orders that would <strong>exceed the customer&#39;s credit limit</strong>.</li></ul><div class="code-block-with-title"><div class="code-block-title-bar" data-title="OrderService.cs"><span>OrderService.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PlaceOrder</span><span class="token punctuation">(</span><span class="token class-name">Guid</span> customerId<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>OrderItemDto<span class="token punctuation">&gt;</span></span> items<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> customer <span class="token operator">=</span> _db<span class="token punctuation">.</span>Customers<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>customerId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>customer <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Customer not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Order</span> <span class="token punctuation">{</span> CustomerId <span class="token operator">=</span> customerId <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> dto <span class="token keyword">in</span> items<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> inventory <span class="token operator">=</span> _inventoryService<span class="token punctuation">.</span><span class="token function">GetStock</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span>ProductId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>inventory <span class="token operator">&lt;</span> dto<span class="token punctuation">.</span>Quantity<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">&quot;Item out of stock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> price <span class="token operator">=</span> _pricingService<span class="token punctuation">.</span><span class="token function">GetPrice</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span>ProductId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> lineTotal <span class="token operator">=</span> price <span class="token operator">*</span> dto<span class="token punctuation">.</span>Quantity<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>customer<span class="token punctuation">.</span>IsVip<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            lineTotal <span class="token operator">*=</span> <span class="token number">0.95m</span><span class="token punctuation">;</span> <span class="token comment">// 5% discount for VIPs</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderItem</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            ProductId <span class="token operator">=</span> dto<span class="token punctuation">.</span>ProductId<span class="token punctuation">,</span></span>
<span class="line">            Quantity <span class="token operator">=</span> dto<span class="token punctuation">.</span>Quantity<span class="token punctuation">,</span></span>
<span class="line">            UnitPrice <span class="token operator">=</span> price<span class="token punctuation">,</span></span>
<span class="line">            LineTotal <span class="token operator">=</span> lineTotal</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    order<span class="token punctuation">.</span>Total <span class="token operator">=</span> order<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>i <span class="token operator">=&gt;</span> i<span class="token punctuation">.</span>LineTotal<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>customer<span class="token punctuation">.</span>CreditUsed <span class="token operator">+</span> order<span class="token punctuation">.</span>Total <span class="token operator">&gt;</span> customer<span class="token punctuation">.</span>CreditLimit<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">&quot;Credit limit exceeded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    _db<span class="token punctuation">.</span>Orders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    _db<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="what-s-wrong-here" tabindex="-1"><a class="header-anchor" href="#what-s-wrong-here"><span>What&#39;s Wrong Here?</span></a></h3><ul><li><strong>Scattered rules:</strong> Discount application, stock validation, and credit-limit checks are buried inside the service.</li><li><strong>Tight coupling:</strong> <code>OrderService</code> must know about pricing, inventory, and EF Core just to place an order.</li><li><strong>Painful testing:</strong> Each unit test needs fakes for DB access, pricing, inventory, and VIP vs. non-VIP flows.</li></ul><div class="hint-container important"><p class="hint-container-title">Goal</p><p>Embed these rules <strong>inside the domain</strong> so the application layer only deals with orchestration.</p></div><hr><h2 id="guiding-principles-before-we-touch-code" tabindex="-1"><a class="header-anchor" href="#guiding-principles-before-we-touch-code"><span>Guiding Principles Before We Touch Code</span></a></h2><ol><li><strong>Protect invariants close to the data.</strong> Stock, discounts, and credit checks belong where the data lives — inside the <code>Order</code> aggregate.</li><li><strong>Expose intent, hide mechanics.</strong> The application layer should read like a story: <em>&quot;place order&quot;</em>, not <em>&quot;calculate totals, check credit, write to DB&quot;</em>.</li><li><strong>Refactor in slices.</strong> Each move is safe and compilable; no big-bang rewrites.</li><li><strong>Balance purity with pragmatism.</strong> Move rules only when the payoff (clarity, safety, testability) beats the extra lines of code.</li></ol><hr><h2 id="step-by-step-refactor" tabindex="-1"><a class="header-anchor" href="#step-by-step-refactor"><span>Step-by-Step Refactor</span></a></h2><p>The goal here isn&#39;t to chase purity or academic DDD. It&#39;s to incrementally improve cohesion and make room for the domain to express itself.</p><p>At every step, we ask: Is this behavior something the domain should own? If yes, we pull it inward.</p><h3 id="embed-creation-validation-logic" tabindex="-1"><a class="header-anchor" href="#embed-creation-validation-logic"><span>Embed Creation &amp; Validation Logic</span></a></h3><p>The first move is to make the aggregate responsible for building itself. A static <code>Create</code> method gives us a single entry point where all invariants can fail fast.</p><p>While pushing stock validation into <code>Order</code> improves testability, it does couple the order flow with inventory availability. In some domains, you&#39;d instead model this as a domain event and validate asynchronously.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Order.cs"><span>Order.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Factory Method</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Order</span> <span class="token function">Create</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">Customer</span> customer<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token punctuation">(</span>Guid productId<span class="token punctuation">,</span> <span class="token keyword">int</span> quantity<span class="token punctuation">)</span><span class="token punctuation">&gt;</span></span> lines<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">IPricingService</span> pricingService<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">IInventoryService</span> inventoryService<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Order</span><span class="token punctuation">(</span>customer<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">(</span>productId<span class="token punctuation">,</span> quantity<span class="token punctuation">)</span> <span class="token keyword">in</span> lines<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>inventoryService<span class="token punctuation">.</span><span class="token function">GetStock</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span> <span class="token operator">&lt;</span> quantity<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">&quot;Item out of stock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> unitPrice <span class="token operator">=</span> pricingService<span class="token punctuation">.</span><span class="token function">GetPrice</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        order<span class="token punctuation">.</span><span class="token function">AddItem</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> unitPrice<span class="token punctuation">,</span> customer<span class="token punctuation">.</span>IsVip<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    order<span class="token punctuation">.</span><span class="token function">EnsureCreditWithinLimit</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> order<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p><strong>Why?</strong> Creation now <strong>fails fast</strong> if any invariant is broken. The service no longer micromanages stock or discounts.</p><p>Notice how we&#39;re now following the &quot;Tell, Don&#39;t Ask&quot; principle. Rather than the service checking conditions and then manipulating the Order, we&#39;re telling the Order to create itself with the necessary validations built in. This is a fundamental shift toward <strong>encapsulation</strong>.</p><div class="hint-container note"><p class="hint-container-title">💡 On Double-Dispatch in Domain Methods</p><p>Passing services into domain methods like <code>Order.Create</code> might raise a few eyebrows. But in this case, it&#39;s an explicit form of double-dispatch that enables us to keep complex logic inside the domain model without bloating the application service. It gives the entity autonomy while still respecting dependency injection principles — the services are passed explicitly, not resolved implicitly. That said, this approach is best used sparingly and only when the operation truly belongs inside the domain object.</p></div><h3 id="guard-the-aggregate-s-internal-state" tabindex="-1"><a class="header-anchor" href="#guard-the-aggregate-s-internal-state"><span>Guard the Aggregate&#39;s Internal State</span></a></h3><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Order.cs (excerpt)</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>OrderItem<span class="token punctuation">&gt;</span></span> _items <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name">IReadOnlyCollection<span class="token punctuation">&lt;</span>OrderItem<span class="token punctuation">&gt;</span></span> Items <span class="token operator">=&gt;</span> _items<span class="token punctuation">.</span><span class="token function">AsReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// C# 12 -&gt; [.._items]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddItem</span><span class="token punctuation">(</span><span class="token class-name">Guid</span> productId<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> quantity<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">decimal</span></span> unitPrice<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isVip<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>quantity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Quantity must be positive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> finalPrice <span class="token operator">=</span> isVip <span class="token punctuation">?</span> unitPrice <span class="token operator">*</span> <span class="token number">0.95m</span> <span class="token punctuation">:</span> unitPrice<span class="token punctuation">;</span></span>
<span class="line">    _items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderItem</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> quantity<span class="token punctuation">,</span> finalPrice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">RecalculateTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EnsureCreditWithinLimit</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>customer<span class="token punctuation">.</span>CreditUsed <span class="token operator">+</span> Total <span class="token operator">&gt;</span> customer<span class="token punctuation">.</span>CreditLimit<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">&quot;Credit limit exceeded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Why bother?</p><ul><li><strong>Encapsulation</strong>: Consumers can&#39;t mutate <code>_items</code> directly, ensuring invariants hold.</li><li><strong>Self-protection</strong>: The domain model protects its own consistency rather than relying on service-level checks.</li><li><strong>True OOP</strong>: Objects now combine data and behavior, as object-oriented programming intended.</li><li><strong>Simpler services</strong>: Application services can focus on coordination rather than business rules.</li></ul></div><h3 id="shrink-the-application-layer-to-pure-orchestration" tabindex="-1"><a class="header-anchor" href="#shrink-the-application-layer-to-pure-orchestration"><span>Shrink the Application Layer to Pure Orchestration</span></a></h3><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PlaceOrder</span><span class="token punctuation">(</span><span class="token class-name">Guid</span> customerId<span class="token punctuation">,</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>OrderLineDto<span class="token punctuation">&gt;</span></span> lines<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> customer <span class="token operator">=</span> _db<span class="token punctuation">.</span>Customers<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>customerId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>customer <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Customer not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> input <span class="token operator">=</span> lines<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>l <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>l<span class="token punctuation">.</span>ProductId<span class="token punctuation">,</span> l<span class="token punctuation">.</span>Quantity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> Order<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> input<span class="token punctuation">,</span> _pricingService<span class="token punctuation">,</span> _inventoryService<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    _db<span class="token punctuation">.</span>Orders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    _db<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>PlaceOrder</code> method drops from <strong>44 lines</strong> to <strong>14</strong>, with <strong>zero business logic</strong>.</p><hr><h2 id="what-we-gained" tabindex="-1"><a class="header-anchor" href="#what-we-gained"><span>What We Gained</span></a></h2><h3 id="before-the-refactor" tabindex="-1"><a class="header-anchor" href="#before-the-refactor"><span>Before the refactor</span></a></h3><ul><li>Service owned pricing, stock, discount, and credit checks.</li><li>Unit tests required heavy EF Core and service fakes.</li><li>Adding a new rule meant touching multiple files.</li></ul><h3 id="after-the-refactor" tabindex="-1"><a class="header-anchor" href="#after-the-refactor"><span>After the refactor</span></a></h3><ul><li>Aggregate owns all business rules; service only orchestrates.</li><li>Pure domain tests — no database container required.</li><li>Most changes are isolated to the <code>Order</code> aggregate.</li></ul><hr><h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="#wrapping-up"><span>Wrapping Up</span></a></h2><p>The real value in refactoring anemic models isn&#39;t technical — it&#39;s strategic.</p><p>By moving business logic closer to the data, you:</p><ul><li>Reduce the blast radius of changes</li><li>Make business rules explicit and testable</li><li>Open the door for tactical patterns like validation, events, and invariants</li></ul><p>But you don&#39;t need a big rewrite. Start with one rule. Refactor it. Then the next.</p><p>That&#39;s how legacy systems evolve into maintainable architectures.</p>`,46)),s("p",null,[n[12]||(n[12]=e("If you enjoyed this breakdown and want a hands-on, real-world guide to untangling messy services, check out my course ")),a(d,{to:"/milanjovanovic.tech/ddd-refactoring/"},{default:t(()=>n[11]||(n[11]=[s("strong",null,"Domain-Driven Design Refactoring",-1)])),_:1,__:[11]}),n[13]||(n[13]=e(". It's packed with before-and-after examples like this one."))]),h(" TODO: add ARTICLE CARD "),a(p,c(l({title:"From Anemic Models to Behavior-Driven Models: A Practical DDD Refactor in C#",desc:"A practical guide to transforming anemic domain models into behavior-rich aggregates in C# through incremental refactoring, enhancing code maintainability and business rule clarity.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/from-anemic-models-to-behavior-driven-models-a-practical-ddd-refactor-in-csharp.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const P=k(f,[["render",I]]),_=JSON.parse('{"path":"/milanjovanovic.tech/from-anemic-models-to-behavior-driven-models-a-practical-ddd-refactor-in-csharp.html","title":"From Anemic Models to Behavior-Driven Models: A Practical DDD Refactor in C#","lang":"en-US","frontmatter":{"lang":"en-US","title":"From Anemic Models to Behavior-Driven Models: A Practical DDD Refactor in C#","description":"Article(s) > From Anemic Models to Behavior-Driven Models: A Practical DDD Refactor in C#","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","c#","cs","csharp"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"From Anemic Models to Behavior-Driven Models: A Practical DDD Refactor in C#\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_141.png\\"],\\"datePublished\\":\\"2025-05-10T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/from-anemic-models-to-behavior-driven-models-a-practical-ddd-refactor-in-csharp.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"From Anemic Models to Behavior-Driven Models: A Practical DDD Refactor in C#"}],["meta",{"property":"og:description","content":"Article(s) > From Anemic Models to Behavior-Driven Models: A Practical DDD Refactor in C#"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_141.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_141.png"}],["meta",{"name":"twitter:image:alt","content":"From Anemic Models to Behavior-Driven Models: A Practical DDD Refactor in C#"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-05-10T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > From Anemic Models to Behavior-Driven Models: A Practical DDD Refactor in C#"},{"property":"og:description","content":"From Anemic Models to Behavior-Driven Models: A Practical DDD Refactor in C#"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/from-anemic-models-to-behavior-driven-models-a-practical-ddd-refactor-in-csharp.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-05-10T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_141.png"},"git":{},"readingTime":{"minutes":4.78,"words":1433},"filePathRelative":"milanjovanovic.tech/from-anemic-models-to-behavior-driven-models-a-practical-ddd-refactor-in-csharp.md","copyright":{"author":"Milan Jovanović"}}');export{P as comp,_ as data};
