import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as e,b as l,t as b,n as g,g as h,w as t,e as a,r as i,o as y}from"./app-BVguHYKu.js";const f={},w={id:"frontmatter-title-관련",tabindex:"-1"},I={class:"header-anchor",href:"#frontmatter-title-관련"},E={class:"table-of-contents"},x={href:"https://learn.microsoft.com/en-us/ef/core/logging-events-diagnostics/interceptors",target:"_blank",rel:"noopener noreferrer"},C={href:"https://youtu.be/mAlO3OuoQvo",target:"_blank",rel:"noopener noreferrer"},D={href:"https://youtu.be/AHzWJ_SMqLo",target:"_blank",rel:"noopener noreferrer"},T={href:"https://youtu.be/XALvnX7MPeo",target:"_blank",rel:"noopener noreferrer"};function A(r,n){const d=i("VPCard"),p=i("router-link"),k=i("SiteInfo"),o=i("RouteLink"),c=i("VPIcon"),u=i("VidStack");return y(),m("div",null,[s("h1",w,[s("a",I,[s("span",null,b(r.$frontmatter.title)+" 관련",1)])]),e(d,g(h({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",E,[s("ul",null,[s("li",null,[e(p,{to:"#what-are-ef-interceptors"},{default:t(()=>n[0]||(n[0]=[a("What are EF Interceptors?")])),_:1,__:[0]})]),s("li",null,[e(p,{to:"#audit-logging-with-ef-interceptors"},{default:t(()=>n[1]||(n[1]=[a("Audit Logging With EF Interceptors")])),_:1,__:[1]})]),s("li",null,[e(p,{to:"#publish-domain-events-with-ef-interceptors"},{default:t(()=>n[2]||(n[2]=[a("Publish Domain Events With EF Interceptors")])),_:1,__:[2]})]),s("li",null,[e(p,{to:"#store-outbox-messages-with-ef-interceptors"},{default:t(()=>n[3]||(n[3]=[a("Store Outbox Messages With EF Interceptors")])),_:1,__:[3]})]),s("li",null,[e(p,{to:"#configuring-ef-interceptors-using-dependency-injection"},{default:t(()=>n[4]||(n[4]=[a("Configuring EF Interceptors Using Dependency Injection")])),_:1,__:[4]})]),s("li",null,[e(p,{to:"#closing-thoughts"},{default:t(()=>n[5]||(n[5]=[a("Closing Thoughts")])),_:1,__:[5]})])])]),n[36]||(n[36]=s("hr",null,null,-1)),e(k,{name:"How To Use EF Core Interceptors",desc:"EF Core is my favorite ORM for .NET applications. Yet, its many fantastic features sometimes go unnoticed. For example, query splitting, query filters, and interceptors. EF interceptors are interesting because you can do powerful things with them. For example, you can hook into materialization, handle optimistic concurrency errors, or add query hints. The most practical use case is adding behavior when saving changes to the database.",url:"https://milanjovanovic.tech/blog/how-to-use-ef-core-interceptors/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_064.png"}),s("p",null,[n[8]||(n[8]=a("EF Core is my favorite ORM for .NET applications. Yet, its many fantastic features sometimes go unnoticed. For example, ")),e(o,{to:"/milanjovanovic.tech/how-to-improve-performance-with-ef-core-query-splitting.html"},{default:t(()=>n[6]||(n[6]=[s("strong",null,"query splitting",-1)])),_:1,__:[6]}),n[9]||(n[9]=a(", ")),e(o,{to:"/milanjovanovic.tech/how-to-use-global-query-filters-in-ef-core.html"},{default:t(()=>n[7]||(n[7]=[s("strong",null,"query filters",-1)])),_:1,__:[7]}),n[10]||(n[10]=a(", and interceptors."))]),n[37]||(n[37]=s("p",null,"EF interceptors are interesting because you can do powerful things with them. For example, you can hook into materialization, handle optimistic concurrency errors, or add query hints.",-1)),n[38]||(n[38]=s("p",null,"The most practical use case is adding behavior when saving changes to the database.",-1)),n[39]||(n[39]=s("p",null,"Today I want to show you three unique use cases for EF Core interceptors:",-1)),n[40]||(n[40]=s("ul",null,[s("li",null,"Audit logging"),s("li",null,"Publishing domain events"),s("li",null,"Persisting Outbox messages")],-1)),n[41]||(n[41]=s("hr",null,null,-1)),n[42]||(n[42]=s("h2",{id:"what-are-ef-interceptors",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#what-are-ef-interceptors"},[s("span",null,"What are EF Interceptors?")])],-1)),s("p",null,[s("a",x,[e(c,{icon:"fa-brands fa-microsoft"}),n[11]||(n[11]=a("EF Core interceptors"))]),n[12]||(n[12]=a(" allow you to intercept, change, or suppress EF Core operations. Every interceptor implements the ")),n[13]||(n[13]=s("code",null,"IInterceptor",-1)),n[14]||(n[14]=a(" interface. A few common derived interfaces include ")),n[15]||(n[15]=s("code",null,"IDbCommandInterceptor",-1)),n[16]||(n[16]=a(", ")),n[17]||(n[17]=s("code",null,"IDbConnectionInterceptor",-1)),n[18]||(n[18]=a(", and ")),n[19]||(n[19]=s("code",null,"IDbTransactionInterceptor",-1)),n[20]||(n[20]=a("."))]),n[43]||(n[43]=l(`<p>The most popular one is the <code>ISaveChangesInterceptor</code>. It allows you to add behavior before or after saving changes.</p><p>Interceptors are registered for each <code>DbContext</code> instance when configuring the context.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IInterceptor</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You don&#39;t have to implement these interfaces directly. It&#39;s better to use concrete implementations and override the needed methods.</p><p>For example, I&#39;ll show you how to use the <code>SaveChangesInterceptor</code>.</p><hr><h2 id="audit-logging-with-ef-interceptors" tabindex="-1"><a class="header-anchor" href="#audit-logging-with-ef-interceptors"><span>Audit Logging With EF Interceptors</span></a></h2><p>An audit log of entity changes is a valuable feature in some applications. You write additional audit information every time an entity is created or modified. The audit log could also contain the complete before/after values, depending on your requirements.</p><p>However, let&#39;s use a simple example to make it easy to understand.</p><p>I have an <code>IAuditable</code> interface with two properties representing when an entity was created or modified.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAuditable</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token return-type class-name">DateTime</span> CreatedOnUtc <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token return-type class-name">DateTime<span class="token punctuation">?</span></span> ModifiedOnUtc <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, I&#39;ll implement an <code>UpdateAuditableInterceptor</code> interceptor to write the audit values. It uses the <code>ChangeTracker</code> to find all <code>IAuditable</code> instances and sets the respective property value.</p><p>I want to highlight that I&#39;m overriding the <code>SavingChangesAsync</code> method here. <code>SavingChangesAsync</code> runs before the changes are saved in the database and any updates applied inside the <code>UpdateAuditableInterceptor</code> are also part of the current database transaction.</p><p>This implementation can be easily extended to include the information about the current user.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">UpdateAuditableInterceptor</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SaveChangesInterceptor</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">ValueTask<span class="token punctuation">&lt;</span>InterceptionResult<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">SavingChangesAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">DbContextEventData</span> eventData<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">InterceptionResult<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> result<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>eventData<span class="token punctuation">.</span>Context <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">UpdateAuditableEntities</span><span class="token punctuation">(</span>eventData<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">SavingChangesAsync</span><span class="token punctuation">(</span>eventData<span class="token punctuation">,</span> result<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateAuditableEntities</span><span class="token punctuation">(</span><span class="token class-name">DbContext</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">DateTime</span> utcNow <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> entities <span class="token operator">=</span> context<span class="token punctuation">.</span>ChangeTracker<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entries</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAuditable<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">EntityEntry<span class="token punctuation">&lt;</span>IAuditable<span class="token punctuation">&gt;</span></span> entry <span class="token keyword">in</span> entities<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>State <span class="token operator">==</span> EntityState<span class="token punctuation">.</span>Added<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">SetCurrentPropertyValue</span><span class="token punctuation">(</span></span>
<span class="line">                    entry<span class="token punctuation">,</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>IAuditable<span class="token punctuation">.</span>CreatedOnUtc<span class="token punctuation">)</span><span class="token punctuation">,</span> utcNow<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>State <span class="token operator">==</span> EntityState<span class="token punctuation">.</span>Modified<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">SetCurrentPropertyValue</span><span class="token punctuation">(</span></span>
<span class="line">                    entry<span class="token punctuation">,</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>IAuditable<span class="token punctuation">.</span>ModifiedOnUtc<span class="token punctuation">)</span><span class="token punctuation">,</span> utcNow<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetCurrentPropertyValue</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token class-name">EntityEntry</span> entry<span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">string</span></span> propertyName<span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">DateTime</span> utcNow<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">            entry<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">.</span>CurrentValue <span class="token operator">=</span> utcNow<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="publish-domain-events-with-ef-interceptors" tabindex="-1"><a class="header-anchor" href="#publish-domain-events-with-ef-interceptors"><span>Publish Domain Events With EF Interceptors</span></a></h2>`,17)),s("p",null,[n[22]||(n[22]=a("Another use case for EF interceptors is ")),e(o,{to:"/milanjovanovic.tech/how-to-use-domain-events-to-build-loosely-coupled-systems.html"},{default:t(()=>n[21]||(n[21]=[s("strong",null,"publishing domain events.",-1)])),_:1,__:[21]}),n[23]||(n[23]=a(" Domain events are a DDD tactical pattern to create loosely coupled systems."))]),n[44]||(n[44]=l(`<p>Domain events allow you to express side effects explicitly and provide a better separation of concerns in the domain.</p><p>You can create an <code>IDomainEvent</code> interface, which derives from <code>MediatR.INotification</code>. This allows you to use the <code>IPublisher</code> to publish domain events and handle them asynchronously.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">using</span> <span class="token namespace">MediatR</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDomainEvent</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INotification</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, I&#39;ll create a <code>PublishDomainEventsInterceptor</code> that also inherits from <code>SaveChangesInterceptor</code>. However, this time, we&#39;re using the <code>SavedChangesAsync</code> to publish the domain events <em>after</em> saving changes in the database.</p><p>This has two important implications:</p><ol><li>The entire workflow is now eventually consistent. Domain event handlers will save changes to the database after the original transaction.</li><li>If any domain event handlers fail, we risk failing the request even though the initial transaction was completed successfully.</li></ol>`,6)),s("p",null,[n[25]||(n[25]=a("You can make this process more reliable by using an ")),e(o,{to:"/milanjovanovic.tech/outbox-pattern-for-reliable-microservices-messaging.html"},{default:t(()=>n[24]||(n[24]=[s("strong",null,"Outbox",-1)])),_:1,__:[24]}),n[26]||(n[26]=a("."))]),n[45]||(n[45]=l(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">PublishDomainEventsInterceptor</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SaveChangesInterceptor</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IPublisher</span> _publisher<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">PublishDomainEventsInterceptor</span><span class="token punctuation">(</span><span class="token class-name">IPublisher</span> publisher<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _publisher <span class="token operator">=</span> publisher<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">ValueTask<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token function">SavedChangesAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">SaveChangesCompletedEventData</span> eventData<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">int</span></span> result<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>eventData<span class="token punctuation">.</span>Context <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">await</span> <span class="token function">PublishDomainEventsAsync</span><span class="token punctuation">(</span>eventData<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">PublishDomainEventsAsync</span><span class="token punctuation">(</span><span class="token class-name">DbContext</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> domainEvents <span class="token operator">=</span> context</span>
<span class="line">            <span class="token punctuation">.</span>ChangeTracker</span>
<span class="line">            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entries</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Entity<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>entry <span class="token operator">=&gt;</span> entry<span class="token punctuation">.</span>Entity<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>entity <span class="token operator">=&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">List<span class="token punctuation">&lt;</span>IDomainEvent<span class="token punctuation">&gt;</span></span> domainEvents <span class="token operator">=</span> entity<span class="token punctuation">.</span>DomainEvents<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                entity<span class="token punctuation">.</span><span class="token function">ClearDomainEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">return</span> domainEvents<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">IDomainEvent</span> domainEvent <span class="token keyword">in</span> domainEvents<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">await</span> _publisher<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>domainEvent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="store-outbox-messages-with-ef-interceptors" tabindex="-1"><a class="header-anchor" href="#store-outbox-messages-with-ef-interceptors"><span>Store Outbox Messages With EF Interceptors</span></a></h2>`,3)),s("p",null,[n[28]||(n[28]=a("Instead of ")),e(o,{to:"/milanjovanovic.tech/how-to-use-domain-events-to-build-loosely-coupled-systems.html"},{default:t(()=>n[27]||(n[27]=[s("strong",null,"publishing domain events",-1)])),_:1,__:[27]}),n[29]||(n[29]=a(" as part of the EF transaction, you can convert them to Outbox messages."))]),n[46]||(n[46]=l("<p>Here&#39;s an <code>InsertOutboxMessagesInterceptor</code> that does precisely this.</p><p>It overrides the <code>SavingChangesAsync</code> method. Which means it runs inside the current EF transaction before saving changes.</p><p>The <code>InsertOutboxMessagesInterceptor</code> converts any domain events into an <code>OutboxMessage</code> and adds it to the respective <code>DbSet&lt;OutboxMessage&gt;</code>. This means they will be saved to the database with any existing changes inside the same transaction.</p><p>This is an atomic operation.</p><p>Either everything succeeds or everything fails.</p><p>There&#39;s no in-between state like in the <code>PublishDomainEventsInterceptor</code>.</p><p>You can then create a background worker that will process the Outbox messages.</p>",7)),s("p",null,[n[31]||(n[31]=a("And this is how you implement the ")),e(o,{to:"/milanjovanovic.tech/outbox-pattern-for-reliable-microservices-messaging.html"},{default:t(()=>n[30]||(n[30]=[s("strong",null,"Outbox pattern",-1)])),_:1,__:[30]}),n[32]||(n[32]=a(" with EF Core."))]),n[47]||(n[47]=l(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">using</span> <span class="token namespace">Newtonsoft<span class="token punctuation">.</span>Json</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">InsertOutboxMessagesInterceptor</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SaveChangesInterceptor</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">JsonSerializerSettings</span> Serializer <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        TypeNameHandling <span class="token operator">=</span> TypeNameHandling<span class="token punctuation">.</span>All</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">ValueTask<span class="token punctuation">&lt;</span>InterceptionResult<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">SavingChangesAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">DbContextEventData</span> eventData<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">InterceptionResult<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> result<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>eventData<span class="token punctuation">.</span>Context <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">InsertOutboxMessages</span><span class="token punctuation">(</span>eventData<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">SavingChangesAsync</span><span class="token punctuation">(</span>eventData<span class="token punctuation">,</span> result<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InsertOutboxMessages</span><span class="token punctuation">(</span><span class="token class-name">DbContext</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        context</span>
<span class="line">            <span class="token punctuation">.</span>ChangeTracker</span>
<span class="line">            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entries</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Entity<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>entry <span class="token operator">=&gt;</span> entry<span class="token punctuation">.</span>Entity<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>entity <span class="token operator">=&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">List<span class="token punctuation">&lt;</span>IDomainEvent<span class="token punctuation">&gt;</span></span> domainEvents <span class="token operator">=</span> entity<span class="token punctuation">.</span>DomainEvents<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                entity<span class="token punctuation">.</span><span class="token function">ClearDomainEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">return</span> domainEvents<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>domainEvent <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OutboxMessage</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                Id <span class="token operator">=</span> domainEvent<span class="token punctuation">.</span>Id<span class="token punctuation">,</span></span>
<span class="line">                OccurredOnUtc <span class="token operator">=</span> domainEvent<span class="token punctuation">.</span>OccurredOnUtc<span class="token punctuation">,</span></span>
<span class="line">                Type <span class="token operator">=</span> domainEvent<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span></span>
<span class="line">                Content <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>domainEvent<span class="token punctuation">,</span> Serializer<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OutboxMessage<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>outboxMessages<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="configuring-ef-interceptors-using-dependency-injection" tabindex="-1"><a class="header-anchor" href="#configuring-ef-interceptors-using-dependency-injection"><span>Configuring EF Interceptors Using Dependency Injection</span></a></h2><p>EF interceptors should be lightweight and stateless. You can add them to the <code>DbContext</code> by calling <code>AddInterceptors</code> and passing in the interceptor instances.</p><p>I like to configure the interceptors with Dependency Injection for two reasons:</p><ul><li>It allows me also to use DI in the interceptors (be mindful that they are singletons)</li><li>To simplify adding the interceptors to the <code>DbContext</code> using <code>AddDbContext</code></li></ul><p>Here&#39;s how you can configure the <code>UpdateAuditableInterceptor</code> and <code>InsertOutboxMessagesInterceptor</code> with the <code>ApplicationDbContext</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UpdateAuditableInterceptor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>InsertOutboxMessagesInterceptor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IApplicationDbContext<span class="token punctuation">,</span> ApplicationDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span>sp<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> options</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">AddInterceptors</span><span class="token punctuation">(</span></span>
<span class="line">            sp<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UpdateAuditableInterceptor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            sp<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>InsertOutboxMessagesInterceptor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="closing-thoughts" tabindex="-1"><a class="header-anchor" href="#closing-thoughts"><span>Closing Thoughts</span></a></h2><p>Interceptors allow you to do almost anything with an EF Core operation. But with great power comes great responsibility. You should be mindful that interceptors have an impact on performance. Calls to external services or handling events will slow down the operation.</p><p>Remember, you don&#39;t necessarily have to use EF interceptors. You can achieve the same behavior by overriding the <code>SaveChangesAsync</code> method on the <code>DbContext</code> and adding your custom logic there.</p><p>I showed you a few practical use cases for EF interceptors in this week&#39;s issue.</p><p>But, if you want to see more examples, I have a few videos about:</p>`,14)),s("ul",null,[s("li",null,[s("a",C,[e(c,{icon:"fa-brands fa-youtube"}),n[33]||(n[33]=s("strong",null,"Auditing logging",-1))])]),s("li",null,[s("a",D,[e(c,{icon:"fa-brands fa-youtube"}),n[34]||(n[34]=s("strong",null,"Publishing domain events",-1))])]),s("li",null,[s("a",T,[e(c,{icon:"fa-brands fa-youtube"}),n[35]||(n[35]=s("strong",null,"Implementing the Outbox pattern",-1))])])]),e(u,{src:"youtube/mAlO3OuoQvo"}),e(u,{src:"youtube/AHzWJ_SMqLo"}),e(u,{src:"youtube/XALvnX7MPeo"}),n[48]||(n[48]=s("p",null,"Thanks for reading, and stay awesome!",-1))])}const O=v(f,[["render",A]]),M=JSON.parse('{"path":"/milanjovanovic.tech/how-to-use-ef-core-interceptors.html","title":"How To Use EF Core Interceptors","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"How To Use EF Core Interceptors","description":"Article(s) > How To Use EF Core Interceptors","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How To Use EF Core Interceptors\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_064.png\\"],\\"datePublished\\":\\"2023-11-18T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-to-use-ef-core-interceptors.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How To Use EF Core Interceptors"}],["meta",{"property":"og:description","content":"Article(s) > How To Use EF Core Interceptors"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_064.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_064.png"}],["meta",{"name":"twitter:image:alt","content":"How To Use EF Core Interceptors"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-11-18T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How To Use EF Core Interceptors"},{"property":"og:description","content":"How To Use EF Core Interceptors"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/how-to-use-ef-core-interceptors.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-11-18T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_064.png"},"git":{},"readingTime":{"minutes":4.68,"words":1405},"filePathRelative":"milanjovanovic.tech/how-to-use-ef-core-interceptors.md","copyright":{"author":"Milan Jovanović"}}');export{O as comp,M as data};
