import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as e,b as h,a as b,t as g,n as l,g as r,w as t,e as a,r as p,o as y}from"./app-BVguHYKu.js";const w={},f={id:"frontmatter-title-관련",tabindex:"-1"},q={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},A={href:"https://en.wikipedia.org/wiki/Event-driven_architecture",target:"_blank",rel:"noopener noreferrer"},E={href:"https://rabbitmq.com/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://nuget.org/packages/rabbitmq.client/",target:"_blank",rel:"noopener noreferrer"};function R(u,n){const c=p("VPCard"),o=p("router-link"),d=p("SiteInfo"),i=p("VPIcon"),m=p("RouteLink");return y(),v("div",null,[s("h1",f,[s("a",q,[s("span",null,g(u.$frontmatter.title)+" 관련",1)])]),e(c,l(r({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(c,l(r({title:"RabbitMQ > Article(s)",desc:"Article(s)",link:"/programming/erl-rabbitmq/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[e(o,{to:"#rabbitmq-basics"},{default:t(()=>n[0]||(n[0]=[a("RabbitMQ Basics")])),_:1,__:[0]})]),s("li",null,[e(o,{to:"#producer-sending-events"},{default:t(()=>n[1]||(n[1]=[a("Producer - Sending Events")])),_:1,__:[1]})]),s("li",null,[e(o,{to:"#consumer-receiving-events"},{default:t(()=>n[2]||(n[2]=[a("Consumer - Receiving Events")])),_:1,__:[2]})]),s("li",null,[e(o,{to:"#competing-consumers-scaling-out"},{default:t(()=>n[3]||(n[3]=[a("Competing Consumers - Scaling Out")])),_:1,__:[3]})]),s("li",null,[e(o,{to:"#fanout-exchange-broadcast-to-multiple-consumers"},{default:t(()=>n[4]||(n[4]=[a("Fanout Exchange: Broadcast to Multiple Consumers")])),_:1,__:[4]}),s("ul",null,[s("li",null,[e(o,{to:"#producer"},{default:t(()=>n[5]||(n[5]=[a("Producer")])),_:1,__:[5]})]),s("li",null,[e(o,{to:"#consumer"},{default:t(()=>n[6]||(n[6]=[a("Consumer")])),_:1,__:[6]})])])]),s("li",null,[e(o,{to:"#next-steps"},{default:t(()=>n[7]||(n[7]=[a("Next Steps")])),_:1,__:[7]})])])]),n[18]||(n[18]=s("hr",null,null,-1)),e(d,{name:"Event-Driven Architecture in .NET with RabbitMQ",desc:"Learn how to implement flexible and resilient event-driven systems in .NET using RabbitMQ as a message broker with practical code examples for producers and consumers.",url:"https://milanjovanovic.tech/blog/event-driven-architecture-in-dotnet-with-rabbitmq",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_140.png"}),s("p",null,[s("a",A,[e(i,{icon:"fa-brands fa-wikipedia-w"}),n[8]||(n[8]=a("Event-driven architecture"))]),n[10]||(n[10]=a(" (EDA) can make applications more flexible and reliable. Instead of one part of the system calling another directly, we let events flow through a message broker. In this quick guide, I'll show you how to set up a simple event-driven system in .NET using ")),s("a",E,[e(i,{icon:"iconfont icon-rabbitmq"}),n[9]||(n[9]=a("RabbitMQ"))]),n[11]||(n[11]=a("."))]),s("p",null,[n[13]||(n[13]=a("We'll build a small example with a producer that sends events and a consumer that receives them. For testing, I'll run RabbitMQ in a Docker container (with the Management UI enabled so we can see what's happening). We'll use the official ")),s("a",M,[e(i,{icon:"fas fa-globe"}),n[12]||(n[12]=a("RabbitMQ.Client"))]),n[14]||(n[14]=a(" NuGet package in a .NET console app."))]),n[19]||(n[19]=h(`<p>Note: If you don&#39;t have RabbitMQ installed, you can run it quickly with Docker. For example:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--name</span> rabbitmq <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token punctuation">\\</span></span>
<span class="line">rabbitmq:4-management</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This starts a RabbitMQ broker on localhost (AMQP port <code>5672</code>) and a management website at <code>http://localhost:15672</code>.</p><hr><h2 id="rabbitmq-basics" tabindex="-1"><a class="header-anchor" href="#rabbitmq-basics"><span>RabbitMQ Basics</span></a></h2><p>Before coding, let&#39;s cover the basic components in RabbitMQ:</p><ul><li><strong>Producer</strong>: an application that sends messages (events) to RabbitMQ.</li><li><strong>Consumer</strong>: an application that receives messages from a queue.</li><li><strong>Queue</strong>: a mailbox inside RabbitMQ that stores messages. Consumers read from queues. Many producers can send to the same queue.</li><li><strong>Exchange</strong>: a routing mechanism that receives messages from producers and directs them to queues. Producers actually send to an exchange instead of directly to a queue. This decouples producers from specific queues - the exchange can decide where messages go, based on rules.</li></ul><p>In RabbitMQ, you can have multiple producers and multiple consumers. Producers never send directly to a queue by name; instead, they send to an exchange. The exchange decides which queues (if any) should get each message based on routing rules.</p><p>For now, we&#39;ll use a simple setup where the exchange will deliver all messages to one queue.</p><hr><h2 id="producer-sending-events" tabindex="-1"><a class="header-anchor" href="#producer-sending-events"><span>Producer - Sending Events</span></a></h2><p>Let&#39;s start with the producer. In our .NET console app, we&#39;ll use RabbitMQ.Client to connect to the RabbitMQ broker and send a message.</p><p>For instance, an <code>OrderPlaced</code> event could trigger downstream services - inventory, email notifications, etc. - without the ordering system needing to call them directly.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> HostName <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">await</span> factory<span class="token punctuation">.</span><span class="token function">CreateConnectionAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> channel <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">CreateChannelAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Ensure the queue exists (create it if not already there)</span></span>
<span class="line"><span class="token keyword">await</span> channel<span class="token punctuation">.</span><span class="token function">QueueDeclareAsync</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token named-parameter punctuation">queue</span><span class="token punctuation">:</span> <span class="token string">&quot;orders&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">durable</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// save to disk so the queue isn’t lost on broker restart</span></span>
<span class="line">    exclusive<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// can be used by other connections</span></span>
<span class="line">    autoDelete<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// don’t delete when the last consumer disconnects</span></span>
<span class="line">    arguments<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create a message</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> orderPlaced <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderPlaced</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">     OrderId <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">     Total <span class="token operator">=</span> <span class="token number">99.99</span><span class="token punctuation">,</span></span>
<span class="line">     CreatedAt <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> message <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>orderPlaced<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> body <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Publish the message</span></span>
<span class="line"><span class="token keyword">await</span> channel<span class="token punctuation">.</span><span class="token function">BasicPublishAsync</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">,</span> <span class="token comment">// default exchange</span></span>
<span class="line">    routingKey<span class="token punctuation">:</span> <span class="token string">&quot;orders&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">mandatory</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// fail if the message can’t be routed</span></span>
<span class="line">    basicProperties<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BasicProperties</span> <span class="token punctuation">{</span> Persistent <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// message will be saved to disk</span></span>
<span class="line">    body<span class="token punctuation">:</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Sent: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This code connects to RabbitMQ on <code>localhost</code>, declares a queue named <code>orders</code> (creates it if it doesn&#39;t exist already), and publishes an <code>OrderPlaced</code> message to that queue. We use an empty string for the exchange parameter, which tells RabbitMQ to use the default exchange. The default exchange routes the message directly to the <code>orders</code> queue.</p><p>What&#39;s happening here:</p><ul><li>We declare a <strong>durable queue</strong>, so it survives RabbitMQ restarts</li><li>We mark the message as <strong>persistent</strong>, which tells RabbitMQ to write it to disk</li><li>We serialize an object into JSON and send it as a UTF-8 encoded byte array</li></ul><p>Now let&#39;s look at the consumer side.</p><hr><h2 id="consumer-receiving-events" tabindex="-1"><a class="header-anchor" href="#consumer-receiving-events"><span>Consumer - Receiving Events</span></a></h2><p>Next, let&#39;s set up a consumer to receive messages from the queue. The consumer will also connect to RabbitMQ and subscribe to the same queue.</p><p>To test this out, start the consumer application first (it will wait for messages), then run the producer application to send an event.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> HostName <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">await</span> factory<span class="token punctuation">.</span><span class="token function">CreateConnectionAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> channel <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">CreateChannelAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Declare (or check) the queue to consume from</span></span>
<span class="line"><span class="token keyword">await</span> channel<span class="token punctuation">.</span><span class="token function">QueueDeclareAsync</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token named-parameter punctuation">queue</span><span class="token punctuation">:</span> <span class="token string">&quot;orders&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">durable</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// must match the producer&#39;s queue settings</span></span>
<span class="line">    exclusive<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// can be used by other connections</span></span>
<span class="line">    autoDelete<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// don’t delete when the last consumer disconnects</span></span>
<span class="line">    arguments<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Define a consumer and start listening</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AsyncEventingBasicConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">consumer<span class="token punctuation">.</span>ReceivedAsync <span class="token operator">+=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>sender<span class="token punctuation">,</span> eventArgs<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> body <span class="token operator">=</span> eventArgs<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> message <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> orderPlaced <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrderPlaced<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Received: OrderPlaced - </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">orderPlaced<span class="token punctuation">.</span>OrderId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Acknowledge the message</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>AsyncEventingBasicConsumer<span class="token punctuation">)</span>sender<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span>Channel<span class="token punctuation">.</span><span class="token function">BasicAckAsync</span><span class="token punctuation">(</span>eventArgs<span class="token punctuation">.</span>DeliveryTag<span class="token punctuation">,</span> <span class="token named-parameter punctuation">multiple</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> channel<span class="token punctuation">.</span><span class="token function">BasicConsumeAsync</span><span class="token punctuation">(</span><span class="token string">&quot;orders&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">autoAck</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Waiting for messages...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The consumer code declares the same <code>orders</code> queue and sets up an event handler for incoming messages. We call <code>BasicConsumeAsync</code> to start listening on the queue. RabbitMQ will push any new messages to our consumer&#39;s event handler. Whenever a message arrives, the <code>consumer.ReceivedAsync</code> event fires, and we print out the message.</p><p>What&#39;s important here:</p><ul><li><code>autoAck: false</code> ensures we only acknowledge messages we actually process</li><li>If processing fails, we could use <code>BasicNack</code> to requeue or route to a dead-letter queue</li><li>Deserializing into a strongly typed object makes it easy to reason about the event</li></ul><p>So far we&#39;ve had one consumer. But what if we run multiple consumers on the same queue?</p><hr><h2 id="competing-consumers-scaling-out" tabindex="-1"><a class="header-anchor" href="#competing-consumers-scaling-out"><span>Competing Consumers - Scaling Out</span></a></h2><p>What if you have multiple consumers for the same queue? RabbitMQ allows <strong>competing consumers</strong> on a queue.</p><p>If two or more consumers listen on the same queue, each message from that queue will be delivered to <strong>only one</strong> of them:</p><ul><li>RabbitMQ will distribute messages among the consumers (roughly in round-robin order)</li><li>This is great for scaling: you can run multiple instances of a worker to process messages in parallel</li></ul><p>In other words, consumers <em>compete</em> for messages on that queue. This pattern helps spread the workload, but note that each individual message is still processed by a single consumer.</p><hr><h2 id="fanout-exchange-broadcast-to-multiple-consumers" tabindex="-1"><a class="header-anchor" href="#fanout-exchange-broadcast-to-multiple-consumers"><span>Fanout Exchange: Broadcast to Multiple Consumers</span></a></h2><p>Competing consumers share the work by dividing messages, but sometimes you want every service to get the event. That&#39;s where a <strong>fanout exchange</strong> comes in.</p><p>In RabbitMQ, a fanout exchange is used for broadcasting events to multiple consumers. Instead of all consumers sharing one queue, each consumer has its own queue. When the producer sends a message to a fanout exchange, the exchange copies and routes the message to all bound queues. This way, every consumer receives a copy via its own queue.</p><p>To set this up in code, we declare a fanout exchange and bind queues to it.</p><h3 id="producer" tabindex="-1"><a class="header-anchor" href="#producer"><span>Producer</span></a></h3><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Producer setup for fanout</span></span>
<span class="line"><span class="token keyword">await</span> channel<span class="token punctuation">.</span><span class="token function">ExchangeDeclareAsync</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> <span class="token string">&quot;orders&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">durable</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// durable exchange</span></span>
<span class="line">    autoDelete<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// don’t delete when the last consumer disconnects</span></span>
<span class="line">    type<span class="token punctuation">:</span> ExchangeType<span class="token punctuation">.</span>Fanout<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Publish a message to the fanout exchange (routingKey is ignored for fanout)</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> orderPlaced <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OrderPlaced</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">     OrderId <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">     Total <span class="token operator">=</span> <span class="token number">99.99</span><span class="token punctuation">,</span></span>
<span class="line">     CreatedAt <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> message <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>orderPlaced<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> body <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> channel<span class="token punctuation">.</span><span class="token function">BasicPublishAsync</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> <span class="token string">&quot;orders&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">routingKey</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">mandatory</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">basicProperties</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BasicProperties</span> <span class="token punctuation">{</span> Persistent <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">body</span><span class="token punctuation">:</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="consumer" tabindex="-1"><a class="header-anchor" href="#consumer"><span>Consumer</span></a></h3><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Consumer setup for fanout</span></span>
<span class="line"><span class="token keyword">await</span> channel<span class="token punctuation">.</span><span class="token function">ExchangeDeclareAsync</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> <span class="token string">&quot;orders&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">durable</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">autoDelete</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> ExchangeType<span class="token punctuation">.</span>Fanout<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create a queue for this consumer and bind it</span></span>
<span class="line"><span class="token keyword">await</span> channel<span class="token punctuation">.</span><span class="token function">QueueDeclareAsync</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token named-parameter punctuation">queue</span><span class="token punctuation">:</span> <span class="token string">&quot;orders-consumer-1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">durable</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">exclusive</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">autoDelete</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">arguments</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> channel<span class="token punctuation">.</span><span class="token function">QueueBindAsync</span><span class="token punctuation">(</span><span class="token string">&quot;orders-consumer-1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;orders&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">routingKey</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Then consume messages from queueName as usual...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the producer, we call <code>ExchangeDeclareAsync</code> to make sure an <code>orders</code> exchange exists (of type fanout). We then <code>BasicPublishAsync</code> to that exchange. For a fanout exchange, the <code>routingKey</code> can be an empty string because it&#39;s ignored (fanout sends to all queues regardless of any routing key). On the consumer side, we declare the same exchange and then create a new <code>orders-consumer-1</code> queue. We bind that queue to the <code>orders</code> exchange. Now any message sent to the exchange will be delivered to this queue, and we can consume it.</p><p>If you run multiple consumer programs (each with its own queue bound to <code>orders</code> exchange), each one will get every message (unlike the competing consumers scenario). You can also peek into RabbitMQ&#39;s Management UI to see the exchange and queues in action.</p><figure><img src="https://milanjovanovic.tech/blogs/mnw_140/rabbitmq_ui.png?imwidth=1920" alt="RabbitMQ Management UI" tabindex="0" loading="lazy"><figcaption>RabbitMQ Management UI</figcaption></figure><hr><h2 id="next-steps" tabindex="-1"><a class="header-anchor" href="#next-steps"><span>Next Steps</span></a></h2><p>You can expand this basic setup with more advanced RabbitMQ features. For example, you might use a <strong>direct exchange</strong> or <strong>topic exchange</strong> to route events to specific services, set up acknowledgment and retry policies for robustness, or implement <strong>dead-letter queues</strong> for error handling. The core idea throughout is the same: decouple senders and receivers with a message broker, making your system more flexible and resilient.</p>`,48)),s("p",null,[n[16]||(n[16]=a("If you want to explore event-driven architecture further, including patterns like the ones we touched on (and beyond), check out my ")),e(m,{to:"/milanjovanovic.tech/modular-monolith-architecture/"},{default:t(()=>n[15]||(n[15]=[s("strong",null,"Modular Monolith Architecture",-1)])),_:1,__:[15]}),n[17]||(n[17]=a(" course. It covers these concepts in depth with practical examples, so you can apply EDA in real-world projects."))]),n[20]||(n[20]=s("p",null,"Good luck out there, and see you next week.",-1)),n[21]||(n[21]=s("hr",null,null,-1)),b(" TODO: add ARTICLE CARD "),e(c,l(r({title:"Event-Driven Architecture in .NET with RabbitMQ",desc:"Learn how to implement flexible and resilient event-driven systems in .NET using RabbitMQ as a message broker with practical code examples for producers and consumers.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/event-driven-architecture-in-dotnet-with-rabbitmq.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const Q=k(w,[["render",R]]),D=JSON.parse('{"path":"/milanjovanovic.tech/event-driven-architecture-in-dotnet-with-rabbitmq.html","title":"Event-Driven Architecture in .NET with RabbitMQ","lang":"en-US","frontmatter":{"lang":"en-US","title":"Event-Driven Architecture in .NET with RabbitMQ","description":"Article(s) > Event-Driven Architecture in .NET with RabbitMQ","icon":"iconfont icon-csharp","category":["C#","DotNet","Erlang","RabbitMQ","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","erlang","erl","rabbitmq","rabbit-mq","rabbitmq"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Event-Driven Architecture in .NET with RabbitMQ\\",\\"image\\":[\\"https://milanjovanovic.tech/blogs/mnw_140/rabbitmq_ui.png?imwidth=1920\\"],\\"datePublished\\":\\"2025-05-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/event-driven-architecture-in-dotnet-with-rabbitmq.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Event-Driven Architecture in .NET with RabbitMQ"}],["meta",{"property":"og:description","content":"Article(s) > Event-Driven Architecture in .NET with RabbitMQ"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_140.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_140.png"}],["meta",{"name":"twitter:image:alt","content":"Event-Driven Architecture in .NET with RabbitMQ"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"rabbitmq"}],["meta",{"property":"article:tag","content":"rabbit-mq"}],["meta",{"property":"article:tag","content":"rabbitmq"}],["meta",{"property":"article:tag","content":"erl"}],["meta",{"property":"article:tag","content":"erlang"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-05-03T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Event-Driven Architecture in .NET with RabbitMQ"},{"property":"og:description","content":"Event-Driven Architecture in .NET with RabbitMQ"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/event-driven-architecture-in-dotnet-with-rabbitmq.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-05-03T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_140.png"},"git":{},"readingTime":{"minutes":5.91,"words":1772},"filePathRelative":"milanjovanovic.tech/event-driven-architecture-in-dotnet-with-rabbitmq.md","copyright":{"author":"Milan Jovanović"}}');export{Q as comp,D as data};
