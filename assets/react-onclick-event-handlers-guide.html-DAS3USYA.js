import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as t,b as o,a as h,t as b,n as r,g as d,w as e,e as a,r as c,o as f}from"./app-BVguHYKu.js";const y="/bookshelf/assets/image/blog.logrocket.com/react-onclick-event-handlers-guide/banner.png",w="/bookshelf/assets/image/blog.logrocket.com/react-onclick-event-handlers-guide/Form-validation-onClick.webp",x="/bookshelf/assets/image/blog.logrocket.com/react-onclick-event-handlers-guide/button-event-log-details.png",C="/bookshelf/assets/image/blog.logrocket.com/react-onclick-event-handlers-guide/event-results.png",j="/bookshelf/assets/image/blog.logrocket.com/react-onclick-event-handlers-guide/button-id-and-other-information.png",q={},R={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},I={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},E={class:"table-of-contents"},T={class:"hint-container note"},S={href:"https://blog.logrocket.com/author/davidomotayo/",target:"_blank",rel:"noopener noreferrer"},H={href:"https://reactjs.org/docs/handling-events.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://pluralsight.com/guides/event-listeners-in-react-components",target:"_blank",rel:"noopener noreferrer"};function M(k,n){const u=c("VPCard"),p=c("router-link"),v=c("SiteInfo"),i=c("VPIcon"),l=c("RouteLink");return f(),g("div",null,[s("h1",R,[s("a",I,[s("span",null,b(k.$frontmatter.title)+" ê´€ë ¨",1)])]),t(u,r(d({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",E,[s("ul",null,[s("li",null,[t(p,{to:"#what-are-event-handlers-in-react"},{default:e(()=>n[0]||(n[0]=[a("What are event handlers in React?")])),_:1,__:[0]})]),s("li",null,[t(p,{to:"#understanding-onclick-in-html-javascript-and-react"},{default:e(()=>n[1]||(n[1]=[a("Understanding onClick in HTML, JavaScript, and React")])),_:1,__:[1]}),s("ul",null,[s("li",null,[t(p,{to:"#html-onclick-attribute"},{default:e(()=>n[2]||(n[2]=[a("HTML onClick attribute")])),_:1,__:[2]})]),s("li",null,[t(p,{to:"#javascript-click-events"},{default:e(()=>n[3]||(n[3]=[a("JavaScript click events")])),_:1,__:[3]})]),s("li",null,[t(p,{to:"#react-s-onclick-handler"},{default:e(()=>n[4]||(n[4]=[a("Reactâ€™s onClick handler")])),_:1,__:[4]})])])]),s("li",null,[t(p,{to:"#more-on-the-onclick-handler-in-react"},{default:e(()=>n[5]||(n[5]=[a("More on the onClick handler in React")])),_:1,__:[5]})]),s("li",null,[t(p,{to:"#what-are-synthetic-events-in-react"},{default:e(()=>n[6]||(n[6]=[a("What are synthetic events in React?")])),_:1,__:[6]})]),s("li",null,[t(p,{to:"#react-event-listeners"},{default:e(()=>n[7]||(n[7]=[a("React event listeners")])),_:1,__:[7]})]),s("li",null,[t(p,{to:"#handling-events-in-react-components"},{default:e(()=>n[8]||(n[8]=[a("Handling events in React components")])),_:1,__:[8]}),s("ul",null,[s("li",null,[t(p,{to:"#call-an-inline-function-in-an-onclick-event-handler"},{default:e(()=>n[9]||(n[9]=[a("Call an inline function in an onClick event handler")])),_:1,__:[9]})]),s("li",null,[t(p,{to:"#update-the-state-inside-an-onclick-event-handler"},{default:e(()=>n[10]||(n[10]=[a("Update the state inside an onClick event handler")])),_:1,__:[10]})]),s("li",null,[t(p,{to:"#call-multiple-functions-in-an-onclick-event-handler"},{default:e(()=>n[11]||(n[11]=[a("Call multiple functions in an onClick event handler")])),_:1,__:[11]})]),s("li",null,[t(p,{to:"#pass-a-parameter-to-an-onclick-event-handler"},{default:e(()=>n[12]||(n[12]=[a("Pass a parameter to an onClick event handler")])),_:1,__:[12]})]),s("li",null,[t(p,{to:"#use-synthetic-events-directly-inside-an-onclick-event-handler"},{default:e(()=>n[13]||(n[13]=[a("Use synthetic events directly inside an onClick event handler")])),_:1,__:[13]})])])]),s("li",null,[t(p,{to:"#event-delegation-in-react"},{default:e(()=>n[14]||(n[14]=[a("Event delegation in React")])),_:1,__:[14]})]),s("li",null,[t(p,{to:"#custom-components-and-events-in-react"},{default:e(()=>n[15]||(n[15]=[a("Custom components and events in React")])),_:1,__:[15]})]),s("li",null,[t(p,{to:"#identifying-component-bound-event-listeners"},{default:e(()=>n[16]||(n[16]=[a("Identifying component-bound event listeners")])),_:1,__:[16]})]),s("li",null,[t(p,{to:"#type-checking-in-react-with-typescript"},{default:e(()=>n[17]||(n[17]=[a("Type-checking in React with TypeScript")])),_:1,__:[17]}),s("ul",null,[s("li",null,[t(p,{to:"#specifying-the-onclick-event-handler-type-with-typescript"},{default:e(()=>n[18]||(n[18]=[a("Specifying the onClick event handler type with TypeScript")])),_:1,__:[18]})]),s("li",null,[t(p,{to:"#using-mouse-events-with-onclick-in-react"},{default:e(()=>n[19]||(n[19]=[a("Using mouse events with onClick in React")])),_:1,__:[19]})])])]),s("li",null,[t(p,{to:"#handling-common-issues-with-onclick-in-react"},{default:e(()=>n[20]||(n[20]=[a("Handling common issues with onClick in React")])),_:1,__:[20]}),s("ul",null,[s("li",null,[t(p,{to:"#event-bubbling"},{default:e(()=>n[21]||(n[21]=[a("Event bubbling")])),_:1,__:[21]})]),s("li",null,[t(p,{to:"#this-binding-issues"},{default:e(()=>n[22]||(n[22]=[a("this binding issues")])),_:1,__:[22]})]),s("li",null,[t(p,{to:"#async-state-updates"},{default:e(()=>n[23]||(n[23]=[a("Async state updates")])),_:1,__:[23]})]),s("li",null,[t(p,{to:"#memory-leaks"},{default:e(()=>n[24]||(n[24]=[a("Memory leaks")])),_:1,__:[24]})]),s("li",null,[t(p,{to:"#onclick-performance-issues"},{default:e(()=>n[25]||(n[25]=[a("onClick performance issues")])),_:1,__:[25]})])])]),s("li",null,[t(p,{to:"#conclusion"},{default:e(()=>n[26]||(n[26]=[a("Conclusion")])),_:1,__:[26]})])])]),n[61]||(n[61]=s("hr",null,null,-1)),t(v,{name:"React onClick event handlers: A complete guide",desc:"This guide covers Reactâ€™s onClick event handler, including information about event listening, synthetic events, custom events, and more.",url:"https://blog.logrocket.com/react-onclick-event-handlers-guide",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/react-onclick-event-handlers-guide/banner.png"}),s("div",T,[n[30]||(n[30]=s("p",{class:"hint-container-title"},"Editorâ€™s note",-1)),s("p",null,[n[28]||(n[28]=a("This article was last updated by ")),s("a",S,[t(i,{icon:"fas fa-globe"}),n[27]||(n[27]=a("David Omotayo"))]),n[29]||(n[29]=a(" on 26 November 2024 to cover how to identify event listeners bound to a component, as well as how to get the ID of a clicked element in the JavaScript click handler."))])]),n[62]||(n[62]=o('<figure><img src="'+y+'" alt="React OnClick Event Handlers: A Complete Guide" tabindex="0" loading="lazy"><figcaption>React OnClick Event Handlers: A Complete Guide</figcaption></figure><p>Interactivity is key to making your applications dynamic and engaging to users, and event handling plays a central role in achieving this functionality. In this article, weâ€™ll deep dive into the core concept of event handling in React, focusing on the <code>onClick</code> event handler as a practical example. By the end, youâ€™ll have a solid understanding of how to capture and respond to events in your React applications.</p><hr><h2 id="what-are-event-handlers-in-react" tabindex="-1"><a class="header-anchor" href="#what-are-event-handlers-in-react"><span>What are event handlers in React?</span></a></h2><p>Event handlers are functions that React components use to determine what action will occur whenever an event is fired. This could be a button click or a change in a text input.</p><p>Essentially, event handlers allow users to interact with your React app. Handling events with React elements is similar to handling events on DOM elements, with a few minor exceptions.</p><p>Some common React event handlers include**ðŸ˜—*</p><ul><li><code>onClick</code>: Handles click events on elements like buttons</li><li><code>onChange</code>: Handles changes in input fields, textareas, and select elements</li><li><code>onSubmit</code>: Handles form submission</li><li><code>onMouseOver</code> and <code>onMouseOut</code>: Handle mouse hover and mouse leave events</li><li><code>onKeyDown</code> and <code>onKeyUp</code>: Handle key press and key release events</li></ul>',8)),s("p",null,[n[32]||(n[32]=a("If youâ€™re familiar with ")),t(l,{to:"/blog.logrocket.com/custom-events-in-javascript-a-complete-guide.html"},{default:e(()=>n[31]||(n[31]=[s("strong",null,"how events work in standard HTML and JavaScript",-1)])),_:1,__:[31]}),n[33]||(n[33]=a(", it should be easy for you to learn how to handle events in React."))]),n[63]||(n[63]=o(`<hr><h2 id="understanding-onclick-in-html-javascript-and-react" tabindex="-1"><a class="header-anchor" href="#understanding-onclick-in-html-javascript-and-react"><span>Understanding <code>onClick</code> in HTML, JavaScript, and React</span></a></h2><p><code>onClick</code> is fundamental in web development, as it allows users to interact with elements on a page. Just as we can use it in React, we can also use it in HTML and traditional JavaScript.</p><p>Although there are syntax differences, the underlying concept of handling click events remains consistent across React, HTML, and JavaScript. In all three approaches, a function or action is triggered when a user clicks on a designated element.</p><p>Understanding these commonalities can ease the transition between HTML, JavaScript, and React, enabling developers to apply their knowledge across different contexts. Letâ€™s explore the similarities and differences of using the <code>onClick</code> event within them.</p><h3 id="html-onclick-attribute" tabindex="-1"><a class="header-anchor" href="#html-onclick-attribute"><span>HTML <code>onClick</code> attribute</span></a></h3><p>In HTML, the <code>onClick</code> attribute is used to associate a script or action with a click event on an element. This is a basic and direct way to handle user interactions:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Here, the <code>handleClick</code> function will be executed when the button is clicked. This approach is simple and commonly used in traditional HTML documents.</p><h3 id="javascript-click-events" tabindex="-1"><a class="header-anchor" href="#javascript-click-events"><span>JavaScript click events</span></a></h3><p>In plain JavaScript, event listeners are employed to handle click events. The <code>addEventListener</code> method allows developers to attach functions to specific events, including clicks:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> myElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myElement&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">myElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Handle the click event here</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This method provides more flexibility and separation of concerns compared to inline HTML attributes.</p><h3 id="react-s-onclick-handler" tabindex="-1"><a class="header-anchor" href="#react-s-onclick-handler"><span>Reactâ€™s <code>onClick</code> handler</span></a></h3><p>When transitioning to React, the <code>onClick</code> event is a core part of handling user interactions. In JSX, the <code>onClick</code> handler is specified directly in the component, making the code more declarative:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>sayHello<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Say Hello</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Reactâ€™s <code>onClick</code> handler follows a similar concept to the HTML <code>onClick</code> attribute but is more integrated into the componentâ€™s structure.</p><hr><h2 id="more-on-the-onclick-handler-in-react" tabindex="-1"><a class="header-anchor" href="#more-on-the-onclick-handler-in-react"><span>More on the <code>onClick</code> handler in React</span></a></h2><p>The React <code>onClick</code> event handler enables you to call a function and trigger an action when a user clicks an element, such as a button, in your app.</p>`,20)),s("p",null,[n[35]||(n[35]=a("Event names are written in camelCase, so the ")),n[36]||(n[36]=s("code",null,"onclick",-1)),n[37]||(n[37]=a(" event is written as ")),n[38]||(n[38]=s("code",null,"onClick",-1)),n[39]||(n[39]=a(" in a React app. In addition, ")),s("a",H,[t(i,{icon:"fa-brands fa-react"}),n[34]||(n[34]=a("React event handlers"))]),n[40]||(n[40]=a(" appear inside curly braces."))]),n[64]||(n[64]=o(`<p>Take the following simple example written in HTML:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  Say Hello</span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In a React app, this <code>button onClick</code> event would be written as follows:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>sayHello<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  Say Hello</span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Another key difference is that you must explicitly call <code>preventDefault</code> in React, whereas in HTML, you would simply return <code>false</code> to avoid default behavior.</p><p>The following example shows how to prevent a link from opening a new page by default:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The link was clicked.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token boolean">false</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  Click me</span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In React, you would write this as follows:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">ActionLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The link was clicked.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      Click me</span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Letâ€™s look at a more complex example using the <code>onClick</code> handler. Suppose you have a form with multiple input fields, and you want to ensure that the user provides valid data before submitting the form:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">FormWithValidation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>formData<span class="token punctuation">,</span> setFormData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>formErrors<span class="token punctuation">,</span> setFormErrors<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleInputChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Update form data</span></span>
<span class="line">    <span class="token function">setFormData</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span>formData<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">:</span> value<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Perform validation</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&quot;firstName&quot;</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">===</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setFormErrors</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">...</span>formErrors<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&quot;First name is required.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&quot;lastName&quot;</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">===</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setFormErrors</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">...</span>formErrors<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&quot;Last name is required.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&quot;email&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\S+@\\S+.\\S+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setFormErrors</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">...</span>formErrors<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&quot;Invalid email address.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Clear validation errors if input is valid</span></span>
<span class="line">      <span class="token function">setFormErrors</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">...</span>formErrors<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Perform validation before submitting the form</span></span>
<span class="line">    <span class="token keyword">const</span> validationErrors <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">errors<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>formData<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        errors<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span></span>
<span class="line">          name<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is required.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&quot;email&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\S+@\\S+.\\S+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>formData<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        errors<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Invalid email address.&quot;</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> errors<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Update form errors</span></span>
<span class="line">    <span class="token function">setFormErrors</span><span class="token punctuation">(</span>validationErrors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Check if there are any validation errors</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>validationErrors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> error <span class="token operator">===</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Perform custom business logic or submit the form</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Form submitted successfully!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Form Data:&quot;</span><span class="token punctuation">,</span> formData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Form validation failed. Please check the errors.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        First Name:</span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span></span>
<span class="line">          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span></span>
<span class="line">          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>firstName<span class="token punctuation">&quot;</span></span></span>
<span class="line">          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>formData<span class="token punctuation">.</span>firstName<span class="token punctuation">}</span></span></span>
<span class="line">          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleInputChange<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>error<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>formErrors<span class="token punctuation">.</span>firstName<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Last Name:</span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span></span>
<span class="line">          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span></span>
<span class="line">          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lastName<span class="token punctuation">&quot;</span></span></span>
<span class="line">          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>formData<span class="token punctuation">.</span>lastName<span class="token punctuation">}</span></span></span>
<span class="line">          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleInputChange<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>error<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>formErrors<span class="token punctuation">.</span>lastName<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Email:</span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span></span>
<span class="line">          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span></span>
<span class="line">          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span></span>
<span class="line">          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>formData<span class="token punctuation">.</span>email<span class="token punctuation">}</span></span></span>
<span class="line">          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleInputChange<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>error<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>formErrors<span class="token punctuation">.</span>email<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Submit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> FormWithValidation<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The outcome of the code above will work like so:</p><figure><img src="`+w+'" alt="Advanced Example Using Onclick In React For Form Validation Logic" tabindex="0" loading="lazy"><figcaption>Advanced Example Using Onclick In React For Form Validation Logic</figcaption></figure><p>In this example, we introduce the <code>formErrors</code> state to keep track of validation errors for each input field.</p><p>Meanwhile, the <code>handleInputChange</code> function is responsible for updating the form data, performing validation, and updating the error state accordingly. Also, the <code>handleSubmit</code> function checks if there are any validation errors before submitting the form or performing custom business logic.</p><p>This enhanced form demonstrates how to incorporate validation logic into your React components using <code>onClick</code>, ensuring user inputs meet specified criteria before submission.</p><hr><h2 id="what-are-synthetic-events-in-react" tabindex="-1"><a class="header-anchor" href="#what-are-synthetic-events-in-react"><span>What are synthetic events in React?</span></a></h2>',18)),s("p",null,[t(l,{to:"/blog.logrocket.com/getting-started-react-synthetic-event.html"},{default:e(()=>n[41]||(n[41]=[s("strong",null,"React implements a synthetic events system",-1)])),_:1,__:[41]}),n[42]||(n[42]=a(" that brings consistency and high performance to React apps and interfaces. It achieves consistency by normalizing events so that they have the same properties across different browsers and platforms."))]),n[65]||(n[65]=s("p",null,[a("A synthetic event is a cross-browser wrapper around the browserâ€™s native event. It has the same interface as the browserâ€™s native event, including "),s("code",null,"stopPropagation()"),a(" and "),s("code",null,"preventDefault()"),a(", except the events work identically across all browsers.")],-1)),n[66]||(n[66]=s("p",null,"Meanwhile, synthetic events achieve high performance by automatically using event delegation. In actuality, React doesnâ€™t attach event handlers to the nodes themselves. Instead, a single event listener is attached to the root of the document. When an event is fired, React maps it to the appropriate component element.",-1)),n[67]||(n[67]=s("hr",null,null,-1)),n[68]||(n[68]=s("h2",{id:"react-event-listeners",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#react-event-listeners"},[s("span",null,"React event listeners")])],-1)),s("p",null,[n[44]||(n[44]=a("To ")),s("a",A,[t(i,{icon:"fas fa-globe"}),n[43]||(n[43]=a("listen to events in React"))]),n[45]||(n[45]=a(", add the ")),n[46]||(n[46]=s("code",null,"onClick",-1)),n[47]||(n[47]=a(" attribute â€” which is the event handler â€” to the target element. This specifies the function to be executed when that element is clicked, as shown below:"))]),n[69]||(n[69]=o(`<div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">ShowAlertComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">showAlert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m an alert&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>showAlert<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Show alert</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> ShowAlertComponent<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the example above, the <code>onClick</code> attribute is set to the <code>showAlert</code> function as the event target, which displays the alert message <code>I&#39;m an alert</code> when the button is clicked.</p><hr><h2 id="handling-events-in-react-components" tabindex="-1"><a class="header-anchor" href="#handling-events-in-react-components"><span>Handling events in React components</span></a></h2><p>There are several ways to handle events in functional React components. Weâ€™ll go over five of them here.</p><h3 id="call-an-inline-function-in-an-onclick-event-handler" tabindex="-1"><a class="header-anchor" href="#call-an-inline-function-in-an-onclick-event-handler"><span>Call an inline function in an <code>onClick</code> event handler</span></a></h3><p>Inline functions allow you to write code for event handling directly in JSX. See the example below:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Say Hello</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is commonly used to avoid the extra function declaration outside the JSX. However, it can be less readable and harder to maintain if the content of the inline function is too much.</p><h3 id="update-the-state-inside-an-onclick-event-handler" tabindex="-1"><a class="header-anchor" href="#update-the-state-inside-an-onclick-event-handler"><span>Update the state inside an <code>onClick</code> event handler</span></a></h3><p>Letâ€™s say your React application requires you to update the local state in an <code>onClick</code> event handler. Hereâ€™s how to do that:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Increment</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Decrement</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the example above, the value of <code>useState</code> is modified by the <code>Increment</code> and <code>Decrement</code> buttons, which have the <code>setCount</code> updater function inside the <code>onClick</code> event handler.</p><h3 id="call-multiple-functions-in-an-onclick-event-handler" tabindex="-1"><a class="header-anchor" href="#call-multiple-functions-in-an-onclick-event-handler"><span>Call multiple functions in an <code>onClick</code> event handler</span></a></h3><p>The <code>onClick</code> event handler also allows you to call multiple functions:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span></span>
<span class="line">        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Say Hello and Increment</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the code block above, clicking the button increments the local state and alerts a message. Both actions are executed by separate functions in the <code>onClick</code> event handler.</p><h3 id="pass-a-parameter-to-an-onclick-event-handler" tabindex="-1"><a class="header-anchor" href="#pass-a-parameter-to-an-onclick-event-handler"><span>Pass a parameter to an <code>onClick</code> event handler</span></a></h3><p>Another common use case for event handlers is passing a parameter to a function so it can be used later. For example:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span></span>
<span class="line">      <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">&quot;Yomi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      Say Hello</span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, the <code>sayHello</code> function accepts a name as a parameter, which is then used to customize the alert message. In this case, the function accepts the name <code>Yomi</code> so that when clicked, the button displays <code>Hello, Yomi!</code> as its message.</p><h3 id="use-synthetic-events-directly-inside-an-onclick-event-handler" tabindex="-1"><a class="header-anchor" href="#use-synthetic-events-directly-inside-an-onclick-event-handler"><span>Use synthetic events directly inside an <code>onClick</code> event handler</span></a></h3><p>You can also use synthetic events directly inside an <code>onClick</code> event handler. In the example below, the buttonâ€™s value is retrieved via <code>e.target.value</code> and then used to alert a message:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Hello!<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      Say Hello</span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="event-delegation-in-react" tabindex="-1"><a class="header-anchor" href="#event-delegation-in-react"><span>Event delegation in React</span></a></h2><p>Event delegation is a powerful technique in React that allows you to manage events efficiently, particularly in applications with a large number of dynamic elements. Instead of attaching event listeners to each element, you can delegate the handling of events to a common ancestor.</p><p>This approach not only optimizes performance but also simplifies event management, especially in scenarios where elements are added or removed dynamically.</p><p>Consider the following example where a list of items is rendered dynamically, and you want to handle a click event on any list item:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">ItemList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> itemId <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>itemId<span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Clicked item with ID: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>itemId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;Item 1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;Item 2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;Item 3&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> ItemList<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, a single-click event listener is attached to the <code>&lt;ul&gt;</code> element, the common ancestor of all list items.</p><p>Event delegation is especially beneficial when dealing with dynamically generated content or when you want to avoid attaching multiple listeners to individual elements, contributing to a more efficient and scalable React application.</p><hr><h2 id="custom-components-and-events-in-react" tabindex="-1"><a class="header-anchor" href="#custom-components-and-events-in-react"><span>Custom components and events in React</span></a></h2><p>When it comes to events in React, only DOM elements are allowed to have event handlers. Take the example of a component called <code>CustomButton</code> with an <code>onClick</code> event. This button wouldnâ€™t respond to clicks because of the reason above.</p>`,35)),s("p",null,[n[49]||(n[49]=a("So how do we handle event handling for ")),t(l,{to:"/blog.logrocket.com/build-react-custom-component-library-theme-ui.html"},{default:e(()=>n[48]||(n[48]=[s("strong",null,"custom components in React",-1)])),_:1,__:[48]}),n[50]||(n[50]=a("? By rendering a DOM element inside the ")),n[51]||(n[51]=s("code",null,"CustomButton",-1)),n[52]||(n[52]=a(" component and passing the ")),n[53]||(n[53]=s("code",null,"onClick",-1)),n[54]||(n[54]=a(" prop into it."))]),n[70]||(n[70]=o(`<p>Our <code>CustomButton</code> is essentially a pass-through for the click event:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">CustomButton</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> onPress <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onPress<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      Click on me</span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleEvent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;I was clicked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CustomButton</span></span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleEvent<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the example above, the <code>CustomButton</code> component is passed a prop of <code>onPress</code>, which then gets passed into the <code>onClick</code> of the <code>button</code>.</p><hr><h2 id="identifying-component-bound-event-listeners" tabindex="-1"><a class="header-anchor" href="#identifying-component-bound-event-listeners"><span>Identifying component-bound event listeners</span></a></h2><p>In the event (no pun intended) that you need to check the event listener bound to a component or attached to an element â€” particularly with event delegation, where events are attached indirectly â€” there are several techniques to consider.</p><p>The most common and straightforward approach is to use the browserâ€™s DevTools methods. However, due to Reactâ€™s use of synthetic events, these methods might produce slightly different results. This leaves us with the option of using an event inspection approach that combines inline event handlers, such as <code>onClick</code> and <code>onMouseEnter</code>, with programmatic logging of the event details.</p>`,7)),s("p",null,[n[56]||(n[56]=a("Suppose we want to inspect the events of a button element within a component. We can use any of the event handlers mentioned above or, better still, the ")),t(l,{to:"/blog.logrocket.com/creating-react-context-menu.html"},{default:e(()=>n[55]||(n[55]=[s("strong",null,[s("code",null,"onContextMenu")],-1)])),_:1,__:[55]}),n[57]||(n[57]=a(" event to trigger a method such as the following:"))]),n[71]||(n[71]=o(`<div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleEventLog</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> eventInfo <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">type</span><span class="token operator">:</span> event<span class="token punctuation">.</span>type<span class="token punctuation">,</span></span>
<span class="line">      <span class="token comment">// React synthetic event properties</span></span>
<span class="line">      <span class="token literal-property property">nativeEvent</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">type</span><span class="token operator">:</span> event<span class="token punctuation">.</span>nativeEvent<span class="token punctuation">.</span>type<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">target</span><span class="token operator">:</span> event<span class="token punctuation">.</span>nativeEvent<span class="token punctuation">.</span>target<span class="token operator">?.</span>tagName<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">currentTarget</span><span class="token operator">:</span> event<span class="token punctuation">.</span>nativeEvent<span class="token punctuation">.</span>currentTarget<span class="token operator">?.</span>tagName</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token comment">// React event properties</span></span>
<span class="line">      <span class="token literal-property property">target</span><span class="token operator">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">currentTarget</span><span class="token operator">:</span> event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>tagName</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Event Details:&#39;</span><span class="token punctuation">,</span> eventInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Button element</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onContextMenu</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleDetailedEvent<span class="token punctuation">}</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    Inspect Events </span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>handleEventLog</code> function will extract properties from both React synthetic events and native browser events and create an <code>eventInfo</code> object containing nested details such as the event type, the target elementâ€™s tag, and the current target elementâ€™s tag.</p><p>The buttonâ€™s event details log will look similar to this:</p><figure><img src="`+x+'" alt="The Buttonâ€™s Event Details Log" tabindex="0" loading="lazy"><figcaption>The Buttonâ€™s Event Details Log</figcaption></figure><p>Because this captures any event attached to the element, the results will be consistent for other events:</p><figure><img src="'+C+'" alt="Event Results" tabindex="0" loading="lazy"><figcaption>Event Results</figcaption></figure>',6)),s("p",null,[n[59]||(n[59]=a("This approach is particularly useful when events are delegated to a common ancestor that isnâ€™t directly visible, or in the case of ")),t(l,{to:"/blog.logrocket.com/deep-dive-into-event-bubbling-and-capturing.html"},{default:e(()=>n[58]||(n[58]=[s("strong",null,"event bubbling",-1)])),_:1,__:[58]}),n[60]||(n[60]=a("."))]),n[72]||(n[72]=o(`<p>The event inspection function is so versatile that we can also use it to check additional information about the element being inspected.</p><p>For example, say you want to get the ID of a clicked element with an <code>onClick</code> handler or another event. Youâ€™d simply add an <code>id</code> property to the <code>eventInfo</code> object, and set its value to <code>event.target.id</code> like so:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> eventInfo <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line">  <span class="token comment">// React synthetic event properties</span></span>
<span class="line">  <span class="token literal-property property">nativeEvent</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// React event properties</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line">  <span class="token literal-property property">id</span><span class="token operator">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will log the buttonâ€™s <code>id</code> alongside other relevant event information:</p><figure><img src="`+j+`" alt="Button ID And Other Relevant Information" tabindex="0" loading="lazy"><figcaption>Button ID And Other Relevant Information</figcaption></figure><hr><h2 id="type-checking-in-react-with-typescript" tabindex="-1"><a class="header-anchor" href="#type-checking-in-react-with-typescript"><span>Type-checking in React with TypeScript</span></a></h2><p>TypeScriptâ€™s static typing brings an extra layer of confidence to React development by catching potential issues during compile time. With event handlers, we can define precise types, ensuring a more robust codebase.</p><p>Letâ€™s change our <code>ItemList</code> component into a TypeScript component:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> MouseEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">ListItem</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">id</span><span class="token operator">:</span> number<span class="token punctuation">;</span></span>
<span class="line">  <span class="token literal-property property">text</span><span class="token operator">:</span> string<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">ItemList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> MouseEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLUListElement</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">) =&gt; </span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLLIElement<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> itemId <span class="token operator">=</span> target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>itemId<span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Clicked item with ID: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>itemId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token plain-text">;</span>
<span class="line"></span>
<span class="line">  const items: ListItem[] = [</span>
<span class="line">    </span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;Item 1&quot;</span> <span class="token punctuation">}</span><span class="token plain-text">,</span>
<span class="line">    </span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;Item 2&quot;</span> <span class="token punctuation">}</span><span class="token plain-text">,</span>
<span class="line">    </span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;Item 3&quot;</span> <span class="token punctuation">}</span><span class="token plain-text">,</span>
<span class="line">  ];</span>
<span class="line"></span>
<span class="line">  return (</span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">  );</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line">export default ItemList;</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, TypeScriptâ€™s <code>MouseEvent&lt;HTMLUListElement&gt;</code> type annotation ensures that the <code>event</code> parameter in <code>handleClick</code> is of the correct type. This type safety extends to accessing properties like <code>dataset.itemId</code> on the target element.</p><p>By employing TypeScript for type checking, you can catch potential issues related to event handling at compile time, leading to a more maintainable and robust React application.</p><p>This approach enhances code readability and reduces the likelihood of runtime errors, contributing to a smoother development experience.</p><h3 id="specifying-the-onclick-event-handler-type-with-typescript" tabindex="-1"><a class="header-anchor" href="#specifying-the-onclick-event-handler-type-with-typescript"><span>Specifying the <code>onClick</code> event handler type with TypeScript</span></a></h3><p>In React, event handling is important for building interactive user interfaces. When it comes to handling events, TypeScript improves the development experience by introducing static typing, allowing developers to catch potential issues during compile time.</p><p>However, React uses its own event system, which means you canâ€™t directly use standard DOM events. Instead, TypeScript provides a set of predefined event types tailored specifically for React.</p><p>These types mirror their DOM counterparts but are designed to seamlessly integrate with React components. For <code>onClick</code> events in React, the event handler type is <code>MouseEvent</code>.</p><h3 id="using-mouse-events-with-onclick-in-react" tabindex="-1"><a class="header-anchor" href="#using-mouse-events-with-onclick-in-react"><span>Using mouse events with <code>onClick</code> in React</span></a></h3><p>A mouse event is a type of user interaction that occurs when a user interacts with a webpage using a mouse. In web development, mouse events include actions such as clicking, hovering, moving, and releasing mouse buttons.</p><p><code>MouseEvent</code> is a generic mouse event type, while <code>MouseEvent&lt;HTMLButtonElement&gt;</code> is a mouse event specific to a <code>&lt;button&gt;</code> element.</p><p>Hereâ€™s an example:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> MouseEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> MouseEvent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HTMLButtonElement</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">) =&gt; </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Handle the click event for the button</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token plain-text">;</span>
<span class="line"></span>
<span class="line">const MyButton = () =&gt; </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      Click me</span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token plain-text">;</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are additional predefined event types in TypeScript for various React events, such as <code>ChangeEvent</code>, <code>KeyboardEvent</code>, and more. However, the <code>MouseEvent</code> type is the event type that is primarily utilized with the <code>onClick</code> event.</p><p>By leveraging TypeScriptâ€™s static typing, developers can precisely define the expected event structure and properties for the <code>onClick</code> handler, ensuring a more robust and error-resistant codebase.</p><hr><h2 id="handling-common-issues-with-onclick-in-react" tabindex="-1"><a class="header-anchor" href="#handling-common-issues-with-onclick-in-react"><span>Handling common issues with <code>onClick</code> in React</span></a></h2><p>While the <code>onClick</code> event in React is a fundamental aspect of handling user interactions, developers often encounter common issues that can lead to errors and unexpected behavior. Letâ€™s explore some of these issues and provide potential solutions:</p><h3 id="event-bubbling" tabindex="-1"><a class="header-anchor" href="#event-bubbling"><span>Event bubbling</span></a></h3><p>When you have nested elements with their own <code>onClick</code> handlers, the events may bubble up, triggering multiple handlers unintentionally.</p><p>As a solution, you can use the <code>stopPropagation</code> method to prevent the event from propagating to parent elements:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// Your click handling logic</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="this-binding-issues" tabindex="-1"><a class="header-anchor" href="#this-binding-issues"><span><code>this</code> binding issues</span></a></h3><p>If <code>this</code> is not properly bound in class components or when using functions, it can lead to <code>undefined</code> method errors. You can ensure proper binding using arrow functions or explicitly binding <code>this</code> in class components:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token comment">// Using arrow function in class component</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Your click handling logic</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Explicitly binding \`this\` in class component</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Your click handling logic</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="async-state-updates" tabindex="-1"><a class="header-anchor" href="#async-state-updates"><span>Async state updates</span></a></h3><p>Updating state asynchronously within an <code>onClick</code> handler may lead to unexpected state values. To resolve this, use the functional form of <code>setState</code> when the new state depends on the previous state:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Async state update</span></span>
<span class="line">  <span class="token comment">// Incorrect way:</span></span>
<span class="line">  <span class="token comment">// setState({ count: count + 1 });</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Correct way:</span></span>
<span class="line">  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prevState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> prevState<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="memory-leaks" tabindex="-1"><a class="header-anchor" href="#memory-leaks"><span>Memory leaks</span></a></h3><p>Not cleaning up event listeners or subscriptions in components can lead to memory leaks. Use cleanup mechanisms like the <code>useEffect</code> cleanup function or <code>componentWillUnmount</code> in class components to unsubscribe or remove event listeners:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Your click handling logic</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Cleanup: Remove the event listener</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="onclick-performance-issues" tabindex="-1"><a class="header-anchor" href="#onclick-performance-issues"><span><code>onClick</code> performance issues</span></a></h3><p>Having complex or unnecessary operations within an <code>onClick</code> handler can impact performance. Mitigate performance issues by optimizing your click handlers, and consider debouncing or throttling when necessary:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Optimize and perform necessary operations</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Debouncing example with lodash</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> debounce <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> debouncedClickHandler <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>handleClick<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>debouncedClickHandler<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me&lt;/button&amp;gt;</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Addressing these common issues ensures a smoother <code>onClick</code> handling experience in your React applications. By understanding these challenges and applying appropriate solutions, developers can enhance the reliability and performance of their user interfaces.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Event handlers determine what action should be taken when an event occurs. The <code>onClick</code> event is used to listen for click events on DOM elements.</p><p>In this guide, we reviewed some common use cases of the <code>onClick</code> event handler in functional components, such as updating the state, calling multiple functions, and using synthetic events.</p><p>We also addressed how the <code>onClick</code> event handler works in custom components, and some common issues developers may face, like event bubbling, <code>this</code> binding problems, async state updates, memory leaks, and performance concerns.</p><p>Lastly, we looked at how to specify and add event handler types with TypeScript to event handlers.</p><p>Whether youâ€™re a beginner or an experienced developer, this guide serves as a valuable resource for navigating the intricacies of Reactâ€™s <code>onClick</code> event handling.</p>`,51)),h(" TODO: add ARTICLE CARD "),t(u,r(d({title:"React onClick event handlers: A complete guide",desc:"This guide covers Reactâ€™s onClick event handler, including information about event listening, synthetic events, custom events, and more.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-onclick-event-handlers-guide.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const N=m(q,[["render",M]]),B=JSON.parse('{"path":"/blog.logrocket.com/react-onclick-event-handlers-guide.html","title":"React onClick event handlers: A complete guide","lang":"en-US","frontmatter":{"lang":"en-US","title":"React onClick event handlers: A complete guide","description":"Article(s) > React onClick event handlers: A complete guide","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React onClick event handlers: A complete guide\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-onclick-event-handlers-guide/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-onclick-event-handlers-guide/Form-validation-onClick.webp\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-onclick-event-handlers-guide/button-event-log-details.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-onclick-event-handlers-guide/event-results.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-onclick-event-handlers-guide/button-id-and-other-information.png\\"],\\"datePublished\\":\\"2024-11-26T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yomi Eluwande\\",\\"url\\":\\"https://blog.logrocket.com/author/yeluwande/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-onclick-event-handlers-guide.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"React onClick event handlers: A complete guide"}],["meta",{"property":"og:description","content":"Article(s) > React onClick event handlers: A complete guide"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-onclick-event-handlers-guide/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-onclick-event-handlers-guide/banner.png"}],["meta",{"name":"twitter:image:alt","content":"React onClick event handlers: A complete guide"}],["meta",{"property":"article:author","content":"Yomi Eluwande"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-26T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > React onClick event handlers: A complete guide"},{"property":"og:description","content":"React onClick event handlers: A complete guide"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-onclick-event-handlers-guide.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2024-11-26T00:00:00.000Z","isOriginal":false,"author":[{"name":"Yomi Eluwande","url":"https://blog.logrocket.com/author/yeluwande/"}],"cover":"/assets/image/blog.logrocket.com/react-onclick-event-handlers-guide/banner.png"},"git":{},"readingTime":{"minutes":12.66,"words":3799},"filePathRelative":"blog.logrocket.com/react-onclick-event-handlers-guide.md","copyright":{"author":"Yomi Eluwande"}}');export{N as comp,B as data};
