import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as a,b as k,a as g,t as v,n as l,g as u,w as t,r as c,o as h,e as p}from"./app-BVguHYKu.js";const b={},f={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},j={class:"hint-container info"};function _(r,n){const i=c("VPCard"),e=c("router-link"),o=c("SiteInfo");return h(),m("div",null,[s("h1",f,[s("a",y,[s("span",null,v(r.$frontmatter.title)+" 관련",1)])]),a(i,l(u({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",w,[s("ul",null,[s("li",null,[a(e,{to:"#꼭-비동기를-사용해야-할까"},{default:t(()=>n[0]||(n[0]=[p("꼭 비동기를 사용해야 할까?")])),_:1,__:[0]}),s("ul",null,[s("li",null,[a(e,{to:"#_1-싱글-스레드와-멀티-스레드"},{default:t(()=>n[1]||(n[1]=[p("1. 싱글 스레드와 멀티 스레드")])),_:1,__:[1]})]),s("li",null,[a(e,{to:"#_2-자바스크립트에서-작업을-비동기로-처리해야-하는-이유"},{default:t(()=>n[2]||(n[2]=[p("2. 자바스크립트에서 작업을 비동기로 처리해야 하는 이유")])),_:1,__:[2]})])])]),s("li",null,[a(e,{to:"#settimeout"},{default:t(()=>n[3]||(n[3]=[p("setTimeout")])),_:1,__:[3]}),s("ul",null,[s("li",null,[a(e,{to:"#_1-메서드-살펴보기"},{default:t(()=>n[4]||(n[4]=[p("1. 메서드 살펴보기")])),_:1,__:[4]})])])]),s("li",null,[a(e,{to:"#프로미스-객체-간단하게-살펴보기"},{default:t(()=>n[5]||(n[5]=[p("프로미스 객체 간단하게 살펴보기")])),_:1,__:[5]}),s("ul",null,[s("li",null,[a(e,{to:"#_1-생성-및-사용법"},{default:t(()=>n[6]||(n[6]=[p("1. 생성 및 사용법")])),_:1,__:[6]})]),s("li",null,[a(e,{to:"#_2-resolve와-reject"},{default:t(()=>n[7]||(n[7]=[p("2. resolve와 reject")])),_:1,__:[7]})])])]),s("li",null,[a(e,{to:"#마치며"},{default:t(()=>n[8]||(n[8]=[p("마치며")])),_:1,__:[8]})])])]),n[10]||(n[10]=s("hr",null,null,-1)),a(o,{name:"한 번에 이해하는 자바스크립트 비동기 프로그래밍",desc:"자바스크립트를 사용하다 보면 ‘비동기’라는 개념을 자주 접하게 됩니다. 비동기 처리 개념을 쉽게 이해하려면, 동기(Synchronous)와 비동기(Asynchronous)의 차이를 먼저 알아야 합니다. 그리고 자바스크립트에서 비동기를 처리하는 여러 방법, setTimeout, Promise, async/await 등에 대해 살펴보면, 왜 비동기가 필요한지 그리고 비동기를 어떻게 활용해야 하는지 감이 오기 시작할 겁니다. 이번 글에서는 비동기의 기초부터 시작해, 비동기 처리의 핵심 개념과 기본적인 구현 방법에 대해 살펴보겠습니다.",url:"https://yozm.wishket.com/magazine/detail/3034/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/3034/20250203-img1.png"}),n[11]||(n[11]=k(`<p>자바스크립트를 사용하다 보면 ‘비동기’라는 개념을 자주 접하게 됩니다. 특히 API를 호출하거나, 시간이 걸리는 작업을 처리할 때 비동기는 꼭 필요한 기능이죠. 하지만 처음 접하면 이해하기 어려운 부분이 많아, “이거 대체 왜 이렇게 동작하지?”라는 의문이 들기도 합니다.</p><p>비동기 처리 개념을 쉽게 이해하려면, 동기(Synchronous)와 비동기(Asynchronous)의 차이를 먼저 알아야 합니다. 그리고 자바스크립트에서 비동기를 처리하는 여러 방법, setTimeout, Promise, async/await 등에 대해 살펴보면, 왜 비동기가 필요한지 그리고 비동기를 어떻게 활용해야 하는지 감이 오기 시작할 겁니다.</p><p>이번 글에서는 비동기의 기초부터 시작해, 비동기 처리의 핵심 개념과 기본적인 구현 방법에 대해 살펴보겠습니다.</p><hr><h2 id="꼭-비동기를-사용해야-할까" tabindex="-1"><a class="header-anchor" href="#꼭-비동기를-사용해야-할까"><span>꼭 비동기를 사용해야 할까?</span></a></h2><p>자바스크립트에서 비동기를 사용해야 하는 이유는 무엇일까요? 이를 이해하기 위해 먼저 동기와 비동기의 차이를 살펴보고, 자바스크립트가 왜 비동기 처리를 필요로하는지 알아보겠습니다. 먼저, 동기 방식으로 실행되는 코드를 살펴보겠습니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;작업 1 시작&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;작업 2 시작&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;작업 3 시작&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위와 같은 코드를 실행하면 우리 모두가 알고 있는 것처럼, 코드가 위에서 아래로, 순서대로 실행되기 때문에 “작업 1 시작”, “작업 2 시작”, “작업 3 시작”이 출력됩니다. 이렇게 코드가 위에서 아래로 차례대로 실행되는 방식이 바로 “동기 처리”입니다.</p><p>하지만 만약 시간이 오래 걸리는 작업(서버에서 데이터 가져오기, 파일 읽기 등)이 있다면 어떻게 될까요? 아래 코드를 통해 살펴보겠습니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;작업 1 시작&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5초 동안 멈추는 함수(예시)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;작업 2 시작&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;작업 3 시작&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위의 코드가 실행되면, <code>sleep(5000)</code> 함수가 실행되는 5초 동안은 아무런 작업도 할 수 없겠죠. 즉, 작업 2와 작업 3이 실행되지 않고, 5초 동안 프로그램이 멈추게 됩니다. 이렇게 동기 처리의 단점은 한 작업이 끝나야만, 다음 작업이 실행되기 때문에 실행 시간이 오래 걸리는 작업이 있으면 전체적인 코드의 실행이 지연된다는 점입니다.</p><p>그렇다면 비동기 방식으로 실행하면 어떻게 달라질까요?</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;작업 1 시작&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;작업 2 시작&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5초 후 실행</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;작업 3 시작&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위의 코드를 실행하면, “작업 1 시작”, “작업 3 시작”, 그리고 5초 후에 “작업 2 시작”이 출력됩니다. 비동기 처리는 <code>setTimeout</code>과 같은 비동기 함수를 사용해 긴 작업을 기다리는 동안 다른 작업을 먼저 실행할 수 있도록 도와줍니다. 즉, <code>setTimeout</code> 함수가 실행된 후 5초를 기다리는 동안, 다음 코드인 “작업 3 시작”이 먼저 실행되는 것이죠.</p><p>이를 바탕으로 비동기와 동기 방식의 차이를 그림으로 나타내 보면, 다음과 같습니다.</p><figure><img src="https://wishket.com/media/news/3034/20250203-img1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이처럼 비동기 처리를 사용하면 시간이 오래 걸리는 작업이 있어도, 전체 코드 실행이 중간에 멈추지 않고 원활하게 진행될 수 있습니다. 그럼 이제 자바스크립트가 왜 기본적으로 동기 방식이 아니라, 비동기 방식을 필요로 하는지 더 깊이 배워보겠습니다.</p><h3 id="_1-싱글-스레드와-멀티-스레드" tabindex="-1"><a class="header-anchor" href="#_1-싱글-스레드와-멀티-스레드"><span>1. 싱글 스레드와 멀티 스레드</span></a></h3><p>자바스크립트는 기본적으로 싱글 스레드(Single Thread)를 기반으로 동작하는 언어입니다. 스레드는 어떠한 프로그램 내에서, 특히 프로세스 내에서 실행되는 흐름의 단위를 의미하기 때문에, 싱글 스레드란 하나의 스레드에서 작업을 처리하는 방식을 말합니다. 즉, 하나의 코드가 실행되는 동안 다른 코드는 기다려야 하는 것이죠.</p><p>다시 말해 싱글 스레드는 CPU가 한 번에 하나의 작업만 수행할 수 있는 방식으로, 그림으로 나타내면 다음과 같습니다.</p><figure><img src="https://wishket.com/media/news/3034/20250203-img2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>반면, 멀티 스레드(Multi Thread) 환경에서는 여러 개의 작업을 동시에 실행할 수 있습니다. 멀티 스레드 방식은 여러 작업을 병렬적으로 실행할 수 있기 때문에, 대기 시간이 줄어들고 프로그램이 더욱 효율적으로 동작할 수 있습니다.</p><figure><img src="https://wishket.com/media/news/3034/20250203-img3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>이렇게 싱글 스레드와 멀티 스레드를 비교해서 보면, 멀티 스레드 방식이 싱글 스레드보다 효율적인 것처럼 보이는데, 자바스크립트는 왜 기본적으로 싱글 스레드일까요?</p><p>웹 브라우저에서 실행되는 자바스크립트는 주로 UI를 조작하고 이벤트를 처리하는 역할을 하기 때문에, 여러 개의 스레드가 동시에 DOM을 변경하면 충돌이 발생할 가능성이 큽니다. 따라서 이를 방지하기 위해 자바스크립트는 싱글 스레드 방식을 유지하면서도 비동기 처리를 통해 멀티 태스킹처럼 동작할 수 있도록 설계되었습니다.</p><h3 id="_2-자바스크립트에서-작업을-비동기로-처리해야-하는-이유" tabindex="-1"><a class="header-anchor" href="#_2-자바스크립트에서-작업을-비동기로-처리해야-하는-이유"><span>2. 자바스크립트에서 작업을 비동기로 처리해야 하는 이유</span></a></h3><p>동기 방식에서는 코드가 위에서 아래로 순차적으로 실행되지만, 실행 시간이 오래 걸리는 작업(서버에서 데이터 가져오기, 파일 읽기 등)이 있다면, 전체적인 코드 실행이 지연됩니다.</p><figure><img src="https://wishket.com/media/news/3034/20250203-img4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>코드의 실행 순서가 위와 같다고 가정해 볼게요. 동기적으로 실행될 때는, 가장 오래 걸리는 B 작업이 실행 완료될 때까지, 그 이후의 작업들이 실행되지 않고 중단됩니다.</p><figure><img src="https://wishket.com/media/news/3034/20250203-img5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>즉, 위의 그림과 같이 이미지 정보를 받아오기 전까지는 화면에 텍스트와 같은 요소들이 표시되지 않고, 상호작용 또한 이루어지지 않습니다. 이러한 상황이 발생하면, 사용자들은 웹 사이트에 오류가 발생했다고 느끼겠죠.</p><figure><img src="https://wishket.com/media/news/3034/20250203-img6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>반면, 위의 그림처럼 이를 비동기적으로 처리한다면 각각의 작업들이 완료되는 것을 기다리지 않고 작업이 처리되는 순서대로 요소들이 화면에 나타납니다. 따라서 시간이 오래 걸리는 작업이 있더라도 전체적인 코드의 실행이 중단되지 않고 원활하게 진행될 수 있습니다. 화면에 로딩 화면이 나타난 2초 후에 텍스트가 먼저 보이고, 그다음 가장 오래 걸리는 이미지가 4초 후에 나타나죠. 그럼 이제 본격적으로 작업을 비동기로 처리하는 코드에 대해 배워볼게요.</p><hr><h2 id="settimeout" tabindex="-1"><a class="header-anchor" href="#settimeout"><span><code>setTimeout</code></span></a></h2><p>자바스크립트에서 비동기 처리를 이해하는 가장 기본적인 방법 중 하나는 바로 <code>setTimeout</code> 함수를 사용하는 것입니다. 이 함수는 일정 시간이 지난 후에 특정 코드를 실행할 수 있도록 도와주는데요, 비동기 실행을 이해할 수 있는 가장 쉬운 방법이기 때문에 비동기 프로그래밍을 처음 접하는 사람들에게 유용한 개념입니다.</p><h3 id="_1-메서드-살펴보기" tabindex="-1"><a class="header-anchor" href="#_1-메서드-살펴보기"><span>1. 메서드 살펴보기</span></a></h3><p><code>setTimeout</code>을 활용하면, 코드의 실행을 특정 시간 동안 지연할 수 있습니다. 즉, <code>setTimeout</code>을 사용하면 현재 실행 중인 코드의 흐름을 방해하지 않으면서도, 일정 시간이 지난 후 특정 로직을 실행할 수 있습니다.</p><p><code>setTimeout</code> 함수의 기본적인 문법은 다음과 같습니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>여기서 callback은 지연 시간이 끝난 이후 실행될 함수를, <code>delayTime</code>은 밀리초 단위의 지연 시간을 의미합니다. 이제 본격적으로 <code>setTimeout</code> 함수를 사용해서 작업을 비동기로 처리해 보겠습니다.</p><div class="hint-container tip"><p class="hint-container-title">사용 예시</p><p>3초 후에 “3초 후 실행”이라는 메시지를 출력하는 코드를 함께 작성해 볼게요.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;시작&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;3초 후 실행&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;종료&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위의 코드를 보면, <code>setTimeout</code> 함수의 <code>callback</code> 함수로는 <code>console.log(“3초 후 실행”);</code>을, <code>delayTime</code>으로는 3,000ms를 전달했기 때문에, 제일 먼저 “시작”이라는 메시지가 출력되고 그다음으로는 “종료” 메시지가 출력되며, 마지막으로 코드 실행 3초 후에 “3초 후 실행”이라는 메시지가 출력됩니다. 이처럼 <code>setTimeout</code> 함수를 활용하면 코드 실행 흐름을 지연시키지 않으면서도, 비동기적으로 특정 시점에 원하는 작업을 수행할 수 있습니다.</p></div><hr><h2 id="프로미스-객체-간단하게-살펴보기" tabindex="-1"><a class="header-anchor" href="#프로미스-객체-간단하게-살펴보기"><span>프로미스 객체 간단하게 살펴보기</span></a></h2><p>setTimeout과 같은 콜백 기반의 비동기 처리는 간단한 작업에서는 유용하지만, 콜백 지옥(Callback Hell) 문제를 일으킬 수 있습니다. 자바스크립트에는 이러한 문제를 해결하면서, 조금 더 구조적인 방식으로 비동기 코드를 관리할 수 있는 프로미스(Promise)라는 객체가 있습니다.</p><p>비동기는 이전 작업의 처리가 완료될 때까지 기다리지 않고, 기본적으로는 다음 작업을 병렬적으로 처리하는 방식이기 때문에, 비동기 처리 작업은 항상 작업 처리의 성공 여부에 따라 함수를 다르게 호출해야 한다는 특징이 있습니다.</p><p>이때 프로미스 객체는 비동기 작업의 성공 또는 실패를 나눠서 처리할 수 있게 해주고, 비동기 작업이 성공적으로 완료된 경우에는 결괏값을 반환하고, 실패하면 오류를 처리할 수 있도록 도와줍니다. 이번 글에서는 프로미스 객체에 대한 자세한 내용보다는 어떻게 생성하고 사용하는지, 그리고 프로미스 객체의 동작 방식에 대해서만 간단하게 살펴보겠습니다.</p><h3 id="_1-생성-및-사용법" tabindex="-1"><a class="header-anchor" href="#_1-생성-및-사용법"><span>1. 생성 및 사용법</span></a></h3><p>프로미스 객체는 new 키워드와 생성자를 사용해서 생성할 수 있습니다. 프로미스 객체는 객체 생성 시, 인수로 executor라는 실행 함수를 전달하고, 실행 함수에는 매개변수로 resolve와 reject라는 콜백 함수를 전달합니다. 코드로 살펴봅시다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">executor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//코드</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Promise{&lt;pending&gt;}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위의 코드에서 <code>executor</code> 실행 함수는 프로미스 객체의 생성자에 반드시 전달해야 하는 함수로, 프로미스 객체가 생성될 때 자동으로 실행되는 함수입니다. 프로미스 객체가 생성됨과 동시에 <code>executor</code> 함수가 실행되고, <code>executor</code>에서 원하는 작업이 처리됩니다.</p><p>비동기는 이전 작업의 처리가 완료될 때까지 기다리지 않고, 다음 작업을 병렬적으로 처리하는 방식이기 때문에 비동기 처리 작업은 항상 작업 처리의 성공 여부에 따라 함수를 다르게 호출해야한다는 특징이 있는데요. 조금 더 자세히 살펴볼게요.</p><h3 id="_2-resolve와-reject" tabindex="-1"><a class="header-anchor" href="#_2-resolve와-reject"><span>2. <code>resolve</code>와 <code>reject</code></span></a></h3><p>프로미스 객체의 <code>executor</code>는 작업 처리의 성공 여부에 따라 성공했을 땐 <code>resolve</code>를, 실패했을 땐 <code>reject</code>를 호출합니다. 생성자를 통해 생성된 프로미스 객체는 <code>state</code>와 <code>result</code>라는 프로퍼티를 갖습니다. <code>resolve</code>와 <code>reject</code> 함수는 어떻게 동작하는 함수인지 살펴보고, 작업 처리의 성공 여부에 따라 <code>state</code>와 <code>result</code> 프로퍼티 값이 어떻게 변경되는지 알아보겠습니다.</p><figure><img src="https://wishket.com/media/news/3034/20250203-img7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>프로미스 객체가 생성되면, 바로 <code>executor</code> 함수가 실행되고, 이때 <code>state</code> 값은 pending, <code>result</code> 값은 <code>undefined</code>가 할당됩니다. 이후 만약 특정 작업이 성공해서 <code>resolve</code> 함수가 호출되면, <code>state</code>는 <code>fulfilled</code>의 값을 갖고, <code>result</code>는 <code>resolve</code> 함수에 전달된 value의 값을 갖습니다.</p><p>반대로 특정 작업이 실패해서 <code>reject</code> 함수가 호출된다면 <code>state</code>는 <code>rejected</code>, 즉, 실패를 나타내는 값이 그리고 <code>result</code>에는 <code>error</code>가 전달됩니다. 실제로 3초 후에 “성공”을 전달하는 비동기 함수를 <code>resolve</code>를 사용해 작성해 보고, 오류가 발생했을 때는 “실패”를 전달하는 코드를 <code>reject</code>를 사용해서 작성해 봅시다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">executor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;성공&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;실패&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>특정 작업을 3초 뒤에 수행해야 하므로, 실행 함수 <code>executor</code> 내부에는 <code>setTimeout</code> 메서드를 작성하고, <code>delayTime</code>으로 3,000ms를 전달했습니다. 그리고 <code>setTimeout</code> 함수의 내부에 <code>resolve</code> 함수를 사용해서 “성공”을 출력하고, <code>reject</code> 함수를 사용해서 “실패”를 출력한 다음, 프로미스 생성자 함수를 사용해서 프로미스 객체를 생성하고, <code>promise</code> 변수에 할당해 주었습니다.</p><p>그럼 이번에는 프로미스 객체를 사용한 비동기 작업의 결과를 출력해 볼까요? <code>resolve</code>와 <code>reject</code> 함수에 전달된 값을 출력하는 코드는 다음과 같이 작성할 수 있습니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">executor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;성공&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;실패&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이처럼 프로미스 객체에는 <code>then()</code>이라는 메서드를 사용할 수 있는데요. <code>then</code> 메서드를 사용하면 프로미스 객체의 메서드로 콜백함수를 전달할 수 있습니다. <code>then</code> 메서드의 첫 번째 인수는 프로미스 객체가 <code>fulfilled</code> 상태일 때 실행되는 함수이고, 두 번째 인수는 프로미스 객체가 <code>rejected</code> 상태일 때 실행되는 함수입니다.</p><p>따라서 위의 코드를 실행하고 비동기 작업이 성공한다면, 첫 번째 인수로 전달된 함수를 통해 ‘성공’이 출력되고, 비동기 작업이 실패된다면 ‘실패’라는 값이 출력되겠네요. 비동기 작업은 순차적인 작업이 아니기 때문에 성공할 수도, 실패할 수도 있습니다. 따라서 이렇게 프로미스 객체를 활용하면 비동기 작업을 더 효과적으로 다룰 수 있습니다.</p><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>글을 마무리하면서 비동기 프로그래밍에 대해 다시 한번 정리해 보겠습니다. 비동기 프로그래밍은 자바스크립트의 동작 방식에서 중요한 역할을 합니다. 기본적으로 자바스크립트는 싱글 스레드에서 실행되기 때문에 동기 방식으로만 코드를 실행하면, 시간이 오래 걸리는 작업이 전체 프로그램의 흐름을 멈추게 할 수 있습니다. 이를 해결하기 위해 비동기 처리를 활용하면 코드가 멈추지 않고, 자연스럽게 다음 작업을 수행할 수 있어 사용자에게 좋은 경험을 제공할 수 있습니다.</p><p>또한 이번 글에서는 <code>setTimeout</code>과 프로미스 객체를 이용한 비동기 처리 방법을 살펴봤는데요. <code>setTimeout</code>은 특정 시간 후에 작업을 실행할 수 있도록 도와주는 가장 간단한 방법이며, 프로미스 객체는 비동기 작업의 완료 및 실패 상태를 관리하는 더욱 강력한 도구입니다. 이러한 개념을 이해하면, 다음 글에서 다루게 될 프로미스 객체의 “콜백 지옥” 문제를 해결할 수 있고, async/await과 같은 최신 비동기 방식도 쉽게 익힐 수 있습니다.</p><p>아직 자바스크립트의 비동기에 대해 전부 다루지 않았기 때문에, 다음 글에서 프로미스 객체에 대해 조금 더 깊이 배워보려고 합니다. 콜백 지옥이란 무엇인지, 그리고 async/await 문법과 함께 API를 호출하는 방법까지 더 자세히 살펴보겠습니다.</p>`,68)),s("div",j,[n[9]||(n[9]=s("p",{class:"hint-container-title"},"참고",-1)),a(o,{name:"프라미스",desc:"본인을 아주 유명한 가수라고 가정해 봅시다. 그리고 탑 가수인 본인이 밤, 낮으로 다음 싱글 앨범이 언제 나오는지 물어보는 팬들을 상대해야 한다고 해 봅시다.",url:"https://ko.javascript.info/promise-basics/",logo:"https://ko.javascript.info/img/favicon/favicon.png",preview:"https://ko.javascript.info/img/site_preview_en_1200x630.png"}),a(o,{name:"웹 프론트엔드를 위한 자바스크립트 첫걸음 강의 | 효빈 Hyobin - 인프런",desc:"효빈 Hyobin | 웹 프론트엔드 개발자를 희망한다면? 친절하고 꼼꼼한 자바스크립트 강의로 첫걸음을 내딛어보세요✨",url:"https://inf.run/7AC37",logo:"https://cdn.inflearn.com/dist/favicon.ico",preview:"https://cdn.inflearn.com/public/courses/330840/cover/f9911b37-ceb4-4b9b-a7eb-987e65926db7/330840.png"}),a(o,{name:"Introducing asynchronous JavaScript - Learn web development | MDN",desc:"In this article, we'll explain what asynchronous programming is, why we need it, and briefly discuss some of the ways asynchronous functions have historically been implemented in JavaScript.",url:"https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Async_JS/Introducing/",logo:"https://developer.mozilla.org/favicon-48x48.bc390275e955dacb2e65.png",preview:"https://developer.mozilla.org/mdn-social-share.d893525a4fb5fb1f67a2.png"})]),g(" TODO: add ARTICLE CARD "),a(i,l(u({title:"한 번에 이해하는 자바스크립트 비동기 프로그래밍",desc:"자바스크립트를 사용하다 보면 ‘비동기’라는 개념을 자주 접하게 됩니다. 비동기 처리 개념을 쉽게 이해하려면, 동기(Synchronous)와 비동기(Asynchronous)의 차이를 먼저 알아야 합니다. 그리고 자바스크립트에서 비동기를 처리하는 여러 방법, setTimeout, Promise, async/await 등에 대해 살펴보면, 왜 비동기가 필요한지 그리고 비동기를 어떻게 활용해야 하는지 감이 오기 시작할 겁니다. 이번 글에서는 비동기의 기초부터 시작해, 비동기 처리의 핵심 개념과 기본적인 구현 방법에 대해 살펴보겠습니다.",link:"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3034.html",logo:"https://yozm.wishket.com/favicon.ico",background:"rgba(84,7,224,0.2)"})),null,16)])}const z=d(b,[["render",_]]),q=JSON.parse('{"path":"/yozm.wishket.com/3034.html","title":"한 번에 이해하는 자바스크립트 비동기 프로그래밍","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"한 번에 이해하는 자바스크립트 비동기 프로그래밍","description":"Article(s) > 한 번에 이해하는 자바스크립트 비동기 프로그래밍","icon":"fa-brands fa-js","category":["JavaScript","Article(s)"],"tag":["blog","yozm.wishket.com","js","javascript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"한 번에 이해하는 자바스크립트 비동기 프로그래밍\\",\\"image\\":[\\"https://wishket.com/media/news/3034/20250203-img1.png\\",\\"https://wishket.com/media/news/3034/20250203-img2.png\\",\\"https://wishket.com/media/news/3034/20250203-img3.png\\",\\"https://wishket.com/media/news/3034/20250203-img4.png\\",\\"https://wishket.com/media/news/3034/20250203-img5.png\\",\\"https://wishket.com/media/news/3034/20250203-img6.png\\",\\"https://wishket.com/media/news/3034/20250203-img7.png\\"],\\"datePublished\\":\\"2025-03-26T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"효빈\\",\\"url\\":\\"https://yozm.wishket.com/magazine/@hbin12212/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3034.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"한 번에 이해하는 자바스크립트 비동기 프로그래밍"}],["meta",{"property":"og:description","content":"Article(s) > 한 번에 이해하는 자바스크립트 비동기 프로그래밍"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/3034/20250203-img1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/3034/20250203-img1.png"}],["meta",{"name":"twitter:image:alt","content":"한 번에 이해하는 자바스크립트 비동기 프로그래밍"}],["meta",{"property":"article:author","content":"효빈"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-03-26T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 한 번에 이해하는 자바스크립트 비동기 프로그래밍"},{"property":"og:description","content":"한 번에 이해하는 자바스크립트 비동기 프로그래밍"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3034.html"}]],"prev":"/programming/js/articles/README.md","date":"2025-03-26T00:00:00.000Z","isOriginal":false,"author":[{"name":"효빈","url":"https://yozm.wishket.com/magazine/@hbin12212/"}],"cover":"https://yozm.wishket.com/media/news/3034/20250203-img1.png"},"git":{},"readingTime":{"minutes":1.79,"words":537},"filePathRelative":"yozm.wishket.com/3034.md","copyright":{"author":"효빈"}}');export{z as comp,q as data};
