import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as f,d as t,f as o,b as c,a as b,t as w,n as l,g as d,w as s,e as n,r as h,o as y}from"./app-BVguHYKu.js";const k={},v={id:"frontmatter-title-관련",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},I={href:"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/139#html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://developer.chrome.com/blog/new-in-chrome-102/#more",target:"_blank",rel:"noopener noreferrer"},T={href:"https://webkit.org/blog/17216/release-notes-for-safari-technology-preview-225/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://developer.chrome.com/docs/css-ui/hidden-until-found",target:"_blank",rel:"noopener noreferrer"},A={href:"https://css-tricks.com/almanac/pseudo-selectors/d/details-content/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://webkit.org/blog/16458/announcing-interop-2025/#details-element",target:"_blank",rel:"noopener noreferrer"},D={href:"https://webkit.org/blog/17216/release-notes-for-safari-technology-preview-225/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://knowler.dev/blog/polyfilling-hidden-until-found",target:"_blank",rel:"noopener noreferrer"},L={href:"https://schepp.dev/posts/rethinking-find-in-page-accessibility-making-hidden-text-work-for-everyone/",target:"_blank",rel:"noopener noreferrer"},E={class:"hint-container info"};function q(u,e){const a=h("VPCard"),r=h("router-link"),p=h("SiteInfo"),i=h("VPIcon"),g=h("RouteLink");return y(),f("div",null,[t("h1",v,[t("a",C,[t("span",null,w(u.$frontmatter.title)+" 관련",1)])]),o(a,l(d({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t("nav",x,[t("ul",null,[t("li",null,[o(r,{to:"#it-makes-hidden-content-findable"},{default:s(()=>e[0]||(e[0]=[n("It makes hidden content “findable”")])),_:1,__:[0]})]),t("li",null,[o(r,{to:"#it-s-content-visibility-hidden-under-the-hood"},{default:s(()=>e[1]||(e[1]=[n("It’s content-visibility: hidden under the hood")])),_:1,__:[1]})]),t("li",null,[o(r,{to:"#why-we-need-this"},{default:s(()=>e[2]||(e[2]=[n("Why we need this")])),_:1,__:[2]})]),t("li",null,[o(r,{to:"#browser-support-and-polyfill"},{default:s(()=>e[3]||(e[3]=[n("Browser support and polyfill")])),_:1,__:[3]})]),t("li",null,[o(r,{to:"#styling"},{default:s(()=>e[4]||(e[4]=[n("Styling")])),_:1,__:[4]})]),t("li",null,[o(r,{to:"#anything-else"},{default:s(()=>e[5]||(e[5]=[n("Anything else?")])),_:1,__:[5]})])])]),e[59]||(e[59]=t("hr",null,null,-1)),o(p,{name:"Covering hidden=until-found",desc:"Short story: Slapping hidden=until-found on an element in HTML enables any hidden content within the element to be findable in the browser with in-page search.",url:"https://css-tricks.com/covering-hiddenuntil-found",logo:"https://css-tricks/favicon.svg",preview:"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/10/in-page-search.jpg"}),t("p",null,[e[9]||(e[9]=n("Filing this in the “Missed First Time Around” category. It popped up in the ")),t("a",I,[o(i,{icon:"fa-brands fa-firefox"}),e[6]||(e[6]=n("Firefox 139 release notes"))]),e[10]||(e[10]=n(" and I was, like, ")),e[11]||(e[11]=t("em",null,"ooo neat",-1)),e[12]||(e[12]=n(". Then I saw ")),t("a",S,[o(i,{icon:"fa-brands fa-chrome"}),e[7]||(e[7]=n("it’s been in Chrome since at least 2022"))]),e[13]||(e[13]=n(". And as I wrote this, ")),t("a",T,[o(i,{icon:"iconfont icon-webkit"}),e[8]||(e[8]=n("it landed in Safari Technology Preview 125"))]),e[14]||(e[14]=n(". So there you have it."))]),e[60]||(e[60]=c(`<p>Turns out there are a few good posts and tutorials about <code>hidden=until-found</code> floating out there, so I thought I’d jot down a few key takeaways for later reference.</p><hr><h2 id="it-makes-hidden-content-findable" tabindex="-1"><a class="header-anchor" href="#it-makes-hidden-content-findable"><span>It makes hidden content “findable”</span></a></h2><p>Short story: Slapping <code>hidden=until-found</code> on an element in HTML enables any hidden content within the element to be findable in the browser with in-page search.</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>until-found<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token comment">&lt;!-- hidden content --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You’ll see, or more accurately <em>not</em> see, that the content is hidden with that in place:</p><p>CodePen Embed Fallback https://codepen.io/geoffgraham/pen/zxvrOoW Default hidden=until-found</p><hr><h2 id="it-s-content-visibility-hidden-under-the-hood" tabindex="-1"><a class="header-anchor" href="#it-s-content-visibility-hidden-under-the-hood"><span>It’s <code>content-visibility: hidden</code> under the hood</span></a></h2><p>The browser takes that as a hint to hide the content and does so by implicitly setting <code>content-visibility: hidden</code> on the element in the user agent styles.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/hidden-until-found-devtools.png?resize=2402%2C1856&amp;ssl=1" alt="Inspecting an element with the attribute in place in Chrome DevTools." tabindex="0" loading="lazy"><figcaption>Inspecting an element with the attribute in place in Chrome DevTools.</figcaption></figure><p>If we do a <kbd>Ctrl</kbd>+<kbd>F</kbd> on the keyboard to activate in-page search and enter a query, then a match reveals the content, highlighting said matched query.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/hidden-tunil-found-match.png?resize=2402%2C1856&amp;ssl=1" alt="Showing a highlighted term on the page for a matched search query." tabindex="0" loading="lazy"><figcaption>Showing a highlighted term on the page for a matched search query.</figcaption></figure><hr><h2 id="why-we-need-this" tabindex="-1"><a class="header-anchor" href="#why-we-need-this"><span>Why we need this</span></a></h2>`,15)),t("p",null,[e[16]||(e[16]=n("That’s what I was asking myself when I started digging into this a little deeper. The most prominent example of it being used is from the ")),t("a",z,[o(i,{icon:"fa-brands fa-chrome"}),e[15]||(e[15]=n("Chrome for Developers docs"))]),e[17]||(e[17]=n(" as a faux-accordion. You know, a series of panels that open and close on click."))]),e[61]||(e[61]=t("p",null,'CodePen Embed Fallback https://codepen.io/web-dot-dev/pen/JjMxmom hidden="until-found" demo',-1)),t("p",null,[e[20]||(e[20]=n("But isn’t that a solved deal now that we have the ")),o(g,{to:"/css-tricks.com/using-styling-the-details-element.html"},{default:s(()=>e[18]||(e[18]=[t("strong",null,[t("code",null,"<details>"),n(" element")],-1)])),_:1,__:[18]}),e[21]||(e[21]=n(" at the ready? May as well use a semantic disclosure widget to, you know, ")),e[22]||(e[22]=t("em",null,"disclose content",-1)),e[23]||(e[23]=n(". Indeed, browsers also set ")),e[24]||(e[24]=t("code",null,"content-visibility: hidden",-1)),e[25]||(e[25]=n(" on the ")),t("a",A,[o(i,{icon:"iconfont icon-css-tricks"}),e[19]||(e[19]=t("code",null,"::details-content",-1))]),e[26]||(e[26]=n(" portion of the element that holds the content."))]),e[62]||(e[62]=t("figure",null,[t("img",{src:"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/details-content-visibility.png?resize=2402%2C1856&ssl=1",alt:"Inspecting the details element's Shadow DOM in Chrome DevTools.",tabindex:"0",loading:"lazy"}),t("figcaption",null,"Inspecting the details element's Shadow DOM in Chrome DevTools.")],-1)),t("p",null,[e[28]||(e[28]=n("I’m pretty sure ")),e[29]||(e[29]=t("code",null,"<details>",-1)),e[30]||(e[30]=n(" was not as widely supported in 2022 as it is today. It’s actually part of ")),t("a",M,[o(i,{icon:"iconfont icon-webkit"}),e[27]||(e[27]=n("Interop 2025"))]),e[31]||(e[31]=n(" and notice that one of the functionalities mentioned is the capability for in-page search. Chrome already supports it. Firefox recently shipped it (ostensibly as part of the ")),e[32]||(e[32]=t("code",null,"hidden=until-found",-1)),e[33]||(e[33]=n(" release). And Safari will presumably get there with Interop 2025. The example from the Chrome for Developers post demonstrates an approach for working around a not-fully-supported ")),e[34]||(e[34]=t("code",null,"<details>",-1)),e[35]||(e[35]=n(" element and now we have it."))]),e[63]||(e[63]=c('<p>So, why <code>hidden=until-closed</code>?</p><p>I don’t know. I’m sure there’s a good use case for hiding content accessibly in some fashion while making it searchable. I just can’t think of it off the top of my head. I mean, we have <code>popover</code> as well, but that takes a different approach with <code>display: none</code> which completely removes the content from in-page search.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/popover-display-none-1024x790.png?resize=1024%2C790&amp;ssl=1" alt="Showing the user agent styles for a popover element in Chrome DevTools." tabindex="0" loading="lazy"><figcaption>Showing the user agent styles for a popover element in Chrome DevTools.</figcaption></figure><hr><h2 id="browser-support-and-polyfill" tabindex="-1"><a class="header-anchor" href="#browser-support-and-polyfill"><span>Browser support and polyfill</span></a></h2>',5)),t("p",null,[e[37]||(e[37]=n("We’ve already established that Chrome and Firefox are on board. Safari is the bigger holdout, but knowing that making the hidden content in ")),e[38]||(e[38]=t("code",null,"<details>",-1)),e[39]||(e[39]=n(" findable is part of Interop 2025 (and Firefox’s corresponding support for it as part of that effort) makes me think it’s around the corner. (Turns out that hunch was correct because ")),t("a",D,[o(i,{icon:"iconfont icon-webkit"}),e[36]||(e[36]=n("it landed in Safari Technology Preview 125"))]),e[40]||(e[40]=n(" after writing this.)"))]),e[64]||(e[64]=t("p",null,[n("In the meantime, though, is it worth using "),t("code",null,"hidden=until-found"),n("? Because if we’re aiming for a consistent cross-browser experience, we’d need to do some sort of swap between "),t("code",null,"content-visibility: hidden"),n(" to hide the content and "),t("code",null,"content-visible: auto"),n(" to reveal it.")],-1)),t("p",null,[e[42]||(e[42]=n("Nathan Knowler ")),t("a",P,[o(i,{icon:"fas fa-globe"}),e[41]||(e[41]=n("expertly explains"))]),e[43]||(e[43]=n(" the conundrum this creates. We can’t set ")),e[44]||(e[44]=t("code",null,"content-visibility: hidden",-1)),e[45]||(e[45]=n(" on something without also removing it from in-page search. The ")),e[46]||(e[46]=t("code",null,"hidden=until-found",-1)),e[47]||(e[47]=n(" attribute works exactly like ")),e[48]||(e[48]=t("code",null,"content-visibility: hidden",-1)),e[49]||(e[49]=n(" but maintains that in-page search still works. In other words, we can’t polyfill the feature with ")),e[50]||(e[50]=t("code",null,"content-visibility",-1)),e[51]||(e[51]=n("."))]),e[65]||(e[65]=c('<p>Thanks, Nathan, for going down the massive rabbit hole and finding a solution that leverages the Shadow DOM to look for the HTML attribute, check support, and revert its properties when needed to accessibly hide the content visually without fully nuking it from being found.</p><hr><h2 id="styling" tabindex="-1"><a class="header-anchor" href="#styling"><span>Styling</span></a></h2><p>Seems like there isn’t much to say about styling something that ain’t visible, but notice that the in-page search feature highlights content that matches the search query.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/search-term-highlight.png?resize=1794%2C1136&amp;ssl=1" alt="Highlighting a single matched search term." tabindex="0" loading="lazy"><figcaption>Highlighting a single matched search term.</figcaption></figure><p>Looks like we may get a new <code>::search-text</code> pseudo that allows us to select the matched query and style the highlight color in the <a href="https://drafts.csswg.org/css-pseudo-4/#selectordef-search-text" target="_blank" rel="noopener noreferrer">CSS Pseudo-Elements Module Level 4 specification</a>, which is currently in Editor’s Draft status at the time I’m writing this.</p><p>What about multiple matches? The current selection gets a different highlight from subsequent matches.</p><figure><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/Screenshot-2025-07-18-at-8.57.43 AM.png?resize=1720%2C1024&amp;ssl=1" alt="Highlighting two matches for a search query. The first highlight is orange and the second highlight is yellow." tabindex="0" loading="lazy"><figcaption>Highlighting two matches for a search query. The first highlight is orange and the second highlight is yellow.</figcaption></figure><p>We’ll presumably, according to the spec, be able to combine <code>::search-text</code> with the <code>:current</code> pseudo-class to target the current match: <code>::search-text:current</code>.</p><p>If you’re thinking we might get to mix-and-match <code>::search-text</code> with the corresponding <code>:past</code> and <code>:future</code> pseudo-classes, I’m afraid the spec says nay. But it does not shut the door on it completely:</p><blockquote><p>The <code>:past</code> and <code>:future</code> pseudo-classes are reserved for analogous use in the future. Any unsupported combination of these pseudo-classes with <code>::search-text</code> <em>must</em> be treated as invalid.</p></blockquote><hr><h2 id="anything-else" tabindex="-1"><a class="header-anchor" href="#anything-else"><span>Anything else?</span></a></h2>',13)),t("p",null,[e[53]||(e[53]=n("Not really, but I do like the note at the end of Christian Shaefer’s ")),t("a",L,[o(i,{icon:"fas fa-globe"}),e[52]||(e[52]=n("“Rethinking Find-in-Page Accessibility”"))]),e[54]||(e[54]=n(" post that says consideration needs to go into what happens ")),e[55]||(e[55]=t("em",null,"after",-1)),e[56]||(e[56]=n(" a search query matches content on the page. Currently, the content remains visible even after in-page search is closed or canceled. Perhaps we’ll need some other HTML hint for that."))]),t("div",E,[e[57]||(e[57]=t("p",{class:"hint-container-title"},"Links",-1)),e[58]||(e[58]=t("p",null,"A dump of things I found and used while researching this:",-1)),o(a,l(d({title:"Making collapsed content accessible with hidden=until-found  |  CSS and UI  |  Chrome for Developers",desc:"How this new attribute value can ensure that content within accordion sections can be found and linked to.",link:"https://developer.chrome.com/docs/css-ui/hidden-until-found/",logo:"https://gstatic.com/devrel-devsite/prod/v07a69f77eed922d40ebfb742cd5d20eb11c7d4f7b172d68471db97f8f3b9f965/chrome/images/favicon.png",background:"rgba(26,115,232,0.2)"})),null,16),o(a,l(d({title:"Polyfilling hidden until-found - Nathan Knowler",desc:"Exploring what it takes to polyfill the until-found value of the hidden attribute.",link:"https://knowler.dev/blog/polyfilling-hidden-until-found/",logo:"https://knowler.dev/favicon.ico",background:"rgba(137,220,192,0.2)"})),null,16),o(p,{name:"Hidden until found | James McGrath",desc:"",url:"https://jamesmcgrath.net/blog/hidden-until-found/",logo:"https://jamesmcgrath.net/favicons/favicon.ico",preview:"https://jamesmcgrath.net/images/avatar.png"}),o(p,{name:"display-locking/explainers/hidden-content-explainer.md at main · WICG/display-locking",desc:"A repository for the Display Locking spec. Contribute to WICG/display-locking development by creating an account on GitHub.",url:"https://github.com/WICG/display-locking/blob/main/explainers/hidden-content-explainer.md/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/70493b7e26686a5c1929c036261def8caa8813fb3a67925c460ea5d45ab4932e/WICG/display-locking"}),o(p,{name:"Announcing Interop 2025",desc:"Exciting news for web developers, designers, and browser enthusiasts alike — Interop 2025 is here, continuing the mission of improving cross-browser interoperability.",url:"https://webkit.org/blog/16458/announcing-interop-2025//",logo:"https://webkit.org/favicon.ico",preview:"https://webkit.org/wp-content/uploads/Interop-2024-experimental-end.png"}),o(a,l(d({title:"1761043 - Implement hidden=until-found attribute and beforematch event",desc:"RESOLVED (jjaschke) in Core - DOM: Core & HTML. Last updated 2025-05-21.",link:"https://bugzilla.mozilla.org/show_bug.cgi?id=1761043/",logo:"https://bugzilla.mozilla.org/extensions/BMO/web/images/favicon.svg",background:"rgba(27,106,184,0.2)"})),null,16),o(p,{name:"[HTML/WebAPI] Implement hidden=until-found attribute and beforematch event · Issue #39306 · mdn/content",desc:"Acceptance criteria The listed features are documented sufficiently on MDN BCD is updated Interactive example and data repos are updated if appropriate The content has been reviewed as needed For f...",url:"https://github.com/mdn/content/issues/39306/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/b60f7b0219282efa13e1dc5d4ef5fde7152f659211674e2feba6428a7b394ec0/mdn/content/issues/39306"}),o(a,l(d({title:"CSS Pseudo-Elements Module Level 4",desc:"",link:"https://drafts.csswg.org/css-pseudo-4/#selectordef-search-text/",logo:"https://drafts.csswg.org/csslogo.ico",background:"rgba(118,168,248,0.2)"})),null,16)]),b(" TODO: add ARTICLE CARD "),o(a,l(d({title:"Covering hidden=until-found",desc:"Short story: Slapping hidden=until-found on an element in HTML enables any hidden content within the element to be findable in the browser with in-page search.",link:"https://chanhi2000.github.io/bookshelf/css-tricks.com/covering-hiddenuntil-found.html",logo:"https://css-tricks/favicon.svg",background:"rgba(17,17,17,0.2)"})),null,16)])}const F=m(k,[["render",q]]),G=JSON.parse('{"path":"/css-tricks.com/covering-hiddenuntil-found.html","title":"Covering hidden=until-found","lang":"en-US","frontmatter":{"lang":"en-US","title":"Covering hidden=until-found","description":"Article(s) > Covering hidden=until-found","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","css-tricks.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Covering hidden=until-found\\",\\"image\\":[\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/hidden-until-found-devtools.png?resize=2402%2C1856&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/hidden-tunil-found-match.png?resize=2402%2C1856&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/details-content-visibility.png?resize=2402%2C1856&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/popover-display-none-1024x790.png?resize=1024%2C790&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/search-term-highlight.png?resize=1794%2C1136&ssl=1\\",\\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/Screenshot-2025-07-18-at-8.57.43%E2%80%AFAM.png?resize=1720%2C1024&ssl=1\\"],\\"datePublished\\":\\"2025-08-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Geoff Graham\\",\\"url\\":\\"https://css-tricks.com/author/geoffgraham/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/covering-hiddenuntil-found.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Covering hidden=until-found"}],["meta",{"property":"og:description","content":"Article(s) > Covering hidden=until-found"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/10/in-page-search.jpg"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/10/in-page-search.jpg"}],["meta",{"name":"twitter:image:alt","content":"Covering hidden=until-found"}],["meta",{"property":"article:author","content":"Geoff Graham"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"css-tricks.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-08-15T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Covering hidden=until-found"},{"property":"og:description","content":"Covering hidden=until-found"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/css-tricks.com/covering-hiddenuntil-found.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-08-15T00:00:00.000Z","isOriginal":false,"author":[{"name":"Geoff Graham","url":"https://css-tricks.com/author/geoffgraham/"}],"cover":"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/10/in-page-search.jpg"},"git":{},"readingTime":{"minutes":5.95,"words":1784},"filePathRelative":"css-tricks.com/covering-hiddenuntil-found.md","copyright":{"author":"Geoff Graham"}}');export{F as comp,G as data};
