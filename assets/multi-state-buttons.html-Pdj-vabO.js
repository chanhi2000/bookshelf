import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as a,b as u,a as g,t as b,n as d,g as m,w as e,r as l,o as v,e as o}from"./app-BVguHYKu.js";const f={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"};function C(i,n){const c=l("VPCard"),t=l("router-link"),p=l("SiteInfo"),r=l("CodePen");return v(),k("div",null,[s("h1",y,[s("a",w,[s("span",null,b(i.$frontmatter.title)+" 관련",1)])]),a(c,d(m({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",S,[s("ul",null,[s("li",null,[a(t,{to:"#the-plan"},{default:e(()=>n[0]||(n[0]=[o("The Plan")])),_:1,__:[0]})]),s("li",null,[a(t,{to:"#basic-demo"},{default:e(()=>n[1]||(n[1]=[o("Basic Demo")])),_:1,__:[1]})]),s("li",null,[a(t,{to:"#usage-warning"},{default:e(()=>n[2]||(n[2]=[o("Usage Warning")])),_:1,__:[2]})]),s("li",null,[a(t,{to:"#advanced-demo"},{default:e(()=>n[3]||(n[3]=[o("Advanced Demo")])),_:1,__:[3]})]),s("li",null,[a(t,{to:"#further-reading"},{default:e(()=>n[4]||(n[4]=[o("Further Reading")])),_:1,__:[4]})])])]),n[5]||(n[5]=s("hr",null,null,-1)),a(p,{name:"Multi-State Buttons",desc:"Typically, buttons are either pressed or they aren't. But as long as you handle it accessibly, you can make a group of radio inputs look like a multi-state button with some CSS trickery.",url:"https://frontendmasters.com/blog/multi-state-buttons/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/4677"}),n[6]||(n[6]=u('<p>There are traditional ways for a user to pick one-option-from-many. The classics beeing a <code>&lt;select&gt;</code> or a group of <code>&lt;input type=&quot;radio&quot;&gt;</code> elements.</p><p>But it’s nice to have more options. Sometimes when a user must choose one option from many, it’s nice to have a single element that switches between available option on a quick click. A practical example of such a singular UI is a tag control that transitions through various states on each click. Any given tag in an interface like this could be be in <em>three</em> different states:</p><ol><li>Disregarded in search results (default state)</li><li>Search results <strong>must include</strong> tag</li><li>Search results <strong>must exclude</strong> tag</li></ol><p>Here’s an image example of such a UI:</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/s_2B6564E11D1E51AC46777C57EB87ECE5CDB861925A4A306B5E22E667A57CB6A7_1732966272424_tagcloud.png?resize=1024%2C632&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="the-plan" tabindex="-1"><a class="header-anchor" href="#the-plan"><span>The Plan</span></a></h2><p>We’ll be coding such a control using a set of <em>stacked</em> HTML radio buttons.</p><p>The UI’s functionality — jumping through different states on each click — is implemented by a bit of CSS-only trickery. We’ll be changing the value of the CSS property<code>pointer-events</code>in the radio buttons when one is selected.</p><p>The<code>pointer-events</code>property when applied to HTML elements determines whether a pointer event, such as a <code>click</code> or <code>hover</code> — through mouse pointer, touch event, stylus usage, etc — occurs on an element or not. By default, the events do occur in the elements, which is equivalent to setting <code>pointer-events: auto;</code>.</p><p>If<code>pointer-events: none;</code> is set, that element won’t receive any pointer events. This is useful for stacked or nested elements, where we might want a top element to ignore pointer events so that elements below it become the target.</p><p>The same will be used to create a multi-state control in this article.</p><hr><h2 id="basic-demo" tabindex="-1"><a class="header-anchor" href="#basic-demo"><span>Basic Demo</span></a></h2><p>Below is a basic control we’ll be coding towards to demonstrate the technique. I’ll also include a Pen for the movie tags demo, shown before, at the end.</p>',15)),a(r,{user:"rpsthecoder","slug-hash":"yLmwMww",title:"Muti-state control (three states)","default-tab":["css","result"],theme:i.$isDarkmode?"dark":"light"},null,8,["theme"]),n[7]||(n[7]=u(`<div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>control<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>three<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>radio<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>radio<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    Third state</span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>two<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>radio<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>radio<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    Second state</span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>one<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>radio<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>radio<span class="token punctuation">&quot;</span></span> <span class="token attr-name">checked</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    First state</span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token selector">.control </span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span>
<span class="line">    <span class="token selector">label </span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">width</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span></span>
<span class="line">        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> </span>
<span class="line">        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span>
<span class="line">        <span class="token property">border</span><span class="token punctuation">:</span> 2px solid<span class="token punctuation">;</span></span>
<span class="line">        <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="line">        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span></span>
<span class="line">        <span class="token selector">input </span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token property">appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="line">            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token selector">.one </span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="line">        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>247 248 251<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>199 203 211<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token selector">.two </span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>228 236 248<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>40 68 212<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token selector">.three </span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>250 230 229<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>231 83 61<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In HTML shown above, there are three<code>&lt;input&gt;</code>radio buttons (for three states), which are nested within their respective<code>&lt;label&gt;</code>elements.</p><p>The label elements are stacked over each other within the parent<code>&lt;div&gt;</code>element (<code>.control</code>), sharing the same dimensions and style. The default appearance of the radio buttons is removed. Naturally, the label elements will trigger the check/uncheck of the radio buttons within them.</p><p>Each label is colored differently in CSS. By default, the topmost label (<code>.one</code>) is checked on page load for having the<code>checked</code>HTML attribute. In CSS, its<code>pointer-events</code>property is set to<code>none</code>.</p><p>Which means when we click the control, the topmost label isn’t the target anymore. Instead, it clicks the label below it and checks its radio button. Since only one radio button in a group with the same name attribute can be checked at a time, when the bottom label is checked, its radio button unchecks the topmost label’s. Consequently, the control transitions from its first to second state.</p><p>That’s the basis of how we’re coding a multi-state control. Here’s how it’s programmed in the CSS for all the labels and, consequently, their radio buttons:</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss"><pre><code class="language-scss"><span class="line"><span class="token property">label</span><span class="token punctuation">:</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">:</span>checked<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token selector">~ label </span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    &amp;<span class="token punctuation">:</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token punctuation">:</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">:</span>first-child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="line">        <span class="token selector">~ label </span><span class="token punctuation">{</span> <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    &amp;<span class="token punctuation">:</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token punctuation">:</span>first-child<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token selector">~ label </span><span class="token punctuation">{</span> <span class="token property">pointer-events</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When a label’s radio button is checked, the following labels in the source code are hidden with<code>opacity: 0</code>so that it alone is visible to the user.</p><p>If a checked radio button’s label isn’t the first one in the source code (bottom-most on screen), it and the labels after it get<code>pointer-events: none</code>. This means the label underneath it on the screen becomes the target of any following pointer events.</p><p>If the checked radio button’s label is the first one in the source code (bottom-most on screen), all the labels after it get the<code>pointer-events</code>value<code>auto</code>, allowing them to receive future pointer events. This resets the control.</p><p>In a nutshell, when a user selects a state, the following state becomes selectable next by giving the current and all previously selected states<code>pointer-events: none</code>.</p><hr><h2 id="usage-warning" tabindex="-1"><a class="header-anchor" href="#usage-warning"><span>Usage Warning</span></a></h2><p>Although this method is applicable to any number of states, I would recommend limiting it to three for typical user controls like tags, unless it’s a fun game where the user repeatedly clicks the same box and sees something different each time. Additionally, it’s apt to consider whether keyboard navigation is to be supported or not. If it is, it would be more practical to adopt a user experience where users can see all reachable options using the tab and navigation keys, rather than showing a single UI.</p><hr><h2 id="advanced-demo" tabindex="-1"><a class="header-anchor" href="#advanced-demo"><span>Advanced Demo</span></a></h2><p>Below is a prototype for a tag cluster composed of three-state tags designed to filter movie search results based on genres. For instance, if a user wants to filter for comedy movies that are not action films, they can simply click on comedy once to include it and on action twice to exclude it. If you’re curious about how the counts of included and excluded tags are calculated in the demo below, refer to the list under the Further Reading section.</p>`,18)),a(r,{user:"rpsthecoder","slug-hash":"yLmwMZZ",title:"Muti-state control (tag cloud)","default-tab":["css","result"],theme:i.$isDarkmode?"dark":"light"},null,8,["theme"]),n[8]||(n[8]=s("hr",null,null,-1)),n[9]||(n[9]=s("h2",{id:"further-reading",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#further-reading"},[s("span",null,"Further Reading")])],-1)),a(p,{name:"pointer-events - CSS: Cascading Style Sheets | MDN",desc:"The pointer-events CSS property sets under what circumstances (if any) a particular graphic element can become the target of pointer events.",url:"https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events/",logo:"https://developer.mozilla.org/favicon-48x48.bc390275e955dacb2e65.png",preview:"https://developer.mozilla.org/mdn-social-share.d893525a4fb5fb1f67a2.png"}),a(p,{name:"<input type='radio'> - HTML: HyperText Markup Language | MDN",desc:"<input> elements of type radio are generally used in radio groups—collections of radio buttons describing a set of related options.",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio/",logo:"https://developer.mozilla.org/favicon-48x48.bc390275e955dacb2e65.png",preview:"https://developer.mozilla.org/mdn-social-share.d893525a4fb5fb1f67a2.png"}),a(p,{name:"Counting With CSS Counters And CSS Grid | CSS-Tricks",desc:"In this post, we're going to demonstrate how we can use the source order independence of CSS Grid to solve a layout issue that's the result of a source order constraint. Specifically, we're going to look at checkboxes and CSS Counters—two concepts that rely on source order when used together.",url:"https://css-tricks.com/counting-css-counters-css-grid/",logo:"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180&ssl=1",preview:"https://css-tricks.com/wp-json/social-image-generator/v1/image/266050"}),g(" TODO: add ARTICLE CARD "),a(c,d(m({title:"Multi-State Buttons",desc:"Typically, buttons are either pressed or they aren't. But as long as you handle it accessibly, you can make a group of radio inputs look like a multi-state button with some CSS trickery.",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/multi-state-buttons.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const T=h(f,[["render",C]]),x=JSON.parse('{"path":"/frontendmasters.com/multi-state-buttons.html","title":"Multi-State Buttons","lang":"en-US","frontmatter":{"lang":"en-US","title":"Multi-State Buttons","description":"Article(s) > Multi-State Buttons","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","frontendmasters.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Multi-State Buttons\\",\\"image\\":[\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/12/s_2B6564E11D1E51AC46777C57EB87ECE5CDB861925A4A306B5E22E667A57CB6A7_1732966272424_tagcloud.png?resize=1024%2C632&ssl=1\\"],\\"datePublished\\":\\"2024-12-05T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Preethi Sam\\",\\"url\\":\\"https://frontendmasters.com/blog/author/preethisam/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/multi-state-buttons.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Multi-State Buttons"}],["meta",{"property":"og:description","content":"Article(s) > Multi-State Buttons"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/4677"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/4677"}],["meta",{"name":"twitter:image:alt","content":"Multi-State Buttons"}],["meta",{"property":"article:author","content":"Preethi Sam"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-12-05T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Multi-State Buttons"},{"property":"og:description","content":"Multi-State Buttons"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/multi-state-buttons.html"}]],"prev":"/programming/css/articles/README.md","date":"2024-12-05T00:00:00.000Z","isOriginal":false,"author":[{"name":"Preethi Sam","url":"https://frontendmasters.com/blog/author/preethisam/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/4677"},"git":{},"readingTime":{"minutes":4.76,"words":1428},"filePathRelative":"frontendmasters.com/multi-state-buttons.md","copyright":{"author":"Preethi Sam"}}');export{T as comp,x as data};
