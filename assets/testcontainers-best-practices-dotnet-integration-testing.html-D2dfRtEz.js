import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as s,f as t,b as d,a as h,t as y,n as l,g as r,w as e,e as a,r as p,o as b}from"./app-BVguHYKu.js";const f={},w={id:"frontmatter-title-관련",tabindex:"-1"},T={class:"header-anchor",href:"#frontmatter-title-관련"},I={class:"table-of-contents"},C={href:"https://testcontainers.com/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://docker.com/",target:"_blank",rel:"noopener noreferrer"};function A(k,n){const i=p("VPCard"),o=p("router-link"),m=p("SiteInfo"),u=p("VPIcon"),c=p("RouteLink");return b(),v("div",null,[s("h1",w,[s("a",T,[s("span",null,y(k.$frontmatter.title)+" 관련",1)])]),t(i,l(r({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t(i,l(r({title:"Docker > Article(s)",desc:"Article(s)",link:"/devops/docker/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",I,[s("ul",null,[s("li",null,[t(o,{to:"#how-testcontainers-changes-integration-testing"},{default:e(()=>n[0]||(n[0]=[a("How Testcontainers Changes Integration Testing")])),_:1,__:[0]})]),s("li",null,[t(o,{to:"#prerequisites"},{default:e(()=>n[1]||(n[1]=[a("Prerequisites")])),_:1,__:[1]})]),s("li",null,[t(o,{to:"#creating-test-containers"},{default:e(()=>n[2]||(n[2]=[a("Creating Test Containers")])),_:1,__:[2]})]),s("li",null,[t(o,{to:"#pass-configuration-to-your-app"},{default:e(()=>n[3]||(n[3]=[a("Pass Configuration to Your App")])),_:1,__:[3]})]),s("li",null,[t(o,{to:"#share-expensive-setup-with-xunit-collection-fixtures"},{default:e(()=>n[4]||(n[4]=[a("Share Expensive Setup with xUnit Collection Fixtures")])),_:1,__:[4]})]),s("li",null,[t(o,{to:"#utility-methods-for-auth-and-cleanup"},{default:e(()=>n[5]||(n[5]=[a("Utility Methods for Auth and Cleanup")])),_:1,__:[5]})]),s("li",null,[t(o,{to:"#writing-maintainable-integration-tests"},{default:e(()=>n[6]||(n[6]=[a("Writing Maintainable Integration Tests")])),_:1,__:[6]})]),s("li",null,[t(o,{to:"#conclusion"},{default:e(()=>n[7]||(n[7]=[a("Conclusion")])),_:1,__:[7]})])])]),n[23]||(n[23]=s("hr",null,null,-1)),t(m,{name:"Testcontainers Best Practices for .NET Integration Testing",desc:"Integration tests shouldn't rely on external infrastructure—but they also shouldn't mock everything away. In this post, we look at how to use Testcontainers in .NET to spin up real Postgres and Redis instances in your tests, how to manage container lifecycle using IAsyncLifetime, and how to structure your xUnit fixtures for speed and reliability",url:"https://milanjovanovic.tech/blog/testcontainers-best-practices-dotnet-integration-testing",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_148.png"}),n[24]||(n[24]=s("p",null,"Integration tests with Testcontainers are powerful, but they can quickly become a maintenance nightmare if you don't follow the right patterns.",-1)),n[25]||(n[25]=s("p",null,"I've seen teams struggle with flaky tests, slow test suites, and configuration headaches that could have been avoided with better practices from the start.",-1)),s("p",null,[n[9]||(n[9]=a("Today, I'll show you the patterns that make ")),s("a",C,[t(u,{icon:"fas fa-globe"}),n[8]||(n[8]=a("Testcontainers"))]),n[10]||(n[10]=a(" tests reliable, fast, and easy to maintain."))]),n[26]||(n[26]=s("hr",null,null,-1)),n[27]||(n[27]=s("h2",{id:"how-testcontainers-changes-integration-testing",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#how-testcontainers-changes-integration-testing"},[s("span",null,"How Testcontainers Changes Integration Testing")])],-1)),s("p",null,[n[12]||(n[12]=a("Traditional ")),t(c,{to:"/milanjovanovic.tech/testcontainers-integration-testing-using-docker-in-dotnet.html"},{default:e(()=>n[11]||(n[11]=[s("strong",null,"integration tests",-1)])),_:1,__:[11]}),n[13]||(n[13]=a(" often rely on shared test databases or in-memory alternatives that don't match production behavior. You either deal with test pollution between runs or sacrifice realism for speed."))]),s("p",null,[n[15]||(n[15]=a("Testcontainers solves this by spinning up real ")),s("a",x,[t(u,{icon:"fa-brands fa-docker"}),n[14]||(n[14]=a("Docker"))]),n[16]||(n[16]=a(" containers for your dependencies. Your tests run against actual PostgreSQL, Redis, or any other service you use in production. When tests complete, containers are destroyed, giving you a clean slate every time."))]),n[28]||(n[28]=d(`<p>The magic happens through Docker&#39;s API. Testcontainers manages the entire lifecycle: pulling images, starting containers, waiting for readiness, and cleanup. Your test code just needs to know how to connect.</p><hr><h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites"><span>Prerequisites</span></a></h2><p>First, make sure you have the necessary packages:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc<span class="token punctuation">.</span>Testing</span>
<span class="line"><span class="token function">Install-Package</span> Testcontainers<span class="token punctuation">.</span>PostgreSql</span>
<span class="line"><span class="token function">Install-Package</span> Testcontainers<span class="token punctuation">.</span>Redis</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),s("p",null,[n[18]||(n[18]=a("If you want to learn more about the basic setup, check out my article on ")),t(c,{to:"/milanjovanovic.tech/testcontainers-integration-testing-using-docker-in-dotnet.html"},{default:e(()=>n[17]||(n[17]=[s("strong",null,"integrating testing with Testcontainers",-1)])),_:1,__:[17]}),n[19]||(n[19]=a("."))]),n[29]||(n[29]=d(`<hr><h2 id="creating-test-containers" tabindex="-1"><a class="header-anchor" href="#creating-test-containers"><span>Creating Test Containers</span></a></h2><p>Here&#39;s how to set up your containers with proper configuration:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">PostgreSqlContainer</span> _postgresContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PostgreSqlBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">WithImage</span><span class="token punctuation">(</span><span class="token string">&quot;postgres:17&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">WithDatabase</span><span class="token punctuation">(</span><span class="token string">&quot;devhabit&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">WithUsername</span><span class="token punctuation">(</span><span class="token string">&quot;postgres&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">WithPassword</span><span class="token punctuation">(</span><span class="token string">&quot;postgres&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">RedisContainer</span> _redisContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RedisBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">WithImage</span><span class="token punctuation">(</span><span class="token string">&quot;redis:latest&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To start and stop containers cleanly across your test suite, implement <code>IAsyncLifetime</code> in your <code>WebApplicationFactory</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">IntegrationTestWebAppFactory</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">WebApplicationFactory<span class="token punctuation">&lt;</span>Program<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">IAsyncLifetime</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">InitializeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> _postgresContainer<span class="token punctuation">.</span><span class="token function">StartAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">await</span> _redisContainer<span class="token punctuation">.</span><span class="token function">StartAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// Start other dependencies here</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">DisposeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> _postgresContainer<span class="token punctuation">.</span><span class="token function">StopAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">await</span> _redisContainer<span class="token punctuation">.</span><span class="token function">StopAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This ensures containers are ready before tests run and cleaned up afterward. This means no leftover Docker state or race conditions.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>pin your image versions (like <code>postgres:17</code>) to avoid surprises from upstream changes</p></div><p>I learned this the hard way when a minor version update caused my tests to fail unexpectedly.</p><hr><h2 id="pass-configuration-to-your-app" tabindex="-1"><a class="header-anchor" href="#pass-configuration-to-your-app"><span>Pass Configuration to Your App</span></a></h2><p>The biggest mistake I see is hardcoding connection strings. Testcontainers assigns dynamic ports. Don&#39;t hardcode anything.</p><p>Instead, inject values via <code>WebApplicationFactory.ConfigureWebHost</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureWebHost</span><span class="token punctuation">(</span><span class="token class-name">IWebHostBuilder</span> builder<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    builder<span class="token punctuation">.</span><span class="token function">UseSetting</span><span class="token punctuation">(</span><span class="token string">&quot;ConnectionStrings:Database&quot;</span><span class="token punctuation">,</span> _postgresContainer<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    builder<span class="token punctuation">.</span><span class="token function">UseSetting</span><span class="token punctuation">(</span><span class="token string">&quot;ConnectionStrings:Redis&quot;</span><span class="token punctuation">,</span> _redisContainer<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The key is to use the <code>UseSetting</code> method to pass connection strings dynamically. It also avoids any race conditions or conflicts with other tests that might run in parallel.</p><p>This ensures your tests always connect to the right ports, regardless of what Docker assigns.</p><p>There&#39;s no need to remove services from the service collection or manually configure them (contrary to what you might find online). Just set the connection strings, and your application will use them automatically.</p><hr><h2 id="share-expensive-setup-with-xunit-collection-fixtures" tabindex="-1"><a class="header-anchor" href="#share-expensive-setup-with-xunit-collection-fixtures"><span>Share Expensive Setup with xUnit Collection Fixtures</span></a></h2><p>What&#39;s a test fixture? A <strong>fixture</strong> is a shared context for your tests, allowing you to set up expensive resources like databases or message brokers once and reuse them across multiple tests.</p><p>This is where most teams get tripped up. The choice between class and collection fixtures affects both test performance and isolation.</p><p><strong>Class Fixture</strong> - One container per test class:</p><p>Use class fixtures when tests modify global state or when debugging test interactions becomes difficult.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddItemToCartTests</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IClassFixture<span class="token punctuation">&lt;</span>DevHabitWebAppFactory<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">DevHabitWebAppFactory</span> _factory<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">AddItemToCartTests</span><span class="token punctuation">(</span><span class="token class-name">DevHabitWebAppFactory</span> factory<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _factory <span class="token operator">=</span> factory<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Should_ReturnFailure_WhenNotEnoughQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Collection Fixture</strong> - One container shared across multiple test classes:</p><p>Use collection fixtures when your tests don&#39;t modify shared state or when you can reliably clean up between tests.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CollectionDefinition</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>IntegrationTestCollection<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">IntegrationTestCollection</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICollectionFixture<span class="token punctuation">&lt;</span>DevHabitWebAppFactory<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then apply it to your test classes:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Collection</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>IntegrationTestCollection<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddItemToCartTests</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IntegrationTestFixture</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">AddItemToCartTests</span><span class="token punctuation">(</span><span class="token class-name">DevHabitWebAppFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Should_ReturnFailure_WhenNotEnoughQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Guid</span> customerId <span class="token operator">=</span> <span class="token keyword">await</span> Sender<span class="token punctuation">.</span><span class="token function">CreateCustomerAsync</span><span class="token punctuation">(</span>Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AddItemToCartCommand</span><span class="token punctuation">(</span>customerId<span class="token punctuation">,</span> ticketTypeId<span class="token punctuation">,</span> Quantity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Sender<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        result<span class="token punctuation">.</span>Error<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Be</span><span class="token punctuation">(</span>TicketTypeErrors<span class="token punctuation">.</span><span class="token function">NotEnoughQuantity</span><span class="token punctuation">(</span>Quantity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When to use which:</p><ul><li>Class fixtures when you need full isolation between test classes (slower but safer)</li><li>Collection fixtures when test classes don&#39;t interfere with each other (faster but requires discipline)</li></ul><p>With collection fixtures, you have to take care of cleaning up any state that might persist between tests. This could include resetting databases, clearing caches, or removing test data. If you don&#39;t do this, you risk tests affecting each other, leading to flaky results.</p><hr><h2 id="utility-methods-for-auth-and-cleanup" tabindex="-1"><a class="header-anchor" href="#utility-methods-for-auth-and-cleanup"><span>Utility Methods for Auth and Cleanup</span></a></h2><p>Your fixture can expose helpers to simplify test writing:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>HttpClient<span class="token punctuation">&gt;</span></span> <span class="token function">CreateAuthenticatedClientAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">CleanupDatabaseAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These methods can handle authentication setup and database cleanup, so you don&#39;t have to repeat boilerplate code in every test. This lets your test code focus on assertions, not setup.</p><hr><h2 id="writing-maintainable-integration-tests" tabindex="-1"><a class="header-anchor" href="#writing-maintainable-integration-tests"><span>Writing Maintainable Integration Tests</span></a></h2><p>With the infrastructure properly configured, your actual tests should focus on business logic:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Should_ReturnFailure_WhenNotEnoughQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//Arrange</span></span>
<span class="line">    <span class="token class-name">Guid</span> customerId <span class="token operator">=</span> <span class="token keyword">await</span> Sender<span class="token punctuation">.</span><span class="token function">CreateCustomerAsync</span><span class="token punctuation">(</span>Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> eventId <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> ticketTypeId <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">await</span> Sender<span class="token punctuation">.</span><span class="token function">CreateEventWithTicketTypeAsync</span><span class="token punctuation">(</span>eventId<span class="token punctuation">,</span> ticketTypeId<span class="token punctuation">,</span> Quantity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AddItemToCartCommand</span><span class="token punctuation">(</span>customerId<span class="token punctuation">,</span> ticketTypeId<span class="token punctuation">,</span> Quantity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//Act</span></span>
<span class="line">    <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Sender<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//Assert</span></span>
<span class="line">    result<span class="token punctuation">.</span>Error<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Be</span><span class="token punctuation">(</span>TicketTypeErrors<span class="token punctuation">.</span><span class="token function">NotEnoughQuantity</span><span class="token punctuation">(</span>Quantity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how the tests focus on business rules rather than infrastructure concerns. The container complexity is hidden behind well-designed base classes and helper methods. You&#39;re not mocking Postgres or Redis, you&#39;re testing real behavior.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Testcontainers transforms integration testing by giving you the confidence that comes from testing against real dependencies. No more wondering if your in-memory database behavior matches production, or dealing with shared test environments that break when someone else runs their tests.</p><p>Start simple: pick one integration test that currently uses mocks or in-memory databases, and convert it to use Testcontainers. You&#39;ll immediately notice the difference in confidence when that test passes. Then gradually expand to cover your critical business flows.</p>`,46)),s("p",null,[n[21]||(n[21]=a("If you want to learn how to structure your applications for testability from day one, my ")),t(c,{to:"/milanjovanovic.tech/pragmatic-clean-architecture/"},{default:e(()=>n[20]||(n[20]=[s("strong",null,"Pragmatic Clean Architecture",-1)])),_:1,__:[20]}),n[22]||(n[22]=a(" course covers integration testing with Testcontainers alongside domain modeling, API design, and the architectural decisions that make applications maintainable over time."))]),n[30]||(n[30]=s("p",null,"That's all for today.",-1)),n[31]||(n[31]=s("p",null,"See you next week.",-1)),n[32]||(n[32]=s("hr",null,null,-1)),h(" TODO: add ARTICLE CARD "),t(i,l(r({title:"Testcontainers Best Practices for .NET Integration Testing",desc:"Integration tests shouldn't rely on external infrastructure—but they also shouldn't mock everything away. In this post, we look at how to use Testcontainers in .NET to spin up real Postgres and Redis instances in your tests, how to manage container lifecycle using IAsyncLifetime, and how to structure your xUnit fixtures for speed and reliability",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/testcontainers-best-practices-dotnet-integration-testing.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const E=g(f,[["render",A]]),N=JSON.parse('{"path":"/milanjovanovic.tech/testcontainers-best-practices-dotnet-integration-testing.html","title":"Testcontainers Best Practices for .NET Integration Testing","lang":"en-US","frontmatter":{"lang":"en-US","title":"Testcontainers Best Practices for .NET Integration Testing","description":"Article(s) > Testcontainers Best Practices for .NET Integration Testing","icon":"iconfont icon-csharp","category":["C#","DotNet","DevOps","Docker","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet","devops","docker"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Testcontainers Best Practices for .NET Integration Testing\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_148.png\\"],\\"datePublished\\":\\"2025-06-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/testcontainers-best-practices-dotnet-integration-testing.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Testcontainers Best Practices for .NET Integration Testing"}],["meta",{"property":"og:description","content":"Article(s) > Testcontainers Best Practices for .NET Integration Testing"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_148.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_148.png"}],["meta",{"name":"twitter:image:alt","content":"Testcontainers Best Practices for .NET Integration Testing"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-06-28T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Testcontainers Best Practices for .NET Integration Testing"},{"property":"og:description","content":"Testcontainers Best Practices for .NET Integration Testing"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/testcontainers-best-practices-dotnet-integration-testing.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-06-28T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_148.png"},"git":{},"readingTime":{"minutes":4.54,"words":1363},"filePathRelative":"milanjovanovic.tech/testcontainers-best-practices-dotnet-integration-testing.md","copyright":{"author":"Milan Jovanović"}}');export{E as comp,N as data};
