import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as n,f as e,b as l,a as y,t as x,n as m,g as v,w as t,e as s,r as i,o as w}from"./app-BVguHYKu.js";const j="/bookshelf/assets/image/blog.logrocket.com/react-reference-guide-refs-dom/banner.png",R="/bookshelf/assets/image/blog.logrocket.com/react-reference-guide-refs-dom/focus-input-example.webp",A={},I={id:"frontmatter-title-관련",tabindex:"-1"},M={class:"header-anchor",href:"#frontmatter-title-관련"},C={class:"table-of-contents"},T={href:"https://reactjs.org/docs/react-dom.html#finddomnode",target:"_blank",rel:"noopener noreferrer"},D={href:"https://reactjs.org/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/facebook/react/pull/8333#issuecomment-271648615",target:"_blank",rel:"noopener noreferrer"};function q(g,a){const r=i("VPCard"),p=i("router-link"),f=i("SiteInfo"),d=i("Tabs"),k=i("SandPack"),u=i("VPIcon");return w(),b("div",null,[n("h1",I,[n("a",M,[n("span",null,x(g.$frontmatter.title)+" 관련",1)])]),e(r,m(v({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",C,[n("ul",null,[n("li",null,[e(p,{to:"#when-to-use-refs"},{default:t(()=>a[0]||(a[0]=[s("When to use refs")])),_:1,__:[0]})]),n("li",null,[e(p,{to:"#don-t-overuse-refs"},{default:t(()=>a[1]||(a[1]=[s("Don’t overuse refs")])),_:1,__:[1]})]),n("li",null,[e(p,{to:"#creating-refs"},{default:t(()=>a[2]||(a[2]=[s("Creating refs")])),_:1,__:[2]})]),n("li",null,[e(p,{to:"#accessing-refs"},{default:t(()=>a[3]||(a[3]=[s("Accessing refs")])),_:1,__:[3]}),n("ul",null,[n("li",null,[e(p,{to:"#adding-a-ref-to-a-dom-element"},{default:t(()=>a[4]||(a[4]=[s("Adding a ref to a DOM element")])),_:1,__:[4]})]),n("li",null,[e(p,{to:"#adding-a-ref-to-a-class-component"},{default:t(()=>a[5]||(a[5]=[s("Adding a ref to a class component")])),_:1,__:[5]})]),n("li",null,[e(p,{to:"#refs-and-function-components"},{default:t(()=>a[6]||(a[6]=[s("Refs and function components")])),_:1,__:[6]})])])]),n("li",null,[e(p,{to:"#exposing-dom-refs-to-parent-components"},{default:t(()=>a[7]||(a[7]=[s("Exposing DOM refs to parent components")])),_:1,__:[7]})]),n("li",null,[e(p,{to:"#callback-refs"},{default:t(()=>a[8]||(a[8]=[s("Callback refs")])),_:1,__:[8]}),n("ul",null,[n("li",null,[e(p,{to:"#caveats-with-callback-refs"},{default:t(()=>a[9]||(a[9]=[s("Caveats with callback refs")])),_:1,__:[9]})])])]),n("li",null,[e(p,{to:"#legacy-api-string-refs"},{default:t(()=>a[10]||(a[10]=[s("Legacy API: String refs")])),_:1,__:[10]})])])]),a[31]||(a[31]=n("hr",null,null,-1)),e(f,{name:"React Reference Guide: Refs and the DOM",desc:"Refs become necessary when you want to access DOM nodes or React elements created in the render method of your components.",url:"https://blog.logrocket.com/react-reference-guide-refs-dom",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/react-reference-guide-refs-dom/banner.png"}),a[32]||(a[32]=l('<p>The standard way for a parent component to interact with its child elements is via props, e.g., to modify a child, you’d re-render it with new props. That’s not news.</p><figure><img src="'+j+'" alt="React Reference Guide: Refs and the DOM" tabindex="0" loading="lazy"><figcaption>React Reference Guide: Refs and the DOM</figcaption></figure><p>However, what happens when you need to access DOM nodes or React elements created in the render method of your components? Props don’t exactly help you out here.</p><p>Well, this is where refs come in handy.</p><hr><h2 id="when-to-use-refs" tabindex="-1"><a class="header-anchor" href="#when-to-use-refs"><span>When to use refs</span></a></h2><p>The best use cases for refs arise when you’re trying to perform imperative actions such as:</p><ul><li>Managing focus, text selection, or media playback</li><li>Working with imperative animation</li><li>Integrating with third-party DOM libraries</li></ul><p>To build more consistent React apps, you should avoid using refs for anything that can be done declaratively, i.e., via the standard React data flow with state and props. For example, instead of exposing <code>open()</code> and <code>close()</code> methods on a <code>Modal</code> component, pass an <code>isOpen</code> prop and have that managed internally via React state.</p><hr><h2 id="don-t-overuse-refs" tabindex="-1"><a class="header-anchor" href="#don-t-overuse-refs"><span>Don’t overuse refs</span></a></h2><p>When you first encounter refs or are new to React, you may fall into the trap of thinking refs are an easy way to “get things done” in your app. They certainly fit the imperative model you may be used to working with.</p><p>If you find yourself thinking this, take a moment to re-evaluate how such data flow could be resolved via the typical React data flow i.e via state and props.</p><p>Oftentimes, the problem at hand may be solved by just lifting state to a parent component higher in the component tree and passing that state value down to the needed component/element.</p><div class="hint-container note"><p class="hint-container-title">N.B.</p><p>The next sections show examples of how to work with Refs. These examples use <code>React.createRef</code>, the API introduced in React 16.3. If you’re using an earlier version of React, <a href="#callbackrefs">see the section below</a> on using callback refs.</p></div><hr><h2 id="creating-refs" tabindex="-1"><a class="header-anchor" href="#creating-refs"><span>Creating refs</span></a></h2><p>There are two steps to creating ref objects.</p>',18)),e(d,{data:[{id:"1."},{id:"2."}],active:0},{title0:t(({value:o,isActive:c})=>a[11]||(a[11]=[s("1.")])),title1:t(({value:o,isActive:c})=>a[12]||(a[12]=[s("2.")])),tab0:t(({value:o,isActive:c})=>a[13]||(a[13]=[n("p",null,[n("strong",null,[s("Create a ref object using "),n("code",null,"React.createRef")])],-1),n("div",{class:"code-block-with-title"},[n("div",{class:"code-block-title-bar","data-title":"App.jsx"},[n("span",null,"App.jsx")]),n("div",{class:"language-jsx line-numbers-mode","data-highlighter":"prismjs","data-ext":"jsx"},[n("pre",null,[n("code",{class:"language-jsx"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"App"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},[s("React"),n("span",{class:"token punctuation"},"."),s("Component")]),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token comment"},"// see this ")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("myRef "),n("span",{class:"token operator"},"="),s(" React"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createRef"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),n("p",null,[s("You create a ref by invoking the "),n("code",null,"createRef"),s(" object and typically assign it to an instance property, e.g., "),n("code",null,"this.myRef"),s(" as seen in the example above. This is done so that the ref can be referenced throughout the component.")],-1)])),tab1:t(({value:o,isActive:c})=>a[14]||(a[14]=[n("p",null,[n("strong",null,[s("Reference the created "),n("code",null,"ref"),s(" in the render method")])],-1),n("div",{class:"code-block-with-title"},[n("div",{class:"code-block-title-bar","data-title":"App.jsx"},[n("span",null,"App.jsx")]),n("div",{class:"language-jsx line-numbers-mode","data-highlighter":"prismjs","data-ext":"jsx"},[n("pre",null,[n("code",{class:"language-jsx"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"App"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},[s("React"),n("span",{class:"token punctuation"},"."),s("Component")]),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  myRef "),n("span",{class:"token operator"},"="),s(" React"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createRef"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token function"},"render"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"//look here")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"ref"),n("span",{class:"token script language-javascript"},[n("span",{class:"token script-punctuation punctuation"},"="),n("span",{class:"token punctuation"},"{"),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("myRef"),n("span",{class:"token punctuation"},"}")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token plain-text"},"I am a div"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),n("p",null,[s("After creating the ref object, you pass it on to the required element via the special "),n("code",null,"ref"),s(" attribute.")],-1)])),_:1}),a[33]||(a[33]=l(`<hr><h2 id="accessing-refs" tabindex="-1"><a class="header-anchor" href="#accessing-refs"><span>Accessing refs</span></a></h2><p>After passing a ref to an element in the component <code>render</code> method, a reference to the DOM node becomes accessible, as seen below:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> domNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myRef<span class="token punctuation">.</span>current</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Note that the <code>current</code> property is referenced on the created ref object, where <code>this.myRef</code> represents the ref passed to a DOM node via the <code>ref</code> attribute.</p><p>Look at the code block above. What value does the variable <code>domNode</code> contain? Well, that depends on the type of node the <code>ref</code> attribute is passed to — it’s always different.</p><p>Here are the different options:</p>`,7)),e(d,{data:[{id:"1."},{id:"2."},{id:"3."}],active:0},{title0:t(({value:o,isActive:c})=>a[15]||(a[15]=[s("1.")])),title1:t(({value:o,isActive:c})=>a[16]||(a[16]=[s("2.")])),title2:t(({value:o,isActive:c})=>a[17]||(a[17]=[s("3.")])),tab0:t(({value:o,isActive:c})=>a[18]||(a[18]=[n("p",null,[n("strong",null,[s("When the "),n("code",null,"ref"),s(" attribute is passed to an "),n("code",null,"HTML"),s(" element, the "),n("code",null,"ref"),s(" object receives the underlying DOM element as its "),n("code",null,"current"),s(" property.")])],-1),n("div",{class:"language-jsx line-numbers-mode","data-highlighter":"prismjs","data-ext":"jsx"},[n("pre",null,[n("code",{class:"language-jsx"},[n("span",{class:"line"},[n("span",{class:"token comment"},"//render ")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"ref"),n("span",{class:"token script language-javascript"},[n("span",{class:"token script-punctuation punctuation"},"="),n("span",{class:"token punctuation"},"{"),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("myRef"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token punctuation"},"/>")])]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//node contains HTMLElement (div) ")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(" node "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("myRef"),n("span",{class:"token punctuation"},"."),s("current")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:t(({value:o,isActive:c})=>a[19]||(a[19]=[n("p",null,[n("strong",null,[s("When the "),n("code",null,"ref"),s(" attribute is passed to a custom class component, the "),n("code",null,"ref"),s(" object receives the mounted instance of the component.")])],-1),n("div",{class:"language-jsx line-numbers-mode","data-highlighter":"prismjs","data-ext":"jsx"},[n("pre",null,[n("code",{class:"language-jsx"},[n("span",{class:"line"},[n("span",{class:"token comment"},"//render ")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"MyClassComponent")]),s(),n("span",{class:"token attr-name"},"ref"),n("span",{class:"token script language-javascript"},[n("span",{class:"token script-punctuation punctuation"},"="),n("span",{class:"token punctuation"},"{"),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("myRef"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token punctuation"},"/>")])]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//node contains MyClassComponent class instance")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(" node "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("myRef"),n("span",{class:"token punctuation"},"."),s("current")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab2:t(({value:o,isActive:c})=>a[20]||(a[20]=[n("p",null,[n("strong",null,"Refs can’t be passed to a function component because they don’t have instances.")],-1),n("div",{class:"language-jsx line-numbers-mode","data-highlighter":"prismjs","data-ext":"jsx"},[n("pre",null,[n("code",{class:"language-jsx"},[n("span",{class:"line"},[n("span",{class:"token comment"},"//render: don't do this. ")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token operator"},"<"),s("MyFunctionalComponent ref"),n("span",{class:"token operator"},"="),n("span",{class:"token punctuation"},"{"),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("myRef"),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[34]||(a[34]=l('<p>The next sections will demonstrate examples of the aforementioned node types.</p><h3 id="adding-a-ref-to-a-dom-element" tabindex="-1"><a class="header-anchor" href="#adding-a-ref-to-a-dom-element"><span>Adding a ref to a DOM element</span></a></h3><p>Consider an example of focusing a text input on clicking a button:</p><figure><img src="'+R+`" alt="Focusing a Text Input on Clicking a Button" tabindex="0" loading="lazy"><figcaption>Focusing a Text Input on Clicking a Button</figcaption></figure><p>To do this, create a ref object that holds the text input DOM node and access the DOM API to focus the input, as show below:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.jsx"><span>App.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// create a ref to hold the textInput DOM element</span></span>
<span class="line">  textInput <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">focusTextInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// get the input dom node from the ref object</span></span>
<span class="line">    <span class="token keyword">const</span> inputDOMNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">.</span>current<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Use the browser imperative api: call the focus method</span></span>
<span class="line">    inputDOMNode<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token punctuation">{</span><span class="token comment">/* pass a ref attribute to the input element */</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span></span>
<span class="line">          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span></span>
<span class="line">          <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Focus input<span class="token punctuation">&quot;</span></span></span>
<span class="line">          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>focusTextInput<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Note that when the component mounts, React assigns the current property of the ref object with the input DOM element. When the component is unmounted, this is assigned to <code>null</code>.</p><p>The ref updates are also guaranteed to happen before the <code>componentDidMount</code> or <code>componentDidUpdate</code> lifecycle methods. See a demo below.</p>`,8)),e(k,{rtl:"",theme:"dark",title:"react-ref-input-focus%20",template:"react",files:"eJxVUstu2zAQ/JUBT04O0j21AhQpCvTQFgjaGy8ytaqV0qRArtwEhv+9y0ciGdCFmp2dB3lR7ed5bl6ielDTafaB8Uy9YYzBn6BVSAetPmmnXcW1atrIb5ZiY2KsmLF9jJBVoFcmN8SypnnyQnLkGBftgLaFkZVM6BFoBHscvR3ARwIL85ubF8aXn99Blk5CS6QV6OrWsuOZxt1dVgdGb5b4azO4u0P3WESz7B/irDJlfJBwzg9UYqb/yY0/vJCkzRTjXeQyLXZ+pNlOBqfYfNhpzBKCeBQLVeR3lBiy7BD8v0gB0hiFnqez5J2nB5je2jyQ7eJEfPRDYW+VmgznbMC1JhSlgYLEqpkC8RIcduUE7Ifp/Ph+AC7tPeZ0J6XonjlMh0WKl8rXHmrLuG+vK3VfMH6bqdMqxdUqLekut/mvaDeChbWe5d7KAlFl77TaQufeLgn7mnsozJsB757sZP5Wydvb3VhdDezbNX8tTjv5tKPX/GwHGvvFcnqjAqvrfx2Z+RM=",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),a[35]||(a[35]=l(`<h3 id="adding-a-ref-to-a-class-component" tabindex="-1"><a class="header-anchor" href="#adding-a-ref-to-a-class-component"><span>Adding a ref to a class component</span></a></h3><p>What if we decided to refactor the previous example to pass a ref attribute to a class component, e.g., <code>MyTextInput</code>? How much changes?</p><p>Take a look below:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="CustomTextInput.jsx"><span>CustomTextInput.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">class</span> <span class="token class-name">CustomTextInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  myInputRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function-variable function">focusTextInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// get dom node from ref props</span></span>
<span class="line">    <span class="token keyword">const</span> inputDOMNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myInputRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span></span>
<span class="line">    inputDOMNode<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// pass ref on from props</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>myInputRef<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>We have a class component, <code>CustomTextInput</code>, with a <code>focusTextInput</code> function. Note that the <code>CustomTextInput</code> component doesn’t invoke this function but creates and accesses the text input DOM node.</p><p>So, if you wanted to trigger this function handler from another component, e.g., to focus the input on mount or when a button is clicked, the following works perfectly:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.jsx"><span>App.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// create a ref to hold the textInput DOM element</span></span>
<span class="line">  textInputClassInstance <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">focus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// call the child handler</span></span>
<span class="line">    <span class="token comment">// this is possible because the ref object received the child class instance</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>textInputClassInstance<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focusTextInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token punctuation">{</span><span class="token comment">/* pass a ref attribute to the class component. Ref receives the class instance  */</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CustomTextInput</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>textInputClassInstance<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Focus input<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>focus<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>See a demo below:</p>`,8)),e(k,{rtl:"",theme:"dark",title:"ohansemmanuel%20%2F%20ref-class-input-focus%20",template:"react",files:"eJx9VM2K2zAQfpXBp+we7HsbB0qWwh62hWWPvijyuNFWlow0ChtC3r0jyT9JMAUfYmnmm+9n4ktR/RiG8tMX3wrVD9YRvKOQBJ2zPTSFiy9N8b0xjRnvm6KsPJ01+lJ6P95JLbyHffBk+w/8olczBAL+gab1GbLcWwYwaAgujQHoz6noHTuoxwrJ4wj5ZPPEqACdlcEvcDVsnqDe5XaAqoI/SNAyUWNbzJQdww3ODj7XSGs8gYrtL7/ffsWyGuiofLmML2VwjmmlkXBXXCYGI5trUgo8wrTomMrCY4jq42hrMo0bCg4pOAPbhAt0HrBuCmJRTRFb6ssDnStUuzyvMfxM3nJM//eTaWT/QCQqZOFodctqEeK47CELA9TYc1tsmi/2ccgrmyWMjB6tBTJHspKEFFqnUfKoeOhRmFajK+f7DxYJ/AzWe3XQCAeUInimxj3JucMn8t45lKhOmGlnrKxfjdwyYvJsnfwUZ85u3p6HEOVk3otq32wwfD+pSdh3wa/nPga7yW8A21addtMLwKV6znuR4xBETh0Cx8PBJHFJ1syjZMu7Sb6/qZiEAzxXzGSC3z7+2ZZdWvcl7tVN+906Mi+yhhfyJHSIBz9TzKmGT63ZayX/jvDJmlu0bbUonx1LpuFX+mS02ImgKe4wXxfXf6rthNo=",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),a[36]||(a[36]=l(`<h3 id="refs-and-function-components" tabindex="-1"><a class="header-anchor" href="#refs-and-function-components"><span>Refs and function components</span></a></h3><p>Remember that you should not use the ref attribute on function components because they don’t have instances:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  textInput <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// This will NOT work!</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyFunctionComponent</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to pass a ref to a function component, consider using <code>forwardRef</code>, perhaps in conjunction with <code>useImperativeHandle</code>. You could also consider converting said component to a class component.</p><p>As stated earlier, you shouldn’t pass a ref to a functional component, but you can create and use refs within functional components, as seen below:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="CustomTextInput.jsx"><span>CustomTextInput.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">CustomTextInput</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// create ref object using useRef</span></span>
<span class="line">  <span class="token keyword">const</span> textInput <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    textInput<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span></span>
<span class="line">        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>textInput<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span></span>
<span class="line">        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Focus the text input<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="exposing-dom-refs-to-parent-components" tabindex="-1"><a class="header-anchor" href="#exposing-dom-refs-to-parent-components"><span>Exposing DOM refs to parent components</span></a></h2><p>Occasionally, you may want to access a child’s DOM node from a parent component. This is far from ideal as it breaks component encapsulation. However, there are legitimate use cases that could warrant this technique, e.g., triggering focus or measuring the size or position of a child DOM node.</p><p>So, how should you approach this problem?</p><p>Firstly, you could add a ref to the child component, as we did in an earlier example. This is not a perfect solution since you get a component instance and not the child DOM node. Also, this doesn’t work with functional components.</p><p>With React 16.3 or higher, consider using ref forwarding for such cases. Ref forwarding allows you to expose a child’s DOM node to a parent component.</p><p>With React 16.2 or lower, ref forwarding isn’t supported. So what do you do? Consider explicitly passing a ref as a differently named prop.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Parent.jsx"><span>Parent.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">CustomTextInput</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/* Pass ref to input node*/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>inputRef<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// create ref object </span></span>
<span class="line">  inputElement <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">       <span class="token punctuation">{</span><span class="token comment">/* pass ref object as a differently named prop: inputRef*/</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CustomTextInput</span></span> <span class="token attr-name">inputRef</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputElement<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,14)),n("p",null,[a[23]||(a[23]=s("Note that the approach above requires some code to be added to the child component. In more stringent use cases, you may have no control over the child component implementation. Your best bet is to use ")),n("a",T,[e(u,{icon:"fa-brands fa-react"}),a[21]||(a[21]=n("code",null,"findDOMNode()",-1))]),a[24]||(a[24]=s(", but note that this is discouraged and deprecated in ")),n("a",D,[e(u,{icon:"fa-brands fa-react"}),a[22]||(a[22]=n("code",null,"StrictMode",-1))]),a[25]||(a[25]=s("`."))]),a[37]||(a[37]=l(`<p>It is highly recommended to avoid exposing DOM nodes if you don’t need do.</p><hr><h2 id="callback-refs" tabindex="-1"><a class="header-anchor" href="#callback-refs"><span>Callback refs</span></a></h2><p>In all the examples we’ve discussed, the ref object has been directly passed on via the <code>ref</code> attribute. However, React supports another way to set refs; these are called callback refs.</p><p>Instead of passing a <code>ref</code> object via the <code>ref</code> attribute:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line">myRefObject <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>myRefObject<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pass a function:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token function-variable function">myRefCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>myRefCallback<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>React will pass the component instance or DOM element as an argument to the function. This can then be stored and accessed elsewhere!</p><p>Callback refs give you a lot more control over actions to be performed when refs are set and unset. Remember that the ref callback is called with the DOM element when the component mounts, and it is called with <code>null</code> when it unmounts.</p><p>Consider the example below, which creates a ref callback and stores a DOM node in an instance property — a commonly implemented pattern.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.jsx"><span>App.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//create instance variable</span></span>
<span class="line">  textInput <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">setTextInputRef</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// save DOM element received in the instance variable: textInput</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>textInput <span class="token operator">=</span> element<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">focusTextInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Focus the text input using the raw DOM API</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// autofocus the input on mount</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">focusTextInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Use the \`ref\` callback to store a reference to the text input DOM</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>setTextInputRef<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span></span>
<span class="line">          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span></span>
<span class="line">          <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Focus  input<span class="token punctuation">&quot;</span></span></span>
<span class="line">          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>focusTextInput<span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>See a demo below:</p><p>As with object refs, you can pass callback refs between components, e.g., parent and child. See the example below:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Parent.jsx"><span>Parent.jsx</span></div><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">CustomTextInput</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span><span class="token comment">/*child component passes ref to callback*/</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>inputRef<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token punctuation">{</span><span class="token comment">/* pass a callback ref to the child component*/</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CustomTextInput</span></span></span>
<span class="line">        <span class="token attr-name">inputRef</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">el</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inputElement <span class="token operator">=</span> el<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In the example above, the <code>Parent</code> component holds the DOM value corresponding to the child text input in the instance variable <code>inputElement</code>.</p><p>Note that the ref callback is passed to the child component, <code>CustomTextInput</code> via a differently named prop: <code>inputRef</code>. <code>CustomTextInput</code> then passes the callback on to the <code>ref</code> attribute set on the <code>&lt;input&gt;</code> element.</p><h3 id="caveats-with-callback-refs" tabindex="-1"><a class="header-anchor" href="#caveats-with-callback-refs"><span>Caveats with callback refs</span></a></h3><p>If you define a <code>ref</code> callback as an inline function, a new instance of the function will be created with each render. The callback is then called twice: first will <code>null</code>, and then again with the DOM element. Essentially, React has to clear the old ref and set up a new one.</p><p>This shouldn’t matter so much in most cases, but to avoid this, define the <code>ref</code> method as a bound method on the class (for class components).</p><hr><h2 id="legacy-api-string-refs" tabindex="-1"><a class="header-anchor" href="#legacy-api-string-refs"><span>Legacy API: String refs</span></a></h2><p>It is worth mentioning that an older ref API supported <code>ref</code> attributes as plain strings, e.g., <code>myTextInput</code> and the DOM node accessed as <code>this.refs.myTextInput</code>.</p>`,23)),n("p",null,[a[29]||(a[29]=s("Don’t do this anymore. String refs are now considered legacy, they have some ")),n("a",O,[a[26]||(a[26]=s("issues (")),e(u,{icon:"iconfont icon-github"}),a[27]||(a[27]=n("code",null,"facebook/react",-1)),a[28]||(a[28]=s(")"))]),a[30]||(a[30]=s(", and they are likely going to be removed in a future release of React."))]),y(" TODO: add ARTICLE CARD "),e(r,m(v({title:"React Reference Guide: Refs and the DOM",desc:"Refs become necessary when you want to access DOM nodes or React elements created in the render method of your components.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-reference-guide-refs-dom.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const S=h(A,[["render",q]]),J=JSON.parse('{"path":"/blog.logrocket.com/react-reference-guide-refs-dom.html","title":"React Reference Guide: Refs and the DOM","lang":"en-US","frontmatter":{"lang":"en-US","title":"React Reference Guide: Refs and the DOM","description":"Article(s) > React Reference Guide: Refs and the DOM","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React Reference Guide: Refs and the DOM\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-reference-guide-refs-dom/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-reference-guide-refs-dom/focus-input-example.webp\\"],\\"datePublished\\":\\"2020-09-04T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ohans Emmanuel\\",\\"url\\":\\"https://blog.logrocket.com/author/ohansemmanuel/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-reference-guide-refs-dom.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"React Reference Guide: Refs and the DOM"}],["meta",{"property":"og:description","content":"Article(s) > React Reference Guide: Refs and the DOM"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-reference-guide-refs-dom/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/react-reference-guide-refs-dom/banner.png"}],["meta",{"name":"twitter:image:alt","content":"React Reference Guide: Refs and the DOM"}],["meta",{"property":"article:author","content":"Ohans Emmanuel"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2020-09-04T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > React Reference Guide: Refs and the DOM"},{"property":"og:description","content":"React Reference Guide: Refs and the DOM"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/react-reference-guide-refs-dom.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2020-09-04T00:00:00.000Z","isOriginal":false,"author":[{"name":"Ohans Emmanuel","url":"https://blog.logrocket.com/author/ohansemmanuel/"}],"cover":"/assets/image/blog.logrocket.com/react-reference-guide-refs-dom/banner.png"},"git":{},"readingTime":{"minutes":8.06,"words":2418},"filePathRelative":"blog.logrocket.com/react-reference-guide-refs-dom.md","copyright":{"author":"Ohans Emmanuel"}}');export{S as comp,J as data};
