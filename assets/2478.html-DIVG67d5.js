import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,d as n,f as a,b as m,t as d,n as k,g as h,w as p,r as o,o as g,e}from"./app-BVguHYKu.js";const v={},b={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"};function w(l,s){const c=o("VPCard"),t=o("router-link"),i=o("SiteInfo");return g(),u("div",null,[n("h1",b,[n("a",f,[n("span",null,d(l.$frontmatter.title)+" 관련",1)])]),a(c,k(h({title:"Java > Article(s)",desc:"Article(s)",link:"/programming/java/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",y,[n("ul",null,[n("li",null,[a(t,{to:"#탐욕-알고리즘이란"},{default:p(()=>s[0]||(s[0]=[e("탐욕 알고리즘이란?")])),_:1,__:[0]}),n("ul",null,[n("li",null,[a(t,{to:"#_1-기본-개념-및-특징"},{default:p(()=>s[1]||(s[1]=[e("1. 기본 개념 및 특징")])),_:1,__:[1]})]),n("li",null,[a(t,{to:"#_2-작동-원리와-장단점"},{default:p(()=>s[2]||(s[2]=[e("2. 작동 원리와 장단점")])),_:1,__:[2]})])])]),n("li",null,[a(t,{to:"#탐욕-알고리즘-조건과-적용-방법"},{default:p(()=>s[3]||(s[3]=[e("탐욕 알고리즘 조건과 적용 방법")])),_:1,__:[3]}),n("ul",null,[n("li",null,[a(t,{to:"#_1-탐욕-알고리즘-조건"},{default:p(()=>s[4]||(s[4]=[e("1. 탐욕 알고리즘 조건")])),_:1,__:[4]})]),n("li",null,[a(t,{to:"#_2-탐욕-알고리즘-적용-방법"},{default:p(()=>s[5]||(s[5]=[e("2. 탐욕 알고리즘 적용 방법")])),_:1,__:[5]})])])]),n("li",null,[a(t,{to:"#허프만-코딩과-탐욕-알고리즘"},{default:p(()=>s[6]||(s[6]=[e("허프만 코딩과 탐욕 알고리즘")])),_:1,__:[6]}),n("ul",null,[n("li",null,[a(t,{to:"#_1-허프만-코딩-huffman-coding-란"},{default:p(()=>s[7]||(s[7]=[e("1. 허프만 코딩(Huffman Coding)란?")])),_:1,__:[7]})]),n("li",null,[a(t,{to:"#_2-탐욕-알고리즘의-적용"},{default:p(()=>s[8]||(s[8]=[e("2. 탐욕 알고리즘의 적용")])),_:1,__:[8]})])])]),n("li",null,[a(t,{to:"#허프만-코딩-구현-방법"},{default:p(()=>s[9]||(s[9]=[e("허프만 코딩 구현 방법")])),_:1,__:[9]}),n("ul",null,[n("li",null,[a(t,{to:"#_1-전치-코드와-이진-트리-표현"},{default:p(()=>s[10]||(s[10]=[e("1. 전치 코드와 이진 트리 표현")])),_:1,__:[10]})]),n("li",null,[a(t,{to:"#_2-최적-부분-구조와-최적-해-구하기"},{default:p(()=>s[11]||(s[11]=[e("2. 최적 부분 구조와 최적 해 구하기")])),_:1,__:[11]})]),n("li",null,[a(t,{to:"#_3-자바-코드-구현-예시"},{default:p(()=>s[12]||(s[12]=[e("3) 자바 코드 구현 예시")])),_:1,__:[12]})])])]),n("li",null,[a(t,{to:"#마치며"},{default:p(()=>s[13]||(s[13]=[e("마치며")])),_:1,__:[13]})])])]),s[14]||(s[14]=n("hr",null,null,-1)),a(i,{name:"탐욕 알고리즘과 허프만 코딩 구현 방법 | 요즘IT",desc:"국내 IT 기업은 한국을 넘어 세계를 무대로 할 정도로 뛰어난 기술과 아이디어를 자랑합니다. 이들은 기업 블로그를 통해 이러한 정보를 공개하고 있습니다. 요즘IT는 각 기업의 특색 있고 유익한 콘텐츠를 소개하는 시리즈를 준비했습니다. 이들은 어떻게 사고하고, 어떤 방식으로 일하고 있을까요?",url:"https://yozm.wishket.com/magazine/detail/2478/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/2478/1__%ED%83%90%EC%9A%95_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98_%EC%98%88%EC%8B%9C.png"}),s[15]||(s[15]=m(`<p><strong>탐욕 알고리즘(Greedy Algorithm)</strong> 은 각 단계에서 최적의 해결책을 선택하여 복잡한 문제를 간단하고 빠르게 해결하는 알고리즘을 말합니다. 이번 글에서는 탐욕 알고리즘의 기본 개념과 작동 원리를 알아보고, 알고리즘의 한계점과 적합한 문제 유형을 살펴보고자 합니다. 더불어 데이터 압축 시 사용하는 <strong>허프만 코딩(Huffman Coding)</strong> 의 개념과 탐욕 알고리즘을 적용해 허프만 코딩이 어떻게 구현되는지도 함께 알아보겠습니다.</p><hr><h2 id="탐욕-알고리즘이란" tabindex="-1"><a class="header-anchor" href="#탐욕-알고리즘이란"><span>탐욕 알고리즘이란?</span></a></h2><h3 id="_1-기본-개념-및-특징" tabindex="-1"><a class="header-anchor" href="#_1-기본-개념-및-특징"><span>1. 기본 개념 및 특징</span></a></h3><p>탐욕 알고리즘은 당장 앞에 놓여 있는 선택지 중 가장 최적인 해를 선택하는 알고리즘을 말합니다. 이 알고리즘은 다양한 <strong>최적화 문제를 해결</strong> 하는 데 사용되며, 각 단계에서 <strong>가장 좋아 보이는 선택</strong> 을 추구하기 때문에 탐욕 알고리즘이라는 이름으로 불리고 있습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2478/1__탐욕_알고리즘_예시.png" alt="위 그림은 서울에서 대전을 거쳐 부산까지 가는 각 도로의 길이를 나타낸 그림입니다." tabindex="0" loading="lazy"><figcaption>위 그림은 서울에서 대전을 거쳐 부산까지 가는 각 도로의 길이를 나타낸 그림입니다.</figcaption></figure><p>탐욕 알고리즘으로 서울에서 부산까지 가는 최단 루트를 찾는 경우, 먼저 서울에서 대전까지 가는 도로 중 가장 짧은 도로인 (A)를 선택합니다.</p><p>다음으로 대전에서 부산으로 가는 도로 중 가장 짧은 도로인 (D)를 선택하여, 최종적으로 (A)-(D) 루트를 선택하게 됩니다. 이처럼 탐욕 알고리즘은 각 단계에서의 최적의 선택이 <strong>전체적인 최적 해로 이어진다는 가정</strong> 하에 적용된다는 특징이 있습니다.</p><h3 id="_2-작동-원리와-장단점" tabindex="-1"><a class="header-anchor" href="#_2-작동-원리와-장단점"><span>2. 작동 원리와 장단점</span></a></h3><p>앞서 살펴봤듯이 탐욕 알고리즘은 전체 문제를 부분으로 쪼개고, 각 부분에서 가장 최선인 선택을 함으로써 전체적인 문제를 해결합니다. 즉, 당장 앞에 주어진 <strong>부분적인 상황만 고려</strong> 하며, 전반적인 상황은 전혀 고려하지 않습니다. 따라서 탐욕 알고리즘은 복잡한 문제를 간단하고 빠르게 풀 수 있지만, 모든 문제에 대해 최적의 해를 보장하지는 않습니다.</p><figure><img src="https://yozm.wishket.com/media/news/2478/2__동전_개수_구하기.png" alt="최소 거스름돈 동전 개수 구하기" tabindex="0" loading="lazy"><figcaption>최소 거스름돈 동전 개수 구하기</figcaption></figure><p>만약 위와 같이 동전 종류로 <strong>500원, 400원, 100원, 10원짜리</strong> 가 있다고 가정할 때, 최소의 동전을 사용하여 거스름돈을 지불하는 문제를 풀어보겠습니다. 이 문제에 탐욕 알고리즘을 적용하면 먼저 가장 단위가 큰 500원짜리를 고려하고, 다음으로 400원, 100원, 10원짜리 동전을 고려하게 됩니다. 이에 따라 810원을 거슬러 주는 경우 500원 1개, 100원 3개, 10원 1개로 총 5개의 동전을 사용하게 됩니다.</p><p>하지만 이 문제의 최적 해는 400원짜리 2개와 10원짜리 1개를 사용하는 것입니다. 이처럼 탐욕 알고리즘은 다른 복잡한 알고리즘에 비해 간단하고 빠르지만, 400원짜리 동전이 존재하는 경우와 같은 상황에서는 항상 <strong>최적 해를 보장하지 못한다</strong> 는 단점이 있습니다.</p><hr><h2 id="탐욕-알고리즘-조건과-적용-방법" tabindex="-1"><a class="header-anchor" href="#탐욕-알고리즘-조건과-적용-방법"><span>탐욕 알고리즘 조건과 적용 방법</span></a></h2><h3 id="_1-탐욕-알고리즘-조건" tabindex="-1"><a class="header-anchor" href="#_1-탐욕-알고리즘-조건"><span>1. 탐욕 알고리즘 조건</span></a></h3><p>탐욕 알고리즘은 모든 문제에 대해 항상 최적 해를 보장하지 않지만, 다음 <strong>2가지 조건</strong> 을 충족하면 최적 해를 보장할 수 있습니다.</p><h4 id="탐욕적-선택-속성-greedy-choice-property" tabindex="-1"><a class="header-anchor" href="#탐욕적-선택-속성-greedy-choice-property"><span>탐욕적 선택 속성(Greedy Choice Property)</span></a></h4><p>탐욕적 선택 속성이란 &#39;각 단계의 선택이 <strong>이후 선택에 영향을 주지 않는다&#39;</strong> 라는 것을 말합니다. 예를 들어, 서울에서 부산으로 가는 최단 경로를 구하는 문제에서 서울에서 대전까지 가는 경로를 선택하는 것이 대전에서 부산까지 가는 경로를 선택하는 것에 어떠한 영향도 미치지 않습니다. 이러한 속성을 가진 문제는 탐욕적 선택을 계속하여 결국 최종적으로 최적 해를 구할 수 있습니다.</p><h4 id="최적-부분-구조-optimal-substructure" tabindex="-1"><a class="header-anchor" href="#최적-부분-구조-optimal-substructure"><span>최적 부분 구조(Optimal Substructure)</span></a></h4><p>최적 부분 구조란 &#39;문제의 최종 해결책이 <strong>부분 문제의 최적 해</strong> 로 구성될 수 있어야 한다&#39;라는 것을 말합니다. 예를 들면, 서울에서 부산까지 가는 최단 경로는 서울에서 대전으로 가는 최단 경로와 대전에서 부산으로 가는 최단 경로의 합으로 구성된다는 것을 들 수 있습니다. 이러한 조건을 가지고 있는 문제는 탐욕 알고리즘을 적용하여 최적 해를 도출할 수 있습니다.</p><h3 id="_2-탐욕-알고리즘-적용-방법" tabindex="-1"><a class="header-anchor" href="#_2-탐욕-알고리즘-적용-방법"><span>2. 탐욕 알고리즘 적용 방법</span></a></h3><p>어떤 문제에 탐욕 알고리즘을 적용하려면 우선 해당 문제를 <strong>여러 부분으로</strong> 쪼개야 합니다. 그리고 앞서 살펴본 두 가지 조건인 탐욕적 선택 속성과 최적 부분 구조 <strong>조건을 충족하는지</strong> 살펴봐야 합니다. 즉, 각 단계의 선택이 다음 단계의 선택에 영향을 주는지, 각 부분의 최적 해가 최종적으로 전체 최적 해를 구성하게 되는지를 확인해야 합니다.</p><p>참고로 탐욕 알고리즘은 알고리즘 구현이 쉽고 빠르기 때문에, 위 2가지 조건을 만족하지 않더라도 다양한 문제에 활용할 수 있습니다. 특히 반드시 최적 해를 구하지 못하더라도, <strong>어림짐작해서 답을 구해야 하는 경우</strong> 에도 사용됩니다. 예를 들어, 인공지능에 활용되는 알고리즘 중 휴리스틱 탐색(Heuristic Search)이나 빔 탐색(Beam Search), A* 알고리즘 등에서 탐욕 알고리즘이 적용되고 있습니다.</p><hr><h2 id="허프만-코딩과-탐욕-알고리즘" tabindex="-1"><a class="header-anchor" href="#허프만-코딩과-탐욕-알고리즘"><span>허프만 코딩과 탐욕 알고리즘</span></a></h2><h3 id="_1-허프만-코딩-huffman-coding-란" tabindex="-1"><a class="header-anchor" href="#_1-허프만-코딩-huffman-coding-란"><span>1. 허프만 코딩(Huffman Coding)란?</span></a></h3><p>허프만 코딩은 <strong>데이터를 효율적으로 압축</strong> 하기 위한 방법을 말합니다. 여기서 데이터를 효율적으로 압축한다는 것은 텍스트, 오디오, 비디오 파일 등을 이진 코드(Binary Code)로 변환할 때 기존 방식보다 더 적은 메모리를 사용한다는 것을 의미합니다.</p><figure><img src="https://yozm.wishket.com/media/news/2478/3__데이터_압축_방식.png" alt="허프만 코딩" tabindex="0" loading="lazy"><figcaption>허프만 코딩</figcaption></figure><p>예를 들어, 위 그림과 같이 문자 종류로 a, b, c가 있고, 주어진 문자열이 aaababac인 경우를 살펴보도록 하죠. 먼저 아스키(ASCII)나 유니코드(Unicode) 같은 기존 방식은 텍스트를 이진 코드로 변환할 때 각 문자에 대해 <strong>고정된 길이의 이진 코드</strong> (Fixed-length Binary Code)를 부여합니다. 위 예시에서는 a, b, c 모두 2비트의 코드가 부여되었습니다.</p><p>반면, 허프만 코딩에서는 문자의 출현 빈도수에 따라 <strong>가변 길이 코드</strong> (Variable-length Binary Code)를 부여합니다. 위 예시에서는 출현 빈도수가 가장 많은 a는 1비트 코드로, 나머지는 2비트 코드가 부여되었습니다. 이를 통해 허프만 코딩에서는 기존 방식보다 더 적은 메모리로 데이터를 변환할 수 있는 것이죠.</p><h3 id="_2-탐욕-알고리즘의-적용" tabindex="-1"><a class="header-anchor" href="#_2-탐욕-알고리즘의-적용"><span>2. 탐욕 알고리즘의 적용</span></a></h3><p>앞서 살펴봤듯이 허프만 코딩에서는 문자열 중 자주 등장하는 문자는 짧은 비트로 표현하고, 상대적으로 자주 등장하지 않는 문자는 긴 비트로 표현합니다. 즉, <strong>각 문자의 출현 빈도수를 기반</strong> 으로 탐욕 알고리즘을 적용한 것입니다.</p><hr><h2 id="허프만-코딩-구현-방법" tabindex="-1"><a class="header-anchor" href="#허프만-코딩-구현-방법"><span>허프만 코딩 구현 방법</span></a></h2><h3 id="_1-전치-코드와-이진-트리-표현" tabindex="-1"><a class="header-anchor" href="#_1-전치-코드와-이진-트리-표현"><span>1. 전치 코드와 이진 트리 표현</span></a></h3><p>허프만 코딩은 가장 적은 비트를 사용하여 문자열을 이진 코드로 변환하는 일종의 <strong>최적화 문제</strong> 입니다. 따라서 허프만 코딩으로 항상 최적의 해를 구하기 위해서는 앞서 살펴본 탐욕 알고리즘의 2가지 조건을 만족해야 합니다.</p><p>첫 번째 조건인 탐욕 선택 속성은 앞선 선택이 다음 선택에 영향을 미치지 않아야 한다는 것입니다. 허프만 코딩에서는 이를 전치 코드(prefix code)라는 개념을 통해 충족시키고 있습니다. 전치 코드란 <strong>&#39;한 문자의 코드가 다른 문자 코드의 앞부분이 될 수 없다&#39;</strong> 라는 규칙을 가진 코드를 말합니다. 이를 통해 이전의 코드 선택이 다음 코드 선택에 영향을 미치지 않게 됩니다.</p><figure><img src="https://yozm.wishket.com/media/news/2478/4__전치코드와_이진트리.png" alt="이진 트리 표현" tabindex="0" loading="lazy"><figcaption>이진 트리 표현</figcaption></figure><p>예를 들어, a의 코드가 0이라면 b나 c의 코드 앞에는 0이 올 수 없습니다. 이어서 b의 코드가 10이라면 c 코드 앞에는 10이 올 수 없는 것이죠. 이러한 전치 코드 조건은 위와 같은 <strong>이진 트리로 간단히 표현</strong> 할 수도 있습니다.</p><h3 id="_2-최적-부분-구조와-최적-해-구하기" tabindex="-1"><a class="header-anchor" href="#_2-최적-부분-구조와-최적-해-구하기"><span>2. 최적 부분 구조와 최적 해 구하기</span></a></h3><p>다음으로 두 번째 조건인 <strong>최적 부분 구조</strong> 에 관해 살펴보겠습니다. 최적 부분 구조는 어떤 문제의 전체적인 최적 해가 부분 문제의 최적 해의 합이라는 것을 의미합니다. 허프만 코딩에서는 전체 문제의 최적 해를 다음과 같이 각 문자의 출현 빈도수와 코드 길이를 곱한 값의 총합으로 구할 수 있습니다.</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>전체 문자열 코드 길이</mtext><mo>=</mo><mrow><mo fence="true">(</mo><mtext>각 문자의 출현 빈도수</mtext><mo>×</mo><mtext>각 문자의 코드 길이</mtext><mo fence="true">)</mo></mrow><mtext> 의 총합</mtext></mrow><annotation encoding="application/x-tex">\\text{전체 문자열 코드 길이}=\\left(\\text{각 문자의 출현 빈도수}\\times\\text{각 문자의 코드 길이}\\right)\\text{ 의 총합}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord hangul_fallback">전체</span><span class="mord"> </span><span class="mord hangul_fallback">문자열</span><span class="mord"> </span><span class="mord hangul_fallback">코드</span><span class="mord"> </span><span class="mord hangul_fallback">길이</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord text"><span class="mord hangul_fallback">각</span><span class="mord"> </span><span class="mord hangul_fallback">문자의</span><span class="mord"> </span><span class="mord hangul_fallback">출현</span><span class="mord"> </span><span class="mord hangul_fallback">빈도수</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord text"><span class="mord hangul_fallback">각</span><span class="mord"> </span><span class="mord hangul_fallback">문자의</span><span class="mord"> </span><span class="mord hangul_fallback">코드</span><span class="mord"> </span><span class="mord hangul_fallback">길이</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord"> </span><span class="mord hangul_fallback">의</span><span class="mord"> </span><span class="mord hangul_fallback">총합</span></span></span></span></span></p><p>위 공식이 다소 복잡해 보일 수도 있지만, 앞선 예시를 대입하면 간단하게 이해할 수 있습니다. 앞서 살펴본 예시에서 허프만 코딩을 적용한 문자열 aaababac의 전체 코드 길이는 11비트였습니다. 이는 a:(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">5\\times1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>) + b:(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>×</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2\\times2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>) + c:(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2\\times1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>) = 11로 계산된 것이죠.</p><p>이는 a만 있을 때의 최적 해인 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5</span></span></span></span>, a와 b만 있을 때의 최적 해인 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>9</mn></mrow><annotation encoding="application/x-tex">9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9</span></span></span></span>, 마지막으로 a, b, c가 있을 때의 최적 해인 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>11</mn></mrow><annotation encoding="application/x-tex">11</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11</span></span></span></span> 순으로 전체적인 최적 해를 구해 나갈 수 있다는 것입니다. 즉, 허프만 코딩은 두 번째 조건인 최적 부분 구조도 만족하기 때문에 항상 최적의 해를 보장할 수 있습니다. 그리고 여기서 최적 해를 구한다는 것은 여러 가지 코드 조합 중 <strong>전체 문자열 코드 길이가 가장 최소가 되는 값</strong> 을 구하는 것을 말합니다.</p><h3 id="_3-자바-코드-구현-예시" tabindex="-1"><a class="header-anchor" href="#_3-자바-코드-구현-예시"><span>3) 자바 코드 구현 예시</span></a></h3><p>앞서 살펴본 내용을 토대로 자바 코드를 작성해 보겠습니다. 먼저 문자의 빈도수에 따른 이진 트리를 생성하기 위해 아래와 같이 <strong>Node 클래스</strong> 를 작성합니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">char</span> character<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> frequency<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Node</span> left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">char</span> character<span class="token punctuation">,</span> <span class="token keyword">int</span> frequency<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>character <span class="token operator">=</span> character<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>frequency <span class="token operator">=</span> frequency<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Node</span> left<span class="token punctuation">,</span> <span class="token class-name">Node</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>frequency <span class="token operator">=</span> left<span class="token punctuation">.</span>frequency <span class="token operator">+</span> right<span class="token punctuation">.</span>frequency<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다음으로 <code>HuffmanCoding</code> 클래스를 만들고, 각 문자와 해당 빈도수를 가진 노드를 <strong>우선순위 큐</strong> (Priority Queue)에 추가합니다. 그리고 우선순위 큐에서 두 노드를 꺼내어 결합하고, 이를 다시 큐에 추가하는 과정을 반복하여 이진 트리를 구축합니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuffmanCoding</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 허프만 이진 트리 구축</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">buildHuffmanTree</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> freq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> text<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            freq<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> freq<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1.</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 이진 트리를 구축하기 위해 우선순위 큐를 사용</span></span>
<span class="line">        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> pq </span>
<span class="line">            <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> l<span class="token punctuation">.</span>frequency <span class="token operator">-</span> r<span class="token punctuation">.</span>frequency<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span>entry<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> entry<span class="token operator">:</span> freq<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 이진트리 구축</span></span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1.</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Node</span> left <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">Node</span> right <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">printCodes</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>최종적으로 생성된 이진 트리를 통해 각 문자에 대한 <strong>허프만 코드를 부여</strong> 하고, <code>printCodes</code> 메서드를 통해 각 코드를 출력합니다. 그러면 아래와 같이 <code>aaababac</code> 문자열에 대해 a: 1, b: 01, c:00으로 <strong>최적 이진 코드</strong> 가 부여된 것을 볼 수 있습니다. 참고로, 이 결과는 0과 1만 바꿔서 a: 0, b: 10, c: 11과 동일한 결과이기도 합니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token comment">// 하프만 코드 출력</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printCodes</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>character <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">printCode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> str <span class="token operator">+</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printCode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> str <span class="token operator">+</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientForGreedyAlgorithms</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 하프만 코드 생성</span></span>
<span class="line">        <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">&quot;aaababac&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">HuffmanCoding</span><span class="token punctuation">.</span><span class="token function">buildHuffmanTree</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h2><p>지금까지 탐욕 알고리즘의 기본 개념과 작동 원리, 그리고 허프만 코딩과의 관계를 살펴보고 간단하게 자바 코드로 구현해 보았습니다. 앞서 살펴본 바와 같이 탐욕 알고리즘은 탐욕 선택 속성과 최적 부분 구조 조건을 만족하는 경우 최적화 문제를 효율적으로 해결할 수 있는 알고리즘입니다.</p><p>또한 허프만 코딩 외에도 여러 가지 실용적인 알고리즘에 사용되고 있는데요. 특히 인공지능 및 머신러닝과 관련된 다양한 최적화 문제와 의사 결정 프로세스, 그리고 복잡한 데이터 패턴의 해석과 같은 문제에도 활용되고 있으니, 미리 학습해 두는 것을 추천합니다.</p>`,57))])}const C=r(v,[["render",w]]),E=JSON.parse('{"path":"/yozm.wishket.com/2478.html","title":"탐욕 알고리즘과 허프만 코딩 구현 방법","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"탐욕 알고리즘과 허프만 코딩 구현 방법","description":"Article(s) > 탐욕 알고리즘과 허프만 코딩 구현 방법","icon":"fa-brands fa-java","category":["Java","Algorithms","Article(s)"],"tag":["blog","yozm.wishket.com","java","jdk","algorithms"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"탐욕 알고리즘과 허프만 코딩 구현 방법\\",\\"image\\":[\\"https://yozm.wishket.com/media/news/2478/1__%ED%83%90%EC%9A%95_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98_%EC%98%88%EC%8B%9C.png\\",\\"https://yozm.wishket.com/media/news/2478/2__%EB%8F%99%EC%A0%84_%EA%B0%9C%EC%88%98_%EA%B5%AC%ED%95%98%EA%B8%B0.png\\",\\"https://yozm.wishket.com/media/news/2478/3__%EB%8D%B0%EC%9D%B4%ED%84%B0_%EC%95%95%EC%B6%95_%EB%B0%A9%EC%8B%9D.png\\",\\"https://yozm.wishket.com/media/news/2478/4__%EC%A0%84%EC%B9%98%EC%BD%94%EB%93%9C%EC%99%80_%EC%9D%B4%EC%A7%84%ED%8A%B8%EB%A6%AC.png\\"],\\"datePublished\\":\\"2024-03-04T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2478.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"탐욕 알고리즘과 허프만 코딩 구현 방법"}],["meta",{"property":"og:description","content":"Article(s) > 탐욕 알고리즘과 허프만 코딩 구현 방법"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/2478/1__%ED%83%90%EC%9A%95_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98_%EC%98%88%EC%8B%9C.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/2478/1__%ED%83%90%EC%9A%95_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98_%EC%98%88%EC%8B%9C.png"}],["meta",{"name":"twitter:image:alt","content":"탐욕 알고리즘과 허프만 코딩 구현 방법"}],["meta",{"property":"article:tag","content":"algorithms"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-03-04T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 탐욕 알고리즘과 허프만 코딩 구현 방법"},{"property":"og:description","content":"탐욕 알고리즘과 허프만 코딩 구현 방법"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/2478.html"}]],"prev":"/programming/java/articles/README.md","date":"2024-03-04T00:00:00.000Z","isOriginal":false,"cover":"https://yozm.wishket.com/media/news/2478/1__%ED%83%90%EC%9A%95_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98_%EC%98%88%EC%8B%9C.png"},"git":{},"readingTime":{"minutes":2.14,"words":642},"filePathRelative":"yozm.wishket.com/2478.md"}');export{C as comp,E as data};
