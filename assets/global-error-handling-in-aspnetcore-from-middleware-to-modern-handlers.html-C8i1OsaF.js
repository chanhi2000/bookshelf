import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as e,b as o,a as b,t as h,n as u,g as d,w as t,e as a,r as i,o as y}from"./app-BVguHYKu.js";const w={},f={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},E={class:"table-of-contents"},S={href:"https://rfc-editor.org/rfc/rfc9457",target:"_blank",rel:"noopener noreferrer"},T={href:"https://fluentvalidation.net/",target:"_blank",rel:"noopener noreferrer"};function H(k,n){const c=i("VPCard"),p=i("router-link"),m=i("SiteInfo"),l=i("RouteLink"),r=i("VPIcon");return y(),g("div",null,[s("h1",f,[s("a",x,[s("span",null,h(k.$frontmatter.title)+" 관련",1)])]),e(c,u(d({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",E,[s("ul",null,[s("li",null,[e(p,{to:"#middleware-based-error-handling"},{default:t(()=>n[0]||(n[0]=[a("Middleware-Based Error Handling")])),_:1,__:[0]})]),s("li",null,[e(p,{to:"#enter-iproblemdetailsservice"},{default:t(()=>n[1]||(n[1]=[a("Enter IProblemDetailsService")])),_:1,__:[1]})]),s("li",null,[e(p,{to:"#the-modern-way-iexceptionhandler"},{default:t(()=>n[2]||(n[2]=[a("The Modern Way: IExceptionHandler")])),_:1,__:[2]})]),s("li",null,[e(p,{to:"#chaining-exception-handlers"},{default:t(()=>n[3]||(n[3]=[a("Chaining Exception Handlers")])),_:1,__:[3]})]),s("li",null,[e(p,{to:"#summary"},{default:t(()=>n[4]||(n[4]=[a("Summary")])),_:1,__:[4]})])])]),n[30]||(n[30]=s("hr",null,null,-1)),e(m,{name:"Global Error Handling in ASP.NET Core: From Middleware to Modern Handlers",desc:"Learn How to handle errors globally in ASP.NET Core using middleware, IProblemDetailsService, and the new IExceptionHandler in .NET 8. This week's issue walks you through pragmatic approaches to error handling, with real-world tips for validation, chaining, and observability.",url:"https://milanjovanovic.tech/blog/global-error-handling-in-aspnetcore-from-middleware-to-modern-handlers",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_150.png"}),n[31]||(n[31]=s("p",null,"Let's talk about something we all deal with but often put off until the last minute - error handling in our ASP.NET Core apps.",-1)),n[32]||(n[32]=s("p",null,"When something breaks in production, the last thing you want is a cryptic 500 error with zero context. Proper error handling isn't just about logging exceptions. It's about making sure your app fails gracefully and gives useful info to the caller (and you).",-1)),n[33]||(n[33]=s("p",null,"In this article, I'll walk through the main options for global error handling in ASP.NET Core.",-1)),n[34]||(n[34]=s("p",null,"We'll look at how I used to do it, what ASP.NET Core 9 offers now, and where each approach makes sense.",-1)),n[35]||(n[35]=s("hr",null,null,-1)),n[36]||(n[36]=s("h2",{id:"middleware-based-error-handling",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#middleware-based-error-handling"},[s("span",null,"Middleware-Based Error Handling")])],-1)),s("p",null,[n[6]||(n[6]=a("The classic way to catch unhandled exceptions is with custom ")),e(l,{to:"/milanjovanovic.tech/3-ways-to-create-middleware-in-asp-net-core.html"},{default:t(()=>n[5]||(n[5]=[s("strong",null,"middleware",-1)])),_:1,__:[5]}),n[7]||(n[7]=a(". This is where most of us start, and honestly, it still works great for most scenarios."))]),n[37]||(n[37]=o(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandlerMiddleware</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">RequestDelegate</span> next<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>GlobalExceptionHandlerMiddleware<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> <span class="token string">&quot;Unhandled exception occurred&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Make sure to set the status code before writing to the response body</span></span>
<span class="line">            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> ex <span class="token keyword">switch</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                ApplicationException <span class="token operator">=&gt;</span> StatusCodes<span class="token punctuation">.</span>Status400BadRequest<span class="token punctuation">,</span></span>
<span class="line">                _ <span class="token operator">=&gt;</span> StatusCodes<span class="token punctuation">.</span>Status500InternalServerError</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsJsonAsync</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProblemDetails</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    Type <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span></span>
<span class="line">                    Title <span class="token operator">=</span> <span class="token string">&quot;An error occured&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    Detail <span class="token operator">=</span> ex<span class="token punctuation">.</span>Message</span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Don&#39;t forget to add the middleware to the request pipeline:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseMiddleware</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GlobalExceptionHandlerMiddleware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This approach is solid and works everywhere in your pipeline. The beauty is its simplicity: wrap everything in a try-catch, log the error, and return a consistent response.</p><p>But once you start adding specific rules for different exception types (e.g. <code>ValidationException</code>, <code>NotFoundException</code>), this becomes a mess. You end up with long <code>if</code> / <code>else</code> chains or more abstractions to handle each exception type.</p>`,5)),s("p",null,[n[9]||(n[9]=a("Plus, you're manually crafting JSON responses, which means you're probably not following ")),s("a",S,[e(r,{icon:"fas fa-globe"}),n[8]||(n[8]=a("RFC 9457 (Problem Details)"))]),n[10]||(n[10]=a(" standards."))]),n[38]||(n[38]=o(`<hr><h2 id="enter-iproblemdetailsservice" tabindex="-1"><a class="header-anchor" href="#enter-iproblemdetailsservice"><span>Enter IProblemDetailsService</span></a></h2><p>Microsoft recognized this pain point and gave us <code>IProblemDetailsService</code> to standardize error responses. Instead of manually serializing our own error objects, we can use the built-in Problem Details format.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandlerMiddleware</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">RequestDelegate</span> next<span class="token punctuation">,</span></span>
<span class="line highlighted">    <span class="token class-name">IProblemDetailsService</span> problemDetailsService<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>GlobalExceptionHandlerMiddleware<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> <span class="token string">&quot;Unhandled exception occurred&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Make sure to set the status code before writing to the response body</span></span>
<span class="line">            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> ex <span class="token keyword">switch</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                ApplicationException <span class="token operator">=&gt;</span> StatusCodes<span class="token punctuation">.</span>Status400BadRequest<span class="token punctuation">,</span></span>
<span class="line">                _ <span class="token operator">=&gt;</span> StatusCodes<span class="token punctuation">.</span>Status500InternalServerError</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted">            <span class="token keyword">await</span> problemDetailsService<span class="token punctuation">.</span><span class="token function">TryWriteAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProblemDetailsContext</span></span>
<span class="line highlighted">            <span class="token punctuation">{</span></span>
<span class="line highlighted">                HttpContext <span class="token operator">=</span> httpContext<span class="token punctuation">,</span></span>
<span class="line highlighted">                Exception <span class="token operator">=</span> exception<span class="token punctuation">,</span></span>
<span class="line highlighted">                ProblemDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProblemDetails</span></span>
<span class="line highlighted">                <span class="token punctuation">{</span></span>
<span class="line highlighted">                    Type <span class="token operator">=</span> exception<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span></span>
<span class="line highlighted">                    Title <span class="token operator">=</span> <span class="token string">&quot;An error occured&quot;</span><span class="token punctuation">,</span></span>
<span class="line highlighted">                    Detail <span class="token operator">=</span> exception<span class="token punctuation">.</span>Message</span>
<span class="line highlighted">                <span class="token punctuation">}</span></span>
<span class="line highlighted">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("p",null,[n[12]||(n[12]=a("This is much cleaner. We're now using a standard format that API consumers expect, and we're not manually fiddling with JSON serialization. But we're still stuck with that growing switch statement problem. ")),e(l,{to:"/milanjovanovic.tech/problem-details-for-aspnetcore-apis.html"},{default:t(()=>n[11]||(n[11]=[s("strong",null,"You can learn more about using Problem Details in .NET here",-1)])),_:1,__:[11]}),n[13]||(n[13]=a("."))]),n[39]||(n[39]=o(`<hr><h2 id="the-modern-way-iexceptionhandler" tabindex="-1"><a class="header-anchor" href="#the-modern-way-iexceptionhandler"><span>The Modern Way: IExceptionHandler</span></a></h2><p>ASP.NET Core 8 introduced <code>IExceptionHandler</code>, and it&#39;s a game-changer. Instead of one massive middleware handling everything, we can create focused handlers for specific exception types.</p><p>Here&#39;s how it works:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">IProblemDetailsService</span> problemDetailsService<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>GlobalExceptionHandler<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span> <span class="token punctuation">:</span> IExceptionHandler</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">ValueTask<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> <span class="token function">TryHandleAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">HttpContext</span> httpContext<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Exception</span> exception<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>exception<span class="token punctuation">,</span> <span class="token string">&quot;Unhandled exception occurred&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> exception <span class="token keyword">switch</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            ApplicationException <span class="token operator">=&gt;</span> StatusCodes<span class="token punctuation">.</span>Status400BadRequest<span class="token punctuation">,</span></span>
<span class="line">            _ <span class="token operator">=&gt;</span> StatusCodes<span class="token punctuation">.</span>Status500InternalServerError</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">await</span> problemDetailsService<span class="token punctuation">.</span><span class="token function">TryWriteAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProblemDetailsContext</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            HttpContext <span class="token operator">=</span> httpContext<span class="token punctuation">,</span></span>
<span class="line">            Exception <span class="token operator">=</span> exception<span class="token punctuation">,</span></span>
<span class="line">            ProblemDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProblemDetails</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                Type <span class="token operator">=</span> exception<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span></span>
<span class="line">                Title <span class="token operator">=</span> <span class="token string">&quot;An error occured&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                Detail <span class="token operator">=</span> exception<span class="token punctuation">.</span>Message</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The key here is the return value. If your handler can deal with the exception, return <code>true</code>. If not, return <code>false</code> and let the next handler try.</p><p>Don&#39;t forget to register it with DI and the request pipeline:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddExceptionHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GlobalExceptionHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddProblemDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// And in your pipeline</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">UseExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This approach is so much cleaner. Each handler has one job, and the code is easy to test and maintain.</p><hr><h2 id="chaining-exception-handlers" tabindex="-1"><a class="header-anchor" href="#chaining-exception-handlers"><span>Chaining Exception Handlers</span></a></h2>`,11)),s("p",null,[n[15]||(n[15]=a("You can chain multiple ")),e(l,{to:"/milanjovanovic.tech/global-error-handling-in-aspnetcore-8.html"},{default:t(()=>n[14]||(n[14]=[s("strong",null,"exception handlers",-1)])),_:1,__:[14]}),n[16]||(n[16]=a(" together, and they'll run in the order you register them. ASP.NET Core will use the first one that returns ")),n[17]||(n[17]=s("code",null,"true",-1)),n[18]||(n[18]=a(" from ")),n[19]||(n[19]=s("code",null,"TryHandleAsync",-1)),n[20]||(n[20]=a("."))]),n[40]||(n[40]=o(`<p>Example: One for validation errors, one global fallback.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddExceptionHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ValidationExceptionHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddExceptionHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GlobalExceptionHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("p",null,[n[22]||(n[22]=a("Let's say you're using ")),s("a",T,[e(r,{icon:"fas fa-globe"}),n[21]||(n[21]=s("code",null,"FluentValidation",-1))]),n[23]||(n[23]=a(" (and you should be). Here's a complete setup:"))]),n[41]||(n[41]=o(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">ValidationExceptionHandler</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">IProblemDetailsService</span> problemDetailsService<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>ValidationExceptionHandler<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span> <span class="token punctuation">:</span> IExceptionHandler</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">ValueTask<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> <span class="token function">TryHandleAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">HttpContext</span> httpContext<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Exception</span> exception<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token class-name">ValidationException</span> validationException<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>exception<span class="token punctuation">,</span> <span class="token string">&quot;Unhandled exception occurred&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status400BadRequest<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProblemDetailsContext</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            HttpContext <span class="token operator">=</span> httpContext<span class="token punctuation">,</span></span>
<span class="line">            Exception <span class="token operator">=</span> exception<span class="token punctuation">,</span></span>
<span class="line">            ProblemDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProblemDetails</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                Detail <span class="token operator">=</span> <span class="token string">&quot;One or more validation errors occurred&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                Status <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status400BadRequest</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> errors <span class="token operator">=</span> validationException<span class="token punctuation">.</span>Errors</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>e <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span>PropertyName<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">ToDictionary</span><span class="token punctuation">(</span></span>
<span class="line">                g <span class="token operator">=&gt;</span> g<span class="token punctuation">.</span>Key<span class="token punctuation">.</span><span class="token function">ToLowerInvariant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                g <span class="token operator">=&gt;</span> g<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>e <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span>ErrorMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        context<span class="token punctuation">.</span>ProblemDetails<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;errors&quot;</span><span class="token punctuation">,</span> errors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">await</span> problemDetailsService<span class="token punctuation">.</span><span class="token function">TryWriteAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And in your app, just throw like this:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// In your controller or service - IValidator&lt;CreateUserRequest&gt;</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">CreateUser</span><span class="token punctuation">(</span><span class="token class-name">CreateUserRequest</span> request<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> _validator<span class="token punctuation">.</span><span class="token function">ValidateAndThrowAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Your business logic here</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The execution order is important. The framework will try each handler in the order you registered them. So put your most specific handlers first, and your catch-all handler last.</p><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>We&#39;ve come a long way from the days of manually crafting error responses in middleware. The evolution looks like this:</p>`,7)),s("ul",null,[s("li",null,[e(l,{to:"/milanjovanovic.tech/3-ways-to-create-middleware-in-asp-net-core.html"},{default:t(()=>n[24]||(n[24]=[s("strong",null,"Middleware",-1)])),_:1,__:[24]}),n[25]||(n[25]=a(": Simple, works everywhere, but gets complex fast"))]),s("li",null,[e(l,{to:"/milanjovanovic.tech/problem-details-for-aspnetcore-apis.html"},{default:t(()=>n[26]||(n[26]=[s("strong",null,"IProblemDetailsService",-1)])),_:1,__:[26]}),n[27]||(n[27]=a(": Standardizes response format, still manageable"))]),s("li",null,[e(l,{to:"/milanjovanovic.tech/global-error-handling-in-aspnetcore-8.html"},{default:t(()=>n[28]||(n[28]=[s("strong",null,"IExceptionHandler",-1)])),_:1,__:[28]}),n[29]||(n[29]=a(": Modern, testable, and scales beautifully"))])]),n[42]||(n[42]=s("p",null,[a("For new projects, I'd go straight to "),s("code",null,"IExceptionHandler"),a(". It's cleaner, more maintainable, and gives you the flexibility to handle different exception types exactly how you want.")],-1)),n[43]||(n[43]=s("p",null,"The key takeaway? Don't let error handling be an afterthought. Set it up early, make it consistent, and your users (and your future self) will thank you when things inevitably go wrong.",-1)),n[44]||(n[44]=s("hr",null,null,-1)),b(" TODO: add ARTICLE CARD "),e(c,u(d({title:"Global Error Handling in ASP.NET Core: From Middleware to Modern Handlers",desc:"Learn How to handle errors globally in ASP.NET Core using middleware, IProblemDetailsService, and the new IExceptionHandler in .NET 8. This week's issue walks you through pragmatic approaches to error handling, with real-world tips for validation, chaining, and observability.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/global-error-handling-in-aspnetcore-from-middleware-to-modern-handlers.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const P=v(w,[["render",H]]),M=JSON.parse('{"path":"/milanjovanovic.tech/global-error-handling-in-aspnetcore-from-middleware-to-modern-handlers.html","title":"Global Error Handling in ASP.NET Core: From Middleware to Modern Handlers","lang":"en-US","frontmatter":{"lang":"en-US","title":"Global Error Handling in ASP.NET Core: From Middleware to Modern Handlers","description":"Article(s) > Global Error Handling in ASP.NET Core: From Middleware to Modern Handlers","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Global Error Handling in ASP.NET Core: From Middleware to Modern Handlers\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_150.png\\"],\\"datePublished\\":\\"2025-07-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/global-error-handling-in-aspnetcore-from-middleware-to-modern-handlers.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Global Error Handling in ASP.NET Core: From Middleware to Modern Handlers"}],["meta",{"property":"og:description","content":"Article(s) > Global Error Handling in ASP.NET Core: From Middleware to Modern Handlers"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_150.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_150.png"}],["meta",{"name":"twitter:image:alt","content":"Global Error Handling in ASP.NET Core: From Middleware to Modern Handlers"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-07-12T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Global Error Handling in ASP.NET Core: From Middleware to Modern Handlers"},{"property":"og:description","content":"Global Error Handling in ASP.NET Core: From Middleware to Modern Handlers"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/global-error-handling-in-aspnetcore-from-middleware-to-modern-handlers.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-07-12T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_150.png"},"git":{},"readingTime":{"minutes":4.23,"words":1269},"filePathRelative":"milanjovanovic.tech/global-error-handling-in-aspnetcore-from-middleware-to-modern-handlers.md","copyright":{"author":"Milan Jovanović"}}');export{P as comp,M as data};
