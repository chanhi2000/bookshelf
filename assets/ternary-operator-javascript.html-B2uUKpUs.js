import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as n,f as e,b as l,a as h,t as b,n as u,g as d,w as t,e as a,r as i,o as y}from"./app-BVguHYKu.js";const f="/bookshelf/assets/image/blog.logrocket.com/ternary-operator-javascript/banner.png",w="/bookshelf/assets/image/blog.logrocket.com/ternary-operator-javascript/ternary-operator-broswer-compatability.png",q={},j={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},S={class:"table-of-contents"},T={href:"https://legacy.reactjs.org/docs/introducing-jsx.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://caniuse.com/mdn-javascript_operators_conditional",target:"_blank",rel:"noopener noreferrer"};function J(k,s){const r=i("VPCard"),o=i("router-link"),m=i("SiteInfo"),p=i("RouteLink"),c=i("VPIcon");return y(),v("div",null,[n("h1",j,[n("a",x,[n("span",null,b(k.$frontmatter.title)+" 관련",1)])]),e(r,u(d({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",S,[n("ul",null,[n("li",null,[e(o,{to:"#what-is-the-ternary-operator-in-javascript"},{default:t(()=>s[0]||(s[0]=[a("What is the ternary operator in JavaScript?")])),_:1,__:[0]}),n("ul",null,[n("li",null,[e(o,{to:"#condition"},{default:t(()=>s[1]||(s[1]=[a("condition")])),_:1,__:[1]})]),n("li",null,[e(o,{to:"#the-question-mark"},{default:t(()=>s[2]||(s[2]=[a("?: The question mark")])),_:1,__:[2]})]),n("li",null,[e(o,{to:"#dothisiftrue"},{default:t(()=>s[3]||(s[3]=[a("doThisIfTrue")])),_:1,__:[3]})]),n("li",null,[e(o,{to:"#otherwise"},{default:t(()=>s[4]||(s[4]=[a(":: Otherwise")])),_:1,__:[4]})]),n("li",null,[e(o,{to:"#dothisiffalse"},{default:t(()=>s[5]||(s[5]=[a("doThisIfFalse")])),_:1,__:[5]})])])]),n("li",null,[e(o,{to:"#how-to-use-the-ternary-operator-in-javascript"},{default:t(()=>s[6]||(s[6]=[a("How to use the ternary operator in JavaScript")])),_:1,__:[6]}),n("ul",null,[n("li",null,[e(o,{to:"#falsy-values"},{default:t(()=>s[7]||(s[7]=[a("Falsy values")])),_:1,__:[7]})])])]),n("li",null,[e(o,{to:"#nested-ternary-operators"},{default:t(()=>s[8]||(s[8]=[a("Nested ternary operators")])),_:1,__:[8]})]),n("li",null,[e(o,{to:"#using-nested-ternary-operators-for-multiple-conditions"},{default:t(()=>s[9]||(s[9]=[a("Using nested ternary operators for multiple conditions")])),_:1,__:[9]})]),n("li",null,[e(o,{to:"#using-the-ternary-operator-in-javascript-frameworks"},{default:t(()=>s[10]||(s[10]=[a("Using the ternary operator in JavaScript frameworks")])),_:1,__:[10]})]),n("li",null,[e(o,{to:"#advantages-and-pitfalls-of-if-else-and-ternary-operators"},{default:t(()=>s[11]||(s[11]=[a("Advantages and pitfalls of if...else and ternary operators")])),_:1,__:[11]})]),n("li",null,[e(o,{to:"#browser-compatibility"},{default:t(()=>s[12]||(s[12]=[a("Browser compatibility")])),_:1,__:[12]})]),n("li",null,[e(o,{to:"#conclusion"},{default:t(()=>s[13]||(s[13]=[a("Conclusion")])),_:1,__:[13]})])])]),s[35]||(s[35]=n("hr",null,null,-1)),e(m,{name:"How to use the ternary operator in JavaScript",desc:"Learn how to use the ternary operator in JavaScript, from its syntax to real-world examples, so you can write cleaner code.",url:"https://blog.logrocket.com/ternary-operator-javascript",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/ternary-operator-javascript/banner.png"}),s[36]||(s[36]=n("p",null,[a("You know how people say, “Programming is basically just a bunch of "),n("code",null,"if...else"),a(" decisions”? I couldn’t agree more!")],-1)),s[37]||(s[37]=n("figure",null,[n("img",{src:f,alt:"how to use the ternary operator in javascript",tabindex:"0",loading:"lazy"}),n("figcaption",null,"how to use the ternary operator in javascript")],-1)),s[38]||(s[38]=n("p",null,[a("Think about it: almost everything in our code comes down to “if this happens, do that; if not, do something else.” It’s the programming DNA. And if you’re just starting your JavaScript journey, I’m excited to show you a really cool trick that’ll make your "),n("code",null,"if...else"),a(" statements cleaner with the JavaScript ternary operator.")],-1)),s[39]||(s[39]=n("p",null,"A few prerequisites before we get into it:",-1)),n("ul",null,[n("li",null,[n("p",null,[s[15]||(s[15]=a("Basic JavaScript fundamentals, such as ")),e(p,{to:"/blog.logrocket.com/understanding-symbols-in-javascript.html"},{default:t(()=>s[14]||(s[14]=[n("strong",null,"data types",-1)])),_:1,__:[14]}),s[16]||(s[16]=a(" (strings, numbers, and booleans), and understanding true or false values"))])]),s[17]||(s[17]=l("<li><p>Proficiency in writing <code>if…else</code> conditional statements</p></li><li><p>An understanding of how to use the comparison operators:</p></li><li><p><code>===</code>: strict equality</p></li><li><p><code>!==</code>: strict inequality</p></li><li><p><code>&gt;</code>: greater than</p></li><li><p><code>&lt;</code>: less than</p></li><li><p><code>&gt;=</code>: greater than or equal</p></li><li><p><code>&lt;=</code>: less than or equal</p></li>",8))]),s[40]||(s[40]=n("p",null,"The goal of this article is to add to your JavaScript knowledge of shortcuts by mastering the ternary operator. We will cover everything from the syntax to real-world examples, so you can write cleaner code that your fellow developers will love.",-1)),s[41]||(s[41]=n("hr",null,null,-1)),s[42]||(s[42]=n("h2",{id:"what-is-the-ternary-operator-in-javascript",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#what-is-the-ternary-operator-in-javascript"},[n("span",null,"What is the ternary operator in JavaScript?")])],-1)),n("p",null,[s[19]||(s[19]=a("One of the most repeated principles in programming is the ")),e(p,{to:"/blog.logrocket.com/make-your-design-system-dry-with-zag.html"},{default:t(()=>s[18]||(s[18]=[n("strong",null,"DRY principle",-1)])),_:1,__:[18]}),s[20]||(s[20]=a(": “Don’t Repeat Yourself.”"))]),s[43]||(s[43]=n("p",null,[a("It’s pretty self-explanatory; do not be redundant. If there’s a straightforward way that keeps your code maintainable and readable, use it. That’s exactly why the ternary operator in JavaScript was created: as a shorthand for the "),n("code",null,"if...else"),a(" statement.")],-1)),n("p",null,[s[22]||(s[22]=a("The JavaScript ternary operator ")),e(p,{to:"/blog.logrocket.com/javascript-typescript-shorthands.html"},{default:t(()=>s[21]||(s[21]=[n("strong",null,"shorthand",-1)])),_:1,__:[21]}),s[23]||(s[23]=a(" allows us to write conditional statements in a single line, using three parts (hence the name “ternary”). It is the only JavaScript operator that takes three operands."))]),s[44]||(s[44]=l(`<p>Below is the syntax:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">condition <span class="token operator">?</span> doThisIfTrue<span class="token operator">:</span> doThisIfFalse</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Let’s carefully walk through the syntax above, for a better understanding.</p><h3 id="condition" tabindex="-1"><a class="header-anchor" href="#condition"><span><code>condition</code></span></a></h3><p>The syntax starts with a <code>condition</code>. This is where any expression that evaluates to true or false comes in. For example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">age <span class="token operator">&gt;=</span> <span class="token number">18</span></span>
<span class="line">username <span class="token operator">===</span> <span class="token string">&quot;admin&quot;</span></span>
<span class="line">isLoggedIn <span class="token operator">&amp;&amp;</span> hasPermission</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="the-question-mark" tabindex="-1"><a class="header-anchor" href="#the-question-mark"><span><code>?</code>: The question mark</span></a></h3><p>Next, we have the question mark, <code>?</code>. Think of it as asking a question like, “Then what?”. This question mark separates your condition from your outcomes, and should always come after your condition.</p><h3 id="dothisiftrue" tabindex="-1"><a class="header-anchor" href="#dothisiftrue"><span><code>doThisIfTrue</code></span></a></h3><p>This code runs only when our condition is true. This can either be a value, an expression, or a function call:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token string">&quot;You&#39;re an adult&quot;</span></span>
<span class="line"><span class="token function">calculateBonus</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="otherwise" tabindex="-1"><a class="header-anchor" href="#otherwise"><span><code>:</code>: Otherwise</span></a></h3><p>This comes right after the true outcome, and just before the false outcome of your condition. It essentially means, “Otherwise, do this instead”.</p><h3 id="dothisiffalse" tabindex="-1"><a class="header-anchor" href="#dothisiffalse"><span><code>doThisIfFalse</code></span></a></h3><p>This code runs if your condition is false. Just like <code>true,</code> it can take a value, an expression, or a function call.</p><p>Now we know the syntax, let’s play around with some examples.</p><hr><h2 id="how-to-use-the-ternary-operator-in-javascript" tabindex="-1"><a class="header-anchor" href="#how-to-use-the-ternary-operator-in-javascript"><span>How to use the ternary operator in JavaScript</span></a></h2><p>Let’s walk through practical examples and best practices for writing clean, maintainable code using the ternary operator.</p><p>We’ll write a basic code check for website access. Let’s say, for example, we do not want kids below 14 to have access to our social media application.</p><p>Using the traditional <code>if...else</code> statement, our logic should look like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> message<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    message <span class="token operator">=</span> <span class="token string">&quot;Welcome to the site!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    message <span class="token operator">=</span> <span class="token string">&quot;Sorry, you must be 14 or older&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// Output: &quot;Welcome to the site!&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In our code above, our user is said to be 17 years old. We create a <code>message</code> variable that will store whatever message is appropriate for their age. Our <code>if...else</code> statements dictate that if the user’s age is greater or equal to 14 years, they should be welcomed to the site. Otherwise, they should see a friendly message asking them to return when they’re older.</p><p>When we <code>console.log()</code> the message, our output is <code>Welcome to the site!</code>, because our user is over 14. But using the ternary operator, it looks like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> message <span class="token operator">=</span> age <span class="token operator">&gt;=</span> <span class="token number">14</span> <span class="token operator">?</span> <span class="token string">&quot;Welcome to the site!&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Sorry, you must be 14 or older&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: &quot;Welcome to the site!&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Just like that, we have turned six lines of code into two:</p><ul><li><code>age &gt;= 14</code>: Our condition</li><li><code>?</code>: Asks, “What happens if the user is greater or equal to 14 years?”</li><li><code>&quot;Welcome to the site!&quot;</code>: What we show if they’re 14 or older</li><li><code>:</code> : Says that if the user isn’t 14, show them the friendly message, <code>&quot;Sorry,you must be 14 or older&quot;</code></li></ul><p>Same result, but way cleaner. Let’s test a different age:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">age <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    message <span class="token operator">=</span> <span class="token string">&quot;Welcome to the site!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    message <span class="token operator">=</span> <span class="token string">&quot;Sorry, you must be 14 or older go read your books&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The ternary operator looks like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">age <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span></span>
<span class="line">message <span class="token operator">=</span> age <span class="token operator">&gt;=</span> <span class="token number">14</span> <span class="token operator">?</span> <span class="token string">&quot;Welcome to the site!&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Sorry, you must be 14 or older go read your books&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>What will our output be? Because our user is less than 14, they must get the friendly message that reads, <code>Sorry, must be 14 or older go read your books</code>.</p><h3 id="falsy-values" tabindex="-1"><a class="header-anchor" href="#falsy-values"><span>Falsy values</span></a></h3><p>When you’re working with ternary operators, there are many values that JavaScript sees as ‘false-like’. These are called falsy values. While the boolean <code>false</code> is the most obvious one, there are several other subtle values that will also trigger the second part of your ternary:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Let&#39;s see what happens with each of these tricky values:</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> userInput <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> message <span class="token operator">=</span> userInput <span class="token operator">?</span> <span class="token string">&quot;Got your input!&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;No input received...&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// You&#39;ll see: &quot;No input received...&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> cartTotal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> checkoutStatus <span class="token operator">=</span> cartTotal <span class="token operator">?</span> <span class="token string">&quot;Ready to pay!&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Your cart is empty&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// You&#39;ll see: &quot;Your cart is empty&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> userName <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> greeting <span class="token operator">=</span> userName <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hi </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&quot;Hi stranger!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// You&#39;ll see: &quot;Hi stranger!&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// A practical example you might use:</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">getUserDisplay</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> user<span class="token operator">?.</span>name <span class="token operator">?</span> user<span class="token punctuation">.</span>name <span class="token operator">:</span> <span class="token string">&quot;Anonymous User&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Whenever your condition is <code>null</code>, <code>NaN</code>, <code>0</code>, an empty string (<code>&quot;&quot;</code>), or <code>undefined</code>, JavaScript will run the code after the<code>:</code>, instead of what’s after the <code>?</code>.</p>`,36)),n("p",null,[s[25]||(s[25]=a("It’s like ")),e(p,{to:"/blog.logrocket.com/javascript-null-empty-function.html"},{default:t(()=>s[24]||(s[24]=[n("strong",null,"these values",-1)])),_:1,__:[24]}),s[26]||(s[26]=a(" are automatic red flags that tell JavaScript, “Nope, let us focus on Plan B!”. This comes in handy in a real-world scenario when you’re handling user input or checking if data exists."))]),s[45]||(s[45]=l(`<hr><h2 id="nested-ternary-operators" tabindex="-1"><a class="header-anchor" href="#nested-ternary-operators"><span>Nested ternary operators</span></a></h2><p>Let me introduce something called an <code>if...else</code> - <code>if...else</code> statement. This statement checks multiple conditions and executes different code blocks based on which condition is true.</p><p>In cases where you may want to write an <code>if...else</code> - <code>if...else</code> statement, you could easily pull this off with a ternary operator.</p><p>Let’s consider a new example. We have a standard ticket price of $20, but we believe in making our events accessible to everyone. Senior citizens 65 and above receive a 50% discount, bringing their ticket price down to $10. Adults between 18 and 64 pay the regular price of $20, while young people under 18 can enjoy a special youth rate of $12. Let’s go ahead to write the logic:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Traditional way</span></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> ticketPrice<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    ticketPrice <span class="token operator">=</span> <span class="token string">&quot;Senior discount: $10&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    ticketPrice <span class="token operator">=</span> <span class="token string">&quot;Full price: $20&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    ticketPrice <span class="token operator">=</span> <span class="token string">&quot;Student discount: $12&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// Output: &quot;Senior discount: $10&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In our code, we assume the user is a senior citizen, so they get the discount. Using the ternary operator, we have:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Nested ternary way (use carefully!)</span></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> ticketPrice <span class="token operator">=</span> age <span class="token operator">&gt;=</span> <span class="token number">65</span> <span class="token operator">?</span> <span class="token string">&quot;Senior discount: $10&quot;</span></span>
<span class="line">                <span class="token operator">:</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">?</span> <span class="token string">&quot;Full price: $20&quot;</span></span>
<span class="line">                <span class="token operator">:</span> <span class="token string">&quot;Student discount: $12&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Output: &quot;Senior discount: $10&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This example works well. However, when nested operators get too complicated, they counteract the purpose of a ternary operator, which is to make your code more readable. When things get bulky, they become a bit hard to read - which we’ll see in the next section.</p><hr><h2 id="using-nested-ternary-operators-for-multiple-conditions" tabindex="-1"><a class="header-anchor" href="#using-nested-ternary-operators-for-multiple-conditions"><span>Using nested ternary operators for multiple conditions</span></a></h2><p>When using the ternary operator in a single line, the code is not only straightforward; it’s also simpler to read. The question mark is like asking a question about the condition. Let’s take for example the code below:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">speed <span class="token operator">&gt;</span> <span class="token number">70</span> <span class="token operator">?</span> <span class="token string">&quot;You get a ticket&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;You&#39;re good to go&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This is followed by a question mark, saying, <code>is speed greater than 70?</code>. If true, you get a ticket; if false you don’t.</p><p>In cases with a nested condition, the code reads better using the ternary. For example, consider the age ticket logic above. Once we are done with the initial statement (whether someone qualifies for a senior discount), we just use a colon<code>:</code>instead of “else if.”</p><p>This basically means “otherwise, check this.” It flows more naturally, like asking a series of questions:</p><ul><li>Are you 65 or older? Yes → Senior discount</li><li>Otherwise, are you 18 or older? Yes → Full price</li><li>Otherwise → Student price:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  ticketPrice <span class="token operator">=</span> <span class="token string">&quot;Senior discount: $10&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ternaries do have their limits. When you start nesting multiple conditions inside each other, they can turn into a tangled mess that’ll make your head spin trying to read it.</p><p>Let’s say we want to add a membership status and weekend pricing to our ticket system, using the traditional <code>if...else</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Traditional \`if...else\`:</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>isMember<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>isWeekend<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      ticketPrice <span class="token operator">=</span> <span class="token string">&quot;Senior member weekend: $12&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      ticketPrice <span class="token operator">=</span> <span class="token string">&quot;Senior member: $8&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>isWeekend<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      ticketPrice <span class="token operator">=</span> <span class="token string">&quot;Senior weekend: $15&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      ticketPrice <span class="token operator">=</span> <span class="token string">&quot;Senior regular: $10&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  ticketPrice <span class="token operator">=</span> <span class="token string">&quot;Regular price: $20&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Now the ternary version - watch as this gets wild!</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> ticketPrice <span class="token operator">=</span> age <span class="token operator">&gt;=</span> <span class="token number">65</span></span>
<span class="line">  <span class="token operator">?</span> isMember</span>
<span class="line">    <span class="token operator">?</span> isWeekend</span>
<span class="line">      <span class="token operator">?</span> <span class="token string">&quot;Senior member weekend: $12&quot;</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token string">&quot;Senior member: $8&quot;</span></span>
<span class="line">    <span class="token operator">:</span> isWeekend</span>
<span class="line">      <span class="token operator">?</span> <span class="token string">&quot;Senior weekend: $15&quot;</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token string">&quot;Senior regular: $10&quot;</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token string">&quot;Regular price: $20&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the code above, we’re checking three things: age, membership, and whether or not it’s the weekend.</p><p>In the <code>if...else</code> version, you can follow the logic by reading each block. But the ternary version resembles a pyramid of question marks and colons. Yes, it has fewer characters, but to what benefit?</p><p>In cases like this, you might not want to use the ternary operator, as it inhibits readability.</p><hr><h2 id="using-the-ternary-operator-in-javascript-frameworks" tabindex="-1"><a class="header-anchor" href="#using-the-ternary-operator-in-javascript-frameworks"><span>Using the ternary operator in JavaScript frameworks</span></a></h2>`,26)),n("p",null,[s[29]||(s[29]=a("Ternary operators are actually very common in ")),e(p,{to:"/blog.logrocket.com/react-design-patterns.html"},{default:t(()=>s[27]||(s[27]=[n("strong",null,"React components",-1)])),_:1,__:[27]}),s[30]||(s[30]=a(" because they work and look great with ")),n("a",T,[e(c,{icon:"fa-brands fa-react"}),s[28]||(s[28]=a("JSX"))]),s[31]||(s[31]=a(".Let’s go through some examples of conditional renderings in React."))]),s[46]||(s[46]=l(`<p>The code below shows a traditional <code>if...else</code> approach, where we check if a user is logged in and return different welcome messages accordingly:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">UserGreeting</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> isLoggedIn<span class="token punctuation">,</span> username <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Welcome back, </span><span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token plain-text">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Please log in</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Instead of this, we can write:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">function</span> <span class="token function">UserGreeting</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> isLoggedIn<span class="token punctuation">,</span> username <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>isLoggedIn <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Welcome back, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&quot;Please log in&quot;</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the code above we achieved exactly the same result by using the ternary operator. It’s even slicker at handling conditional styles or classes. This right here is very common:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> isActive <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>button</span>
<span class="line">      className<span class="token operator">=</span><span class="token punctuation">{</span>isActive <span class="token operator">?</span> <span class="token string">&quot;bg-blue-500&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;bg-gray-300&quot;</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>isActive <span class="token operator">?</span> <span class="token string">&quot;Active&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Inactive&quot;</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The React button component above takes a single prop <code>isActive</code> and uses ternary operators to toggle both its background color (between blue and gray) and its text content (between <code>&quot;Active&quot;</code> and <code>&quot;Inactive&quot;</code>) based on whether <code>isActive</code> is true or false.</p><p>We can handle a loading state too:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">DataDisplay</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> isLoading<span class="token punctuation">,</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>isLoading</span>
<span class="line">        <span class="token operator">?</span> <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">:</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="advantages-and-pitfalls-of-if-else-and-ternary-operators" tabindex="-1"><a class="header-anchor" href="#advantages-and-pitfalls-of-if-else-and-ternary-operators"><span>Advantages and pitfalls of <code>if...else</code> and ternary operators</span></a></h2><p>During this article, we have seen the advantages and pitfalls of both the traditional <code>if...else</code> statement and the ternary operator. Let’s compare them directly:</p><p>| | <code>if…else</code> Statements | Ternary Operators | | <strong>Readability</strong> | Simple and clear to read and understand | Can become unreadable when multiply-nested | | <strong>Code Length</strong> | Takes up more lines of code | Clean, one-line code | | <strong>Best Use Case</strong> | Suitable for complex logic with multiple conditions | Ideal for simple conditional assignments | | <strong>Execution Scope</strong> | Great for executing multiple lines of code | Works well for inline JSX in React | | <strong>Skill Level Required</strong> | Familiar to all levels of developers | Can confuse newbies in JavaScript | | <strong>Potential Downsides</strong> | Looks verbose for very simple conditions; sometimes feels like overkill for simple checks | Easy to abuse with complex conditions | | <strong>Overall Practicality</strong> | Preferred for clarity and structured logic | Best for concise, straightforward conditions |</p><hr><h2 id="browser-compatibility" tabindex="-1"><a class="header-anchor" href="#browser-compatibility"><span>Browser compatibility</span></a></h2>`,15)),n("p",null,[s[33]||(s[33]=a("The ternary operator should be compatible with all browsers below. This chart comes courtesy of ")),n("a",I,[e(c,{icon:"fas fa-globe"}),s[32]||(s[32]=a("Can I Use"))]),s[34]||(s[34]=a(":"))]),s[47]||(s[47]=n("figure",null,[n("img",{src:w,alt:"ternary operator browser compatibility chart from can i use",tabindex:"0",loading:"lazy"}),n("figcaption",null,"ternary operator browser compatibility chart from can i use")],-1)),s[48]||(s[48]=n("hr",null,null,-1)),s[49]||(s[49]=n("h2",{id:"conclusion",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#conclusion"},[n("span",null,"Conclusion")])],-1)),s[50]||(s[50]=n("p",null,[a("In this article, we walked through the best practices of using the ternary operator in JavaScript, its advantages, and its pitfalls. I will leave you a little advice of mine; if you have to think twice about whether a ternary is readable, it’s probably time to use an "),n("code",null,"if…else"),a(" statement instead. Keep it simple, and keep coding!")],-1)),h(" TODO: add ARTICLE CARD "),e(r,u(d({title:"How to use the ternary operator in JavaScript",desc:"Learn how to use the ternary operator in JavaScript, from its syntax to real-world examples, so you can write cleaner code.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/ternary-operator-javascript.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const A=g(q,[["render",J]]),L=JSON.parse('{"path":"/blog.logrocket.com/ternary-operator-javascript.html","title":"How to use the ternary operator in JavaScript","lang":"en-US","frontmatter":{"lang":"en-US","title":"How to use the ternary operator in JavaScript","description":"Article(s) > How to use the ternary operator in JavaScript","icon":"fa-brands fa-js","category":["JavaScript","Article(s)"],"tag":["blog","blog.logrocket.com","js","javascript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to use the ternary operator in JavaScript\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/ternary-operator-javascript/banner.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/ternary-operator-javascript/ternary-operator-broswer-compatability.png\\"],\\"datePublished\\":\\"2025-02-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chizaram Ken\\",\\"url\\":\\"https://blog.logrocket.com/author/emmanuelodioko/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/ternary-operator-javascript.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to use the ternary operator in JavaScript"}],["meta",{"property":"og:description","content":"Article(s) > How to use the ternary operator in JavaScript"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/ternary-operator-javascript/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/ternary-operator-javascript/banner.png"}],["meta",{"name":"twitter:image:alt","content":"How to use the ternary operator in JavaScript"}],["meta",{"property":"article:author","content":"Chizaram Ken"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-02-21T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How to use the ternary operator in JavaScript"},{"property":"og:description","content":"How to use the ternary operator in JavaScript"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/ternary-operator-javascript.html"}]],"prev":"/programming/js/articles/README.md","date":"2025-02-21T00:00:00.000Z","isOriginal":false,"author":[{"name":"Chizaram Ken","url":"https://blog.logrocket.com/author/emmanuelodioko/"}],"cover":"/assets/image/blog.logrocket.com/ternary-operator-javascript/banner.png"},"git":{},"readingTime":{"minutes":7.85,"words":2355},"filePathRelative":"blog.logrocket.com/ternary-operator-javascript.md","copyright":{"author":"Chizaram Ken"}}');export{A as comp,L as data};
