import{_ as f}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as e,b as o,a as k,t as v,n as m,g as b,w as l,e as a,r,o as y}from"./app-BVguHYKu.js";const w={},x={id:"frontmatter-title-관련",tabindex:"-1"},S={class:"header-anchor",href:"#frontmatter-title-관련"},q={class:"table-of-contents"},G={href:"https://en.wikipedia.org/wiki/Colour_banding",target:"_blank",rel:"noopener noreferrer"},A={href:"https://css-tricks.com/easing-linear-gradients/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://graphicdesign.stackexchange.com/a/36045",target:"_blank",rel:"noopener noreferrer"},T={href:"https://youtu.be/xmrfj5qrXAw",target:"_blank",rel:"noopener noreferrer"},B={href:"https://css-tricks.com/grainy-gradients/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://youtu.be/cA39j6p3Yho",target:"_blank",rel:"noopener noreferrer"},I={href:"https://drafts.fxtf.org/filter-effects/#feTurbulenceElement",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/w3c/fxtf-drafts/issues/596",target:"_blank",rel:"noopener noreferrer"},P={href:"https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Element/feBlend",target:"_blank",rel:"noopener noreferrer"},R={href:"https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Element/feComposite",target:"_blank",rel:"noopener noreferrer"},N={href:"https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Element/feMerge",target:"_blank",rel:"noopener noreferrer"},V={href:"https://drafts.fxtf.org/filter-effects/#FilterEffectsRegion",target:"_blank",rel:"noopener noreferrer"},E={href:"https://bsky.app/profile/anatudor.bsky.social/post/3lmgrfcnbsc2k",target:"_blank",rel:"noopener noreferrer"},W={href:"https://bsky.app/profile/anatudor.bsky.social/post/3lfesl2dpj22u",target:"_blank",rel:"noopener noreferrer"},F={href:"https://codepen.io/thebabydino/pen/gbbBWzL",target:"_blank",rel:"noopener noreferrer"},M={href:"https://bugs.webkit.org/show_bug.cgi?id=291190",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/web-platform-tests/interop/issues/717",target:"_blank",rel:"noopener noreferrer"},O={href:"https://issues.chromium.org/issues/41208242",target:"_blank",rel:"noopener noreferrer"},$={href:"https://bugzilla.mozilla.org/show_bug.cgi?id=1191043",target:"_blank",rel:"noopener noreferrer"},U={href:"https://codepen.io/thebabydino/pen/LEVxYoL",target:"_blank",rel:"noopener noreferrer"},L={href:"https://codepen.io/thebabydino/pen/dPoNXWp",target:"_blank",rel:"noopener noreferrer"},J={href:"https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Element/feGaussianBlur",target:"_blank",rel:"noopener noreferrer"},X={href:"https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Element/feOffset",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://svgwg.org/svg2-draft/pservers.html#RadialGradientAttributes",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://codepen.io/thebabydino/pen/bGPMOpJ",target:"_blank",rel:"noopener noreferrer"},H={href:"https://codepen.io/thebabydino/pen/azONXNb/",target:"_blank",rel:"noopener noreferrer"};function Q(d,n){const c=r("VPCard"),i=r("router-link"),p=r("SiteInfo"),t=r("VPIcon"),g=r("VidStack"),u=r("CodePen");return y(),h("div",null,[s("h1",x,[s("a",S,[s("span",null,v(d.$frontmatter.title)+" 관련",1)])]),e(c,m(b({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",q,[s("ul",null,[s("li",null,[e(i,{to:"#previous-solutions"},{default:l(()=>n[0]||(n[0]=[a("Previous Solutions")])),_:1,__:[0]})]),s("li",null,[e(i,{to:"#the-big-problem-with-layering-the-noise-and-the-gradient"},{default:l(()=>n[1]||(n[1]=[a("The big problem with layering the noise and the gradient")])),_:1,__:[1]})]),s("li",null,[e(i,{to:"#a-better-solution"},{default:l(()=>n[2]||(n[2]=[a("A better solution")])),_:1,__:[2]}),s("ul",null,[s("li",null,[e(i,{to:"#a-problem-with-this-solution"},{default:l(()=>n[3]||(n[3]=[a("A problem with this solution")])),_:1,__:[3]})]),s("li",null,[e(i,{to:"#improving-things-for-the-future"},{default:l(()=>n[4]||(n[4]=[a("Improving things for the future")])),_:1,__:[4]})])])]),s("li",null,[e(i,{to:"#some-more-examples"},{default:l(()=>n[5]||(n[5]=[a("Some more examples")])),_:1,__:[5]}),s("ul",null,[s("li",null,[e(i,{to:"#grainy-image-shadows"},{default:l(()=>n[6]||(n[6]=[a("Grainy image shadows")])),_:1,__:[6]})]),s("li",null,[e(i,{to:"#grainy-image-fade"},{default:l(()=>n[7]||(n[7]=[a("Grainy image fade")])),_:1,__:[7]})]),s("li",null,[e(i,{to:"#noisy-gradient-discs"},{default:l(()=>n[8]||(n[8]=[a("Noisy gradient discs")])),_:1,__:[8]})]),s("li",null,[e(i,{to:"#animated-singleimggradient-glow-border"},{default:l(()=>n[9]||(n[9]=[a("Animated singleimggradient glow border")])),_:1,__:[9]})]),s("li",null,[e(i,{to:"#grainy-css-backgrounds"},{default:l(()=>n[10]||(n[10]=[a("Grainy CSS backgrounds")])),_:1,__:[10]})]),s("li",null,[e(i,{to:"#grainy-svg-backgrounds"},{default:l(()=>n[11]||(n[11]=[a("Grainy SVG backgrounds")])),_:1,__:[11]})])])])])]),n[194]||(n[194]=s("hr",null,null,-1)),e(p,{name:"Grainy Gradients",desc:"This is about reducing banding effects in gradients by introducing noise. A nice approach is a displacement map using SVG filters.",url:"https://frontendmasters.com/blog/grainy-gradients/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6066"}),s("p",null,[n[13]||(n[13]=a("You know when you set a ")),n[14]||(n[14]=s("code",null,"background",-1)),n[15]||(n[15]=a(" gradient or a gradient ")),n[16]||(n[16]=s("code",null,"mask",-1)),n[17]||(n[17]=a(" and you get an ugly")),s("a",G,[e(t,{icon:"fa-brands fa-wikipedia-w"}),n[12]||(n[12]=a("banding"))]),n[18]||(n[18]=a(" effect? If you can’t picture what I mean, here’s an example:"))]),n[195]||(n[195]=s("figure",null,[s("img",{src:"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/451853285-2c07e7e7-53b6-4cc7-b7fe-2b251e7c8fd0.png?resize=900%2C450&ssl=1",alt:"A left to right pinkinsh orange to dark grey gradient exhibiting banding.",tabindex:"0",loading:"lazy"}),s("figcaption",null,"A left to right pinkinsh orange to dark grey gradient exhibiting banding.")],-1)),n[196]||(n[196]=s("p",null,"example gradient with banding",-1)),n[197]||(n[197]=s("hr",null,null,-1)),n[198]||(n[198]=s("h2",{id:"previous-solutions",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#previous-solutions"},[s("span",null,"Previous Solutions")])],-1)),e(p,{name:"Previous Solutions",desc:"Previous solutions | Better grainy gradients to fix the gradient banding problem in 2025",url:"https://gist.github.com/thebabydino/effda894a4a80060d25639f54058a3ad#previous-solutions",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://github.githubassets.com/assets/gist-og-image-54fd7dc0713e.png"}),s("p",null,[n[21]||(n[21]=a("Over time, I’ve seen a couple of approaches commonly recommended for solving this. The first is to")),s("a",A,[e(t,{icon:"fas fa-globe"}),n[19]||(n[19]=a("simply introduce more stops"))]),n[22]||(n[22]=a("(gradient “easing”), which I’m not really keen on doing, even if I can just generate them in a Sass loop and never need to know about them. The second one is to")),s("a",C,[e(t,{icon:"fas fa-globe"}),n[20]||(n[20]=a("make the gradient noisy"))]),n[23]||(n[23]=a(". Let’s do that."))]),s("p",null,[n[25]||(n[25]=a("The way I first went about making gradients grainy was to have a gradient layer and a noise layer (using pseudo-elements for the layers) and then blend them together. I first did this")),s("a",T,[e(t,{icon:"fa-brands fa-youtube"}),n[24]||(n[24]=a("in response to a question"))]),n[26]||(n[26]=a("asked on X. That video became one of my most watched ones ever, which isn’t something I’m happy about anymore because I’ve come to find that technique to be overly complicated, like scratching behind the right ear with the left foot."))]),e(g,{src:"youtube/xmrfj5qrXAw"}),s("p",null,[n[28]||(n[28]=a("A few months later, I saw")),s("a",B,[e(t,{icon:"fas fa-globe"}),n[27]||(n[27]=a("an article"))]),n[29]||(n[29]=a("that was doing something similar: placing a gradient layer and a noise layer one on top of the other. Unlike my approach, it wasn’t blending the two layers and instead was relying on one end of the gradient being transparent to allow the noise to show through. For the other end to be something other than transparent, it would layer an overlay and blend it. Just like my layered pseudos approach… too complicated! Not to mention that the ")),n[30]||(n[30]=s("code",null,"contrast()",-1)),n[31]||(n[31]=a(" and ")),n[32]||(n[32]=s("code",null,"brightness()",-1)),n[33]||(n[33]=a(" tampering (meant to highlight the grain) make this only work for certain gradient inputs and they greatly alter the saturation and luminosity of the original gradient palette."))]),s("p",null,[n[35]||(n[35]=a("In time, I would improve upon my initial idea and, almost half a decade later, I would make")),s("a",z,[e(t,{icon:"fa-brands fa-youtube"}),n[34]||(n[34]=a("a second video"))]),n[36]||(n[36]=a("on the topic, presenting a much simplified technique. Basically, the gradient would get fed into an SVG")),n[37]||(n[37]=s("code",null,"filter",-1)),n[38]||(n[38]=a(", which would generate a noise layer, desaturate it and then place it on top of the input gradient. No external files, no base64-ing anything, no separate (pseudo)element layers for the noise and the gradient."))]),n[199]||(n[199]=s("p",null,"Still, it didn’t take long before I wasn’t happy with this solution anymore, either.",-1)),e(g,{src:"youtube/cA39j6p3Yho"}),n[200]||(n[200]=s("hr",null,null,-1)),n[201]||(n[201]=s("h2",{id:"the-big-problem-with-layering-the-noise-and-the-gradient",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#the-big-problem-with-layering-the-noise-and-the-gradient"},[s("span",null,"The big problem with layering the noise and the gradient")])],-1)),e(p,{name:"The big problem with layering the noise and the gradient",desc:"The big problem with layering the noise and the gradient | Better grainy gradients to fix the gradient banding problem in 2025",url:"https://gist.github.com/thebabydino/effda894a4a80060d25639f54058a3ad#the-big-problem-with-layering-the-noise-and-the-gradient",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://github.githubassets.com/assets/gist-og-image-54fd7dc0713e.png"}),n[202]||(n[202]=s("p",null,"The problem with all of these solutions so far is that they’re changing the gradient. Depending on the particular technique we use, we always end up with a gradient that’s either darker, brighter, or more saturated than our original one.",-1)),n[203]||(n[203]=s("p",null,"CodePen Embed Fallback https://codepen.io/thebabydino/pen/qEdbEQZ Noise layering problem",-1)),n[204]||(n[204]=s("p",null,"We can reduce the noise opacity, but in doing so, our gradient becomes less grainy and the efficiency of fixing banding this way decreases.",-1)),n[205]||(n[205]=s("hr",null,null,-1)),n[206]||(n[206]=s("h2",{id:"a-better-solution",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#a-better-solution"},[s("span",null,"A better solution")])],-1)),e(p,{name:"A better solution",desc:"A better solution | Better grainy gradients to fix the gradient banding problem in 2025",url:"https://gist.github.com/thebabydino/effda894a4a80060d25639f54058a3ad#a-better-solution",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://github.githubassets.com/assets/gist-og-image-54fd7dc0713e.png"}),n[207]||(n[207]=o(`<p>How about not layering the the noise layer and instead using it as a<a href="https://smashingmagazine.com/2021/09/deep-dive-wonderful-world-svg-displacement-filtering/" target="_blank" rel="noopener noreferrer"><strong>displacement map</strong></a>?</p><p>What this does is use two of the four RGBA channels of the noise layer to determine how the individual pixels of the input gradient are shifted along the<em>x</em>and<em>y</em>axes.</p><p>Both the<code>filter</code>input (our gradient) and the noise layer can be taken to be 2D grids of pixels. Each pixel of our input gradient gets displaced based on the two selected channel values of its corresponding pixel in the noise layer (used as a displacement map).</p><p>A channel value below<code>50%</code>means moving in the positive direction of the axis, a channel value above<code>50%</code>means moving in the negative direction of the axis and a channel value of exactly<code>50%</code>means not moving at all.</p><p>The displacement formula for a generic channel value of<code>C</code>and a displacement <code>scale</code> of <code>S</code> is the following:</p><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">(.5 - C)*S</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If we use the red channel<code>R</code>for displacement along the<em>x</em>axis and the alpha channe <code>A</code> for displacement along the<em>y</em>axis, then we have:</p><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">dx = (.5 - R)*S  </span>
<span class="line">dy = (.5 - A)*S</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the values for both<code>R</code>and<code>A</code>are in the<code>[0, 1]</code>interval (meaning channel values are zeroed at <code>0</code> and maxed out at<code>1</code>), so the difference between the parenthesis is in the<code>[-.5, .5]</code>interval.</p><p>The bigger the<code>scale</code>value<code>S</code>is, the more the gradient pixels mix along the gradient axis depending on the red<code>R</code>and alpha <code>A</code> channel values of the displacement map generated by <code>feTurbulence</code>.</p><p>Let’s see our code!</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>0<span class="token punctuation">&#39;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>0<span class="token punctuation">&#39;</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>true<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>grain<span class="token punctuation">&#39;</span></span> <span class="token attr-name">color-interpolation-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>sRGB<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feTurbulence</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>fractalNoise<span class="token punctuation">&#39;</span></span> <span class="token attr-name">baseFrequency</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>.9713<span class="token punctuation">&#39;</span></span> <span class="token attr-name">numOctaves</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>4<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feDisplacementMap</span> <span class="token attr-name">in</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>SourceGraphic<span class="token punctuation">&#39;</span></span> <span class="token attr-name">scale</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>150<span class="token punctuation">&#39;</span></span> <span class="token attr-name">xChannelSelector</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>R<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Since the<code>&lt;svg&gt;</code>element is only used to hold our<code>filter</code>(and the only thing a <code>filter</code> does is apply a graphical effect on an already existing element), it is functionally the same as a <code>&lt;style&gt;</code> element, so we zero its dimensions and hide it from screen readers using<code>aria-hidden</code>. And, in the CSS, we also take it out of the document flow (via <code>absolute</code> or <code>fixed</code> positioning) so it doesn’t affect our layout in any way (which could happen otherwise, even if its dimensions are zeroed).</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">svg[height=&#39;0&#39;][aria-hidden=&#39;true&#39;]</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">position</span><span class="token punctuation">:</span> fixed</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The<code>&lt;filter&gt;</code>element also has a second attribute beside its<code>id</code>. We aren’t going into it here because I don’t really understand it myself. Just know that, in order to get our desired result cross-browser, we always need to set this attribute to<code>sRGB</code>whenever we’re doing anything with the RGB channels in the<code>filter</code>. The<code>sRGB</code>value isn’t the default one (<code>linearRGB</code>is), but it’s the one we likely want most of the time and the only one that works properly cross-browser.</p>`,15)),s("p",null,[n[40]||(n[40]=a("The")),s("a",I,[e(t,{icon:"fas fa-globe"}),n[39]||(n[39]=s("code",null,"feTurbulence",-1))]),n[41]||(n[41]=a("primitive creates a fine-grained noise layer. Again, we aren’t going into how this works in the back because I haven’t been able to really understand any of the explanations I’ve found or I’ve been recommended for the life of me."))]),n[208]||(n[208]=o("<p>Just know that the<code>baseFrequency</code>values (which you can think of as being the number of waves per pixel) need to be positive, that integer values produce just blank and that bigger values mean a finer grained noise. And that<code>numOctaves</code>values above the default <code>1</code> allow us to get a better-looking noise without having to layer the results of multiple <code>feTurbulence</code> primitives with different<code>baseFrequency</code>values. In practice, I pretty much never use <code>numOctaves</code> values bigger than<code>3</code>or at most<code>4</code>as I find above that, the visual gain really can’t justify the performance cost.</p><p>We also switch here from the default <code>type</code> of <code>turbulence</code> to <code>fractalNoise</code>, which is what’s suited for creating a noise layer.</p><p>This noise is then used as a displacement map (the second input,<code>in2</code>, which is by default the result of the previous primitive, <code>feTurbulence</code> here, so we don’t need to set it explicitly) for the<code>filter</code>input (<code>SourceGraphic</code>). We use a<code>scale</code>value of<code>150</code>, which means that the maximum an input pixel can be displaced by in either direction of the<code>x</code>or<code>y</code>axis is half of that (<code>75px</code>) in the event the channel used for <em>x</em> or <em>y</em> axis displacement is either zeroed (<code>0</code>) or maxed out (<code>1</code>) there. The channel used for the <em>y</em> axis displacement is the default alpha<code>A</code>, so we don’t need to set it explicitly, we only set it for the<em>x</em>axis displacement.</p>",3)),s("p",null,[n[45]||(n[45]=a("We’re using absolute pixel displacement here, as relative displacement (which requires the ")),n[46]||(n[46]=s("code",null,"primitiveUnits",-1)),n[47]||(n[47]=a("attribute to be set to")),n[48]||(n[48]=s("code",null,"objectBoundingBox",-1)),n[49]||(n[49]=a(" on the ")),n[50]||(n[50]=s("code",null,"<filter>",-1)),n[51]||(n[51]=a(" element) is not explicitly defined in the spec, so Chrome, Firefox and Safari each")),s("a",j,[n[42]||(n[42]=a("implement it in a different way (")),e(t,{icon:"iconfont icon-github"}),n[43]||(n[43]=s("code",null,"w3c/fxtf-drafts",-1)),n[44]||(n[44]=a(")"))]),n[52]||(n[52]=a("from the other two for non-square")),n[53]||(n[53]=s("code",null,"filter",-1)),n[54]||(n[54]=a("inputs. I wish that could be a joke, but it’s not. This is why nobody really uses SVG filters much — a lot about them just doesn’t work. Not consistently across browsers anyway."))]),n[209]||(n[209]=o('<p>At this point, our result looks like this:</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/451859318-728b1207-4225-473e-a773-70511b3f1552.png?resize=900%2C450&amp;ssl=1" alt="Grainy gradient with dithered edges. A bright pink outline shows us the boundary of the filter input. Within this boundary, we have transparent pixels. Outside it, we have opaque pixels." tabindex="0" loading="lazy"><figcaption>Grainy gradient with dithered edges. A bright pink outline shows us the boundary of the filter input. Within this boundary, we have transparent pixels. Outside it, we have opaque pixels.</figcaption></figure><p>Not quite what we want. The dashed bright pink line shows us where the boundary of the <code>filter</code>input gradient box was. Along the edges, we have both transparent pixels <em>inside</em>the initial gradient box<em>and</em>opaque pixels<em>outside</em>the initial gradient box. Two different problems, each needing to get fixed in a different way.</p>',3)),s("p",null,[n[56]||(n[56]=a("To cover up the transparent pixels")),n[57]||(n[57]=s("em",null,"inside",-1)),n[58]||(n[58]=a("the initial gradient box, we layer the initial gradient underneath the one scrambled by ")),n[59]||(n[59]=s("code",null,"feDisplacementMap",-1)),n[60]||(n[60]=a(". We do this using ")),s("a",P,[e(t,{icon:"fa-brands fa-firefox"}),n[55]||(n[55]=s("code",null,"feBlend",-1))]),n[61]||(n[61]=a(" with the default")),n[62]||(n[62]=s("code",null,"mode",-1)),n[63]||(n[63]=a("of")),n[64]||(n[64]=s("code",null,"normal",-1)),n[65]||(n[65]=a("(so we don’t need to set it explicitly), which meands no blending, just put one layer on top of the other. The bottom layer is specified by the second input (")),n[66]||(n[66]=s("code",null,"in2",-1)),n[67]||(n[67]=a(") and in our case, we want it to be the ")),n[68]||(n[68]=s("code",null,"SourceGraphic",-1)),n[69]||(n[69]=a(". The top layer is specified by the first input (")),n[70]||(n[70]=s("code",null,"in",-1)),n[71]||(n[71]=a(") and we don’t need to set it explicitly because, by default, it’s the result of the previous primitive (")),n[72]||(n[72]=s("code",null,"feDisplacementMap",-1)),n[73]||(n[73]=a(" here), which is exactly what we need in this case."))]),n[210]||(n[210]=o(`<div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>0<span class="token punctuation">&#39;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>0<span class="token punctuation">&#39;</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>true<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>grain<span class="token punctuation">&#39;</span></span> <span class="token attr-name">color-interpolation-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>sRGB<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feTurbulence</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>fractalNoise<span class="token punctuation">&#39;</span></span> <span class="token attr-name">baseFrequency</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>.9713<span class="token punctuation">&#39;</span></span> <span class="token attr-name">numOctaves</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>4<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feDisplacementMap</span> <span class="token attr-name">in</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>SourceGraphic<span class="token punctuation">&#39;</span></span> <span class="token attr-name">scale</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>150<span class="token punctuation">&#39;</span></span> <span class="token attr-name">xChannelSelector</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>R<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feBlend</span> <span class="token attr-name">in2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>SourceGraphic<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[76]||(n[76]=a("I’ve seen a lot of tutorials using")),s("a",R,[e(t,{icon:"fa-brands fa-firefox"}),n[74]||(n[74]=s("code",null,"feComposite",-1))]),n[77]||(n[77]=a("with the default ")),n[78]||(n[78]=s("code",null,"operator",-1)),n[79]||(n[79]=a(" of")),n[80]||(n[80]=s("code",null,"over",-1)),n[81]||(n[81]=a(" or")),s("a",N,[e(t,{icon:"fa-brands fa-firefox"}),n[75]||(n[75]=s("code",null,"feMerge",-1))]),n[82]||(n[82]=a("to place layers one on top of another, but ")),n[83]||(n[83]=s("code",null,"feBlend",-1)),n[84]||(n[84]=a(" with the default ")),n[85]||(n[85]=s("code",null,"mode",-1)),n[86]||(n[86]=a(" of ")),n[87]||(n[87]=s("code",null,"normal",-1)),n[88]||(n[88]=a(" produces the exact same result, I find it to be simpler than ")),n[89]||(n[89]=s("code",null,"feMerge",-1)),n[90]||(n[90]=a(" in the case of just two layers and it’s fewer characters than ")),n[91]||(n[91]=s("code",null,"feComposite",-1)),n[92]||(n[92]=a("."))]),s("p",null,[n[95]||(n[95]=a("To get rid of the opaque pixels")),n[96]||(n[96]=s("em",null,"outside",-1)),n[97]||(n[97]=a("the initial gradient box, we restrict the ")),s("a",V,[e(t,{icon:"fas fa-globe"}),n[93]||(n[93]=s("code",null,"filter",-1)),n[94]||(n[94]=a("region"))]),n[98]||(n[98]=o(" to its exact input box — starting from the<code>0,0</code>point of this input and covering<code>100%</code>of it along both the<em>x</em>and<em>y</em>axis (by default, the<code>filter</code>region starts from <code>-10%,-10%</code> and covers<code>120%</code>of the input box along each of the two axes). This means explicitly setting the <code>x</code>,<code>y</code>,<code>width</code> and <code>height</code> attributes:",23))]),n[211]||(n[211]=o(`<div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>0<span class="token punctuation">&#39;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>0<span class="token punctuation">&#39;</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>true<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>grain<span class="token punctuation">&#39;</span></span> <span class="token attr-name">color-interpolation-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>sRGB<span class="token punctuation">&#39;</span></span> </span>
<span class="line">      <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>0<span class="token punctuation">&#39;</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>0<span class="token punctuation">&#39;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>1<span class="token punctuation">&#39;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>1<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feTurbulence</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>fractalNoise<span class="token punctuation">&#39;</span></span> <span class="token attr-name">baseFrequency</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>.9713<span class="token punctuation">&#39;</span></span> <span class="token attr-name">numOctaves</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>4<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feDisplacementMap</span> <span class="token attr-name">in</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>SourceGraphic<span class="token punctuation">&#39;</span></span> <span class="token attr-name">scale</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>150<span class="token punctuation">&#39;</span></span> <span class="token attr-name">xChannelSelector</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>R<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feBlend</span> <span class="token attr-name">in2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>SourceGraphic<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[101]||(n[101]=a("Another option to get rid of this second problem would be to use")),n[102]||(n[102]=s("code",null,"clip-path: inset(0)",-1)),n[103]||(n[103]=a(" on the element we apply this grainy")),n[104]||(n[104]=s("code",null,"filter",-1)),n[105]||(n[105]=a("on. This is one situation where it’s convenient that ")),n[106]||(n[106]=s("code",null,"clip-path",-1)),s("a",E,[e(t,{icon:"fas fa-globe"}),n[99]||(n[99]=a("gets applied")),n[100]||(n[100]=s("em",null,"after",-1))]),n[107]||(n[107]=s("code",null,"filter",-1)),n[108]||(n[108]=a("(the order in the CSS doesn’t matter here)."))]),n[212]||(n[212]=o(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.grad-box</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>90deg<span class="token punctuation">,</span> #a9613a<span class="token punctuation">,</span> #1e1816<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>#grain<span class="token punctuation">)</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/451866616-3fc25f74-226d-4067-bf74-2cf8c446cbe5.png?resize=900%2C450&amp;ssl=1" alt="Grainy gradient with sharp edges, no tansparent pixels within, no opaque pixels outside." tabindex="0" loading="lazy"><figcaption>Grainy gradient with sharp edges, no tansparent pixels within, no opaque pixels outside.</figcaption></figure><p>the desired result</p><h3 id="a-problem-with-this-solution" tabindex="-1"><a class="header-anchor" href="#a-problem-with-this-solution"><span>A problem with this solution</span></a></h3>`,4)),e(p,{name:"A problem with this solution",desc:"A problem with this solution | Better grainy gradients to fix the gradient banding problem in 2025",url:"https://gist.github.com/thebabydino/effda894a4a80060d25639f54058a3ad#a-problem-with-this-solution",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://github.githubassets.com/assets/gist-og-image-54fd7dc0713e.png"}),n[213]||(n[213]=o('<p>The inconvenient part about this<code>filter</code>is that it applies to the entire element, not just its gradient<code>background</code>. And maybe we want this element to <em>also</em> have text content and a <code>box-shadow</code>. Consider the case when before applying the<code>filter</code>we set a<code>box-shadow</code>and add text content:</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/451867920-1d51206d-fdea-4473-b84f-173467951fc7.png?resize=900%2C450&amp;ssl=1" alt="Card with a banded gradient, text and box-shadow." tabindex="0" loading="lazy"><figcaption>Card with a banded gradient, text and box-shadow.</figcaption></figure><p>the case when we also have a shadow and text</p><p>In this case, applying the<code>filter</code>to the entire element causes all kinds of problems. The text “dissolves” into the gradient, the black<code>box-shadow</code>outside the box has some pixels displaced <em>inside</em> the box over the gradient - this is really noticeable in the brighter parts of this gradient. Furthermore, if we were to use the<code>clip-path</code>fix for the gradient pixels displaced<em>outside</em>the initial gradient box, this would also cut away the outer shadow.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/451869235-fc980f9a-2ad7-4f45-9d15-8a575205a83d.png?resize=900%2C450&amp;ssl=1" alt="Previous card with a banded gradient, text and box-shadow, now with a filter pplied on it too. This has unpleasant side effects as dscribed above." tabindex="0" loading="lazy"><figcaption>Previous card with a banded gradient, text and box-shadow, now with a filter pplied on it too. This has unpleasant side effects as dscribed above.</figcaption></figure><p>problems arising when we apply the grainy filter on the entire element</p>',6)),s("p",null,[n[110]||(n[110]=a("The current solution would be to put this gradient in an absolutely positioned pseudo behind the text content (")),n[111]||(n[111]=s("code",null,"z-index: -1",-1)),n[112]||(n[112]=a("), covering the entire ")),n[113]||(n[113]=s("code",null,"padding-box",-1)),n[114]||(n[114]=a(" of its parent (")),s("a",W,[e(t,{icon:"fas fa-globe"}),n[109]||(n[109]=s("code",null,"inset: 0",-1))]),n[115]||(n[115]=a("). This separates the parent’s")),n[116]||(n[116]=s("code",null,"box-shadow",-1)),n[117]||(n[117]=a("and text from the gradient on the pseudo, so applying the")),n[118]||(n[118]=s("code",null,"filter",-1)),n[119]||(n[119]=a("on the pseudo doesn’t affect the parent’s ")),n[120]||(n[120]=s("code",null,"box-shadow",-1)),n[121]||(n[121]=a("and text."))]),n[214]||(n[214]=o(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.grad-box</span> <span class="token punctuation">{</span> <span class="token comment">/* relevant styles */</span></span>
<span class="line">  <span class="token property">positon</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token comment">/* needed for absolutely positioned pseudo */</span></span>
<span class="line">  <span class="token property">box-shadow</span><span class="token punctuation">:</span> -2px 2px 8px #000<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token selector">&amp;::before</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">inset</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>90deg<span class="token punctuation">,</span> #a9613a<span class="token punctuation">,</span> #1e1816<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>#grain<span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span> <span class="token comment">/* pseudo won&#39;t show up without it */</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/451873184-d4a8b150-73ac-4166-bbea-7250387a0a2b.png?resize=900%2C450&amp;ssl=1" alt="Previous card with a gradient, text and box-shadow, except now the gradient is grain, which fixes the banding issue." tabindex="0" loading="lazy"><figcaption>Previous card with a gradient, text and box-shadow, except now the gradient is grain, which fixes the banding issue.</figcaption></figure>`,2)),s("p",null,[n[125]||(n[125]=a("the desired result when having a shadow and text content (")),s("a",F,[n[122]||(n[122]=a("live demo (")),e(t,{icon:"fa-brands fa-codepen"}),n[123]||(n[123]=s("code",null,"thebabydino",-1)),n[124]||(n[124]=a(")"))]),n[126]||(n[126]=a(")"))]),e(u,{user:"thebabydino","slug-hash":"gbbBWzL",title:"Grainy background card + shadow & text - cross-browser","default-tab":["css","result"],theme:d.$isDarkmode?"dark":"light"},null,8,["theme"]),n[215]||(n[215]=s("h3",{id:"improving-things-for-the-future",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#improving-things-for-the-future"},[s("span",null,"Improving things for the future")])],-1)),e(p,{name:"Improving things for the future",desc:"Improving things for the future | Better grainy gradients to fix the gradient banding problem in 2025",url:"https://gist.github.com/thebabydino/effda894a4a80060d25639f54058a3ad#improving-things-for-the-future",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://github.githubassets.com/assets/gist-og-image-54fd7dc0713e.png"}),n[216]||(n[216]=o(`<p>While this works fine, it doesn’t feel ideal to have to use up a pseudo we might need for something else and, ugh, also have to add all the styles for positioning it along all three axes (the<em>z</em>axis is included here too because we need to place the pseudo <em>behind</em> the text content).</p><p>And we do have a better option! We can apply the filter<em>only</em> on the gradient <code>background</code> layer using the<code>filter()</code><em>function</em>.</p><p>This is not the same as the<code>filter</code><em>property</em>! It’s a<em>function</em>that outputs an image and takes as arguments an image (which can be a CSS gradient too) and a filter chain. And it can be used anywhere we can use an image in CSS — as a <code>background-image</code>,<code>border-image</code>,<code>mask-image</code>… even<code>shape-outside</code>!</p><p>In our particular case, this would simplify the code as follows:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.grad-box</span> <span class="token punctuation">{</span> <span class="token comment">/* relevant styles */</span></span>
<span class="line">  <span class="token property">box-shadow</span><span class="token punctuation">:</span> -2px 2px 8px #000<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">linear-gradient</span><span class="token punctuation">(</span>90deg<span class="token punctuation">,</span> #a9613a<span class="token punctuation">,</span> #1e1816<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>#grain<span class="token punctuation">)</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),s("p",null,[n[128]||(n[128]=a("Note that in this case we must restrict the")),n[129]||(n[129]=s("code",null,"filter",-1)),n[130]||(n[130]=a("region from the")),n[131]||(n[131]=s("code",null,"<filter>",-1)),n[132]||(n[132]=a("element attributes, otherwise we run into")),s("a",M,[e(t,{icon:"fas fa-globe"}),n[127]||(n[127]=a("a really weird bug"))]),n[133]||(n[133]=a("in the one browser supporting this, Safari."))]),n[217]||(n[217]=s("figure",null,[s("img",{src:"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/452022538-bf4ed7b8-ccc9-43cd-96e1-771a5cac899b.png?resize=900%2C450&ssl=1",alt:"Safari problem: it's trying to fit the filter output, including what goes outside the input image box, into the input image box, basically scaling down the image to make room for its pixels displaced outside its initial boundary by the filter.",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Safari problem: it's trying to fit the filter output, including what goes outside the input image box, into the input image box, basically scaling down the image to make room for its pixels displaced outside its initial boundary by the filter.")],-1)),n[218]||(n[218]=s("p",null,[a("the Safari problem when we don’t restrict the"),s("code",null,"filter"),a("region")],-1)),s("p",null,[n[139]||(n[139]=a("Because, while Safari has supported the ")),n[140]||(n[140]=s("code",null,"filter()",-1)),n[141]||(n[141]=a(" function since 2015, for about a decade, sadly")),s("a",D,[n[134]||(n[134]=a("no other browser has followed (")),e(t,{icon:"iconfont icon-github"}),n[135]||(n[135]=s("code",null,"web-platform-tests/interop",-1)),n[136]||(n[136]=a(")"))]),n[142]||(n[142]=a(". There are bugs open for both")),s("a",O,[e(t,{icon:"fa-brands fa-chrome"}),n[137]||(n[137]=a("Chrome"))]),n[143]||(n[143]=a("and")),s("a",$,[e(t,{icon:"fa-brands fa-firefox"}),n[138]||(n[138]=a("Firefox"))]),n[144]||(n[144]=a("in case anyone wants to show interest in them implementing this."))]),s("p",null,[n[148]||(n[148]=a("Here is the")),s("a",U,[n[145]||(n[145]=a("live demo (")),e(t,{icon:"fa-brands fa-codepen"}),n[146]||(n[146]=s("code",null,"thebabydino",-1)),n[147]||(n[147]=a(")"))]),n[149]||(n[149]=a(", but keep in mind it only works in Safari."))]),e(u,{user:"thebabydino","slug-hash":"LEVxYoL",title:"Grainy background card + shadow & text- Safari only","default-tab":["css","result"],theme:d.$isDarkmode?"dark":"light"},null,8,["theme"]),n[219]||(n[219]=o(`<p>This would come in really handy not just for the cases when we want to have text content or visual touches (like<code>box-shadow</code>) that remain unaffected by the noise <code>filter</code>, but especially for masking. Banding is always a problem when using <code>radial-gradient()</code> for a<code>mask</code>and, while we can layer multiple (pseudo)elements instead of<code>background</code>layers and/ or borders, masking is a trickier problem.</p><p>For example, consider a conic spotlight. That is, a<code>conic-gradient()</code>masked by a radial one. In this case, it would really help us to be able to apply a grain <code>filter</code> directly to the<code>mask</code>gradient.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.conic-spotlight</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> </span>
<span class="line">    <span class="token function">conic-gradient</span><span class="token punctuation">(</span>from 180deg - .5*$a at 50% 0%<span class="token punctuation">,</span> </span>
<span class="line">                   $side-c<span class="token punctuation">,</span> #342443<span class="token punctuation">,</span> $side-c $a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">mask</span><span class="token punctuation">:</span> </span>
<span class="line">    <span class="token function">filter</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token function">radial-gradient</span><span class="token punctuation">(</span>circle closest-side<span class="token punctuation">,</span> red<span class="token punctuation">,</span> 65%<span class="token punctuation">,</span> #0000<span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">      <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>#grain<span class="token punctuation">)</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this particular case, the grain<code>filter</code>is even simpler, as we don’t need to layer the non-grainy input gradient underneath the grainy one (so we ditch that final <code>feBlend</code> primitive). Again, remember we need to restrict the <code>filter</code>region from the <code>&lt;filter&gt;</code> element attributes.</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>0<span class="token punctuation">&#39;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>0<span class="token punctuation">&#39;</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>true<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>grain<span class="token punctuation">&#39;</span></span> <span class="token attr-name">color-interpolation-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>sRGB<span class="token punctuation">&#39;</span></span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>0<span class="token punctuation">&#39;</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>0<span class="token punctuation">&#39;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>1<span class="token punctuation">&#39;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>1<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feTurbulence</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>fractalNoise<span class="token punctuation">&#39;</span></span> <span class="token attr-name">baseFrequency</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>.9713<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feDisplacementMap</span> <span class="token attr-name">in</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>SourceGraphic<span class="token punctuation">&#39;</span></span> <span class="token attr-name">scale</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>40<span class="token punctuation">&#39;</span></span> <span class="token attr-name">xChannelSelector</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>R<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),s("p",null,[n[152]||(n[152]=a("Here is the")),s("a",L,[n[150]||(n[150]=a("live demo (")),e(t,{icon:"fa-brands fa-codepen"}),n[151]||(n[151]=a(")"))]),n[153]||(n[153]=a(". Keep in mind it only works in Safari."))]),e(u,{user:"thebabydino","slug-hash":"dPoNXWp",title:"Spotlight in a circle: banding (1st) vs. filter graininess (2nd) v2. Safari only","default-tab":["css","result"],theme:d.$isDarkmode?"dark":"light"},null,8,["theme"]),n[220]||(n[220]=o(`<p>Since we can’t yet do this cross-browser, our options depend today on our constraints, the exact result we’re going for.</p><p>Do we need an image backdrop behind the spotlight? In this case, we apply the radial <code>mask</code>on the <code>.conic-spotlight</code> element and, since, just like <code>clip-path</code>, <code>mask</code> gets applied <em>after</em> <code>filter</code>, we add a wrapper around this element to set the<code>filter</code>on it. Alternatively, we could set the conic spotlight<code>background</code>and the radial<code>mask</code>on a pseudo of our<code>.conic-spotlight</code>and set the<code>filter</code>on the actual element.</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.conic-spotlight</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>#grain<span class="token punctuation">)</span></span><span class="token selector">;</span>
<span class="line"></span>
<span class="line">  &amp;::before</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">background</span><span class="token punctuation">:</span> </span>
<span class="line">      <span class="token function">conic-gradient</span><span class="token punctuation">(</span>from 180deg - .5*$a at 50% 0%<span class="token punctuation">,</span> </span>
<span class="line">                     $side-c<span class="token punctuation">,</span> #342443<span class="token punctuation">,</span> $side-c $a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">mask</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>circle closest-side<span class="token punctuation">,</span> red<span class="token punctuation">,</span> 65%<span class="token punctuation">,</span> #0000<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If however we only need a solid backdrop (a black one for example), then we could use a second gradient layer as a radial cover on top of the<code>conic-gradient()</code>:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">body</span> <span class="token punctuation">{</span> <span class="token property">background</span><span class="token punctuation">:</span> $back-c <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">.conic-spotlight</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">radial-gradient</span><span class="token punctuation">(</span>circle closest-side<span class="token punctuation">,</span> #0000<span class="token punctuation">,</span> 65%<span class="token punctuation">,</span> $back-c<span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token function">conic-gradient</span><span class="token punctuation">(</span>from 180deg - .5*$a at 50% 0%<span class="token punctuation">,</span> </span>
<span class="line">                   $side-c<span class="token punctuation">,</span> #342443<span class="token punctuation">,</span> $side-c $a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>#grain<span class="token punctuation">)</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CodePen Embed Fallback https://codepen.io/thebabydino/pen/xxMvLWy Spotlight in a circle: banding (1st) vs. filter graininess (2nd)</p><p>Note that neither of these two emulate the Safari-only demo exactly because they apply the grain <code>filter</code> on the whole thing, not just on the<code>radial-gradient()</code> (which allows us to get rid of the<code>mask</code>banding, but preserve it for the <code>conic-gradient()</code> to give the radiating rays effect). We could tweak the second approach to make the cover a separate pseudo-element instead of a<code>background</code>layer and apply the grain<code>filter</code>just on that pseudo, but it’s still more complicated than the<code>filter()</code> approach. Which is why it would be very good to have it cross-browser.</p><hr><h2 id="some-more-examples" tabindex="-1"><a class="header-anchor" href="#some-more-examples"><span>Some more examples</span></a></h2>`,9)),e(p,{name:"Some more examples",desc:"Some more examples | Better grainy gradients to fix the gradient banding problem in 2025",url:"https://gist.github.com/thebabydino/effda894a4a80060d25639f54058a3ad#some-more-examples",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://github.githubassets.com/assets/gist-og-image-54fd7dc0713e.png"}),n[221]||(n[221]=s("p",null,"Let’s see a few more interesting demos where we’ve made visuals grainy!",-1)),n[222]||(n[222]=s("h3",{id:"grainy-image-shadows",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#grainy-image-shadows"},[s("span",null,"Grainy image shadows")])],-1)),n[223]||(n[223]=s("figure",null,[s("img",{src:"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/452726618-e0586989-c1cc-491e-b2b2-e0b8b602f393.png?resize=988%2C555&ssl=1",alt:"a grid of square images, each with a grainy shadow that's a blurred copy of itself",tabindex:"0",loading:"lazy"}),s("figcaption",null,"a grid of square images, each with a grainy shadow that's a blurred copy of itself")],-1)),s("p",null,[n[156]||(n[156]=a("Shadows or blurred elements can also exhibit banding issues where their edges fade. In this demo, we’re using a slightly more complex ")),n[157]||(n[157]=s("code",null,"filter",-1)),n[158]||(n[158]=a(" to first")),s("a",J,[e(t,{icon:"fa-brands fa-firefox"}),n[154]||(n[154]=a("blur"))]),n[159]||(n[159]=a("and")),s("a",X,[e(t,{icon:"fa-brands fa-firefox"}),n[155]||(n[155]=a("offset"))]),n[160]||(n[160]=a("the input image, then using the ")),n[161]||(n[161]=s("code",null,"feTurbulence",-1)),n[162]||(n[162]=a(" and ")),n[163]||(n[163]=s("code",null,"feDisplacementMap",-1)),n[164]||(n[164]=a(" combination to make this blurred and offset input copy grainy. We also decrease its alpha a tiny little bit (basically multiplying it with")),n[165]||(n[165]=s("code",null,".9",-1)),n[166]||(n[166]=a("). Finally, we’re placing the original ")),n[167]||(n[167]=s("code",null,"filter",-1)),n[168]||(n[168]=a(" input image on top of this blurred, offset, grainy and slightly faded copy."))]),n[224]||(n[224]=o(`<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">- let d = .1;</span>
<span class="line"></span>
<span class="line">svg(width=&#39;0&#39; height=&#39;0&#39; aria-hidden=&#39;true&#39;)</span>
<span class="line">  filter#shadow(x=&#39;-100%&#39; y=&#39;-100%&#39; width=&#39;300%&#39; height=&#39;300%&#39;</span>
<span class="line">                color-interpolation-filters=&#39;sRGB&#39;</span>
<span class="line">                primitiveUnits=&#39;objectBoundingBox&#39;)</span>
<span class="line">    //- blur image</span>
<span class="line">    feGaussianBlur(stdDeviation=d)</span>
<span class="line">    //- then offset it and save it as &#39;in&#39;</span>
<span class="line">    feOffset(dx=d dy=d result=&#39;in&#39;)</span>
<span class="line">    //- generate noise</span>
<span class="line">    feTurbulence(type=&#39;fractalNoise&#39; baseFrequency=&#39;.9713&#39;)</span>
<span class="line">    //- use noise as displacement map to scramble a bit the blurred &amp; offset image</span>
<span class="line">    feDisplacementMap(in=&#39;in&#39; scale=2\\*d xChannelSelector=&#39;R&#39;)</span>
<span class="line">    //- decrease alpha a little bit</span>
<span class="line">    feComponentTransfer</span>
<span class="line">      feFuncA(type=&#39;linear&#39; slope=&#39;.9&#39;)</span>
<span class="line">    //- add original image on top</span>
<span class="line">    feBlend(in=&#39;SourceGraphic&#39;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Since our input images are square here, we can use relative length values (by setting <code>primitiveUnits</code> to <code>ObjectBoundingBox</code>) and still get the same result cross-browser. A relative offset of<code>1</code>is equal to the square image edge length, both for the <code>dx</code>and <code>dy</code> attributes of<code>feOffset</code>and for the <code>scale</code> attribute of <code>feDisplacementMap</code>.</p><p>In our case, the<code>dx</code>and<code>dy</code>offsets being set to<code>.1</code>means we offset the blurred square image copy by<code>10%</code>of its edge length along each of the two axes. And the displacement <code>scale</code> being set to<code>.2</code>means any pixel of the blurred and offset copy may be displaced by at most half of that (half being<code>10%</code>of the square image edge), with plus or with minus, along both the<code>x</code>and<code>y</code>axes. And it gets displaced by that much when the selected channel (given by <code>xChannelSelector</code> and <code>yChannelSelector</code>) of the corresponding map pixel is either zeroed (in which case it’s displaced in the positive direction) or maxed out (negative displacement).</p><p>CodePen Embed Fallback https://codepen.io/thebabydino/pen/OJYwgpe Realistic grainy shadows with no image duplication</p><p>The shadow doesn’t need to be a copy of the input image, it can also be a plain rectangle:</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code class="language-xml"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>0<span class="token punctuation">&#39;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>0<span class="token punctuation">&#39;</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>true<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>shadow<span class="token punctuation">&#39;</span></span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>-50%<span class="token punctuation">&#39;</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>-50%<span class="token punctuation">&#39;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>200%<span class="token punctuation">&#39;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>200%<span class="token punctuation">&#39;</span></span></span>
<span class="line">          <span class="token attr-name">color-interpolation-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>sRGB<span class="token punctuation">&#39;</span></span></span>
<span class="line">          <span class="token attr-name">primitiveUnits</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>objectBoundingBox<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!-- flood entire filter region with orangered --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feFlood</span> <span class="token attr-name">flood-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>orangered<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!-- restrict to rectangle of filter input (our image)  --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feComposite</span> <span class="token attr-name">in2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>SourceAlpha<span class="token punctuation">&#39;</span></span> <span class="token attr-name">operator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>in<span class="token punctuation">&#39;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token comment">&lt;!-- blur and everything else just like before  --&gt;</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CodePen Embed Fallback https://codepen.io/thebabydino/pen/MWPZNMw Grainy shadow</p><h3 id="grainy-image-fade" tabindex="-1"><a class="header-anchor" href="#grainy-image-fade"><span>Grainy image fade</span></a></h3>`,8)),e(p,{name:"Grainy image fade",desc:"Grainy image fade | Better grainy gradients to fix the gradient banding problem in 2025",url:"https://gist.github.com/thebabydino/effda894a4a80060d25639f54058a3ad#grainy-image-fade",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://github.githubassets.com/assets/gist-og-image-54fd7dc0713e.png"}),n[225]||(n[225]=s("p",null,"This is pretty similar to the previous demo, except what we displace are the semi-transparent fading edge pixels obtained using a blur. And we obviously don’t layer the original image on top.",-1)),n[226]||(n[226]=s("p",null,"There are a couple more little tricks used here to get things just right, but they’re outside the scope of this article, so we’re not going into them here.",-1)),n[227]||(n[227]=s("p",null,"CodePen Embed Fallback https://codepen.io/thebabydino/pen/LYgqPbQ Grainy edge fade",-1)),n[228]||(n[228]=s("h3",{id:"noisy-gradient-discs",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#noisy-gradient-discs"},[s("span",null,"Noisy gradient discs")])],-1)),e(p,{name:"Noisy gradient discs",desc:"Noisy gradient discs | Better grainy gradients to fix the gradient banding problem in 2025",url:"ttps://gist.github.com/thebabydino/effda894a4a80060d25639f54058a3ad#noisy-gradient-discs",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://github.githubassets.com/assets/gist-og-image-54fd7dc0713e.png"}),s("p",null,[n[170]||(n[170]=a("These are created with SVG")),n[171]||(n[171]=s("code",null,"<circle>",-1)),n[172]||(n[172]=a("elements just so we can use SVG radial gradients for them. Compared to CSS ")),n[173]||(n[173]=s("code",null,"radial-grdient()",-1)),n[174]||(n[174]=a(", SVG ")),n[175]||(n[175]=s("code",null,"radialGradient",-1)),n[176]||(n[176]=a(" has the advantage of allowing us to")),s("a",Y,[e(t,{icon:"fas fa-globe"}),n[169]||(n[169]=a("specify a focal point"))]),n[177]||(n[177]=a("(via")),n[178]||(n[178]=s("code",null,"fx",-1)),n[179]||(n[179]=a("and ")),n[180]||(n[180]=s("code",null,"fy",-1)),n[181]||(n[181]=a("), which allows us to create radial gradients not possible with pure CSS."))]),n[229]||(n[229]=s("p",null,"CodePen Embed Fallback https://codepen.io/thebabydino/pen/bGJvajr Noisy gradient discs",-1)),n[230]||(n[230]=s("p",null,[a("The"),s("code",null,"filter"),a("is a bit more complex here because the aim was to create a specific type of noise, but the main idea is the same.")],-1)),n[231]||(n[231]=s("h3",{id:"animated-singleimggradient-glow-border",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#animated-singleimggradient-glow-border"},[s("span",null,[a("Animated single"),s("code",null,"img"),a("gradient glow border")])])],-1)),e(p,{name:"Animated singleimg gradient glow border",desc:"Animated singleimg gradient glow border | Better grainy gradients to fix the gradient banding problem in 2025",url:"https://gist.github.com/thebabydino/effda894a4a80060d25639f54058a3ad#animated-single-img-gradient-glow-border",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://github.githubassets.com/assets/gist-og-image-54fd7dc0713e.png"}),s("figure",null,[n[187]||(n[187]=s("img",{src:"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/452727808-37f47164-c7f2-4340-a9bc-f07f81973d7c-2.png?resize=1024%2C576&ssl=1",alt:'a grid of images with total or partial gradient borders, each having a glow, which is a grainy glow for every second image<br/>live demo (<VPIcon icon="fa-brands fa-codepen"/>)',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[185]||(n[185]=a("a grid of images with total or partial gradient borders, each having a glow, which is a grainy glow for every second image")),n[186]||(n[186]=s("br",null,null,-1)),s("a",Z,[n[182]||(n[182]=a("live demo (")),e(t,{icon:"fa-brands fa-codepen"}),n[183]||(n[183]=s("code",null,"thebabydino",-1)),n[184]||(n[184]=a(")"))])])]),n[232]||(n[232]=s("p",null,"Animated gradient glow borders seem to be all the rage nowadays, which is something I never imagined woukd happen when I first started playing with them almost a decade ago. But wherever there’s a fade effect like a glow, we may get banding. It’s pretty subtle in this case, but the grainy glow looks better than the no grain version.",-1)),n[233]||(n[233]=s("h3",{id:"grainy-css-backgrounds",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#grainy-css-backgrounds"},[s("span",null,"Grainy CSS backgrounds")])],-1)),e(p,{name:"Grainy CSS backgrounds",desc:"Grainy CSS backgrounds | Better grainy gradients to fix the gradient banding problem in 2025",url:"https://gist.github.com/thebabydino/effda894a4a80060d25639f54058a3ad#grainy-css-backgrounds",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://github.githubassets.com/assets/gist-og-image-54fd7dc0713e.png"}),n[234]||(n[234]=o('<p>Another example would be this one, where I’m layering a bunch of linear gradients along the circumradii to the corners of a regular polygon in order to emulate a mesh gradient. Even when blending these gradients, subtle banding is still noticeable. Applying our standard grain<code>filter</code>discussed earlier fixes this problem.</p><p>CodePen Embed Fallback https://codepen.io/thebabydino/pen/abxpmMe Mesh gradient polygon: banding vs. grain</p><p>Also, since we’re using<code>clip-path</code>to get the polygon shape and this is applied <em>after</em> the <code>filter</code>, we don’t need to worry about opaque pixels displaced<em>outside</em>the polygon shape by our grain<code>filter</code>. This means we don’t need to bother with setting the<code>filter</code> region via the <code>&lt;filter&gt;</code> element attributes.</p><h3 id="grainy-svg-backgrounds" tabindex="-1"><a class="header-anchor" href="#grainy-svg-backgrounds"><span>Grainy SVG backgrounds</span></a></h3>',4)),e(p,{name:"Grainy SVG backgrounds",desc:"Grainy SVG backgrounds | Better grainy gradients to fix the gradient banding problem in 2025",url:"https://gist.github.com/thebabydino/effda894a4a80060d25639f54058a3ad#grainy-svg-backgrounds",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://github.githubassets.com/assets/gist-og-image-54fd7dc0713e.png"}),n[235]||(n[235]=s("p",null,[a("The idea here is we layer a bunch of different SVG shapes, give them various fills (plain, "),s("code",null,"linearGradient"),a(" or "),s("code",null,"radialGradient"),a(" ones), blur them and then finally apply a grain"),s("code",null,"filter"),a(".")],-1)),s("figure",null,[n[193]||(n[193]=s("img",{src:"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/450825545-32a13512-1b71-47bf-86eb-ddc424e6e6bb.png?resize=1024%2C616&ssl=1",alt:'a 3⨯3 grid of grainy abstract backgrounds<br/>live demo (<VPIcon icon="fa-brands fa-codepen"/>)',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[n[191]||(n[191]=a("a 3⨯3 grid of grainy abstract backgrounds")),n[192]||(n[192]=s("br",null,null,-1)),s("a",H,[n[188]||(n[188]=a("live demo (")),e(t,{icon:"fa-brands fa-codepen"}),n[189]||(n[189]=s("code",null,"thebabydino",-1)),n[190]||(n[190]=a(")"))])])]),k(" TODO: add ARTICLE CARD "),e(c,m(b({title:"Grainy Gradients",desc:"This is about reducing banding effects in gradients by introducing noise. A nice approach is a displacement map using SVG filters.",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/grainy-gradients.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const nn=f(w,[["render",Q]]),sn=JSON.parse('{"path":"/frontendmasters.com/grainy-gradients.html","title":"Grainy Gradients","lang":"en-US","frontmatter":{"lang":"en-US","title":"Grainy Gradients","description":"Article(s) > Grainy Gradients","icon":"fa-brands fa-css3-alt","category":["CSS","Article(s)"],"tag":["blog","frontendmasters.com","css"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Grainy Gradients\\",\\"image\\":[\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/451853285-2c07e7e7-53b6-4cc7-b7fe-2b251e7c8fd0.png?resize=900%2C450&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/451859318-728b1207-4225-473e-a773-70511b3f1552.png?resize=900%2C450&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/451866616-3fc25f74-226d-4067-bf74-2cf8c446cbe5.png?resize=900%2C450&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/451867920-1d51206d-fdea-4473-b84f-173467951fc7.png?resize=900%2C450&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/451869235-fc980f9a-2ad7-4f45-9d15-8a575205a83d.png?resize=900%2C450&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/451873184-d4a8b150-73ac-4166-bbea-7250387a0a2b.png?resize=900%2C450&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/452022538-bf4ed7b8-ccc9-43cd-96e1-771a5cac899b.png?resize=900%2C450&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/06/452726618-e0586989-c1cc-491e-b2b2-e0b8b602f393.png?resize=988%2C555&ssl=1\\",\\"https://codepen.io/thebabydino/pen/bGPMOpJ\\",\\"https://codepen.io/thebabydino/pen/azONXNb/\\"],\\"datePublished\\":\\"2025-06-13T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ana Tudor\\",\\"url\\":\\"https://frontendmasters.com/blog/author/anatudor/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/grainy-gradients.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Grainy Gradients"}],["meta",{"property":"og:description","content":"Article(s) > Grainy Gradients"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6066"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6066"}],["meta",{"name":"twitter:image:alt","content":"Grainy Gradients"}],["meta",{"property":"article:author","content":"Ana Tudor"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-06-13T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Grainy Gradients"},{"property":"og:description","content":"Grainy Gradients"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/grainy-gradients.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-06-13T00:00:00.000Z","isOriginal":false,"author":[{"name":"Ana Tudor","url":"https://frontendmasters.com/blog/author/anatudor/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/6066"},"git":{},"readingTime":{"minutes":17.03,"words":5110},"filePathRelative":"frontendmasters.com/grainy-gradients.md","copyright":{"author":"Ana Tudor"}}');export{nn as comp,sn as data};
