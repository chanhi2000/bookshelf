import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,d as n,f as a,b as i,t as r,n as d,g as u,r as t,o as m}from"./app-BVguHYKu.js";const g="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/property-href-doesnt-exist-error-1.png",k={},h={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"};function b(e,s){const o=t("VPCard"),p=t("SiteInfo");return m(),c("div",null,[n("h1",h,[n("a",y,[n("span",null,r(e.$frontmatter.title)+" ê´€ë ¨",1)])]),a(o,d(u({title:"Build strongly typed polymorphic components with React and TypeScript",desc:"Learn how to build strongly typed polymorphic React components with TypeScript, using familiar Chakra UI and MUI component props as guides.",link:"/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/README.md",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16),s[0]||(s[0]=n("nav",{class:"table-of-contents"},[n("ul")],-1)),s[1]||(s[1]=n("hr",null,null,-1)),a(p,{name:"Build strongly typed polymorphic components with React and TypeScript",desc:"Learn how to build strongly typed polymorphic React components with TypeScript, using familiar Chakra UI and MUI component props as guides.",url:"https://blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript#handling-default-as-attributes",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}),s[2]||(s[2]=i(`<p>Consider again our current solution:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Text <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span> <span class="token attr-name">extends</span> <span class="token attr-name">React.ElementType</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token punctuation">,</span></span>
<span class="line">  children<span class="token punctuation">,</span></span>
<span class="line">  <span class="token operator">...</span>restProps</span>
<span class="line"><span class="token punctuation">}</span><span class="token plain-text">: TextProps&lt;C&gt;) =&gt; </span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">;</span> <span class="token comment">// ðŸ‘ˆ look here</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>restProps<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token plain-text">;</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Particularly, pay attention to where a default element is provided if the <code>as</code> prop is omitted.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">&quot;span&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This is properly represented in the JavaScript world by implementation: if <code>as</code> is optional, itâ€™ll default to a <code>span</code>.</p><p>The question is, how does TypeScript handle this case when <code>as</code> isnâ€™t passed? Are we equally passing a default type?</p><p>Well, the answer is no, but belowâ€™s a practical example. Letâ€™s say you went ahead to use the <code>Text</code> component as follows:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello Text world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Note that weâ€™ve passed no <code>as</code> prop here. Will TypeScript be aware of the valid props for this component?</p><p>Letâ€™s go ahead and add an <code>href</code>:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.google.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello Text world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you go ahead and do this, youâ€™ll get no errors. Thatâ€™s bad.</p><p>A <code>span</code> should not receive an <code>href</code> prop / attribute. While we default to a <code>span</code> in the implementation, TypeScript is unaware of this default. Letâ€™s fix this with a simple, generic default assignment:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">TextProps<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> React<span class="token punctuation">.</span>ElementType<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">;</span></span>
<span class="line">  children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token operator">&amp;</span> React<span class="token punctuation">.</span>ComponentPropsWithoutRef<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/**</span>
<span class="line">* See default below. TS will treat the rendered element as a </span>
<span class="line">span and provide typings accordingly</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Text <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">&quot;span&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">as</span><span class="token punctuation">,</span></span>
<span class="line">  children<span class="token punctuation">,</span></span>
<span class="line">  <span class="token operator">...</span>restProps</span>
<span class="line"><span class="token punctuation">}</span><span class="token operator">:</span> TextProps<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>restProps<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The important bit is highlighted below:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>ElementType <span class="token operator">=</span> <span class="token string">&quot;span&quot;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Et voilÃ ! The previous example we had should now throw an error when you pass <code>href</code> to the <code>Text</code> component without an <code>as</code> prop.</p><p>The error should read: <code>Property &#39;href&#39; does not exist on type ...</code>.</p><figure><img src="`+g+'" alt="Property Href Does Not Exist On Type" tabindex="0" loading="lazy"><figcaption>Property Href Does Not Exist On Type</figcaption></figure>',19))])}const x=l(k,[["render",b]]),w=JSON.parse('{"path":"/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/handling-default-as-attributes.html","title":"Handling default `as` attributes","lang":"en-US","frontmatter":{"lang":"en-US","title":"Handling default `as` attributes","description":"Article(s) > (6/10) Build strongly typed polymorphic components with React and TypeScript","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Handling default `as` attributes\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/property-href-doesnt-exist-error-1.png\\"],\\"datePublished\\":\\"2022-05-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ohans Emmanuel\\",\\"url\\":\\"https://blog.logrocket.com/author/ohansemmanuel/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/handling-default-as-attributes.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"Handling default `as` attributes"}],["meta",{"property":"og:description","content":"Article(s) > (6/10) Build strongly typed polymorphic components with React and TypeScript"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Handling default `as` attributes"}],["meta",{"property":"article:author","content":"Ohans Emmanuel"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-05-25T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > (6/10) Build strongly typed polymorphic components with React and TypeScript"},{"property":"og:description","content":"Handling default `as` attributes"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript//handling-default-as-attributes.html"}]],"date":"2022-05-25T00:00:00.000Z","isOriginal":false,"author":[{"name":"Ohans Emmanuel","url":"https://blog.logrocket.com/author/ohansemmanuel/"}],"cover":"/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"},"git":{},"readingTime":{"minutes":1.78,"words":535},"filePathRelative":"blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/handling-default-as-attributes.md","copyright":{"author":"Ohans Emmanuel"}}');export{x as comp,w as data};
