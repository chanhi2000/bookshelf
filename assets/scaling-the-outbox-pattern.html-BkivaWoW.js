import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as n,f as e,b as v,a as g,t as b,n as i,g as u,w as t,e as a,r as o,o as w}from"./app-BVguHYKu.js";const y={},x={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},T={class:"table-of-contents"},M={class:"hint-container info"},S={href:"https://github.com/m-jovanovic/outbox-scaling",target:"_blank",rel:"noopener noreferrer"};function P(r,s){const l=o("VPCard"),p=o("router-link"),c=o("SiteInfo"),d=o("RouteLink"),m=o("VPIcon");return w(),h("div",null,[n("h1",x,[n("a",f,[n("span",null,b(r.$frontmatter.title)+" 관련",1)])]),e(l,i(u({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",T,[n("ul",null,[n("li",null,[e(p,{to:"#starting-point"},{default:t(()=>s[0]||(s[0]=[a("Starting Point")])),_:1,__:[0]})]),n("li",null,[e(p,{to:"#measuring-each-step"},{default:t(()=>s[1]||(s[1]=[a("Measuring Each Step")])),_:1,__:[1]})]),n("li",null,[e(p,{to:"#optimizing-read-queries"},{default:t(()=>s[2]||(s[2]=[a("Optimizing Read Queries")])),_:1,__:[2]})]),n("li",null,[e(p,{to:"#optimizing-message-publishing"},{default:t(()=>s[3]||(s[3]=[a("Optimizing Message Publishing")])),_:1,__:[3]})]),n("li",null,[e(p,{to:"#optimizing-update-queries"},{default:t(()=>s[4]||(s[4]=[a("Optimizing Update Queries")])),_:1,__:[4]})]),n("li",null,[e(p,{to:"#how-far-did-we-get"},{default:t(()=>s[5]||(s[5]=[a("How Far Did We Get?")])),_:1,__:[5]})]),n("li",null,[e(p,{to:"#parallel-outbox-processing"},{default:t(()=>s[6]||(s[6]=[a("Parallel Outbox Processing")])),_:1,__:[6]})]),n("li",null,[e(p,{to:"#batching-message-publishing"},{default:t(()=>s[7]||(s[7]=[a("Batching Message Publishing")])),_:1,__:[7]})]),n("li",null,[e(p,{to:"#turning-off-publisher-confirmation-dangerous"},{default:t(()=>s[8]||(s[8]=[a("Turning Off Publisher Confirmation (Dangerous)")])),_:1,__:[8]})]),n("li",null,[e(p,{to:"#key-considerations-for-scaling"},{default:t(()=>s[9]||(s[9]=[a("Key Considerations for Scaling")])),_:1,__:[9]})]),n("li",null,[e(p,{to:"#summary"},{default:t(()=>s[10]||(s[10]=[a("Summary")])),_:1,__:[10]})])])]),s[20]||(s[20]=n("hr",null,null,-1)),e(c,{name:"Scaling the Outbox Pattern (2B+ messages per day)",desc:"Learn how to supercharge your Outbox pattern implementation, scaling to 30,500 messages per second. Through strategic optimizations in database queries, message publishing, and parallel processing, I'll show you how to handle over 2.8 billion messages daily while maintaining system reliability.",url:"https://milanjovanovic.tech/blog/scaling-the-outbox-pattern",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_111.png"}),n("p",null,[s[12]||(s[12]=a("In last week's newsletter, I talked about ")),e(d,{to:"/milanjovanovic.tech/implementing-the-outbox-pattern.html"},{default:t(()=>s[11]||(s[11]=[a("implementing the Outbox pattern")])),_:1,__:[11]}),s[13]||(s[13]=a(". It's a crucial tool for reliable distributed messaging. But implementing it is just the first step."))]),s[21]||(s[21]=v(`<p>The real challenge? Scaling it to handle massive message volumes.</p><p>Today, we&#39;re taking it up a notch. We&#39;ll start with a basic Outbox processor and transform it into a high-performance engine capable of handling over 2 billion messages daily.</p><p>Let&#39;s dive in!</p><hr><h2 id="starting-point" tabindex="-1"><a class="header-anchor" href="#starting-point"><span>Starting Point</span></a></h2><p>This is our starting point. We have an <code>OutboxProcessor</code> that polls for unprocessed messages and publishes them to a queue. The first few things we can tweak are the <strong>frequency</strong> and <strong>batch size</strong>.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="OutboxProcessor.cs"><span>OutboxProcessor.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">OutboxProcessor</span><span class="token punctuation">(</span><span class="token class-name">NpgsqlDataSource</span> dataSource<span class="token punctuation">,</span> <span class="token class-name">IPublishEndpoint</span> publishEndpoint<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> BatchSize <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">await</span> dataSource<span class="token punctuation">.</span><span class="token function">OpenConnectionAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> transaction <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">BeginTransactionAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> messages <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">QueryAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OutboxMessage<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">@&quot;&quot;&quot;</span>
<span class="line">            SELECT *</span>
<span class="line">            FROM outbox_messages</span>
<span class="line">            WHERE processed_on_utc IS NULL</span>
<span class="line">            ORDER BY occurred_on_utc LIMIT @BatchSize</span>
<span class="line">            &quot;&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token punctuation">{</span> BatchSize <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token named-parameter punctuation">transaction</span><span class="token punctuation">:</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> message <span class="token keyword">in</span> messages<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">try</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name"><span class="token keyword">var</span></span> messageType <span class="token operator">=</span> Messaging<span class="token punctuation">.</span>Contracts<span class="token punctuation">.</span>AssemblyReference<span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name"><span class="token keyword">var</span></span> deserializedMessage <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Content<span class="token punctuation">,</span> messageType<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">await</span> publishEndpoint<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>deserializedMessage<span class="token punctuation">,</span> messageType<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span></span>
<span class="line">                    <span class="token string">@&quot;&quot;&quot;</span>
<span class="line">                    UPDATE outbox_messages</span>
<span class="line">                    SET processed_on_utc = @ProcessedOnUtc</span>
<span class="line">                    WHERE id = @Id</span>
<span class="line">                    &quot;&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token keyword">new</span> <span class="token punctuation">{</span> ProcessedOnUtc <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">,</span> message<span class="token punctuation">.</span>Id <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token named-parameter punctuation">transaction</span><span class="token punctuation">:</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span></span>
<span class="line">                    <span class="token string">@&quot;&quot;&quot;</span>
<span class="line">                    UPDATE outbox_messages</span>
<span class="line">                    SET processed_on_utc = @ProcessedOnUtc, error = @Error</span>
<span class="line">                    WHERE id = @Id</span>
<span class="line">                    &quot;&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token keyword">new</span> <span class="token punctuation">{</span> ProcessedOnUtc <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">,</span> Error <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span>Id <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token named-parameter punctuation">transaction</span><span class="token punctuation">:</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> transaction<span class="token punctuation">.</span><span class="token function">CommitAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> messages<span class="token punctuation">.</span>Count<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Let&#39;s assume that we run the <code>OutboxProcessor</code> continuously. I increased that batch size to <code>1000</code>.</p><p>How many messages are we able to process?</p><p>I&#39;ll run the Outbox processing for 1 minute and count how many messages were processed.</p><p>The baseline implementation processed <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>81</mn><mo separator="true">,</mo><mn>000</mn></mrow><annotation encoding="application/x-tex">81,000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">81</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span></span></span></span> messages in one minute or <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>350</mn><mtext> MPS</mtext></mrow><annotation encoding="application/x-tex">1,350\\text{ MPS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">350</span><span class="mord text"><span class="mord"> MPS</span></span></span></span></span> (messages per second).</p><p>Not bad, but let&#39;s see how much we can improve this.</p><hr><h2 id="measuring-each-step" tabindex="-1"><a class="header-anchor" href="#measuring-each-step"><span>Measuring Each Step</span></a></h2><p>You can&#39;t improve what you can&#39;t measure. Right? So, I&#39;ll use a <code>Stopwatch</code> to measure the total execution time and the time each step takes.</p><p>Notice that I also split the publish and update steps. It&#39;s so I can measure the time for publishing and updating separately. This will be important later because I want to optimize each step separately.</p><p>With the baseline implementation, here are the execution times for each step:</p><ul><li>Query time: ~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>70</mn><mtext> ms</mtext></mrow><annotation encoding="application/x-tex">70\\text{ ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">70</span><span class="mord text"><span class="mord"> ms</span></span></span></span></span></li><li>Publish time: ~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>320</mn><mtext> ms</mtext></mrow><annotation encoding="application/x-tex">320\\text{ ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">320</span><span class="mord text"><span class="mord"> ms</span></span></span></span></span></li><li>Update time: ~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>300</mn><mtext> ms</mtext></mrow><annotation encoding="application/x-tex">300\\text{ ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">300</span><span class="mord text"><span class="mord"> ms</span></span></span></span></span></li></ul><div class="code-block-with-title"><div class="code-block-title-bar" data-title="OutboxProcessor.cs"><span>OutboxProcessor.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">OutboxProcessor</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">NpgsqlDataSource</span> dataSource<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">IPublishEndpoint</span> publishEndpoint<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>OutboxProcessor<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> BatchSize <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> totalStopwatch <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> stepStopwatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted">        <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> <span class="token keyword">await</span> dataSource<span class="token punctuation">.</span><span class="token function">OpenConnectionAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> transaction <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">BeginTransactionAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        stepStopwatch<span class="token punctuation">.</span><span class="token function">Restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> messages <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">QueryAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OutboxMessage<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">@&quot;&quot;&quot;</span>
<span class="line">            SELECT *</span>
<span class="line">            FROM outbox_messages</span>
<span class="line">            WHERE processed_on_utc IS NULL</span>
<span class="line">            ORDER BY occurred_on_utc LIMIT @BatchSize</span>
<span class="line">            &quot;&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token punctuation">{</span> BatchSize <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token named-parameter punctuation">transaction</span><span class="token punctuation">:</span> transaction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token class-name"><span class="token keyword">var</span></span> queryTime <span class="token operator">=</span> stepStopwatch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> updateQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConcurrentQueue<span class="token punctuation">&lt;</span>OutboxUpdate<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        stepStopwatch<span class="token punctuation">.</span><span class="token function">Restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> message <span class="token keyword">in</span> messages<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">try</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name"><span class="token keyword">var</span></span> messageType <span class="token operator">=</span> Messaging<span class="token punctuation">.</span>Contracts<span class="token punctuation">.</span>AssemblyReference<span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name"><span class="token keyword">var</span></span> deserializedMessage <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Content<span class="token punctuation">,</span> messageType<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">await</span> publishEndpoint<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>deserializedMessage<span class="token punctuation">,</span> messageType<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                updateQueue<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OutboxUpdate</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    Id <span class="token operator">=</span> message<span class="token punctuation">.</span>Id<span class="token punctuation">,</span></span>
<span class="line">                    ProcessedOnUtc <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow</span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                updateQueue<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OutboxUpdate</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    Id <span class="token operator">=</span> message<span class="token punctuation">.</span>Id<span class="token punctuation">,</span></span>
<span class="line">                    ProcessedOnUtc <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">,</span></span>
<span class="line">                    Error <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line highlighted">        <span class="token class-name"><span class="token keyword">var</span></span> publishTime <span class="token operator">=</span> stepStopwatch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        stepStopwatch<span class="token punctuation">.</span><span class="token function">Restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> outboxUpdate <span class="token keyword">in</span> updateQueue<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token string">@&quot;&quot;&quot;</span>
<span class="line">                UPDATE outbox_messages</span>
<span class="line">                SET processed_on_utc = @ProcessedOnUtc, error = @Error</span>
<span class="line">                WHERE id = @Id</span>
<span class="line">                &quot;&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                outboxUpdate<span class="token punctuation">,</span></span>
<span class="line">                <span class="token named-parameter punctuation">transaction</span><span class="token punctuation">:</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line highlighted">        <span class="token class-name"><span class="token keyword">var</span></span> updateTime <span class="token operator">=</span> stepStopwatch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> transaction<span class="token punctuation">.</span><span class="token function">CommitAsync</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        totalStopwatch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token class-name"><span class="token keyword">var</span></span> totalTime <span class="token operator">=</span> totalStopwatch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        OutboxLoggers<span class="token punctuation">.</span><span class="token function">Processing</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> totalTime<span class="token punctuation">,</span> queryTime<span class="token punctuation">,</span> publishTime<span class="token punctuation">,</span> updateTime<span class="token punctuation">,</span> messages<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> messages<span class="token punctuation">.</span>Count<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">struct</span> <span class="token class-name">OutboxUpdate</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> ProcessedOnUtc <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Error <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now, onto the fun part!</p><hr><h2 id="optimizing-read-queries" tabindex="-1"><a class="header-anchor" href="#optimizing-read-queries"><span>Optimizing Read Queries</span></a></h2><p>The first thing I want to optimize is the query for fetching unprocessed messages. Performing a <code>SELECT *</code> query will have an impact if we don&#39;t need all the columns (hint: we don&#39;t).</p><p>Here&#39;s the current SQL query:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span></span>
<span class="line"><span class="token keyword">FROM</span> outbox_messages</span>
<span class="line"><span class="token keyword">WHERE</span> processed_on_utc <span class="token operator">IS</span> <span class="token boolean">NULL</span></span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> occurred_on_utc <span class="token keyword">LIMIT</span> <span class="token variable">@BatchSize</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can modify the query to return only the columns we need. This will save us some bandwidth but will not significantly improve performance.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> id <span class="token keyword">AS</span> Id<span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token keyword">AS</span> <span class="token keyword">Type</span><span class="token punctuation">,</span> content <span class="token keyword">as</span> Content</span>
<span class="line"><span class="token keyword">FROM</span> outbox_messages</span>
<span class="line"><span class="token keyword">WHERE</span> processed_on_utc <span class="token operator">IS</span> <span class="token boolean">NULL</span></span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> occurred_on_utc <span class="token keyword">LIMIT</span> <span class="token variable">@BatchSize</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s examine the execution plan for this query. You&#39;ll see it&#39;s performing a table scan. I&#39;m running this on PostgreSQL, and here&#39;s what I get from <code>EXPLAIN ANALYZE</code>:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">EXPLAIN</span> <span class="token keyword">ANALYZE</span></span>
<span class="line"><span class="token comment">--</span></span>
<span class="line"><span class="token comment">-- Limit  (cost=86169.40..86286.08 rows=1000 width=129) (actual time=122.744..124.234 rows=1000 loops=1)</span></span>
<span class="line"><span class="token comment">--   -&gt;  Gather Merge  (cost=86169.40..245080.50 rows=1362000 width=129) (actual time=122.743..124.198 rows=1000 loops=1)</span></span>
<span class="line"><span class="token comment">--         Workers Planned: 2</span></span>
<span class="line"><span class="token comment">--         Workers Launched: 2</span></span>
<span class="line"><span class="token comment">--         -&gt;  Sort  (cost=85169.38..86871.88 rows=681000 width=129) (actual time=121.478..121.492 rows=607 loops=3)</span></span>
<span class="line"><span class="token comment">--               Sort Key: occurred_on_utc</span></span>
<span class="line"><span class="token comment">--               Sort Method: top-N heapsort  Memory: 306kB</span></span>
<span class="line"><span class="token comment">--               Worker 0:  Sort Method: top-N heapsort  Memory: 306kB</span></span>
<span class="line"><span class="token comment">--               Worker 1:  Sort Method: top-N heapsort  Memory: 306kB</span></span>
<span class="line"><span class="token comment">--               -&gt;  Parallel Seq Scan on outbox_messages  (cost=0.00..47830.88 rows=681000 width=129) (actual time=0.016..67.481 rows=666667 loops=3)</span></span>
<span class="line"><span class="token comment">--                    Filter: (processed_on_utc IS NULL)</span></span>
<span class="line"><span class="token comment">-- Planning Time: 0.051 ms</span></span>
<span class="line"><span class="token comment">-- Execution Time: 124.298 ms</span></span>
<span class="line"><span class="token comment">--</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, I&#39;ll create an index that &quot;covers&quot; the query for fetching unprocessed messages. A covered index contains all the columns needed to satisfy a query without accessing the table itself.</p><p>The index will be on the <code>occurred_on_utc</code> and <code>processed_on_utc</code> columns. It will include the <code>id</code>, <code>type</code>, and <code>content</code> columns. Lastly, we&#39;ll apply a filter to index unprocessed messages only.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> idx_outbox_messages_unprocessed</span>
<span class="line"><span class="token keyword">ON</span> <span class="token keyword">public</span><span class="token punctuation">.</span>outbox_messages <span class="token punctuation">(</span>occurred_on_utc<span class="token punctuation">,</span> processed_on_utc<span class="token punctuation">)</span></span>
<span class="line">INCLUDE <span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">type</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">WHERE</span> processed_on_utc <span class="token operator">IS</span> <span class="token boolean">NULL</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let me explain the reasoning behind each decision:</p><ul><li>Indexing the <code>occurred_on_utc</code> will store the entries in the index in ascending order. This matches the <code>ORDER BY occurred_on_utc</code> statement in the query. This means the query can scan the index without sorting the results. The results are already in the correct sort order.</li><li>Including the columns we select in the index allows us to return them from the index entry. This avoids reading the values from the table rows.</li><li>Filtering for unprocessed messages in the index satisfies the <code>WHERE processed_on_utc IS NULL</code> statement.</li></ul><div class="hint-container tip"><p class="hint-container-title">Caveat</p><p>PostgreSQL has a maximum index row size of <strong>2712B</strong> (don&#39;t ask how I know). The columns in the <code>INCLUDE</code> list are also part of the index row (B-tree tuple). The <code>content</code> column contains the serialized JSON message, so it&#39;s the most likely culprit to make us exceed this limit. There&#39;s no way around it, so my advice is to keep your messages as small as possible. You could exclude this column from the <code>INCLUDE</code> list for a minor performance hit.</p></div><p>Here&#39;s the updated execution plan after creating this index:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">EXPLAIN</span> <span class="token keyword">ANALYZE</span></span>
<span class="line"><span class="token comment">-- </span></span>
<span class="line"><span class="token comment">-- Limit  (cost=0.43..102.82 rows=1000 width=129) (actual time=0.016..0.160 rows=1000 loops=1)</span></span>
<span class="line"><span class="token comment">--   -&gt;  Index Only Scan using idx_outbox_messages_unprocessed on outbox_messages  (cost=0.43..204777.36 rows=2000000 width=129) (actual time=0.015..0.125 rows=1000 loops=1)</span></span>
<span class="line"><span class="token comment">--         Heap Fetches: 0</span></span>
<span class="line"><span class="token comment">-- Planning Time: 0.059 ms</span></span>
<span class="line"><span class="token comment">-- Execution Time: 0.189 ms</span></span>
<span class="line"><span class="token comment">--</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because we have a covered index, the execution plan only contains an <code>Index Only Scan</code> and <code>Limit</code> operation. There&#39;s no filtering or sorting that needs to happen, which is why we see a massive performance improvement.</p><p>What&#39;s the performance impact on the query time?</p><ul><li>Query time: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>70</mn><mtext> ms</mtext></mrow><annotation encoding="application/x-tex">70 \\text{ ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">70</span><span class="mord text"><span class="mord"> ms</span></span></span></span></span> → <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mtext> ms</mtext></mrow><annotation encoding="application/x-tex">1 \\text{ ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mord text"><span class="mord"> ms</span></span></span></span></span> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>98.5</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">-98.5\\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">98.5%</span></span></span></span>)</li></ul><hr><h2 id="optimizing-message-publishing" tabindex="-1"><a class="header-anchor" href="#optimizing-message-publishing"><span>Optimizing Message Publishing</span></a></h2><p>The next thing we can optimize is how we&#39;re publishing messages to the queue. I&#39;m using the <code>IPublishEndpoint</code> from MassTransit to publish to RabbitMQ.</p><p>To be more precise here, we&#39;re publishing to an exchange. The exchange will then route the message to the appropriate queue.</p><p>But how can we optimize this?</p><p>A micro-optimization we can do is introduce a cache for the message types used in serialization. Performing reflection constantly for every message type is expensive, so we&#39;ll do the reflection once, and store the result.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> messageType <span class="token operator">=</span> Messaging<span class="token punctuation">.</span>Contracts<span class="token punctuation">.</span>AssemblyReference<span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The cache can be a <code>ConcurrentDictionary</code>, and we&#39;ll use <code>GetOrAdd</code> to retrieve the cached types.</p><p>I&#39;ll extract this piece of code to the <code>GetOrAddMessageType</code> helper method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">ConcurrentDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Type<span class="token punctuation">&gt;</span></span> TypeCache <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">Type</span> <span class="token function">GetOrAddMessageType</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> typeName<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> TypeCache<span class="token punctuation">.</span><span class="token function">GetOrAdd</span><span class="token punctuation">(</span></span>
<span class="line">        typeName<span class="token punctuation">,</span></span>
<span class="line">        name <span class="token operator">=&gt;</span> Messaging<span class="token punctuation">.</span>Contracts<span class="token punctuation">.</span>AssemblyReference<span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is what our message publishing step looks like. The biggest problem is we&#39;re waiting for the <code>Publish</code> to complete by awaiting it. The <code>Publish</code> takes some time because it&#39;s waiting for confirmation from the message broker. We&#39;re doing this in a loop, which makes it even less efficient.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> updateQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConcurrentQueue<span class="token punctuation">&lt;</span>OutboxUpdate<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> message <span class="token keyword">in</span> messages<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> messageType <span class="token operator">=</span> Messaging<span class="token punctuation">.</span>Contracts<span class="token punctuation">.</span>AssemblyReference<span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> deserializedMessage <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Content<span class="token punctuation">,</span> messageType<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// We&#39;re waiting for the message broker confirmation here.</span></span>
<span class="line">        <span class="token keyword">await</span> publishEndpoint<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>deserializedMessage<span class="token punctuation">,</span> messageType<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        updateQueue<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OutboxUpdate</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Id <span class="token operator">=</span> message<span class="token punctuation">.</span>Id<span class="token punctuation">,</span></span>
<span class="line">            ProcessedOnUtc <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        updateQueue<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OutboxUpdate</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Id <span class="token operator">=</span> message<span class="token punctuation">.</span>Id<span class="token punctuation">,</span></span>
<span class="line">            ProcessedOnUtc <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">,</span></span>
<span class="line">            Error <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can improve this by publishing the messages in a batch. In fact, the <code>IPublishEndpoint</code> has a <code>PublishBatch</code> extension method. If we peek inside, here&#39;s what we&#39;ll find:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// MassTransit implementation</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Task</span> <span class="token function">PublishBatch</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">this</span> <span class="token class-name">IPublishEndpoint</span> endpoint<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> messages<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">WhenAll</span><span class="token punctuation">(</span>messages<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> endpoint<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So we can transform the collection of messages into a list of publishing tasks that we can await using <code>Task.WhenAll</code>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> updateQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConcurrentQueue<span class="token punctuation">&lt;</span>OutboxUpdate<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> publishTasks <span class="token operator">=</span> messages</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>message <span class="token operator">=&gt;</span> <span class="token function">PublishMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> updateQueue<span class="token punctuation">,</span> publishEndpoint<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">WhenAll</span><span class="token punctuation">(</span>publishTasks<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// I extracted the message publishing into a separate method for readability.</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">PublishMessage</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">OutboxMessage</span> message<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">ConcurrentQueue<span class="token punctuation">&lt;</span>OutboxUpdate<span class="token punctuation">&gt;</span></span> updateQueue<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">IPublishEndpoint</span> publishEndpoint<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> messageType <span class="token operator">=</span> <span class="token function">GetOrAddMessageType</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> deserializedMessage <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Content<span class="token punctuation">,</span> messageType<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> publishEndpoint<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>deserializedMessage<span class="token punctuation">,</span> messageType<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        updateQueue<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OutboxUpdate</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Id <span class="token operator">=</span> message<span class="token punctuation">.</span>Id<span class="token punctuation">,</span></span>
<span class="line">            ProcessedOnUtc <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        updateQueue<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OutboxUpdate</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Id <span class="token operator">=</span> message<span class="token punctuation">.</span>Id<span class="token punctuation">,</span></span>
<span class="line">            ProcessedOnUtc <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow<span class="token punctuation">,</span></span>
<span class="line">            Error <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What&#39;s the improvement for the message publishing step?</p><ul><li>Publish time: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>320</mn><mtext> ms</mtext></mrow><annotation encoding="application/x-tex">320 \\text{ ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">320</span><span class="mord text"><span class="mord"> ms</span></span></span></span></span> → <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>289</mn><mtext> ms</mtext></mrow><annotation encoding="application/x-tex">289 \\text{ ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">289</span><span class="mord text"><span class="mord"> ms</span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mo>−</mo><mn>9.8</mn><mi mathvariant="normal">%</mi><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\\left(-9.8\\%\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">−</span><span class="mord">9.8%</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></li></ul><p>As you can see, it&#39;s not significantly faster. But this is needed for us to benefit from other optimizations I have in store.</p><hr><h2 id="optimizing-update-queries" tabindex="-1"><a class="header-anchor" href="#optimizing-update-queries"><span>Optimizing Update Queries</span></a></h2><p>The next step in our optimization journey is addressing the query updating the processed Outbox messages.</p><p>The current implementation is inefficient because we send one query to the database for each Outbox message.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> outboxUpdate <span class="token keyword">in</span> updateQueue<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">@&quot;&quot;&quot;</span>
<span class="line">        UPDATE outbox_messages</span>
<span class="line">        SET processed_on_utc = @ProcessedOnUtc, error = @Error</span>
<span class="line">        WHERE id = @Id</span>
<span class="line">        &quot;&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        outboxUpdate<span class="token punctuation">,</span></span>
<span class="line">        <span class="token named-parameter punctuation">transaction</span><span class="token punctuation">:</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you didn&#39;t get the memo by now, batching is the name of the game. We want a way to send one large <code>UPDATE</code> query to the database.</p><p>We have to construct the SQL for this batch query manually. We&#39;ll use the <code>DynamicParameters</code> type from Dapper to provide all the parameters.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> updateSql <span class="token operator">=</span></span>
<span class="line">    <span class="token string">@&quot;&quot;&quot;</span>
<span class="line">    UPDATE outbox_messages</span>
<span class="line">    SET processed_on_utc = v.processed_on_utc,</span>
<span class="line">        error = v.error</span>
<span class="line">    FROM (VALUES</span>
<span class="line">        {0}</span>
<span class="line">    ) AS v(id, processed_on_utc, error)</span>
<span class="line">    WHERE outbox_messages.id = v.id::uuid</span>
<span class="line">    &quot;&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> updates <span class="token operator">=</span> updateQueue<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> paramNames <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> updates<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token interpolation-string"><span class="token string">$&quot;(@Id</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">i</span><span class="token punctuation">}</span></span><span class="token string">, @ProcessedOn</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">i</span><span class="token punctuation">}</span></span><span class="token string">, @Error</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">i</span><span class="token punctuation">}</span></span><span class="token string">)&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> formattedSql <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>updateSql<span class="token punctuation">,</span> paramNames<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DynamicParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> updates<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    parameters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Id</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">i</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> updates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Id<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    parameters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;ProcessedOn</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">i</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> updates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ProcessedOnUtc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    parameters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Error</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">i</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> updates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>formattedSql<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> <span class="token named-parameter punctuation">transaction</span><span class="token punctuation">:</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will produce a SQL query that looks something like this:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">UPDATE</span> outbox_messages</span>
<span class="line"><span class="token keyword">SET</span> processed_on_utc <span class="token operator">=</span> v<span class="token punctuation">.</span>processed_on_utc<span class="token punctuation">,</span></span>
<span class="line">    error <span class="token operator">=</span> v<span class="token punctuation">.</span>error</span>
<span class="line"><span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">VALUES</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">@Id0</span><span class="token punctuation">,</span> <span class="token variable">@ProcessedOn0</span><span class="token punctuation">,</span> <span class="token variable">@Error0</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">@Id1</span><span class="token punctuation">,</span> <span class="token variable">@ProcessedOn1</span><span class="token punctuation">,</span> <span class="token variable">@Error1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">@Id2</span><span class="token punctuation">,</span> <span class="token variable">@ProcessedOn2</span><span class="token punctuation">,</span> <span class="token variable">@Error2</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">-- A few hundred rows in beteween</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token variable">@Id999</span><span class="token punctuation">,</span> <span class="token variable">@ProcessedOn999</span><span class="token punctuation">,</span> <span class="token variable">@Error999</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">AS</span> v<span class="token punctuation">(</span>id<span class="token punctuation">,</span> processed_on_utc<span class="token punctuation">,</span> error<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">WHERE</span> outbox_messages<span class="token punctuation">.</span>id <span class="token operator">=</span> v<span class="token punctuation">.</span>id::uuid</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Instead of sending one update query per message, we can send one query to update all messages.</p><p>This will obviously give us a noticeable performance benefit:</p><ul><li>Update time: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>300</mn><mtext> ms</mtext></mrow><annotation encoding="application/x-tex">300\\text{ ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">300</span><span class="mord text"><span class="mord"> ms</span></span></span></span></span> → <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>52</mn><mtext> ms</mtext></mrow><annotation encoding="application/x-tex">52 \\text{ ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">52</span><span class="mord text"><span class="mord"> ms</span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mo>−</mo><mn>82.6</mn><mi mathvariant="normal">%</mi><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\\left(-82.6\\%\\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">−</span><span class="mord">82.6%</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></li></ul><hr><h2 id="how-far-did-we-get" tabindex="-1"><a class="header-anchor" href="#how-far-did-we-get"><span>How Far Did We Get?</span></a></h2><p>Let&#39;s test out the performance improvement with the current optimizations. The changes we made so far focus on improving the speed of the <code>OutboxProcessor</code>.</p><p>Here are the rough numbers I&#39;m seeing for the individual steps:</p><ul><li>Query time: ~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mtext> ms</mtext></mrow><annotation encoding="application/x-tex">1 \\text{ ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mord text"><span class="mord"> ms</span></span></span></span></span></li><li>Publish time: ~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>289</mn><mtext> ms</mtext></mrow><annotation encoding="application/x-tex">289 \\text{ ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">289</span><span class="mord text"><span class="mord"> ms</span></span></span></span></span></li><li>Update time: ~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>52</mn><mtext> ms</mtext></mrow><annotation encoding="application/x-tex">52 \\text{ ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">52</span><span class="mord text"><span class="mord"> ms</span></span></span></span></span></li></ul><p>I&#39;ll run the Outbox processing for 1 minute and count the number of processed messages.</p><p>The optimized implementation processed <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>162</mn><mo separator="true">,</mo><mn>000</mn></mrow><annotation encoding="application/x-tex">162,000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">162</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span></span></span></span> messages in one minute or <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo separator="true">,</mo><mn>700</mn><mi>M</mi><mi>P</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">2,700 MPS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">700</span><span class="mord mathnormal" style="margin-right:0.05764em;">MPS</span></span></span></span>.</p><p>For reference, this allows us to process more than 230 million messages per day.</p><p>But we&#39;re just getting started.</p><hr><h2 id="parallel-outbox-processing" tabindex="-1"><a class="header-anchor" href="#parallel-outbox-processing"><span>Parallel Outbox Processing</span></a></h2><p>If we want to take this further, we have to scale out the <code>OutboxProcessor</code>. The problem we could face here is processing the same message more than once. So, we need to implement some form of locking on the current batch of messages.</p><p>PostgreSQL has a convenient <code>FOR UPDATE</code> statement that we can use here. It will lock the selected rows for the duration of the current transaction. However, we must add the <code>SKIP LOCKED</code> statement to allow other queries to skip the locked rows. Otherwise, any other query will be blocked until the current transaction is completed.</p><p>Here&#39;s the updated query:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> id <span class="token keyword">AS</span> Id<span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token keyword">AS</span> <span class="token keyword">Type</span><span class="token punctuation">,</span> content <span class="token keyword">as</span> Content</span>
<span class="line"><span class="token keyword">FROM</span> outbox_messages</span>
<span class="line"><span class="token keyword">WHERE</span> processed_on_utc <span class="token operator">IS</span> <span class="token boolean">NULL</span></span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> occurred_on_utc <span class="token keyword">LIMIT</span> <span class="token variable">@BatchSize</span></span>
<span class="line"><span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span> SKIP LOCKED</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To scale out the <code>OutboxProcessor</code>, we simply run multiple instances of the background job.</p><p>I&#39;ll simulate this using <code>Parallel.ForEachAsync</code>, where I can control the <code>MaxDegreeOfParallelism</code>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> parallelOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParallelOptions</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    MaxDegreeOfParallelism <span class="token operator">=</span> _maxParallelism<span class="token punctuation">,</span></span>
<span class="line">    CancellationToken <span class="token operator">=</span> cancellationToken</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> Parallel<span class="token punctuation">.</span><span class="token function">ForEachAsync</span><span class="token punctuation">(</span></span>
<span class="line">    Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _maxParallelism<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    parallelOptions<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> token<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> <span class="token function">ProcessOutboxMessages</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can process <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>179</mn><mo separator="true">,</mo><mn>000</mn></mrow><annotation encoding="application/x-tex">179,000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">179</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span></span></span></span> messages in one minute or <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo separator="true">,</mo><mn>983</mn><mtext> MPS</mtext></mrow><annotation encoding="application/x-tex">2,983\\text{ MPS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">983</span><span class="mord text"><span class="mord"> MPS</span></span></span></span></span> with five (5) workers.</p><p>I thought this was supposed to be <em>much</em> faster. What gives?</p><p>Without parallel processing, we were able to get ~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo separator="true">,</mo><mn>700</mn><mtext> MPS</mtext></mrow><annotation encoding="application/x-tex">2,700\\text{ MPS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">700</span><span class="mord text"><span class="mord"> MPS</span></span></span></span></span>.</p><p>A new <strong>bottleneck</strong> appears: publishing the messages in batches.</p><p>The publish time went from <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> </mtext><mn>289</mn><mtext> ms</mtext></mrow><annotation encoding="application/x-tex">~289\\text{ ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mspace nobreak"> </span><span class="mord">289</span><span class="mord text"><span class="mord"> ms</span></span></span></span></span> to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> </mtext><mn>1</mn><mo separator="true">,</mo><mn>540</mn><mtext> ms</mtext></mrow><annotation encoding="application/x-tex">~1,540\\text{ ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mspace nobreak"> </span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">540</span><span class="mord text"><span class="mord"> ms</span></span></span></span></span>.</p><p>Interestingly, if you multiply the base publish time (for one worker) by the number of workers, you roughly get to the new publish time.</p><p>We&#39;re wasting a lot of time waiting for the acknowledgment from the message broker.</p><p>How can we fix this?</p><hr><h2 id="batching-message-publishing" tabindex="-1"><a class="header-anchor" href="#batching-message-publishing"><span>Batching Message Publishing</span></a></h2><p>RabbitMQ supports publishing messages in batches. We can enable this feature when configuring MassTransit by calling the <code>ConfigureBatchPublish</code> method. MassTransit will buffer messages before sending them to RabbitMQ, to increase throughput.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddMassTransit</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    x<span class="token punctuation">.</span><span class="token function">UsingRabbitMq</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        cfg<span class="token punctuation">.</span><span class="token function">Host</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;Queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hostCfg <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            hostCfg<span class="token punctuation">.</span><span class="token function">ConfigureBatchPublish</span><span class="token punctuation">(</span>batch <span class="token operator">=&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                batch<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        cfg<span class="token punctuation">.</span><span class="token function">ConfigureEndpoints</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With only this small change, let&#39;s rerun our test with five workers.</p><p>This time around, we&#39;re able to process <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>956</mn><mo separator="true">,</mo><mn>000</mn></mrow><annotation encoding="application/x-tex">1,956,000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">956</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span></span></span></span> messages in one minute.</p><p>Which gives us a blazing ~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>32</mn><mo separator="true">,</mo><mn>500</mn><mtext> MPS</mtext></mrow><annotation encoding="application/x-tex">32,500\\text{ MPS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">32</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">500</span><span class="mord text"><span class="mord"> MPS</span></span></span></span></span>.</p><p>This is more than 2.8 billion processed messages per day.</p><p>I could call it a day here, but there&#39;s one more thing I want to show you.</p><hr><h2 id="turning-off-publisher-confirmation-dangerous" tabindex="-1"><a class="header-anchor" href="#turning-off-publisher-confirmation-dangerous"><span>Turning Off Publisher Confirmation (Dangerous)</span></a></h2><p>One more thing you <em>can</em> do (<strong>which I don&#39;t recommend</strong>) is turn off publisher confirmation. This means that calling <code>Publish</code> won&#39;t wait until the message is confirmed by the broker (ack&#39;d). It could lead to <strong>reliability issues</strong> and potentially <strong>losing messages</strong>.</p><p>That being said, I did manage to get ~37,000 MPS with publisher confirmation turned off.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">cfg<span class="token punctuation">.</span><span class="token function">Host</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;Queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hostCfg <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    hostCfg<span class="token punctuation">.</span>PublisherConfirmation <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// Dangerous. I don&#39;t recommend it.</span></span>
<span class="line">    hostCfg<span class="token punctuation">.</span><span class="token function">ConfigureBatchPublish</span><span class="token punctuation">(</span>batch <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        batch<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="key-considerations-for-scaling" tabindex="-1"><a class="header-anchor" href="#key-considerations-for-scaling"><span>Key Considerations for Scaling</span></a></h2><p>While we&#39;ve achieved impressive throughput, consider these factors when implementing these techniques in a real-world system:</p><ol><li><strong>Consumer Capacity</strong>: Can your consumers keep up? Boosting producer throughput without matching consumer capacity can create backlogs. Consider the entire pipeline when scaling.</li><li><strong>Delivery Guarantees</strong>: Our optimizations maintain at-least-once delivery. Design consumers to be idempotent to handle occasional duplicate messages.</li><li><strong>Message Ordering</strong>: Parallel processing with <code>FOR UPDATE SKIP LOCKED</code> may cause out-of-order messages. For strict ordering, consider the <strong>Inbox pattern</strong> on the consumer side to buffer messages. An Inbox allows us to process messages in the correct order, even if they arrive out of sequence.</li><li><strong>Reliability vs. Performance Trade-offs</strong>: Turning off publisher confirmation increases speed but risks message loss. Weigh performance against reliability based on your specific needs.</li></ol><p>By addressing these factors, you&#39;ll create a high-performance Outbox processor that integrates smoothly with your system architecture.</p><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>We&#39;ve come a long way from our initial Outbox processor. Here&#39;s what we accomplished:</p><ol><li>Optimized database queries with smart indexing</li><li>Improved message publishing with batching</li><li>Streamlined database updates with batching</li><li>Scaled out Outbox processing with parallel workers</li><li>Leveraged RabbitMQ&#39;s batch publishing feature</li></ol><p>The result? We boosted processing from 1,350 messages per second to an impressive <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>32</mn><mo separator="true">,</mo><mn>500</mn><mi>M</mi><mi>P</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">32,500 MPS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">32</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">500</span><span class="mord mathnormal" style="margin-right:0.05764em;">MPS</span></span></span></span>. That&#39;s over 2.8 billion messages per day!</p><p>Scaling isn&#39;t just about raw speed - it&#39;s about identifying and addressing bottlenecks at each step. By measuring, optimizing, and rethinking our approach, we achieved massive performance gains.</p><p>That&#39;s all for today. Hope this was helpful.</p>`,124)),n("div",M,[s[19]||(s[19]=n("p",{class:"hint-container-title"},"P.S.",-1)),n("p",null,[s[17]||(s[17]=a("You can find the ")),n("a",S,[s[14]||(s[14]=a("source code (")),e(m,{icon:"iconfont icon-github"}),s[15]||(s[15]=n("code",null,"m-jovanovic/outbox-scaling",-1)),s[16]||(s[16]=a(")"))]),s[18]||(s[18]=a(" here."))]),e(c,{name:"m-jovanovic/outbox-scaling",desc:"Demonstrating how to scale the Outbox Pattern to 2B+ messages per day (~30,000 messages per second). - m-jovanovic/outbox-scaling",url:"https://github.com/m-jovanovic/outbox-scaling/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/7f2f26352f48833b44d3e83bbdfedd65d9a9d88a8bde744ea74721acb9cd2a22/m-jovanovic/outbox-scaling"})]),s[22]||(s[22]=n("hr",null,null,-1)),g(" TODO: add ARTICLE CARD "),e(l,i(u({title:"Scaling the Outbox Pattern (2B+ messages per day)",desc:"Learn how to supercharge your Outbox pattern implementation, scaling to 30,500 messages per second. Through strategic optimizations in database queries, message publishing, and parallel processing, I'll show you how to handle over 2.8 billion messages daily while maintaining system reliability.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/scaling-the-outbox-pattern.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const O=k(y,[["render",P]]),I=JSON.parse('{"path":"/milanjovanovic.tech/scaling-the-outbox-pattern.html","title":"Scaling the Outbox Pattern (2B+ messages per day)","lang":"en-US","frontmatter":{"lang":"en-US","title":"Scaling the Outbox Pattern (2B+ messages per day)","description":"Article(s) > Scaling the Outbox Pattern (2B+ messages per day)","icon":"iconfont icon-csharp","category":["C#","DotNet","PostgreSQL","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet","postgres"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Scaling the Outbox Pattern (2B+ messages per day)\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_111.png\\"],\\"datePublished\\":\\"2024-10-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/scaling-the-outbox-pattern.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Scaling the Outbox Pattern (2B+ messages per day)"}],["meta",{"property":"og:description","content":"Article(s) > Scaling the Outbox Pattern (2B+ messages per day)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_111.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_111.png"}],["meta",{"name":"twitter:image:alt","content":"Scaling the Outbox Pattern (2B+ messages per day)"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"postgres"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-10-12T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Scaling the Outbox Pattern (2B+ messages per day)"},{"property":"og:description","content":"Scaling the Outbox Pattern (2B+ messages per day)"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/scaling-the-outbox-pattern.html"}]],"prev":"/programming/cs/articles/README.md","date":"2024-10-12T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_111.png"},"git":{},"readingTime":{"minutes":10.47,"words":3141},"filePathRelative":"milanjovanovic.tech/scaling-the-outbox-pattern.md","copyright":{"author":"Milan Jovanović"}}');export{O as comp,I as data};
