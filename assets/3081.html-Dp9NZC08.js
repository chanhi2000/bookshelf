import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as a,b as c,a as v,t as h,n as u,g as r,w as p,e as t,r as o,o as b}from"./app-BVguHYKu.js";const f={},y={id:"frontmatter-title-관련",tabindex:"-1"},j={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},_={href:"https://dev.to/hmpljs/how-to-reduce-web-application-bundle-size-1gie",target:"_blank",rel:"noopener noreferrer"},x={class:"hint-container info"};function q(d,n){const l=o("VPCard"),e=o("router-link"),i=o("SiteInfo"),k=o("VPIcon");return b(),g("div",null,[s("h1",y,[s("a",j,[s("span",null,h(d.$frontmatter.title)+" 관련",1)])]),a(l,u(r({title:"Node.js > Article(s)",desc:"Article(s)",link:"/programming/js-node/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",w,[s("ul",null,[s("li",null,[a(e,{to:"#플랫폼-의존성"},{default:p(()=>n[0]||(n[0]=[t("플랫폼 의존성")])),_:1,__:[0]})]),s("li",null,[a(e,{to:"#csr에서-ssr-ssg-isg-등-로-이관"},{default:p(()=>n[1]||(n[1]=[t("CSR에서 SSR(SSG, ISG 등)로 이관")])),_:1,__:[1]})]),s("li",null,[a(e,{to:"#hmpl-js를-사용한-서버-지향-방식-구현"},{default:p(()=>n[2]||(n[2]=[t("HMPL.js를 사용한 서버 지향 방식 구현")])),_:1,__:[2]})]),s("li",null,[a(e,{to:"#번들-크기를-줄이는-데-도움을-주는-일반적인-방법"},{default:p(()=>n[3]||(n[3]=[t("번들 크기를 줄이는 데 도움을 주는 일반적인 방법")])),_:1,__:[3]}),s("ul",null,[s("li",null,[a(e,{to:"#_1-불필요한-의존성-제거"},{default:p(()=>n[4]||(n[4]=[t("1. 불필요한 의존성 제거")])),_:1,__:[4]})]),s("li",null,[a(e,{to:"#_2-작은-크기의-미디어-파일-사용"},{default:p(()=>n[5]||(n[5]=[t("2. 작은 크기의 미디어 파일 사용")])),_:1,__:[5]})]),s("li",null,[a(e,{to:"#_3-cdn-사용"},{default:p(()=>n[6]||(n[6]=[t("3. CDN 사용")])),_:1,__:[6]})]),s("li",null,[a(e,{to:"#_4-코드-분할"},{default:p(()=>n[7]||(n[7]=[t("4. 코드 분할")])),_:1,__:[7]})]),s("li",null,[a(e,{to:"#_5-코드-압축"},{default:p(()=>n[8]||(n[8]=[t("5. </> 코드 압축")])),_:1,__:[8]})])])]),s("li",null,[a(e,{to:"#결론"},{default:p(()=>n[9]||(n[9]=[t("결론")])),_:1,__:[9]})])])]),n[14]||(n[14]=s("hr",null,null,-1)),a(i,{name:"웹 애플리케이션 성능 끌어올리는 ‘번들 크기 최적화’",desc:"프로젝트를 오랫동안 작업하다 보면, 기능을 추가할수록 웹 애플리케이션이 느려지는 것을 종종 발견하게 됩니다. 테이블이나 버튼 또는 다른 무언가를 추가하는 것이 크게 무게를 차지하지 않는 것처럼 보이지만, 결과적으로 초기 로딩 시간이 10~30초 이상 걸리는 등 용납할 수 없는 수준이 될 수 있습니다. 이번 글에서는 이러한 문제를 피하고 사이트의 로딩 속도를 빠르게 하며, 크기를 최대한 줄일 수 있는 몇 가지 방법과 팁을 살펴보고자 합니다.",url:"https://yozm.wishket.com/magazine/detail/3081/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/3081/lightbulb-abstract-geometric-design-creative-idea.jpg"}),s("p",null,[n[11]||(n[11]=t("본문은 요즘IT와 번역가 David가 함께 안토니 맥스(Anthony Max)의 글 <")),s("a",_,[a(k,{icon:"fa-brands fa-dev"}),n[10]||(n[10]=t("How to Reduce Web Application Bundle Size?"))]),n[12]||(n[12]=t(">을 번역한 글입니다. 필자는 6년 이상 웹 개발 분야에서 활동해 온 개발자로, 다양한 외주 및 기업 프로젝트에 참여한 경험이 있습니다. 현재 그는 오픈 소스 프로젝트인 HMPL 템플릿 언어를 개발하고 있으며, 가상 DOM 없이도 빠른 성능을 제공하는 Cample 프레임워크를 개발한 경험이 있습니다. 이 글에서는 웹 애플리케이션의 번들 크기를 줄여 성능을 향상시키는 다양한 방법을 소개합니다."))]),n[15]||(n[15]=c(`<p>프로젝트를 오랫동안 작업하다 보면, 기능을 추가할수록 웹 애플리케이션이 느려지는 것을 종종 발견하게 됩니다. 테이블이나 버튼 또는 다른 무언가를 추가하는 것이 크게 무게를 차지하지 않는 것처럼 보이지만, 결과적으로 초기 로딩 시간이 10~30초 이상 걸리는 등 용납할 수 없는 수준이 될 수 있습니다.</p><p>이번 글에서는 이러한 문제를 피하고 사이트의 로딩 속도를 빠르게 하며, 크기를 최대한 줄일 수 있는 몇 가지 방법과 팁을 살펴보고자 합니다.</p><hr><h2 id="플랫폼-의존성" tabindex="-1"><a class="header-anchor" href="#플랫폼-의존성"><span>플랫폼 의존성</span></a></h2><p>웹 애플리케이션의 크기를 줄이고 싶다면, 우선 기본 플랫폼부터 시작해야 합니다. Next.js를 사용한다면 특정 방법들이 있고, 직접 작성한 사이트라면 다른 방법이 있습니다.</p><figure><img src="https://wishket.com/media/news/3081/pic_1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>무엇보다도 동일한 프레임워크나 라이브러리를 구성하여, 더 나은 결과를 얻을 수 있는 방법을 찾는 것이 중요합니다. 예를 들어, 서버 요청에 대한 응답 캐싱이나 이미지용 애드온 등의 몇 가지 설정만 변경하면 됩니다. 이런 기능들은 때로는 이미 설정 자체에 내장되어 있어 찾기만 하면 됩니다.</p><hr><h2 id="csr에서-ssr-ssg-isg-등-로-이관" tabindex="-1"><a class="header-anchor" href="#csr에서-ssr-ssg-isg-등-로-이관"><span>CSR에서 SSR(SSG, ISG 등)로 이관</span></a></h2><p>번들 크기를 줄이는 가장 좋은 방법 중 하나는 페이지 일부의 렌더링을 클라이언트에서 서버로 옮기는 것입니다. 이렇게 하면 컴포넌트가 하나씩 차례대로 로드되는 일종의 프레임워크를 얻을 수 있습니다. 따라서 이러한 프로젝트의 HTML 및 JS 소스 파일의 크기는 빈 태그와 준비된 컴포넌트를 넣는 서버 요청으로만 구성됩니다.</p><p>이러한 접근 방식의 예는 다음 코드와 같습니다.</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>&lt;%= data.title %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>&lt;%= data.title %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>&lt;%= data.content %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="server.js"><span>server.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// EJS를 템플릿 엔진으로 설정</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;view engine&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ejs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 샘플 데이터</span></span>
<span class="line"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;서버 사이드 렌더링 예제&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;이것은 Node.js와 EJS를 사용한 서버 사이드 렌더링의 예시입니다.&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 루트 정의</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// EJS를 사용하여 HTML 렌더링</span></span>
<span class="line">    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 서버 시작</span></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">서버가 http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">에서 실행 중입니다</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>여기서 우리는 EJS와 Express 덕분에 모든 것을 서버에서 렌더링할 수 있습니다. 또한 사이트를 Next.js로 재설계할 수 있으며, 그러면 한 페이지뿐만 아니라, 동적 경로를 포함한 다른 페이지에서도 유사한 효과를 얻을 수 있고, 물론 크롤러에 의한 인덱싱도 가능합니다.</p><p>하지만 SSR(SSG, ISG 등)을 구현하는 이 방법에는 심각한 단점이 있어 적합하지 않을 수도 있습니다. 예를 들어, 사이트가 이미 클라이언트 측에 초점을 맞춘 프레임워크나 라이브러리 중 하나를 사용하고 있다면, 모든 것을 다시 만드는 데 많은 비용과 시간이 들 수 있습니다.</p><p>또한 Next.js를 제외한 이러한 도구를 선택하는 경우, 해당 작업에 적합한 인력 부족을 초래할 수 있습니다. 한 사람이 특정 프레임워크로 일하는 법을 배웠는데, 그 일자리가 인기가 없거나 대체하기 어려운 라이브러리를 사용한다면, 적합한 지원자를 찾는 것이 문제가 될 수 있습니다.</p><p>서버 지향 접근 방식을 유지하면서도 위에서 설명한 중요한 문제를 겪지 않으려면, HMPL.js나 유사한 라이브러리를 사용할 수 있습니다.</p><hr><h2 id="hmpl-js를-사용한-서버-지향-방식-구현" tabindex="-1"><a class="header-anchor" href="#hmpl-js를-사용한-서버-지향-방식-구현"><span>HMPL.js를 사용한 서버 지향 방식 구현</span></a></h2><p>위에서 설명한 방법과 달리, 이 모듈은 크롤러가 페이지를 인덱싱하도록 허용하지 않지만, WordPress, Vue.js, Tilda, Next.js 등 원하는 어떤 웹 애플리케이션이나 사이트에도 연결할 수 있습니다.</p><p>모듈 작업은 다음과 같습니다.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="index.html"><span>index.html</span></div><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/json5/dist/index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/hmpl-js/dist/hmpl.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="client.js"><span>client.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> templateFn <span class="token operator">=</span> hmpl<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;</span>
<span class="line">      &lt;button data-action=&quot;increment&quot; id=&quot;btn&quot;&gt;Click!&lt;/button&gt;</span>
<span class="line">      &lt;div&gt;Clicks: {{ src: &quot;/api/clicks&quot;, after: &quot;click:#btn&quot; }}&lt;/div&gt;</span>
<span class="line">  &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> clicker <span class="token operator">=</span> <span class="token function">templateFn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token literal-property property">request</span><span class="token operator">:</span> <span class="token punctuation">{</span> event <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">action</span><span class="token operator">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;data-action&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>response<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>clicker<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>여기서도 렌더링 된 HTML을 얻지만, 따라야 할 명확한 아키텍처는 없습니다. 어떤 프로젝트에서든 모듈을 비활성화하거나 활성화할 수 있으며 아무런 문제가 없습니다. 또한 사용하기 쉬우며, 작지만 필요한 기능으로 구성되어 있습니다. 예시에서는 ‘after’를 안전하게 제거하고 DOM 렌더링 중에 컴포넌트를 로드할 수 있습니다.</p><hr><h2 id="번들-크기를-줄이는-데-도움을-주는-일반적인-방법" tabindex="-1"><a class="header-anchor" href="#번들-크기를-줄이는-데-도움을-주는-일반적인-방법"><span>번들 크기를 줄이는 데 도움을 주는 일반적인 방법</span></a></h2><p>서버와의 작업이 아닌, 웹 애플리케이션과의 일반적인 작업을 한다면, 아래에 설명된 방법들도 번들 크기를 줄이는 데 도움이 될 수 있습니다.</p><h3 id="_1-불필요한-의존성-제거" tabindex="-1"><a class="header-anchor" href="#_1-불필요한-의존성-제거"><span>1. 불필요한 의존성 제거</span></a></h3><p>웹 애플리케이션을 개발하는 과정에서 특정 기능을 구현하기 위해 다양한 패키지를 다운로드하고, 테스트하고, 가장 적합한 것을 선택하는 경우가 있습니다. 이때 사용하지 않는 패키지를 삭제하는 것을 잊으면 번들 크기는 계속 커지게 됩니다. 또는 일반 자바스크립트로 쉽게 해결할 수 있는 간단한 작업을 위해 거대한 모듈을 연결하고, 그중 단 하나의 함수만 사용하는 것도 무의미합니다.</p><p>사용하지 않는 패키지를 파악하기 위해, 다음과 같은 패키지를 사용할 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> <span class="token function">install</span> depcheck</span>
<span class="line">depcheck /path/to/my/project</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>또는</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">npx depcheck</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>이 모듈은 지원이 중단되었지만, 여전히 종속성을 분석하고 사용되지 않는 것을 식별할 수 있습니다. 그러나 사용되지 않는 것처럼 보이지만, 그것 없이는 일부 모듈이 작동하지 않을 수 있으니 신중하게 사용해야 합니다.</p><p>또한 다음 명령을 통해 npm의 내장 기능을 사용할 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> prune</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>이 명령은 “불필요한” 패키지를 제거합니다. 패키지 이름이 제공되면 제공된 이름 중 하나와 일치하는 패키지만 제거됩니다.</p><h3 id="_2-작은-크기의-미디어-파일-사용" tabindex="-1"><a class="header-anchor" href="#_2-작은-크기의-미디어-파일-사용"><span>2. 작은 크기의 미디어 파일 사용</span></a></h3><p>이것은 아마도 제공할 수 있는 가장 간단하고 명백한 조언 중 하나일 것입니다. 프로젝트에 전체 웹 애플리케이션과 크기가 동일한 비디오 하나가 있다면, ‘git clone’과 같은 작업을 수행할 때 매우 어려움을 겪게 될 것입니다.</p><p>이 방법은 이미지에 매우 효과적이며, 손실 없이 이미지당 몇 MB를 절약할 수 있습니다. 요즘은 온라인 압축 플랫폼들이 이를 쉽게 해결해 줍니다.</p><figure><img src="https://wishket.com/media/news/3081/pic_2__1_.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>또한 이미지 해상도를 <code>png</code>, <code>jpg</code>에서 <code>webp</code>로 변경할 수 있습니다. 이 또한 많은 대형 웹 애플리케이션에서 사용되는 좋은 방법입니다.</p><h3 id="_3-cdn-사용" tabindex="-1"><a class="header-anchor" href="#_3-cdn-사용"><span>3. CDN 사용</span></a></h3><p>이는 ‘npm_modules’에서 외부 환경으로 모듈을 불러올 때 사용하는 일반적인 방법 중 하나입니다.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> chunk <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;lodash&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>또는</p><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js&quot;&gt;&lt;/script&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>이것은 앞서 설명한 것과 유사하지만 약간 다른 의미를 가집니다.</p><h3 id="_4-코드-분할" tabindex="-1"><a class="header-anchor" href="#_4-코드-분할"><span>4. 코드 분할</span></a></h3><p>코드를 분할하는 가장 쉬운 방법 중 하나는 동적으로 모듈을 불러오는 것입니다. Webpack 및 Vite와 같은 현대 번들러에서는 다음과 같이 쉽게 작성할 수 있습니다.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="main.js"><span>main.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;loadButton&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./module.js&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">module</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            module<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;모듈 로딩 오류:&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>이 경우 모듈을 바로 로드하지 않고 버튼을 누를 때와 같이 필요할 때만 로드합니다. 또한 청크 분할을 활성화할 수 있습니다. 이는 다른 모듈 간의 공통 코드를 분리하는 데 유용합니다.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="webpack.config.js"><span>webpack.config.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_5-코드-압축" tabindex="-1"><a class="header-anchor" href="#_5-코드-압축"><span>5. <code>&lt;/&gt;</code> 코드 압축</span></a></h3><p>컴파일 중에 코드를 압축하여 번들 크기를 줄일 수도 있습니다. 이것이 아마도 사용할 수 있는 방법 중 가장 좋은 방법일 것입니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">uglifyjs file.js <span class="token parameter variable">-c</span> toplevel,sequences<span class="token operator">=</span>false</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>이를 위해 Uglify.js를 사용할 수 있는데, 이는 코드 압축을 위한 가장 인기 있는 도구 중 하나입니다. 물론 번들러에 기본적으로 포함되어 있지 않다면, 번들러와 함께 사용할 수도 있습니다.</p><hr><h2 id="결론" tabindex="-1"><a class="header-anchor" href="#결론"><span>결론</span></a></h2><p>우선 위에서 나열한 내용들은 대부분의 웹 애플리케이션에 바로 적용할 수 있는 가장 일반적인 방법들입니다. 이 방법들은 실제 웹 개발 작업에서 많은 사람들이 공통적으로 사용하는 인기 있는 방식들입니다. 또한 이미 널리 알려진 DRY<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>(Don&#39;t Repeat Yourself)나 KISS<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup>(Keep It Simple, Stupid)와 같은 원칙보다는, 실무에서 더 구체적이고 현실적으로 활용할 수 있는 실용적인 조언을 드리고자 했습니다.</p><p>이러한 방법들을 잘 적용하시면 여러분의 웹사이트는 더욱 가벼워지고, 로딩 속도도 훨씬 빨라질 것입니다. 이 글이 더 효과적이고 효율적인 웹 개발에 도움이 되길 바랍니다. 읽어주셔서 감사합니다.</p><hr>`,62)),s("div",x,[n[13]||(n[13]=s("p",{class:"hint-container-title"},"원문",-1)),a(i,{name:"⚙️How to Reduce Web Application Bundle Size?🔥",desc:"Often, when working on a project for a long time, you notice that the more functionality you add, the...",url:"https://dev.to/hmpljs/how-to-reduce-web-application-bundle-size-1gie/",logo:"https://media2.dev.to/dynamic/image/width=128,height=,fit=scale-down,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8j7kvp660rqzt99zui8e.png",preview:"https://media2.dev.to/dynamic/image/width=1000,height=500,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fi5ezoop1o9bcoaxzwd7d.gif"})]),v(" TODO: add ARTICLE CARD "),a(l,u(r({title:"웹 애플리케이션 성능 끌어올리는 ‘번들 크기 최적화’",desc:"프로젝트를 오랫동안 작업하다 보면, 기능을 추가할수록 웹 애플리케이션이 느려지는 것을 종종 발견하게 됩니다. 테이블이나 버튼 또는 다른 무언가를 추가하는 것이 크게 무게를 차지하지 않는 것처럼 보이지만, 결과적으로 초기 로딩 시간이 10~30초 이상 걸리는 등 용납할 수 없는 수준이 될 수 있습니다. 이번 글에서는 이러한 문제를 피하고 사이트의 로딩 속도를 빠르게 하며, 크기를 최대한 줄일 수 있는 몇 가지 방법과 팁을 살펴보고자 합니다.",link:"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3081.html",logo:"https://yozm.wishket.com/favicon.ico",background:"rgba(84,7,224,0.2)"})),null,16),n[16]||(n[16]=c('<hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>DRY(Don’t Repeat Yourself): 소프트웨어 개발에서 중복을 최소화하는 원칙을 의미 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>KISS(Keep It Simple, Stupid): 디자인이나 시스템 개발에서 단순함을 추구하는 설계 원칙을 의미 <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li></ol></section>',2))])}const R=m(f,[["render",q]]),T=JSON.parse('{"path":"/yozm.wishket.com/3081.html","title":"웹 애플리케이션 성능 끌어올리는 ‘번들 크기 최적화’","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"웹 애플리케이션 성능 끌어올리는 ‘번들 크기 최적화’","description":"Article(s) > 웹 애플리케이션 성능 끌어올리는 ‘번들 크기 최적화’","icon":"fa-brands fa-node","category":["Node.js","Article(s)"],"tag":["blog","yozm.wishket.com","node","nodejs","node-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"웹 애플리케이션 성능 끌어올리는 ‘번들 크기 최적화’\\",\\"image\\":[\\"https://wishket.com/media/news/3081/pic_1.jpg\\",\\"https://wishket.com/media/news/3081/pic_2__1_.png\\"],\\"datePublished\\":\\"2025-04-23T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"요즘IT의 번역글\\",\\"url\\":\\"https://yozm.wishket.com/magazine/@yozm_global/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3081.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"웹 애플리케이션 성능 끌어올리는 ‘번들 크기 최적화’"}],["meta",{"property":"og:description","content":"Article(s) > 웹 애플리케이션 성능 끌어올리는 ‘번들 크기 최적화’"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/3081/lightbulb-abstract-geometric-design-creative-idea.jpg"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/3081/lightbulb-abstract-geometric-design-creative-idea.jpg"}],["meta",{"name":"twitter:image:alt","content":"웹 애플리케이션 성능 끌어올리는 ‘번들 크기 최적화’"}],["meta",{"property":"article:author","content":"요즘IT의 번역글"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-04-23T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > 웹 애플리케이션 성능 끌어올리는 ‘번들 크기 최적화’"},{"property":"og:description","content":"웹 애플리케이션 성능 끌어올리는 ‘번들 크기 최적화’"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3081.html"}]],"prev":"/programming/js-node/articles/README.md","date":"2025-04-23T00:00:00.000Z","isOriginal":false,"author":[{"name":"요즘IT의 번역글","url":"https://yozm.wishket.com/magazine/@yozm_global/"}],"cover":"https://yozm.wishket.com/media/news/3081/lightbulb-abstract-geometric-design-creative-idea.jpg"},"git":{},"readingTime":{"minutes":1.91,"words":572},"filePathRelative":"yozm.wishket.com/3081.md","copyright":{"author":"요즘IT의 번역글"}}');export{R as comp,T as data};
