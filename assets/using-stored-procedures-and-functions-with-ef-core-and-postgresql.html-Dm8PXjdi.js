import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as e,b as r,a as y,t as h,n as u,g as d,w as t,e as a,r as l,o as b}from"./app-BVguHYKu.js";const w={},f={id:"frontmatter-title-관련",tabindex:"-1"},E={class:"header-anchor",href:"#frontmatter-title-관련"},q={class:"table-of-contents"},S={href:"https://learn.microsoft.com/en-us/ef/core/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://postgresql.org/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://postgresql.org/docs/current/tutorial-window.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://postgresql.org/docs/current/textsearch.html",target:"_blank",rel:"noopener noreferrer"},T={href:"https://postgresql.org/docs/current/queries-with.html",target:"_blank",rel:"noopener noreferrer"},F={href:"https://learn.microsoft.com/en-us/dotnet/api/system.formattablestring",target:"_blank",rel:"noopener noreferrer"},A={href:"https://learn.microsoft.com/en-us/sql/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://dev.mysql.com/",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://sqlite.org/",target:"_blank",rel:"noopener noreferrer"};function R(k,n){const c=l("VPCard"),p=l("router-link"),m=l("SiteInfo"),o=l("VPIcon"),i=l("RouteLink");return b(),g("div",null,[s("h1",f,[s("a",E,[s("span",null,h(k.$frontmatter.title)+" 관련",1)])]),e(c,u(d({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(c,u(d({title:"PostgreSQL > Article(s)",desc:"Article(s)",link:"/data-science/postgresql/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",q,[s("ul",null,[s("li",null,[e(p,{to:"#when-should-you-even-use-raw-sql"},{default:t(()=>n[0]||(n[0]=[a("When Should You Even Use Raw SQL?")])),_:1,__:[0]})]),s("li",null,[e(p,{to:"#example-1-simple-scalar-function"},{default:t(()=>n[1]||(n[1]=[a("Example 1: Simple Scalar Function")])),_:1,__:[1]})]),s("li",null,[e(p,{to:"#example-2-table-valued-function"},{default:t(()=>n[2]||(n[2]=[a("Example 2: Table-Valued Function")])),_:1,__:[2]})]),s("li",null,[e(p,{to:"#understanding-postgresql-functions-vs-procedures"},{default:t(()=>n[3]||(n[3]=[a("Understanding PostgreSQL Functions vs Procedures")])),_:1,__:[3]})]),s("li",null,[e(p,{to:"#example-3-stored-procedure-with-validation"},{default:t(()=>n[4]||(n[4]=[a("Example 3: Stored Procedure with Validation")])),_:1,__:[4]})]),s("li",null,[e(p,{to:"#about-sql-injection-don-t-panic"},{default:t(()=>n[5]||(n[5]=[a("About SQL Injection (Don't Panic)")])),_:1,__:[5]})]),s("li",null,[e(p,{to:"#a-quick-word-on-views"},{default:t(()=>n[6]||(n[6]=[a("A Quick Word on Views")])),_:1,__:[6]})]),s("li",null,[e(p,{to:"#wrapping-up"},{default:t(()=>n[7]||(n[7]=[a("Wrapping Up")])),_:1,__:[7]})])])]),n[59]||(n[59]=s("hr",null,null,-1)),e(m,{name:"Using Stored Procedures and Functions With EF Core and PostgreSQL",desc:"Learn how to use PostgreSQL stored procedures and functions with EF Core to handle complex queries, atomic operations with locking, and database-specific features while keeping the type safety and convenience of EF Core.",url:"https://milanjovanovic.tech/blog/using-stored-procedures-and-functions-with-ef-core-and-postgresql",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_162.png"}),s("p",null,[n[10]||(n[10]=a("You're building a .NET application with ")),s("a",S,[e(o,{icon:"fa-brands fa-microsoft"}),n[8]||(n[8]=a("EF Core"))]),n[11]||(n[11]=a(". Most of your queries work fine with ")),e(i,{to:"/milanjovanovic.tech/why-i-write-tall-linq-queries.html"},{default:t(()=>n[9]||(n[9]=[s("strong",null,"LINQ",-1)])),_:1,__:[9]}),n[12]||(n[12]=a(", but now you're hitting scenarios where you need something more."))]),n[60]||(n[60]=s("p",null,"Maybe you have a complex report that joins five tables with aggregations and window functions. Your LINQ query generates SQL that's slower than you'd like, and you know you could write better SQL by hand.",-1)),s("p",null,[n[14]||(n[14]=a("Or maybe you need to update inventory with proper locking to prevent race conditions. You could manage ")),e(i,{to:"/milanjovanovic.tech/working-with-transactions-in-ef-core.html"},{default:t(()=>n[13]||(n[13]=[s("strong",null,"transactions",-1)])),_:1,__:[13]}),n[15]||(n[15]=a(" and explicit locks in C#, but it feels like you're fighting the framework."))]),n[61]||(n[61]=s("p",null,`Here's what usually happens: you search for "EF Core stored procedures" and find conflicting advice. Some articles say avoid raw SQL at all costs. Others suggest abandoning EF entirely and writing ADO.NET. Neither feels right.`,-1)),n[62]||(n[62]=s("p",null,[a("Actually, "),s("strong",null,"EF Core works great with database functions and procedures"),a(". You get the database's power for what it does best, and EF's convenience for everything else. Let me show you how this actually works.")],-1)),s("p",null,[n[17]||(n[17]=a("I'll use ")),s("a",C,[e(o,{icon:"iconfont icon-postgresql"}),n[16]||(n[16]=a("PostgreSQL"))]),n[18]||(n[18]=a(" for examples, but the same principles apply to SQL Server and other relational databases."))]),n[63]||(n[63]=s("hr",null,null,-1)),n[64]||(n[64]=s("h2",{id:"when-should-you-even-use-raw-sql",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#when-should-you-even-use-raw-sql"},[s("span",null,"When Should You Even Use Raw SQL?")])],-1)),n[65]||(n[65]=s("p",null,[a("Let's be honest: most of the time, "),s("strong",null,"LINQ is fine"),a(". EF Core translates your C# into decent SQL, and you get type safety and refactoring support.")],-1)),n[66]||(n[66]=s("p",null,"But there are times when raw SQL makes more sense:",-1)),s("p",null,[n[20]||(n[20]=s("strong",null,"You need performance you can't get from LINQ",-1)),n[21]||(n[21]=a(". Complex aggregations with multiple joins, ")),s("a",L,[e(o,{icon:"iconfont icon-postgresql"}),n[19]||(n[19]=a("window functions"))]),n[22]||(n[22]=a(", or reporting queries often run faster when written directly in SQL. You can test and tune the query in your database tool before bringing it into your code."))]),s("p",null,[n[25]||(n[25]=s("strong",null,"You're using database-specific features",-1)),n[26]||(n[26]=a(". PostgreSQL has powerful capabilities like ")),s("a",x,[e(o,{icon:"iconfont icon-postgresql"}),n[23]||(n[23]=a("full-text search"))]),n[27]||(n[27]=a(", JSON operators, and ")),s("a",T,[e(o,{icon:"iconfont icon-postgresql"}),n[24]||(n[24]=a("common table expressions (CTEs)"))]),n[28]||(n[28]=a(" that don't always have clean LINQ equivalents. Sometimes the straightest path is just writing the SQL."))]),s("p",null,[n[30]||(n[30]=s("strong",null,"You have existing database logic",-1)),n[31]||(n[31]=a(". If your database already has stored procedures and functions (maybe from a ")),e(i,{to:"/milanjovanovic.tech/what-rewriting-a-40-year-old-project-taught-me-about-software-development.html"},{default:t(()=>n[29]||(n[29]=[s("strong",null,"legacy system",-1)])),_:1,__:[29]}),n[32]||(n[32]=a("), calling them directly beats rewriting everything in C#."))]),s("p",null,[n[34]||(n[34]=s("strong",null,"You need atomic operations with proper locking",-1)),n[35]||(n[35]=a(". A stored procedure that coordinates multiple updates with ")),n[36]||(n[36]=s("code",null,"FOR UPDATE",-1)),n[37]||(n[37]=a(" locks (")),e(i,{to:"/milanjovanovic.tech/scaling-the-outbox-pattern.html"},{default:t(()=>n[33]||(n[33]=[s("strong",null,"here's a good use case",-1)])),_:1,__:[33]}),n[38]||(n[38]=a(") is simpler and safer than trying to manage that from application code."))]),n[67]||(n[67]=r(`<p><strong>You want to reduce round trips</strong>. One function call that aggregates data from five tables is more efficient than five separate LINQ queries.</p><p>Now let&#39;s see how to actually do this.</p><hr><h2 id="example-1-simple-scalar-function" tabindex="-1"><a class="header-anchor" href="#example-1-simple-scalar-function"><span>Example 1: Simple Scalar Function</span></a></h2><p>Here&#39;s a straightforward function that tells you how many tickets are left:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> ticketing<span class="token punctuation">.</span>tickets_left<span class="token punctuation">(</span>p_ticket_type_id uuid<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">RETURNS</span> <span class="token keyword">numeric</span></span>
<span class="line"><span class="token keyword">LANGUAGE</span> <span class="token keyword">sql</span></span>
<span class="line"><span class="token keyword">AS</span> $$</span>
<span class="line">  <span class="token keyword">SELECT</span> tt<span class="token punctuation">.</span>available_quantity</span>
<span class="line">  <span class="token keyword">FROM</span> ticketing<span class="token punctuation">.</span>ticket_types tt</span>
<span class="line">  <span class="token keyword">WHERE</span> tt<span class="token punctuation">.</span>id <span class="token operator">=</span> p_ticket_type_id</span>
<span class="line">$$<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nothing fancy, just a query wrapped in a function.</p><p>Calling it from EF Core is straightforward:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;ticket-types/{ticketTypeId}/available-quantity&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token class-name">Guid</span> ticketTypeId<span class="token punctuation">,</span> <span class="token class-name">EventManagementContext</span> dbContext<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> dbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlQuery</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token interpolation-string"><span class="token string">$&quot;&quot;</span></span>&quot;</span>
<span class="line">             <span class="token return-type class-name">SELECT</span> ticketing<span class="token punctuation">.</span><span class="token function">tickets_left</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ticketTypeId<span class="token punctuation">}</span><span class="token punctuation">)</span> AS <span class="token string">&quot;Value&quot;</span></span>
<span class="line">             <span class="token string">&quot;&quot;</span>&quot;<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">FirstAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice the <code>AS &quot;Value&quot;</code> alias. When EF Core maps to a primitive type, it expects a property named <code>Value</code>. The quotes preserve the exact casing (PostgreSQL lowercases unquoted identifiers by default).</p><p>The interpolated string syntax (<code>$&quot;{ticketTypeId}&quot;</code>) might look dangerous, but EF Core converts this into a parameterized query automatically. You&#39;re not building SQL strings, you&#39;re using C# interpolation as a convenient syntax for parameters.</p><hr><h2 id="example-2-table-valued-function" tabindex="-1"><a class="header-anchor" href="#example-2-table-valued-function"><span>Example 2: Table-Valued Function</span></a></h2><p>Functions can return entire result sets, which is where they really shine:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> ticketing<span class="token punctuation">.</span>customer_order_summary<span class="token punctuation">(</span>p_customer_id uuid<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">RETURNS</span> <span class="token keyword">TABLE</span> <span class="token punctuation">(</span></span>
<span class="line">    order_id uuid<span class="token punctuation">,</span></span>
<span class="line">    created_at_utc timestamptz<span class="token punctuation">,</span></span>
<span class="line">    total_price <span class="token keyword">numeric</span><span class="token punctuation">,</span></span>
<span class="line">    currency <span class="token keyword">text</span><span class="token punctuation">,</span></span>
<span class="line">    item_count <span class="token keyword">numeric</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">LANGUAGE</span> <span class="token keyword">sql</span></span>
<span class="line"><span class="token keyword">AS</span> $$</span>
<span class="line"><span class="token keyword">SELECT</span></span>
<span class="line">    o<span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">    o<span class="token punctuation">.</span>created_at_utc<span class="token punctuation">,</span></span>
<span class="line">    o<span class="token punctuation">.</span>total_price<span class="token punctuation">,</span></span>
<span class="line">    o<span class="token punctuation">.</span>currency<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">COALESCE</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span>oi<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> item_count</span>
<span class="line"><span class="token keyword">FROM</span> ticketing<span class="token punctuation">.</span>orders o</span>
<span class="line"><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> ticketing<span class="token punctuation">.</span>order_items oi <span class="token keyword">ON</span> oi<span class="token punctuation">.</span>order_id <span class="token operator">=</span> o<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>customer_id <span class="token operator">=</span> p_customer_id</span>
<span class="line"><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> o<span class="token punctuation">.</span>id<span class="token punctuation">,</span> o<span class="token punctuation">.</span>created_at_utc<span class="token punctuation">,</span> o<span class="token punctuation">.</span>total_price<span class="token punctuation">,</span> o<span class="token punctuation">.</span>currency</span>
<span class="line"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> o<span class="token punctuation">.</span>created_at_utc <span class="token keyword">DESC</span></span>
<span class="line">$$<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This function joins orders with their items, aggregates quantities, and returns multiple rows. You could write this in LINQ, but the SQL is clearer and you can test it directly in your database tool.</p><p>To use it from C#, create a DTO that matches the function&#39;s output:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderSummaryDto</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> OrderId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreatedAtUtc <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> TotalPrice <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Currency <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ItemCount <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then query the function like any other table:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;customers/{customerId}/order-summary&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token class-name">Guid</span> customerId<span class="token punctuation">,</span> <span class="token class-name">EventManagementContext</span> dbContext<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> <span class="token keyword">await</span> dbContext<span class="token punctuation">.</span>Database</span>
<span class="line">        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlQuery</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrderSummaryDto<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token interpolation-string"><span class="token string">$&quot;&quot;</span></span>&quot;</span>
<span class="line">             SELECT</span>
<span class="line">                order_id <span class="token class-name">AS</span> OrderId<span class="token punctuation">,</span></span>
<span class="line">                created_at_utc <span class="token class-name">AS</span> CreatedAtUtc<span class="token punctuation">,</span></span>
<span class="line">                total_price <span class="token class-name">AS</span> TotalPrice<span class="token punctuation">,</span></span>
<span class="line">                currency <span class="token class-name">AS</span> Currency<span class="token punctuation">,</span></span>
<span class="line">                item_count AS ItemCount</span>
<span class="line">             <span class="token return-type class-name">FROM</span> ticketing<span class="token punctuation">.</span><span class="token function">customer_order_summary</span><span class="token punctuation">(</span><span class="token punctuation">{</span>customerId<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">             <span class="token string">&quot;&quot;</span>&quot;<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The key is mapping column names to your DTO properties using aliases. EF Core handles the rest automatically.</p><p>This is a simple case without joins, but you can use this pattern in more complex queries too. However, you will have to project into DTOs manually since EF Core can&#39;t translate joins in raw SQL into entity graphs. Usually, you&#39;ll return a flat structure from functions anyway, and then map to richer models in C# if needed.</p><hr><h2 id="understanding-postgresql-functions-vs-procedures" tabindex="-1"><a class="header-anchor" href="#understanding-postgresql-functions-vs-procedures"><span>Understanding PostgreSQL Functions vs Procedures</span></a></h2><p>PostgreSQL distinguishes between functions and procedures in important ways:</p><p><strong>Functions</strong> are designed to <strong>return values</strong>. They can return scalar values, tables, or even complex JSON objects. You call them with <code>SELECT</code> and can use them in queries like any other expression. Functions run within a transaction and can be used in <code>WHERE</code> clauses, joins, and other query contexts.</p><p><strong>Procedures</strong> are designed for <strong>side effects</strong>. They don&#39;t return values directly but can modify data and have <code>OUT</code> parameters. You call them with <code>CALL</code> and they&#39;re ideal for complex operations that need to manage transactions explicitly or perform multiple related updates.</p><p>Think of it this way: use functions when you need data, use procedures when you need to change something.</p><p>This distinction matters because it affects how you design your database logic and how you call these routines from C#.</p><p>Let&#39;s see an example of a procedure.</p><hr><h2 id="example-3-stored-procedure-with-validation" tabindex="-1"><a class="header-anchor" href="#example-3-stored-procedure-with-validation"><span>Example 3: Stored Procedure with Validation</span></a></h2>`,32)),s("p",null,[n[40]||(n[40]=a("Here's where procedures really prove their worth. Let's say you need to adjust ticket inventory, but you want to prevent ")),e(i,{to:"/milanjovanovic.tech/solving-race-conditions-with-ef-core-optimistic-locking.html"},{default:t(()=>n[39]||(n[39]=[s("strong",null,"race conditions",-1)])),_:1,__:[39]}),n[41]||(n[41]=a(" and validate the operation:"))]),n[68]||(n[68]=r(`<div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">PROCEDURE</span> ticketing<span class="token punctuation">.</span>adjust_available_quantity<span class="token punctuation">(</span></span>
<span class="line">    p_ticket_type_id uuid<span class="token punctuation">,</span></span>
<span class="line">    p_delta <span class="token keyword">numeric</span><span class="token punctuation">,</span></span>
<span class="line">    p_reason <span class="token keyword">text</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;manual-adjust&#39;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">LANGUAGE</span> plpgsql</span>
<span class="line"><span class="token keyword">AS</span> $$</span>
<span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    v_qty <span class="token keyword">numeric</span><span class="token punctuation">;</span></span>
<span class="line">    v_avail <span class="token keyword">numeric</span><span class="token punctuation">;</span></span>
<span class="line">    v_new_avail <span class="token keyword">numeric</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">SELECT</span> quantity<span class="token punctuation">,</span> available_quantity</span>
<span class="line">    <span class="token keyword">INTO</span> v_qty<span class="token punctuation">,</span> v_avail</span>
<span class="line">    <span class="token keyword">FROM</span> ticketing<span class="token punctuation">.</span>ticket_types</span>
<span class="line">    <span class="token keyword">WHERE</span> id <span class="token operator">=</span> p_ticket_type_id</span>
<span class="line">    <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">IF</span> <span class="token operator">NOT</span> FOUND <span class="token keyword">THEN</span></span>
<span class="line">        RAISE EXCEPTION <span class="token string">&#39;ticket_type % not found&#39;</span><span class="token punctuation">,</span> p_ticket_type_id<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    v_new_avail :<span class="token operator">=</span> v_avail <span class="token operator">+</span> p_delta<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">IF</span> v_new_avail <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">THEN</span></span>
<span class="line">        RAISE EXCEPTION <span class="token string">&#39;Cannot reduce below zero&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">IF</span> v_new_avail <span class="token operator">&gt;</span> v_qty <span class="token keyword">THEN</span></span>
<span class="line">        RAISE EXCEPTION <span class="token string">&#39;Cannot exceed quantity&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">UPDATE</span> ticketing<span class="token punctuation">.</span>ticket_types</span>
<span class="line">    <span class="token keyword">SET</span> available_quantity <span class="token operator">=</span> v_new_avail</span>
<span class="line">    <span class="token keyword">WHERE</span> id <span class="token operator">=</span> p_ticket_type_id<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line">$$<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This procedure does several important things:</p><ul><li><strong>Locks the row</strong> with <code>FOR UPDATE</code> so no other transaction can modify it until we&#39;re done</li><li><strong>Validates business rules</strong> before making changes</li><li><strong>Provides clear error messages</strong> when something goes wrong</li><li><strong>Keeps everything atomic</strong> in a single database round trip</li></ul><p>You could do all this in C# with manual transaction management and explicit locking, but it&#39;s more complex and error-prone. Let the database handle what it&#39;s good at.</p><p>Here&#39;s how you call it from EF Core:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">app<span class="token punctuation">.</span><span class="token function">MapPut</span><span class="token punctuation">(</span><span class="token string">&quot;ticket-types/{ticketTypeId}/available-quantity&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">Guid</span> ticketTypeId<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">int</span></span> quantity<span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">EventManagementContext</span> dbContext<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">await</span> dbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">ExecuteSqlAsync</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token interpolation-string"><span class="token string">$&quot;&quot;</span></span>&quot;</span>
<span class="line">             <span class="token return-type class-name">CALL</span> ticketing<span class="token punctuation">.</span><span class="token function">adjust_available_quantity</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ticketTypeId<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>quantity<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">             <span class="token string">&quot;&quot;</span>&quot;<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> Results<span class="token punctuation">.</span><span class="token function">BadRequest</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The procedure doesn&#39;t return a value, but if it raises an exception (with <code>RAISE EXCEPTION</code>), PostgreSQL will propagate that to your C# code. You can catch it and return a proper error response.</p><hr><h2 id="about-sql-injection-don-t-panic" tabindex="-1"><a class="header-anchor" href="#about-sql-injection-don-t-panic"><span>About SQL Injection (Don&#39;t Panic)</span></a></h2>`,9)),s("p",null,[n[43]||(n[43]=a(`You might be looking at those interpolated strings and thinking "wait, isn't this `)),e(i,{to:"/milanjovanovic.tech/ef-core-raw-sql-queries.html"},{default:t(()=>n[42]||(n[42]=[s("strong",null,"SQL injection waiting to happen",-1)])),_:1,__:[42]}),n[44]||(n[44]=a('?"'))]),n[69]||(n[69]=r(`<p><strong>It&#39;s not</strong>.</p><p>When you write:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token interpolation-string"><span class="token string">$&quot;SELECT * FROM users WHERE id = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">userId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>EF Core doesn&#39;t concatenate strings. It converts this into:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code class="language-sql"><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token variable">@p0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>The actual value is sent as a parameter</strong>, completely separate from the SQL text. This works for all the examples in this article.</p><p>The interpolation syntax is just a convenient way to write parameterized queries.</p>`,7)),s("p",null,[n[46]||(n[46]=a("The reason why is we're not actually passing in a ")),n[47]||(n[47]=s("code",null,"string",-1)),n[48]||(n[48]=a(" to the ")),n[49]||(n[49]=s("code",null,"SqlQuery",-1)),n[50]||(n[50]=a(" method, but a ")),s("a",F,[e(o,{icon:"fa-brands fa-microsoft"}),n[45]||(n[45]=s("code",null,"FormattableString",-1))]),n[51]||(n[51]=a(". This is a special type that captures the format and arguments separately, allowing EF Core to handle parameters."))]),s("p",null,[n[55]||(n[55]=a("Everything in this article works with ")),s("a",A,[e(o,{icon:"iconfont icon-mssql"}),n[52]||(n[52]=a("SQL Server"))]),n[56]||(n[56]=a(", ")),s("a",P,[e(o,{icon:"iconfont icon-mysql"}),n[53]||(n[53]=a("MySQL"))]),n[57]||(n[57]=a(", ")),s("a",Q,[e(o,{icon:"iconfont icon-sqlite"}),n[54]||(n[54]=a("SQLite"))]),n[58]||(n[58]=a(", and other databases EF Core supports. The differences are mostly syntax."))]),n[70]||(n[70]=r(`<hr><h2 id="a-quick-word-on-views" tabindex="-1"><a class="header-anchor" href="#a-quick-word-on-views"><span>A Quick Word on Views</span></a></h2><p>Database views are like functions without parameters. They&#39;re saved queries you can reference by name.</p><p>You can query them using <code>SqlQuery&lt;T&gt;</code> just like functions:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> results <span class="token operator">=</span> <span class="token keyword">await</span> dbContext<span class="token punctuation">.</span>Database</span>
<span class="line">    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SqlQuery</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ActiveCustomerDto<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token interpolation-string"><span class="token string">$&quot;SELECT * FROM ticketing.active_customers&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or you can map them to entity types in your <code>DbContext</code> for full LINQ support.</p><p>Views are great for frequently-used queries that don&#39;t need parameters. Functions give you the flexibility of parameterization.</p><hr><h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="#wrapping-up"><span>Wrapping Up</span></a></h2><p>We&#39;ve covered how to use PostgreSQL functions and procedures with EF Core, from simple scalar functions to complex procedures with validation and locking.</p><p>You learned when to use functions (when you need data back) versus procedures (when you need to modify data). You saw how EF Core&#39;s <code>SqlQuery&lt;T&gt;</code> and <code>ExecuteSqlAsync</code> give you type safety while letting you write the SQL you need. And you learned when raw SQL makes sense: complex aggregations, database-specific features, atomic operations with locking, and reducing round trips.</p><p><strong>EF Core</strong> doesn&#39;t force you to choose between LINQ and raw SQL. You can use both.</p><p>Use functions when you need to return data, procedures when you need to modify data with complex logic, and raw SQL queries when LINQ doesn&#39;t capture your requirements efficiently. The combination of EF Core&#39;s convenience and the database&#39;s power gives you the flexibility to choose the right tool for each scenario.</p><p>That&#39;s all for today. Hope this was helpful.</p><hr>`,15)),y(" TODO: add ARTICLE CARD "),e(c,u(d({title:"Using Stored Procedures and Functions With EF Core and PostgreSQL",desc:"Learn how to use PostgreSQL stored procedures and functions with EF Core to handle complex queries, atomic operations with locking, and database-specific features while keeping the type safety and convenience of EF Core.",link:"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/using-stored-procedures-and-functions-with-ef-core-and-postgresql.html",logo:"https://milanjovanovic.tech/profile_favicon.png",background:"rgba(79,70,229,0.2)"})),null,16)])}const N=v(w,[["render",R]]),O=JSON.parse('{"path":"/milanjovanovic.tech/using-stored-procedures-and-functions-with-ef-core-and-postgresql.html","title":"Using Stored Procedures and Functions With EF Core and PostgreSQL","lang":"en-US","frontmatter":{"lang":"en-US","title":"Using Stored Procedures and Functions With EF Core and PostgreSQL","description":"Article(s) > Using Stored Procedures and Functions With EF Core and PostgreSQL","icon":"iconfont icon-csharp","category":["C#","DotNet","Data Science","PostgreSQL","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet","data-science","sql","postgres","postgresql"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Using Stored Procedures and Functions With EF Core and PostgreSQL\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_162.png\\"],\\"datePublished\\":\\"2025-10-04T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/using-stored-procedures-and-functions-with-ef-core-and-postgresql.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Using Stored Procedures and Functions With EF Core and PostgreSQL"}],["meta",{"property":"og:description","content":"Article(s) > Using Stored Procedures and Functions With EF Core and PostgreSQL"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_162.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_162.png"}],["meta",{"name":"twitter:image:alt","content":"Using Stored Procedures and Functions With EF Core and PostgreSQL"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"postgresql"}],["meta",{"property":"article:tag","content":"postgres"}],["meta",{"property":"article:tag","content":"sql"}],["meta",{"property":"article:tag","content":"data-science"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-10-04T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Using Stored Procedures and Functions With EF Core and PostgreSQL"},{"property":"og:description","content":"Using Stored Procedures and Functions With EF Core and PostgreSQL"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/using-stored-procedures-and-functions-with-ef-core-and-postgresql.html"}]],"prev":"/programming/cs/articles/README.md","date":"2025-10-04T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_162.png"},"git":{},"readingTime":{"minutes":6.95,"words":2085},"filePathRelative":"milanjovanovic.tech/using-stored-procedures-and-functions-with-ef-core-and-postgresql.md","copyright":{"author":"Milan Jovanović"}}');export{N as comp,O as data};
