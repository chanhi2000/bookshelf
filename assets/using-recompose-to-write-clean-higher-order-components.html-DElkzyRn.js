import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as t,b as l,a as g,t as b,n as u,g as d,w as p,e as a,r as i,o as f}from"./app-BVguHYKu.js";const w="/bookshelf/assets/image/blog.logrocket.com/using-recompose-to-write-clean-higher-order-components/banner.png",y={},j={id:"frontmatter-title-관련",tabindex:"-1"},C={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},T={class:"hint-container note"},R={href:"https://github.com/acdlite/recompose/issues/756#issuecomment-438674573",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/acdlite/recompose",target:"_blank",rel:"noopener noreferrer"},W={href:"https://en.wikipedia.org/wiki/Higher-order_function",target:"_blank",rel:"noopener noreferrer"},H={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",target:"_blank",rel:"noopener noreferrer"},A={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter",target:"_blank",rel:"noopener noreferrer"},S={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce",target:"_blank",rel:"noopener noreferrer"},O={href:"https://reactjs.org/docs/higher-order-components.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/acdlite/recompose",target:"_blank",rel:"noopener noreferrer"},D={href:"https://lodash.com/docs/4.17.10#lodash",target:"_blank",rel:"noopener noreferrer"},I={href:"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/acdlite/recompose/blob/master/docs/API.md",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/acdlite/recompose",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/acdlite/recompose/wiki/Recipes",target:"_blank",rel:"noopener noreferrer"};function U(k,n){const r=i("VPCard"),o=i("router-link"),c=i("SiteInfo"),e=i("VPIcon"),m=i("RouteLink");return f(),h("div",null,[s("h1",j,[s("a",C,[s("span",null,b(k.$frontmatter.title)+" 관련",1)])]),t(r,u(d({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[t(o,{to:"#higher-order-functions"},{default:p(()=>n[0]||(n[0]=[a("Higher-order functions")])),_:1,__:[0]})]),s("li",null,[t(o,{to:"#higher-order-components"},{default:p(()=>n[1]||(n[1]=[a("Higher-order components")])),_:1,__:[1]})]),s("li",null,[t(o,{to:"#composing-hocs"},{default:p(()=>n[2]||(n[2]=[a("Composing HOCs")])),_:1,__:[2]})]),s("li",null,[t(o,{to:"#recompose"},{default:p(()=>n[3]||(n[3]=[a("Recompose")])),_:1,__:[3]}),s("ul",null,[s("li",null,[t(o,{to:"#compose"},{default:p(()=>n[4]||(n[4]=[a("compose")])),_:1,__:[4]})]),s("li",null,[t(o,{to:"#withstate"},{default:p(()=>n[5]||(n[5]=[a("withState")])),_:1,__:[5]})]),s("li",null,[t(o,{to:"#withhandlers"},{default:p(()=>n[6]||(n[6]=[a("withHandlers")])),_:1,__:[6]})]),s("li",null,[t(o,{to:"#setdisplayname"},{default:p(()=>n[7]||(n[7]=[a("setDisplayName")])),_:1,__:[7]})]),s("li",null,[t(o,{to:"#lifecycle"},{default:p(()=>n[8]||(n[8]=[a("lifecycle")])),_:1,__:[8]})]),s("li",null,[t(o,{to:"#defaultprops"},{default:p(()=>n[9]||(n[9]=[a("defaultProps")])),_:1,__:[9]})])])]),s("li",null,[t(o,{to:"#conclusions"},{default:p(()=>n[10]||(n[10]=[a("Conclusions")])),_:1,__:[10]})])])]),n[60]||(n[60]=s("hr",null,null,-1)),t(c,{name:"Using Recompose to write clean higher-order components",desc:"Learn how Recompose methods can help create cleaner HOCs and how it simplifies the development and organization of React components.",url:"https://blog.logrocket.com/using-recompose-to-write-clean-higher-order-components-3019a6daf44c",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/using-recompose-to-write-clean-higher-order-components/banner.png"}),s("div",T,[n[18]||(n[18]=s("p",{class:"hint-container-title"},"Editor’s note",-1)),s("p",null,[n[15]||(n[15]=a("Active maintenance of the Recompose library was ")),s("a",R,[n[11]||(n[11]=a("discontinued (")),t(e,{icon:"iconfont icon-github"}),n[12]||(n[12]=s("code",null,"acdlite/recompose",-1)),n[13]||(n[13]=a(")"))]),n[16]||(n[16]=a(" as of 25 October 2018. The author recommends using ")),t(m,{to:"/blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems.html"},{default:p(()=>n[14]||(n[14]=[s("strong",null,"React Hooks",-1)])),_:1,__:[14]}),n[17]||(n[17]=a(" instead."))])]),n[61]||(n[61]=s("figure",null,[s("img",{src:w,alt:"Using Recompose To Write Clean Higher-Order Components",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Using Recompose To Write Clean Higher-Order Components")],-1)),s("p",null,[n[20]||(n[20]=a("If you like keeping things simple in React by creating small components with functional component syntax and then using them as pieces to create bigger ones, ")),s("a",q,[t(e,{icon:"iconfont icon-github"}),n[19]||(n[19]=s("code",null,"acdlite/recompose",-1))]),n[21]||(n[21]=a(" can help you to do the same with higher-order components (HOCs)."))]),n[62]||(n[62]=s("p",null,[a("With Recompose, it is easier to create small higher-order components that can be composed into more complex ones. With the approach encouraged by Recompose, you won’t need more "),s("code",null,"Class"),a(" syntax to create React components.")],-1)),n[63]||(n[63]=s("p",null,"But before going into details, let’s start reviewing some concepts…",-1)),n[64]||(n[64]=s("hr",null,null,-1)),n[65]||(n[65]=s("h2",{id:"higher-order-functions",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#higher-order-functions"},[s("span",null,"Higher-order functions")])],-1)),n[66]||(n[66]=s("p",null,"In JavaScript, we have a special type of function called higher-order functions:",-1)),s("blockquote",null,[s("p",null,[n[23]||(n[23]=a("A ")),s("a",W,[t(e,{icon:"fa-brands fa-wikipedia-w"}),n[22]||(n[22]=a("higher-order function"))]),n[24]||(n[24]=a(" is a function that deals with other functions, either because it receives them as parameters (to execute them at some point of the function’s body), because it returns a new function when it’s called, or both."))])]),n[67]||(n[67]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b</span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">multiplication</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">*</span> b</span>
<span class="line"></span>
<span class="line"><span class="token comment">// Our Higher-Order Function</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">getResultOperation</span> <span class="token operator">=</span> <span class="token parameter">op</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>op<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">op</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> getSumResult <span class="token operator">=</span> <span class="token function">getResultOperation</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> getMultiplicationResult <span class="token operator">=</span> <span class="token function">getResultOperation</span><span class="token punctuation">(</span>multiplication<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">getSumResult</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment">// The sum of 2 and 5 is 7 </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">getMultiplicationResult</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment">// The multiplication of 2 and 5 is 10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the example above, <code>getResultOperation</code> receives a function and returns a new one. So it is a higher-order function.</p>`,2)),s("blockquote",null,[s("p",null,[n[28]||(n[28]=a("The most popular higher-order functions in JavaScript are the array methods ")),s("a",H,[t(e,{icon:"fa-brands fa-firefox"}),n[25]||(n[25]=s("code",null,"map",-1))]),n[29]||(n[29]=a(", ")),s("a",A,[t(e,{icon:"fa-brands fa-firefox"}),n[26]||(n[26]=s("code",null,"filter",-1))]),n[30]||(n[30]=a(" or ")),s("a",S,[t(e,{icon:"fa-brands fa-firefox"}),n[27]||(n[27]=s("code",null,"reduce",-1))]),n[31]||(n[31]=a(". They all apply some function passed as a parameter over the elements of the array to get something as a result."))])]),n[68]||(n[68]=s("hr",null,null,-1)),n[69]||(n[69]=s("h2",{id:"higher-order-components",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#higher-order-components"},[s("span",null,"Higher-order components")])],-1)),n[70]||(n[70]=s("p",null,"In React, we have the equivalent of higher-order functions, but for components, the so-called higher-order components.",-1)),s("blockquote",null,[s("p",null,[n[33]||(n[33]=a("A ")),s("a",O,[t(e,{icon:"fa-brands fa-react"}),n[32]||(n[32]=a("higher-order component"))]),n[34]||(n[34]=a(" is a function that takes a component and returns a new component."))])]),n[71]||(n[71]=l(`<p>When are higher-order components useful? Well, mostly to reuse the logic involving behavior across components. Let’s explain this with the following scenario.</p><p>Let’s assume we already have a component <code>Button</code>.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type <span class="token operator">=</span> <span class="token string">&quot;primary&quot;</span><span class="token punctuation">,</span> children<span class="token punctuation">,</span> onClick <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">btn btn-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And we want to create another <code>ButtonWithTrack</code> based on this <code>Button</code> (same props on <code>Button</code> should also work on <code>ButtonWithTrack</code> and same styles applied) but with improved behavior (like keeping track of the times it has been clicked and displaying this value on the button itself).</p><p>To do this, we can do…</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">&quot;./Button&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">ButtonWithTrack</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">times</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token punctuation">{</span> times <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> onClick <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">times</span><span class="token operator">:</span> <span class="token operator">++</span>times <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    onClick <span class="token operator">&amp;&amp;</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> times <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">type</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>times <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">?</span> <span class="token string">&quot;danger&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;primary&quot;</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>times<span class="token punctuation">}</span><span class="token plain-text"> times clicked</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We have reused the original <code>Button</code>, so everything is OK for now.</p><p>Let’s take another component, <code>Link</code>:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> Link <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type <span class="token operator">=</span> <span class="token string">&quot;primary&quot;</span><span class="token punctuation">,</span> children<span class="token punctuation">,</span> href<span class="token punctuation">,</span> onClick <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> </span>
<span class="line">    <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">badge badge-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span></span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>href<span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span></span></span>
<span class="line">  <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And we want to add the exact same behavior we added to our <code>Button</code>.</p><p>What to do then? Should we repeat 90 percent of the code in two files? Or is there a way we can take out the logic added to <code>ButtonWithTrack</code> in a way it can be applied to both <code>Button</code> and <code>Link</code> components?</p><p>Higher-order components to the rescue!!</p><p>To solve this problem, we can create a higher-order component, that is, a function that takes one component and returns the enhanced version of that component with the behavior we want.</p><p>For example, we can do this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">withClickTimesTrack</span> <span class="token operator">=</span> <span class="token parameter">WrappedComponent</span> <span class="token operator">=&gt;</span></span>
<span class="line">  <span class="token keyword">class</span> <span class="token class-name">extends</span> Component <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">times</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> <span class="token punctuation">{</span> times <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">{</span> onClick <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">times</span><span class="token operator">:</span> <span class="token operator">++</span>times <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      onClick <span class="token operator">&amp;&amp;</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">{</span> children<span class="token punctuation">,</span> onClick<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">{</span> times <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&lt;</span>span onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>WrappedComponent</span>
<span class="line">            type<span class="token operator">=</span><span class="token punctuation">{</span>times <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">?</span> <span class="token string">&quot;danger&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;primary&quot;</span><span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span>children<span class="token punctuation">}</span> <span class="token operator">&lt;</span>small<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>times<span class="token punctuation">}</span> times clicked<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>small<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>WrappedComponent<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So then, we can simplify the creation of the component <code>ButtonWithTrack</code> from <code>Button</code> by using the <code>withClickTimesTrack</code> HOC like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> withClickTimesTrack <span class="token keyword">from</span> <span class="token string">&quot;./hoc/withClickTimesTrack&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type <span class="token operator">=</span> <span class="token string">&quot;primary&quot;</span><span class="token punctuation">,</span> children<span class="token punctuation">,</span> onClick <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token operator">&lt;</span>button className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">btn btn-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span>children<span class="token punctuation">}</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> ButtonWithTrack <span class="token operator">=</span> <span class="token function">withClickTimesTrack</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And also now, we can easily apply the same enhancement to other components like <code>Link</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> withClickTimesTrack <span class="token keyword">from</span> <span class="token string">&quot;./hoc/withClickTimesTrack&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> Link <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type <span class="token operator">=</span> <span class="token string">&quot;primary&quot;</span><span class="token punctuation">,</span> children<span class="token punctuation">,</span> href<span class="token punctuation">,</span> onClick <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token operator">&lt;</span>a </span>
<span class="line">    style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">}</span> </span>
<span class="line">    className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">badge badge-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span> </span>
<span class="line">    href<span class="token operator">=</span><span class="token punctuation">{</span>href<span class="token punctuation">}</span></span>
<span class="line">    onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span></span>
<span class="line">  <span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span>children<span class="token punctuation">}</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> LinkWithTrack <span class="token operator">=</span> <span class="token function">withClickTimesTrack</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Cool, isn’t it?</p><p>But we can think this HOC add too many behaviors at the same time (handler, state &amp; new UI).</p><p>Wouldn’t be better if we split the logic behind the HOC into smaller parts?</p><hr><h2 id="composing-hocs" tabindex="-1"><a class="header-anchor" href="#composing-hocs"><span>Composing HOCs</span></a></h2><p>OK, it’s decided! We want to have these three behaviors of the HOC isolated so we can reuse them independently in other components:</p><ul><li>Add <code>times</code> state</li><li>Add custom <code>handleClick</code></li><li>Display the <code>times</code> state inside the element</li></ul><p>To do this we can create three HOCs where each one will add a specific behavior…</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="withStateTimes.js"><span>withStateTimes.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">withStateTimes</span> <span class="token operator">=</span> <span class="token parameter">WrappedComponent</span> <span class="token operator">=&gt;</span></span>
<span class="line">  <span class="token keyword">class</span> <span class="token class-name">extends</span> Component <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">times</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function-variable function">setTimes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">times</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> times <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">{</span> times <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state</span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">{</span> setTimes <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&lt;</span>WrappedComponent times<span class="token operator">=</span><span class="token punctuation">{</span>times<span class="token punctuation">}</span> setTimes<span class="token operator">=</span><span class="token punctuation">{</span>setTimes<span class="token punctuation">}</span> <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="withHandlerClick.js"><span>withHandlerClick.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">withHandlerClick</span> <span class="token operator">=</span> <span class="token parameter">WrappedComponent</span> <span class="token operator">=&gt;</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> <span class="token punctuation">{</span> times<span class="token punctuation">,</span> setTimes<span class="token punctuation">,</span> children<span class="token punctuation">,</span> onClick<span class="token punctuation">,</span> <span class="token operator">...</span>_props <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">setTimes</span><span class="token punctuation">(</span> <span class="token operator">++</span>times <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    onClick <span class="token operator">&amp;&amp;</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">{</span>children<span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="withDisplayTrack.js"><span>withDisplayTrack.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">withDisplayTrack</span> <span class="token operator">=</span> <span class="token parameter">WrappedComponent</span> <span class="token operator">=&gt;</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> children<span class="token punctuation">,</span> onClick<span class="token punctuation">,</span> handleClick<span class="token punctuation">,</span> times<span class="token punctuation">,</span> <span class="token operator">...</span>_props <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>span onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>WrappedComponent</span>
<span class="line">        type<span class="token operator">=</span><span class="token punctuation">{</span>times <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">?</span> <span class="token string">&quot;danger&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;primary&quot;</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">{</span><span class="token operator">...</span>_props<span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span>children<span class="token punctuation">}</span> <span class="token operator">&lt;</span>small<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>times<span class="token punctuation">}</span> times clicked<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>small<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>WrappedComponent<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>With these three HOCs, we can then apply them to our elements in this way…</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> ButtonWithTrack <span class="token operator">=</span> <span class="token function">withStateTimes</span><span class="token punctuation">(</span><span class="token function">withHandlerClick</span><span class="token punctuation">(</span><span class="token function">withDisplayTrack</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>What’s going on here? Well, <code>withDisplayTrack(Button)</code> returns a component that is used in the call of <code>withHandlerClick</code> that will also return a component that will be used in the call of <code>withStateTimes</code> that will return our final component (<code>ButtonWithTrack</code>).</p><p>As you can see, the idea is good because we can reuse our code in this way, but creating these HOCs is a bit complicated and also applying them in this way is a bit hard to read.</p><p>Is there any improvement over this?</p><p>Recompose to the rescue!!🙂</p><hr><h2 id="recompose" tabindex="-1"><a class="header-anchor" href="#recompose"><span>Recompose</span></a></h2><p>What is Recompose? In their own words:</p>`,39)),s("blockquote",null,[s("p",null,[s("a",B,[t(e,{icon:"iconfont icon-github"}),n[35]||(n[35]=s("code",null,"acdlite/recompose",-1))]),n[37]||(n[37]=a(" is a React utility belt for function components and higher-order components. Think of it like ")),s("a",D,[t(e,{icon:"fas fa-globe"}),n[36]||(n[36]=a("lodash"))]),n[38]||(n[38]=a(" forReact."))])]),n[72]||(n[72]=s("p",null,"So, it’s a set of methods we can use to improve the organization, creation and application of our HOC’s encouraging the use of functional stateless components combined with the composition of HOCs.",-1)),n[73]||(n[73]=s("p",null,[a("Let’s start with the most-used method of Recompose: "),s("code",null,"compose"),a(".")],-1)),n[74]||(n[74]=s("h3",{id:"compose",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#compose"},[s("span",null,[s("code",null,"compose")])])],-1)),t(c,{name:"recompose/docs/API.md at master · acdlite/recompose",desc:"A React utility belt for function components and higher-order components",url:"https://github.com/acdlite/recompose/blob/master/docs/API.md#compose",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/6f61e0300d7b95e5c062fb7d7b033293b1d413a2fe04015a2e01efaa5fc0f6dc/acdlite/recompose"}),n[75]||(n[75]=l(`<p>With <code>compose</code>, we can <em>compose</em> multiple higher-order components into a single higher-order component.</p><p>In our scenario, with <code>compose</code>, we can now express the application of our HOCs like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> compose <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;recompose&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> ButtonWithTrack <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span></span>
<span class="line">  withStateTimes<span class="token punctuation">,</span></span>
<span class="line">  withHandlerClick<span class="token punctuation">,</span></span>
<span class="line">  withDisplayTrack</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Much cleaner and easy to read, right?</p><h3 id="withstate" tabindex="-1"><a class="header-anchor" href="#withstate"><span><code>withState</code></span></a></h3>`,5)),t(c,{name:"recompose/docs/API.md at master · acdlite/recompose",desc:"A React utility belt for function components and higher-order components.",url:"https://github.com/acdlite/recompose/blob/master/docs/API.md#withstate",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/6f61e0300d7b95e5c062fb7d7b033293b1d413a2fe04015a2e01efaa5fc0f6dc/acdlite/recompose"}),n[76]||(n[76]=l(`<p>Another useful method of Recompose for our scenario is <code>withState</code>.</p><p>This method creates a HOC with almost the same behavior we implemented in <code>withStateTimes.js</code></p><ul><li>It adds a state property</li><li>It creates a <em>handler</em> to set the value of this state property</li><li>It allow us to set a initial value</li></ul><p>So, with <em>Recompose</em>, now we can express the same logic like this…</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">...</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> withState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;recompose&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> withStateTimes <span class="token operator">=</span> <span class="token function">withState</span><span class="token punctuation">(</span><span class="token string">&#39;times&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;setTimes&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For real? Yes, for real🙂</p><p>The utility of Recompose starts to make sense, right?</p><h3 id="withhandlers" tabindex="-1"><a class="header-anchor" href="#withhandlers"><span><code>withHandlers</code></span></a></h3>`,8)),t(c,{name:"recompose/docs/API.md at master · acdlite/recompose",desc:"A React utility belt for function components and higher-order components.",url:"https://github.com/acdlite/recompose/blob/master/docs/API.md#withHandlers",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/6f61e0300d7b95e5c062fb7d7b033293b1d413a2fe04015a2e01efaa5fc0f6dc/acdlite/recompose"}),n[77]||(n[77]=l(`<p>Let’s continue improving our scenario’s code. Let’s take the HOC <code>withHandlerClick</code>. To improve the creation of this HOC, we can use Recompose’s <code>withHandlers</code> method.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> withHandlers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;recompose&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> withHandlerClick <span class="token operator">=</span> <span class="token function">withHandlers</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">handleClick</span><span class="token operator">:</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token punctuation">{</span> times<span class="token punctuation">,</span> onClick<span class="token punctuation">,</span> setTimes <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span></span>
<span class="line">    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">setTimes</span><span class="token punctuation">(</span> <span class="token operator">++</span>times <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    onClick <span class="token operator">&amp;&amp;</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>withHandlers</code> method takes an object map of handler creators. Each one of the properties of this object passed to <code>withHandlers</code> should be a higher-order function that accepts a set of props and returns a function handler. In this way we can generate a handler that will have access to the <code>props</code> of the component.</p><h3 id="setdisplayname" tabindex="-1"><a class="header-anchor" href="#setdisplayname"><span><code>setDisplayName</code></span></a></h3>`,4)),t(c,{name:"recompose/docs/API.md at master · acdlite/recompose",desc:"A React utility belt for function components and higher-order components.",url:"https://github.com/acdlite/recompose/blob/master/docs/API.md#setdisplayname",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/6f61e0300d7b95e5c062fb7d7b033293b1d413a2fe04015a2e01efaa5fc0f6dc/acdlite/recompose"}),s("p",null,[n[40]||(n[40]=a("In our example, if we debug the code with the ")),s("a",I,[t(e,{icon:"fa-brands fa-chrome"}),n[39]||(n[39]=a("React Developer Tools"))]),n[41]||(n[41]=a(" the component returned by ")),n[42]||(n[42]=s("code",null,"withDisplayTrack",-1)),n[43]||(n[43]=a(" is displayed as ")),n[44]||(n[44]=s("code",null,"Unknown",-1)),n[45]||(n[45]=a("."))]),n[78]||(n[78]=l(`<p>To fix this, we can use Recompose’s <code>setDisplayName</code> to <code>export</code> a final HOC that will return a component with the name <code>ComponentWithDisplayTrack</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">compose</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token function">setDisplayName</span><span class="token punctuation">(</span><span class="token string">&#39;ComponentWithDisplayTrack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  withDisplayTrack</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lifecycle" tabindex="-1"><a class="header-anchor" href="#lifecycle"><span><code>lifecycle</code></span></a></h3>`,3)),t(c,{name:"recompose/docs/API.md at master · acdlite/recompose",desc:"A React utility belt for function components and higher-order components.",url:"https://github.com/acdlite/recompose/blob/master/docs/API.md#lifecycle",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/6f61e0300d7b95e5c062fb7d7b033293b1d413a2fe04015a2e01efaa5fc0f6dc/acdlite/recompose"}),n[79]||(n[79]=l(`<p>With the method <code>lifecycle</code> we can add lifecycle methods to our functional-syntax components.</p><p>In our scenario we could add a different version of Button that display the number of pending messages.</p><p>We can create a HOC that returns a different view of our button using a <code>messages</code> props:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> compose<span class="token punctuation">,</span> setDisplayName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;recompose&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">withDisplayMessages</span> <span class="token operator">=</span> <span class="token parameter">WrappedComponent</span> <span class="token operator">=&gt;</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> children<span class="token punctuation">,</span> messages<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> <span class="token operator">...</span>_props <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>_props<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>loading <span class="token operator">?</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fas fa-spinner fa-pulse<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>badge badge-light<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>messages<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">WrappedComponent</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">compose</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token function">setDisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;withDisplayMessages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  withDisplayMessages</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And we can add a <code>componentDidMount</code> lifecycle method to our component that will add:</p><ul><li>A <code>loading</code> state set to <code>true</code> when our fake request starts and set to <code>false</code> when it finishes</li><li>A <code>messages</code> state, which value will be updated with the random number returned by our fake request</li></ul><p>Both <code>loading</code> and <code>messages</code> states managed here will add one new prop each to the returned component that will be used to propagate the corresponding values:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> lifecycle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;recompose&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">getPendingMessages</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> randomNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>randomNumber<span class="token punctuation">)</span><span class="token punctuation">,</span> randomNumber <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> withDidMountStateMessages <span class="token operator">=</span> <span class="token function">lifecycle</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">getPendingMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">messages</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> messages <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> withDidMountStateMessages<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With these new HOCs, we can now quickly create our new type of <code>Button</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> ButtonWithMessages <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span></span>
<span class="line">  withDidMountStateMessages<span class="token punctuation">,</span> </span>
<span class="line">  withDisplayMessages</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="defaultprops" tabindex="-1"><a class="header-anchor" href="#defaultprops"><span><code>defaultProps</code></span></a></h3>`,11)),t(c,{name:"recompose/docs/API.md at master · acdlite/recompose",desc:"A React utility belt for function components and higher-order components.",url:"https://github.com/acdlite/recompose/blob/master/docs/API.md#defaultprops",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/6f61e0300d7b95e5c062fb7d7b033293b1d413a2fe04015a2e01efaa5fc0f6dc/acdlite/recompose"}),n[80]||(n[80]=l(`<p>With these HOCs, we can transfer these new behaviors into a link with very few lines. And we can add the <code>defaultProps</code> to change the default type of the link.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> LinkWithMessages <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token function">defaultProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;info&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  withDidMountStateMessages<span class="token punctuation">,</span></span>
<span class="line">  withDisplayMessages</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="conclusions" tabindex="-1"><a class="header-anchor" href="#conclusions"><span>Conclusions</span></a></h2><p>With these methods we can finish our demo by easily creating another version of <code>Button</code> (just to show the flexibility of this pattern) that track the clicks from three to zero, and adds another <code>prop</code> so we can change the <code>type</code> when the countdown reaches zero.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> ButtonWithTrackCountdown <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token function">withState</span><span class="token punctuation">(</span><span class="token string">&#39;times&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;setTimes&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">withState</span><span class="token punctuation">(</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;setType&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;primary&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">withHandlers</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">handleClick</span><span class="token operator">:</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> <span class="token punctuation">{</span> times<span class="token punctuation">,</span> onClick<span class="token punctuation">,</span> setTimes<span class="token punctuation">,</span> setType <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span></span>
<span class="line">      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span> times <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">&#39;secondary&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token function">setTimes</span><span class="token punctuation">(</span> <span class="token operator">--</span>times <span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">      onClick <span class="token operator">&amp;&amp;</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  withDisplayTrack</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, with Recompose it is easier to delegate the logic into small higher-order components and then <em>compose</em> them into a more complex HOC that we can use to create different versions of our components reusing most of our code.</p><p>Also, Recompose discourage the use of <code>Class</code> syntax for creating components and encourage the use of functional stateless components combined with higher components.</p><p>The most important advantages of using only function components are:</p><ul><li>They encourage code that is more reusable and modular</li><li>They discourage giant, complicated components that do too many things</li></ul><p>Basically, once you get how Recompose methods work, it simplifies the development and organization of React components.</p>`,11)),s("p",null,[n[49]||(n[49]=a("There are a ")),s("a",M,[n[46]||(n[46]=a("lot more of methods (")),t(e,{icon:"iconfont icon-github"}),n[47]||(n[47]=s("code",null,"acdlite/recompose",-1)),n[48]||(n[48]=a(")"))]),n[50]||(n[50]=a(" that can be used to generate more higher-order components in an easier way."))]),s("p",null,[n[57]||(n[57]=a("In the ")),s("a",P,[n[51]||(n[51]=a("official repo (")),t(e,{icon:"iconfont icon-github"}),n[52]||(n[52]=s("code",null,"acdlite/recompose",-1)),n[53]||(n[53]=a(")"))]),n[58]||(n[58]=a(", you can find some ")),s("a",N,[n[54]||(n[54]=a("Recompose recipes (")),t(e,{icon:"iconfont icon-github"}),n[55]||(n[55]=s("code",null,"acdlite/recompose",-1)),n[56]||(n[56]=a(")"))]),n[59]||(n[59]=a(" that can be useful to your project."))]),n[81]||(n[81]=s("p",null,"Also, here you have the code used in this post and a live demo of the result.",-1)),n[82]||(n[82]=s("p",null,[a("So, now that you know a bit more about "),s("em",null,"Recompose"),a("… What is your first impression? Do you think is a good way to go when creating components?")],-1)),n[83]||(n[83]=s("p",null,"My opinion is… that I like it! I really like the patterns encouraged by Recompose oriented to the creation of small and simple pieces (components and HOCs) that can be used to create more complex ones in an easy-to-read way and that are functional programming-oriented.",-1)),n[84]||(n[84]=s("p",null,"Well, that’s my opinion. What’s yours?",-1)),g(" TODO: add ARTICLE CARD "),t(r,u(d({title:"Using Recompose to write clean higher-order components",desc:"Learn how Recompose methods can help create cleaner HOCs and how it simplifies the development and organization of React components.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/using-recompose-to-write-clean-higher-order-components-3019a6daf44c.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const J=v(y,[["render",U]]),V=JSON.parse('{"path":"/blog.logrocket.com/using-recompose-to-write-clean-higher-order-components.html","title":"Using Recompose to write clean higher-order components","lang":"en-US","frontmatter":{"lang":"en-US","title":"Using Recompose to write clean higher-order components","description":"Article(s) > Using Recompose to write clean higher-order components","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Using Recompose to write clean higher-order components\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/using-recompose-to-write-clean-higher-order-components/banner.png\\"],\\"datePublished\\":\\"2018-06-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JuanMa Garrido\\",\\"url\\":\\"https://blog.logrocket.com/author/juanmagarrido/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/using-recompose-to-write-clean-higher-order-components.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Using Recompose to write clean higher-order components"}],["meta",{"property":"og:description","content":"Article(s) > Using Recompose to write clean higher-order components"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/using-recompose-to-write-clean-higher-order-components/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/using-recompose-to-write-clean-higher-order-components/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Using Recompose to write clean higher-order components"}],["meta",{"property":"article:author","content":"JuanMa Garrido"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2018-06-25T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Using Recompose to write clean higher-order components"},{"property":"og:description","content":"Using Recompose to write clean higher-order components"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/using-recompose-to-write-clean-higher-order-components.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2018-06-25T00:00:00.000Z","isOriginal":false,"author":[{"name":"JuanMa Garrido","url":"https://blog.logrocket.com/author/juanmagarrido/"}],"cover":"/assets/image/blog.logrocket.com/using-recompose-to-write-clean-higher-order-components/banner.png"},"git":{},"readingTime":{"minutes":8.76,"words":2627},"filePathRelative":"blog.logrocket.com/using-recompose-to-write-clean-higher-order-components.md","copyright":{"author":"JuanMa Garrido"}}');export{J as comp,V as data};
