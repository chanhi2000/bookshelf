import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as t,b as l,a as u,t as g,n as d,g as k,w as o,e as a,r as c,o as f}from"./app-BVguHYKu.js";const b={},w={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},D={class:"table-of-contents"},M={href:"https://github.com/cashapp/turbine",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/cashapp/turbine",target:"_blank",rel:"noopener noreferrer"},T={href:"https://youtube.com/@DroidFly",target:"_blank",rel:"noopener noreferrer"},F={class:"hint-container info"},x={href:"https://proandroiddev.com/mastering-android-viewmodels-essential-dos-and-donts-part-5-%EF%B8%8F5%EF%B8%8F%E2%83%A3-14d04ec2426a",target:"_blank",rel:"noopener noreferrer"};function V(m,n){const r=c("VPCard"),e=c("router-link"),p=c("SiteInfo"),i=c("VPIcon");return f(),h("div",null,[s("h1",w,[s("a",y,[s("span",null,g(m.$frontmatter.title)+" 관련",1)])]),t(r,d(k({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",D,[s("ul",null,[s("li",null,[t(e,{to:"#in-this-article-we-ll-cover"},{default:o(()=>n[0]||(n[0]=[a("In this article we’ll cover")])),_:1,__:[0]})]),s("li",null,[t(e,{to:"#_1-avoid-hardcoding-coroutine-dispatchers"},{default:o(()=>n[1]||(n[1]=[a("1. Avoid Hardcoding Coroutine Dispatchers")])),_:1,__:[1]}),s("ul",null,[s("li",null,[t(e,{to:"#the-problem-with-hardcoding-dispatchers"},{default:o(()=>n[2]||(n[2]=[a("The Problem with Hardcoding Dispatchers")])),_:1,__:[2]})]),s("li",null,[t(e,{to:"#recommended-approach"},{default:o(()=>n[3]||(n[3]=[a("Recommended Approach")])),_:1,__:[3]})])])]),s("li",null,[t(e,{to:"#_2-unit-test-your-viewmodels"},{default:o(()=>n[4]||(n[4]=[a("2. Unit Test Your ViewModels")])),_:1,__:[4]}),s("ul",null,[s("li",null,[t(e,{to:"#testing-challenges"},{default:o(()=>n[5]||(n[5]=[a("Testing Challenges")])),_:1,__:[5]})]),s("li",null,[t(e,{to:"#best-practices-for-testing-viewmodels"},{default:o(()=>n[6]||(n[6]=[a("Best Practices for Testing ViewModels")])),_:1,__:[6]})])])]),s("li",null,[t(e,{to:"#_3-avoid-exposing-suspended-functions"},{default:o(()=>n[7]||(n[7]=[a("3. Avoid Exposing Suspended Functions")])),_:1,__:[7]}),s("ul",null,[s("li",null,[t(e,{to:"#why-it-s-problematic"},{default:o(()=>n[8]||(n[8]=[a("Why It’s Problematic")])),_:1,__:[8]})]),s("li",null,[t(e,{to:"#the-better-way"},{default:o(()=>n[9]||(n[9]=[a("The Better Way")])),_:1,__:[9]})])])]),s("li",null,[t(e,{to:"#conclusion"},{default:o(()=>n[10]||(n[10]=[a("Conclusion")])),_:1,__:[10]})])])]),n[33]||(n[33]=s("hr",null,null,-1)),t(p,{name:"Mastering Android ViewModels: Essential Dos and Don’ts Part 5 🛠️5️⃣",desc:"This will be the fifth installment in our series “Mastering Android ViewModels” where we dive deep into the essential dos and don’ts that can elevate your Android development skills. We’ve already covered several tips to improve performance and code quality in ViewModels, which have become an integral part of modern Android applications.",url:"https://droidcon.com/mastering-android-viewmodels-essential-dos-and-donts-part-5-%F0%9F%9B%A0%EF%B8%8F5%EF%B8%8F%E2%83%A3",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",preview:"https://droidcon.com/wp-content/uploads/2024/11/1_XDoCaRPSQa-h0DqkT5ckmA-600x278.webp"}),n[34]||(n[34]=l(`<figure><img src="https://droidcon.com/wp-content/uploads/2024/11/1_XDoCaRPSQa-h0DqkT5ckmA-600x278.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>This will be the fifth installment in our series**“Mastering Android <code>ViewModels</code>”**where we dive deep into the essential dos and don’ts that can elevate your Android development skills. We’ve already covered several tips to improve performance and code quality in <code>ViewModels</code>, which have become an integral part of modern Android applications.</p><div class="hint-container info"><p class="hint-container-title">Mastering Android ViewModels: Essential Dos and Don’ts Series 🔄🔄🔄</p><ol><li><strong>Avoid initializing the state in the <code>init {}</code> block.</strong>✅ <a href="https://proandroiddev.com/mastering-android-viewmodels-essential-dos-and-donts-part-1-%EF%B8%8F-bdf05287bca9" target="_blank" rel="noopener noreferrer">Read here</a></li><li><strong>Avoid exposing mutable states.</strong>✅<a href="https://proandroiddev.com/mastering-android-viewmodels-essential-dos-and-donts-part-2-%EF%B8%8F-2b49281f0029" target="_blank" rel="noopener noreferrer">Read here</a></li><li><strong>Use <code>update{}</code> when using <code>MutableStateFlows</code>.</strong>✅<a href="https://proandroiddev.com/mastering-android-viewmodels-essential-dos-and-donts-part-2-%EF%B8%8F-2b49281f0029" target="_blank" rel="noopener noreferrer">Read here</a></li><li><strong>Try not to import Android dependencies in the <code>ViewModels</code>.</strong>✅<a href="https://proandroiddev.com/mastering-android-viewmodels-essential-dos-and-donts-part-3-%EF%B8%8F3%EF%B8%8F%E2%83%A3-1833ce3ddd2b" target="_blank" rel="noopener noreferrer">Read here</a></li><li><strong>Lazily inject dependencies in the constructor.</strong>✅<a href="https://proandroiddev.com/mastering-android-viewmodels-essential-dos-and-donts-part-3-%EF%B8%8F3%EF%B8%8F%E2%83%A3-1833ce3ddd2b" target="_blank" rel="noopener noreferrer">Read here</a></li><li><strong>Embrace more reactive and less imperative coding. ✅</strong> <a href="https://proandroiddev.com/mastering-android-viewmodels-essential-dos-and-donts-part-4-%EF%B8%8F-a0bad53cebd2" target="_blank" rel="noopener noreferrer">Read here</a></li><li><strong>Avoid initializing the <code>ViewModel</code> from the outside world. ✅</strong> <a href="https://proandroiddev.com/mastering-android-viewmodels-essential-dos-and-donts-part-4-%EF%B8%8F-a0bad53cebd2" target="_blank" rel="noopener noreferrer">Read here</a></li></ol></div><hr><h2 id="in-this-article-we-ll-cover" tabindex="-1"><a class="header-anchor" href="#in-this-article-we-ll-cover"><span>In this article we’ll cover</span></a></h2><p>1.Avoid hardcoding Coroutine Dispatchers. 2.Unit test your ViewModels. 3.Avoid exposing suspended functions.</p><hr><h2 id="_1-avoid-hardcoding-coroutine-dispatchers" tabindex="-1"><a class="header-anchor" href="#_1-avoid-hardcoding-coroutine-dispatchers"><span>1. Avoid Hardcoding Coroutine Dispatchers</span></a></h2><p>When dealing with coroutines in your <code>ViewModel</code>, hardcoding dispatchers like<code>Dispatchers.IO</code>or<code>Dispatchers.Default</code>might seem convenient, but it can lead to tightly coupled and less testable code.</p><h3 id="the-problem-with-hardcoding-dispatchers" tabindex="-1"><a class="header-anchor" href="#the-problem-with-hardcoding-dispatchers"><span>The Problem with Hardcoding Dispatchers</span></a></h3><p>Hardcoding dispatchers directly in your <code>ViewModel</code> can make testing difficult and reduce flexibility. For instance, during testing, you may want to control the threading behavior, which becomes challenging with hardcoded dispatchers.</p><h3 id="recommended-approach" tabindex="-1"><a class="header-anchor" href="#recommended-approach"><span>Recommended Approach</span></a></h3><p>Inject your dispatchers via the constructor or use a dependency injection framework like Hilt or Dagger. This not only makes your <code>ViewModel</code> more flexible but also simplifies testing:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> <span class="token function">MyViewModel</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> ioDispatcher<span class="token operator">:</span> CoroutineDispatcher <span class="token operator">=</span> Dispatchers<span class="token punctuation">.</span>IO</span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     viewModelScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>ioDispatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token comment">// Your coroutine code here</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By using dependency injection, you can swap out the dispatcher during testing, ensuring your <code>ViewModel</code> behaves correctly in different environments.</p><p>for an example look at:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ui/words-list/src/main/java/com/example/words_list/WordsListViewModelTest.kt"><span>ui/words-list/src/main/java/com/example/words_list/WordsListViewModelTest.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>words_list</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>paging<span class="token punctuation">.</span>testing<span class="token punctuation">.</span>asSnapshot</span>
<span class="line"><span class="token keyword">import</span> assertk<span class="token punctuation">.</span>Assert</span>
<span class="line"><span class="token keyword">import</span> assertk<span class="token punctuation">.</span>assertThat</span>
<span class="line"><span class="token keyword">import</span> assertk<span class="token punctuation">.</span>assertions<span class="token punctuation">.</span>isTrue</span>
<span class="line"><span class="token keyword">import</span> assertk<span class="token punctuation">.</span>assertions<span class="token punctuation">.</span>size</span>
<span class="line"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sync<span class="token punctuation">.</span>DictionarySyncStateWatcherDefault</span>
<span class="line"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>DictionaryRepository</span>
<span class="line"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>usecases<span class="token punctuation">.</span>GetFilteredWordsUseCase</span>
<span class="line"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>testing<span class="token punctuation">.</span>DataSyncStatusFake</span>
<span class="line"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>testing<span class="token punctuation">.</span>FakeDictionaryRepo</span>
<span class="line"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>testing<span class="token punctuation">.</span>MainDispatcherRule</span>
<span class="line"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>wordslist<span class="token punctuation">.</span>WordsListViewModel</span>
<span class="line"><span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Duration<span class="token punctuation">.</span>Companion<span class="token punctuation">.</span>seconds</span>
<span class="line"><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>test<span class="token punctuation">.</span>runTest</span>
<span class="line"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Rule</span>
<span class="line"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test</span>
<span class="line"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith</span>
<span class="line"><span class="token keyword">import</span> org<span class="token punctuation">.</span>robolectric<span class="token punctuation">.</span>RobolectricTestRunner</span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@RunWith</span><span class="token punctuation">(</span>RobolectricTestRunner<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> WordsListViewModelTest <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation builtin">@get:Rule</span></span>
<span class="line">  <span class="token keyword">val</span> mainDispatcherRule <span class="token operator">=</span> <span class="token function">MainDispatcherRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation builtin">@Test</span></span>
<span class="line">  <span class="token keyword">fun</span> <span class="token function">testViewModelLoadsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">runTest</span><span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">.</span>seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> fakeRepository<span class="token operator">:</span> DictionaryRepository <span class="token operator">=</span> <span class="token function">FakeDictionaryRepo</span><span class="token punctuation">(</span><span class="token function">createWordsSequence</span><span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">1_000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> viewModel <span class="token operator">=</span> <span class="token function">WordsListViewModel</span><span class="token punctuation">(</span></span>
<span class="line">      getFilteredWordUseCase <span class="token operator">=</span> <span class="token function">GetFilteredWordsUseCase</span><span class="token punctuation">(</span>fakeRepository<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      stateWatcher <span class="token operator">=</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sync<span class="token punctuation">.</span><span class="token function">DictionarySyncStateWatcherDefault</span><span class="token punctuation">(</span><span class="token function">DataSyncStatusFake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> items <span class="token operator">=</span> viewModel<span class="token punctuation">.</span>pagingDataFlow</span>
<span class="line">    <span class="token keyword">val</span> itemsSnapshot <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">asSnapshot</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Scroll to the 50th item in the list. This will also suspend till</span></span>
<span class="line">      <span class="token comment">// the prefetch requirement is met if there&#39;s one.</span></span>
<span class="line">      <span class="token comment">// It also suspends until all loading is complete.</span></span>
<span class="line">      <span class="token function">scrollTo</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">assertThat</span><span class="token punctuation">(</span>itemsSnapshot<span class="token punctuation">.</span>size <span class="token operator">&gt;=</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">assertThat</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">asSnapshot</span><span class="token punctuation">(</span>loadOperations <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">scrollTo</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size <span class="token operator">&gt;=</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">assertThat</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">asSnapshot</span><span class="token punctuation">(</span>loadOperations <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">scrollTo</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">700</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size <span class="token operator">&gt;=</span> <span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">assertThat</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">asSnapshot</span><span class="token punctuation">(</span>loadOperations <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">scrollTo</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">850</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size <span class="token operator">&gt;=</span> <span class="token number">850</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">assertThat</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">asSnapshot</span><span class="token punctuation">(</span>loadOperations <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">scrollTo</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">900</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size <span class="token operator">&gt;=</span> <span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">assertThat</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">asSnapshot</span><span class="token punctuation">(</span>loadOperations <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">scrollTo</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>size <span class="token operator">&gt;=</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation builtin">@Test</span></span>
<span class="line">  <span class="token keyword">fun</span> <span class="token function">testViewModelLoadsHugeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runTest <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> fakeRepository<span class="token operator">:</span> DictionaryRepository <span class="token operator">=</span> <span class="token function">FakeDictionaryRepo</span><span class="token punctuation">(</span><span class="token function">createWordsSequence</span><span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">1000_000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> viewModel <span class="token operator">=</span> <span class="token function">WordsListViewModel</span><span class="token punctuation">(</span></span>
<span class="line">      getFilteredWordUseCase <span class="token operator">=</span> <span class="token function">GetFilteredWordsUseCase</span><span class="token punctuation">(</span>fakeRepository<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      stateWatcher <span class="token operator">=</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sync<span class="token punctuation">.</span><span class="token function">DictionarySyncStateWatcherDefault</span><span class="token punctuation">(</span><span class="token function">DataSyncStatusFake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> items <span class="token operator">=</span> viewModel<span class="token punctuation">.</span>pagingDataFlow</span>
<span class="line">    <span class="token keyword">val</span> itemsSnapshot <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">asSnapshot</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">scrollTo</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">assertThat</span><span class="token punctuation">(</span>itemsSnapshot<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAtLeast</span><span class="token punctuation">(</span><span class="token number">422</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">assertThat</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">asSnapshot</span><span class="token punctuation">(</span>loadOperations <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">scrollTo</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAtLeast</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">assertThat</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">asSnapshot</span><span class="token punctuation">(</span>loadOperations <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">scrollTo</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">700</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAtLeast</span><span class="token punctuation">(</span><span class="token number">700</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">assertThat</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">asSnapshot</span><span class="token punctuation">(</span>loadOperations <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">scrollTo</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">850</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAtLeast</span><span class="token punctuation">(</span><span class="token number">850</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">assertThat</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">asSnapshot</span><span class="token punctuation">(</span>loadOperations <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">scrollTo</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">10_000</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAtLeast</span><span class="token punctuation">(</span><span class="token number">10_000</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">assertThat</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span><span class="token function">asSnapshot</span><span class="token punctuation">(</span>loadOperations <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">scrollTo</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">12_000</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAtLeast</span><span class="token punctuation">(</span><span class="token number">12_000</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">createWordsSequence</span><span class="token punctuation">(</span>size<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">asSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">fun</span> Assert<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">isAtLeast</span><span class="token punctuation">(</span>size<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span> <span class="token punctuation">{</span> it <span class="token operator">&gt;=</span> size <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,17)),u(" @include: https://github.com/LloydBlv/GoodDictionary/blob/main/ui/words-list/src/test/java/com/example/words_list/WordsListViewModelTest.kt "),n[35]||(n[35]=l('<hr><h2 id="_2-unit-test-your-viewmodels" tabindex="-1"><a class="header-anchor" href="#_2-unit-test-your-viewmodels"><span>2. Unit Test Your <code>ViewModels</code></span></a></h2><p>Unit testing is essential to ensure your <code>ViewModels</code> behave as expected. Without proper tests, you risk introducing bugs that could have been caught early.</p><h3 id="testing-challenges" tabindex="-1"><a class="header-anchor" href="#testing-challenges"><span>Testing Challenges</span></a></h3><p><code>ViewModels</code> often interact with complex state and other components, making them tricky to test. However, by following the right practices, specially what we discuss in this series, you can thoroughly test your ViewModel’s logic.</p><h3 id="best-practices-for-testing-viewmodels" tabindex="-1"><a class="header-anchor" href="#best-practices-for-testing-viewmodels"><span>Best Practices for Testing <code>ViewModels</code></span></a></h3>',6)),s("ul",null,[n[20]||(n[20]=l("<li>**Use a <code>TestCoroutineDispatcher</code>**to control coroutine execution and test asynchronous code synchronously.</li><li>Favor testing ViewModels as a non-Android test (use test folder instead of androidTest)</li><li>Avoid using<code>runBlocking{}</code>for testing<code>suspended</code>functions, instead use<code>runTest{}</code>from<code>coroutines-test</code></li>",3)),s("li",null,[n[12]||(n[12]=a("Avoid manually peeking values from")),n[13]||(n[13]=s("code",null,"StateFlows",-1)),n[14]||(n[14]=a(", Use")),s("a",M,[t(i,{icon:"iconfont icon-github"}),n[11]||(n[11]=s("code",null,"cashapp/turbine",-1))]),n[15]||(n[15]=a("instead"))]),s("li",null,[n[17]||(n[17]=a("For testing")),n[18]||(n[18]=s("code",null,"flows",-1)),n[19]||(n[19]=a(", use")),s("a",A,[t(i,{icon:"iconfont icon-github"}),n[16]||(n[16]=s("code",null,"cashapp/turbine",-1))])]),n[21]||(n[21]=s("li",null,"Favor fakes over mocks",-1))]),n[36]||(n[36]=l('<hr><h2 id="_3-avoid-exposing-suspended-functions" tabindex="-1"><a class="header-anchor" href="#_3-avoid-exposing-suspended-functions"><span>3. Avoid Exposing Suspended Functions</span></a></h2><p>While<code>suspend</code>functions make asynchronous programming in Kotlin easier, exposing them directly from your ViewModel can lead to misuse and increased complexity.</p><h3 id="why-it-s-problematic" tabindex="-1"><a class="header-anchor" href="#why-it-s-problematic"><span>Why It’s Problematic</span></a></h3><p>Exposing<code>suspend</code>functions can result in mismanagement of threading or lifecycle events, leading to bugs or crashes.</p><h3 id="the-better-way" tabindex="-1"><a class="header-anchor" href="#the-better-way"><span>The Better Way</span></a></h3><p>Keep suspension internal to the ViewModel, and expose results through<code>Flow</code>or other observable patterns.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Mastering <code>ViewModels</code> in Android development is crucial for creating robust, efficient, and maintainable applications. Throughout this series, we’ve discussed a comprehensive set of best practices to improve your code quality and application performance.</p><p>🌟<strong>Congratulations</strong>if you’ve made it this far in the article! 🎉<strong>Don’t forget to</strong>:</p>',11)),s("ul",null,[n[27]||(n[27]=s("li",null,"👏 Smash the clap button as many times! So I can continue with the follow-up articles!",-1)),s("li",null,[n[25]||(n[25]=a("Follow")),s("a",T,[n[22]||(n[22]=a("my YouTube channel (")),t(i,{icon:"fa-brands fa-youtube"}),n[23]||(n[23]=s("code",null,"DroidFly",-1)),n[24]||(n[24]=a(")"))]),n[26]||(n[26]=a("for video tutorials and tips on Android development"))]),n[28]||(n[28]=s("li",null,[a("✨✨If you need help with your Android ViewModels, Project, or your career development, Book a 1:1 or a Pair-Programming session with me, "),s("a",{href:"https://mentorcruise.com/mentor/rezanajafi/",target:"_blank",rel:"noopener noreferrer"},[s("strong",null,"Book a time now")]),a(" 🧑‍💻🧑‍💻🧑‍💻")],-1)),n[29]||(n[29]=s("li",null,"check out the previous articles in this series with the links below:",-1))]),t(p,{name:"Mastering Android ViewModels: Essential Dos and Don’ts Part 1 🛠️",desc:"If you’re using ViewModels keep these in mind for better code quality",url:"https://proandroiddev.com/mastering-android-viewmodels-essential-dos-and-donts-part-1-%EF%B8%8F-bdf05287bca9/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1200/1*kw5CfF3tMvC_SQaKneKuag.png"}),t(p,{name:"Mastering Android ViewModels: Essential Dos and Don’ts Part 2 🛠️",desc:"In the second part of this series of articles, we will continue discussing best practices for using Android ViewModels.",url:"https://proandroiddev.com/mastering-android-viewmodels-essential-dos-and-donts-part-2-%EF%B8%8F-2b49281f0029/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1200/1*h2v9N4U9uGp4gTiphRWg4w.png"}),t(p,{name:"Mastering Android ViewModels: Essential Dos and Don’ts Part 3 🛠️3️⃣",desc:"If you’re using ViewModels keep these in mind for better code quality, Part3",url:"https://proandroiddev.com/mastering-android-viewmodels-essential-dos-and-donts-part-3-%EF%B8%8F3%EF%B8%8F%E2%83%A3-1833ce3ddd2b/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1080/1*dWdbvDuWlcQaFNCYBjRI6w.png"}),t(p,{name:"Mastering Android ViewModels: Essential Dos and Don’ts Part 4 🛠️⚃",desc:"If you’re using ViewModels keep these in mind for better code quality, Part 4",url:"https://proandroiddev.com/mastering-android-viewmodels-essential-dos-and-donts-part-4-%EF%B8%8F-a0bad53cebd2/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1080/1*4M3wAQM1QlZpJNah4H6P9A.png"}),s("div",F,[n[32]||(n[32]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[31]||(n[31]=a("This article is previously published on ")),s("a",x,[t(i,{icon:"fa-brands fa-medium"}),n[30]||(n[30]=a("proandroiddev.com"))])]),t(p,{name:"Mastering Android ViewModels: Essential Dos and Don’ts Part 5 🛠️5️⃣",desc:"keep these in mind for better code quality when doing ViewModels!",url:"https://proandroiddev.com/mastering-android-viewmodels-essential-dos-and-donts-part-5-%EF%B8%8F5%EF%B8%8F%E2%83%A3-14d04ec2426a/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1080/1*XDoCaRPSQa-h0DqkT5ckmA.png"})]),u(" TODO: add ARTICLE CARD "),t(r,d(k({title:"Mastering Android ViewModels: Essential Dos and Don’ts Part 5 🛠️5️⃣",desc:"This will be the fifth installment in our series “Mastering Android ViewModels” where we dive deep into the essential dos and don’ts that can elevate your Android development skills. We’ve already covered several tips to improve performance and code quality in ViewModels, which have become an integral part of modern Android applications.",link:"https://chanhi2000.github.io/bookshelf/droidcon.com/mastering-android-viewmodels-essential-dos-and-donts-part-5-%F0%9F%9B%A0%EF%B8%8F5%EF%B8%8F%E2%83%A3.html",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",background:"rgba(4,20,221,0.2)"})),null,16)])}const P=v(b,[["render",V]]),R=JSON.parse('{"path":"/droidcon.com/mastering-android-viewmodels-essential-dos-and-donts-part-5.html","title":"Mastering Android ViewModels: Essential Dos and Don’ts Part 5 🛠️5️⃣","lang":"en-US","frontmatter":{"lang":"en-US","title":"Mastering Android ViewModels: Essential Dos and Don’ts Part 5 🛠️5️⃣","description":"Article(s) > Mastering Android ViewModels: Essential Dos and Don’ts Part 5 🛠️5️⃣","icon":"iconfont icon-jetpack-compose","category":["Java","Kotlin","Android","Article(s)"],"tag":["blog","droidcon.com","java","kotlin","android"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Mastering Android ViewModels: Essential Dos and Don’ts Part 5 🛠️5️⃣\\",\\"image\\":[\\"https://droidcon.com/wp-content/uploads/2024/11/1_XDoCaRPSQa-h0DqkT5ckmA-600x278.webp\\"],\\"datePublished\\":\\"2024-11-05T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Reza\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/mastering-android-viewmodels-essential-dos-and-donts-part-5.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Mastering Android ViewModels: Essential Dos and Don’ts Part 5 🛠️5️⃣"}],["meta",{"property":"og:description","content":"Article(s) > Mastering Android ViewModels: Essential Dos and Don’ts Part 5 🛠️5️⃣"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://droidcon.com/wp-content/uploads/2024/11/1_XDoCaRPSQa-h0DqkT5ckmA-600x278.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://droidcon.com/wp-content/uploads/2024/11/1_XDoCaRPSQa-h0DqkT5ckmA-600x278.webp"}],["meta",{"name":"twitter:image:alt","content":"Mastering Android ViewModels: Essential Dos and Don’ts Part 5 🛠️5️⃣"}],["meta",{"property":"article:author","content":"Reza"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"droidcon.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-05T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Mastering Android ViewModels: Essential Dos and Don’ts Part 5 🛠️5️⃣"},{"property":"og:description","content":"Mastering Android ViewModels: Essential Dos and Don’ts Part 5 🛠️5️⃣"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/mastering-android-viewmodels-essential-dos-and-donts-part-5-%F0%9F%9B%A0%EF%B8%8F5%EF%B8%8F%E2%83%A3.html"}]],"prev":"/programming/java-android/articles/README.md","date":"2024-11-05T00:00:00.000Z","isOriginal":false,"author":"Reza","cover":"https://droidcon.com/wp-content/uploads/2024/11/1_XDoCaRPSQa-h0DqkT5ckmA-600x278.webp"},"git":{},"readingTime":{"minutes":5.69,"words":1706},"filePathRelative":"droidcon.com/mastering-android-viewmodels-essential-dos-and-donts-part-5.md","copyright":{"author":"Reza"}}');export{P as comp,R as data};
