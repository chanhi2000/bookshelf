import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as e,b as c,t as m,n as v,g as b,w as t,e as a,r as p,o as f}from"./app-BVguHYKu.js";const h="/bookshelf/assets/image/code-maze.com/aspnet-configuration-creating-custom-provider/ef-configuration-provider.png",C="/bookshelf/assets/image/code-maze.com/aspnet-configuration-creating-custom-provider/database.png",y="/bookshelf/assets/image/code-maze.com/aspnet-configuration-creating-custom-provider/Home-Page-green.png",w={},S={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},P={class:"table-of-contents"},q={class:"hint-container info"},A={href:"https://github.com/CodeMazeBlog/aspnet-core-configuration",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/CodeMazeBlog/aspnet-core-configuration/tree/configuration-providers",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/CodeMazeBlog/aspnet-core-configuration/tree/custom-configuration-provider",target:"_blank",rel:"noopener noreferrer"};function D(u,n){const d=p("VPCard"),i=p("router-link"),r=p("SiteInfo"),l=p("RouteLink"),o=p("VPIcon");return f(),g("div",null,[s("h1",S,[s("a",x,[s("span",null,m(u.$frontmatter.title)+" 관련",1)])]),e(d,v(b({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",P,[s("ul",null,[s("li",null,[e(i,{to:"#initializing-ef-core"},{default:t(()=>n[0]||(n[0]=[a("Initializing EF Core")])),_:1,__:[0]})]),s("li",null,[e(i,{to:"#implementing-a-custom-ef-core-provider"},{default:t(()=>n[1]||(n[1]=[a("Implementing a Custom EF Core Provider")])),_:1,__:[1]})]),s("li",null,[e(i,{to:"#running-the-application"},{default:t(()=>n[2]||(n[2]=[a("Running the Application")])),_:1,__:[2]})]),s("li",null,[e(i,{to:"#conclusion"},{default:t(()=>n[3]||(n[3]=[a("Conclusion")])),_:1,__:[3]})])])]),n[42]||(n[42]=s("hr",null,null,-1)),e(r,{name:"Creating Custom Configuration Provider in ASP.NET Core",desc:"In this article, we are going to create a custom configuration provider that reads our configuration from the database.",url:"https://code-maze.com/aspnet-configuration-creating-custom-provider/",logo:"/assets/image/code-maze.com/favicon.png",preview:"/assets/image/code-maze.com/aspnet-configuration-creating-custom-provider/banner.png"}),s("p",null,[n[5]||(n[5]=a("In this article, we are going to create a custom configuration provider that reads our configuration from the database. We’ve seen how the ")),e(l,{to:"/code-maze.com/aspnet-configuration-providers.html"},{default:t(()=>n[4]||(n[4]=[s("strong",null,"default configuration providers",-1)])),_:1,__:[4]}),n[6]||(n[6]=a(" work, and now we’re going to implement our own custom one."))]),n[43]||(n[43]=s("p",null,"For the custom configuration provider, we’ll use Entity Framework Core, coupled with the SQL Server database.",-1)),s("div",q,[n[22]||(n[22]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[18]||(n[18]=a("The source code for this article can be found on the ")),s("a",A,[n[7]||(n[7]=a("ASP.NET Core Configuration repo on GitHub (")),e(o,{icon:"iconfont icon-github"}),n[8]||(n[8]=s("code",null,"CodeMazeBlog/aspnet-core-configuration",-1)),n[9]||(n[9]=a(")"))]),n[19]||(n[19]=a(". If you wish to follow along, use the ")),s("a",E,[e(o,{icon:"fas fa-code-branch"}),n[10]||(n[10]=s("code",null,"configuration-providers",-1)),n[11]||(n[11]=a(" (")),e(o,{icon:"iconfont icon-github"}),n[12]||(n[12]=s("code",null,"CodeMazeBlog/aspnet-core-configuration",-1)),n[13]||(n[13]=a(")"))]),n[20]||(n[20]=a(" branch. To check out the finished source code, check out the ")),s("a",z,[e(o,{icon:"fas fa-code-branch"}),n[14]||(n[14]=s("code",null,"custom-configuration-provider",-1)),n[15]||(n[15]=a(" (")),e(o,{icon:"iconfont icon-github"}),n[16]||(n[16]=s("code",null,"CodeMazeBlog/aspnet-core-configuration",-1)),n[17]||(n[17]=a(")"))]),n[21]||(n[21]=a(" branch."))]),e(r,{name:"CodeMazeBlog/aspnet-core-configuration",desc:"This repo contains the source code for the ASP.NET Core Configuration Series of articles.",url:"https://github.com/CodeMazeBlog/aspnet-core-configuration",logo:"https://avatars.githubusercontent.com/u/29179238?v=4",preview:"https://opengraph.githubassets.com/e80292ed715f08922effe73e0902ccf220294b7d0a8e5c5759c861254e9e4e0f/CodeMazeBlog/aspnet-core-configuration"})]),s("p",null,[n[24]||(n[24]=a("First, let’s upgrade our solution to support EF Core using the ")),e(l,{to:"/code-maze.com/asp-net-core-web-api-with-ef-core-db-first-approach.html"},{default:t(()=>n[23]||(n[23]=[s("strong",null,"database-first approach",-1)])),_:1,__:[23]}),n[25]||(n[25]=a("."))]),n[44]||(n[44]=s("hr",null,null,-1)),n[45]||(n[45]=s("h2",{id:"initializing-ef-core",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#initializing-ef-core"},[s("span",null,"Initializing EF Core")])],-1)),s("p",null,[n[27]||(n[27]=a("Before we start, let’s take a moment to clear all the user secrets and environment variables, we’ve set in the ")),e(l,{to:"/code-maze.com/aspnet-configuration-providers.html"},{default:t(()=>n[26]||(n[26]=[s("strong",null,"previous part",-1)])),_:1,__:[26]}),n[28]||(n[28]=a(". Once that’s finished, let’s proceed."))]),n[46]||(n[46]=c(`<p>We need to install two Nuget packages first:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>SqlServer <span class="token operator">-</span>v 3<span class="token punctuation">.</span>1<span class="token punctuation">.</span>7</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We need this package since we’ll be using SQL Server instance, and:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Install-Package</span> Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>Tools <span class="token operator">-</span>v 3<span class="token punctuation">.</span>1<span class="token punctuation">.</span>7</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Since we are going to perform an initial creation and migration of the database through the CLI.</p><p>We need a class that will contain our key-value configuration pairs (Models folder):</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationEntity</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Key</span></span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Key <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Value <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And a <code>DbContext</code> class (Models folder):</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationDbContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DbContext</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">ConfigurationDbContext</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptions</span> options<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>ConfigurationEntity<span class="token punctuation">&gt;</span></span> ConfigurationEntities <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We need just one <code>DbSet</code> of <code>ConfigurationEntity</code> which will map to our table in the database.</p><p>Now we just need to set up a connection to our server in the <code>ConfigureServices()</code> method in the <code>Startup</code> class:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ConfigurationDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>opts <span class="token operator">=&gt;</span></span>
<span class="line">    opts<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;sqlConnection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,12)),s("p",null,[n[29]||(n[29]=a("And of course, you need to change the connection string in the ")),e(o,{icon:"iconfont icon-json"}),n[30]||(n[30]=s("code",null,"appsettings.json",-1)),n[31]||(n[31]=a(" file to your database. If you’re using SqlExpress, it most probably looks like this:"))]),n[47]||(n[47]=c(`<div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token property">&quot;ConnectionStrings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;sqlConnection&quot;</span><span class="token operator">:</span> <span class="token string">&quot;server=.\\\\SQLEXPRESS; database=CodeMazeCommerce; Integrated Security=true&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s it, now we can simply add an initial migration through the Package Manager Console:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Add-Migration</span> InitialSetup</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And apply that migration to the database:</p><div class="language-powershell line-numbers-mode" data-highlighter="prismjs" data-ext="powershell"><pre><code class="language-powershell"><span class="line"><span class="token function">Update-Database</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now our database is created and ready to be used for storing configuration data.</p><hr><h2 id="implementing-a-custom-ef-core-provider" tabindex="-1"><a class="header-anchor" href="#implementing-a-custom-ef-core-provider"><span>Implementing a Custom EF Core Provider</span></a></h2><p>To start things off let’s create a folder ConfigurationProviders inside our Models folder, in order to group our classes properly.</p><p>After that, we need to actually create a configuration provider by inheriting the <code>ConfigurationProvider</code> class. We’ll create our own provider class in the <code>ConfigurationProviders</code> folder and name it <code>EFConfigurationProvider</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EFConfigurationProvider</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ConfigurationProvider</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">EFConfigurationProvider</span><span class="token punctuation">(</span><span class="token class-name">Action<span class="token punctuation">&lt;</span>DbContextOptionsBuilder<span class="token punctuation">&gt;</span></span> optionsAction<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        OptionsAction <span class="token operator">=</span> optionsAction<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token return-type class-name">Action<span class="token punctuation">&lt;</span>DbContextOptionsBuilder<span class="token punctuation">&gt;</span></span> OptionsAction <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DbContextOptionsBuilder<span class="token punctuation">&lt;</span>ConfigurationDbContext<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">OptionsAction</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> dbContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConfigurationDbContext</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Options<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            dbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">EnsureCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            Data <span class="token operator">=</span> <span class="token operator">!</span>dbContext<span class="token punctuation">.</span>ConfigurationEntities<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">?</span> <span class="token function">CreateAndSaveDefaultValues</span><span class="token punctuation">(</span>dbContext<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">:</span> dbContext<span class="token punctuation">.</span>ConfigurationEntities<span class="token punctuation">.</span><span class="token function">ToDictionary</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">IDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">CreateAndSaveDefaultValues</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationDbContext</span> dbContext<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> configValues <span class="token operator">=</span></span>
<span class="line">            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>StringComparer<span class="token punctuation">.</span>OrdinalIgnoreCase<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                <span class="token punctuation">{</span> <span class="token string">&quot;Pages:HomePage:WelcomeMessage&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Welcome to the ProjectConfigurationDemo Home Page&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">{</span> <span class="token string">&quot;Pages:HomePage:ShowWelcomeMessage&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">{</span> <span class="token string">&quot;Pages:HomePage:Color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;black&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">{</span> <span class="token string">&quot;Pages:HomePage:UseRandomTitleColor&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        dbContext<span class="token punctuation">.</span>ConfigurationEntities<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>configValues</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>kvp <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConfigurationEntity</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                Key <span class="token operator">=</span> kvp<span class="token punctuation">.</span>Key<span class="token punctuation">,</span></span>
<span class="line">                Value <span class="token operator">=</span> kvp<span class="token punctuation">.</span>Value</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        dbContext<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> configValues<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This class might look a bit scary at first, but it’s not that scary.</p><p>The constructor has one argument a delegate <code>Action&lt;DbContextOptionsBuilder&gt; optionsAction</code>. We’ll use the <code>DbContextOptionsBuilder</code> class later to define a context for our database. We’ve already done it when we defined the connection string previously. We’re exposing the context options builder, in order to provide that option to our custom provider.</p><p>We’re overriding the <code>Load()</code> method in order to populate our <code>ConfigurationEntity</code> with the data from the database or create a few default ones if the database table is empty. That’s all there is to it.</p><p>Next, we’re going to register our configuration provider as a source. In order to do that, we need to implement the <code>IConfigurationSource</code> interface. So let’s create the <code>EFConfigurationSource</code> class in the <code>ConfigurationProviders</code> folder:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EFConfigurationSource</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IConfigurationSource</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>DbContextOptionsBuilder<span class="token punctuation">&gt;</span></span> _optionsAction<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">EFConfigurationSource</span><span class="token punctuation">(</span><span class="token class-name">Action<span class="token punctuation">&lt;</span>DbContextOptionsBuilder<span class="token punctuation">&gt;</span></span> optionsAction<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _optionsAction <span class="token operator">=</span> optionsAction<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">IConfigurationProvider</span> <span class="token function">Build</span><span class="token punctuation">(</span><span class="token class-name">IConfigurationBuilder</span> builder<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EFConfigurationProvider</span><span class="token punctuation">(</span>_optionsAction<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We just need to implement the <code>Build()</code> method, which in our case initializes the configuration provided with the options that we’ve sent through the configuration source constructor.</p><p>This looks really confusing so let’s see how to add our database configuration provider to the list of the configuration sources. We’ll do it in a similar fashion as before:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IHostBuilder</span> <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            webBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">ConfigureAppConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hostingContext<span class="token punctuation">,</span> configBuilder<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> configBuilder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name"><span class="token keyword">var</span></span> configSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EFConfigurationSource</span><span class="token punctuation">(</span>opts <span class="token operator">=&gt;</span></span>
<span class="line">                opts<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;sqlConnection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            configBuilder<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>configSource<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19)),s("p",null,[n[32]||(n[32]=a("As you can see we’re building the configuration builder in order to get the ")),n[33]||(n[33]=s("code",null,"IConfiguration",-1)),n[34]||(n[34]=a(". We need it because our connection string is stored in the ")),e(o,{icon:"iconfont icon-json"}),n[35]||(n[35]=s("code",null,"appsettings.json",-1)),n[36]||(n[36]=a(" file. Now we can create a configuration source with that connection string, and add it to the existing configuration sources with the ")),n[37]||(n[37]=s("code",null,"configBuilder.Add()",-1)),n[38]||(n[38]=a(" method."))]),n[48]||(n[48]=c(`<p>Now we want to clear the appsettings.json file a bit:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;Logging&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;LogLevel&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token property">&quot;Default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Information&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;Microsoft&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Warning&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;Microsoft.Hosting.Lifetime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Information&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;ConnectionStrings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;sqlConnection&quot;</span><span class="token operator">:</span> <span class="token string">&quot;server=.\\\\SQLEXPRESS; database=CodeMazeCommerce; Integrated Security=true&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;AllowedHosts&quot;</span><span class="token operator">:</span> <span class="token string">&quot;*&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We’ve removed the “Pages” section to make sure it’s being read from the database.</p><p>And we need to remove the <code>AddDbContext()</code> method we’ve used before in the Startup class since it’s not needed anymore.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//remove!!!</span></span>
<span class="line">    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ConfigurationDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>opts <span class="token operator">=&gt;</span></span>
<span class="line">            opts<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">&quot;sqlConnection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token range operator">..</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Since we won’t need any migrations for this example, create a database called “CodeMazeCommerce” manually through your SQL Management Studio, or through the SQL Server Object Explorer.</p><p>That’s it, let’s run the application.</p><hr><h2 id="running-the-application" tabindex="-1"><a class="header-anchor" href="#running-the-application"><span>Running the Application</span></a></h2><p>Now if we run the application, put a breakpoint in the <code>Startup</code> class, and inspect the <code>Configuration</code> object, we’ll find our configuration source:</p><figure><img src="`+h+'" alt="ef configuration provider" tabindex="0" loading="lazy"><figcaption>ef configuration provider</figcaption></figure><p>Excellent.</p><p>If we inspect the database, we’ll see it’s populated:</p><figure><img src="'+C+'" alt="database" tabindex="0" loading="lazy"><figcaption>database</figcaption></figure><p>Let’s continue the execution and see if our application is still working as expected:</p><figure><img src="'+y+'" alt="Home Page green" tabindex="0" loading="lazy"><figcaption>Home Page green</figcaption></figure><p>It still works as it did previously! You can refresh the page a few times to make sure the color of the title still changes.</p><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2>',19)),s("p",null,[n[40]||(n[40]=a("In this short article, we’ve seen how to implement our own custom configuration provider that reads the values from the database. In the next part, we’re going to learn how to ")),e(l,{to:"/code-maze.com/aspnet-configuration-securing-sensitive-data.html"},{default:t(()=>n[39]||(n[39]=[s("strong",null,"protect our sensitive configuration values",-1)])),_:1,__:[39]}),n[41]||(n[41]=a("."))]),n[49]||(n[49]=s("p",null,[a("You can find other parts of this series on the "),s("a",{href:"/code-maze.com/net-core-series.md/#configuration",target:"_blank",rel:"noopener noreferrer"},[s("strong",null,"ASP.NET Core Web API page")]),a(".")],-1))])}const T=k(w,[["render",D]]),j=JSON.parse('{"path":"/code-maze.com/aspnet-configuration-creating-custom-provider.html","title":"Creating Custom Configuration Provider in ASP.NET Core","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Creating Custom Configuration Provider in ASP.NET Core","description":"Article(s) > Creating Custom Configuration Provider in ASP.NET Core","icon":"iconfont icon-csharp","category":["C#","Article(s)"],"tag":["blog","code-maze.com","cs","c#","csharp"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Creating Custom Configuration Provider in ASP.NET Core\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/aspnet-configuration-creating-custom-provider/ef-configuration-provider.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/aspnet-configuration-creating-custom-provider/database.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/aspnet-configuration-creating-custom-provider/Home-Page-green.png\\"],\\"datePublished\\":\\"2022-10-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/aspnet-configuration-creating-custom-provider.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Creating Custom Configuration Provider in ASP.NET Core"}],["meta",{"property":"og:description","content":"Article(s) > Creating Custom Configuration Provider in ASP.NET Core"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/aspnet-configuration-creating-custom-provider/banner.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/aspnet-configuration-creating-custom-provider/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Creating Custom Configuration Provider in ASP.NET Core"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-10-12T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Creating Custom Configuration Provider in ASP.NET Core"},{"property":"og:description","content":"Creating Custom Configuration Provider in ASP.NET Core"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/aspnet-configuration-creating-custom-provider.html"}]],"prev":"/programming/cs/articles/README.md","date":"2022-10-12T00:00:00.000Z","isOriginal":false,"cover":"/assets/image/code-maze.com/aspnet-configuration-creating-custom-provider/banner.png"},"git":{},"readingTime":{"minutes":4.72,"words":1416},"filePathRelative":"code-maze.com/aspnet-configuration-creating-custom-provider.md"}');export{T as comp,j as data};
