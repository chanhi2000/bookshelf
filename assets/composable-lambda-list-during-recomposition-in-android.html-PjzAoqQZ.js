import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as a,b as v,a as b,t as h,n as c,g as r,w as i,e,r as t,o as f}from"./app-BVguHYKu.js";const g={},w={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},T={class:"hint-container info"},_={href:"https://proandroiddev.com/composable-lambda-list-during-recomposition-in-android-bf798f236ba7",target:"_blank",rel:"noopener noreferrer"};function A(d,n){const p=t("VPCard"),o=t("router-link"),l=t("SiteInfo"),u=t("VPIcon");return f(),k("div",null,[s("h1",w,[s("a",y,[s("span",null,h(d.$frontmatter.title)+" 관련",1)])]),a(p,c(r({title:"Android > Article(s)",desc:"Article(s)",link:"/programming/java-android/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[a(o,{to:"#composables-list"},{default:i(()=>n[0]||(n[0]=[e("Composables list")])),_:1,__:[0]})]),s("li",null,[a(o,{to:"#reference-in-memory-of-lambdas"},{default:i(()=>n[1]||(n[1]=[e("Reference in memory of lambdas")])),_:1,__:[1]})]),s("li",null,[a(o,{to:"#different-contexts-to-have-different-lambda-references"},{default:i(()=>n[2]||(n[2]=[e("Different contexts to have different lambda references")])),_:1,__:[2]})])])]),n[6]||(n[6]=s("hr",null,null,-1)),a(l,{name:"Composable lambda list during recomposition in Android",desc:"This post is to see how to render a composable list, more at an educational level than a practical one, since in most cases we can use lazy lists.",url:"https://droidcon.com/composable-lambda-list-during-recomposition-in-android",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",preview:"https://droidcon.com/wp-content/uploads/2024/11/1_8nScfAbqJD24zynwz7TivQ-1024x585.webp"}),n[7]||(n[7]=v(`<p>This post is to see how to render a composable list, more at an educational level than a practical one, since in most cases we can use lazy lists.</p><figure><img src="https://droidcon.com/wp-content/uploads/2024/11/1_8nScfAbqJD24zynwz7TivQ-1024x585.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>I once had to deal with a screen that painted several nested lists dynamically, using generic types, quite complex due to the way it was built and also using the<strong>hybrid XML + Jetpack Compose system</strong>, so in the end I ended up using a composable list, or at least that was the solution I found by reusing the pieces I had available.</p><p>But again, in most cases this approach will be the exception or you will probably come up with other solutions.</p><hr><h2 id="composables-list" tabindex="-1"><a class="header-anchor" href="#composables-list"><span>Composables list</span></a></h2><p>In this example, the UI will receive three values that will be emitted every second:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">private</span> <span class="token keyword">val</span> viewTypeState<span class="token operator">:</span> MutableState<span class="token operator">&lt;</span>ViewType<span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">init</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">emitViewTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">emitViewTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  lifecycleScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1</span>\\_000<span class="token punctuation">)</span></span>
<span class="line">    viewTypeState<span class="token punctuation">.</span>value <span class="token operator">=</span> ViewType<span class="token punctuation">.</span>Header</span>
<span class="line">    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1</span>\\_000<span class="token punctuation">)</span></span>
<span class="line">    viewTypeState<span class="token punctuation">.</span>value <span class="token operator">=</span> ViewType<span class="token punctuation">.</span>Body</span>
<span class="line">    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1</span>\\_000<span class="token punctuation">)</span></span>
<span class="line">    viewTypeState<span class="token punctuation">.</span>value <span class="token operator">=</span> ViewType<span class="token punctuation">.</span>Footer</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The list will be dynamically created in the UI and displayed like this:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Composable</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">RenderViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> views<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span><span class="token annotation builtin">@Composable</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token operator">&gt;</span> <span class="token operator">=</span> remember <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    viewTypeState<span class="token punctuation">.</span>value<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> viewType <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token keyword">val</span> view <span class="token operator">=</span> <span class="token function">getView</span><span class="token punctuation">(</span>text <span class="token operator">=</span> viewType<span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line">        views<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">Column</span><span class="token punctuation">(</span></span>
<span class="line">            verticalArrangement <span class="token operator">=</span> Arrangement<span class="token punctuation">.</span><span class="token function">spacedBy</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            views<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> view <span class="token operator">-&gt;</span></span>
<span class="line">                <span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@Composable</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">getView</span><span class="token punctuation">(</span>text<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token annotation builtin">@Composable</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> text<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That is, the<code>getView()</code>method returns a composable lambda that, when invoked, will display a text view.</p><p>And the<code>RenderViews()</code>method goes through the list of views, invoking them item by item, to display the views on the screen.</p><p>When running the above code, it looks like the result will be this:</p><figure><img src="https://droidcon.com/wp-content/uploads/2024/11/1_mEfV-j9auKhPlcGqOZx74A.webp" alt="But it actually shows" tabindex="0" loading="lazy"><figcaption>But it actually shows</figcaption></figure><p>Compose list real</p><p>So what’s going on?</p><hr><h2 id="reference-in-memory-of-lambdas" tabindex="-1"><a class="header-anchor" href="#reference-in-memory-of-lambdas"><span>Reference in memory of lambdas</span></a></h2><p>What happens is that every time the lambda is invoked,<strong>the same reference is obtained in memory</strong>, so:</p><ol><li>The Header is emitted, the view with the header is added to the list, and the Header view is displayed.</li><li>The Body is emitted, the view with the body is added to the list, and the Body view is displayed twice, since the first item that had the value of Header now has the value of Body.</li><li>The Footer is emitted, the view with the Footer is added to the list, and the Footer view is displayed three times, since the first item and the second item that had the value of Body now have the value of Footer.</li></ol><figure><img src="https://miro.medium.com/v2/resize:fit:600/format:webp/1*r0LJwZ8gkKpfn7xMFpkWYQ.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>And so on, the last value emitted is added to the list and affects the previous elements, since <strong>the list lambdas have the same reference</strong>, so they will always<strong>render the same view</strong>(Text)<strong>with a different value</strong>(title):</p><figure><img src="https://droidcon.com/wp-content/uploads/2024/11/1_NEDnzBfahhYQr3578pzjCw-1024x118.webp" alt="This could be due to how Kotlin handles different lambda instances depending on the context, in this case theletblock, even though the content is different." tabindex="0" loading="lazy"><figcaption>This could be due to how Kotlin handles different lambda instances depending on the context, in this case the<em>let</em>block, even though the content is different.</figcaption></figure><hr><h2 id="different-contexts-to-have-different-lambda-references" tabindex="-1"><a class="header-anchor" href="#different-contexts-to-have-different-lambda-references"><span>Different contexts to have different lambda references</span></a></h2><p>Therefore, a solution could have different contexts to generate different instances. In this case, using the when block:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token annotation builtin">@Composable</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">RenderViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> views<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span><span class="token annotation builtin">@Composable</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token operator">&gt;</span> <span class="token operator">=</span> remember <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token keyword">val</span> viewType <span class="token operator">=</span> viewTypeState<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        ViewType<span class="token punctuation">.</span>Body <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">val</span> view <span class="token operator">=</span> <span class="token function">getView</span><span class="token punctuation">(</span>text <span class="token operator">=</span> viewType<span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line">            views<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        ViewType<span class="token punctuation">.</span>Footer <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">val</span> view <span class="token operator">=</span> <span class="token function">getView</span><span class="token punctuation">(</span>text <span class="token operator">=</span> viewType<span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line">            views<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        ViewType<span class="token punctuation">.</span>Header <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">val</span> view <span class="token operator">=</span> <span class="token function">getView</span><span class="token punctuation">(</span>text <span class="token operator">=</span> viewType<span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line">            views<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">null</span> <span class="token operator">-&gt;</span> Unit</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">Column</span><span class="token punctuation">(</span></span>
<span class="line">        verticalArrangement <span class="token operator">=</span> Arrangement<span class="token punctuation">.</span><span class="token function">spacedBy</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        views<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> view <span class="token operator">-&gt;</span></span>
<span class="line">            <span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://droidcon.com/wp-content/uploads/2024/11/1_wDgDxc9GFVYCj_bGrVhSCA-1024x124.webp" alt="Thus, calling the method generates different instances" tabindex="0" loading="lazy"><figcaption>Thus, calling the <code>getView()</code>method generates different instances</figcaption></figure><figure><img src="https://miro.medium.com/v2/resize:fit:600/format:webp/1*LgrOg28C5_fIpKisa7DXBw.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>I hope you don’t have to do this kind of workaround in your projects, but if you do, at least this can help you face future challenges. 🙂</p>`,30)),s("div",T,[n[5]||(n[5]=s("p",{class:"hint-container-title"},"Info",-1)),s("p",null,[n[4]||(n[4]=e("This article is previously published on ")),s("a",_,[a(u,{icon:"fa-brands fa-medium"}),n[3]||(n[3]=s("code",null,"proandroiddev",-1))])]),a(l,{name:"Composable lambda list during recomposition in Android",desc:"This post is to see how to render a composable list, more at an educational level than a practical one, since in most cases we can use lazy…",url:"https://proandroiddev.com/composable-lambda-list-during-recomposition-in-android-bf798f236ba7/",logo:"https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",preview:"https://miro.medium.com/v2/resize:fit:1200/1*8nScfAbqJD24zynwz7TivQ.jpeg"})]),b(" TODO: add ARTICLE CARD "),a(p,c(r({title:"Composable lambda list during recomposition in Android",desc:"This post is to see how to render a composable list, more at an educational level than a practical one, since in most cases we can use lazy lists.",link:"https://chanhi2000.github.io/bookshelf/droidcon.com/composable-lambda-list-during-recomposition-in-android.html",logo:"https://droidcon.com/wp-content/uploads/2021/07/favicon-300x300.png",background:"rgba(4,20,221,0.2)"})),null,16)])}const V=m(g,[["render",A]]),S=JSON.parse('{"path":"/droidcon.com/composable-lambda-list-during-recomposition-in-android.html","title":"Composable lambda list during recomposition in Android","lang":"en-US","frontmatter":{"lang":"en-US","title":"Composable lambda list during recomposition in Android","description":"Article(s) > Composable lambda list during recomposition in Android","icon":"iconfont icon-jetpack-compose","category":["Java","Kotlin","Android","Jetpack Compose","Article(s)"],"tag":["blog","droidcon.com","java","kotlin","android","jetpack-compse"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Composable lambda list during recomposition in Android\\",\\"image\\":[\\"https://droidcon.com/wp-content/uploads/2024/11/1_8nScfAbqJD24zynwz7TivQ-1024x585.webp\\",\\"https://droidcon.com/wp-content/uploads/2024/11/1_mEfV-j9auKhPlcGqOZx74A.webp\\",\\"https://miro.medium.com/v2/resize:fit:600/format:webp/1*r0LJwZ8gkKpfn7xMFpkWYQ.gif\\",\\"https://droidcon.com/wp-content/uploads/2024/11/1_NEDnzBfahhYQr3578pzjCw-1024x118.webp\\",\\"https://droidcon.com/wp-content/uploads/2024/11/1_wDgDxc9GFVYCj_bGrVhSCA-1024x124.webp\\",\\"https://miro.medium.com/v2/resize:fit:600/format:webp/1*LgrOg28C5_fIpKisa7DXBw.gif\\"],\\"datePublished\\":\\"2024-11-20T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Manuel Mato\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/composable-lambda-list-during-recomposition-in-android.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Composable lambda list during recomposition in Android"}],["meta",{"property":"og:description","content":"Article(s) > Composable lambda list during recomposition in Android"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://droidcon.com/wp-content/uploads/2024/11/1_8nScfAbqJD24zynwz7TivQ-1024x585.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://droidcon.com/wp-content/uploads/2024/11/1_8nScfAbqJD24zynwz7TivQ-1024x585.webp"}],["meta",{"name":"twitter:image:alt","content":"Composable lambda list during recomposition in Android"}],["meta",{"property":"article:author","content":"Manuel Mato"}],["meta",{"property":"article:tag","content":"jetpack-compse"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"droidcon.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-20T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Composable lambda list during recomposition in Android"},{"property":"og:description","content":"Composable lambda list during recomposition in Android"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/droidcon.com/composable-lambda-list-during-recomposition-in-android.html"}]],"prev":"/programming/java-android/articles/README.md","date":"2024-11-20T00:00:00.000Z","isOriginal":false,"author":"Manuel Mato","cover":"https://droidcon.com/wp-content/uploads/2024/11/1_8nScfAbqJD24zynwz7TivQ-1024x585.webp"},"git":{},"readingTime":{"minutes":3.13,"words":940},"filePathRelative":"droidcon.com/composable-lambda-list-during-recomposition-in-android.md","copyright":{"author":"Manuel Mato"}}');export{V as comp,S as data};
