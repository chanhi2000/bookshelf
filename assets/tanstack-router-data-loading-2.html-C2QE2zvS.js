import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as s,f as a,b as u,a as v,t as h,n as o,g as c,w as i,e as t,r,o as y}from"./app-BVguHYKu.js";const b={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},q={href:"https://tanstack.com/query/latest",target:"_blank",rel:"noopener noreferrer"},S={class:"hint-container info"},j={href:"https://tanstack.com/query/latest",target:"_blank",rel:"noopener noreferrer"},T={href:"https://react.dev/reference/react/useDeferredValue",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/arackaf/tanstack-router-loader-demo",target:"_blank",rel:"noopener noreferrer"},Q={class:"hint-container info"};function C(d,n){const e=r("VPCard"),p=r("router-link"),k=r("SiteInfo"),l=r("VPIcon");return y(),g("div",null,[s("h1",f,[s("a",w,[s("span",null,h(d.$frontmatter.title)+" 관련",1)])]),a(e,o(c({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",x,[s("ul",null,[s("li",null,[a(p,{to:"#setup"},{default:i(()=>n[0]||(n[0]=[t("Setup")])),_:1,__:[0]})]),s("li",null,[a(p,{to:"#querying"},{default:i(()=>n[1]||(n[1]=[t("Querying")])),_:1,__:[1]}),s("ul",null,[s("li",null,[a(p,{to:"#prefetching"},{default:i(()=>n[2]||(n[2]=[t("Prefetching")])),_:1,__:[2]})]),s("li",null,[a(p,{to:"#fetching-state"},{default:i(()=>n[3]||(n[3]=[t("Fetching state")])),_:1,__:[3]})]),s("li",null,[a(p,{to:"#queries-are-re-used"},{default:i(()=>n[4]||(n[4]=[t("Queries are re-used!")])),_:1,__:[4]})]),s("li",null,[a(p,{to:"#updating-with-react-query"},{default:i(()=>n[5]||(n[5]=[t("Updating with react-query")])),_:1,__:[5]})]),s("li",null,[a(p,{to:"#odds-and-ends"},{default:i(()=>n[6]||(n[6]=[t("Odds and ends")])),_:1,__:[6]})])])]),s("li",null,[a(p,{to:"#wrapping-up"},{default:i(()=>n[7]||(n[7]=[t("Wrapping up")])),_:1,__:[7]})])])]),n[25]||(n[25]=s("hr",null,null,-1)),a(k,{name:"Loading Data with TanStack Router: react-query",desc:"TanStack Query, or react-query, simplifies client-side data fetching with features like caching, automatic re-fetching, and error handling. It integrates smoothly with TanStack Router, allowing efficient prefetching and loading states using hooks like useSuspenseQuery. ",url:"https://frontendmasters.com/blog/tanstack-router-data-loading-2/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/4492"}),s("p",null,[s("a",q,[a(l,{icon:"fas fa-globe"}),n[8]||(n[8]=t("TanStack Query"))]),n[9]||(n[9]=t(", commonly referred to as react-query, is an incredibly popular tool for managing client-side querying. You could create an entire course on react-query, and people have, but here we’re going to keep it brief so you can quickly get going."))]),s("div",S,[n[10]||(n[10]=s("p",{class:"hint-container-title"},"Article Series",-1)),a(e,o(c({title:"Introducing TanStack Router",desc:"TanStack Router is a comprehensive JavaScript framework for client-side applications, emphasizing type-safe routing and navigation. It includes nested layouts and efficient data loading.",link:"/frontendmasters.com/introducing-tanstack-router.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),a(e,o(c({title:"Loading Data with TanStack Router: Getting Going",desc:"TanStack Router is one of the most exciting projects in the web development ecosystem right now, and it doesn’t get nearly enough attention. It’s a fully fledged client-side application framework that supports advanced routing, nested layouts, and hooks for loading data. Best of all, it does all of this with deep type safety. This post […]",link:"/frontendmasters.com/tanstack-router-data-loading-1.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),a(e,o(c({title:"Loading Data with TanStack Router: react-query",desc:"TanStack Query, or react-query, simplifies client-side data fetching with features like caching, automatic re-fetching, and error handling. It integrates smoothly with TanStack Router, allowing efficient prefetching and loading states using hooks like useSuspenseQuery. ",link:"/frontendmasters.com/tanstack-router-data-loading-2.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)]),n[26]||(n[26]=u(`<p>Essentially, react-query allows us to write code like this:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> isLoading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">queryKey</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;task&quot;</span><span class="token punctuation">,</span> taskId<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">queryFn</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">fetchJson</span><span class="token punctuation">(</span><span class="token string">&quot;/api/tasks/&quot;</span> <span class="token operator">+</span> taskId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">staleTime</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">gcTime</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>queryKey</code> does what it sounds like: it lets you identify any particular key for a query. As the key changes, react-query is smart enough to re-run the query, which is contained in the<code>queryFn</code>property. As these queries come in, TanStack tracks them in a client-side cache, along with properties like<code>staleTime</code>and<code>gcTime</code>, which mean the same thing as they do in TanStack Router. These tools are built by the same people, after all.</p><p>There’s also a<code>useSuspenseQuery</code>hook which is the same idea, except instead of giving you an isLoading value, it relies on Suspense, and lets you handle loading state via Suspense boundaries.</p>`,4)),s("p",null,[n[12]||(n[12]=t("This barely scratches the surface of Query. If you’ve never used it before, be sure to check out")),s("a",j,[a(l,{icon:"fas fa-globe"}),n[11]||(n[11]=t("the docs"))]),n[13]||(n[13]=t("."))]),n[27]||(n[27]=u(`<p>We’ll move on and cover the setup and integration with Router, but we’ll stay high level to keep this post a manageable length.</p><hr><h2 id="setup" tabindex="-1"><a class="header-anchor" href="#setup"><span>Setup</span></a></h2><p>We need to wrap our entire app with a<code>QueryClientProvider</code>which injects a queryClient (and cache) into our application tree. Putting it around the<code>RouterProvider</code>we already have is as good a place as any.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">Main</span><span class="token operator">:</span> <span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">QueryClientProvider</span></span> <span class="token attr-name">client</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>queryClient<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RouterProvider</span></span> <span class="token attr-name">router</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>router<span class="token punctuation">}</span></span> <span class="token attr-name">context</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> queryClient <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">QueryClientProvider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TanStackRouterDevtools</span></span> <span class="token attr-name">router</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>router<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Recall from before that we also passed our queryClient to our Router’s context like this:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">  routeTree<span class="token punctuation">,</span> </span>
<span class="line">  <span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token punctuation">{</span> queryClient <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">MyRouterContext</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  queryClient<span class="token operator">:</span> QueryClient<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Route <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createRootRouteWithContext</span><span class="token generic class-name"><span class="token operator">&lt;</span>MyRouterContext<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  component<span class="token operator">:</span> Root<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This allows us access to the<code>queryClient</code>inside of our loader functions via the Router’s context. If you’re wondering why we need loaders at all, now that we’re using react-query, stay tuned.</p><hr><h2 id="querying" tabindex="-1"><a class="header-anchor" href="#querying"><span>Querying</span></a></h2><p>We used Router’s built-in caching capabilities for our tasks. For epics, let’s use react-query. Moreover, let’s use the<code>useSuspenseQuery</code>hook, since managing loading state via Suspense boundaries is extremely ergonomic. Moreover, Suspense boundaries is exactly how Router’s<code>pendingComponent</code>works. So you can use<code>useSuspenseQuery</code>, along with the same pendingComponent we looked at before!</p><p>Let’s add another (contrived) summary query in our epics layout (route) component.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Route <span class="token operator">=</span> <span class="token function">createFileRoute</span><span class="token punctuation">(</span><span class="token string">&quot;/app/epics&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  component<span class="token operator">:</span> EpicLayout<span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">pendingComponent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading epics route ...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">EpicLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> context <span class="token operator">=</span> Route<span class="token punctuation">.</span><span class="token function">useRouteContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSuspenseQuery</span><span class="token punctuation">(</span><span class="token function">epicsSummaryQueryOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>timestarted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Epics overview</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>epicsOverview<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>epic <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Fragment</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>epic<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>epic<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>epic<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Outlet</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To keep the code somewhat organized (and other reasons we’ll get to) I stuck the query options into a separate place.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">epicsSummaryQueryOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span>timestarted<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  queryKey<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;epics&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;summary&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">queryFn</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> timeDifference <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> timestarted<span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Running api/epics/overview query at&quot;</span><span class="token punctuation">,</span> timeDifference<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> epicsOverview <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token generic-function"><span class="token function">fetchJson</span><span class="token generic class-name"><span class="token operator">&lt;</span>EpicOverview<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;api/epics/overview&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span> epicsOverview <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  staleTime<span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">  gcTime<span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A query key, and function, and some cache settings. I’m passing in the timestarted value from context, so we can see when these queries fire. This will help us detect waterfalls.</p><p>Let’s look at the root epics page (with a few details removed for space).</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">type</span> <span class="token class-name">SearchParams</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  page<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> Route <span class="token operator">=</span> <span class="token function">createFileRoute</span><span class="token punctuation">(</span><span class="token string">&quot;/app/epics/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">validateSearch</span><span class="token punctuation">(</span>search<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> SearchParams <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      page<span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>search<span class="token punctuation">.</span>page <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">loaderDeps</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> search <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span> page<span class="token operator">:</span> search<span class="token punctuation">.</span>page <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  component<span class="token operator">:</span> Index<span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">pendingComponent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading epics ...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span></span>
<span class="line">  pendingMinMs<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span></span>
<span class="line">  pendingMs<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> context <span class="token operator">=</span> Route<span class="token punctuation">.</span><span class="token function">useRouteContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> page <span class="token punctuation">}</span> <span class="token operator">=</span> Route<span class="token punctuation">.</span><span class="token function">useSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token operator">:</span> epicsData <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSuspenseQuery</span><span class="token punctuation">(</span><span class="token function">epicsQueryOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>timestarted<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token operator">:</span> epicsCount <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSuspenseQuery</span><span class="token punctuation">(</span><span class="token function">epicsCountQueryOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>timestarted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Epics page!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">There are </span><span class="token punctuation">{</span>epicsCount<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token plain-text"> epics</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token punctuation">{</span>epicsData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Fragment</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>e<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex gap-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/app/epics<span class="token punctuation">&quot;</span></span> <span class="token attr-name">search</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> page<span class="token operator">:</span> page <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>page <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            Prev</span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/app/epics<span class="token punctuation">&quot;</span></span> <span class="token attr-name">search</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> page<span class="token operator">:</span> page <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token operator">!</span>epicsData<span class="token punctuation">.</span>length<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            Next</span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Two queries on this page: one to get the list of (paged) epics, another to get the total count of all the epics. Let’s run it</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/11/img-2-epics-rendered.jpg?resize=779%2C1024&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>It’s as silly as before, but it does show the three pieces of data we’ve fetched: the overview data we fetched in the epics layout; and then the count of epics, and the list of epics we loaded in the epics page beneath that.</p><p>What’s more, when we run this, we first see the pending component for our root route. That resolves quickly, and shows the main navigation, along with the pending component for our epics route. That resolves, showing the epics overview data, and then revealing the pending component for our epics page, which eventually resolves and shows the list and count of our epics.</p><p>Our component-level data fetching is working, and integrating, via Suspense, with the same Router pending components we already had. Very cool!</p><p>Let’s take a peak at our console though, and look at all the various logging we’ve been doing, to track when these fetches happen</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/11/img-3-epics-waterfall.jpg?resize=554%2C248&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>The results are… awful. Component-level data fetching with Suspense feels really good, but if you’re not careful, these waterfalls are extremely easy to create. The problem is, when a component suspends while waiting for data, it prevents its children from rendering. This is precisely what’s happening here. The route is suspending, and not even giving the child component, which includes the page (and any other nested route components underneath) from rendering, which prevents those components’ fetches from starting.</p><p>There’s two potential solutions here: we could dump Suspense, and use the<code>useQuery</code>hook, instead, which does not suspend. That would require us to manually track multiple <code>isLoading</code> states (for each useQuery hook), and coordinate loading UX to go with that. For the epics page, we’d need to track both the count loading state, and the epics list state, and not show our UI until both have returned. And so on, for every other page.</p><p>The other solution is to start pre-fetching these queries sooner.</p><p>We’ll go with option 2.</p><h3 id="prefetching" tabindex="-1"><a class="header-anchor" href="#prefetching"><span>Prefetching</span></a></h3><p>Remember previously we saw that loader functions all run in parallel. This is the perfect opportunity to start these queries off ahead of time, before the components even render. TanStack Query gives us an API to do just that.</p><p>To prefetch with Query, we take the<code>queryClient</code>object we saw before, and call<code>queryClient.prefetchQuery</code>and pass in<strong>the exact same query options</strong>and Query will be smart enough, when the component loads and executes<code>useSuspenseQuery</code>, to see that the query is already in flight, and just latch onto that same request. That’s also a big reason why we put those query options into the<code>epicsSummaryQueryOptions</code>helper function: to make it easier to reuse in the loader, to prefetch.</p><p>Here’s the loader we’ll add to the epics route:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> context <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> queryClient <span class="token operator">=</span> context<span class="token punctuation">.</span>queryClient<span class="token punctuation">;</span></span>
<span class="line">  queryClient<span class="token punctuation">.</span><span class="token function">prefetchQuery</span><span class="token punctuation">(</span><span class="token function">epicsSummaryQueryOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>timestarted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The loader receives the route tree’s context, from which it grabs the <code>queryClient</code>. From there, we call<code>prefetchQuery</code>and pass in the same options.</p><p>Let’s move on to the Epics page. To review, this is the relevant code from our Epics page:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">function</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> context <span class="token operator">=</span> Route<span class="token punctuation">.</span><span class="token function">useRouteContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> page <span class="token punctuation">}</span> <span class="token operator">=</span> Route<span class="token punctuation">.</span><span class="token function">useSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token operator">:</span> epicsData <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSuspenseQuery</span><span class="token punctuation">(</span><span class="token function">epicsQueryOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>timestarted<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token operator">:</span> epicsCount <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSuspenseQuery</span><span class="token punctuation">(</span><span class="token function">epicsCountQueryOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>timestarted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// ..</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We grab the current page from the URL,andthe context, for the timestarted value. Now let’s do the same thing we just did, and repeat this code in the loader, to prefetch.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">async</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token punctuation">{</span> context<span class="token punctuation">,</span> deps <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> queryClient <span class="token operator">=</span> context<span class="token punctuation">.</span>queryClient<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  queryClient<span class="token punctuation">.</span><span class="token function">prefetchQuery</span><span class="token punctuation">(</span><span class="token function">epicsQueryOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>timestarted<span class="token punctuation">,</span> deps<span class="token punctuation">.</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  queryClient<span class="token punctuation">.</span><span class="token function">prefetchQuery</span><span class="token punctuation">(</span><span class="token function">epicsCountQueryOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>timestarted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now when we check the console, we see something a lot nicer.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/11/img-4-waterfall-solved.jpg?resize=548%2C254&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="fetching-state" tabindex="-1"><a class="header-anchor" href="#fetching-state"><span>Fetching state</span></a></h3><p>What happens when we <em>page up</em>. The page value will change in the URL, Router will send a new page value down into our loader, and our component. Then, our<code>useSuspenseQuery</code>will execute with new query values, and suspend again. That means our existing list of tasks will disappear, and show the “loading tasks” pending component. That would be a terrible UX.</p>`,45)),s("p",null,[n[15]||(n[15]=t("Fortunately, React offers us a nice solution, with the")),n[16]||(n[16]=s("code",null,"useDeferredValue",-1)),n[17]||(n[17]=t("hook. The docs are")),s("a",T,[a(l,{icon:"fa-brands fa-react"}),n[14]||(n[14]=t("here"))]),n[18]||(n[18]=t(". This allows us to “defer” a state change. If a state change causes our deferred value on the page to suspend, React will keep the existing UI in place, and the deferred value will simply hold the old value. Let’s see it in action."))]),n[28]||(n[28]=u(`<div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">function</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> page <span class="token punctuation">}</span> <span class="token operator">=</span> Route<span class="token punctuation">.</span><span class="token function">useSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> context <span class="token operator">=</span> Route<span class="token punctuation">.</span><span class="token function">useRouteContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> deferredPage <span class="token operator">=</span> <span class="token function">useDeferredValue</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> loading <span class="token operator">=</span> page <span class="token operator">!==</span> deferredPage<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token operator">:</span> epicsData <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSuspenseQuery</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token function">epicsQueryOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>timestarted<span class="token punctuation">,</span> deferredPage<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token operator">:</span> epicsCount <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSuspenseQuery</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token function">epicsCountQueryOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>timestarted<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We wrap the changing page value in<code>useDeferredValue</code>, and just like that, our page does not suspend when the new query is in flight. And to detect that a new query is running, we compare the real, correct<code>page</code>value, with the<code>deferredPage</code>value. If they’re different, we know new data are loading, and we can display a loading spinner (or in this case, put an opacity overlay on the epics list)</p><h3 id="queries-are-re-used" tabindex="-1"><a class="header-anchor" href="#queries-are-re-used"><span>Queries are re-used!</span></a></h3><p>When using react-query for data management, we can now re-use the same query across different routes. Both the view epic and edit epic pages need to fetch info on the epic the user is about to view, or edit. Now we can define those options in one place, like we had before.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">epicQueryOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span>timestarted<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  queryKey<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;epic&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">queryFn</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> timeDifference <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> timestarted<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Loading api/epic/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> data at</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> timeDifference<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> epic <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token generic-function"><span class="token function">fetchJson</span><span class="token generic class-name"><span class="token operator">&lt;</span>Epic<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">api/epics/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> epic<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  staleTime<span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">  gcTime<span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\`</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),s("p",null,[n[22]||(n[22]=t("We can use them in both routes, and have them be cached in between (assuming we set the caching values to allow that). You can try it ")),s("a",R,[n[19]||(n[19]=t("in the demo app (")),a(l,{icon:"iconfont icon-github"}),n[20]||(n[20]=s("code",null,"arackaf/tanstack-router-loader-demo",-1)),n[21]||(n[21]=t(")"))]),n[23]||(n[23]=t(": view an epic, go back to the list, then edit the same epic (or vice versa). Only the first of those pages you visit should cause the fetch to happen in your network tab."))]),n[29]||(n[29]=u(`<h3 id="updating-with-react-query" tabindex="-1"><a class="header-anchor" href="#updating-with-react-query"><span>Updating with react-query</span></a></h3><p>Just like with tasks, epics have a page where we can edit an individual epic. Let’s see what the saving logic looks like with react-query.</p><p>Let’s quickly review the query<em>keys</em>for the epics queries we’ve seen so far. For an individual epic, it was:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">epicQueryOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span>timestarted<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  queryKey<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;epic&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For the epics list, it was this:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">epicsQueryOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span>timestarted<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> page<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  queryKey<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;epics&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span> page<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And the count:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">epicsCountQueryOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span>timestarted<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  queryKey<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;epics&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;count&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, the epics overview:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">epicsSummaryQueryOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span>timestarted<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  queryKey<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;epics&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;summary&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice the pattern:<code>epics</code>followed by various things for the queries that affected multiple epics, and for an individual epic, we did<code>[&#39;epic&#39;, \${epicId}]</code>. With that in mind, let’s see just how easy it is to invalidate these queries after a mutation:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">save</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setSaving</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">await</span> <span class="token function">postToApi</span><span class="token punctuation">(</span><span class="token string">&quot;api/epic/update&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">id</span><span class="token operator">:</span> epic<span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> newName<span class="token punctuation">.</span>current<span class="token operator">!</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  queryClient<span class="token punctuation">.</span><span class="token function">removeQueries</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">queryKey</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;epics&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  queryClient<span class="token punctuation">.</span><span class="token function">removeQueries</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">queryKey</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;epic&quot;</span><span class="token punctuation">,</span> epicId<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token string">&quot;/app/epics&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">search</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">setSaving</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The magic is on the highlighted lines.</p><p>With one fell sweep, we remove<strong>all</strong>cached entries for<strong>any</strong>query that<em>started with</em><code>epics</code>, or started with<code>[&#39;epic&#39;, \${epicId}]</code>, and Query will handle the rest. Now, when we navigate back to the epics page (or any page that used these queries), we’ll see the suspense boundary show, while fresh data are loaded. If you’d prefer to keep stale data on the screen, while the fresh data load, that’s fine too: just use<code>queryClient.invalidateQueries</code>instead. If you’d like to detect if a query is re-fetching in the background, so you can display an inline spinner, use the<code>isFetching</code>property returned from<code>useSuspenseQuery</code>.</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token operator">:</span> epicsData<span class="token punctuation">,</span> isFetching <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSuspenseQuery</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token function">epicsQueryOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>timestarted<span class="token punctuation">,</span> deferredPage<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="odds-and-ends" tabindex="-1"><a class="header-anchor" href="#odds-and-ends"><span>Odds and ends</span></a></h3><p>We’ve gone pretty deep on TanStack Route and Query. Let’s take a look at one last trick.</p><p>If you recall, we saw that pending components ship a related<code>pendingMinMs</code>that forced a pending component to stay on the page a minimum amount of time, even if the data were ready. This was to avoid a jarring flash of a loading state. We also saw that TanStack Router uses Suspense to show those pending components, which means that react-query’s<code>useSuspenseQuery</code>will seamlessly integrate with it. Well, almost seamlessly. Router can only use the<code>pendingMinMs</code>value with the promise we return from the Router’s loader. But now we don’t really return any promise from the loader; we prefetch some stuff, and rely on component-level data fetching to do the real work.</p><p>Well there’s nothing stopping you from doing both! Right now our loader looks like this:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">async</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> context<span class="token punctuation">,</span> deps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> queryClient <span class="token operator">=</span> context<span class="token punctuation">.</span>queryClient<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  queryClient<span class="token punctuation">.</span><span class="token function">prefetchQuery</span><span class="token punctuation">(</span><span class="token function">epicsQueryOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>timestarted<span class="token punctuation">,</span> deps<span class="token punctuation">.</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  queryClient<span class="token punctuation">.</span><span class="token function">prefetchQuery</span><span class="token punctuation">(</span><span class="token function">epicsCountQueryOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>timestarted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Query also ships with a<code>queryClient.ensureQueryData</code>method, which can load query data, and return a promise for that request. Let’s put it to good use so we can use<code>pendingMinMs</code>again.</p><p>One thing you do<em>not</em>want to do is this:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">ensureQueryData</span><span class="token punctuation">(</span><span class="token function">epicsQueryOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>timestarted<span class="token punctuation">,</span> deps<span class="token punctuation">.</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">ensureQueryData</span><span class="token punctuation">(</span><span class="token function">epicsCountQueryOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>timestarted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>That will block on each request, serially. In other words, a waterfall. Instead, to kick off both requests immediately and wait on them in the loader (without a waterfall), you can do this:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">  queryClient<span class="token punctuation">.</span><span class="token function">ensureQueryData</span><span class="token punctuation">(</span><span class="token function">epicsQueryOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>timestarted<span class="token punctuation">,</span> deps<span class="token punctuation">.</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  queryClient<span class="token punctuation">.</span><span class="token function">ensureQueryData</span><span class="token punctuation">(</span><span class="token function">epicsCountQueryOptions</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>timestarted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Which works, and keeps the pending component on the screen for the duration of<code>pendingMinMs</code></p><p>You won’t always, or even usually need to do this. But it’s handy for when you do.</p><hr><h2 id="wrapping-up" tabindex="-1"><a class="header-anchor" href="#wrapping-up"><span>Wrapping up</span></a></h2><p>This has been a whirlwind route of TanStack Router and TanStack Query, but hopefully not an overwhelming one. These tools are incredibly powerful, and offer the ability to do just about anything. I hope this post will help some people put them to good use!</p>`,30)),s("div",Q,[n[24]||(n[24]=s("p",{class:"hint-container-title"},"Article Series",-1)),a(e,o(c({title:"Introducing TanStack Router",desc:"TanStack Router is a comprehensive JavaScript framework for client-side applications, emphasizing type-safe routing and navigation. It includes nested layouts and efficient data loading.",link:"/frontendmasters.com/introducing-tanstack-router.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),a(e,o(c({title:"Loading Data with TanStack Router: Getting Going",desc:"TanStack Router is one of the most exciting projects in the web development ecosystem right now, and it doesn’t get nearly enough attention. It’s a fully fledged client-side application framework that supports advanced routing, nested layouts, and hooks for loading data. Best of all, it does all of this with deep type safety. This post […]",link:"/frontendmasters.com/tanstack-router-data-loading-1.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16),a(e,o(c({title:"Loading Data with TanStack Router: react-query",desc:"TanStack Query, or react-query, simplifies client-side data fetching with features like caching, automatic re-fetching, and error handling. It integrates smoothly with TanStack Router, allowing efficient prefetching and loading states using hooks like useSuspenseQuery. ",link:"/frontendmasters.com/tanstack-router-data-loading-2.md",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)]),v(" TODO: add ARTICLE CARD "),a(e,o(c({title:"Loading Data with TanStack Router: react-query",desc:"TanStack Query, or react-query, simplifies client-side data fetching with features like caching, automatic re-fetching, and error handling. It integrates smoothly with TanStack Router, allowing efficient prefetching and loading states using hooks like useSuspenseQuery. ",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/tanstack-router-data-loading-2.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const L=m(b,[["render",C]]),O=JSON.parse('{"path":"/frontendmasters.com/tanstack-router-data-loading-2.html","title":"Loading Data with TanStack Router: react-query","lang":"en-US","frontmatter":{"lang":"en-US","title":"Loading Data with TanStack Router: react-query","description":"Article(s) > Loading Data with TanStack Router: react-query","icon":"fa-brands fa-react","category":["Node.js","React.js","Article(s)"],"tag":["blog","frontendmasters.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Loading Data with TanStack Router: react-query\\",\\"image\\":[\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/11/img-2-epics-rendered.jpg?resize=779%2C1024&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/11/img-3-epics-waterfall.jpg?resize=554%2C248&ssl=1\\",\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2024/11/img-4-waterfall-solved.jpg?resize=548%2C254&ssl=1\\"],\\"datePublished\\":\\"2024-11-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Adam Rackis\\",\\"url\\":\\"https://frontendmasters.com/blog/author/adamrackis/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/tanstack-router-data-loading-2.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Loading Data with TanStack Router: react-query"}],["meta",{"property":"og:description","content":"Article(s) > Loading Data with TanStack Router: react-query"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/4492"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/4492"}],["meta",{"name":"twitter:image:alt","content":"Loading Data with TanStack Router: react-query"}],["meta",{"property":"article:author","content":"Adam Rackis"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-21T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Loading Data with TanStack Router: react-query"},{"property":"og:description","content":"Loading Data with TanStack Router: react-query"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/tanstack-router-data-loading-2.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2024-11-21T00:00:00.000Z","isOriginal":false,"author":[{"name":"Adam Rackis","url":"https://frontendmasters.com/blog/author/adamrackis/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/4492"},"git":{},"readingTime":{"minutes":10.42,"words":3125},"filePathRelative":"frontendmasters.com/tanstack-router-data-loading-2.md","copyright":{"author":"Adam Rackis"}}');export{L as comp,O as data};
