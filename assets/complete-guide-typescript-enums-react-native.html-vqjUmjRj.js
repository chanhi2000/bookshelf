import{_ as y}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,d as s,f as e,b as o,a as f,t as w,n as m,g as k,w as t,e as a,r as i,o as S}from"./app-BVguHYKu.js";const x="/bookshelf/assets/image/blog.logrocket.com/complete-guide-typescript-enums-react-native/banner.jpeg",T={},A={id:"frontmatter-title-관련",tabindex:"-1"},R={class:"header-anchor",href:"#frontmatter-title-관련"},N={class:"table-of-contents"},q={href:"https://typescriptlang.org/docs/handbook/unions-and-intersections.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://blog.logrocket.com/ux-design/best-color-combinations-ux-design/",target:"_blank",rel:"noopener noreferrer"};function I(g,n){const d=i("VPCard"),p=i("router-link"),v=i("SiteInfo"),l=i("RouteLink"),c=i("VPIcon"),b=i("Tabs");return S(),h("div",null,[s("h1",A,[s("a",R,[s("span",null,w(g.$frontmatter.title)+" 관련",1)])]),e(d,m(k({title:"React.js > Article(s)",desc:"Article(s)",link:"/programming/js-react/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),e(d,m(k({title:"TypeScript > Article(s)",desc:"Article(s)",link:"/programming/ts/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",N,[s("ul",null,[s("li",null,[e(p,{to:"#what-are-typescript-enums"},{default:t(()=>n[0]||(n[0]=[a("What are TypeScript enums?")])),_:1,__:[0]}),s("ul",null,[s("li",null,[e(p,{to:"#types-of-enums"},{default:t(()=>n[1]||(n[1]=[a("Types of enums")])),_:1,__:[1]})])])]),s("li",null,[e(p,{to:"#benefits-of-using-enums-in-react-native"},{default:t(()=>n[2]||(n[2]=[a("Benefits of using enums in React Native")])),_:1,__:[2]}),s("ul",null,[s("li",null,[e(p,{to:"#_1-improved-readability"},{default:t(()=>n[3]||(n[3]=[a("1. Improved readability")])),_:1,__:[3]})]),s("li",null,[e(p,{to:"#_2-type-safety"},{default:t(()=>n[4]||(n[4]=[a("2. Type safety")])),_:1,__:[4]})]),s("li",null,[e(p,{to:"#_3-centralized-management"},{default:t(()=>n[5]||(n[5]=[a("3. Centralized management")])),_:1,__:[5]})]),s("li",null,[e(p,{to:"#_4-ease-of-debugging"},{default:t(()=>n[6]||(n[6]=[a("4. Ease of debugging")])),_:1,__:[6]})])])]),s("li",null,[e(p,{to:"#how-to-use-typescript-enums-in-react-native"},{default:t(()=>n[7]||(n[7]=[a("How to use TypeScript enums in React Native")])),_:1,__:[7]}),s("ul",null,[s("li",null,[e(p,{to:"#_1-managing-navigation-routes"},{default:t(()=>n[8]||(n[8]=[a("1. Managing navigation routes")])),_:1,__:[8]})]),s("li",null,[e(p,{to:"#_2-handling-theme-colors"},{default:t(()=>n[9]||(n[9]=[a("2. Handling theme colors")])),_:1,__:[9]})]),s("li",null,[e(p,{to:"#_3-managing-application-states"},{default:t(()=>n[10]||(n[10]=[a("3. Managing application states")])),_:1,__:[10]})])])]),s("li",null,[e(p,{to:"#best-practices-for-using-enums"},{default:t(()=>n[11]||(n[11]=[a("Best practices for using enums")])),_:1,__:[11]}),s("ul",null,[s("li",null,[e(p,{to:"#group-enums-by-feature"},{default:t(()=>n[12]||(n[12]=[a("Group enums by feature")])),_:1,__:[12]})]),s("li",null,[e(p,{to:"#give-preference-to-string-enums"},{default:t(()=>n[13]||(n[13]=[a("Give preference to string enums")])),_:1,__:[13]})]),s("li",null,[e(p,{to:"#use-clear-and-consistent-naming-conventions"},{default:t(()=>n[14]||(n[14]=[a("Use clear and consistent naming conventions")])),_:1,__:[14]})]),s("li",null,[e(p,{to:"#use-enums-only-when-the-values-are-fixed-and-unlikely-to-change"},{default:t(()=>n[15]||(n[15]=[a("Use enums only when the values are fixed and unlikely to change")])),_:1,__:[15]})])])]),s("li",null,[e(p,{to:"#union-types-an-enum-alternative"},{default:t(()=>n[16]||(n[16]=[a("Union types: An enum alternative")])),_:1,__:[16]}),s("ul",null,[s("li",null,[e(p,{to:"#advantages-of-union-types"},{default:t(()=>n[17]||(n[17]=[a("Advantages of union types")])),_:1,__:[17]})]),s("li",null,[e(p,{to:"#when-to-use-union-types"},{default:t(()=>n[18]||(n[18]=[a("When to use union types")])),_:1,__:[18]})])])]),s("li",null,[e(p,{to:"#conclusion"},{default:t(()=>n[19]||(n[19]=[a("Conclusion")])),_:1,__:[19]})])])]),n[60]||(n[60]=s("hr",null,null,-1)),e(v,{name:"A complete guide to TypeScript enums in React Native",desc:"Learn everything you need to know about using React Context — a great feature that enables you to manage and share state across the React application.",url:"https://blog.logrocket.com/complete-guide-typescript-enums-react-native",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/complete-guide-typescript-enums-react-native/banner.jpeg"}),n[61]||(n[61]=s("p",null,"When building React Native applications, one of the recurring challenges is managing constants. Whether it’s navigation routes, theme colors, or application states, relying on hardcoded values scattered throughout your codebase can lead to errors, poor readability, and maintenance headaches.",-1)),n[62]||(n[62]=s("figure",null,[s("img",{src:x,alt:"Using Typescript Enums In React Native Web",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Using Typescript Enums In React Native Web")],-1)),n[63]||(n[63]=s("p",null,"This is where TypeScript enums come in. Enums allow you to define a set of named values that give your code structure, improve readability, and make debugging a breeze.",-1)),n[64]||(n[64]=s("p",null,"In this detailed guide, I’ll walk you through what enums are, why you should use them, and show you step-by-step examples in React Native. I’ll explain each example in simple, relatable terms, ensuring you understand not just how to use enums, but why they matter. I’ll also cover best practices, alternatives like union types, and when to avoid enums.",-1)),n[65]||(n[65]=s("hr",null,null,-1)),n[66]||(n[66]=s("h2",{id:"what-are-typescript-enums",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#what-are-typescript-enums"},[s("span",null,"What are TypeScript enums?")])],-1)),s("p",null,[n[21]||(n[21]=a("An enum (short for enumeration) is a TypeScript feature that lets you define a collection of related values under one name. Instead of repeating strings or numbers throughout your code, ")),e(l,{to:"/blog.logrocket.com/typescript-enums-vs-types.html"},{default:t(()=>n[20]||(n[20]=[s("strong",null,"enums",-1)])),_:1,__:[20]}),n[22]||(n[22]=a(" give those values meaningful names."))]),n[67]||(n[67]=o(`<h3 id="types-of-enums" tabindex="-1"><a class="header-anchor" href="#types-of-enums"><span>Types of enums</span></a></h3><p>There are two main types of enums in TypeScript:</p><ul><li><strong>Numeric enums</strong>: Automatically assign numbers to the values</li><li><strong>String enums</strong>: Explicitly assign custom string values</li></ul><p>Here’s how they look:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// Numeric Enum</span></span>
<span class="line"><span class="token keyword">enum</span> Status <span class="token punctuation">{</span></span>
<span class="line">  Active <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment">// Starts at 1</span></span>
<span class="line">  Inactive<span class="token punctuation">,</span>    <span class="token comment">// Automatically becomes 2</span></span>
<span class="line">  Archived<span class="token punctuation">,</span>    <span class="token comment">// Automatically becomes 3</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// String Enum</span></span>
<span class="line"><span class="token keyword">enum</span> Theme <span class="token punctuation">{</span></span>
<span class="line">  Light <span class="token operator">=</span> <span class="token string">&#39;LIGHT&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Explicitly assigns &quot;LIGHT&quot;</span></span>
<span class="line">  Dark <span class="token operator">=</span> <span class="token string">&#39;DARK&#39;</span><span class="token punctuation">,</span>   <span class="token comment">// Explicitly assigns &quot;DARK&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Enums are especially useful when you have a small, fixed set of values that you know won’t change frequently. This makes them a perfect fit for many use cases in React Native.</p><hr><h2 id="benefits-of-using-enums-in-react-native" tabindex="-1"><a class="header-anchor" href="#benefits-of-using-enums-in-react-native"><span>Benefits of using enums in React Native</span></a></h2><p>Enums offer several benefits that directly impact the quality of your code:</p><h3 id="_1-improved-readability" tabindex="-1"><a class="header-anchor" href="#_1-improved-readability"><span>1. Improved readability</span></a></h3><p>Instead of using arbitrary strings or numbers, enums provide clear, descriptive names. This makes your code self-explanatory.</p><p>Without enums:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>route <span class="token operator">===</span> <span class="token string">&#39;HomeScreen&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>With enums:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>route <span class="token operator">===</span> Routes<span class="token punctuation">.</span>Home<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-type-safety" tabindex="-1"><a class="header-anchor" href="#_2-type-safety"><span>2. Type safety</span></a></h3>`,16)),s("p",null,[n[24]||(n[24]=a("One of the biggest advantages of using ")),e(l,{to:"/blog.logrocket.com/iterate-over-enums-typescript.html"},{default:t(()=>n[23]||(n[23]=[s("strong",null,"TypeScript enums",-1)])),_:1,__:[23]}),n[25]||(n[25]=a(" in React Native is the built-in type safety. With plain strings or numbers, it’s easy to introduce typos, inconsistent naming, or invalid values, errors that can slip through unnoticed until they cause unexpected behavior at runtime."))]),n[68]||(n[68]=o(`<p>But with enums, TypeScript acts like a strict gatekeeper, ensuring that only valid values are used. If you try to assign a value that’s not part of the enum, TypeScript will immediately throw an error during development, saving you from runtime crashes and hours of debugging.</p><p>Let’s say you’re handling user authentication states in your app:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">enum</span> AuthStatus <span class="token punctuation">{</span></span>
<span class="line">  LoggedIn <span class="token operator">=</span> <span class="token string">&quot;LOGGED_IN&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  LoggedOut <span class="token operator">=</span> <span class="token string">&quot;LOGGED_OUT&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  Pending <span class="token operator">=</span> <span class="token string">&quot;PENDING&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Function expecting an AuthStatus enum</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">handleAuth</span><span class="token punctuation">(</span>status<span class="token operator">:</span> AuthStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> AuthStatus<span class="token punctuation">.</span>LoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;User is logged in.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ❌ Incorrect value (throws an error at compile-time)</span></span>
<span class="line"><span class="token function">handleAuth</span><span class="token punctuation">(</span><span class="token string">&quot;LOGGED-IN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeScript Error: Argument of type &#39;&quot;LOGGED-IN&quot;&#39; is not assignable to parameter of type &#39;AuthStatus&#39;.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ✅ Correct usage</span></span>
<span class="line"><span class="token function">handleAuth</span><span class="token punctuation">(</span>AuthStatus<span class="token punctuation">.</span>LoggedIn<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In a JavaScript-only project, this typo (<code>LOGGED-IN</code> instead of <code>LOGGED_IN</code>) wouldn’t be caught until the app runs, potentially leading to broken logic. But with TypeScript enums, the error is flagged immediately, helping you catch issues early.</p><p>Why does this matter? TypeScript enums can help eliminate the risk of silent failures due to typos, provide clear auto-completion in IDEs (making coding faster), and ensure that only expected values are passed into functions, reducing runtime errors.</p><h3 id="_3-centralized-management" tabindex="-1"><a class="header-anchor" href="#_3-centralized-management"><span>3. Centralized management</span></a></h3>`,6)),s("p",null,[n[27]||(n[27]=a("As your app grows, managing hardcoded values scattered across different files becomes a nightmare. Imagine manually updating screen names, theme colors, or API statuses across dozens of components. Not only is it tedious, but the chances of missing a reference are high, leading to ")),e(l,{to:"/blog.logrocket.com/how-to-debug-typescript-chrome.html"},{default:t(()=>n[26]||(n[26]=[s("strong",null,"inconsistencies and bugs",-1)])),_:1,__:[26]}),n[28]||(n[28]=a("."))]),n[69]||(n[69]=o(`<p>Enums solve this by offering a single source of truth. Instead of manually updating values in multiple places, you define them once in an enum and reference them everywhere. Change it in one place, and it updates across the entire app.</p><p>For instance, let’s think about the context of centralizing navigation routes:</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token comment">// Define all route names in one place</span></span>
<span class="line"><span class="token keyword">enum</span> Routes <span class="token punctuation">{</span></span>
<span class="line">  Home <span class="token operator">=</span> <span class="token string">&quot;HomeScreen&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  Profile <span class="token operator">=</span> <span class="token string">&quot;ProfileScreen&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  Settings <span class="token operator">=</span> <span class="token string">&quot;SettingsScreen&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using enums in React Navigation</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Stack.Screen</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Routes<span class="token punctuation">.</span>Home<span class="token punctuation">}</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>HomeScreen<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Stack.Screen</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Routes<span class="token punctuation">.</span>Profile<span class="token punctuation">}</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ProfileScreen<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Stack.Screen</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Routes<span class="token punctuation">.</span>Settings<span class="token punctuation">}</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>SettingsScreen<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, if you ever need to rename <code>HomeScreen</code> to <code>MainScreen</code>, you only update it in the Routes enum, and it applies everywhere automatically.</p><p>This will help prevent inconsistencies, reducing typos or mismatched route names. It also contributes to easier refactoring (changing a value is quicker and less risky), and better code organization, as constants are clearly grouped, making the codebase more readable.</p><h3 id="_4-ease-of-debugging" tabindex="-1"><a class="header-anchor" href="#_4-ease-of-debugging"><span>4. Ease of debugging</span></a></h3><p>String enums, in particular, make debugging easier by providing meaningful values in logs. The logs always show standardized values, reducing confusion. The risk of logging incorrect or unexpected values is minimized, and if a mistake is made, TypeScript flags it during development, rather than letting it break the app in production.</p><hr><h2 id="how-to-use-typescript-enums-in-react-native" tabindex="-1"><a class="header-anchor" href="#how-to-use-typescript-enums-in-react-native"><span>How to use TypeScript enums in React Native</span></a></h2><p>Let’s dive into some practical, real-world examples. I’ll explain each part of the code so you can see how enums make your life easier.</p><h3 id="_1-managing-navigation-routes" tabindex="-1"><a class="header-anchor" href="#_1-managing-navigation-routes"><span>1. Managing navigation routes</span></a></h3><p>When building an app, you’ll often define multiple screens. Hardcoding route names like <code>HomeScreen</code> everywhere can lead to typos or inconsistent naming. By using enums, you can define all routes in one place and reference them across your app:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.tsx"><span>App.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token comment">// Define navigation routes using an enum</span></span>
<span class="line"><span class="token keyword">enum</span> Routes <span class="token punctuation">{</span></span>
<span class="line">  Home <span class="token operator">=</span> <span class="token string">&#39;HomeScreen&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  Profile <span class="token operator">=</span> <span class="token string">&#39;ProfileScreen&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  Settings <span class="token operator">=</span> <span class="token string">&#39;SettingsScreen&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// React Navigation setup</span></span>
<span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> NavigationContainer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reactnavigation/native&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStackNavigator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reactnavigation/stack&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Text <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-native&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> Stack <span class="token operator">=</span> <span class="token function">createStackNavigator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Screens</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">HomeScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Welcome to the Home Screen!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">ProfileScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">This is your Profile</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">SettingsScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Here are your Settings</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavigationContainer</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Stack.Navigator</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token punctuation">{</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"> Use the Routes enum to define screen names </span><span class="token regex-delimiter">/</span></span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Stack.Screen</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Routes<span class="token punctuation">.</span>Home<span class="token punctuation">}</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>HomeScreen<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Stack.Screen</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Routes<span class="token punctuation">.</span>Profile<span class="token punctuation">}</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ProfileScreen<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Stack.Screen</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Routes<span class="token punctuation">.</span>Settings<span class="token punctuation">}</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>SettingsScreen<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Stack.Navigator</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavigationContainer</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Here’s what you might notic; it helps keep your code organized, reduces errors, and improves readability. Below are a few key benefits:</p><ul><li><strong>Enum definition</strong>: The Routes enum lists all the valid screen names. If you ever need to change <code>HomeScreen</code> to something else, you only update it in the enum</li><li><strong>Consistency</strong>: By referencing <code>Routes.Home</code>, you ensure the same name is used everywhere, reducing bugs</li><li><strong>Readability</strong>: It’s easier for someone reading the code to understand what <code>Routes.Home</code> represents compared to a raw string</li></ul><h3 id="_2-handling-theme-colors" tabindex="-1"><a class="header-anchor" href="#_2-handling-theme-colors"><span>2. Handling theme colors</span></a></h3><p>If you’re implementing light and dark themes in your app, you can use an enum to define your color palette instead of hardcoding color values directly in components. This makes it easy to manage and switch themes:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.tsx"><span>App.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token comment">// Define theme colors using an enum</span></span>
<span class="line"><span class="token keyword">enum</span> Colors <span class="token punctuation">{</span></span>
<span class="line">  Primary <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  Secondary <span class="token operator">=</span> <span class="token string">&#39;FFC107&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  BackgroundLight <span class="token operator">=</span> <span class="token string">&#39;FFFFFF&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  BackgroundDark <span class="token operator">=</span> <span class="token string">&#39;121212&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  TextLight <span class="token operator">=</span> <span class="token string">&#39;000000&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  TextDark <span class="token operator">=</span> <span class="token string">&#39;FFFFFF&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Apply colors in a React Native component</span></span>
<span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> View<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> StyleSheet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;reactnative&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> isDarkMode <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// Simulate a dark mode toggle</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span></span>
<span class="line">      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span></span>
<span class="line">        styles<span class="token punctuation">.</span>container<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> isDarkMode <span class="token operator">?</span> Colors<span class="token punctuation">.</span>BackgroundDark <span class="token operator">:</span> Colors<span class="token punctuation">.</span>BackgroundLight <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">}</span></span></span>
<span class="line">    <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span></span>
<span class="line">        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">color</span><span class="token operator">:</span> isDarkMode <span class="token operator">?</span> Colors<span class="token punctuation">.</span>TextDark <span class="token operator">:</span> Colors<span class="token punctuation">.</span>TextLight<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Enums make theme management easy!</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  container<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    flex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    justifyContent<span class="token operator">:</span> <span class="token string">&#39;center&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    alignItems<span class="token operator">:</span> <span class="token string">&#39;center&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The benefits of this include:</p><ul><li><strong>Enum centralization</strong>: The <code>Colors</code> enum contains all the color values used in your app. If you want to update the primary color, you do it once in the enum</li><li><strong>Dynamic styling</strong>: The <code>isDarkMode</code> variable dynamically switches between light and dark themes, with the enum handling the logic cleanly</li><li><strong>Maintainability</strong>: When new colors are added, you can easily extend the <code>Colors</code> enum without touching multiple components</li></ul><h3 id="_3-managing-application-states" tabindex="-1"><a class="header-anchor" href="#_3-managing-application-states"><span>3. Managing application states</span></a></h3>`,21)),s("p",null,[n[30]||(n[30]=a("Enums are also helpful for ")),e(l,{to:"/blog.logrocket.com/comparing-typescript-state-management-solutions.html"},{default:t(()=>n[29]||(n[29]=[s("strong",null,"managing application states",-1)])),_:1,__:[29]}),n[31]||(n[31]=a(", like a form submission process that includes multiple stages (")),n[32]||(n[32]=s("code",null,"idle",-1)),n[33]||(n[33]=a(", ")),n[34]||(n[34]=s("code",null,"submitting",-1)),n[35]||(n[35]=a(", ")),n[36]||(n[36]=s("code",null,"success",-1)),n[37]||(n[37]=a(", or ")),n[38]||(n[38]=s("code",null,"error",-1)),n[39]||(n[39]=a("):"))]),n[70]||(n[70]=o(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="App.tsx"><span>App.tsx</span></div><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token comment">// Define form states as an enum</span></span>
<span class="line"><span class="token keyword">enum</span> FormState <span class="token punctuation">{</span></span>
<span class="line">  Idle <span class="token operator">=</span> <span class="token string">&#39;IDLE&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  Submitting <span class="token operator">=</span> <span class="token string">&#39;SUBMITTING&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  Success <span class="token operator">=</span> <span class="token string">&#39;SUCCESS&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  Error <span class="token operator">=</span> <span class="token string">&#39;ERROR&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Use enums to manage form states</span></span>
<span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> View<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;reactnative&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>formState<span class="token punctuation">,</span> setFormState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>FormState<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>FormState<span class="token punctuation">.</span>Idle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setFormState</span><span class="token punctuation">(</span>FormState<span class="token punctuation">.</span>Submitting<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Simulate an API call</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setFormState</span><span class="token punctuation">(</span>FormState<span class="token punctuation">.</span>Success<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Update state to success</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>formState <span class="token operator">===</span> FormState<span class="token punctuation">.</span>Idle <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>formState <span class="token operator">===</span> FormState<span class="token punctuation">.</span>Submitting <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Submitting...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>formState <span class="token operator">===</span> FormState<span class="token punctuation">.</span>Success <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Form Submitted Successfully!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">      </span><span class="token punctuation">{</span>formState <span class="token operator">===</span> FormState<span class="token punctuation">.</span>Error <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Error Submitting Form</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This makes form states clearer, transitions more predictable, and conditions easier to read. Here’s how:</p><ul><li><strong>State definition</strong> — The FormState enum lists all possible states the form can be in</li><li><strong>Clear transitions</strong> — Using the enum makes state transitions explicit and predictable</li><li><strong>Readable conditions</strong> - Instead of checking <code>formState === &#39;submitting</code>, you check <code>formState === FormState.Submitting</code>, which is easier to understand</li></ul><hr><h2 id="best-practices-for-using-enums" tabindex="-1"><a class="header-anchor" href="#best-practices-for-using-enums"><span>Best practices for using enums</span></a></h2><p>The following tactics will help you make the best use of enums in React Native:</p><h3 id="group-enums-by-feature" tabindex="-1"><a class="header-anchor" href="#group-enums-by-feature"><span>Group enums by feature</span></a></h3><p>Rather than throwing all enums into a single file, organize them based on their purpose. This makes your code easier to navigate and maintain.</p><p>A few examples:</p>`,9)),s("ul",null,[s("li",null,[e(c,{icon:"iconfont icon-typescript"}),n[40]||(n[40]=s("code",null,"Routes.ts",-1)),n[41]||(n[41]=a(" - For screen names in navigation"))]),s("li",null,[e(c,{icon:"iconfont icon-typescript"}),n[42]||(n[42]=s("code",null,"Theme.ts",-1)),n[43]||(n[43]=a(" - For managing theme colors"))]),s("li",null,[e(c,{icon:"iconfont icon-typescript"}),n[44]||(n[44]=s("code",null,"FormStates.ts",-1)),n[45]||(n[45]=a(" - For tracking form submission status"))])]),n[71]||(n[71]=o(`<p>Keeping enums separate prevents clutter and helps avoid unintended dependencies.</p><h3 id="give-preference-to-string-enums" tabindex="-1"><a class="header-anchor" href="#give-preference-to-string-enums"><span>Give preference to string enums</span></a></h3><p>Enums should be stored in well-named files and include comments explaining their purpose. This helps teammates (or your future self) understand them at a glance.</p><p>Example:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="enums/UserRoles.ts"><span>enums/UserRoles.ts</span></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">/**</span>
<span class="line"> * Defines different user roles within the app.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">enum</span> UserRole <span class="token punctuation">{</span></span>
<span class="line">  Admin <span class="token operator">=</span> <span class="token string">&quot;ADMIN&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  Editor <span class="token operator">=</span> <span class="token string">&quot;EDITOR&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  Viewer <span class="token operator">=</span> <span class="token string">&quot;VIEWER&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>This structure makes it clear what the enum is for, without having to dig through unrelated code.</p><h3 id="use-clear-and-consistent-naming-conventions" tabindex="-1"><a class="header-anchor" href="#use-clear-and-consistent-naming-conventions"><span>Use clear and consistent naming conventions</span></a></h3><p>Naming matters. Stick to PascalCase for enum names and UPPER_CASE for values to keep things readable.</p><p>Good practice:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="enums/PaymentStatus.ts"><span>enums/PaymentStatus.ts</span></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">enum</span> PaymentStatus <span class="token punctuation">{</span></span>
<span class="line">  Pending <span class="token operator">=</span> <span class="token string">&quot;PENDING&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  Completed <span class="token operator">=</span> <span class="token string">&quot;COMPLETED&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  Failed <span class="token operator">=</span> <span class="token string">&quot;FAILED&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Bad practice:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="enums/PaymentStatus.ts"><span>enums/PaymentStatus.ts</span></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line highlighted"><span class="token keyword">enum</span> paymentstatus <span class="token punctuation">{</span></span>
<span class="line">  pending <span class="token operator">=</span> <span class="token string">&quot;pending&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  completed <span class="token operator">=</span> <span class="token string">&quot;completed&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  failed <span class="token operator">=</span> <span class="token string">&quot;failed&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Following a naming convention keeps your enums easy to read and reduces confusion.</p><h3 id="use-enums-only-when-the-values-are-fixed-and-unlikely-to-change" tabindex="-1"><a class="header-anchor" href="#use-enums-only-when-the-values-are-fixed-and-unlikely-to-change"><span>Use enums only when the values are fixed and unlikely to change</span></a></h3><p>Enums are best for values that won’t change often. If you expect frequent updates (like a list of product categories from an API), consider using objects or union types instead.</p><p>Good for enums:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="enums/NotificationType.ts"><span>enums/NotificationType.ts</span></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">enum</span> NotificationType <span class="token punctuation">{</span></span>
<span class="line">  Success <span class="token operator">=</span> <span class="token string">&quot;SUCCESS&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  Error <span class="token operator">=</span> <span class="token string">&quot;ERROR&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  Warning <span class="token operator">=</span> <span class="token string">&quot;WARNING&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Bad for enums (better as a dynamic list):</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="enums/NotificationType.ts"><span>enums/NotificationType.ts</span></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">enum</span> ProductCategory <span class="token punctuation">{</span></span>
<span class="line highlighted">  Electronics <span class="token operator">=</span> <span class="token string">&quot;ELECTRONICS&quot;</span><span class="token punctuation">,</span></span>
<span class="line highlighted">  Clothing <span class="token operator">=</span> <span class="token string">&quot;CLOTHING&quot;</span><span class="token punctuation">,</span></span>
<span class="line highlighted">  Home <span class="token operator">=</span> <span class="token string">&quot;HOME&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>If new product categories can be added over time, using an enum makes updates harder.</p><p>By applying these best practices, enums will stay organized, readable, and easy to manage, without adding unnecessary complexity to your code.</p><hr><h2 id="union-types-an-enum-alternative" tabindex="-1"><a class="header-anchor" href="#union-types-an-enum-alternative"><span>Union types: An enum alternative</span></a></h2>`,23)),s("p",null,[n[48]||(n[48]=a("While enums are powerful, they ")),e(l,{to:"/blog.logrocket.com/understanding-discriminated-union-intersection-types-typescript.html"},{default:t(()=>n[46]||(n[46]=[s("strong",null,"aren’t always the best choice",-1)])),_:1,__:[46]}),n[49]||(n[49]=a(". For example, if you have a dynamic set of values or prefer a simpler approach, ")),s("a",q,[e(c,{icon:"iconfont icon-typescript"}),n[47]||(n[47]=a("union types"))]),n[50]||(n[50]=a(" might be a better fit. Union types in TypeScript allow a variable to accept only a predefined set of values, ensuring strict type safety while avoiding runtime overhead:"))]),n[72]||(n[72]=o(`<div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">ScreenRoutes</span> <span class="token operator">=</span> <span class="token string">&quot;HomeScreen&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;ProfileScreen&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;SettingsScreen&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="advantages-of-union-types" tabindex="-1"><a class="header-anchor" href="#advantages-of-union-types"><span>Advantages of union types</span></a></h3><p>There are a few key advantages to using union types:</p>`,3)),e(b,{data:[{id:"Simpler and more lightweight"},{id:"No runtime overhead"},{id:"Easier to extend dynamically"}],active:0},{title0:t(({value:u,isActive:r})=>n[51]||(n[51]=[a("Simpler and more lightweight")])),title1:t(({value:u,isActive:r})=>n[52]||(n[52]=[a("No runtime overhead")])),title2:t(({value:u,isActive:r})=>n[53]||(n[53]=[a("Easier to extend dynamically")])),tab0:t(({value:u,isActive:r})=>n[54]||(n[54]=[s("p",null,"Enums require explicit declarations, additional syntax, and often a separate file for organization. Union types, on the other hand, let you define all valid values directly without extra setup. This makes your code more concise and self-explanatory. Instead of navigating to an enum file to check what values are allowed, union types keep everything in plain sight, making it easier to read and maintain. That makes union types ideal for small sets of values that don’t need complex mappings.",-1)])),tab1:t(({value:u,isActive:r})=>n[55]||(n[55]=[s("p",null,"Enums compile into JavaScript objects, meaning they add extra code that exists at runtime. In most cases, this is negligible. But in performance-sensitive applications, every extra bit of JavaScript matters.",-1),s("p",null,"Union types, on the other hand, only exist in TypeScript. They disappear at runtime, leaving behind just raw string values in the compiled JavaScript. This keeps your app’s bundle size smaller and removes unnecessary processing. Union types, therefore, are ideal for large-scale applications where performance and minimal runtime code are paramount.",-1)])),tab2:t(({value:u,isActive:r})=>n[56]||(n[56]=[s("p",null,"One of the biggest limitations of enums is that they are static; you define them once, and they cannot change dynamically. If your app pulls configurations, categories, or feature flags from an API, enums won’t be flexible enough. Union types, however, can easily integrate with dynamically generated values. This is especially useful when dealing with external data sources that might introduce new options over time.",-1)])),_:1}),n[73]||(n[73]=s("h3",{id:"when-to-use-union-types",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#when-to-use-union-types"},[s("span",null,"When to use union types")])],-1)),n[74]||(n[74]=s("p",null,"Union types are typically best used in two common scenarios:",-1)),n[75]||(n[75]=s("ul",null,[s("li",null,"When the set of values is small and unlikely to grow."),s("li",null,"When you don’t need the additional features of enums (e.g., reverse mapping).")],-1)),n[76]||(n[76]=s("hr",null,null,-1)),n[77]||(n[77]=s("h2",{id:"conclusion",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#conclusion"},[s("span",null,"Conclusion")])],-1)),s("p",null,[n[58]||(n[58]=a("TypeScript enums are an essential tool for creating robust, readable, and maintainable React Native applications. By using enums for navigation routes, ")),s("a",E,[e(c,{icon:"fas fa-globe"}),n[57]||(n[57]=a("color schemes"))]),n[59]||(n[59]=a(", and application states, you can reduce bugs, make your code easier to understand, and simplify updates."))]),n[78]||(n[78]=s("p",null,"With these examples, best practices, and alternatives, you’re ready to start using enums effectively in your React Native projects. Embrace enums, and watch your code become cleaner, safer, and more organized. Happy coding!",-1)),f(" TODO: add ARTICLE CARD "),e(d,m(k({title:"A complete guide to TypeScript enums in React Native",desc:"Learn everything you need to know about using React Context — a great feature that enables you to manage and share state across the React application.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/complete-guide-typescript-enums-react-native.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const F=y(T,[["render",I]]),P=JSON.parse('{"path":"/blog.logrocket.com/complete-guide-typescript-enums-react-native.html","title":"A complete guide to TypeScript enums in React Native","lang":"en-US","frontmatter":{"lang":"en-US","title":"A complete guide to TypeScript enums in React Native","description":"Article(s) > A complete guide to TypeScript enums in React Native","icon":"fa-brands fa-react","category":["Node.js","React.js","typescript","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js","ts","typescript"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"A complete guide to TypeScript enums in React Native\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/complete-guide-typescript-enums-react-native/banner.jpeg\\"],\\"datePublished\\":\\"2025-02-19T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kayode Adeniyi\\",\\"url\\":\\"https://blog.logrocket.com/author/kayodeadeniyi/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/complete-guide-typescript-enums-react-native.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"A complete guide to TypeScript enums in React Native"}],["meta",{"property":"og:description","content":"Article(s) > A complete guide to TypeScript enums in React Native"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/complete-guide-typescript-enums-react-native/banner.jpeg"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/complete-guide-typescript-enums-react-native/banner.jpeg"}],["meta",{"name":"twitter:image:alt","content":"A complete guide to TypeScript enums in React Native"}],["meta",{"property":"article:author","content":"Kayode Adeniyi"}],["meta",{"property":"article:tag","content":"typescript"}],["meta",{"property":"article:tag","content":"ts"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-02-19T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > A complete guide to TypeScript enums in React Native"},{"property":"og:description","content":"A complete guide to TypeScript enums in React Native"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/complete-guide-typescript-enums-react-native.html"}]],"prev":"/programming/js-react/articles/README.md","date":"2025-02-19T00:00:00.000Z","isOriginal":false,"author":[{"name":"Kayode Adeniyi","url":"https://blog.logrocket.com/author/kayodeadeniyi/"}],"cover":"/assets/image/blog.logrocket.com/complete-guide-typescript-enums-react-native/banner.jpeg"},"git":{},"readingTime":{"minutes":8.69,"words":2608},"filePathRelative":"blog.logrocket.com/complete-guide-typescript-enums-react-native.md","copyright":{"author":"Kayode Adeniyi"}}');export{F as comp,P as data};
