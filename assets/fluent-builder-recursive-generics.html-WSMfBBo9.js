import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,d as e,f as r,a as l,t as u,n as m,g,r as n,o as d}from"./app-BVguHYKu.js";const p={},h={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"};function b(i,t){const a=n("VPCard"),s=n("SiteInfo");return d(),c("div",null,[e("h1",h,[e("a",f,[e("span",null,u(i.$frontmatter.title)+" ê´€ë ¨",1)])]),r(a,m(g({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),t[0]||(t[0]=e("nav",{class:"table-of-contents"},[e("ul")],-1)),t[1]||(t[1]=e("hr",null,null,-1)),r(s,{name:"C# Design Patterns - Fluent Builder Interface With Recursive Generics",desc:"In this article you will learn about Fluent Builder with Recursive Generics and how to use this pattern to allow inheritance between Fluent Builders.",url:"https://code-maze.com/fluent-builder-recursive-generics/",logo:"/assets/image/code-maze.com/favicon.png",preview:"/assets/image/fluent-builder-recursive-generics/banner.png"}),l(" TODO: ìž‘ì„± ")])}const R=o(p,[["render",b]]),B=JSON.parse('{"path":"/code-maze.com/fluent-builder-recursive-generics.html","title":"C# Design Patterns - Fluent Builder Interface With Recursive Generics","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"C# Design Patterns - Fluent Builder Interface With Recursive Generics","description":"Article(s) > C# Design Patterns - Fluent Builder Interface With Recursive Generics","icon":"iconfont icon-csharp","category":["C#","Article(s)"],"tag":["blog","code-maze.com","csharp"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C# Design Patterns - Fluent Builder Interface With Recursive Generics\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/fluent-builder-recursive-generics/banner.png\\"],\\"datePublished\\":\\"2022-01-13T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/fluent-builder-recursive-generics.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"C# Design Patterns - Fluent Builder Interface With Recursive Generics"}],["meta",{"property":"og:description","content":"Article(s) > C# Design Patterns - Fluent Builder Interface With Recursive Generics"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/fluent-builder-recursive-generics/banner.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/code-maze.com/fluent-builder-recursive-generics/banner.png"}],["meta",{"name":"twitter:image:alt","content":"C# Design Patterns - Fluent Builder Interface With Recursive Generics"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"code-maze.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-01-13T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > C# Design Patterns - Fluent Builder Interface With Recursive Generics"},{"property":"og:description","content":"C# Design Patterns - Fluent Builder Interface With Recursive Generics"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/code-maze.com/fluent-builder-recursive-generics.html"}]],"prev":"/programming/cs/articles/README.md","date":"2022-01-13T00:00:00.000Z","isOriginal":false,"cover":"/assets/image/code-maze.com/fluent-builder-recursive-generics/banner.png"},"git":{},"readingTime":{"minutes":0.56,"words":168},"filePathRelative":"code-maze.com/fluent-builder-recursive-generics.md"}');export{R as comp,B as data};
