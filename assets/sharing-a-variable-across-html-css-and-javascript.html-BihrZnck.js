import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as n,b as g,a as h,t as v,n as i,g as r,e as t,r as e,o as b}from"./app-BVguHYKu.js";const k={},S={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},y={href:"https://codepen.io/chriscoyier/pen/MYgbXjv",target:"_blank",rel:"noopener noreferrer"};function w(l,a){const o=e("VPCard"),p=e("SiteInfo"),c=e("VPIcon"),d=e("CodePen");return b(),m("div",null,[s("h1",S,[s("a",f,[s("span",null,v(l.$frontmatter.title)+" 관련",1)])]),n(o,i(r({title:"CSS > Article(s)",desc:"Article(s)",link:"/programming/css/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n(o,i(r({title:"JavaScript > Article(s)",desc:"Article(s)",link:"/programming/js/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),a[7]||(a[7]=s("nav",{class:"table-of-contents"},[s("ul")],-1)),a[8]||(a[8]=s("hr",null,null,-1)),n(p,{name:"Sharing a Variable Across HTML, CSS, and JavaScript",desc:"Set a variable in Pug, then create an inline script which sets that variable for using in JavaScript and use setProperty to pass it to CSS.",url:"https://frontendmasters.com/blog/sharing-a-variable-across-html-css-and-javascript/",logo:"https://frontendmasters.com/favicon.ico",preview:"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/4908"}),s("p",null,[a[3]||(a[3]=t("My kid is in a little phase where word search puzzles are really fun. She likes doing them, and then possibly because we share blood, she immediately started to want to ")),a[4]||(a[4]=s("em",null,"make",-1)),a[5]||(a[5]=t(" them. I figured it would be a fun little recreational coding job to build a maker, so I did that: ")),s("a",y,[a[0]||(a[0]=t("Word Search Puzzle Maker (")),n(c,{icon:"fa-brands fa-codepen"}),a[1]||(a[1]=s("code",null,"chriscoyier",-1)),a[2]||(a[2]=t(")"))]),a[6]||(a[6]=t(". It’s not fancy, you just write in your words then a button click will fill in the un-filled spaces with random letters and you’re good to print it out."))]),a[9]||(a[9]=g(`<p>One of the configuration options for the “maker” is how big you want to build the grid. A 10×10 grid is the default, but it’s settable by just <strong>setting a variable in one place</strong>.</p><figure><img src="https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/01/CleanShot-2025-01-08-at-07.18.41%402x.png?resize=1024%2C517&amp;ssl=1" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>It turns out it’s useful to have this variable in all three of the important front-end technologies at play: the HTML, CSS, and JavaScript. The relevant variable here is <code>size</code>, which represents the number of cells across and tall the grid is.</p><ul><li><strong>HTML</strong>: Well, Pug, actually. Pug generates HTML, and having the <code>size</code> there means I can write a loop that generates the number of elements in the grid the way I need.</li><li><strong>CSS</strong>: Having the <code>size</code> there means I can set up the CSS grid with the appropriate columns/rows.</li><li><strong>JavaScript</strong>: By having the <code>size</code> variable available there, I was able to implement arrow key navigation fairly easily which helped the experience of setting new words.</li></ul><p>It all starts with that Pug code, so, ya know, sorry if that’s cheating. But here’s the rub:</p><div class="language-pug line-numbers-mode" data-highlighter="prismjs" data-ext="pug"><pre><code class="language-pug"><span class="line"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span></span>
<span class="line"><span class="token tag">script</span> </span>
<span class="line">  <span class="token punctuation">|</span> window<span class="token punctuation">.</span>size <span class="token punctuation">=</span> #{size};</span>
<span class="line">  <span class="token punctuation">|</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>setProperty(&#39;<span class="token punctuation">--</span>size&#39;, #{size});</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The dash (<code>-</code>) in that Pug code essentially means “this is JavaScript”, and the Node process that runs to create the HTML runs it. That means I can use the variable later to create the grid.</p><div class="language-pug line-numbers-mode" data-highlighter="prismjs" data-ext="pug"><pre><code class="language-pug"><span class="line"><span class="token tag"><span class="token attr-class">.grid</span></span></span>
<span class="line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span></span>
<span class="line">    <span class="token tag"><span class="token attr-class">.letter</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">data-index</span><span class="token punctuation">=</span><span class="token attr-value">i</span><span class="token punctuation">)</span></span></span></span>
<span class="line">      <span class="token tag">input<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">maxlength</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token number">1</span></span><span class="token punctuation">,</span> <span class="token attr-name">matches</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">&quot;[A-Za-z]&quot;</span></span><span class="token punctuation">)</span></span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The variable gets passed from Pug into client-side JavaScript by making a script tag and creating a variable off the <code>window</code> object. A little variable interpolation makes that possible.</p><p>The variable gets passed to CSS in a similar fashion, using client-side JavaScript to call <code>setProperty</code> on the <code>documentElement</code>. That CSS custom property will then cascade to wherever we need it. I can use it on another element like this:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">.grid</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--size<span class="token punctuation">)</span><span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s it really. I just got a kick out of setting a variable in one place and making use of it in three languages.</p>`,12)),n(d,{user:"chriscoyier","slug-hash":"MYgbXjv",title:"Word Search Puzzle Maker","default-tab":["css","result"],theme:l.$isDarkmode?"dark":"light"},null,8,["theme"]),a[10]||(a[10]=s("p",null,[t("Try changing the "),s("code",null,"size"),t(" above.")],-1)),h(" TODO: add ARTICLE CARD "),n(o,i(r({title:"Sharing a Variable Across HTML, CSS, and JavaScript",desc:"Set a variable in Pug, then create an inline script which sets that variable for using in JavaScript and use setProperty to pass it to CSS.",link:"https://chanhi2000.github.io/bookshelf/frontendmasters.com/sharing-a-variable-across-html-css-and-javascript.html",logo:"https://frontendmasters.com/favicon.ico",background:"rgba(188,75,52,0.2)"})),null,16)])}const T=u(k,[["render",w]]),j=JSON.parse('{"path":"/frontendmasters.com/sharing-a-variable-across-html-css-and-javascript.html","title":"Sharing a Variable Across HTML, CSS, and JavaScript","lang":"en-US","frontmatter":{"lang":"en-US","title":"Sharing a Variable Across HTML, CSS, and JavaScript","description":"Article(s) > Sharing a Variable Across HTML, CSS, and JavaScript","icon":"fa-brands fa-css3-alt","category":["CSS","JavaScript","Pug","Article(s)"],"tag":["blog","frontendmasters.com","css","js","javascript","pug"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Sharing a Variable Across HTML, CSS, and JavaScript\\",\\"image\\":[\\"https://i0.wp.com/frontendmasters.com/blog/wp-content/uploads/2025/01/CleanShot-2025-01-08-at-07.18.41%402x.png?resize=1024%2C517&ssl=1\\"],\\"datePublished\\":\\"2025-01-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chris Coyier\\",\\"url\\":\\"https://frontendmasters.com/blog/author/chriscoyier/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/sharing-a-variable-across-html-css-and-javascript.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"Sharing a Variable Across HTML, CSS, and JavaScript"}],["meta",{"property":"og:description","content":"Article(s) > Sharing a Variable Across HTML, CSS, and JavaScript"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/4908"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/4908"}],["meta",{"name":"twitter:image:alt","content":"Sharing a Variable Across HTML, CSS, and JavaScript"}],["meta",{"property":"article:author","content":"Chris Coyier"}],["meta",{"property":"article:tag","content":"pug"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"frontendmasters.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-01-08T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > Sharing a Variable Across HTML, CSS, and JavaScript"},{"property":"og:description","content":"Sharing a Variable Across HTML, CSS, and JavaScript"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/frontendmasters.com/sharing-a-variable-across-html-css-and-javascript.html"}]],"prev":"/programming/css/articles/README.md","date":"2025-01-08T00:00:00.000Z","isOriginal":false,"author":[{"name":"Chris Coyier","url":"https://frontendmasters.com/blog/author/chriscoyier/"}],"cover":"https://frontendmasters.com/blog/wp-json/social-image-generator/v1/image/4908"},"git":{},"readingTime":{"minutes":2.5,"words":750},"filePathRelative":"frontendmasters.com/sharing-a-variable-across-html-css-and-javascript.md","copyright":{"author":"Chris Coyier"}}');export{T as comp,j as data};
