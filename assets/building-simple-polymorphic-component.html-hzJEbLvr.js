import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as a,b as o,t as u,n as g,g as d,e as t,r as e,o as k}from"./app-BVguHYKu.js";const y="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/using-capitalized-variable.png",h="/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/different-rendered-elements.jpeg",b={},f={id:"frontmatter-title-á„€á…ªá†«á„…á…§á†«",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-á„€á…ªá†«á„…á…§á†«"},w={href:"https://reactjs.org/docs/jsx-in-depth.html#choosing-the-type-at-runtime",target:"_blank",rel:"noopener noreferrer"};function x(p,n){const l=e("VPCard"),c=e("SiteInfo"),i=e("VPIcon");return k(),m("div",null,[s("h1",f,[s("a",v,[s("span",null,u(p.$frontmatter.title)+" ê´€ë ¨",1)])]),a(l,g(d({title:"Build strongly typed polymorphic components with React and TypeScript",desc:"Learn how to build strongly typed polymorphic React components with TypeScript, using familiar Chakra UI and MUI component props as guides.",link:"/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/README.md",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16),n[3]||(n[3]=s("nav",{class:"table-of-contents"},[s("ul")],-1)),n[4]||(n[4]=s("hr",null,null,-1)),a(c,{name:"Build strongly typed polymorphic components with React and TypeScript",desc:"Learn how to build strongly typed polymorphic React components with TypeScript, using familiar Chakra UI and MUI component props as guides.",url:"https://blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript#building-simple-polymorphic-component",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}),n[5]||(n[5]=o(`<p>Contrary to what you may think, building your first polymorphic component is quite straightforward. Hereâ€™s a basic implementation:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token keyword">as</span> <span class="token operator">||</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Component</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note here that the polymorphic prop <code>as</code> is similar to Chakra UIâ€™s. This is the prop we expose to control the render element of the polymorphic component.</p><p>Secondly, note that the <code>as</code> prop isnâ€™t rendered directly. The following would be wrong:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token keyword">as</span><span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// wrong render below ðŸ‘‡ </span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>as</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>as</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),s("p",null,[n[1]||(n[1]=t("When ")),s("a",w,[a(i,{icon:"fas fa-globe"}),n[0]||(n[0]=t("rendering an element type at runtime"))]),n[2]||(n[2]=t(", you must first assign it to a capitalized variable, and then render the capitalized variable."))]),n[6]||(n[6]=o('<figure><img src="'+y+`" alt="Using A Capitalized Variable" tabindex="0" loading="lazy"><figcaption>Using A Capitalized Variable</figcaption></figure><p>Now you can go ahead and use this component as follows:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello Polymorphic!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello Polymorphic!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>span<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello Polymorphic!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>em<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello Polymorphic!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the different <code>as</code> prop is passed to the rendered components above.</p><figure><img src="`+h+'" alt="The Different Rendered Elements" tabindex="0" loading="lazy"><figcaption>The Different Rendered Elements</figcaption></figure>',5))])}const S=r(b,[["render",x]]),T=JSON.parse('{"path":"/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/building-simple-polymorphic-component.html","title":"Building a simple polymorphic component","lang":"en-US","frontmatter":{"lang":"en-US","title":"Building a simple polymorphic component","description":"Article(s) > (2/10) Build strongly typed polymorphic components with React and TypeScript","category":["Node.js","React.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","react","reactjs","react-js"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Building a simple polymorphic component\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/using-capitalized-variable.png\\",\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/different-rendered-elements.jpeg\\"],\\"datePublished\\":\\"2022-05-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ohans Emmanuel\\",\\"url\\":\\"https://blog.logrocket.com/author/ohansemmanuel/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/building-simple-polymorphic-component.html"}],["meta",{"property":"og:site_name","content":"ðŸ“šBookshelf"}],["meta",{"property":"og:title","content":"Building a simple polymorphic component"}],["meta",{"property":"og:description","content":"Article(s) > (2/10) Build strongly typed polymorphic components with React and TypeScript"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"}],["meta",{"name":"twitter:image:alt","content":"Building a simple polymorphic component"}],["meta",{"property":"article:author","content":"Ohans Emmanuel"}],["meta",{"property":"article:tag","content":"react-js"}],["meta",{"property":"article:tag","content":"reactjs"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-05-25T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > (2/10) Build strongly typed polymorphic components with React and TypeScript"},{"property":"og:description","content":"Building a simple polymorphic component"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript//building-simple-polymorphic-component.html"}]],"date":"2022-05-25T00:00:00.000Z","isOriginal":false,"author":[{"name":"Ohans Emmanuel","url":"https://blog.logrocket.com/author/ohansemmanuel/"}],"cover":"/assets/image/blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/banner.png"},"git":{},"readingTime":{"minutes":1.37,"words":410},"filePathRelative":"blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/building-simple-polymorphic-component.md","copyright":{"author":"Ohans Emmanuel"}}');export{S as comp,T as data};
