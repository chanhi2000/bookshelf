import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,d as n,f as e,b as l,a as b,t as f,n as d,g as k,w as t,e as a,r as c,o as y}from"./app-BVguHYKu.js";const x={},w={id:"frontmatter-title-관련",tabindex:"-1"},q={class:"header-anchor",href:"#frontmatter-title-관련"},j={class:"table-of-contents"},A={class:"hint-container note"},T={href:"https://blog.logrocket.com/author/rahulchhodde/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://npmjs.com/package/axios#response-schema",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/axios/axios/blob/main/examples/upload/index.html",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/rikmms/progress-bar-4-axios/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://stackblitz.com/edit/vitejs-vite-5hvjuf?file=src%2Futils%2Fapi.js",target:"_blank",rel:"noopener noreferrer"},R={href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_FormData_Objects",target:"_blank",rel:"noopener noreferrer"},F={href:"https://stackblitz.com/edit/vitejs-vite-7yesynt7?file=src%2FComponents%2FFileUploadBox.jsx",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/axios/axios",target:"_blank",rel:"noopener noreferrer"};function I(m,s){const r=c("VPCard"),p=c("router-link"),o=c("SiteInfo"),i=c("VPIcon"),v=c("VidStack"),u=c("RouteLink");return y(),g("div",null,[n("h1",w,[n("a",q,[n("span",null,f(m.$frontmatter.title)+" 관련",1)])]),e(r,d(k({title:"Node.js > Article(s)",desc:"Article(s)",link:"/programming/js-node/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n("nav",j,[n("ul",null,[n("li",null,[e(p,{to:"#why-use-axios"},{default:t(()=>s[0]||(s[0]=[a("Why use Axios?")])),_:1,__:[0]})]),n("li",null,[e(p,{to:"#installing-axios"},{default:t(()=>s[1]||(s[1]=[a("Installing Axios")])),_:1,__:[1]})]),n("li",null,[e(p,{to:"#how-to-make-an-axios-post-request"},{default:t(()=>s[2]||(s[2]=[a("How to make an Axios POST request")])),_:1,__:[2]})]),n("li",null,[e(p,{to:"#shorthand-methods-for-axios-http-requests"},{default:t(()=>s[3]||(s[3]=[a("Shorthand methods for Axios HTTP requests")])),_:1,__:[3]})]),n("li",null,[e(p,{to:"#what-does-axios-post-return"},{default:t(()=>s[4]||(s[4]=[a("What does axios.post return?")])),_:1,__:[4]})]),n("li",null,[e(p,{to:"#using-axios-with-async-and-await"},{default:t(()=>s[5]||(s[5]=[a("Using Axios with async and await")])),_:1,__:[5]})]),n("li",null,[e(p,{to:"#using-promise-all-to-send-multiple-requests"},{default:t(()=>s[6]||(s[6]=[a("Using Promise.all to send multiple requests")])),_:1,__:[6]})]),n("li",null,[e(p,{to:"#sending-custom-headers-with-axios"},{default:t(()=>s[7]||(s[7]=[a("Sending custom headers with Axios")])),_:1,__:[7]})]),n("li",null,[e(p,{to:"#axios-timeout-settings"},{default:t(()=>s[8]||(s[8]=[a("Axios timeout settings")])),_:1,__:[8]})]),n("li",null,[e(p,{to:"#post-json-with-axios"},{default:t(()=>s[9]||(s[9]=[a("POST JSON with Axios")])),_:1,__:[9]})]),n("li",null,[e(p,{to:"#transforming-requests-and-responses"},{default:t(()=>s[10]||(s[10]=[a("Transforming requests and responses")])),_:1,__:[10]})]),n("li",null,[e(p,{to:"#intercepting-requests-and-responses"},{default:t(()=>s[11]||(s[11]=[a("Intercepting requests and responses")])),_:1,__:[11]}),n("ul",null,[n("li",null,[e(p,{to:"#what-are-axios-interceptors"},{default:t(()=>s[12]||(s[12]=[a("What are Axios interceptors?")])),_:1,__:[12]})])])]),n("li",null,[e(p,{to:"#client-side-support-for-protection-against-xsrf"},{default:t(()=>s[13]||(s[13]=[a("Client-side support for protection against XSRF")])),_:1,__:[13]})]),n("li",null,[e(p,{to:"#monitoring-post-request-progress"},{default:t(()=>s[14]||(s[14]=[a("Monitoring POST request progress")])),_:1,__:[14]})]),n("li",null,[e(p,{to:"#canceling-requests-with-axios"},{default:t(()=>s[15]||(s[15]=[a("Canceling requests with Axios")])),_:1,__:[15]})]),n("li",null,[e(p,{to:"#axios-error-handling"},{default:t(()=>s[16]||(s[16]=[a("Axios error handling")])),_:1,__:[16]}),n("ul",null,[n("li",null,[e(p,{to:"#how-to-use-axios-interceptors-to-handle-api-error-responses"},{default:t(()=>s[17]||(s[17]=[a("How to use Axios interceptors to handle API error responses")])),_:1,__:[17]})])])]),n("li",null,[e(p,{to:"#how-to-post-a-file-from-a-form-with-axios"},{default:t(()=>s[18]||(s[18]=[a("How to post a file from a form with Axios")])),_:1,__:[18]})]),n("li",null,[e(p,{to:"#popular-axios-libraries"},{default:t(()=>s[19]||(s[19]=[a("Popular Axios libraries")])),_:1,__:[19]})]),n("li",null,[e(p,{to:"#wrapping-up"},{default:t(()=>s[20]||(s[20]=[a("Wrapping up")])),_:1,__:[20]})])])]),s[81]||(s[81]=n("hr",null,null,-1)),e(o,{name:"How to make HTTP requests with Axios",desc:"Learn how to make HTTP requests with Axios, from POST requests to Axios interceptors, using examples for efficient API communication.",url:"https://blog.logrocket.com/http-requests-axios",logo:"/assets/image/blog.logrocket.com/favicon.png",preview:"/assets/image/blog.logrocket.com/http-requests-axios/banner.png"}),n("div",A,[s[24]||(s[24]=n("p",{class:"hint-container-title"},"Editor's note",-1)),n("p",null,[s[22]||(s[22]=a("This article was last updated by ")),n("a",T,[e(i,{icon:"fas fa-globe"}),s[21]||(s[21]=a("Rahul Chhodde"))]),s[23]||(s[23]=a(" on 27 November 2024 to introduce Axios interceptors and how to use them to handle API error responses, as well as to cover how to post a file from a form using Axios."))])]),s[82]||(s[82]=n("p",null,[a("Axios is a client HTTP API based on the "),n("code",null,"XMLHttpRequest"),a(" interface provided by browsers. In this tutorial, we’ll demonstrate how to make HTTP requests using Axios with clear examples, including how to make an Axios POST request with "),n("code",null,"axios.post()"),a(", how to send multiple requests simultaneously with "),n("code",null,"Promise.all"),a(", and much more.")],-1)),s[83]||(s[83]=n("p",null,"If you’re more of a visual learner, check out the video tutorial below. Note that it is a few years old and may not reflect the most current information:",-1)),e(v,{src:"youtube/rzGGK7BHCAA"}),s[84]||(s[84]=n("hr",null,null,-1)),s[85]||(s[85]=n("h2",{id:"why-use-axios",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#why-use-axios"},[n("span",null,"Why use Axios?")])],-1)),n("p",null,[s[26]||(s[26]=a("The most common way for frontend programs to communicate with servers is through the HTTP protocol. You are probably familiar with the ")),e(u,{to:"/blog.logrocket.com/fetch-api-node-js.html"},{default:t(()=>s[25]||(s[25]=[n("strong",null,"Fetch API",-1)])),_:1,__:[25]}),s[27]||(s[27]=a(" and the ")),s[28]||(s[28]=n("code",null,"XMLHttpRequest",-1)),s[29]||(s[29]=a(" interface, which allows you to fetch resources and make HTTP requests."))]),n("p",null,[s[31]||(s[31]=a("If you’re using a JavaScript library, chances are it comes with a client HTTP API. ")),e(u,{to:"/blog.logrocket.com/the-history-and-legacy-of-jquery.html"},{default:t(()=>s[30]||(s[30]=[n("strong",null,"jQuery’s",-1)])),_:1,__:[30]}),s[32]||(s[32]=a()),s[33]||(s[33]=n("code",null,"$.ajax()",-1)),s[34]||(s[34]=a(" function, for example, has been particularly popular with frontend developers. But as developers move away from such libraries in favor of native APIs, dedicated HTTP clients have emerged to fill the gap."))]),s[86]||(s[86]=l(`<p>As with Fetch, Axios is promise-based. However, it provides a more powerful and flexible feature set. Why use Axios over the native Fetch API?</p><ul><li>Request and response interception</li><li>Streamlined error handling</li><li>Protection against XSRF</li><li>Support for upload progress</li><li>Support for older browsers</li><li>Automatic JSON data transformation</li></ul><hr><h2 id="installing-axios" tabindex="-1"><a class="header-anchor" href="#installing-axios"><span>Installing Axios</span></a></h2><p>You can install Axios using the following command for npm, Yarn, and pnpm, respectively:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">npm</span> <span class="token function">install</span> axios</span>
<span class="line"><span class="token function">yarn</span> <span class="token function">add</span> axios</span>
<span class="line"><span class="token function">pnpm</span> <span class="token function">add</span> axios</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To install Axios using a content delivery network (CDN), run the following:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/axios/dist/axios.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="how-to-make-an-axios-post-request" tabindex="-1"><a class="header-anchor" href="#how-to-make-an-axios-post-request"><span>How to make an Axios POST request</span></a></h2><p>Making an HTTP request is as easy as passing a config object to the <code>axios</code> function. You can make a POST request using Axios to “post” data to a given endpoint and trigger events. To perform an HTTP POST request in Axios, call <code>axios.post()</code>.</p><p>Making a POST request in Axios requires two parameters: the URI of the service endpoint and an object that contains the properties you wish to send to the server.</p><p>For a simple Axios POST request, the config object must have a <code>url</code> property. If no method is provided, <code>GET</code> will be used as the default value.</p><p>Let’s look at a simple Axios POST example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// send a POST request</span></span>
<span class="line"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;Finn&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;Williams&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This should look familiar to those who have worked with jQuery’s <code>$.ajax</code> function. This code instructs Axios to send a POST request to <code>/login</code> with an object of key-value pairs as its data. Axios will automatically convert the data to JSON and send it as the request body.</p><hr><h2 id="shorthand-methods-for-axios-http-requests" tabindex="-1"><a class="header-anchor" href="#shorthand-methods-for-axios-http-requests"><span>Shorthand methods for Axios HTTP requests</span></a></h2><p>Axios also provides a set of shorthand methods for performing different types of requests. The methods include:</p><ul><li><code>axios.request(config)</code></li><li><code>axios.get(url[, config])</code></li><li><code>axios.delete(url[, config])</code></li><li><code>axios.head(url[, config])</code></li><li><code>axios.options(url[, config])</code></li><li><code>axios.post(url[, data[, config]])</code></li><li><code>axios.put(url[, data[, config]])</code></li><li><code>axios.patch(url[, data[, config]])</code></li></ul><p>For example, the following code shows how the previous example could be written using the <code>axios.post()</code> method:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;Finn&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;Williams&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="what-does-axios-post-return" tabindex="-1"><a class="header-anchor" href="#what-does-axios-post-return"><span>What does <code>axios.post</code> return?</span></a></h2><p>Once an HTTP POST request is made, Axios returns a promise that is either fulfilled or rejected, depending on the response from the backend service.</p><p>To handle the result, you can use the <code>then()</code> method, like this:</p><p>axios.post(&#39;/login&#39;, { firstName: &#39;Finn&#39;, lastName: &#39;Williams&#39; }) .then((response) =&gt; { console.log(response); }, (error) =&gt; { console.log(error); });</p>`,27)),n("p",null,[s[38]||(s[38]=a("If the promise is fulfilled, the first argument of ")),s[39]||(s[39]=n("code",null,"then()",-1)),s[40]||(s[40]=a(" will be called; if the promise is rejected, the second argument will be called. According to the ")),n("a",P,[s[35]||(s[35]=a("Axios documentation (")),e(i,{icon:"fa-brands fa-npm"}),s[36]||(s[36]=n("code",null,"axios",-1)),s[37]||(s[37]=a(")"))]),s[41]||(s[41]=a(", the fulfillment value is an object containing the following properties:"))]),s[87]||(s[87]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token punctuation">{</span> </span>
<span class="line">  <span class="token comment">// \`data\` is the response that was provided by the server</span></span>
<span class="line">  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// \`status\` is the HTTP status code from the server response</span></span>
<span class="line">  <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// \`statusText\` is the HTTP status message from the server response</span></span>
<span class="line">  <span class="token literal-property property">statusText</span><span class="token operator">:</span> <span class="token string">&#39;OK&#39;</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// \`headers\` the headers that the server responded with </span></span>
<span class="line">  <span class="token comment">// All header names are lower cased</span></span>
<span class="line">  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// \`config\` is the config that was provided to \`axios\` for the request</span></span>
<span class="line">  <span class="token literal-property property">config</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> </span>
<span class="line">  <span class="token comment">// \`request\` is the request that generated this response </span></span>
<span class="line">  <span class="token comment">// It is the last ClientRequest instance in node.js (in redirects) </span></span>
<span class="line">  <span class="token comment">// and an XMLHttpRequest instance the browser</span></span>
<span class="line">  <span class="token literal-property property">request</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As an example, here’s how the response looks when requesting data from the GitHub API:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.github.com/users/mapbox&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// =&gt; {login: &quot;mapbox&quot;, id: 600935, node_id: &quot;MDEyOk9yZ2FuaXphdGlvbjYwMDkzNQ==&quot;, avatar_url: &quot;https://avatars1.githubusercontent.com/u/600935?v=4&quot;, gravatar_id: &quot;&quot;, …} </span></span>
<span class="line"><span class="token comment">// =&gt; 200 </span></span>
<span class="line"><span class="token comment">// =&gt; OK </span></span>
<span class="line"><span class="token comment">// =&gt; {x-ratelimit-limit: &quot;60&quot;, x-github-media-type: &quot;github.v3&quot;, x-ratelimit-remaining: &quot;60&quot;, last-modified: &quot;Wed, 01 Aug 2018 02:50:03 GMT&quot;, etag: &quot;W/&quot;3062389570cc468e0b474db27046e8c9&quot;&quot;, …}</span></span>
<span class="line"><span class="token comment">// =&gt; {adapter: ƒ, transformRequest: {…}, transformResponse: {…}, timeout: 0, xsrfCookieName: &quot;XSRF-TOKEN&quot;, …}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="using-axios-with-async-and-await" tabindex="-1"><a class="header-anchor" href="#using-axios-with-async-and-await"><span>Using Axios with <code>async</code> and <code>await</code></span></a></h2><p>The <code>async</code> and <code>await</code> syntax is syntactic sugar around the Promise API. It helps you write cleaner, more readable, and maintainable code. With <code>async</code> and <code>await</code>, your codebase feels synchronous and easier to think about.</p><p>When using <code>async</code> and <code>await</code>, you invoke <code>axios</code> or one of its request methods inside an asynchronous function, like in the example below:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com/users/mapbox&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token comment">// Handle error console.error(error); </span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When using the <code>async</code> and <code>await</code> syntax, it’s standard practice to wrap your code in a <code>try...catch</code> block. Doing so will ensure you appropriately handle errors and provide feedback for a better user experience.</p><hr><h2 id="using-promise-all-to-send-multiple-requests" tabindex="-1"><a class="header-anchor" href="#using-promise-all-to-send-multiple-requests"><span>Using <code>Promise.all</code> to send multiple requests</span></a></h2><p>You can use Axios with <code>Promise.all</code> to make multiple requests in parallel by passing an iterable of promises to it. The <code>Promise.all</code> static method returns a single promise object that fulfills only when all input promises have been fulfilled.</p><p>Here’s a simple example of how to use <code>Promise.all</code> to make simultaneous HTTP requests:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// execute simultaneous requests</span></span>
<span class="line">Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">  axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com/users/mapbox&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com/users/phantomjs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token comment">//this will be executed only when all requests are complete </span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Date created: &quot;</span><span class="token punctuation">,</span> user1<span class="token punctuation">.</span>data<span class="token punctuation">.</span>created_at<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Date created: &quot;</span><span class="token punctuation">,</span> user2<span class="token punctuation">.</span>data<span class="token punctuation">.</span>created_at<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// =&gt; Date created:  2011-02-04T19:02:13Z </span></span>
<span class="line"><span class="token comment">// =&gt; Date created:  2017-04-03T17:25:46Z</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This code makes two requests to the GitHub API and then logs the value of the <code>created_at</code> property of each response to the console. Keep in mind that if any of the input promises are rejected, the entire promise will immediately be rejected, returning the error from the first promise that encountered a rejection.</p><hr><h2 id="sending-custom-headers-with-axios" tabindex="-1"><a class="header-anchor" href="#sending-custom-headers-with-axios"><span>Sending custom headers with Axios</span></a></h2><p>Sending custom headers with Axios is straightforward. Simply pass an object containing the headers as the last argument. For example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;X-Custom-Header&#39;</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/save&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="axios-timeout-settings" tabindex="-1"><a class="header-anchor" href="#axios-timeout-settings"><span>Axios timeout settings</span></a></h2><p>When making a network request to a server, it is not uncommon to experience delays when the server takes too long to respond. It is standard practice to timeout an operation and provide an appropriate error message if a response takes too long. This ensures a better user experience when the server is experiencing downtime or a higher load than usual.</p><p>With Axios, you can use the <code>timeout</code> property of your <code>config</code> object to set the waiting time before timing out a network request. Its value is the waiting duration in milliseconds. The request is aborted if Axios doesn’t receive a response within the timeout duration. The default value of the <code>timeout</code> property is <code>0</code> milliseconds (no timeout).</p><p>You can check for the <code>ECONNABORTED</code> error code and take appropriate action when the request times out:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&quot;https://jsonplaceholder.typicode.com&quot;</span><span class="token punctuation">,</span> </span>
<span class="line">  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;/todos/1&quot;</span><span class="token punctuation">,</span> </span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> </span>
<span class="line">  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">&quot;ECONNABORTED&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Request timed out&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also timeout a network request using the <code>AbortSignal.timeout</code> static method. It takes the timeout as an argument in milliseconds and returns an <code>AbortSignal</code> instance. You need to set it as the value of the <code>signal</code> property.</p><p>The network request aborts when the timeout expires. Axios sets the value of <code>error.code</code> to <code>ERR_CANCELED</code> and <code>error.message</code> to <code>canceled</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> abortSignal <span class="token operator">=</span> AbortSignal<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&quot;https://jsonplaceholder.typicode.com&quot;</span><span class="token punctuation">,</span> </span>
<span class="line">  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;/todos/1&quot;</span><span class="token punctuation">,</span> </span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> </span>
<span class="line">  <span class="token literal-property property">signal</span><span class="token operator">:</span> abortSignal<span class="token punctuation">,</span> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">&quot;ERR_CANCELED&quot;</span> <span class="token operator">&amp;&amp;</span> abortSignal<span class="token punctuation">.</span>aborted<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Request timed out&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="post-json-with-axios" tabindex="-1"><a class="header-anchor" href="#post-json-with-axios"><span>POST JSON with Axios</span></a></h2><p>Axios automatically serializes JavaScript objects to JSON when passed to the <code>axios.post</code> function as the second parameter. This eliminates the need to serialize POST bodies to JSON.</p><p>Axios also sets the <code>Content-Type</code> header to <code>application/json</code>. This enables web frameworks to automatically parse the data:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// A sample JavaScript object to be sent using Axios</span></span>
<span class="line"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Jane&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// The \`data\` object will be automatically converted to JSON</span></span>
<span class="line">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/api/users&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to send a preserialized JSON string to <code>axios.post()</code> JSON, you’ll need to make sure the <code>Content-Type</code> header is set:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// A pre-serialized JSON string</span></span>
<span class="line"><span class="token keyword">const</span> jsonData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">33</span> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment">// Need to manually set Content-Type here</span></span>
<span class="line">axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/api/users&#39;</span><span class="token punctuation">,</span> jsonData<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="transforming-requests-and-responses" tabindex="-1"><a class="header-anchor" href="#transforming-requests-and-responses"><span>Transforming requests and responses</span></a></h2><p>Although Axios automatically converts requests and responses to JSON by default, it also allows you to override the default behavior and define a different transformation mechanism. This is particularly useful when working with an API that accepts only a specific data format, such as XML or CSV.</p><p>To change request data before sending it to the server, set the <code>transformRequest</code> property in the config object. Note that this method only works for <code>PUT</code>, <code>POST</code>, <code>DELETE</code>, and <code>PATCH</code> request methods.</p><p>Here’s an example of how to use <code>transformRequest</code> in Axios to transform JSON data into XML data and post it:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;Finn&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;Williams&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">transformRequest</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token comment">// Convert to XML</span></span>
<span class="line">    <span class="token keyword">const</span> xmlData <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="line">      &lt;user&gt;</span>
<span class="line">      &lt;firstName&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/firstName&gt;</span>
<span class="line">      &lt;lastName&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/lastName&gt;</span>
<span class="line">    &lt;/user&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> </span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Set the Content-Type header to XML</span></span>
<span class="line">    headers<span class="token punctuation">[</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;application/xml&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> xmlData<span class="token punctuation">;</span> </span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// send the request axios(options);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To modify the data before passing it to <code>then()</code> or <code>catch()</code>, you can set the <code>transformResponse</code> property. Leveraging both the <code>transformRequest</code> and <code>transformResponse</code>, here’s an example that transforms JSON data to CSV, posts it, and then turns the received response into JSON to use on the client:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;Finn&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;Williams&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">transformRequest</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> headers</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token comment">// Convert to CSV</span></span>
<span class="line">    <span class="token keyword">const</span> csvData <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">firstName,lastName\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Set the Content-Type header to CSV</span></span>
<span class="line">    headers<span class="token punctuation">[</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;text/csv&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> csvData<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">transformResponse</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// If server responds with CSV, parse it</span></span>
<span class="line">    <span class="token keyword">const</span> rows <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> headers <span class="token operator">=</span> rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> values <span class="token operator">=</span> rows<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span> </span>
<span class="line">      <span class="token punctuation">[</span>headers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> </span>
<span class="line">      <span class="token punctuation">[</span>headers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span> </span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment">// send the request </span></span>
<span class="line"><span class="token function">axios</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="intercepting-requests-and-responses" tabindex="-1"><a class="header-anchor" href="#intercepting-requests-and-responses"><span>Intercepting requests and responses</span></a></h2><p>HTTP interception is a popular feature of Axios. With this feature, you can examine and change HTTP requests from your program to the server and vice versa, which is very useful for a variety of implicit tasks, such as logging and authentication.</p><h3 id="what-are-axios-interceptors" tabindex="-1"><a class="header-anchor" href="#what-are-axios-interceptors"><span>What are Axios interceptors?</span></a></h3><p>Axios interceptors are functions that can be executed before a request is sent or after a response is received through Axios. There are two types of interceptor methods in Axios: request and response.</p><p>At first glance, interceptors look very much like transforms, but they differ in one key way: unlike transforms, which only receive the data and headers as arguments, interceptors receive the entire response object or request config.</p><p>You can declare a request interceptor in Axios like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// declare a request interceptor</span></span>
<span class="line">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// perform a task before the request is sent </span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Request was sent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> config<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// handle the error</span></span>
<span class="line">  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// sent a GET request</span></span>
<span class="line">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.github.com/users/mapbox&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>created_at<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This code logs a message to the console whenever a request is sent and then waits until it gets a response from the server, at which point it prints the time the account was created at GitHub to the console. One advantage of using interceptors is that you no longer have to implement tasks for each HTTP request separately.</p><p>Axios also provides a response interceptor, which allows you to transform the responses from a server on their way back to the application. For example, here’s how to catch errors in an interceptor with Axios:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// declare a response interceptor</span></span>
<span class="line">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do something with the response data</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Response was received&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> response<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// handle the response error return Promise.reject(error);</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// sent a GET request</span></span>
<span class="line">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.github.com/users/mapbox&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>created_at<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="client-side-support-for-protection-against-xsrf" tabindex="-1"><a class="header-anchor" href="#client-side-support-for-protection-against-xsrf"><span>Client-side support for protection against XSRF</span></a></h2><p>Cross-site request forgery (or XSRF for short) is a method of attacking a web-hosted app in which the attacker disguises themself as a legal and trusted user to influence the interaction between the app and the user’s browser. There are many ways to execute such an attack, including <code>XMLHttpRequest</code>.</p>`,57)),n("p",null,[s[43]||(s[43]=a("Fortunately, Axios is designed to ")),e(u,{to:"/blog.logrocket.com/protecting-next-js-apps-csrf-attacks.html"},{default:t(()=>s[42]||(s[42]=[n("strong",null,"protect against XSRF",-1)])),_:1,__:[42]}),s[44]||(s[44]=a(" by allowing you to embed additional authentication data when making requests. This enables the server to discover requests from unauthorized locations."))]),s[88]||(s[88]=l(`<p>Here’s how this can be done with Axios:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">xsrfCookieName</span><span class="token operator">:</span> <span class="token string">&#39;XSRF-TOKEN&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">xsrfHeaderName</span><span class="token operator">:</span> <span class="token string">&#39;X-XSRF-TOKEN&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment">// send the request</span></span>
<span class="line"><span class="token function">axios</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="monitoring-post-request-progress" tabindex="-1"><a class="header-anchor" href="#monitoring-post-request-progress"><span>Monitoring POST request progress</span></a></h2>`,4)),n("p",null,[s[51]||(s[51]=a("Another interesting feature of Axios is the ability to monitor request progress. This is especially useful when downloading or uploading large files. The ")),n("a",S,[s[45]||(s[45]=a("example provided (")),e(i,{icon:"iconfont icon-github"}),s[46]||(s[46]=n("code",null,"axios/axios",-1)),s[47]||(s[47]=a(")"))]),s[52]||(s[52]=a(" in the Axios documentation gives you a good idea of how that can be done. But for the sake of simplicity and style, we are going to use the ")),n("a",H,[s[48]||(s[48]=a("Axios Progress Bar (")),e(i,{icon:"iconfont icon-github"}),s[49]||(s[49]=n("code",null,"rikmms/progress-bar-4-axios",-1)),s[50]||(s[50]=a(")"))]),s[53]||(s[53]=a(" module in this tutorial."))]),s[89]||(s[89]=l(`<p>The first thing we need to do to use this module is to include the related style and script:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.rawgit.com/rikmms/progress-bar-4-axios/0a3acf92/dist/nprogress.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.rawgit.com/rikmms/progress-bar-4-axios/0a3acf92/dist/index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then we can implement the progress bar like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">loadProgressBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;https://media.giphy.com/media/C6JQPEUsZUyVq/giphy.gif&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">downloadFile</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">downloadFile</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To change the default styling of the progress bar, we can override the following style rules:</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code class="language-css"><span class="line"><span class="token selector">#nprogress .bar</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">background</span><span class="token punctuation">:</span> red <span class="token important">!important</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">#nprogress .peg</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 10px red<span class="token punctuation">,</span> 0 0 5px red <span class="token important">!important</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token selector">#nprogress .spinner-icon</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">border-top-color</span><span class="token punctuation">:</span> red <span class="token important">!important</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">border-left-color</span><span class="token punctuation">:</span> red <span class="token important">!important</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="canceling-requests-with-axios" tabindex="-1"><a class="header-anchor" href="#canceling-requests-with-axios"><span>Canceling requests with Axios</span></a></h2><p>In some situations, you may no longer care about the result and want to cancel a request that’s already been sent. This can be done by using <code>AbortController</code>. You can create an <code>AbortController</code> instance and set its corresponding <code>AbortSignal</code> instance as the value of the <code>signal</code> property of the config object.</p><p>Here’s a simple example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">axios</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://media.giphy.com/media/C6JQPEUsZUyVq/giphy.gif&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">signal</span><span class="token operator">:</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>controller<span class="token punctuation">.</span>signal<span class="token punctuation">.</span>aborted<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>controller<span class="token punctuation">.</span>signal<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// handle error</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// cancel the request (the reason parameter is optional)</span></span>
<span class="line">controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token string">&quot;Request canceled.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Axios also has a built-in function for canceling requests. However, the built-in <code>CancelToken</code> functionality is deprecated. You may still encounter it in legacy codebase, but it is not advisable to use it in new projects.</p><p>Below is a basic example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> source <span class="token operator">=</span> axios<span class="token punctuation">.</span>CancelToken<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://media.giphy.com/media/C6JQPEUsZUyVq/giphy.gif&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">cancelToken</span><span class="token operator">:</span> source<span class="token punctuation">.</span>token</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">thrown</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span>thrown<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>thrown<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// handle error</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// cancel the request (the message parameter is optional)</span></span>
<span class="line">source<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">&#39;Request canceled.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also create a cancel token by passing an executor function to the <code>CancelToken</code> constructor, as shown below:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> CancelToken <span class="token operator">=</span> axios<span class="token punctuation">.</span>CancelToken<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> cancel<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://media.giphy.com/media/C6JQPEUsZUyVq/giphy.gif&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// specify a cancel token</span></span>
<span class="line">  <span class="token literal-property property">cancelToken</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// this function will receive a cancel function as a parameter</span></span>
<span class="line">    cancel <span class="token operator">=</span> c<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">thrown</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span>thrown<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>thrown<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// handle error</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// cancel the request</span></span>
<span class="line"><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">&#39;Request canceled.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="axios-error-handling" tabindex="-1"><a class="header-anchor" href="#axios-error-handling"><span>Axios error handling</span></a></h2><p>An HTTP request may succeed or fail. Therefore, it is important to handle errors on the client side and provide appropriate feedback for a better user experience.</p><p>Possible causes of error in a network request may include server errors, authentication errors, missing parameters, and requesting non-existent resources.</p><p>Axios, by default, rejects any response with a status code that falls outside the successful 2xx range. However, you can modify this feature to specify what range of HTTP codes should throw an error using the <code>validateStatus</code> config option, like in the example below:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&quot;https://jsonplaceholder.typicode.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;/todos/1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">validateStatus</span><span class="token operator">:</span> <span class="token parameter">status</span> <span class="token operator">=&gt;</span> status <span class="token operator">&lt;=</span> <span class="token number">500</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The error object that Axios passes to the <code>.catch</code> block has several properties, including the following:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>name<span class="token punctuation">)</span> </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span> </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>code<span class="token punctuation">)</span> </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>status<span class="token punctuation">)</span> </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>stack<span class="token punctuation">)</span> </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>config<span class="token punctuation">)</span> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition to the properties highlighted above, if the request was made and the server responded with a status code that falls outside the 2xx range, the error object will also have the <code>error.response</code> object.</p><p>On the other hand, if the request was made but no response was received, the error object will have an <code>error.request</code> object. Depending on the environment, the <code>error.request</code> object is an instance of <code>XMLHttpRequest</code> in the browser environment and an instance of <code>http.ClientRequest</code> in Node.</p><p>You need to check for <code>error.response</code> and <code>error.request</code> objects in your <code>.catch</code> callback to determine the error you are dealing with so that you can take appropriate action:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://jsonplaceholder.typicode.com/todos&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Request was made. However, the status code of the server response falls outside the 2xx range </span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Request was made but no response received </span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// Error was triggered by something else </span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="how-to-use-axios-interceptors-to-handle-api-error-responses" tabindex="-1"><a class="header-anchor" href="#how-to-use-axios-interceptors-to-handle-api-error-responses"><span>How to use Axios interceptors to handle API error responses</span></a></h3><p>Sometimes, duplicating the code above in the <code>.catch</code> callback for each request can become tedious and time-consuming. You can instead intercept the error and handle it globally like so:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Do something with request error </span></span>
<span class="line">  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Do something with response error </span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Request was made. However, the status code of the server response falls outside the 2xx range </span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Request was made but no response received</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token comment">// Error was triggered by something else</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A more granular, centralized error-handling approach is maintaining the API globally and managing all response and request errors with a dedicated handler function.</p><p>Let’s understand it with a simple React app that shows toast messages when a request or response error occurs. Start by creating a file called <code>api.js</code> in the <code>src</code> directory of your React app and use the <code>axios.create</code> method to create a custom Axios instance.</p><p>In this example, I’m using a placeholder API to demonstrate and use one of its endpoints as the base URL of our Axios instance:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="api.js"><span>api.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> toast <span class="token keyword">from</span> <span class="token string">&#39;react-hot-toast&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Create a custom Axios instance</span></span>
<span class="line"><span class="token keyword">const</span> api <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&#39;https://jsonplaceholder.typicode.com&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,35)),n("p",null,[s[55]||(s[55]=a("Next, let’s define a handler function and call it ")),s[56]||(s[56]=n("code",null,"handleError",-1)),s[57]||(s[57]=a(" in the same file. This function takes one argument — expected to be the error object when we implement this with Axios interceptors. With this error object, we can categorize errors based on their type (e.g., response, request, setup) and display appropriate user feedback using a ")),e(u,{to:"/blog.logrocket.com/react-toast-libraries-compared.html"},{default:t(()=>s[54]||(s[54]=[n("strong",null,"React toast library",-1)])),_:1,__:[54]}),s[58]||(s[58]=a(":"))]),s[90]||(s[90]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="api.js"><span>api.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Centralized error handling </span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">handleError</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * If request was made, but the status code </span>
<span class="line">   * of the server response falls outside </span>
<span class="line">   * the 2xx range.</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// A lookup table of different error messages </span></span>
<span class="line">    <span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token number">404</span><span class="token operator">:</span> <span class="token string">&#39;Resource not found&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token number">500</span><span class="token operator">:</span> <span class="token string">&#39;Server error. Please try again later.&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> errorMessage <span class="token operator">=</span> </span>
<span class="line">      messages<span class="token punctuation">[</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Unexpected error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    toast<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;api-error&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Full error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">   <span class="token comment">// If request was made but no response received </span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">    toast<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;No response from server. Check your network connection.&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;api-error&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Full error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> </span>
<span class="line">  <span class="token comment">// If error was triggered by something else</span></span>
<span class="line">  toast<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error setting up the request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;api-error&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Full error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now, we can add a response interceptor to our custom Axios instance to provide automatic success notifications for successful API responses and delegate error handling to the <code>handleError</code> function:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="api.js"><span>api.js</span></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Axios interceptor</span></span>
<span class="line">api<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> successMessage <span class="token operator">=</span> response<span class="token punctuation">.</span>config<span class="token punctuation">.</span>successMessage <span class="token operator">||</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>response<span class="token punctuation">.</span>config<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> request successful</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  toast<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>successMessage<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;api-success&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> response<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">handleError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> api<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),n("p",null,[s[60]||(s[60]=a("We can then use this custom Axios instance in a component where we want to consume the API (the placeholder API in this case) and let it handle errors by itself. ")),n("a",C,[e(i,{icon:"fas fa-globe"}),s[59]||(s[59]=a("Here’s the complete setup of our React app"))]),s[61]||(s[61]=a(" with HTTP error feedback following a centralized error-handling approach."))]),s[91]||(s[91]=n("hr",null,null,-1)),s[92]||(s[92]=n("h2",{id:"how-to-post-a-file-from-a-form-with-axios",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#how-to-post-a-file-from-a-form-with-axios"},[n("span",null,"How to post a file from a form with Axios")])],-1)),n("p",null,[s[64]||(s[64]=a("We can use Axios with the ")),n("a",R,[e(i,{icon:"fa-brands fa-firefox"}),s[62]||(s[62]=n("code",null,"FormData",-1)),s[63]||(s[63]=a(" object"))]),s[65]||(s[65]=a(" to streamline a file upload. To simplify the demonstration, I’m using React again to create a file upload component with basic error handling."))]),s[93]||(s[93]=n("p",null,[n("em",null,"N.B., we are assuming that a backend API is available to support the file upload in this example. This will make more sense with a test backend API in your local development setup.")],-1)),n("p",null,[s[67]||(s[67]=a("Let’s use ")),e(u,{to:"/blog.logrocket.com/guide-usestate-react.html"},{default:t(()=>s[66]||(s[66]=[n("strong",null,[a("React’s "),n("code",null,"useState"),a(" Hook")],-1)])),_:1,__:[66]}),s[68]||(s[68]=a(" to manage the file selection and its upload status. Let’s also create a handler function (")),s[69]||(s[69]=n("code",null,"handleFileChange",-1)),s[70]||(s[70]=a(") to manage the file selection, which basically updates the ")),s[71]||(s[71]=n("code",null,"selectedFile",-1)),s[72]||(s[72]=a(" state to the file chosen by the user:"))]),s[94]||(s[94]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">FileUploadBox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token comment">// State to manage the selected file and upload status </span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>selectedFile<span class="token punctuation">,</span> setSelectedFile<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>uploadStatus<span class="token punctuation">,</span> setUploadStatus<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// Handle file selection</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleFileChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token keyword">const</span> file <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">setSelectedFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We should now define a handler function (<code>handleFileUpload</code>) for file upload, which creates a <code>FormData</code> object if a file is selected. The selected file is then appended to this object, which will be sent in an Axios POST request. Uploading a file is a heavy operation, therefore this handler function should execute asynchronously to allow other operations to continue without blocking the UI thread.</p><p><em>N.B., if your use case allows, you may also use an Axios PUT request to upload a file, which takes a similar approach but may also require you to add some additional steps.</em></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">FileUploadBox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Previous code... </span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Handle file upload </span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleFileUpload</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Ensure a file is selected </span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selectedFile<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setUploadStatus</span><span class="token punctuation">(</span><span class="token string">&#39;Please select a file first&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Create a FormData object to send the file</span></span>
<span class="line">    <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">,</span> selectedFile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To the same function, i.e., <code>handleFileUpload</code>, we can add a <code>try...catch</code> block with a custom Axios instance pointing to our backend API’s endpoint, which is responsible for the file upload. Because it is a file upload, we must set the <code>Content-Type</code> to <code>multipart/form-data</code> to have our file properly parsed at the backend.</p><p>We may also reflect the upload progress in the frontend using the <code>onUploadProgress</code> property of our custom Axios instance. If the request is successful, we set the <code>uploadStatus</code> to something positive, which we can also show through a toast message later. Otherwise, we set a negative message to the <code>uploadStatus</code> state:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">FileUploadBox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Previous code... </span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// Handle file upload </span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleFileUpload</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Send POST request using Axios </span></span>
<span class="line">      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/api/upload&#39;</span><span class="token punctuation">,</span> formData<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;multipart/form-data&#39;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> </span>
<span class="line">        <span class="token comment">// Optional: track upload progress</span></span>
<span class="line">        <span class="token function-variable function">onUploadProgress</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">progressEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">const</span> percentCompleted <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token punctuation">(</span>progressEvent<span class="token punctuation">.</span>loaded <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> progressEvent<span class="token punctuation">.</span>total</span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Upload Progress: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>percentCompleted<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Handle successful upload</span></span>
<span class="line">      <span class="token function">setUploadStatus</span><span class="token punctuation">(</span><span class="token string">&#39;File uploaded successfully!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Upload response:&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Handle upload error</span></span>
<span class="line">      <span class="token function">setUploadStatus</span><span class="token punctuation">(</span><span class="token string">&#39;File upload failed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Upload error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, we should add some JSX to structure our file upload box and use the states, selection handlers, and file upload handlers appropriately, as shown below:</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">FileUploadBox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Previous code... </span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span> </span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>upload-box-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">File Upload</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> </span>
<span class="line">        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleFileChange<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> </span>
<span class="line">        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleFileUpload<span class="token punctuation">}</span></span> </span>
<span class="line">        <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token operator">!</span>selectedFile<span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Upload File</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span>
<span class="line">      </span><span class="token punctuation">{</span>uploadStatus <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token punctuation">{</span>uploadStatus<span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> FileUploadComponent<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)),n("p",null,[s[74]||(s[74]=a("As an assignment, you may try adding previously discussed Axios interceptors-based error handling to this example. Find the code for this example in ")),n("a",F,[e(i,{icon:"fas fa-globe"}),s[73]||(s[73]=a("this StackBlitz demo"))]),s[75]||(s[75]=a("."))]),s[95]||(s[95]=n("hr",null,null,-1)),s[96]||(s[96]=n("h2",{id:"popular-axios-libraries",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#popular-axios-libraries"},[n("span",null,"Popular Axios libraries")])],-1)),s[97]||(s[97]=n("p",null,"Axios’ rise in popularity among developers has resulted in a rich selection of third-party libraries that extend its functionality. From testers to loggers, there’s a library for almost any additional feature you may need when using Axios. Here are some libraries that are currently available:",-1)),e(o,{name:"nettofarah/axios-vcr:",desc:":vhs: Record and Replay requests in JavaScript.",url:"https://github.com/nettofarah/axios-vcr/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/a46325aa94d9dd0e0fe6e79f4c499a7fa5d1bc18bbd794346b8c62d637b12de9/nettofarah/axios-vcr"}),e(o,{name:"srph/axios-response-logger",desc:":mega: Axios interceptor which logs responses.",url:"https://github.com/srph/axios-response-logger/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/fe36a94148d131e0a5f5cbf63e91902d12f3e1d3a7bf836a13f7b6b7eb051c37/srph/axios-response-logger"}),e(o,{name:"jacobbuck/axios-method-override",desc:":boat: axios request method override plugin.",url:"https://github.com/jacobbuck/axios-method-override/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/001fe91297aa6b60d20e5d484498c731c05b1bd582c7e000c7d25a00444eb9c2/jacobbuck/axios-method-override"}),e(o,{name:"kuitos/axios-extensions",desc:"🍱 axios extensions lib, including throttle, cache, retry features etc...",url:"https://github.com/kuitos/axios-extensions/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/9079e7c3fb487a65d72365bbec7f0e5c6953415707ca820bcb4f8926b866fe38/kuitos/axios-extensions"}),e(o,{name:"Weffe/axios-api-versioning",desc:" :diamond_shape_with_a_dot_inside: Add easy to manage api versioning to Axios",url:"https://github.com/Weffe/axios-api-versioning/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/145da79b32473c7140d7dcd08d4cb1ae6dafff566bf27a6c312783faf3ddf78d/Weffe/axios-api-versioning"}),e(o,{name:"jin5354/axios-cache-plugin",desc:"Help you cache GET request when using axios.",url:"https://github.com/jin5354/axios-cache-plugin/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/3128b5ef6923b2c847c2a7f92307c13880795520baee67c5145fa0bc8af1cf98/jin5354/axios-cache-plugin"}),e(o,{name:"3846masa/axios-cookiejar-support",desc:"Add tough-cookie support to axios.",url:"https://github.com/3846masa/axios-cookiejar-support/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://repository-images.githubusercontent.com/67123361/37eb4904-d2db-4253-bceb-19daa9afcc84"}),e(o,{name:"use-hooks/react-hooks-axios",desc:"Custom React Hooks for Axios.js.",url:"https://github.com/use-hooks/react-hooks-axios/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/2565d0f72a3c67ff0fc5e7d68c7bc9a20b226d863fc6195cf54546c59595ab32/use-hooks/react-hooks-axios"}),e(o,{name:"axios/moxios",desc:"Mock axios requests for testing.",url:"https://github.com/axios/moxios/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/61f4e752b7da2a9da9de0d7563927678913776df6a74c28d4857c3596cd5fc0d/axios/moxios"}),e(o,{name:"klis87/redux-requests",desc:"Declarative AJAX requests and automatic network state management for single-page applications",url:"https://github.com/klis87/redux-requests/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://repository-images.githubusercontent.com/103126229/a3ed9700-e48d-11ea-880e-a57724b7a90b"}),e(o,{name:"lifeomic/axios-fetch",desc:"A WebAPI Fetch implementation backed by an Axios client",url:"https://github.com/lifeomic/axios-fetch/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/f501ed17217be887e72e45d47ffdaa0f4c1a27790886bfedee4403233ac3f680/lifeomic/axios-fetch"}),e(o,{name:"anthonygauthier/axios-curlirize",desc:"axios plugin converting requests to cURL commands, saving and logging them.",url:"https://github.com/anthonygauthier/axios-curlirize/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/35b3f8038dee9f542d811cfc47555bfc099148f11cda59caaf662fee432018ab/anthonygauthier/axios-curlirize"}),e(o,{name:"davestewart/axios-actions",desc:"Bundle endpoints as callable, reusable services.",url:"https://github.com/davestewart/axios-actions/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://repository-images.githubusercontent.com/140268692/e9425e80-66b7-11e9-851b-30d2ace56afa"}),e(o,{name:"jdrydn/mocha-axios",desc:"http assertions for mocha using axios.",url:"https://github.com/jdrydn/mocha-axios/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/4af185cb6f3c5cc692684e5297fc5cc71b7a5c7508009fda5e405cc329568dc2/jdrydn/mocha-axios"}),e(o,{name:"ctimmerm/axios-mock-adapter",desc:"Axios adapter that allows to easily mock requests.",url:"https://github.com/ctimmerm/axios-mock-adapter/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/0b47222d83427798d677f494406ada6c283a0ea25f589bb3c82df1cad2461276/ctimmerm/axios-mock-adapter"}),e(o,{name:"Gerhut/axios-debug-log",desc:"Axios interceptor of logging request & response with debug library.",url:"https://github.com/Gerhut/axios-debug-log/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/fec42ec6866f71872f841d699b416057b0dbfe20a5690f687765efdf8de693e6/Gerhut/axios-debug-log"}),e(o,{name:"svrcekmichal/redux-axios-middleware",desc:"Redux middleware for fetching data with axios HTTP client",url:"https://github.com/svrcekmichal/redux-axios-middleware/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/b7305095dbd6b0520bf463b7929f6034477292f25a2bce841307090686dd9f69/svrcekmichal/redux-axios-middleware"}),e(o,{name:"Gerhut/axiosist",desc:"Axios based supertest: convert node.js request handler to axios adapter, used for node.js server unit test.",url:"https://github.com/Gerhut/axiosist/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/a4da74d6fbad8bba9660998c062a16c30a6c24af102b0edf12825fea97516f9d/Gerhut/axiosist"}),s[98]||(s[98]=n("hr",null,null,-1)),s[99]||(s[99]=n("h2",{id:"wrapping-up",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#wrapping-up"},[n("span",null,"Wrapping up")])],-1)),n("p",null,[s[79]||(s[79]=a("There’s a good reason Axios is so popular among developers: it’s packed with useful features. In this post, we took a look at several key features of Axios and learned how to use them in practice. But there are still many aspects of Axios that we haven’t discussed. Be sure to check out the ")),n("a",N,[s[76]||(s[76]=a("Axios GitHub page (")),e(i,{icon:"iconfont icon-github"}),s[77]||(s[77]=n("code",null,"axios/axios",-1)),s[78]||(s[78]=a(")"))]),s[80]||(s[80]=a(" to learn more."))]),e(o,{name:"axios/axios",desc:"Promise based HTTP client for the browser and node.js",url:"https://github.com/axios/axios/",logo:"https://github.githubassets.com/favicons/favicon-dark.svg",preview:"https://opengraph.githubassets.com/4f0895f3369d5e0e04423091fd4bc4dc67de950d7c1b4d96381e0b1b14d9f9a3/axios/axios"}),s[100]||(s[100]=n("p",null,"Do you have any tips on using Axios? Let us know in the comments!",-1)),b(" TODO: add ARTICLE CARD "),e(r,d(k({title:"How to make HTTP requests with Axios",desc:"Learn how to make HTTP requests with Axios, from POST requests to Axios interceptors, using examples for efficient API communication.",link:"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/http-requests-axios.html",logo:"/assets/image/blog.logrocket.com/favicon.png",background:"rgba(112,76,182,0.2)"})),null,16)])}const E=h(x,[["render",I]]),D=JSON.parse('{"path":"/blog.logrocket.com/http-requests-axios.html","title":"How to make HTTP requests with Axios","lang":"en-US","frontmatter":{"lang":"en-US","title":"How to make HTTP requests with Axios","description":"Article(s) > How to make HTTP requests with Axios","icon":"fa-brands fa-node","category":["Node.js","Article(s)"],"tag":["blog","blog.logrocket.com","node","nodejs","node-js","axios"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to make HTTP requests with Axios\\",\\"image\\":[\\"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/http-requests-axios/banner.png\\"],\\"datePublished\\":\\"2024-11-27T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Faraz Kelhini\\",\\"url\\":\\"https://blog.logrocket.com/author/farazkelhini\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/http-requests-axios.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"How to make HTTP requests with Axios"}],["meta",{"property":"og:description","content":"Article(s) > How to make HTTP requests with Axios"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/http-requests-axios/banner.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://chanhi2000.github.io/bookshelf/assets/image/blog.logrocket.com/http-requests-axios/banner.png"}],["meta",{"name":"twitter:image:alt","content":"How to make HTTP requests with Axios"}],["meta",{"property":"article:author","content":"Faraz Kelhini"}],["meta",{"property":"article:tag","content":"axios"}],["meta",{"property":"article:tag","content":"node-js"}],["meta",{"property":"article:tag","content":"nodejs"}],["meta",{"property":"article:tag","content":"node"}],["meta",{"property":"article:tag","content":"blog.logrocket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2024-11-27T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > How to make HTTP requests with Axios"},{"property":"og:description","content":"How to make HTTP requests with Axios"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/blog.logrocket.com/http-requests-axios.html"}]],"prev":"/programming/py-django/articles/README.md","date":"2024-11-27T00:00:00.000Z","isOriginal":false,"author":[{"name":"Faraz Kelhini","url":"https://blog.logrocket.com/author/farazkelhini"}],"cover":"/assets/image/blog.logrocket.com/http-requests-axios/banner.png"},"git":{},"readingTime":{"minutes":16.91,"words":5072},"filePathRelative":"blog.logrocket.com/http-requests-axios.md","copyright":{"author":"Faraz Kelhini"}}');export{E as comp,D as data};
