import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,f as t,b as i,t as v,n as m,g,w as p,e as a,r as o,o as h}from"./app-BVguHYKu.js";const b={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},H={href:"https://learn.microsoft.com/en-us/dotnet/fundamentals/networking/http/httpclient-guidelines#recommended-use",target:"_blank",rel:"noopener noreferrer"};function C(c,n){const l=o("VPCard"),e=o("router-link"),u=o("SiteInfo"),r=o("VPIcon");return h(),k("div",null,[s("h1",y,[s("a",w,[s("span",null,v(c.$frontmatter.title)+" 관련",1)])]),t(l,m(g({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",f,[s("ul",null,[s("li",null,[t(e,{to:"#the-naive-way-to-use-httpclient"},{default:p(()=>n[0]||(n[0]=[a("The Naive Way To Use HttpClient")])),_:1,__:[0]})]),s("li",null,[t(e,{to:"#the-smart-way-to-create-httpclient-using-ihttpclientfactory"},{default:p(()=>n[1]||(n[1]=[a("The Smart Way To Create HttpClient Using IHttpClientFactory")])),_:1,__:[1]})]),s("li",null,[t(e,{to:"#reducing-code-duplication-with-named-clients"},{default:p(()=>n[2]||(n[2]=[a("Reducing Code Duplication With Named Clients")])),_:1,__:[2]})]),s("li",null,[t(e,{to:"#replacing-named-clients-with-typed-clients"},{default:p(()=>n[3]||(n[3]=[a("Replacing Named Clients With Typed Clients")])),_:1,__:[3]})]),s("li",null,[t(e,{to:"#why-you-should-avoid-typed-clients-in-singleton-services"},{default:p(()=>n[4]||(n[4]=[a("Why You Should Avoid Typed Clients In Singleton Services")])),_:1,__:[4]})]),s("li",null,[t(e,{to:"#when-should-you-use-which-option"},{default:p(()=>n[5]||(n[5]=[a("When Should You Use Which Option?")])),_:1,__:[5]})])])]),n[11]||(n[11]=s("hr",null,null,-1)),t(u,{name:"The Right Way To Use HttpClient In .NET",desc:"If you're building a .NET application, chances are high that you'll need to call an external API over HTTP. The easy way to make HTTP requests in .NET is to use the HttpClient to send those requests. And it's a great abstraction to work with, especially with the methods supporting JSON payloads and responses. Unfortunately, it's easy to misuse the HttpClient. Port exhaustion and DNS behavior are some of the most common problems.",url:"https://milanjovanovic.tech/blog/the-right-way-to-use-httpclient-in-dotnet/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_041.png"}),n[12]||(n[12]=i(`<p>If you&#39;re building a <strong>.NET</strong> application, chances are high that you&#39;ll need to call an <strong>external API</strong> over <strong>HTTP</strong>.</p><p>The easy way to make HTTP requests in .NET is to use the <code>HttpClient</code> to send those requests. And it&#39;s a great abstraction to work with, especially with the methods supporting <strong>JSON</strong> payloads and responses.</p><p>Unfortunately, it&#39;s easy to misuse the <code>HttpClient</code>.</p><p><strong>Port exhaustion</strong> and <strong>DNS behavior</strong> are some of the most common problems.</p><p>So here&#39;s what you need to know about working with <code>HttpClient</code>:</p><ul><li>How not to use <code>HttpClient</code></li><li>How to simplify configuration with <code>IHttpClientFactory</code></li><li>How to configure <strong>typed clients</strong></li><li>Why you should avoid <strong>typed clients</strong> in singleton services</li><li>When to use which option</li></ul><p>Let&#39;s dive in!</p><hr><h2 id="the-naive-way-to-use-httpclient" tabindex="-1"><a class="header-anchor" href="#the-naive-way-to-use-httpclient"><span>The Naive Way To Use HttpClient</span></a></h2><p>The simplest way to work with the <code>HttpClient</code> is to just create a new instance, set the required properties and use it to send requests.</p><p>What could possibly go wrong?</p><p><code>HttpClient</code> instances are meant to be <strong>long-lived</strong>, and reused throughout the lifetime of the application.</p><p>Each instance uses its own <strong>connection pool</strong> for isolation purposes, but also to prevent <strong>port exhaustion</strong>. If a server is under high load, and your application is constantly creating new connections, it could lead to exhausting the available ports. This will cause an exception at runtime, when trying to send a request.</p><p>So how can you avoid this?</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GitHubService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">GitHubSettings</span> _settings<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">GitHubService</span><span class="token punctuation">(</span><span class="token class-name">IOptions<span class="token punctuation">&lt;</span>GitHubSettings<span class="token punctuation">&gt;</span></span> settings<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _settings <span class="token operator">=</span> settings<span class="token punctuation">.</span>Value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>GitHubUser<span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetUserAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> username<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> _settings<span class="token punctuation">.</span>GitHubToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">,</span> _settings<span class="token punctuation">.</span>UserAgent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        client<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">GitHubUser<span class="token punctuation">?</span></span> user <span class="token operator">=</span> <span class="token keyword">await</span> client</span>
<span class="line">            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetFromJsonAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GitHubUser<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;users/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">username</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> user<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="the-smart-way-to-create-httpclient-using-ihttpclientfactory" tabindex="-1"><a class="header-anchor" href="#the-smart-way-to-create-httpclient-using-ihttpclientfactory"><span>The Smart Way To Create HttpClient Using IHttpClientFactory</span></a></h2><p>Instead of managing the <code>HttpClient</code> lifetime yourself, you can use an <code>IHttpClientFactory</code> to create the <code>HttpClient</code> instance.</p><p>Simply call the <code>CreateClient</code> method and use the returned <code>HttpClient</code> instance to send your HTTP requests.</p><p>Why is this a better approach?</p><p>The expensive part of the <code>HttpClient</code> is the actual message handler - <code>HttpMessageHandler</code>. Each <code>HttpMessageHandler</code> has an internal HTTP <strong>connection pool</strong> that can be reused.</p><p>The <code>IHttpClientFactory</code> will <strong>cache</strong> the <code>HttpMessageHandler</code> and reuse it when creating a new <code>HttpClient</code> instance.</p><p>An important note here is that <code>HttpClient</code> instances created by <code>IHttpClientFactory</code> are meant to be <strong>short-lived</strong>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GitHubService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">GitHubSettings</span> _settings<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IHttpClientFactory</span> _factory<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">GitHubService</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">IOptions<span class="token punctuation">&lt;</span>GitHubSettings<span class="token punctuation">&gt;</span></span> settings<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">IHttpClientFactory</span> factory<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _settings <span class="token operator">=</span> settings<span class="token punctuation">.</span>Value<span class="token punctuation">;</span></span>
<span class="line">        _factory <span class="token operator">=</span> factory<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>GitHubUser<span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetUserAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> username<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> _factory<span class="token punctuation">.</span><span class="token function">CreateClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> _settings<span class="token punctuation">.</span>GitHubToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">,</span> _settings<span class="token punctuation">.</span>UserAgent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        client<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">GitHubUser<span class="token punctuation">?</span></span> user <span class="token operator">=</span> <span class="token keyword">await</span> client</span>
<span class="line">            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetFromJsonAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GitHubUser<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;users/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">username</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> user<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="reducing-code-duplication-with-named-clients" tabindex="-1"><a class="header-anchor" href="#reducing-code-duplication-with-named-clients"><span>Reducing Code Duplication With Named Clients</span></a></h2><p>Using <code>IHttpClientFactory</code> will solve most of the issues of manually creating an <code>HttpClient</code>. However, we still need to configure the default request parameters every time we obtain a new <code>HttpClient</code> from the <code>CreateClient</code> method.</p><p>You can configure a <strong>named client</strong> by calling the <code>AddHttpClient</code> method and passing in the desired name. The <code>AddHttpClient</code> accepts a delegate that you can use to configure the default parameters on the <code>HttpClient</code> instance.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">services<span class="token punctuation">.</span><span class="token function">AddHttpClient</span><span class="token punctuation">(</span><span class="token string">&quot;github&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>serviceProvider<span class="token punctuation">,</span> client<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> settings <span class="token operator">=</span> serviceProvider</span>
<span class="line">        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IOptions<span class="token punctuation">&lt;</span>GitHubSettings<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> settings<span class="token punctuation">.</span>GitHubToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">,</span> settings<span class="token punctuation">.</span>UserAgent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    client<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The main difference is you now have to obtain the client by passing the name of the client to <code>CreateClient</code>.</p><p>But the use of the <code>HttpClient</code> looks a lot simpler:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GitHubService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IHttpClientFactory</span> _factory<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">GitHubService</span><span class="token punctuation">(</span><span class="token class-name">IHttpClientFactory</span> factory<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _factory <span class="token operator">=</span> factory<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>GitHubUser<span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetUserAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> username<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> _factory<span class="token punctuation">.</span><span class="token function">CreateClient</span><span class="token punctuation">(</span><span class="token string">&quot;github&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">GitHubUser<span class="token punctuation">?</span></span> user <span class="token operator">=</span> <span class="token keyword">await</span> client</span>
<span class="line">            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetFromJsonAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GitHubUser<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;users/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">username</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> user<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="replacing-named-clients-with-typed-clients" tabindex="-1"><a class="header-anchor" href="#replacing-named-clients-with-typed-clients"><span>Replacing Named Clients With Typed Clients</span></a></h2><p>The downside of using <strong>named clients</strong> is having to resolve an <code>HttpClient</code> by passing in a name every time.</p><p>There&#39;s a better way to achieve the same behavior by configuring a <strong>typed client</strong>. You can do this by calling the <code>AddClient&lt;TClient&gt;</code> method and configuring the service that will consume the <code>HttpClient</code>.</p><p>Under the hood, this is still using a <strong>named client</strong>, where the name is the same as the type name.</p><p>And this will also register <code>GitHubService</code> with a <strong>transient lifetime</strong>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHttpClient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GitHubService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>serviceProvider<span class="token punctuation">,</span> client<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> settings <span class="token operator">=</span> serviceProvider</span>
<span class="line">        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IOptions<span class="token punctuation">&lt;</span>GitHubSettings<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> settings<span class="token punctuation">.</span>GitHubToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">,</span> settings<span class="token punctuation">.</span>UserAgent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    client<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Inside of <code>GitHubService</code>, you inject and use the typed <code>HttpClient</code> instance which will have all of the configuration applied.</p><p>No more dealing with <code>IHttpClientFactory</code> and creating <code>HttpClient</code> instances manually.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GitHubService</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">HttpClient</span> client<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">GitHubService</span><span class="token punctuation">(</span><span class="token class-name">HttpClient</span> client<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        _client <span class="token operator">=</span> client<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>GitHubUser<span class="token punctuation">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetUserAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> username<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">GitHubUser<span class="token punctuation">?</span></span> user <span class="token operator">=</span> <span class="token keyword">await</span> client</span>
<span class="line">            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetFromJsonAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GitHubUser<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;users/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">username</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> user<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="why-you-should-avoid-typed-clients-in-singleton-services" tabindex="-1"><a class="header-anchor" href="#why-you-should-avoid-typed-clients-in-singleton-services"><span>Why You Should Avoid Typed Clients In Singleton Services</span></a></h2><p>You could run into a <strong>problem</strong> if you inject a <strong>typed client</strong> into a <strong>singleton service</strong>. Since the <strong>typed client</strong> is <strong>transient</strong>, injecting it in a <strong>singleton service</strong> will cause it to be cached for the lifetime of the <strong>singleton service</strong>.</p><p>This will prevent the <strong>typed client</strong> from reacting to DNS changes.</p><p>If you want to use a <strong>typed client</strong> in a <strong>singleton service</strong>, the recommened approach is using <code>SocketsHttpHandler</code> as the primary handler, and configuring the <code>PooledConnectionLifetime</code>.</p><p>Since the <code>SocketsHttpHandler</code> will handle connection pooling, you can disable recycling at the <code>IHttpClientFactory</code> level by setting <code>HandlerLifetime</code> to <code>Timeout.InfiniteTimeSpan</code>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHttpClient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GitHubService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>serviceProvider<span class="token punctuation">,</span> client<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> settings <span class="token operator">=</span> serviceProvider</span>
<span class="line">        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IOptions<span class="token punctuation">&lt;</span>GitHubSettings<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> settings<span class="token punctuation">.</span>GitHubToken<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">,</span> settings<span class="token punctuation">.</span>UserAgent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    client<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">ConfigurePrimaryHttpMessageHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SocketsHttpHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        PooledConnectionLifetime <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">SetHandlerLifetime</span><span class="token punctuation">(</span>Timeout<span class="token punctuation">.</span>InfiniteTimeSpan<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="when-should-you-use-which-option" tabindex="-1"><a class="header-anchor" href="#when-should-you-use-which-option"><span>When Should You Use Which Option?</span></a></h2><p>I showed you a few possible options for working with <code>HttpClient</code>.</p><p>But which one should you use and when?</p>`,53)),s("p",null,[n[7]||(n[7]=a("Microsoft was kind enough to provide us with a set of best practices and ")),s("a",H,[t(r,{icon:"fa-brands fa-microsoft"}),n[6]||(n[6]=a("recommended use"))]),n[8]||(n[8]=a(" for ")),n[9]||(n[9]=s("code",null,"HttpClient",-1)),n[10]||(n[10]=a("."))]),n[13]||(n[13]=i("<ul><li>Use a <code>static</code> or <strong>singleton</strong> <code>HttpClient</code> instance with a <code>PooledConnectionLifetime</code> configured, since this solves both port exhaustion and tracking DNS changes</li><li>Use <code>IHttpClientFactory</code> if you want to move the configuration to one place, but remember that clients are meant to be <strong>short-lived</strong></li><li>Use a <strong>typed client</strong> if you want the <code>IHttpClientFactory</code> configurability</li></ul><p>I prefer working with a <strong>typed client</strong>, and I&#39;m mindful of the fact that it&#39;s configured as a <strong>transient service</strong>.</p><p>Thanks for reading, and have an awesome Saturday.</p>",3))])}const A=d(b,[["render",C]]),S=JSON.parse('{"path":"/milanjovanovic.tech/the-right-way-to-use-httpclient-in-dotnet.html","title":"The Right Way To Use HttpClient In .NET","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"The Right Way To Use HttpClient In .NET","description":"Article(s) > The Right Way To Use HttpClient In .NET","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"The Right Way To Use HttpClient In .NET\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_041.png\\"],\\"datePublished\\":\\"2023-06-10T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/the-right-way-to-use-httpclient-in-dotnet.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"The Right Way To Use HttpClient In .NET"}],["meta",{"property":"og:description","content":"Article(s) > The Right Way To Use HttpClient In .NET"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_041.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_041.png"}],["meta",{"name":"twitter:image:alt","content":"The Right Way To Use HttpClient In .NET"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2023-06-10T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > The Right Way To Use HttpClient In .NET"},{"property":"og:description","content":"The Right Way To Use HttpClient In .NET"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/the-right-way-to-use-httpclient-in-dotnet.html"}]],"prev":"/programming/cs/articles/README.md","date":"2023-06-10T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_041.png"},"git":{},"readingTime":{"minutes":4.32,"words":1296},"filePathRelative":"milanjovanovic.tech/the-right-way-to-use-httpclient-in-dotnet.md","copyright":{"author":"Milan Jovanović"}}');export{A as comp,S as data};
