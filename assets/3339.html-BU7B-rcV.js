import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,d as s,f as l,b as i,a as t,e as a,t as g,n as u,g as r,w as o,r as c,o as w}from"./app-BVguHYKu.js";const f={},y={id:"frontmatter-title-관련",tabindex:"-1"},A={class:"header-anchor",href:"#frontmatter-title-관련"},C={class:"table-of-contents"},D={id:"claude-md란",tabindex:"-1"},E={class:"header-anchor",href:"#claude-md란"},L={id:"claude-md에-무엇을-담아야-하는가",tabindex:"-1"},U={class:"header-anchor",href:"#claude-md에-무엇을-담아야-하는가"},h={id:"claude-md-효율적으로-활용하기-계층적-claude-md",tabindex:"-1"},x={class:"header-anchor",href:"#claude-md-효율적으로-활용하기-계층적-claude-md"},T={id:"클로드코드와-함께-claude-md-작성하기",tabindex:"-1"},I={class:"header-anchor",href:"#클로드코드와-함께-claude-md-작성하기"},R={id:"claude-md-지속적으로-개선하는-방법",tabindex:"-1"},S={class:"header-anchor",href:"#claude-md-지속적으로-개선하는-방법"},j={id:"claude-md는-시작에-불과하다",tabindex:"-1"},P={class:"header-anchor",href:"#claude-md는-시작에-불과하다"};function z(m,n){const d=c("VPCard"),e=c("VPIcon"),p=c("router-link"),v=c("SiteInfo");return w(),b("div",null,[s("h1",y,[s("a",A,[s("span",null,g(m.$frontmatter.title)+" 관련",1)])]),l(d,u(r({title:"Claude > Article(s)",desc:"Article(s)",link:"/ai/claude/articles/README.md",logo:"/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),s("nav",C,[s("ul",null,[s("li",null,[l(p,{to:"#claude-md란"},{default:o(()=>[l(e,{icon:"fa-brands fa-markdown"}),n[0]||(n[0]=a("CLAUDE.md란?"))]),_:1,__:[0]}),s("ul",null,[s("li",null,[l(p,{to:"#claude-md에-무엇을-담아야-하는가"},{default:o(()=>[l(e,{icon:"fa-brands fa-markdown"}),n[1]||(n[1]=a("CLAUDE.md에 무엇을 담아야 하는가"))]),_:1,__:[1]})]),s("li",null,[l(p,{to:"#claude-md-효율적으로-활용하기-계층적-claude-md"},{default:o(()=>[l(e,{icon:"fa-brands fa-markdown"}),n[2]||(n[2]=a("CLAUDE.md 효율적으로 활용하기: 계층적 ")),l(e,{icon:"fa-brands fa-markdown"}),n[3]||(n[3]=a("CLAUDE.md"))]),_:1,__:[2,3]})]),s("li",null,[l(p,{to:"#클로드코드와-함께-claude-md-작성하기"},{default:o(()=>[n[4]||(n[4]=a("클로드코드와 함께 ")),l(e,{icon:"fa-brands fa-markdown"}),n[5]||(n[5]=a("CLAUDE.md 작성하기"))]),_:1,__:[4,5]})]),s("li",null,[l(p,{to:"#claude-md-지속적으로-개선하는-방법"},{default:o(()=>[l(e,{icon:"fa-brands fa-markdown"}),n[6]||(n[6]=a("CLAUDE.md 지속적으로 개선하는 방법"))]),_:1,__:[6]})]),s("li",null,[l(p,{to:"#claude-md는-시작에-불과하다"},{default:o(()=>[l(e,{icon:"fa-brands fa-markdown"}),n[7]||(n[7]=a("CLAUDE.md는 시작에 불과하다"))]),_:1,__:[7]})])])])])]),n[82]||(n[82]=s("hr",null,null,-1)),l(v,{name:"CLAUDE.md 이렇게 쓰면 정말 편합니다",desc:"클로드 코드 새 세션마다 맥락 설명을 하던 어느 날, 우연히 CLAUDE.md를 알게 되고 더 이상 반복 설명하지 않아도 내 오랜 동료처럼 작업하게 할 수 있단 걸 알게 됐습니다. CLAUDE.md는 프로젝트의 기술 스택, 개발 규칙, 워크플로우, 특별 주의사항을 정리해두는 ‘프로젝트 설명서’로, 클로드가 자동으로 읽고 이해합니다. 한 번만 작성해두면 세션을 새로 열어도, 브랜치를 바꿔도, 팀원이 프로젝트를 클론해도 일관된 컨텍스트가 유지됩니다. 계층 구조 활용으로 컨텍스트를 상황별로 전환하고, 클로드에게 직접 CLAUDE.md 작성을 맡겨 효율성과 일관성을 극대화할 수 있었죠. 이 글에서는 요즘IT 실제 프로젝트에서 CLAUDE.md를 활용하는 방법을 중심으로 CLAUDE.md에 무엇을 담아야 하는지, 특별 주의사항을 어떻게 활용할지, 계층 구조를 통한 효율적 운영법, 그리고 클로드에게 직접 작성·개선을 맡기는 방법까지 다룹니다.",url:"https://yozm.wishket.com/magazine/detail/3339/",logo:"https://yozm.wishket.com/favicon.ico",preview:"https://yozm.wishket.com/media/news/3339/image6.png"}),s("blockquote",null,[l(e,{icon:"fa-brands fa-markdown"}),n[8]||(n[8]=s("code",null,"CLAUDE.md",-1)),n[9]||(n[9]=a(" 클로드 코드를 ‘오랜 동료’처럼 만드는 방법"))]),n[83]||(n[83]=s("p",null,"저는 노션에 자주 쓰는 프롬프트문을 카테고리화해서 잘 관리하고 있습니다. 그리고 필요할 때마다 붙여넣기해 사용합니다.",-1)),n[84]||(n[84]=s("p",null,"클로드 코드(Claude Code)를 사용할 때도 비슷했습니다. 새로운 세션을 열면 매번 의식처럼 똑같은 말을 반복했습니다.",-1)),n[85]||(n[85]=s("blockquote",null,[s("p",null,'"우리 프로젝트는 Next.js 15 App Router를 사용해. TypeScript strict mode 켜져 있고, Tailwind CSS 쓰고 있어. 아, 그리고 상태관리는 Zustand야. API 호출은 전부 try-catch로 감싸야 하고...".')],-1)),n[86]||(n[86]=s("p",null,"그렇게 입력한 뒤에 진짜 제가 질문하고 싶은 것을 붙였습니다. 이 과정을 거치지 않으면 클로드 코드가 엉뚱한 대답을 하거나 멀쩡한 코드를 불필요하게 바꾸곤 했습니다.",-1)),s("p",null,[n[10]||(n[10]=a("그러던 어느 날 깜빡하고 질문을 추가하지 않았습니다. 그랬더니 클로드 코드가 **“이 정보를 ")),l(e,{icon:"fa-brands fa-markdown"}),n[11]||(n[11]=s("code",null,"CLAUDE.md",-1)),n[12]||(n[12]=a("로 작성해 드릴까요?”**라고 합니다."))]),n[87]||(n[87]=s("p",null,[a("그렇게 저는 "),s("strong",null,"클로드 코드에 지도를 제공해 오랜 시간 함께 일한 동료처럼 결과물을 내게 하는 방법"),a("을 알게 됐습니다.")],-1)),n[88]||(n[88]=s("hr",null,null,-1)),s("h2",D,[s("a",E,[s("span",null,[l(e,{icon:"fa-brands fa-markdown"}),n[13]||(n[13]=s("code",null,"CLAUDE.md",-1)),n[14]||(n[14]=a("란?"))])])]),s("p",null,[n[15]||(n[15]=a("먼저 ")),l(e,{icon:"fa-brands fa-markdown"}),n[16]||(n[16]=s("code",null,"CLAUDE.md",-1)),n[17]||(n[17]=a("는 클로드 코드가 프로젝트를 열 때마다 자동으로 읽는 '프로젝트 설명서'입니다. 프로젝트 루트에 ")),l(e,{icon:"fa-brands fa-markdown"}),n[18]||(n[18]=s("code",null,"CLAUDE.md",-1)),n[19]||(n[19]=a(' 파일을 만들어두면, 클로드는 새 세션을 시작할 때마다 이 파일을 읽고 프로젝트의 규칙, 패턴, 기술 스택을 자동으로 인지합니다. 마치 신입 개발자에게 주는 온보딩 문서처럼, 클로드에게 "우리 프로젝트는 이렇게 작동해"라고 한 번만 설명해두는 것입니다.'))]),n[89]||(n[89]=s("p",null,"단 한 번 작성해두면, 클로드는 영원히 기억합니다. 새 세션을 시작해도, 다른 브랜치로 이동해도, 심지어 팀원이 프로젝트를 클론해도 똑같은 컨텍스트를 공유합니다.",-1)),s("h3",L,[s("a",U,[s("span",null,[l(e,{icon:"fa-brands fa-markdown"}),n[20]||(n[20]=s("code",null,"CLAUDE.md",-1)),n[21]||(n[21]=a("에 무엇을 담아야 하는가"))])])]),s("p",null,[n[22]||(n[22]=a("CLAUDE.md를 작성하기 시작했지만, 처음엔 뭘 써야 할지 막막했습니다. 그래서 “클로드 코드에게 ")),l(e,{icon:"fa-brands fa-markdown"}),n[23]||(n[23]=s("code",null,"CLAUDE.md",-1)),n[24]||(n[24]=a("에 어떤 내용들을 작성해줘야하니?” 라고 물었습니다. 꽤 친절히 알려줍니다. 클로드 코드는 다음과 같은 정보를 기입하기를 권장합니다."))]),n[90]||(n[90]=i(`<h4 id="_1-기술-스택과-버전" tabindex="-1"><a class="header-anchor" href="#_1-기술-스택과-버전"><span>1. 기술 스택과 버전</span></a></h4><div class="code-block-with-title"><div class="code-block-title-bar" data-title="요즘 IT CLAUDE.md 중 기술 스택"><span>요즘 IT CLAUDE.md 중 기술 스택</span></div><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token title important"><span class="token punctuation">##</span> 기술 스택</span></span>
<span class="line"></span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">Framework</span><span class="token punctuation">**</span></span>: Next.js 15.5.2- (App Router)</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">React</span><span class="token punctuation">**</span></span>: 19.1.1</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">언어</span><span class="token punctuation">**</span></span>: TypeScript 5.8.3</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">상태관리</span><span class="token punctuation">**</span></span>: @tanstack/react-query 5.80.7</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">스타일링</span><span class="token punctuation">**</span></span>: TaiIwind CSS 3.4.1</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">디자인 시스템</span><span class="token punctuation">**</span></span>: @wishket/design-system 1.16.7</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">테스팅</span><span class="token punctuation">**</span></span>: Jest 29.7.0, @testing-library/react 16.3.0, Cypress 14.0.0</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">패키지 매니저</span><span class="token punctuation">**</span></span>: Yarn 4.2.2</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">프로젝트 버전</span><span class="token punctuation">**</span></span>: 2.5.1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),t(" ![](https://wishket.com/media/news/3339/image5.png) "),n[91]||(n[91]=i(`<p>왜 버전까지 명시해야 할까요? Next.js 13과 15는 완전히 다른 프레임워크나 마찬가지거든요. 버전을 안 적으면 클로드는 자기가 아는 가장 안정적인(=오래된) 버전으로 코드를 짭니다.</p><h4 id="_2-개발-규칙" tabindex="-1"><a class="header-anchor" href="#_2-개발-규칙"><span>2. 개발 규칙</span></a></h4><div class="code-block-with-title"><div class="code-block-title-bar" data-title="요즘 IT CLAUDE.md 중 개발 규칙"><span>요즘 IT CLAUDE.md 중 개발 규칙</span></div><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token title important"><span class="token punctuation">##</span> 개발 규칙</span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> 1. 코드 작성 규칙</span></span>
<span class="line"></span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">절대 모킹하지 않기</span><span class="token punctuation">**</span></span>: 실제 동작하는 코드만 작성</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">타입 안전성</span><span class="token punctuation">**</span></span>: TypeScript 엄격 모드 준수</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">테스트 우선</span><span class="token punctuation">**</span></span>: 테스트 커버리지 90% 이상 유지</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">컴포년트 네이밍</span><span class="token punctuation">**</span></span>: PascalCase, 기능을 명확히 나타내는 이름 사용</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">React import</span><span class="token punctuation">**</span></span>: React 타입 사용 시 named import 사용 (<span class="token code-snippet code keyword">\`import { type ReactNode, type FC } from &#39;react&#39;;\`</span>)</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> 2. 패키지 버전 호환성</span></span>
<span class="line"></span>
<span class="line"><span class="token list punctuation">-</span> React 19.1.1 고정 (resolutions 설정됨)</span>
<span class="line"><span class="token list punctuation">-</span> @wishket 패키지들과의 호환성 유지</span>
<span class="line"><span class="token list punctuation">-</span> 새 패키지 추가 시 기존 의존성과 충돌 확인</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> 3. 파일 구조 규칙</span></span>
<span class="line"></span>
<span class="line"><span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`index.ts\`</span>로 export 모듈화</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`.unit.spec.tsx\`</span> 확장자로 단위 테스트 작성</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token code-snippet code keyword">\`.types.ts\`</span>, <span class="token code-snippet code keyword">\`.constants.ts\`</span>, <span class="token code-snippet code keyword">\`.utils.ts\`</span> 분리</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> 4. 스크립트 명령어</span></span>
<span class="line"></span>
<span class="line"><span class="token code"><span class="token punctuation">\`\`\`</span><span class="token code-language">bash</span></span>
<span class="line"><span class="token code-block language-bash language-bash language-bash language-bash"><span class="token function">yarn</span> dev            <span class="token comment"># 개발 서버 (Turbopack)</span></span>
<span class="line"><span class="token function">yarn</span> build          <span class="token comment"># 프로덕션 빌드</span></span>
<span class="line"><span class="token function">yarn</span> lint           <span class="token comment"># ESLint 검사</span></span>
<span class="line"><span class="token function">yarn</span> test:unit      <span class="token comment"># Jest 단위 테스트</span></span>
<span class="line"><span class="token function">yarn</span> test:e2e       <span class="token comment"># Cypress E2E 테스트</span></span></span>
<span class="line"><span class="token punctuation">\`\`\`</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),t(" ![](https://wishket.com/media/news/3339/image6.png) "),s("p",null,[n[25]||(n[25]=a("이런 규칙들은 코드 리뷰에서 매번 지적되는 것들입니다. ")),l(e,{icon:"fa-brands fa-markdown"}),n[26]||(n[26]=s("code",null,"CLAUDE.md",-1)),n[27]||(n[27]=a("에 명시하면, 클로드가 알아서 지킵니다. 코드 리뷰 시간을 확실하게 줄일 수 있습니다. 스크립트 명령어를 추가해주면 스스로 확인이 필요한 경우에 스크립트를 실행시켜 확인할 수 있습니다. 그렇기 때문에 배포에 관련된 스크립트가 있다면 제외하는 것이 좋습니다."))]),n[92]||(n[92]=i(`<h4 id="_3-개발-워크플로우" tabindex="-1"><a class="header-anchor" href="#_3-개발-워크플로우"><span>3. 개발 워크플로우</span></a></h4><div class="code-block-with-title"><div class="code-block-title-bar" data-title="요즘 IT CLAUDE.md 중 개발 워크플로우"><span>요즘 IT CLAUDE.md 중 개발 워크플로우</span></div><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token title important"><span class="token punctuation">##</span> 개발 위크플로우 (증강 코딩 + TDD)</span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> 켄트 백의 증강 코딩 원칙</span></span>
<span class="line"></span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">증강 코딩 vs 바이브 코딩</span><span class="token punctuation">**</span></span>: 코드 품질, 테스트, 단순성을 중시하되 AI와 협업</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">중간 결과 관찰</span><span class="token punctuation">**</span></span>: AI가 반복 동작, 요청하지 않은 기능 구현, 테스트 삭제 등의 신호를 보이면 즉시 개입</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">설계 주도권 유지</span><span class="token punctuation">**</span></span>: AI가 너무 앞서가지 않도록 개발자가 설계 방향 제시</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> TDD 위크플로우 (Red -&gt; Green -&gt; Refactor)</span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">####</span> 1. 🔴 Red Phase - 실패하는 테스트 먼저 작성</span></span>
<span class="line"></span>
<span class="line"><span class="token code"><span class="token punctuation">\`\`\`</span><span class="token code-language">ts</span></span>
<span class="line"><span class="token code-block language-ts language-ts language-ts language-ts"><span class="token comment">// 1. 기능 요구사항을 테스트로 표현</span></span>
<span class="line"><span class="token comment">// *.unit.spec.tsx 파일 생성</span></span>
<span class="line"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;새 기능&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;원하는 동작을 명확히 기술&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 아직 구현되지 않은 기능 테스트</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>실제결과<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>기대결과<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="line"><span class="token punctuation">\`\`\`</span></span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> 2. 🟢 Green Phase - 테스트를 통과하는 최소 코드 작성</span></span>
<span class="line"></span>
<span class="line"><span class="token code"><span class="token punctuation">\`\`\`</span><span class="token code-language">ts</span></span>
<span class="line"><span class="token code-block language-ts language-ts language-ts language-ts"><span class="token comment">// 2. 테스트를 통과하기 위한 최소한의 구현</span></span>
<span class="line"><span class="token comment">// - 타입 정의 (*.types.ts)</span></span>
<span class="line"><span class="token comment">// - 실제 동작 코드 (*.tsx, *.ts)</span></span>
<span class="line"><span class="token comment">// - 오버엔지니어링 금지</span></span></span>
<span class="line"><span class="token punctuation">\`\`\`</span></span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> 3. Refactor Phase - 코드 품질 개선</span></span>
<span class="line"></span>
<span class="line"><span class="token code"><span class="token punctuation">\`\`\`</span><span class="token code-language">ts</span></span>
<span class="line"><span class="token code-block language-ts language-ts language-ts language-ts"><span class="token comment">// 3. 테스트가 통과한 상태에서 리팩토링</span></span>
<span class="line"><span class="token comment">// - 중복 제거</span></span>
<span class="line"><span class="token comment">// - 가독성 개선</span></span>
<span class="line"><span class="token comment">// - 성능 최적화</span></span>
<span class="line"><span class="token comment">// - 테스트는 계속 통과해야 함</span></span></span>
<span class="line"><span class="token punctuation">\`\`\`</span></span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> 실제 개발 순서 (TDD 적용)</span></span>
<span class="line"></span>
<span class="line"><span class="token list punctuation">1.</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">테스트 먼저 작성</span><span class="token punctuation">**</span></span> (<span class="token code-snippet code keyword">\`*.unit.spec.ts\`</span>)</span>
<span class="line">    <span class="token list punctuation">-</span> 기능 요구사항을 테스트로 표현</span>
<span class="line">    <span class="token list punctuation">-</span> 실패하는 테스트 확인 (Red)</span>
<span class="line"><span class="token list punctuation">2.</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">타입 정의</span><span class="token punctuation">**</span></span> (<span class="token code-snippet code keyword">\`*.types.ts\`</span>)</span>
<span class="line">    <span class="token list punctuation">-</span> 테스트에 필요한 타입만 정의</span>
<span class="line">    <span class="token list punctuation">-</span> 오버엔지니어링 방지</span>
<span class="line"><span class="token list punctuation">3.</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">최소 구현</span><span class="token punctuation">**</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),t(" ![](https://wishket.com/media/news/3339/image2.png) "),n[93]||(n[93]=i(`<p>저는 켄트 백(Kent Beck)이 제시한 증강 코딩의 개념을 반영했습니다. 클로드 코드를 활용한 개발할 때에도 TDD의 철학을 유지하도록 했습니다.</p><p>이것을 적지 않으면 클로드는 매번 다른 스타일로 코드를 작성합니다. 한 파일에 camelCase와 snake_case가 섞여있는 광경을 볼 때도 있고 프로젝트의 컨벤션에 맞지 않는 경우도 발생합니다. 저는 jest를 사용해서 단위 테스트를 하는데 클로드 코드가 vitest를 설치하여 테스트하는 장면도 목격했습니다.</p><h4 id="_4-특별-주의사항" tabindex="-1"><a class="header-anchor" href="#_4-특별-주의사항"><span>4. 특별 주의사항</span></a></h4><div class="code-block-with-title"><div class="code-block-title-bar" data-title="요즘 IT CLAUDE.md 중 특별 주의사항"><span>요즘 IT CLAUDE.md 중 특별 주의사항</span></div><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token title important"><span class="token punctuation">##</span> 특별 주의사항</span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> 1. 절대 하지 말 것</span></span>
<span class="line"></span>
<span class="line"><span class="token list punctuation">-</span> Mock 데이터나 가짜 구현 사용</span>
<span class="line"><span class="token list punctuation">-</span> 타입 any 사용</span>
<span class="line"><span class="token list punctuation">-</span> 직접적인 00M 조작</span>
<span class="line"><span class="token list punctuation">-</span> console.log 프로덕션 코드에 남기기</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> 2. 권장사항</span></span>
<span class="line"></span>
<span class="line"><span class="token list punctuation">-</span> 실제 API 호출하는 코드 작성</span>
<span class="line"><span class="token list punctuation">-</span> 재사용 가능한 컴포넌트 설계</span>
<span class="line"><span class="token list punctuation">-</span> 접근성(ally) 고려</span>
<span class="line"><span class="token list punctuation">-</span> 성능 최적화 적용</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> 3. 문제 해결 우선순위</span></span>
<span class="line"></span>
<span class="line"><span class="token list punctuation">1.</span> 실제 동작하는 해결책 찾기</span>
<span class="line"><span class="token list punctuation">2.</span> 기존 코드 패턴 분석 후 일관성 유지</span>
<span class="line"><span class="token list punctuation">3.</span> 타입 안전성 보장</span>
<span class="line"><span class="token list punctuation">4.</span> 테스트 가능한 구조로 설계</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> 프로젝트 맥락</span></span>
<span class="line"></span>
<span class="line"><span class="token list punctuation">-</span> 미디어/콘텐츠 플랫폼 (기사, 작가, 컬렉션)</span>
<span class="line"><span class="token list punctuation">-</span> 사용자 인증 및 구독 시스템</span>
<span class="line"><span class="token list punctuation">-</span> 실시간 통계 및 분석</span>
<span class="line"><span class="token list punctuation">-</span> 모바일 반응형 디자인</span>
<span class="line"><span class="token list punctuation">-</span> SE0 최적화 필요</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,4)),t(" ![](https://wishket.com/media/news/3339/image3.png) "),n[94]||(n[94]=s("p",null,"이제 별개로 패시브하게 지시하고 싶은 사항들을 이 특별 주의사항에 넣어줍니다. 저는 클로드 코드가 개발할 때 타입을 자꾸 any로 선언해서 이 부분을 명시적으로 any를 사용하지 않도록 이 특별 주의사항에 추가했더니 더 이상 any를 사용하지 않았습니다.",-1)),s("h3",h,[s("a",x,[s("span",null,[l(e,{icon:"fa-brands fa-markdown"}),n[28]||(n[28]=s("code",null,"CLAUDE.md",-1)),n[29]||(n[29]=a(" 효율적으로 활용하기: 계층적 ")),l(e,{icon:"fa-brands fa-markdown"}),n[30]||(n[30]=s("code",null,"CLAUDE.md",-1))])])]),s("p",null,[n[31]||(n[31]=a("그런데 제가 ")),l(e,{icon:"fa-brands fa-markdown"}),n[32]||(n[32]=s("code",null,"CLAUDE.md",-1)),n[33]||(n[33]=a("의 사용법에 대해 클로드 코드와 대화를 나누며 알게 된 것이 있습니다. 바로 ")),l(e,{icon:"fa-brands fa-markdown"}),n[34]||(n[34]=s("code",null,"CLAUDE.md",-1)),n[35]||(n[35]=a("는 '규칙 파일'이 아니라 '")),n[36]||(n[36]=s("strong",null,"컨텍스트 스위처",-1)),n[37]||(n[37]=a("'라는 점입니다. 그것을 알고 나서부터는 ")),l(e,{icon:"fa-brands fa-markdown"}),n[38]||(n[38]=s("code",null,"CLAUDE.md",-1)),n[39]||(n[39]=a("를 프로젝트 루트에만 두지 않고 계층 구조로 활용하게 됐죠."))]),n[95]||(n[95]=s("p",null,"실제 프로젝트에서 어떻게 활용하는지 보여드리겠습니다.",-1)),s("p",null,[n[40]||(n[40]=a("요즘IT는 entities, widgets 등의 계층을 가지고 있습니다.(FSD는 아닙니다) 처음엔 모든 규칙을 루트 ")),l(e,{icon:"fa-brands fa-markdown"}),n[41]||(n[41]=s("code",null,"CLAUDE.md",-1)),n[42]||(n[42]=a("에 때려넣었습니다. 800줄이 넘는 거대한 파일이 되었고, 클로드 코드는 이 방대한 규칙을 신경 쓰느라 혼란스러워했습니다. 그래서 각 루트에는 정보를 최소한으로 담고, 각 계층별로 적합한 지시사항을 추가했습니다."))]),n[96]||(n[96]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="요즘 IT 코드 entities 계층의 CLAUDE.md"><span>요즘 IT 코드 entities 계층의 CLAUDE.md</span></div><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token title important"><span class="token punctuation">#</span> Entities Layer 컨택스트</span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> 계층 역할</span></span>
<span class="line"></span>
<span class="line">비즈니스 도메인 엔티티와 데이터 관리를 담당하는 계층입니다.</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> 주요 책임</span></span>
<span class="line"></span>
<span class="line"><span class="token list punctuation">-</span> 도메인 타입 정의</span>
<span class="line"><span class="token list punctuation">-</span> API 통신 함수 구현</span>
<span class="line"><span class="token list punctuation">-</span> React QuerY 훅 제공</span>
<span class="line"><span class="token list punctuation">-</span> 데이터 변환 및 정규화</span>
<span class="line"><span class="token list punctuation">-</span> 개싱 전략 구현</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> 디렉토리 구조</span></span>
<span class="line"></span>
<span class="line"><span class="token code"><span class="token punctuation">\`\`\`</span></span>
<span class="line"><span class="token code-block">entities/</span>
<span class="line">├── article/         # 아티클 엔티티</span>
<span class="line">│   ├── article.apis.ts</span>
<span class="line">│   ├── article.models.ts</span>
<span class="line">│   ├── article.types.ts</span>
<span class="line">│   └── index.ts</span>
<span class="line">├── author/          # 작가 엔티티</span>
<span class="line">├── collection/      # 컬렉션 엔티티</span>
<span class="line">├── comment/         # 댓글 엔티티</span>
<span class="line">└── user/            # 사용자 엔티티</span></span>
<span class="line"><span class="token punctuation">\`\`\`</span></span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> 코드 작성 규칙</span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> 1. 타입 정의 (types/)</span></span>
<span class="line"></span>
<span class="line"><span class="token code"><span class="token punctuation">\`\`\`</span><span class="token code-language">ts</span></span>
<span class="line"><span class="token code-block language-ts language-ts language-ts language-ts"><span class="token comment">// 도메인 타입</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  author<span class="token operator">:</span> Author<span class="token punctuation">;</span></span>
<span class="line">  pubIishedAt<span class="token operator">:</span> Date<span class="token punctuation">;</span></span>
<span class="line">  tags<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  viewCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// API 응답 타입</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleResponse</span> <span class="token punctuation">{</span></span>
<span class="line">  data<span class="token operator">:</span> Article<span class="token punctuation">;</span></span>
<span class="line">  meta<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">-</span> totalCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span></span>
<span class="line"><span class="token punctuation">\`\`\`</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1)),t(" ![](https://wishket.com/media/news/3339/image1.png) "),s("p",null,[n[43]||(n[43]=a("이렇게 하면 예를 들어 entities 계층의 작업을 할 경우, ")),l(e,{icon:"fas fa-folder-open"}),n[44]||(n[44]=s("code",null,"src/entities/",-1)),l(e,{icon:"fa-brands fa-markdown"}),n[45]||(n[45]=s("code",null,"CLAUDE.md",-1)),n[46]||(n[46]=a(" 가 자동으로 활성화됩니다. 이 계층에서는 요즘IT에서 사용할 데이터들의 처리를 담당하는데 클로드 코드가 이와 관련된 작업을 감지하면 자동으로 이 컨텍스트로 전환됩니다."))]),n[97]||(n[97]=s("p",null,"이게 왜 게임체인저인지 아시겠나요? 클로드가 작업 컨텍스트를 자동으로 인식하고, 필요한 규칙만 적용합니다. 또한 이 컨텍스트들이 조합 가능하다는 점입니다.",-1)),n[98]||(n[98]=s("p",null,'예를 들어 이커머스 프로젝트를 진행한다고 합시다. 이 프로젝트에서 "인증이 필요한 결제 폼"을 작업한다면, auth, payment, form 세 개의 컨텍스트가 동시에 활성화됩니다. 클로드는 이 세 영역의 규칙을 모두 고려하면서도 충돌하지 않게 코드를 생성합니다.',-1)),s("h3",T,[s("a",I,[s("span",null,[n[47]||(n[47]=a("클로드코드와 함께 ")),l(e,{icon:"fa-brands fa-markdown"}),n[48]||(n[48]=s("code",null,"CLAUDE.md",-1)),n[49]||(n[49]=a(" 작성하기"))])])]),s("p",null,[n[50]||(n[50]=a("저는 여러 프로젝트에 ")),l(e,{icon:"fa-brands fa-markdown"}),n[51]||(n[51]=s("code",null,"CLAUDE.md",-1)),n[52]||(n[52]=a("를 작성했지만 한 번도 제가 전체를 작성해본 적이 없습니다. ")),l(e,{icon:"fa-brands fa-markdown"}),n[53]||(n[53]=s("code",null,"CLAUDE.md",-1)),n[54]||(n[54]=a("의 작성 방법은 클로드 코드가 가장 잘 알 것이라고 생각했습니다. 그래서 다음과 같은 프롬프트로 클로드 코드에게 작성하도록 시킵니다."))]),n[99]||(n[99]=i(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="CLAUDE.md 만드는 프롬프트"><span>CLAUDE.md 만드는 프롬프트</span></div><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token bold"><span class="token punctuation">**</span><span class="token content">Prompt |</span><span class="token punctuation">**</span></span> 현재의 프로젝트를 분석해서 CLAUDE.md 만들어줘 package.json, tsconfig, 주요 컴포넌트들 참고해서 기술 스택, 코딩 컨벤션, 프로젝트 구조 섹션 포함해줴</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="클로드 코드가 만든 CLAUDE.md"><span>클로드 코드가 만든 CLAUDE.md</span></div><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token title important"><span class="token punctuation">#</span> AI 서비스 - 마켓플레이스 - 프로젝트 가이드</span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> 프로젝트 개요</span></span>
<span class="line"></span>
<span class="line">AI 서비스 마켓플레이스는 Next.js 15.3과 React 19를 기반으로 한 현대적인 웹 애플리케이션입니다. 검증된 파트너뚵 ...</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> 기술 스택</span></span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> 핵심 프레임워크</span></span>
<span class="line"></span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">Next.js 15.3.4</span><span class="token punctuation">**</span></span> - App Router, Turbopack, Server Components</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">React 19</span><span class="token punctuation">**</span></span> - 최신 React 기능 활용</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">TypeScript 5</span><span class="token punctuation">**</span></span> - 엄격한 타입 제킹 (<span class="token code-snippet code keyword">\`strict: true\`</span>)</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">Tailwind CSS 4</span><span class="token punctuation">**</span></span> - PostCSS 기반 스타일링</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> 주요 라이브러리</span></span>
<span class="line"></span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">lucide-react</span><span class="token punctuation">**</span></span> - 아이콘 시스템</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">rechartS</span><span class="token punctuation">**</span></span> - 데이터 시각화</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">react-markdown</span><span class="token punctuation">**</span></span> - 마크다운 렌더링</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">react-error-boundary</span><span class="token punctuation">**</span></span> - 에러 핸들링</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">clsx &amp; tailwind-merge</span><span class="token punctuation">**</span></span> - 클래스 유틸리티</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">###</span> 개발 도구</span></span>
<span class="line"></span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">ESLint</span><span class="token punctuation">**</span></span> - @wishket/eslint-config-wishket 설정</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">Jest</span><span class="token punctuation">**</span></span> - 테스트 프레임워크</span>
<span class="line"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span><span class="token content">BundIe AnaIyzer</span><span class="token punctuation">**</span></span> - 번들 최적화</span>
<span class="line"></span>
<span class="line"><span class="token title important"><span class="token punctuation">##</span> 프로젝트 구조</span></span>
<span class="line"></span>
<span class="line"><span class="token code"><span class="token punctuation">\`\`\`</span></span>
<span class="line"><span class="token code-block">marketplace/</span>
<span class="line">├── src/</span>
<span class="line">│   ├── app/      # Next.js App Router</span>
<span class="line">...</span></span>
<span class="line"><span class="token punctuation">\`\`\`</span></span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),t(" ![](https://wishket.com/media/news/3339/image11.png) "),s("p",null,[n[55]||(n[55]=a("클로드는 프로젝트를 스캔하고, 패턴을 파악하고, 일관된 규칙을 추출해서 ")),l(e,{icon:"fa-brands fa-markdown"}),n[56]||(n[56]=s("code",null,"CLAUDE.md",-1)),n[57]||(n[57]=a("를 생성합니다. 저보다는 확실히 훨씬 꼼꼼하게 작성합니다. 그다음, 생성된 ")),l(e,{icon:"fa-brands fa-markdown"}),n[58]||(n[58]=s("code",null,"CLAUDE.md",-1)),n[59]||(n[59]=a("를 팀과 리뷰하면서 수정해 나갑니다."))]),n[100]||(n[100]=s("p",null,"수정도 마찬가지로 클로드 코드에게 지시합니다. 이번에 성능 기준을 추가해 보겠습니다. 프롬프트로 “성능 기준 Lighthouse 90점 이상으로 설정해”라고 지시하겠습니다.",-1)),s("figure",null,[n[62]||(n[62]=s("img",{src:"https://wishket.com/media/news/3339/image8.png",alt:'<VPIcon icon="fa-brands fa-markdown"/>에 성능 기준 추가하는 클로드 코드',tabindex:"0",loading:"lazy"},null,-1)),s("figcaption",null,[l(e,{icon:"fa-brands fa-markdown"}),n[60]||(n[60]=s("code",null,"CLAUDE.md",-1)),n[61]||(n[61]=a("에 성능 기준 추가하는 클로드 코드"))])]),s("p",null,[n[63]||(n[63]=a("이렇게 하면 30분 만에 완벽한 ")),l(e,{icon:"fa-brands fa-markdown"}),n[64]||(n[64]=s("code",null,"CLAUDE.md",-1)),n[65]||(n[65]=a("가 완성됩니다. 처음부터 손으로 작성하려면 반나절은 걸렸을 것입니다. 지금은 작성하는 데 3분 정도 소요되었네요."))]),s("h3",R,[s("a",S,[s("span",null,[l(e,{icon:"fa-brands fa-markdown"}),n[66]||(n[66]=s("code",null,"CLAUDE.md",-1)),n[67]||(n[67]=a(" 지속적으로 개선하는 방법"))])])]),s("p",null,[n[68]||(n[68]=a("핵심은 ")),l(e,{icon:"fa-brands fa-markdown"}),n[69]||(n[69]=s("code",null,"CLAUDE.md",-1)),n[70]||(n[70]=a("는 살아있는 문서라는 점입니다. 즉 프로젝트가 성장하면서 계속 진화해야 합니다. 그리고 그 진화를 가장 잘 도와줄 수 있는 건, 아이러니하게도 클로드 자신입니다."))]),n[101]||(n[101]=i(`<p>각자 주기(커밋, PR, 스프린트)를 가지고 꾸준히 클로드 코드에게 이렇게 물어보세요.</p><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token bold"><span class="token punctuation">**</span><span class="token content">Prompt |</span><span class="token punctuation">**</span></span> 이전 커밋의 변경사항을 확인해서 CLAUDE.md에 추가할 내용이 있으면 제시해줄래?</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="CLAUDE.md 에 추가 내용 제시하는 클로드 코드"><span>CLAUDE.md 에 추가 내용 제시하는 클로드 코드</span></div><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line">• 최근 커밋에서 발견된 TypeScript 관련 이슈들을 CLAUDE.md에 추가했습니다:</span>
<span class="line"></span>
<span class="line"><span class="token list punctuation">1.</span> isolatedModules 설정 - 타입 재내보내기 시 export type 구문 사용</span>
<span class="line"><span class="token list punctuation">2.</span> 에러 처리 패턴 - unknown 타입 error의 적절한 처리</span>
<span class="line"><span class="token list punctuation">3.</span> UI/UX 가이드라인 - 모바일 최적화 및 반응형 디자인</span>
<span class="line"></span>
<span class="line">이 가이드라인들은 최근 수정된 빌드 에러들을 방지하는 데 도움이 될 것입니다.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),t(" ![](https://wishket.com/media/news/3339/image12.png) "),s("p",null,[n[71]||(n[71]=a("클로드 코드는 새로운 패턴을 발견하고, 일관성이 깨진 부분을 찾아내고, 개선할 규칙을 제안합니다. 클로드 코드를 사용해서 ")),l(e,{icon:"fa-brands fa-markdown"}),n[72]||(n[72]=s("code",null,"CLAUDE.md",-1)),n[73]||(n[73]=a("를 관리하는 것이 가장 효율적이고 효과적인 방법입니다."))]),s("p",null,[n[74]||(n[74]=a("또한 우리가 열심히 작성한 규칙 중에는 필요 없는 규칙이 있을 것입니다. 그 부분도 확인해서 필요 없는 규칙을 삭제해 나가면 좋습니다. 그러려면 어떤 규칙이 많이 사용되었는지, 또 어떤 규칙이 사용되지 않았는지를 알아야 합니다. 이 또한 클로드 코드에게 물어봐서 알 수 있습니다. 마침 저희 인증 서비스에 ")),l(e,{icon:"fa-brands fa-markdown"}),n[75]||(n[75]=s("code",null,"CLAUDE.md",-1)),n[76]||(n[76]=a("를 점검해야 할 것 같으니 한번 물어보겠습니다."))]),n[102]||(n[102]=i('<div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token bold"><span class="token punctuation">**</span><span class="token content">Prompt |</span><span class="token punctuation">**</span></span> CLAUDE.md 에서 가장 많이 참조된 규칙과 가장 참조되지 않는 규칙을 알려줘</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="많이 쓰는 규칙과 적게 쓰는 규칙을 알려주는 클로드 코드"><span>많이 쓰는 규칙과 적게 쓰는 규칙을 알려주는 클로드 코드</span></div><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line">• CLAUDE.md 분석 결과:</span>\n<span class="line"></span>\n<span class="line">가장 많이 참조될 가능성이 높은 규칙:</span>\n<span class="line"><span class="token list punctuation">-</span> Development Commands (특히 <span class="token code-snippet code keyword">`yarn dev`</span>, <span class="token code-snippet code keyword">`yarn build`</span>, <span class="token code-snippet code keyword">`yarn lint`</span>, <span class="token code-snippet code keyword">`yarn test:unit`</span>) - 일상적인 개발</span>\n<span class="line">작업에서 자주 사용</span>\n<span class="line"><span class="token list punctuation">-</span> Key Directories 구조 (<span class="token code-snippet code keyword">`src/app/`</span>, <span class="token code-snippet code keyword">`src/entities/`</span>, <span class="token code-snippet code keyword">`src/shared/`</span>) - 파일 생성/수정 시 항상 참조</span>\n<span class="line"><span class="token list punctuation">-</span> Entity Structure 패턴 (<span class="token code-snippet code keyword">`apis/`</span>, <span class="token code-snippet code keyword">`models/`</span>, <span class="token code-snippet code keyword">`__tests__/`</span>) - 새로운 기능 개발 시 표준 구조로 활용</span>\n<span class="line"></span>\n<span class="line">가장 적게 참조될 가능성이 높은 규칙:</span>\n<span class="line"><span class="token list punctuation">-</span> Environment configuration - 초기 설정 후 거의 변경하지 않음</span>\n<span class="line"><span class="token list punctuation">-</span> Testing Strategy의 세부사항 (snapshot tests, E2E tests) - unit test에 비해 상대적으로 덜 실행</span>\n<span class="line"><span class="token list punctuation">-</span> Authentication System의 내부 구현 세부사항 (crypto-js, JWT 토큰 암호화) - 이미 구현되어 있고 직접 수정할 일이 적음</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>',2)),t(" ![](https://wishket.com/media/news/3339/image4.png) "),n[103]||(n[103]=i(`<p>인증 서비스다 보니 이미 인증에 대한 부분이 구현이 되어 있어서 더 이상 인증에 관련된 규칙을 참조하지 않네요. 이 부분은 이제 제거하면 좋을 것 같습니다. 그런데 저한테 확신이 없습니다. 그래서 저는 질문을 합니다.</p><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line"><span class="token bold"><span class="token punctuation">**</span><span class="token content">Prompt |</span><span class="token punctuation">**</span></span> 가장 적게 참조될 가능성이 높은 규칙을 규칙에서 제거해도 될까?</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="적게 쓰는 규칙을 제거하지 말라는 클로드 코드"><span>적게 쓰는 규칙을 제거하지 말라는 클로드 코드</span></div><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line">• 제거하지 않는 것을 권장합니다. 이유:</span>
<span class="line"></span>
<span class="line"><span class="token list punctuation">1.</span> Environment Configuration - 배포 문제나 환경별 이슈 디버깅 시 필수적</span>
<span class="line"><span class="token list punctuation">2.</span> Testing Strategy 세부사항 - 품질 보증과 회귀 테스트에 중요</span>
<span class="line"><span class="token list punctuation">3.</span> Authentication system 내부 구현 - 보안 이슈나 토큰 관련 버그 수정 시 필요</span>
<span class="line"></span>
<span class="line">자주 사용하지 않더라도 다음 상황에서 반드시 필요합니다:</span>
<span class="line"><span class="token list punctuation">-</span> 신규 개발자 은보딩</span>
<span class="line"><span class="token list punctuation">-</span> 프로덕션 이슈 트러블슈팅</span>
<span class="line"><span class="token list punctuation">-</span> 보안 감사나 코드 리뷰</span>
<span class="line"><span class="token list punctuation">-</span> 아키텍처 변경 시 영향도 파악</span>
<span class="line"></span>
<span class="line">오히려 CLAUDE.md를 섹션별로 구조화하여 필요한 정보를 빠르게 찾을 수 있도록 개선하는 것이 좋습니다.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),t(" ![](https://wishket.com/media/news/3339/image7.png) "),n[104]||(n[104]=i(`<p>제거하지 말라고 하네요. 그리고 섹션별로 구조화하라고 제안합니다. 좋은 제안인 것 같아 진행해보겠습니다.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="CLAUDE.md를 섹션별 구조화해준 클로드 코드"><span>CLAUDE.md를 섹션별 구조화해준 클로드 코드</span></div><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code class="language-markdown"><span class="line">• CLAUDE.md를 섹션별로 구조화했습니다:</span>
<span class="line"></span>
<span class="line"><span class="token list punctuation">1.</span> 🚀 Quick start - 가장 자주 사용하는 명령어와 구조를 최상단에 배치</span>
<span class="line"><span class="token list punctuation">2.</span> 📋 Project 0verview - 프로젝트 전반적인 설명</span>
<span class="line"><span class="token list punctuation">3.</span> 🔧 Development Reference - 추가 개발 도구와 테스트 가이드</span>
<span class="line"><span class="token list punctuation">4.</span> 🔐 Authentication Architecture - 인증 시스템 세부사항</span>
<span class="line"><span class="token list punctuation">5.</span> 🌍 Environment &amp; Deployment - 환경 설정 관련</span>
<span class="line"><span class="token list punctuation">6.</span> 📝 Notes - 중요한 규칙과 가이드라인</span>
<span class="line"></span>
<span class="line">각 섹션을 시각적으로 구분하고, 자주 사용하는 정보를 상단에 배치하여 접근성을 높였습니다.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2)),t(" ![](https://wishket.com/media/news/3339/image9.png) "),s("h3",j,[s("a",P,[s("span",null,[l(e,{icon:"fa-brands fa-markdown"}),n[77]||(n[77]=s("code",null,"CLAUDE.md",-1)),n[78]||(n[78]=a("는 시작에 불과하다"))])])]),l(e,{icon:"fa-brands fa-markdown"}),n[105]||(n[105]=i(`<code>CLAUDE.md</code>를 작성하고 관리하는 방법을 익혔다면, 이제 클로드 코드와의 협업 품질이 확실히 달라졌을 것입니다. 매번 새 세션마다 컨텍스트를 다시 설명할 필요도 없고, 일관성 있는 코드를 받을 수 있게 되었습니다. 하지만 여전히 한계가 있습니다.<p>일례로 저는 Button component를 만드는 데 3분이 걸렸습니다. CLI에 아래 코드 딱 한 줄을 넣는 것으로 말이죠.</p><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">/create-component Button</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,4)),s("p",null,[n[79]||(n[79]=a("이 한 줄의 명령어로 완벽한 Button 컴포넌트를 만들어내는 것. ")),l(e,{icon:"fa-brands fa-markdown"}),n[80]||(n[80]=s("code",null,"CLAUDE.md",-1)),n[81]||(n[81]=a("만으로는 아직 불가능합니다."))]),l(e,{icon:"fa-brands fa-markdown"}),n[106]||(n[106]=s("code",null,"CLAUDE.md",-1)),n[107]||(n[107]=a("는 클로드 코드와 효율적으로 협업하기 위한 첫 번째 단계일 뿐입니다. 진짜 게임이 시작되는 건 이제부터입니다. ")),n[108]||(n[108]=s("p",null,"다음 편에서도 클로드 코드를 진정한 개발 파트너로 만드는 여러 가지 기법들을 다뤄보겠습니다. 클로드 코드에 기억력을 만들어주고, Agent를 만들어주고, 커스텀 명령어를 만드는 것까지, 30분 작업을 3분으로 줄이는 방법들을 공개하겠습니다.",-1)),t(" TODO: add ARTICLE CARD "),l(d,u(r({title:"CLAUDE.md 이렇게 쓰면 정말 편합니다",desc:"클로드 코드 새 세션마다 맥락 설명을 하던 어느 날, 우연히 CLAUDE.md를 알게 되고 더 이상 반복 설명하지 않아도 내 오랜 동료처럼 작업하게 할 수 있단 걸 알게 됐습니다. CLAUDE.md는 프로젝트의 기술 스택, 개발 규칙, 워크플로우, 특별 주의사항을 정리해두는 ‘프로젝트 설명서’로, 클로드가 자동으로 읽고 이해합니다. 한 번만 작성해두면 세션을 새로 열어도, 브랜치를 바꿔도, 팀원이 프로젝트를 클론해도 일관된 컨텍스트가 유지됩니다. 계층 구조 활용으로 컨텍스트를 상황별로 전환하고, 클로드에게 직접 CLAUDE.md 작성을 맡겨 효율성과 일관성을 극대화할 수 있었죠. 이 글에서는 요즘IT 실제 프로젝트에서 CLAUDE.md를 활용하는 방법을 중심으로 CLAUDE.md에 무엇을 담아야 하는지, 특별 주의사항을 어떻게 활용할지, 계층 구조를 통한 효율적 운영법, 그리고 클로드에게 직접 작성·개선을 맡기는 방법까지 다룹니다.",link:"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3339.html",logo:"https://yozm.wishket.com/favicon.ico",background:"rgba(84,7,224,0.2)"})),null,16)])}const V=k(f,[["render",z]]),M=JSON.parse('{"path":"/yozm.wishket.com/3339.html","title":"CLAUDE.md 이렇게 쓰면 정말 편합니다","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"CLAUDE.md 이렇게 쓰면 정말 편합니다","description":"Article(s) > CLAUDE.md 이렇게 쓰면 정말 편합니다","icon":"iconfont icon-claude","category":["AI","LLM","Anthropic","Claude","Article(s)"],"tag":["blog","yozm.wishket.com","ai","artificial-intelligence","llm","large-language-models","anthropic","claude"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CLAUDE.md 이렇게 쓰면 정말 편합니다\\",\\"image\\":[\\"https://wishket.com/media/news/3339/image5.png\\",\\"https://wishket.com/media/news/3339/image6.png\\",\\"https://wishket.com/media/news/3339/image2.png\\",\\"https://wishket.com/media/news/3339/image3.png\\",\\"https://wishket.com/media/news/3339/image1.png\\",\\"https://wishket.com/media/news/3339/image11.png\\",\\"https://wishket.com/media/news/3339/image8.png\\",\\"https://wishket.com/media/news/3339/image12.png\\",\\"https://wishket.com/media/news/3339/image4.png\\",\\"https://wishket.com/media/news/3339/image7.png\\",\\"https://wishket.com/media/news/3339/image9.png\\"],\\"datePublished\\":\\"2025-09-11T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"박정욱\\",\\"url\\":\\"https://yozm.wishket.com/magazine/@soundbrokaz/\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3339.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"CLAUDE.md 이렇게 쓰면 정말 편합니다"}],["meta",{"property":"og:description","content":"Article(s) > CLAUDE.md 이렇게 쓰면 정말 편합니다"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yozm.wishket.com/media/news/3339/image6.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yozm.wishket.com/media/news/3339/image6.png"}],["meta",{"name":"twitter:image:alt","content":"CLAUDE.md 이렇게 쓰면 정말 편합니다"}],["meta",{"property":"article:author","content":"박정욱"}],["meta",{"property":"article:tag","content":"claude"}],["meta",{"property":"article:tag","content":"anthropic"}],["meta",{"property":"article:tag","content":"large-language-models"}],["meta",{"property":"article:tag","content":"llm"}],["meta",{"property":"article:tag","content":"artificial-intelligence"}],["meta",{"property":"article:tag","content":"ai"}],["meta",{"property":"article:tag","content":"yozm.wishket.com"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2025-09-11T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > CLAUDE.md 이렇게 쓰면 정말 편합니다"},{"property":"og:description","content":"CLAUDE.md 이렇게 쓰면 정말 편합니다"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/yozm.wishket.com/3339.html"}]],"prev":"/ai/claude/articles/README.md","date":"2025-09-11T00:00:00.000Z","isOriginal":false,"author":[{"name":"박정욱","url":"https://yozm.wishket.com/magazine/@soundbrokaz/"}],"cover":"https://yozm.wishket.com/media/news/3339/image6.png"},"git":{},"readingTime":{"minutes":3.15,"words":945},"filePathRelative":"yozm.wishket.com/3339.md","copyright":{"author":"박정욱"}}');export{V as comp,M as data};
