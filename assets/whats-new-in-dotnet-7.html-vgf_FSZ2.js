import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,f as e,b as i,t as k,n as h,g,e as a,w as p,r as o,o as v}from"./app-BVguHYKu.js";const b={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},T={href:"https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/static-virtual-interface-members#static-abstract-interface-methods",target:"_blank",rel:"noopener noreferrer"},N={href:"https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/static-virtual-interface-members#generic-math",target:"_blank",rel:"noopener noreferrer"};function I(c,n){const r=o("VPCard"),u=o("SiteInfo"),t=o("router-link"),l=o("VPIcon");return v(),m("div",null,[s("h1",y,[s("a",w,[s("span",null,k(c.$frontmatter.title)+" 관련",1)])]),e(r,h(g({title:"C# > Article(s)",desc:"Article(s)",link:"/programming/cs/articles/README.md",logo:"https://chanhi2000.github.io/images/ico-wind.svg",background:"rgba(10,10,10,0.2)"})),null,16),n[11]||(n[11]=s("hr",null,null,-1)),e(u,{name:"What's New In .NET 7?",desc:"In this week's newsletter I want to highlight a few interesting things that are now available with the release of C# 11 and .NET 7. In case you missed it, .NET 7 was released November 8th.",url:"https://milanjovanovic.tech/blog/whats-new-in-dotnet-7/",logo:"https://milanjovanovic.tech/profile_favicon.png",preview:"https://milanjovanovic.tech/blog-covers/mnw_011.png"}),n[12]||(n[12]=s("p",null,[a("In this week's newsletter I want to highlight a few interesting things that are now available with the release of "),s("strong",null,"C# 11"),a(" and "),s("strong",null,".NET 7"),a(".")],-1)),n[13]||(n[13]=s("p",null,[a("In case you missed it, "),s("strong",null,".NET 7"),a(" was released November 8th.")],-1)),n[14]||(n[14]=s("p",null,"There are many new features, and you can be sure I had a hard time choosing which ones to highlight.",-1)),n[15]||(n[15]=s("p",null,"Here's what we are going to cover:",-1)),s("nav",f,[s("ul",null,[s("li",null,[e(t,{to:"#required-members"},{default:p(()=>n[0]||(n[0]=[a("Required Members")])),_:1,__:[0]})]),s("li",null,[e(t,{to:"#generic-attributes"},{default:p(()=>n[1]||(n[1]=[a("Generic Attributes")])),_:1,__:[1]})]),s("li",null,[e(t,{to:"#static-abstract-members-in-interfaces"},{default:p(()=>n[2]||(n[2]=[a("Static Abstract Members in Interfaces")])),_:1,__:[2]})]),s("li",null,[e(t,{to:"#file-keyword"},{default:p(()=>n[3]||(n[3]=[a("File Keyword")])),_:1,__:[3]})]),s("li",null,[e(t,{to:"#linq-order-and-orderdescending"},{default:p(()=>n[4]||(n[4]=[a("LINQ Order and OrderDescending")])),_:1,__:[4]})]),s("li",null,[e(t,{to:"#will-you-upgrade-to-net-7"},{default:p(()=>n[5]||(n[5]=[a("Will You Upgrade to .NET 7?")])),_:1,__:[5]})])])]),n[16]||(n[16]=i(`<p>Let&#39;s see what the new features look like!</p><hr><h2 id="required-members" tabindex="-1"><a class="header-anchor" href="#required-members"><span>Required Members</span></a></h2><p>We can now define a class member as required by using the <code>required</code> keyword. It can be applied to a <em>field</em> or <em>property</em> and it tells the compiler these members must be initialized by all constructors or by the object initializer.</p><p>Why is this useful?</p><p>Before <strong>C# 11</strong>, the only way to enforce a property being set was through a constructor. If you used an object initializer you could bypass the constructor and not initialize some properties.</p><p>Here&#39;s how you can say that a property is required:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContentCreator</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> required <span class="token return-type class-name"><span class="token keyword">string</span></span> Firstname <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> MiddleName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> required <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you try to create a new <code>ContentCreator</code> instance without initializing the <code>required</code> properties you get a compile error:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> creator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ContentCreator</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    FirstName <span class="token operator">=</span> <span class="token string">&quot;Milan&quot;</span> <span class="token comment">// Error: No LastName</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="generic-attributes" tabindex="-1"><a class="header-anchor" href="#generic-attributes"><span>Generic Attributes</span></a></h2><p>You can now declare a <em>generic</em> class whose base class is <code>Attribute</code>.</p><p>Before <strong>C# 11</strong>, if you wanted to pass in a type as a parameter to an <code>Attribute</code> you would need to pass it through the constructor:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TypedAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">TypedAttribute</span><span class="token punctuation">(</span><span class="token class-name">Type</span> t<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Param <span class="token operator">=</span> t<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">Type</span> Param <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And here&#39;s how you would use it with the <code>typeof</code> operator:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">TypedAttribute</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">default</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Using the generic attributes feature, you can now define it like this:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TypedAttribute<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span> <span class="token punctuation">{</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now, we can specify the type parameter as a generic argument:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token punctuation">[</span><span class="token generic-method"><span class="token function">TypedAttribute</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">default</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="static-abstract-members-in-interfaces" tabindex="-1"><a class="header-anchor" href="#static-abstract-members-in-interfaces"><span>Static Abstract Members in Interfaces</span></a></h2><p>This is a very interesting feature that allows abstracting of static operations. An example of this would be operators.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMonoid<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span> <span class="token keyword">where</span> <span class="token class-name">TSelf</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMonoid<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">abstract</span> TSelf <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">TSelf</span> a<span class="token punctuation">,</span> <span class="token class-name">TSelf</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token return-type class-name">TSelf</span> Zero <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>How can we use the <code>IMonoid</code> interface?</p><p>It may be confusing at first, since the members are virtual and there is no instance to call the virtual members on. The solution is to use generics and let the compiler infer the rest.</p><p>Here&#39;s a simple example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">AddAll</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> elements<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMonoid<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">T</span> result <span class="token operator">=</span> T<span class="token punctuation">.</span>Zero<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> element <span class="token keyword">in</span> elements<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">         result <span class="token operator">+=</span> element<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29)),s("p",null,[n[8]||(n[8]=a("If you want to learn more, check out the docs on ")),s("a",T,[e(l,{icon:"fa-brands fa-microsoft"}),n[6]||(n[6]=a("static abstract interface methods"))]),n[9]||(n[9]=a(" and ")),s("a",N,[e(l,{icon:"fa-brands fa-microsoft"}),n[7]||(n[7]=a("generic math"))]),n[10]||(n[10]=a("."))]),n[17]||(n[17]=i(`<hr><h2 id="file-keyword" tabindex="-1"><a class="header-anchor" href="#file-keyword"><span>File Keyword</span></a></h2><p>With the new <code>file</code> keyword you can define a type whose scope and visibility is restricted to the file in which it is declared.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">file <span class="token keyword">class</span> <span class="token class-name">HiddenClass</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This feature is practical when used inside of source generators, to avoid collisions when naming generated types.</p><p>But you may be able to find a use for it in your application.</p><hr><h2 id="linq-order-and-orderdescending" tabindex="-1"><a class="header-anchor" href="#linq-order-and-orderdescending"><span>LINQ Order and OrderDescending</span></a></h2><p>The new <code>Order</code> and <code>OrderDescending</code> methods allow us to sort an <code>IEnumerable</code>, which simplifies the code for sorting.</p><p>Here&#39;s an example of ordering an array:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">21</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> arrayAsc <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> arrayDesc <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">OrderDescending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I want to highlight that <code>IQueryable</code> also supports the new methods.</p><hr><h2 id="will-you-upgrade-to-net-7" tabindex="-1"><a class="header-anchor" href="#will-you-upgrade-to-net-7"><span>Will You Upgrade to .NET 7?</span></a></h2><p><strong>.NET 7</strong> is not an LTS (Long Term Support) release, and will be in support until May 2024, with <strong>.NET 8</strong> releasing in November 2023.</p><p>Here are a few reasons why you should consider upgrading:</p><ul><li>Major performance improvements</li><li>New features in <strong>.NET 7</strong></li><li>New features in <strong>EF Core 7</strong></li><li>Easier migration to <strong>.NET 8</strong></li></ul><p>I will be moving some of my new projects from <strong>.NET 6</strong> to <strong>.NET 7</strong>.</p><p>And I will also upgrade all of my YouTube content to <strong>.NET 7</strong>.</p>`,19))])}const A=d(b,[["render",I]]),x=JSON.parse(`{"path":"/milanjovanovic.tech/whats-new-in-dotnet-7.html","title":"What's New In .NET 7?","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"What's New In .NET 7?","description":"Article(s) > What's New In .NET 7?","icon":"iconfont icon-csharp","category":["C#","DotNet","Article(s)"],"tag":["blog","milanjovanovic.tech","cs","c#","csharp","dotnet"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What's New In .NET 7?\\",\\"image\\":[\\"https://milanjovanovic.tech/blog-covers/mnw_011.png\\"],\\"datePublished\\":\\"2022-11-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Milan Jovanović\\"}]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/whats-new-in-dotnet-7.html"}],["meta",{"property":"og:site_name","content":"📚Bookshelf"}],["meta",{"property":"og:title","content":"What's New In .NET 7?"}],["meta",{"property":"og:description","content":"Article(s) > What's New In .NET 7?"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://milanjovanovic.tech/blog-covers/mnw_011.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://milanjovanovic.tech/blog-covers/mnw_011.png"}],["meta",{"name":"twitter:image:alt","content":"What's New In .NET 7?"}],["meta",{"property":"article:author","content":"Milan Jovanović"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:tag","content":"csharp"}],["meta",{"property":"article:tag","content":"c#"}],["meta",{"property":"article:tag","content":"cs"}],["meta",{"property":"article:tag","content":"milanjovanovic.tech"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:published_time","content":"2022-11-12T00:00:00.000Z"}],[{"meta":null},{"property":"og:title","content":"Article(s) > What's New In .NET 7?"},{"property":"og:description","content":"What's New In .NET 7?"},{"property":"og:url","content":"https://chanhi2000.github.io/bookshelf/milanjovanovic.tech/whats-new-in-dotnet-7.html"}]],"prev":"/programming/cs/articles/README.md","date":"2022-11-12T00:00:00.000Z","isOriginal":false,"author":"Milan Jovanović","cover":"https://milanjovanovic.tech/blog-covers/mnw_011.png"},"git":{},"readingTime":{"minutes":2.91,"words":873},"filePathRelative":"milanjovanovic.tech/whats-new-in-dotnet-7.md","copyright":{"author":"Milan Jovanović"}}`);export{A as comp,x as data};
